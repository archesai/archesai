name: Create GCP Release
on:
  workflow_dispatch:

jobs:
  extract-sha:
    runs-on: ubuntu-latest
    outputs:
      ui_sha: ${{ steps.ui_sha.outputs.ui_sha }}
      api_sha: ${{ steps.api_sha.outputs.api_sha }}
      pyservice_sha: ${{ steps.pyservice_sha.outputs.pyservice_sha }}
    steps:
      - name: Checkout ui repo
        uses: actions/checkout@v2
        with:
          repository: filechat-io/ui
          token: ${{ secrets.PAT }}

      - name: Get ui SHA
        run: echo "ui_sha=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"
        id: ui_sha

      - name: Checkout api repo
        uses: actions/checkout@v2
        with:
          repository: filechat-io/api
          token: ${{ secrets.PAT }}

      - name: Get api SHA
        run: echo "api_sha=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"
        id: api_sha

      - name: Checkout pyservice repo
        uses: actions/checkout@v2
        with:
          repository: filechat-io/pyservice
          token: ${{ secrets.PAT }}

      - name: Get pyservice SHA
        run: echo "pyservice_sha=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"
        id: pyservice_sha


  # e2e-test:
  #   needs: extract-sha
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v2

  #     - name: Print SHAs
  #       run: |
  #         echo "ui_sha=${{ needs.extract-sha.outputs.ui_sha }}"
  #         echo "api_sha=${{ needs.extract-sha.outputs.api_sha }}"
  #         echo "pyservice_sha=${{ needs.extract-sha.outputs.pyservice_sha }}"

  #     - name: Set up YQ for YAML manipulation
  #       run: |
  #         sudo wget -O /usr/bin/yq https://github.com/mikefarah/yq/releases/download/v4.13.2/yq_linux_amd64
  #         sudo chmod +x /usr/bin/yq

  #     - name: Update image tags in Docker Compose
  #       run: |
  #         yq eval '.services.arches-api.image = "us-west2-docker.pkg.dev/filechat-io/images/arches-api:${{ env.API_SHA }}"' -i docker-compose.yaml          
  #         yq eval '.services.arches-pyservice.image = "us-west2-docker.pkg.dev/filechat-io/images/arches-pyservice:${{ env.PYSERVICE_SHA }}"' -i docker-compose.yaml
  #         yq eval '.services.arches-ui.image = "us-west2-docker.pkg.dev/filechat-io/images/arches-ui:${{ env.UI_SHA }}"' -i docker-compose.yaml
  #       env:
  #         UI_SHA: ${{ needs.extract-sha.outputs.ui_sha }}
  #         API_SHA: ${{ needs.extract-sha.outputs.api_sha }}
  #         PYSERVICE_SHA: ${{ needs.extract-sha.outputs.pyservice_sha }}

  #     - name: Download API repo
  #       uses: actions/checkout@v2
  #       with:
  #         repository: filechat-io/api
  #         token: ${{ secrets.PAT }}
  #         path: ./api
      
  #     - name: Write env file and create fake one for ui so docker compose doesn't fail
  #       run: |
  #         echo "${{ secrets.DEV_ENV_FILE }}" > ./api/.env.minimal
  #         mkdir ui
  #         echo "" > ./ui/.env.minimal

  #     - id: "auth"
  #       name: "Authenticate to Google Cloud"
  #       uses: "google-github-actions/auth@v1"
  #       with:
  #         credentials_json: ${{ secrets.SA }}

  #     - name: Setup Google Cloud SDK
  #       uses: google-github-actions/setup-gcloud@v1.1.1
  #       with:
  #         project_id: filechat-io

  #     - name: Log into registry
  #       run: |
  #         gcloud auth configure-docker \
  #           us-west2-docker.pkg.dev

  #     - name: Run e2e tests
  #       run: |
  #         PROFILE=minimal docker compose up -d arches-api arches-pyservice arches-postgres arches-redis arches-firebase
  #         PROFILE=minimal docker compose -f docker-compose.yaml -f docker-compose.dev.yaml up arches-api-test-e2e --build

  release:
    # needs: [extract-sha, e2e-test]
    needs: [extract-sha]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: ${{ secrets.SA }}

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1.1.1
        with:
          project_id: filechat-io

      - name: Install Kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: Set up YQ for YAML manipulation
        run: |
          sudo wget -O /usr/bin/yq https://github.com/mikefarah/yq/releases/download/v4.13.2/yq_linux_amd64
          sudo chmod +x /usr/bin/yq

      - name: Update image tags in Kustomization file
        run: |
          yq eval -i ".images[] |= select(.name == \"us-west2-docker.pkg.dev/filechat-io/images/arches-api\").newTag = \"${{ env.API_SHA }}\"" ./kubernetes/overlays/stage/kustomization.yaml
          yq eval -i ".images[] |= select(.name == \"us-west2-docker.pkg.dev/filechat-io/images/arches-ui\").newTag = \"${{ env.UI_SHA }}\"" ./kubernetes/overlays/stage/kustomization.yaml
          yq eval -i ".images[] |= select(.name == \"us-west2-docker.pkg.dev/filechat-io/images/arches-pyservice\").newTag = \"${{ env.PYSERVICE_SHA }}\"" ./kubernetes/overlays/stage/kustomization.yaml
        env:
          UI_SHA: ${{ needs.extract-sha.outputs.ui_sha }}
          API_SHA: ${{ needs.extract-sha.outputs.api_sha }}
          PYSERVICE_SHA: ${{ needs.extract-sha.outputs.pyservice_sha }}

      - name: Deploy to Google Cloud
        run: |
          cat ./kubernetes/overlays/stage/kustomization.yaml
          echo "${{ secrets.PROD_ENV_FILE }}" > ./kubernetes/overlays/stage/.env.production
          echo "${{ secrets.PROD_REDIS_CA }}" > ./kubernetes/overlays/stage/redis-ca.pem
          gcloud components install gke-gcloud-auth-plugin
          gcloud container clusters get-credentials arches-cluster --zone us-central1-c --project filechat-io
          kubectl apply -k ./kubernetes/overlays/stage

