name: Test Coverage
on: [push, pull_request]

jobs:
  test-coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-go@v5
        with:
          go-version: "1.25.1"

      - run: go mod download

      - run: |
          go test -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -func=coverage.out > coverage.txt

      - name: Generate coverage report
        run: chmod +x scripts/generate-coverage-report.sh && ./scripts/generate-coverage-report.sh

      # - uses: codecov/codecov-action@v5
      #   with:
      #     file: ./coverage.out
      #     flags: unittests
      #     name: codecov-umbrella
      #     fail_ci_if_error: false
      #   env:
      #     CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - if: github.event_name == 'pull_request'
        uses: actions/github-script@v8
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');

            // Read coverage summary
            const coverageTxt = fs.readFileSync('coverage.txt', 'utf8');
            const lines = coverageTxt.split('\n');
            const totalLine = lines[lines.length - 2] || lines[lines.length - 1];
            const totalCoverage = totalLine.split('\t').pop().trim();

            // Create comment body
            let body = `## üìä Test Coverage Report\n\n`;
            body += `**Total Coverage:** ${totalCoverage}\n\n`;

            // Add package coverage table
            body += `<details>\n<summary>Coverage by Package</summary>\n\n`;
            body += `| Package | Coverage |\n`;
            body += `|---------|----------|\n`;

            // Parse test output for package coverage
            const testOutput = await exec.getExecOutput('go', ['test', '-coverprofile=coverage.out', './...'], {silent: true});
            const packageLines = testOutput.stdout.split('\n').filter(line => line.includes('coverage:'));

            packageLines.forEach(line => {
              const match = line.match(/^(ok|FAIL)\s+(\S+)\s+[\d.]+s\s+coverage:\s+([\d.]+%)/);
              if (match) {
                const [, status, pkg, coverage] = match;
                const emoji = status === 'ok' ? '‚úÖ' : '‚ùå';
                body += `| ${emoji} ${pkg} | ${coverage} |\n`;
              }
            });

            body += `\n</details>\n\n`;

            // Add comparison with base branch if available
            body += `<details>\n<summary>Coverage Details</summary>\n\n`;
            body += `\`\`\`\n`;
            body += coverageTxt.substring(0, 2000); // Limit to avoid comment size limits
            if (coverageTxt.length > 2000) {
              body += `\n... (truncated)\n`;
            }
            body += `\`\`\`\n`;
            body += `</details>\n`;

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('Test Coverage Report')
            );

            // Update or create comment
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - if: github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          if [[ -n $(git status --porcelain docs/TEST_COVERAGE_REPORT.md) ]]; then
            git add docs/TEST_COVERAGE_REPORT.md
            git commit -m "docs: update test coverage report [skip ci]"
            git push
          fi

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.txt
            docs/TEST_COVERAGE_REPORT.md
