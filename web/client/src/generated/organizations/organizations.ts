/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v0.0.0
 */

import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import { customFetch } from "../../fetcher";
import type {
  BadRequestResponse,
  CreateOrganization201,
  CreateOrganizationBody,
  DeleteOrganization200,
  GetOrganization200,
  ListOrganizations200,
  ListOrganizationsParams,
  NotFoundResponse,
  UnauthorizedResponse,
  UpdateOrganization200,
  UpdateOrganizationBody,
  Uuid,
} from "../orval.schemas";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Create an organization
 * @summary Create an organization
 */
export const getCreateOrganizationUrl = () => {
  return `/organizations`;
};

export const createOrganization = async (
  createOrganizationBody: CreateOrganizationBody,
  options?: RequestInit,
): Promise<CreateOrganization201> => {
  return customFetch<CreateOrganization201>(getCreateOrganizationUrl(), {
    ...options,
    body: JSON.stringify(createOrganizationBody),
    headers: { "Content-Type": "application/json", ...options?.headers },
    method: "POST",
  });
};

export const getCreateOrganizationMutationOptions = <
  TError = BadRequestResponse | UnauthorizedResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createOrganization>>,
    TError,
    { data: CreateOrganizationBody },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createOrganization>>,
  TError,
  { data: CreateOrganizationBody },
  TContext
> => {
  const mutationKey = ["createOrganization"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createOrganization>>,
    { data: CreateOrganizationBody }
  > = (props) => {
    const { data } = props ?? {};

    return createOrganization(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateOrganizationMutationResult = NonNullable<
  Awaited<ReturnType<typeof createOrganization>>
>;
export type CreateOrganizationMutationBody = CreateOrganizationBody;
export type CreateOrganizationMutationError =
  | BadRequestResponse
  | UnauthorizedResponse;

/**
 * @summary Create an organization
 */
export const useCreateOrganization = <
  TError = BadRequestResponse | UnauthorizedResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createOrganization>>,
      TError,
      { data: CreateOrganizationBody },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createOrganization>>,
  TError,
  { data: CreateOrganizationBody },
  TContext
> => {
  const mutationOptions = getCreateOrganizationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * List organizations
 * @summary List organizations
 */
export const getListOrganizationsUrl = (params?: ListOrganizationsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    const explodeParameters = ["sort"];

    if (Array.isArray(value) && explodeParameters.includes(key)) {
      value.forEach((v) =>
        normalizedParams.append(key, v === null ? "null" : v.toString()),
      );
      return;
    }

    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/organizations?${stringifiedParams}`
    : `/organizations`;
};

export const listOrganizations = async (
  params?: ListOrganizationsParams,
  options?: RequestInit,
): Promise<ListOrganizations200> => {
  return customFetch<ListOrganizations200>(getListOrganizationsUrl(params), {
    ...options,
    method: "GET",
  });
};

export const getListOrganizationsQueryKey = (
  params?: ListOrganizationsParams,
) => {
  return [`/organizations`, ...(params ? [params] : [])] as const;
};

export const getListOrganizationsQueryOptions = <
  TData = Awaited<ReturnType<typeof listOrganizations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  params?: ListOrganizationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listOrganizations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getListOrganizationsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listOrganizations>>
  > = ({ signal }) => listOrganizations(params, { signal, ...requestOptions });

  return { queryFn, queryKey, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listOrganizations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListOrganizationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listOrganizations>>
>;
export type ListOrganizationsQueryError =
  | BadRequestResponse
  | UnauthorizedResponse;

export function useListOrganizations<
  TData = Awaited<ReturnType<typeof listOrganizations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  params: undefined | ListOrganizationsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listOrganizations>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listOrganizations>>,
          TError,
          Awaited<ReturnType<typeof listOrganizations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListOrganizations<
  TData = Awaited<ReturnType<typeof listOrganizations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  params?: ListOrganizationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listOrganizations>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listOrganizations>>,
          TError,
          Awaited<ReturnType<typeof listOrganizations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListOrganizations<
  TData = Awaited<ReturnType<typeof listOrganizations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  params?: ListOrganizationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listOrganizations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List organizations
 */

export function useListOrganizations<
  TData = Awaited<ReturnType<typeof listOrganizations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  params?: ListOrganizationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listOrganizations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListOrganizationsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getListOrganizationsSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof listOrganizations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  params?: ListOrganizationsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listOrganizations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getListOrganizationsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listOrganizations>>
  > = ({ signal }) => listOrganizations(params, { signal, ...requestOptions });

  return { queryFn, queryKey, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof listOrganizations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListOrganizationsSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof listOrganizations>>
>;
export type ListOrganizationsSuspenseQueryError =
  | BadRequestResponse
  | UnauthorizedResponse;

export function useListOrganizationsSuspense<
  TData = Awaited<ReturnType<typeof listOrganizations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  params: undefined | ListOrganizationsParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listOrganizations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListOrganizationsSuspense<
  TData = Awaited<ReturnType<typeof listOrganizations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  params?: ListOrganizationsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listOrganizations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListOrganizationsSuspense<
  TData = Awaited<ReturnType<typeof listOrganizations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  params?: ListOrganizationsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listOrganizations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List organizations
 */

export function useListOrganizationsSuspense<
  TData = Awaited<ReturnType<typeof listOrganizations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  params?: ListOrganizationsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof listOrganizations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListOrganizationsSuspenseQueryOptions(
    params,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Delete an organization
 * @summary Delete an organization
 */
export const getDeleteOrganizationUrl = (id: Uuid | undefined | null) => {
  return `/organizations/${id}`;
};

export const deleteOrganization = async (
  id: Uuid | undefined | null,
  options?: RequestInit,
): Promise<DeleteOrganization200> => {
  return customFetch<DeleteOrganization200>(getDeleteOrganizationUrl(id), {
    ...options,
    method: "DELETE",
  });
};

export const getDeleteOrganizationMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteOrganization>>,
    TError,
    { id: Uuid | undefined | null },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteOrganization>>,
  TError,
  { id: Uuid | undefined | null },
  TContext
> => {
  const mutationKey = ["deleteOrganization"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteOrganization>>,
    { id: Uuid | undefined | null }
  > = (props) => {
    const { id } = props ?? {};

    return deleteOrganization(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteOrganizationMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteOrganization>>
>;

export type DeleteOrganizationMutationError = NotFoundResponse;

/**
 * @summary Delete an organization
 */
export const useDeleteOrganization = <
  TError = NotFoundResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteOrganization>>,
      TError,
      { id: Uuid | undefined | null },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteOrganization>>,
  TError,
  { id: Uuid | undefined | null },
  TContext
> => {
  const mutationOptions = getDeleteOrganizationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Get an organization
 * @summary Get an organization
 */
export const getGetOrganizationUrl = (id: Uuid | undefined | null) => {
  return `/organizations/${id}`;
};

export const getOrganization = async (
  id: Uuid | undefined | null,
  options?: RequestInit,
): Promise<GetOrganization200> => {
  return customFetch<GetOrganization200>(getGetOrganizationUrl(id), {
    ...options,
    method: "GET",
  });
};

export const getGetOrganizationQueryKey = (id?: Uuid | undefined | null) => {
  return [`/organizations/${id}`] as const;
};

export const getGetOrganizationQueryOptions = <
  TData = Awaited<ReturnType<typeof getOrganization>>,
  TError = NotFoundResponse,
>(
  id: Uuid | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOrganization>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetOrganizationQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrganization>>> = ({
    signal,
  }) => getOrganization(id, { signal, ...requestOptions });

  return {
    enabled: !!id,
    queryFn,
    queryKey,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getOrganization>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetOrganizationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOrganization>>
>;
export type GetOrganizationQueryError = NotFoundResponse;

export function useGetOrganization<
  TData = Awaited<ReturnType<typeof getOrganization>>,
  TError = NotFoundResponse,
>(
  id: Uuid | undefined | null,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOrganization>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrganization>>,
          TError,
          Awaited<ReturnType<typeof getOrganization>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetOrganization<
  TData = Awaited<ReturnType<typeof getOrganization>>,
  TError = NotFoundResponse,
>(
  id: Uuid | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOrganization>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOrganization>>,
          TError,
          Awaited<ReturnType<typeof getOrganization>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetOrganization<
  TData = Awaited<ReturnType<typeof getOrganization>>,
  TError = NotFoundResponse,
>(
  id: Uuid | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOrganization>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get an organization
 */

export function useGetOrganization<
  TData = Awaited<ReturnType<typeof getOrganization>>,
  TError = NotFoundResponse,
>(
  id: Uuid | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOrganization>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetOrganizationQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetOrganizationSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getOrganization>>,
  TError = NotFoundResponse,
>(
  id: Uuid | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOrganization>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetOrganizationQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOrganization>>> = ({
    signal,
  }) => getOrganization(id, { signal, ...requestOptions });

  return { queryFn, queryKey, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getOrganization>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetOrganizationSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOrganization>>
>;
export type GetOrganizationSuspenseQueryError = NotFoundResponse;

export function useGetOrganizationSuspense<
  TData = Awaited<ReturnType<typeof getOrganization>>,
  TError = NotFoundResponse,
>(
  id: Uuid | undefined | null,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOrganization>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetOrganizationSuspense<
  TData = Awaited<ReturnType<typeof getOrganization>>,
  TError = NotFoundResponse,
>(
  id: Uuid | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOrganization>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetOrganizationSuspense<
  TData = Awaited<ReturnType<typeof getOrganization>>,
  TError = NotFoundResponse,
>(
  id: Uuid | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOrganization>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get an organization
 */

export function useGetOrganizationSuspense<
  TData = Awaited<ReturnType<typeof getOrganization>>,
  TError = NotFoundResponse,
>(
  id: Uuid | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOrganization>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetOrganizationSuspenseQueryOptions(id, options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update an organization
 * @summary Update an organization
 */
export const getUpdateOrganizationUrl = (id: Uuid | undefined | null) => {
  return `/organizations/${id}`;
};

export const updateOrganization = async (
  id: Uuid | undefined | null,
  updateOrganizationBody: UpdateOrganizationBody,
  options?: RequestInit,
): Promise<UpdateOrganization200> => {
  return customFetch<UpdateOrganization200>(getUpdateOrganizationUrl(id), {
    ...options,
    body: JSON.stringify(updateOrganizationBody),
    headers: { "Content-Type": "application/json", ...options?.headers },
    method: "PATCH",
  });
};

export const getUpdateOrganizationMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateOrganization>>,
    TError,
    { id: Uuid | undefined | null; data: UpdateOrganizationBody },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateOrganization>>,
  TError,
  { id: Uuid | undefined | null; data: UpdateOrganizationBody },
  TContext
> => {
  const mutationKey = ["updateOrganization"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateOrganization>>,
    { id: Uuid | undefined | null; data: UpdateOrganizationBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateOrganization(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateOrganizationMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateOrganization>>
>;
export type UpdateOrganizationMutationBody = UpdateOrganizationBody;
export type UpdateOrganizationMutationError = NotFoundResponse;

/**
 * @summary Update an organization
 */
export const useUpdateOrganization = <
  TError = NotFoundResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateOrganization>>,
      TError,
      { id: Uuid | undefined | null; data: UpdateOrganizationBody },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateOrganization>>,
  TError,
  { id: Uuid | undefined | null; data: UpdateOrganizationBody },
  TContext
> => {
  const mutationOptions = getUpdateOrganizationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
