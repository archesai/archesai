/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v0.0.0
 */

import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import { customFetch } from "../../fetcher";
import type {
  BadRequestResponse,
  CreateInvitation201,
  CreateInvitationBody,
  CreateMember201,
  CreateMemberBody,
  CreateOrganization201,
  CreateOrganizationBody,
  DeleteInvitation200,
  DeleteMember200,
  DeleteOrganization200,
  FindManyInvitations200,
  FindManyInvitationsParams,
  FindManyMembers200,
  FindManyMembersParams,
  FindManyOrganizations200,
  FindManyOrganizationsParams,
  GetOneInvitation200,
  GetOneMember200,
  GetOneOrganization200,
  NotFoundResponse,
  UnauthorizedResponse,
  UpdateInvitation200,
  UpdateInvitationBody,
  UpdateMember200,
  UpdateMemberBody,
  UpdateOrganization200,
  UpdateOrganizationBody,
} from "../orval.schemas";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Create a new organization
 * @summary Create a new organization
 */
export const getCreateOrganizationUrl = () => {
  return `/organizations`;
};

export const createOrganization = async (
  createOrganizationBody: CreateOrganizationBody,
  options?: RequestInit,
): Promise<CreateOrganization201> => {
  return customFetch<CreateOrganization201>(getCreateOrganizationUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(createOrganizationBody),
  });
};

export const getCreateOrganizationMutationOptions = <
  TError = BadRequestResponse | UnauthorizedResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createOrganization>>,
    TError,
    { data: CreateOrganizationBody },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createOrganization>>,
  TError,
  { data: CreateOrganizationBody },
  TContext
> => {
  const mutationKey = ["createOrganization"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createOrganization>>,
    { data: CreateOrganizationBody }
  > = (props) => {
    const { data } = props ?? {};

    return createOrganization(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateOrganizationMutationResult = NonNullable<
  Awaited<ReturnType<typeof createOrganization>>
>;
export type CreateOrganizationMutationBody = CreateOrganizationBody;
export type CreateOrganizationMutationError =
  | BadRequestResponse
  | UnauthorizedResponse;

/**
 * @summary Create a new organization
 */
export const useCreateOrganization = <
  TError = BadRequestResponse | UnauthorizedResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createOrganization>>,
      TError,
      { data: CreateOrganizationBody },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createOrganization>>,
  TError,
  { data: CreateOrganizationBody },
  TContext
> => {
  const mutationOptions = getCreateOrganizationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Find many organizations
 * @summary Find many organizations
 */
export const getFindManyOrganizationsUrl = (
  params?: FindManyOrganizationsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    const explodeParameters = ["sort"];

    if (Array.isArray(value) && explodeParameters.includes(key)) {
      value.forEach((v) =>
        normalizedParams.append(key, v === null ? "null" : v.toString()),
      );
      return;
    }

    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/organizations?${stringifiedParams}`
    : `/organizations`;
};

export const findManyOrganizations = async (
  params?: FindManyOrganizationsParams,
  options?: RequestInit,
): Promise<FindManyOrganizations200> => {
  return customFetch<FindManyOrganizations200>(
    getFindManyOrganizationsUrl(params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getFindManyOrganizationsQueryKey = (
  params?: FindManyOrganizationsParams,
) => {
  return [`/organizations`, ...(params ? [params] : [])] as const;
};

export const getFindManyOrganizationsQueryOptions = <
  TData = Awaited<ReturnType<typeof findManyOrganizations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  params?: FindManyOrganizationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyOrganizations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFindManyOrganizationsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof findManyOrganizations>>
  > = ({ signal }) =>
    findManyOrganizations(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findManyOrganizations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FindManyOrganizationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof findManyOrganizations>>
>;
export type FindManyOrganizationsQueryError =
  | BadRequestResponse
  | UnauthorizedResponse;

export function useFindManyOrganizations<
  TData = Awaited<ReturnType<typeof findManyOrganizations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  params: undefined | FindManyOrganizationsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyOrganizations>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findManyOrganizations>>,
          TError,
          Awaited<ReturnType<typeof findManyOrganizations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFindManyOrganizations<
  TData = Awaited<ReturnType<typeof findManyOrganizations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  params?: FindManyOrganizationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyOrganizations>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findManyOrganizations>>,
          TError,
          Awaited<ReturnType<typeof findManyOrganizations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFindManyOrganizations<
  TData = Awaited<ReturnType<typeof findManyOrganizations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  params?: FindManyOrganizationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyOrganizations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Find many organizations
 */

export function useFindManyOrganizations<
  TData = Awaited<ReturnType<typeof findManyOrganizations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  params?: FindManyOrganizationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyOrganizations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getFindManyOrganizationsQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getFindManyOrganizationsSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof findManyOrganizations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  params?: FindManyOrganizationsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyOrganizations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFindManyOrganizationsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof findManyOrganizations>>
  > = ({ signal }) =>
    findManyOrganizations(params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof findManyOrganizations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FindManyOrganizationsSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof findManyOrganizations>>
>;
export type FindManyOrganizationsSuspenseQueryError =
  | BadRequestResponse
  | UnauthorizedResponse;

export function useFindManyOrganizationsSuspense<
  TData = Awaited<ReturnType<typeof findManyOrganizations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  params: undefined | FindManyOrganizationsParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyOrganizations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFindManyOrganizationsSuspense<
  TData = Awaited<ReturnType<typeof findManyOrganizations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  params?: FindManyOrganizationsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyOrganizations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFindManyOrganizationsSuspense<
  TData = Awaited<ReturnType<typeof findManyOrganizations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  params?: FindManyOrganizationsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyOrganizations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Find many organizations
 */

export function useFindManyOrganizationsSuspense<
  TData = Awaited<ReturnType<typeof findManyOrganizations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  params?: FindManyOrganizationsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyOrganizations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getFindManyOrganizationsSuspenseQueryOptions(
    params,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Delete an organization
 * @summary Delete an organization
 */
export const getDeleteOrganizationUrl = (id: string | undefined | null) => {
  return `/organizations/${id}`;
};

export const deleteOrganization = async (
  id: string | undefined | null,
  options?: RequestInit,
): Promise<DeleteOrganization200> => {
  return customFetch<DeleteOrganization200>(getDeleteOrganizationUrl(id), {
    ...options,
    method: "DELETE",
  });
};

export const getDeleteOrganizationMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteOrganization>>,
    TError,
    { id: string | undefined | null },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteOrganization>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationKey = ["deleteOrganization"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteOrganization>>,
    { id: string | undefined | null }
  > = (props) => {
    const { id } = props ?? {};

    return deleteOrganization(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteOrganizationMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteOrganization>>
>;

export type DeleteOrganizationMutationError = NotFoundResponse;

/**
 * @summary Delete an organization
 */
export const useDeleteOrganization = <
  TError = NotFoundResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteOrganization>>,
      TError,
      { id: string | undefined | null },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteOrganization>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationOptions = getDeleteOrganizationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Find an organization
 * @summary Find an organization
 */
export const getGetOneOrganizationUrl = (id: string | undefined | null) => {
  return `/organizations/${id}`;
};

export const getOneOrganization = async (
  id: string | undefined | null,
  options?: RequestInit,
): Promise<GetOneOrganization200> => {
  return customFetch<GetOneOrganization200>(getGetOneOrganizationUrl(id), {
    ...options,
    method: "GET",
  });
};

export const getGetOneOrganizationQueryKey = (
  id?: string | undefined | null,
) => {
  return [`/organizations/${id}`] as const;
};

export const getGetOneOrganizationQueryOptions = <
  TData = Awaited<ReturnType<typeof getOneOrganization>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOneOrganization>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetOneOrganizationQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getOneOrganization>>
  > = ({ signal }) => getOneOrganization(id, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getOneOrganization>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetOneOrganizationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOneOrganization>>
>;
export type GetOneOrganizationQueryError = NotFoundResponse;

export function useGetOneOrganization<
  TData = Awaited<ReturnType<typeof getOneOrganization>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOneOrganization>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOneOrganization>>,
          TError,
          Awaited<ReturnType<typeof getOneOrganization>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetOneOrganization<
  TData = Awaited<ReturnType<typeof getOneOrganization>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOneOrganization>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOneOrganization>>,
          TError,
          Awaited<ReturnType<typeof getOneOrganization>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetOneOrganization<
  TData = Awaited<ReturnType<typeof getOneOrganization>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOneOrganization>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Find an organization
 */

export function useGetOneOrganization<
  TData = Awaited<ReturnType<typeof getOneOrganization>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOneOrganization>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetOneOrganizationQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetOneOrganizationSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getOneOrganization>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneOrganization>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetOneOrganizationQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getOneOrganization>>
  > = ({ signal }) => getOneOrganization(id, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getOneOrganization>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetOneOrganizationSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOneOrganization>>
>;
export type GetOneOrganizationSuspenseQueryError = NotFoundResponse;

export function useGetOneOrganizationSuspense<
  TData = Awaited<ReturnType<typeof getOneOrganization>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneOrganization>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetOneOrganizationSuspense<
  TData = Awaited<ReturnType<typeof getOneOrganization>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneOrganization>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetOneOrganizationSuspense<
  TData = Awaited<ReturnType<typeof getOneOrganization>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneOrganization>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Find an organization
 */

export function useGetOneOrganizationSuspense<
  TData = Awaited<ReturnType<typeof getOneOrganization>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneOrganization>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetOneOrganizationSuspenseQueryOptions(id, options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update an organization
 * @summary Update an organization
 */
export const getUpdateOrganizationUrl = (id: string | undefined | null) => {
  return `/organizations/${id}`;
};

export const updateOrganization = async (
  id: string | undefined | null,
  updateOrganizationBody: UpdateOrganizationBody,
  options?: RequestInit,
): Promise<UpdateOrganization200> => {
  return customFetch<UpdateOrganization200>(getUpdateOrganizationUrl(id), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(updateOrganizationBody),
  });
};

export const getUpdateOrganizationMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateOrganization>>,
    TError,
    { id: string | undefined | null; data: UpdateOrganizationBody },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateOrganization>>,
  TError,
  { id: string | undefined | null; data: UpdateOrganizationBody },
  TContext
> => {
  const mutationKey = ["updateOrganization"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateOrganization>>,
    { id: string | undefined | null; data: UpdateOrganizationBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateOrganization(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateOrganizationMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateOrganization>>
>;
export type UpdateOrganizationMutationBody = UpdateOrganizationBody;
export type UpdateOrganizationMutationError = NotFoundResponse;

/**
 * @summary Update an organization
 */
export const useUpdateOrganization = <
  TError = NotFoundResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateOrganization>>,
      TError,
      { id: string | undefined | null; data: UpdateOrganizationBody },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateOrganization>>,
  TError,
  { id: string | undefined | null; data: UpdateOrganizationBody },
  TContext
> => {
  const mutationOptions = getUpdateOrganizationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Create a new member
 * @summary Create a new member
 */
export const getCreateMemberUrl = (id: string | undefined | null) => {
  return `/organizations/${id}/members`;
};

export const createMember = async (
  id: string | undefined | null,
  createMemberBody: CreateMemberBody,
  options?: RequestInit,
): Promise<CreateMember201> => {
  return customFetch<CreateMember201>(getCreateMemberUrl(id), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(createMemberBody),
  });
};

export const getCreateMemberMutationOptions = <
  TError = BadRequestResponse | UnauthorizedResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createMember>>,
    TError,
    { id: string | undefined | null; data: CreateMemberBody },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createMember>>,
  TError,
  { id: string | undefined | null; data: CreateMemberBody },
  TContext
> => {
  const mutationKey = ["createMember"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createMember>>,
    { id: string | undefined | null; data: CreateMemberBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return createMember(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateMemberMutationResult = NonNullable<
  Awaited<ReturnType<typeof createMember>>
>;
export type CreateMemberMutationBody = CreateMemberBody;
export type CreateMemberMutationError =
  | BadRequestResponse
  | UnauthorizedResponse;

/**
 * @summary Create a new member
 */
export const useCreateMember = <
  TError = BadRequestResponse | UnauthorizedResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createMember>>,
      TError,
      { id: string | undefined | null; data: CreateMemberBody },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createMember>>,
  TError,
  { id: string | undefined | null; data: CreateMemberBody },
  TContext
> => {
  const mutationOptions = getCreateMemberMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Find many members
 * @summary Find many members
 */
export const getFindManyMembersUrl = (
  id: string | undefined | null,
  params?: FindManyMembersParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    const explodeParameters = ["sort"];

    if (Array.isArray(value) && explodeParameters.includes(key)) {
      value.forEach((v) =>
        normalizedParams.append(key, v === null ? "null" : v.toString()),
      );
      return;
    }

    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/organizations/${id}/members?${stringifiedParams}`
    : `/organizations/${id}/members`;
};

export const findManyMembers = async (
  id: string | undefined | null,
  params?: FindManyMembersParams,
  options?: RequestInit,
): Promise<FindManyMembers200> => {
  return customFetch<FindManyMembers200>(getFindManyMembersUrl(id, params), {
    ...options,
    method: "GET",
  });
};

export const getFindManyMembersQueryKey = (
  id?: string | undefined | null,
  params?: FindManyMembersParams,
) => {
  return [`/organizations/${id}/members`, ...(params ? [params] : [])] as const;
};

export const getFindManyMembersQueryOptions = <
  TData = Awaited<ReturnType<typeof findManyMembers>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  id: string | undefined | null,
  params?: FindManyMembersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyMembers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFindManyMembersQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findManyMembers>>> = ({
    signal,
  }) => findManyMembers(id, params, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof findManyMembers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FindManyMembersQueryResult = NonNullable<
  Awaited<ReturnType<typeof findManyMembers>>
>;
export type FindManyMembersQueryError =
  | BadRequestResponse
  | UnauthorizedResponse;

export function useFindManyMembers<
  TData = Awaited<ReturnType<typeof findManyMembers>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  id: string | undefined | null,
  params: undefined | FindManyMembersParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyMembers>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findManyMembers>>,
          TError,
          Awaited<ReturnType<typeof findManyMembers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFindManyMembers<
  TData = Awaited<ReturnType<typeof findManyMembers>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  id: string | undefined | null,
  params?: FindManyMembersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyMembers>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findManyMembers>>,
          TError,
          Awaited<ReturnType<typeof findManyMembers>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFindManyMembers<
  TData = Awaited<ReturnType<typeof findManyMembers>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  id: string | undefined | null,
  params?: FindManyMembersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyMembers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Find many members
 */

export function useFindManyMembers<
  TData = Awaited<ReturnType<typeof findManyMembers>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  id: string | undefined | null,
  params?: FindManyMembersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyMembers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getFindManyMembersQueryOptions(id, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getFindManyMembersSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof findManyMembers>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  id: string | undefined | null,
  params?: FindManyMembersParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyMembers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFindManyMembersQueryKey(id, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findManyMembers>>> = ({
    signal,
  }) => findManyMembers(id, params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof findManyMembers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FindManyMembersSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof findManyMembers>>
>;
export type FindManyMembersSuspenseQueryError =
  | BadRequestResponse
  | UnauthorizedResponse;

export function useFindManyMembersSuspense<
  TData = Awaited<ReturnType<typeof findManyMembers>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  id: string | undefined | null,
  params: undefined | FindManyMembersParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyMembers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFindManyMembersSuspense<
  TData = Awaited<ReturnType<typeof findManyMembers>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  id: string | undefined | null,
  params?: FindManyMembersParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyMembers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFindManyMembersSuspense<
  TData = Awaited<ReturnType<typeof findManyMembers>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  id: string | undefined | null,
  params?: FindManyMembersParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyMembers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Find many members
 */

export function useFindManyMembersSuspense<
  TData = Awaited<ReturnType<typeof findManyMembers>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  id: string | undefined | null,
  params?: FindManyMembersParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyMembers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getFindManyMembersSuspenseQueryOptions(
    id,
    params,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Delete a member
 * @summary Delete a member
 */
export const getDeleteMemberUrl = (
  id: string | undefined | null,
  memberId: string | undefined | null,
) => {
  return `/organizations/${id}/members/${memberId}`;
};

export const deleteMember = async (
  id: string | undefined | null,
  memberId: string | undefined | null,
  options?: RequestInit,
): Promise<DeleteMember200> => {
  return customFetch<DeleteMember200>(getDeleteMemberUrl(id, memberId), {
    ...options,
    method: "DELETE",
  });
};

export const getDeleteMemberMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMember>>,
    TError,
    { id: string | undefined | null; memberId: string | undefined | null },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteMember>>,
  TError,
  { id: string | undefined | null; memberId: string | undefined | null },
  TContext
> => {
  const mutationKey = ["deleteMember"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteMember>>,
    { id: string | undefined | null; memberId: string | undefined | null }
  > = (props) => {
    const { id, memberId } = props ?? {};

    return deleteMember(id, memberId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteMemberMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteMember>>
>;

export type DeleteMemberMutationError = NotFoundResponse;

/**
 * @summary Delete a member
 */
export const useDeleteMember = <TError = NotFoundResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteMember>>,
      TError,
      { id: string | undefined | null; memberId: string | undefined | null },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteMember>>,
  TError,
  { id: string | undefined | null; memberId: string | undefined | null },
  TContext
> => {
  const mutationOptions = getDeleteMemberMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Find a member
 * @summary Find a member
 */
export const getGetOneMemberUrl = (
  id: string | undefined | null,
  memberId: string | undefined | null,
) => {
  return `/organizations/${id}/members/${memberId}`;
};

export const getOneMember = async (
  id: string | undefined | null,
  memberId: string | undefined | null,
  options?: RequestInit,
): Promise<GetOneMember200> => {
  return customFetch<GetOneMember200>(getGetOneMemberUrl(id, memberId), {
    ...options,
    method: "GET",
  });
};

export const getGetOneMemberQueryKey = (
  id?: string | undefined | null,
  memberId?: string | undefined | null,
) => {
  return [`/organizations/${id}/members/${memberId}`] as const;
};

export const getGetOneMemberQueryOptions = <
  TData = Awaited<ReturnType<typeof getOneMember>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  memberId: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneMember>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetOneMemberQueryKey(id, memberId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneMember>>> = ({
    signal,
  }) => getOneMember(id, memberId, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!(id && memberId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getOneMember>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetOneMemberQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOneMember>>
>;
export type GetOneMemberQueryError = NotFoundResponse;

export function useGetOneMember<
  TData = Awaited<ReturnType<typeof getOneMember>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  memberId: string | undefined | null,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneMember>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOneMember>>,
          TError,
          Awaited<ReturnType<typeof getOneMember>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetOneMember<
  TData = Awaited<ReturnType<typeof getOneMember>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  memberId: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneMember>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOneMember>>,
          TError,
          Awaited<ReturnType<typeof getOneMember>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetOneMember<
  TData = Awaited<ReturnType<typeof getOneMember>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  memberId: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneMember>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Find a member
 */

export function useGetOneMember<
  TData = Awaited<ReturnType<typeof getOneMember>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  memberId: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneMember>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetOneMemberQueryOptions(id, memberId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetOneMemberSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getOneMember>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  memberId: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneMember>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetOneMemberQueryKey(id, memberId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneMember>>> = ({
    signal,
  }) => getOneMember(id, memberId, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getOneMember>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetOneMemberSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOneMember>>
>;
export type GetOneMemberSuspenseQueryError = NotFoundResponse;

export function useGetOneMemberSuspense<
  TData = Awaited<ReturnType<typeof getOneMember>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  memberId: string | undefined | null,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneMember>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetOneMemberSuspense<
  TData = Awaited<ReturnType<typeof getOneMember>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  memberId: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneMember>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetOneMemberSuspense<
  TData = Awaited<ReturnType<typeof getOneMember>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  memberId: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneMember>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Find a member
 */

export function useGetOneMemberSuspense<
  TData = Awaited<ReturnType<typeof getOneMember>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  memberId: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneMember>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetOneMemberSuspenseQueryOptions(
    id,
    memberId,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update a member
 * @summary Update a member
 */
export const getUpdateMemberUrl = (
  id: string | undefined | null,
  memberId: string | undefined | null,
) => {
  return `/organizations/${id}/members/${memberId}`;
};

export const updateMember = async (
  id: string | undefined | null,
  memberId: string | undefined | null,
  updateMemberBody: UpdateMemberBody,
  options?: RequestInit,
): Promise<UpdateMember200> => {
  return customFetch<UpdateMember200>(getUpdateMemberUrl(id, memberId), {
    ...options,
    method: "PATCH",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(updateMemberBody),
  });
};

export const getUpdateMemberMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateMember>>,
    TError,
    {
      id: string | undefined | null;
      memberId: string | undefined | null;
      data: UpdateMemberBody;
    },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateMember>>,
  TError,
  {
    id: string | undefined | null;
    memberId: string | undefined | null;
    data: UpdateMemberBody;
  },
  TContext
> => {
  const mutationKey = ["updateMember"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateMember>>,
    {
      id: string | undefined | null;
      memberId: string | undefined | null;
      data: UpdateMemberBody;
    }
  > = (props) => {
    const { id, memberId, data } = props ?? {};

    return updateMember(id, memberId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateMemberMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateMember>>
>;
export type UpdateMemberMutationBody = UpdateMemberBody;
export type UpdateMemberMutationError = NotFoundResponse;

/**
 * @summary Update a member
 */
export const useUpdateMember = <TError = NotFoundResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateMember>>,
      TError,
      {
        id: string | undefined | null;
        memberId: string | undefined | null;
        data: UpdateMemberBody;
      },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateMember>>,
  TError,
  {
    id: string | undefined | null;
    memberId: string | undefined | null;
    data: UpdateMemberBody;
  },
  TContext
> => {
  const mutationOptions = getUpdateMemberMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Create a new invitation
 * @summary Create a new invitation
 */
export const getCreateInvitationUrl = (id: string | undefined | null) => {
  return `/organizations/${id}/invitations`;
};

export const createInvitation = async (
  id: string | undefined | null,
  createInvitationBody: CreateInvitationBody,
  options?: RequestInit,
): Promise<CreateInvitation201> => {
  return customFetch<CreateInvitation201>(getCreateInvitationUrl(id), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(createInvitationBody),
  });
};

export const getCreateInvitationMutationOptions = <
  TError = BadRequestResponse | UnauthorizedResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createInvitation>>,
    TError,
    { id: string | undefined | null; data: CreateInvitationBody },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createInvitation>>,
  TError,
  { id: string | undefined | null; data: CreateInvitationBody },
  TContext
> => {
  const mutationKey = ["createInvitation"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createInvitation>>,
    { id: string | undefined | null; data: CreateInvitationBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return createInvitation(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateInvitationMutationResult = NonNullable<
  Awaited<ReturnType<typeof createInvitation>>
>;
export type CreateInvitationMutationBody = CreateInvitationBody;
export type CreateInvitationMutationError =
  | BadRequestResponse
  | UnauthorizedResponse;

/**
 * @summary Create a new invitation
 */
export const useCreateInvitation = <
  TError = BadRequestResponse | UnauthorizedResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createInvitation>>,
      TError,
      { id: string | undefined | null; data: CreateInvitationBody },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createInvitation>>,
  TError,
  { id: string | undefined | null; data: CreateInvitationBody },
  TContext
> => {
  const mutationOptions = getCreateInvitationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Find many invitations
 * @summary Find many invitations
 */
export const getFindManyInvitationsUrl = (
  id: string | undefined | null,
  params?: FindManyInvitationsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    const explodeParameters = ["sort"];

    if (Array.isArray(value) && explodeParameters.includes(key)) {
      value.forEach((v) =>
        normalizedParams.append(key, v === null ? "null" : v.toString()),
      );
      return;
    }

    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/organizations/${id}/invitations?${stringifiedParams}`
    : `/organizations/${id}/invitations`;
};

export const findManyInvitations = async (
  id: string | undefined | null,
  params?: FindManyInvitationsParams,
  options?: RequestInit,
): Promise<FindManyInvitations200> => {
  return customFetch<FindManyInvitations200>(
    getFindManyInvitationsUrl(id, params),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getFindManyInvitationsQueryKey = (
  id?: string | undefined | null,
  params?: FindManyInvitationsParams,
) => {
  return [
    `/organizations/${id}/invitations`,
    ...(params ? [params] : []),
  ] as const;
};

export const getFindManyInvitationsQueryOptions = <
  TData = Awaited<ReturnType<typeof findManyInvitations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  id: string | undefined | null,
  params?: FindManyInvitationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFindManyInvitationsQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof findManyInvitations>>
  > = ({ signal }) =>
    findManyInvitations(id, params, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof findManyInvitations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FindManyInvitationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof findManyInvitations>>
>;
export type FindManyInvitationsQueryError =
  | BadRequestResponse
  | UnauthorizedResponse;

export function useFindManyInvitations<
  TData = Awaited<ReturnType<typeof findManyInvitations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  id: string | undefined | null,
  params: undefined | FindManyInvitationsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findManyInvitations>>,
          TError,
          Awaited<ReturnType<typeof findManyInvitations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFindManyInvitations<
  TData = Awaited<ReturnType<typeof findManyInvitations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  id: string | undefined | null,
  params?: FindManyInvitationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyInvitations>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findManyInvitations>>,
          TError,
          Awaited<ReturnType<typeof findManyInvitations>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFindManyInvitations<
  TData = Awaited<ReturnType<typeof findManyInvitations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  id: string | undefined | null,
  params?: FindManyInvitationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Find many invitations
 */

export function useFindManyInvitations<
  TData = Awaited<ReturnType<typeof findManyInvitations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  id: string | undefined | null,
  params?: FindManyInvitationsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getFindManyInvitationsQueryOptions(id, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getFindManyInvitationsSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof findManyInvitations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  id: string | undefined | null,
  params?: FindManyInvitationsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getFindManyInvitationsQueryKey(id, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof findManyInvitations>>
  > = ({ signal }) =>
    findManyInvitations(id, params, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof findManyInvitations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type FindManyInvitationsSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof findManyInvitations>>
>;
export type FindManyInvitationsSuspenseQueryError =
  | BadRequestResponse
  | UnauthorizedResponse;

export function useFindManyInvitationsSuspense<
  TData = Awaited<ReturnType<typeof findManyInvitations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  id: string | undefined | null,
  params: undefined | FindManyInvitationsParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFindManyInvitationsSuspense<
  TData = Awaited<ReturnType<typeof findManyInvitations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  id: string | undefined | null,
  params?: FindManyInvitationsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useFindManyInvitationsSuspense<
  TData = Awaited<ReturnType<typeof findManyInvitations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  id: string | undefined | null,
  params?: FindManyInvitationsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Find many invitations
 */

export function useFindManyInvitationsSuspense<
  TData = Awaited<ReturnType<typeof findManyInvitations>>,
  TError = BadRequestResponse | UnauthorizedResponse,
>(
  id: string | undefined | null,
  params?: FindManyInvitationsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyInvitations>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getFindManyInvitationsSuspenseQueryOptions(
    id,
    params,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Delete an invitation
 * @summary Delete an invitation
 */
export const getDeleteInvitationUrl = (
  id: string | undefined | null,
  invitationId: string | undefined | null,
) => {
  return `/organizations/${id}/invitations/${invitationId}`;
};

export const deleteInvitation = async (
  id: string | undefined | null,
  invitationId: string | undefined | null,
  options?: RequestInit,
): Promise<DeleteInvitation200> => {
  return customFetch<DeleteInvitation200>(
    getDeleteInvitationUrl(id, invitationId),
    {
      ...options,
      method: "DELETE",
    },
  );
};

export const getDeleteInvitationMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteInvitation>>,
    TError,
    { id: string | undefined | null; invitationId: string | undefined | null },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteInvitation>>,
  TError,
  { id: string | undefined | null; invitationId: string | undefined | null },
  TContext
> => {
  const mutationKey = ["deleteInvitation"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteInvitation>>,
    { id: string | undefined | null; invitationId: string | undefined | null }
  > = (props) => {
    const { id, invitationId } = props ?? {};

    return deleteInvitation(id, invitationId, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteInvitationMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteInvitation>>
>;

export type DeleteInvitationMutationError = NotFoundResponse;

/**
 * @summary Delete an invitation
 */
export const useDeleteInvitation = <
  TError = NotFoundResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteInvitation>>,
      TError,
      {
        id: string | undefined | null;
        invitationId: string | undefined | null;
      },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteInvitation>>,
  TError,
  { id: string | undefined | null; invitationId: string | undefined | null },
  TContext
> => {
  const mutationOptions = getDeleteInvitationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Find an invitation
 * @summary Find an invitation
 */
export const getGetOneInvitationUrl = (
  id: string | undefined | null,
  invitationId: string | undefined | null,
) => {
  return `/organizations/${id}/invitations/${invitationId}`;
};

export const getOneInvitation = async (
  id: string | undefined | null,
  invitationId: string | undefined | null,
  options?: RequestInit,
): Promise<GetOneInvitation200> => {
  return customFetch<GetOneInvitation200>(
    getGetOneInvitationUrl(id, invitationId),
    {
      ...options,
      method: "GET",
    },
  );
};

export const getGetOneInvitationQueryKey = (
  id?: string | undefined | null,
  invitationId?: string | undefined | null,
) => {
  return [`/organizations/${id}/invitations/${invitationId}`] as const;
};

export const getGetOneInvitationQueryOptions = <
  TData = Awaited<ReturnType<typeof getOneInvitation>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  invitationId: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOneInvitation>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetOneInvitationQueryKey(id, invitationId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getOneInvitation>>
  > = ({ signal }) =>
    getOneInvitation(id, invitationId, { signal, ...requestOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!(id && invitationId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getOneInvitation>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetOneInvitationQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOneInvitation>>
>;
export type GetOneInvitationQueryError = NotFoundResponse;

export function useGetOneInvitation<
  TData = Awaited<ReturnType<typeof getOneInvitation>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  invitationId: string | undefined | null,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOneInvitation>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOneInvitation>>,
          TError,
          Awaited<ReturnType<typeof getOneInvitation>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetOneInvitation<
  TData = Awaited<ReturnType<typeof getOneInvitation>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  invitationId: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOneInvitation>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOneInvitation>>,
          TError,
          Awaited<ReturnType<typeof getOneInvitation>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetOneInvitation<
  TData = Awaited<ReturnType<typeof getOneInvitation>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  invitationId: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOneInvitation>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Find an invitation
 */

export function useGetOneInvitation<
  TData = Awaited<ReturnType<typeof getOneInvitation>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  invitationId: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getOneInvitation>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetOneInvitationQueryOptions(
    id,
    invitationId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetOneInvitationSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getOneInvitation>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  invitationId: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneInvitation>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetOneInvitationQueryKey(id, invitationId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getOneInvitation>>
  > = ({ signal }) =>
    getOneInvitation(id, invitationId, { signal, ...requestOptions });

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getOneInvitation>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetOneInvitationSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOneInvitation>>
>;
export type GetOneInvitationSuspenseQueryError = NotFoundResponse;

export function useGetOneInvitationSuspense<
  TData = Awaited<ReturnType<typeof getOneInvitation>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  invitationId: string | undefined | null,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneInvitation>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetOneInvitationSuspense<
  TData = Awaited<ReturnType<typeof getOneInvitation>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  invitationId: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneInvitation>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetOneInvitationSuspense<
  TData = Awaited<ReturnType<typeof getOneInvitation>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  invitationId: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneInvitation>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Find an invitation
 */

export function useGetOneInvitationSuspense<
  TData = Awaited<ReturnType<typeof getOneInvitation>>,
  TError = NotFoundResponse,
>(
  id: string | undefined | null,
  invitationId: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneInvitation>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetOneInvitationSuspenseQueryOptions(
    id,
    invitationId,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update an invitation
 * @summary Update an invitation
 */
export const getUpdateInvitationUrl = (
  id: string | undefined | null,
  invitationId: string | undefined | null,
) => {
  return `/organizations/${id}/invitations/${invitationId}`;
};

export const updateInvitation = async (
  id: string | undefined | null,
  invitationId: string | undefined | null,
  updateInvitationBody: UpdateInvitationBody,
  options?: RequestInit,
): Promise<UpdateInvitation200> => {
  return customFetch<UpdateInvitation200>(
    getUpdateInvitationUrl(id, invitationId),
    {
      ...options,
      method: "PATCH",
      headers: { "Content-Type": "application/json", ...options?.headers },
      body: JSON.stringify(updateInvitationBody),
    },
  );
};

export const getUpdateInvitationMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateInvitation>>,
    TError,
    {
      id: string | undefined | null;
      invitationId: string | undefined | null;
      data: UpdateInvitationBody;
    },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateInvitation>>,
  TError,
  {
    id: string | undefined | null;
    invitationId: string | undefined | null;
    data: UpdateInvitationBody;
  },
  TContext
> => {
  const mutationKey = ["updateInvitation"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateInvitation>>,
    {
      id: string | undefined | null;
      invitationId: string | undefined | null;
      data: UpdateInvitationBody;
    }
  > = (props) => {
    const { id, invitationId, data } = props ?? {};

    return updateInvitation(id, invitationId, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateInvitationMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateInvitation>>
>;
export type UpdateInvitationMutationBody = UpdateInvitationBody;
export type UpdateInvitationMutationError = NotFoundResponse;

/**
 * @summary Update an invitation
 */
export const useUpdateInvitation = <
  TError = NotFoundResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateInvitation>>,
      TError,
      {
        id: string | undefined | null;
        invitationId: string | undefined | null;
        data: UpdateInvitationBody;
      },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateInvitation>>,
  TError,
  {
    id: string | undefined | null;
    invitationId: string | undefined | null;
    data: UpdateInvitationBody;
  },
  TContext
> => {
  const mutationOptions = getUpdateInvitationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
