/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v0.0.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query';

import type {
  BadRequestResponse,
  CreateOrganization201,
  CreateOrganizationBody,
  DeleteOrganization200,
  GetOneOrganization200,
  ListOrganizations200,
  ListOrganizationsParams,
  NotFoundResponse,
  UnauthorizedResponse,
  UpdateOrganization200,
  UpdateOrganizationBody
} from '../orval.schemas';

import { customFetch } from '../../fetcher';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Create an organization
 * @summary Create an organization
 */
export const getCreateOrganizationUrl = () => {


  

  return `/organizations`
}

export const createOrganization = async (createOrganizationBody: CreateOrganizationBody, options?: RequestInit): Promise<CreateOrganization201> => {
  
  return customFetch<CreateOrganization201>(getCreateOrganizationUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createOrganizationBody,)
  }
);}




export const getCreateOrganizationMutationOptions = <TError = BadRequestResponse | UnauthorizedResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrganization>>, TError,{data: CreateOrganizationBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof createOrganization>>, TError,{data: CreateOrganizationBody}, TContext> => {

const mutationKey = ['createOrganization'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createOrganization>>, {data: CreateOrganizationBody}> = (props) => {
          const {data} = props ?? {};

          return  createOrganization(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateOrganizationMutationResult = NonNullable<Awaited<ReturnType<typeof createOrganization>>>
    export type CreateOrganizationMutationBody = CreateOrganizationBody
    export type CreateOrganizationMutationError = BadRequestResponse | UnauthorizedResponse

    /**
 * @summary Create an organization
 */
export const useCreateOrganization = <TError = BadRequestResponse | UnauthorizedResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrganization>>, TError,{data: CreateOrganizationBody}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createOrganization>>,
        TError,
        {data: CreateOrganizationBody},
        TContext
      > => {

      const mutationOptions = getCreateOrganizationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * List organizations
 * @summary List organizations
 */
export const getListOrganizationsUrl = (params?: ListOrganizationsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    const explodeParameters = ["sort"];

    if (Array.isArray(value) && explodeParameters.includes(key)) {
      value.forEach((v) => normalizedParams.append(key, v === null ? 'null' : v.toString()));
      return;
    }
      
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/organizations?${stringifiedParams}` : `/organizations`
}

export const listOrganizations = async (params?: ListOrganizationsParams, options?: RequestInit): Promise<ListOrganizations200> => {
  
  return customFetch<ListOrganizations200>(getListOrganizationsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getListOrganizationsQueryKey = (params?: ListOrganizationsParams,) => {
    return [`/organizations`, ...(params ? [params]: [])] as const;
    }

    
export const getListOrganizationsQueryOptions = <TData = Awaited<ReturnType<typeof listOrganizations>>, TError = BadRequestResponse | UnauthorizedResponse>(params?: ListOrganizationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listOrganizations>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListOrganizationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listOrganizations>>> = ({ signal }) => listOrganizations(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listOrganizations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListOrganizationsQueryResult = NonNullable<Awaited<ReturnType<typeof listOrganizations>>>
export type ListOrganizationsQueryError = BadRequestResponse | UnauthorizedResponse


export function useListOrganizations<TData = Awaited<ReturnType<typeof listOrganizations>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params: undefined |  ListOrganizationsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listOrganizations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listOrganizations>>,
          TError,
          Awaited<ReturnType<typeof listOrganizations>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListOrganizations<TData = Awaited<ReturnType<typeof listOrganizations>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: ListOrganizationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listOrganizations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listOrganizations>>,
          TError,
          Awaited<ReturnType<typeof listOrganizations>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListOrganizations<TData = Awaited<ReturnType<typeof listOrganizations>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: ListOrganizationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listOrganizations>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List organizations
 */

export function useListOrganizations<TData = Awaited<ReturnType<typeof listOrganizations>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: ListOrganizationsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listOrganizations>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListOrganizationsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getListOrganizationsSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof listOrganizations>>, TError = BadRequestResponse | UnauthorizedResponse>(params?: ListOrganizationsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof listOrganizations>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListOrganizationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listOrganizations>>> = ({ signal }) => listOrganizations(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof listOrganizations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListOrganizationsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof listOrganizations>>>
export type ListOrganizationsSuspenseQueryError = BadRequestResponse | UnauthorizedResponse


export function useListOrganizationsSuspense<TData = Awaited<ReturnType<typeof listOrganizations>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params: undefined |  ListOrganizationsParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof listOrganizations>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListOrganizationsSuspense<TData = Awaited<ReturnType<typeof listOrganizations>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: ListOrganizationsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof listOrganizations>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListOrganizationsSuspense<TData = Awaited<ReturnType<typeof listOrganizations>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: ListOrganizationsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof listOrganizations>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List organizations
 */

export function useListOrganizationsSuspense<TData = Awaited<ReturnType<typeof listOrganizations>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: ListOrganizationsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof listOrganizations>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListOrganizationsSuspenseQueryOptions(params,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Delete an organization
 * @summary Delete an organization
 */
export const getDeleteOrganizationUrl = (id: string | undefined | null,) => {


  

  return `/organizations/${id}`
}

export const deleteOrganization = async (id: string | undefined | null, options?: RequestInit): Promise<DeleteOrganization200> => {
  
  return customFetch<DeleteOrganization200>(getDeleteOrganizationUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}




export const getDeleteOrganizationMutationOptions = <TError = NotFoundResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrganization>>, TError,{id: string | undefined | null}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteOrganization>>, TError,{id: string | undefined | null}, TContext> => {

const mutationKey = ['deleteOrganization'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOrganization>>, {id: string | undefined | null}> = (props) => {
          const {id} = props ?? {};

          return  deleteOrganization(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteOrganizationMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOrganization>>>
    
    export type DeleteOrganizationMutationError = NotFoundResponse

    /**
 * @summary Delete an organization
 */
export const useDeleteOrganization = <TError = NotFoundResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrganization>>, TError,{id: string | undefined | null}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteOrganization>>,
        TError,
        {id: string | undefined | null},
        TContext
      > => {

      const mutationOptions = getDeleteOrganizationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Find an organization
 * @summary Find an organization
 */
export const getGetOneOrganizationUrl = (id: string | undefined | null,) => {


  

  return `/organizations/${id}`
}

export const getOneOrganization = async (id: string | undefined | null, options?: RequestInit): Promise<GetOneOrganization200> => {
  
  return customFetch<GetOneOrganization200>(getGetOneOrganizationUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetOneOrganizationQueryKey = (id?: string | undefined | null,) => {
    return [`/organizations/${id}`] as const;
    }

    
export const getGetOneOrganizationQueryOptions = <TData = Awaited<ReturnType<typeof getOneOrganization>>, TError = NotFoundResponse>(id: string | undefined | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOneOrganization>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOneOrganizationQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneOrganization>>> = ({ signal }) => getOneOrganization(id, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOneOrganization>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOneOrganizationQueryResult = NonNullable<Awaited<ReturnType<typeof getOneOrganization>>>
export type GetOneOrganizationQueryError = NotFoundResponse


export function useGetOneOrganization<TData = Awaited<ReturnType<typeof getOneOrganization>>, TError = NotFoundResponse>(
 id: string | undefined | null, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOneOrganization>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOneOrganization>>,
          TError,
          Awaited<ReturnType<typeof getOneOrganization>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOneOrganization<TData = Awaited<ReturnType<typeof getOneOrganization>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOneOrganization>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOneOrganization>>,
          TError,
          Awaited<ReturnType<typeof getOneOrganization>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOneOrganization<TData = Awaited<ReturnType<typeof getOneOrganization>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOneOrganization>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Find an organization
 */

export function useGetOneOrganization<TData = Awaited<ReturnType<typeof getOneOrganization>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOneOrganization>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOneOrganizationQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetOneOrganizationSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getOneOrganization>>, TError = NotFoundResponse>(id: string | undefined | null, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOneOrganization>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOneOrganizationQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneOrganization>>> = ({ signal }) => getOneOrganization(id, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOneOrganization>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOneOrganizationSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getOneOrganization>>>
export type GetOneOrganizationSuspenseQueryError = NotFoundResponse


export function useGetOneOrganizationSuspense<TData = Awaited<ReturnType<typeof getOneOrganization>>, TError = NotFoundResponse>(
 id: string | undefined | null, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOneOrganization>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOneOrganizationSuspense<TData = Awaited<ReturnType<typeof getOneOrganization>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOneOrganization>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOneOrganizationSuspense<TData = Awaited<ReturnType<typeof getOneOrganization>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOneOrganization>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Find an organization
 */

export function useGetOneOrganizationSuspense<TData = Awaited<ReturnType<typeof getOneOrganization>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOneOrganization>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOneOrganizationSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update an organization
 * @summary Update an organization
 */
export const getUpdateOrganizationUrl = (id: string | undefined | null,) => {


  

  return `/organizations/${id}`
}

export const updateOrganization = async (id: string | undefined | null,
    updateOrganizationBody: UpdateOrganizationBody, options?: RequestInit): Promise<UpdateOrganization200> => {
  
  return customFetch<UpdateOrganization200>(getUpdateOrganizationUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateOrganizationBody,)
  }
);}




export const getUpdateOrganizationMutationOptions = <TError = NotFoundResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOrganization>>, TError,{id: string | undefined | null;data: UpdateOrganizationBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof updateOrganization>>, TError,{id: string | undefined | null;data: UpdateOrganizationBody}, TContext> => {

const mutationKey = ['updateOrganization'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateOrganization>>, {id: string | undefined | null;data: UpdateOrganizationBody}> = (props) => {
          const {id,data} = props ?? {};

          return  updateOrganization(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateOrganizationMutationResult = NonNullable<Awaited<ReturnType<typeof updateOrganization>>>
    export type UpdateOrganizationMutationBody = UpdateOrganizationBody
    export type UpdateOrganizationMutationError = NotFoundResponse

    /**
 * @summary Update an organization
 */
export const useUpdateOrganization = <TError = NotFoundResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateOrganization>>, TError,{id: string | undefined | null;data: UpdateOrganizationBody}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateOrganization>>,
        TError,
        {id: string | undefined | null;data: UpdateOrganizationBody},
        TContext
      > => {

      const mutationOptions = getUpdateOrganizationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    