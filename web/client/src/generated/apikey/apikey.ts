/**
 * Generated by orval v7.13.1 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v0.0.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query';

import type {
  CreateAPIKey201,
  CreateAPIKey400,
  CreateAPIKey401,
  CreateAPIKeyBody,
  DeleteAPIKey400,
  DeleteAPIKey401,
  DeleteAPIKey404,
  GetAPIKey200,
  GetAPIKey400,
  GetAPIKey401,
  GetAPIKey404,
  ListAPIKeys200,
  ListAPIKeys401,
  ListAPIKeysParams,
  UpdateAPIKey200,
  UpdateAPIKey400,
  UpdateAPIKey401,
  UpdateAPIKey404,
  UpdateAPIKeyBody
} from '../orval.schemas';

import { customFetch } from '../../fetcher';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * List user's tokens (without showing the actual key values)
 * @summary List tokens
 */
export const getListAPIKeysUrl = (params?: ListAPIKeysParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    const explodeParameters = ["sort"];

    if (Array.isArray(value) && explodeParameters.includes(key)) {
      value.forEach((v) => normalizedParams.append(key, v === null ? 'null' : v.toString()));
      return;
    }
      
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/api-keys?${stringifiedParams}` : `/api-keys`
}

export const listAPIKeys = async (params?: ListAPIKeysParams, options?: RequestInit): Promise<ListAPIKeys200> => {
  
  return customFetch<ListAPIKeys200>(getListAPIKeysUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}





export const getListAPIKeysQueryKey = (params?: ListAPIKeysParams,) => {
    return [
    `/api-keys`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getListAPIKeysQueryOptions = <TData = Awaited<ReturnType<typeof listAPIKeys>>, TError = ListAPIKeys401>(params?: ListAPIKeysParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listAPIKeys>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListAPIKeysQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listAPIKeys>>> = ({ signal }) => listAPIKeys(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listAPIKeys>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListAPIKeysQueryResult = NonNullable<Awaited<ReturnType<typeof listAPIKeys>>>
export type ListAPIKeysQueryError = ListAPIKeys401


export function useListAPIKeys<TData = Awaited<ReturnType<typeof listAPIKeys>>, TError = ListAPIKeys401>(
 params: undefined |  ListAPIKeysParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listAPIKeys>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listAPIKeys>>,
          TError,
          Awaited<ReturnType<typeof listAPIKeys>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListAPIKeys<TData = Awaited<ReturnType<typeof listAPIKeys>>, TError = ListAPIKeys401>(
 params?: ListAPIKeysParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listAPIKeys>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listAPIKeys>>,
          TError,
          Awaited<ReturnType<typeof listAPIKeys>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListAPIKeys<TData = Awaited<ReturnType<typeof listAPIKeys>>, TError = ListAPIKeys401>(
 params?: ListAPIKeysParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listAPIKeys>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List tokens
 */

export function useListAPIKeys<TData = Awaited<ReturnType<typeof listAPIKeys>>, TError = ListAPIKeys401>(
 params?: ListAPIKeysParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listAPIKeys>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListAPIKeysQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getListAPIKeysSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof listAPIKeys>>, TError = ListAPIKeys401>(params?: ListAPIKeysParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof listAPIKeys>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListAPIKeysQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listAPIKeys>>> = ({ signal }) => listAPIKeys(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof listAPIKeys>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListAPIKeysSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof listAPIKeys>>>
export type ListAPIKeysSuspenseQueryError = ListAPIKeys401


export function useListAPIKeysSuspense<TData = Awaited<ReturnType<typeof listAPIKeys>>, TError = ListAPIKeys401>(
 params: undefined |  ListAPIKeysParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof listAPIKeys>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListAPIKeysSuspense<TData = Awaited<ReturnType<typeof listAPIKeys>>, TError = ListAPIKeys401>(
 params?: ListAPIKeysParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof listAPIKeys>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListAPIKeysSuspense<TData = Awaited<ReturnType<typeof listAPIKeys>>, TError = ListAPIKeys401>(
 params?: ListAPIKeysParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof listAPIKeys>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List tokens
 */

export function useListAPIKeysSuspense<TData = Awaited<ReturnType<typeof listAPIKeys>>, TError = ListAPIKeys401>(
 params?: ListAPIKeysParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof listAPIKeys>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListAPIKeysSuspenseQueryOptions(params,options)

  const query = useSuspenseQuery(queryOptions, queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Create a token
 * @summary Create a token
 */
export const getCreateAPIKeyUrl = () => {


  

  return `/api-keys`
}

export const createAPIKey = async (createAPIKeyBody: CreateAPIKeyBody, options?: RequestInit): Promise<CreateAPIKey201> => {
  
  return customFetch<CreateAPIKey201>(getCreateAPIKeyUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createAPIKeyBody,)
  }
);}




export const getCreateAPIKeyMutationOptions = <TError = CreateAPIKey400 | CreateAPIKey401,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAPIKey>>, TError,{data: CreateAPIKeyBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof createAPIKey>>, TError,{data: CreateAPIKeyBody}, TContext> => {

const mutationKey = ['createAPIKey'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createAPIKey>>, {data: CreateAPIKeyBody}> = (props) => {
          const {data} = props ?? {};

          return  createAPIKey(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateAPIKeyMutationResult = NonNullable<Awaited<ReturnType<typeof createAPIKey>>>
    export type CreateAPIKeyMutationBody = CreateAPIKeyBody
    export type CreateAPIKeyMutationError = CreateAPIKey400 | CreateAPIKey401

    /**
 * @summary Create a token
 */
export const useCreateAPIKey = <TError = CreateAPIKey400 | CreateAPIKey401,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAPIKey>>, TError,{data: CreateAPIKeyBody}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createAPIKey>>,
        TError,
        {data: CreateAPIKeyBody},
        TContext
      > => {

      const mutationOptions = getCreateAPIKeyMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Get details of a specific API key (without the actual key value)
 * @summary Get API key details
 */
export const getGetAPIKeyUrl = (id: string | undefined | null,) => {


  

  return `/api-keys/${id}`
}

export const getAPIKey = async (id: string | undefined | null, options?: RequestInit): Promise<GetAPIKey200> => {
  
  return customFetch<GetAPIKey200>(getGetAPIKeyUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}





export const getGetAPIKeyQueryKey = (id?: string | undefined | null,) => {
    return [
    `/api-keys/${id}`
    ] as const;
    }

    
export const getGetAPIKeyQueryOptions = <TData = Awaited<ReturnType<typeof getAPIKey>>, TError = GetAPIKey400 | GetAPIKey401 | GetAPIKey404>(id: string | undefined | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAPIKey>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAPIKeyQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAPIKey>>> = ({ signal }) => getAPIKey(id, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAPIKey>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAPIKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getAPIKey>>>
export type GetAPIKeyQueryError = GetAPIKey400 | GetAPIKey401 | GetAPIKey404


export function useGetAPIKey<TData = Awaited<ReturnType<typeof getAPIKey>>, TError = GetAPIKey400 | GetAPIKey401 | GetAPIKey404>(
 id: string | undefined | null, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAPIKey>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAPIKey>>,
          TError,
          Awaited<ReturnType<typeof getAPIKey>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAPIKey<TData = Awaited<ReturnType<typeof getAPIKey>>, TError = GetAPIKey400 | GetAPIKey401 | GetAPIKey404>(
 id: string | undefined | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAPIKey>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAPIKey>>,
          TError,
          Awaited<ReturnType<typeof getAPIKey>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAPIKey<TData = Awaited<ReturnType<typeof getAPIKey>>, TError = GetAPIKey400 | GetAPIKey401 | GetAPIKey404>(
 id: string | undefined | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAPIKey>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get API key details
 */

export function useGetAPIKey<TData = Awaited<ReturnType<typeof getAPIKey>>, TError = GetAPIKey400 | GetAPIKey401 | GetAPIKey404>(
 id: string | undefined | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAPIKey>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAPIKeyQueryOptions(id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAPIKeySuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getAPIKey>>, TError = GetAPIKey400 | GetAPIKey401 | GetAPIKey404>(id: string | undefined | null, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getAPIKey>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAPIKeyQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAPIKey>>> = ({ signal }) => getAPIKey(id, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getAPIKey>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAPIKeySuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getAPIKey>>>
export type GetAPIKeySuspenseQueryError = GetAPIKey400 | GetAPIKey401 | GetAPIKey404


export function useGetAPIKeySuspense<TData = Awaited<ReturnType<typeof getAPIKey>>, TError = GetAPIKey400 | GetAPIKey401 | GetAPIKey404>(
 id: string | undefined | null, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getAPIKey>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAPIKeySuspense<TData = Awaited<ReturnType<typeof getAPIKey>>, TError = GetAPIKey400 | GetAPIKey401 | GetAPIKey404>(
 id: string | undefined | null, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getAPIKey>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAPIKeySuspense<TData = Awaited<ReturnType<typeof getAPIKey>>, TError = GetAPIKey400 | GetAPIKey401 | GetAPIKey404>(
 id: string | undefined | null, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getAPIKey>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get API key details
 */

export function useGetAPIKeySuspense<TData = Awaited<ReturnType<typeof getAPIKey>>, TError = GetAPIKey400 | GetAPIKey401 | GetAPIKey404>(
 id: string | undefined | null, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getAPIKey>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAPIKeySuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions, queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update an API key's name, scopes, or rate limit
 * @summary Update API key
 */
export const getUpdateAPIKeyUrl = (id: string | undefined | null,) => {


  

  return `/api-keys/${id}`
}

export const updateAPIKey = async (id: string | undefined | null,
    updateAPIKeyBody: UpdateAPIKeyBody, options?: RequestInit): Promise<UpdateAPIKey200> => {
  
  return customFetch<UpdateAPIKey200>(getUpdateAPIKeyUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateAPIKeyBody,)
  }
);}




export const getUpdateAPIKeyMutationOptions = <TError = UpdateAPIKey400 | UpdateAPIKey401 | UpdateAPIKey404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAPIKey>>, TError,{id: string | undefined | null;data: UpdateAPIKeyBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof updateAPIKey>>, TError,{id: string | undefined | null;data: UpdateAPIKeyBody}, TContext> => {

const mutationKey = ['updateAPIKey'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateAPIKey>>, {id: string | undefined | null;data: UpdateAPIKeyBody}> = (props) => {
          const {id,data} = props ?? {};

          return  updateAPIKey(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateAPIKeyMutationResult = NonNullable<Awaited<ReturnType<typeof updateAPIKey>>>
    export type UpdateAPIKeyMutationBody = UpdateAPIKeyBody
    export type UpdateAPIKeyMutationError = UpdateAPIKey400 | UpdateAPIKey401 | UpdateAPIKey404

    /**
 * @summary Update API key
 */
export const useUpdateAPIKey = <TError = UpdateAPIKey400 | UpdateAPIKey401 | UpdateAPIKey404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAPIKey>>, TError,{id: string | undefined | null;data: UpdateAPIKeyBody}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateAPIKey>>,
        TError,
        {id: string | undefined | null;data: UpdateAPIKeyBody},
        TContext
      > => {

      const mutationOptions = getUpdateAPIKeyMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    /**
 * Delete an API key permanently. This action cannot be undone.
 * @summary Delete API key
 */
export const getDeleteAPIKeyUrl = (id: string | undefined | null,) => {


  

  return `/api-keys/${id}`
}

export const deleteAPIKey = async (id: string | undefined | null, options?: RequestInit): Promise<void> => {
  
  return customFetch<void>(getDeleteAPIKeyUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}




export const getDeleteAPIKeyMutationOptions = <TError = DeleteAPIKey400 | DeleteAPIKey401 | DeleteAPIKey404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAPIKey>>, TError,{id: string | undefined | null}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAPIKey>>, TError,{id: string | undefined | null}, TContext> => {

const mutationKey = ['deleteAPIKey'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAPIKey>>, {id: string | undefined | null}> = (props) => {
          const {id} = props ?? {};

          return  deleteAPIKey(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAPIKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAPIKey>>>
    
    export type DeleteAPIKeyMutationError = DeleteAPIKey400 | DeleteAPIKey401 | DeleteAPIKey404

    /**
 * @summary Delete API key
 */
export const useDeleteAPIKey = <TError = DeleteAPIKey400 | DeleteAPIKey401 | DeleteAPIKey404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAPIKey>>, TError,{id: string | undefined | null}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAPIKey>>,
        TError,
        {id: string | undefined | null},
        TContext
      > => {

      const mutationOptions = getDeleteAPIKeyMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    