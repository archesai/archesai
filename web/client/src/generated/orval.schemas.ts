/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v0.0.0
 */
/**
 * A recursive filter node that can be a condition or group
 */
export interface FilterNode { [key: string]: unknown }

/**
 * Pagination (page number & size)
 */
export interface Page {
  /**
   * @minimum 1
   * @maximum 9007199254740991
   */
  number?: number;
  /**
   * @minimum 1
   * @maximum 100
   */
  size?: number;
}

/**
 * Universally Unique Identifier
 * @minLength 36
 */
export type Uuid = string;

export interface Base {
  id: Uuid;
  /**
   * The date and time when the resource was created
   * @minLength 1
   */
  createdAt: string;
  /**
   * The date and time when the resource was last updated
   * @minLength 1
   */
  updatedAt: string;
}

/**
 * The authentication provider identifier
 * @minLength 1
 */
export type AccountAllOfProviderId = typeof AccountAllOfProviderId[keyof typeof AccountAllOfProviderId];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountAllOfProviderId = {
  local: 'local',
  google: 'google',
  github: 'github',
  microsoft: 'microsoft',
  apple: 'apple',
} as const;

export type AccountAllOf = {
  /**
   * The unique identifier for the account from the provider
   * @minLength 1
   */
  accountId: string;
  /** The user ID this account belongs to */
  userId: Uuid;
  /**
   * The authentication provider identifier
   * @minLength 1
   */
  providerId: AccountAllOfProviderId;
  /** The OAuth access token */
  accessToken?: string;
  /** The access token expiration timestamp */
  accessTokenExpiresAt?: string;
  /** The OAuth refresh token */
  refreshToken?: string;
  /** The refresh token expiration timestamp */
  refreshTokenExpiresAt?: string;
  /** The OpenID Connect ID token */
  idToken?: string;
  /** The hashed password (only for local authentication) */
  password?: string;
  /** The OAuth scope granted */
  scope?: string;
};

/**
 * Schema for Account entity (authentication provider account)
 */
export type Account = Base & AccountAllOf;

/**
 * The invalid value that was provided
 */
export type ValidationErrorValue = string | number | boolean;

/**
 * Individual field validation error
 */
export interface ValidationError {
  /**
   * The field path that failed validation
   * @minLength 1
   */
  field: string;
  /**
   * Human-readable error message
   * @minLength 1
   */
  message: string;
  /** The invalid value that was provided */
  value?: ValidationErrorValue;
}

/**
 * RFC 7807 (Problem Details) compliant error response
 */
export interface Problem {
  /**
   * HTTP status code
   * @minimum 100
   * @maximum 599
   */
  status: number;
  /**
   * URI identifying the problem type
   * @minLength 1
   */
  type: string;
  /**
   * Short, human-readable summary
   * @minLength 1
   */
  title: string;
  /**
   * Human-readable explanation specific to this occurrence
   * @minLength 1
   */
  detail: string;
  /** URI identifying the specific occurrence */
  instance?: string;
  /** Additional validation errors for specific fields */
  errors?: ValidationError[];
}

export interface TokenResponse {
  /**
   * JWT access token for API authentication
   * @minLength 1
   */
  access_token: string;
  /**
   * Refresh token for obtaining new access tokens
   * @minLength 1
   */
  refresh_token: string;
  /**
   * Type of token (always "Bearer")
   * @minLength 1
   */
  token_type: string;
  /** Access token expiration time in seconds */
  expires_in: number;
}

/**
 * Schema for Session entity
 */
export interface Session {
  /**
   * The date this item was created
   * @minLength 1
   */
  createdAt: string;
  /**
   * The ID of the item
   * @minLength 36
   */
  id: string;
  /**
   * The date this item was last updated
   * @minLength 1
   */
  updatedAt: string;
  /**
   * The active organization ID
   * @minLength 36
   */
  activeOrganizationId: string;
  /**
   * The expiration date of the session
   * @minLength 1
   */
  expiresAt: string;
  /**
   * The IP address of the session
   * @minLength 1
   */
  ipAddress: string;
  /**
   * The session token
   * @minLength 1
   */
  token: string;
  /**
   * The user agent of the session
   * @minLength 1
   */
  userAgent: string;
  /**
   * The ID of the user associated with the session
   * @minLength 36
   */
  userId: string;
}

/**
 * @pattern ^(?!\.)(?!.*\.\.)([A-Za-z0-9_'+\-\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\-]*\.)+[A-Za-z]{2,}$
 */
export type Email = string;

export type UserAllOf = {
  /** The user's email address */
  email: Email;
  /** Whether the user's email has been verified */
  emailVerified: boolean;
  /** The user's avatar image URL */
  image?: string;
  /**
   * The user's display name
   * @minLength 1
   * @maxLength 255
   */
  name: string;
};

/**
 * Schema for User entity
 */
export type User = Base & UserAllOf;

/**
 * The current subscription plan
 * @minLength 1
 */
export type OrganizationAllOfPlan = typeof OrganizationAllOfPlan[keyof typeof OrganizationAllOfPlan];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrganizationAllOfPlan = {
  FREE: 'FREE',
  BASIC: 'BASIC',
  STANDARD: 'STANDARD',
  PREMIUM: 'PREMIUM',
  UNLIMITED: 'UNLIMITED',
} as const;

/**
 * Custom metadata in JSON format
 */
export type OrganizationAllOfMetadata = { [key: string]: unknown };

export type OrganizationAllOf = {
  /**
   * The organization's display name
   * @minLength 1
   * @maxLength 255
   */
  name: string;
  /**
   * URL-friendly unique identifier for the organization
   * @minLength 3
   * @maxLength 50
   * @pattern ^[a-z0-9]+(?:-[a-z0-9]+)*$
   */
  slug: string;
  /** The organization's logo URL */
  logo?: string;
  /** Email address for billing communications */
  billingEmail?: string;
  /**
   * The current subscription plan
   * @minLength 1
   */
  plan: OrganizationAllOfPlan;
  /**
   * Available credits for this organization
   * @minimum 0
   */
  credits: number;
  /** Custom metadata in JSON format */
  metadata: OrganizationAllOfMetadata;
  /** Stripe customer identifier */
  stripeCustomerId?: string;
};

/**
 * Schema for Organization entity
 */
export type Organization = Base & OrganizationAllOf;

/**
 * The role of the member
 * @minLength 1
 */
export type MemberRole = typeof MemberRole[keyof typeof MemberRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MemberRole = {
  admin: 'admin',
  owner: 'owner',
  member: 'member',
} as const;

/**
 * Schema for Member entity
 */
export interface Member {
  /**
   * The date this item was created
   * @minLength 1
   */
  createdAt: string;
  /**
   * The ID of the item
   * @minLength 36
   */
  id: string;
  /**
   * The date this item was last updated
   * @minLength 1
   */
  updatedAt: string;
  /**
   * The organization name
   * @minLength 1
   */
  organizationId: string;
  /**
   * The role of the member
   * @minLength 1
   */
  role: MemberRole;
  /**
   * The user id
   * @minLength 1
   */
  userId: string;
}

/**
 * The role of the invitation
 * @minLength 1
 */
export type InvitationRole = typeof InvitationRole[keyof typeof InvitationRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvitationRole = {
  admin: 'admin',
  owner: 'owner',
  member: 'member',
} as const;

/**
 * Schema for Invitation entity
 */
export interface Invitation {
  /**
   * The date this item was created
   * @minLength 1
   */
  createdAt: string;
  /**
   * The ID of the item
   * @minLength 36
   */
  id: string;
  /**
   * The date this item was last updated
   * @minLength 1
   */
  updatedAt: string;
  /**
   * The email of the invitated user
   * @minLength 1
   */
  email: string;
  /**
   * The date and time when the invitation expires
   * @minLength 1
   */
  expiresAt: string;
  /**
   * The user id of the inviter
   * @minLength 1
   */
  inviterId: string;
  /**
   * The name of the organization the token belongs to
   * @minLength 1
   */
  organizationId: string;
  /**
   * The role of the invitation
   * @minLength 1
   */
  role: InvitationRole;
  /**
   * The status of the invitation, e.g., pending, accepted, declined
   * @minLength 1
   */
  status: string;
}

export interface OrganizationReference {
  /** The organization identifier */
  organizationId: Uuid;
}

export type PipelineAllOf = {
  /**
   * The pipeline's display name
   * @minLength 1
   * @maxLength 255
   */
  name: string;
  /**
   * Detailed description of the pipeline's purpose
   * @maxLength 1000
   */
  description?: string;
};

/**
 * Schema for Pipeline entity
 */
export type Pipeline = Base & OrganizationReference & PipelineAllOf;

/**
 * @minLength 1
 */
export type RunStatus = typeof RunStatus[keyof typeof RunStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RunStatus = {
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  PROCESSING: 'PROCESSING',
  QUEUED: 'QUEUED',
} as const;

/**
 * Schema for Run entity
 */
export interface Run {
  /**
   * The date this item was created
   * @minLength 1
   */
  createdAt: string;
  /**
   * The ID of the item
   * @minLength 36
   */
  id: string;
  /**
   * The date this item was last updated
   * @minLength 1
   */
  updatedAt: string;
  /**
   * The timestamp when the run completed
   * @minLength 1
   */
  completedAt?: string;
  /**
   * The error message
   * @minLength 1
   */
  error?: string;
  /**
   * The organization name
   * @minLength 1
   */
  organizationId: string;
  /**
   * The pipeline ID associated with the run
   * @minLength 1
   */
  pipelineId: string;
  /** The percent progress of the run */
  progress: number;
  /**
   * The timestamp when the run started
   * @minLength 1
   */
  startedAt?: string;
  /** @minLength 1 */
  status: RunStatus;
  /**
   * The tool ID associated with the run
   * @minLength 1
   */
  toolId: string;
}

/**
 * Schema for Tool entity
 */
export interface Tool {
  /**
   * The date this item was created
   * @minLength 1
   */
  createdAt: string;
  /**
   * The ID of the item
   * @minLength 36
   */
  id: string;
  /**
   * The date this item was last updated
   * @minLength 1
   */
  updatedAt: string;
  /**
   * The tool description
   * @minLength 1
   */
  description: string;
  /**
   * The MIME type of the input for the tool, e.g. text/plain
   * @minLength 1
   */
  inputMimeType: string;
  /**
   * The name of the tool
   * @minLength 1
   */
  name: string;
  /**
   * The organization name
   * @minLength 1
   */
  organizationId: string;
  /**
   * The MIME type of the output for the tool, e.g. text/plain
   * @minLength 1
   */
  outputMimeType: string;
}

/**
 * Schema for Artifact entity
 */
export interface Artifact {
  /**
   * The date this item was created
   * @minLength 1
   */
  createdAt: string;
  /**
   * The ID of the item
   * @minLength 36
   */
  id: string;
  /**
   * The date this item was last updated
   * @minLength 1
   */
  updatedAt: string;
  /** The number of credits required to access this artifact. This is used for metering and billing purposes. */
  credits: number;
  /**
   * The artifact's description
   * @minLength 1
   */
  description?: string;
  /**
   * The MIME type of the artifact, e.g. image/png
   * @minLength 1
   */
  mimeType: string;
  /**
   * The name of the artifact, used for display purposes
   * @minLength 1
   */
  name?: string;
  /**
   * The organization name
   * @minLength 1
   */
  organizationId: string;
  /**
   * The URL of the preview image for this artifact. This is used for displaying a thumbnail in the UI.
   * @minLength 1
   */
  previewImage?: string;
  /**
   * The ID of the run that produced this artifact, if applicable
   * @minLength 1
   */
  producerId?: string;
  /**
   * The artifact text
   * @minLength 1
   */
  text: string;
}

/**
 * Schema for Label entity
 */
export interface Label {
  /**
   * The date this item was created
   * @minLength 1
   */
  createdAt: string;
  /**
   * The ID of the item
   * @minLength 36
   */
  id: string;
  /**
   * The date this item was last updated
   * @minLength 1
   */
  updatedAt: string;
  /**
   * The name of the label
   * @minLength 1
   */
  name: string;
  /**
   * The organization name
   * @minLength 1
   */
  organizationId: string;
}

/**
 * CORS configuration for the API server
 */
export interface CORSConfig {
  /**
   * A comma-separated list of allowed origins for CORS requests
   * @minLength 1
   */
  origins: string;
}

/**
 * Email configuration for sending emails
 */
export interface EmailConfig {
  /** Enable email functionality */
  enabled: boolean;
  /** Email service provider (e.g., "gmail", "sendgrid", etc.) */
  service?: string;
  /** Username for the email service */
  user?: string;
  /** Password for the email service */
  password?: string;
}

/**
 * Kubernetes image pull policy
 * @minLength 1
 */
export type ImageConfigPullPolicy = typeof ImageConfigPullPolicy[keyof typeof ImageConfigPullPolicy];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ImageConfigPullPolicy = {
  Always: 'Always',
  IfNotPresent: 'IfNotPresent',
  Never: 'Never',
} as const;

/**
 * Container image configuration
 */
export interface ImageConfig {
  /**
   * Kubernetes image pull policy
   * @minLength 1
   */
  pullPolicy: ImageConfigPullPolicy;
  /**
   * Container image repository
   * @minLength 1
   */
  repository: string;
  /**
   * Container image tag
   * @minLength 1
   */
  tag: string;
}

/**
 * Resource limits
 */
export interface ResourceLimits {
  /**
   * Maximum CPU allocation
   * @minLength 1
   */
  cpu: string;
  /**
   * Maximum memory allocation
   * @minLength 1
   */
  memory: string;
}

/**
 * Resource requests
 */
export interface ResourceRequests {
  /**
   * Requested CPU allocation
   * @minLength 1
   */
  cpu: string;
  /**
   * Requested memory allocation
   * @minLength 1
   */
  memory: string;
}

/**
 * Kubernetes resource configuration
 */
export interface ResourceConfig {
  limits: ResourceLimits;
  requests: ResourceRequests;
}

/**
 * Deployment environment (development, staging, production)
 */
export type APIConfigEnvironment = typeof APIConfigEnvironment[keyof typeof APIConfigEnvironment];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const APIConfigEnvironment = {
  development: 'development',
  staging: 'staging',
  production: 'production',
} as const;

/**
 * Configuration schema for the API server
 */
export interface APIConfig {
  cors: CORSConfig;
  /** Enable or disable API documentation */
  docs: boolean;
  email: EmailConfig;
  /** Deployment environment (development, staging, production) */
  environment?: APIConfigEnvironment;
  /**
   * The host address on which the API server will listen
   * @minLength 1
   */
  host: string;
  /** The port on which the API server will listen */
  port: number;
  /** Enable or disable request validation */
  validate: boolean;
  image: ImageConfig;
  resources: ResourceConfig;
}

/**
 * Firebase authentication configuration
 */
export interface FirebaseAuth {
  /** Enable Firebase authentication */
  enabled: boolean;
  /** Firebase service account client email address */
  clientEmail?: string;
  /**
   * Firebase service account private key (PEM format)
   * @minLength 1
   */
  privateKey?: string;
  /**
   * Firebase project ID for authentication
   * @minLength 1
   */
  projectId?: string;
}

/**
 * Local username/password authentication
 */
export interface LocalAuth {
  /** Enable local authentication */
  enabled: boolean;
  /**
   * Secret key for JWT token signing
   * @minLength 32
   */
  jwtSecret: string;
  /**
   * Access token time-to-live duration (e.g., "15m", "1h")
   * @minLength 2
   * @pattern ^(\d+[smhd])+$
   */
  accessTokenTtl: string;
  /**
   * Refresh token time-to-live duration (e.g., "7d", "168h")
   * @minLength 2
   * @pattern ^(\d+[smhd])+$
   */
  refreshTokenTtl: string;
}

/**
 * Twitter OAuth configuration
 */
export interface TwitterAuth {
  /** Enable Twitter OAuth */
  enabled: boolean;
  /**
   * OAuth callback URL
   * @minLength 1
   */
  callbackURL?: string;
  /**
   * Twitter API consumer key
   * @minLength 1
   */
  consumerKey?: string;
  /**
   * Twitter API consumer secret
   * @minLength 1
   */
  consumerSecret?: string;
}

/**
 * Authentication configuration for the API server
 */
export interface AuthConfig {
  /** Enable authentication */
  enabled: boolean;
  firebase?: FirebaseAuth;
  local?: LocalAuth;
  twitter?: TwitterAuth;
}

/**
 * Stripe payment configuration
 */
export interface StripeConfig {
  /**
   * Stripe secret API key
   * @minLength 1
   */
  token: string;
  /**
   * Stripe webhook endpoint secret
   * @minLength 1
   */
  whsec: string;
}

/**
 * Billing configuration for Stripe
 */
export interface BillingConfig {
  /** Enable billing functionality */
  enabled: boolean;
  stripe?: StripeConfig;
}

/**
 * Database authentication credentials
 */
export interface DatabaseAuth {
  /**
   * Database name
   * @minLength 1
   */
  database: string;
  /**
   * Database user password
   * @minLength 1
   */
  password: string;
}

/**
 * Persistent storage configuration
 */
export interface PersistenceConfig {
  /** Enable persistent storage */
  enabled: boolean;
  /**
   * Size of persistent volume
   * @minLength 1
   */
  size: string;
}

/**
 * Database type (postgresql or sqlite)
 */
export type DatabaseConfigType = typeof DatabaseConfigType[keyof typeof DatabaseConfigType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DatabaseConfigType = {
  postgresql: 'postgresql',
  sqlite: 'sqlite',
} as const;

/**
 * Database configuration for PostgreSQL
 */
export interface DatabaseConfig {
  /** Enable database */
  enabled: boolean;
  /**
   * Database connection URL/string
   * @minLength 1
   */
  url: string;
  /** Database type (postgresql or sqlite) */
  type?: DatabaseConfigType;
  /**
   * Maximum number of connections in pool (PostgreSQL)
   * @minimum 1
   */
  maxConns?: number;
  /**
   * Minimum number of connections in pool (PostgreSQL)
   * @minimum 0
   */
  minConns?: number;
  /**
   * Maximum connection lifetime (e.g., "30m")
   * @pattern ^(\d+[smh])+$
   */
  connMaxLifetime?: string;
  /**
   * Maximum connection idle time (e.g., "5m")
   * @pattern ^(\d+[smh])+$
   */
  connMaxIdleTime?: string;
  /**
   * Health check period for connections (PostgreSQL)
   * @pattern ^(\d+[smh])+$
   */
  healthCheckPeriod?: string;
  /** Automatically run database migrations on startup */
  runMigrations?: boolean;
  /** Use managed database deployment */
  managed?: boolean;
  auth?: DatabaseAuth;
  image?: ImageConfig;
  persistence?: PersistenceConfig;
  resources?: ResourceConfig;
}

/**
 * Development service port forwarding configuration
 */
export interface DevServiceConfig {
  /** Enable dev port forwarding */
  enabled: boolean;
  /** Local port for forwarding */
  port: number;
}

/**
 * Development environment configuration
 */
export interface DevelopmentConfig {
  api: DevServiceConfig;
  /**
   * Host IP address for dev port forwarding
   * @minLength 1
   */
  hostIP: string;
  loki: DevServiceConfig;
  platform: DevServiceConfig;
  postgres: DevServiceConfig;
  redis: DevServiceConfig;
}

/**
 * Container image configuration
 */
export interface ImagesConfig {
  /** List of Kubernetes secrets for pulling private images */
  imagePullSecrets: string[];
  /**
   * Custom container registry URL (leave empty for Docker Hub)
   * @minLength 1
   */
  imageRegistry: string;
}

/**
 * Database migration configuration
 */
export interface MigrationsConfig {
  /** Enable automatic DB migrations */
  enabled: boolean;
}

/**
 * Kubernetes service account configuration
 */
export interface ServiceAccountConfig {
  /** Create dedicated service account */
  create: boolean;
  /**
   * Custom service account name
   * @minLength 1
   */
  name: string;
}

/**
 * Infrastructure configuration for Kubernetes deployments
 */
export interface InfrastructureConfig {
  development: DevelopmentConfig;
  images: ImagesConfig;
  migrations: MigrationsConfig;
  /**
   * Kubernetes namespace where all resources will be deployed
   * @minLength 1
   */
  namespace: string;
  serviceAccount: ServiceAccountConfig;
}

/**
 * TLS configuration
 */
export interface TLSConfig {
  /** Enable TLS/SSL */
  enabled: boolean;
  /**
   * Cert-manager ClusterIssuer
   * @minLength 1
   */
  issuer?: string;
  /**
   * Kubernetes secret name for TLS certificates
   * @minLength 1
   */
  secretName: string;
}

/**
 * Ingress configuration
 */
export interface IngressConfig {
  /** Enable ingress */
  enabled: boolean;
  /**
   * Primary domain name for ingress routing
   * @minLength 1
   */
  domain?: string;
  tls?: TLSConfig;
}

/**
 * The embedding provider to use for vector embeddings
 * @minLength 1
 */
export type EmbeddingConfigType = typeof EmbeddingConfigType[keyof typeof EmbeddingConfigType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const EmbeddingConfigType = {
  openai: 'openai',
  ollama: 'ollama',
} as const;

/**
 * Configuration for text embedding generation
 */
export interface EmbeddingConfig {
  /**
   * The embedding provider to use for vector embeddings
   * @minLength 1
   */
  type: EmbeddingConfigType;
}

/**
 * LLM provider type
 * @minLength 1
 */
export type LLMConfigType = typeof LLMConfigType[keyof typeof LLMConfigType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LLMConfigType = {
  ollama: 'ollama',
  openai: 'openai',
} as const;

/**
 * Large Language Model configuration
 */
export interface LLMConfig {
  /**
   * LLM provider type
   * @minLength 1
   */
  type: LLMConfigType;
  /**
   * LLM service endpoint URL
   * @minLength 1
   */
  endpoint?: string;
  /**
   * Authentication token for LLM service
   * @minLength 1
   */
  token?: string;
}

/**
 * RunPod serverless GPU configuration
 */
export interface RunPodConfig {
  /** Enable RunPod integration */
  enabled: boolean;
  /**
   * RunPod API token
   * @minLength 1
   */
  token?: string;
}

/**
 * Web scraping service configuration
 */
export interface ScraperConfig {
  /** Enable scraper service */
  enabled: boolean;
  /** Use managed scraper deployment */
  managed?: boolean;
  /**
   * Web scraper service endpoint URL
   * @minLength 1
   */
  endpoint?: string;
  image?: ImageConfig;
  resources?: ResourceConfig;
}

/**
 * Speech recognition and TTS services
 */
export interface SpeechConfig {
  /** Enable speech services */
  enabled: boolean;
  /**
   * Speech-to-text service API token
   * @minLength 1
   */
  token?: string;
}

/**
 * Unstructured.io service for document parsing
 */
export interface UnstructuredConfig {
  /** Enable unstructured document parsing */
  enabled: boolean;
  /** Use managed unstructured deployment */
  managed?: boolean;
  image?: ImageConfig;
  resources?: ResourceConfig;
}

/**
 * Intelligence configuration (LLMs, embeddings, scraper, speech, etc.)
 */
export interface IntelligenceConfig {
  embedding: EmbeddingConfig;
  llm: LLMConfig;
  runpod: RunPodConfig;
  scraper: ScraperConfig;
  speech: SpeechConfig;
  unstructured: UnstructuredConfig;
}

/**
 * Minimum log level to output
 * @minLength 1
 */
export type LoggingConfigLevel = typeof LoggingConfigLevel[keyof typeof LoggingConfigLevel];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LoggingConfigLevel = {
  fatal: 'fatal',
  error: 'error',
  warn: 'warn',
  info: 'info',
  debug: 'debug',
  trace: 'trace',
  silent: 'silent',
} as const;

/**
 * Logging configuration
 */
export interface LoggingConfig {
  /**
   * Minimum log level to output
   * @minLength 1
   */
  level: LoggingConfigLevel;
  /** Enable pretty-printed logs for development */
  pretty: boolean;
}

/**
 * Grafana monitoring dashboard configuration
 */
export interface GrafanaConfig {
  /** Enable Grafana */
  enabled: boolean;
  /** Use managed Grafana deployment */
  managed?: boolean;
  image?: ImageConfig;
  resources?: ResourceConfig;
}

/**
 * Loki log aggregation service configuration
 */
export interface LokiConfig {
  /** Enable Loki */
  enabled: boolean;
  /** Use managed Loki deployment */
  managed?: boolean;
  /**
   * Loki host URL
   * @minLength 1
   */
  host?: string;
  image?: ImageConfig;
  resources?: ResourceConfig;
}

/**
 * Monitoring configuration for Grafana and Loki
 */
export interface MonitoringConfig {
  grafana: GrafanaConfig;
  loki: LokiConfig;
}

/**
 * Platform configuration (host, image, resources)
 */
export interface PlatformConfig {
  /** Enable platform service */
  enabled: boolean;
  /** Use managed platform deployment */
  managed?: boolean;
  /**
   * Host address where the platform service will be accessible
   * @minLength 1
   */
  host?: string;
  image?: ImageConfig;
  resources?: ResourceConfig;
}

/**
 * Redis configuration
 */
export interface RedisConfig {
  /** Enable Redis */
  enabled: boolean;
  /** Use managed Redis deployment */
  managed?: boolean;
  /**
   * Redis authentication password
   * @minLength 1
   */
  auth: string;
  /**
   * Certificate Authority for TLS (optional)
   * @minLength 1
   */
  ca?: string;
  /**
   * Redis hostname or IP
   * @minLength 1
   */
  host: string;
  /** Redis port number */
  port: number;
  image?: ImageConfig;
  persistence?: PersistenceConfig;
  resources?: ResourceConfig;
}

/**
 * Object storage configuration for MinIO or S3-compatible services
 */
export interface StorageConfig {
  /** Enable object storage */
  enabled: boolean;
  /** Use managed storage deployment */
  managed?: boolean;
  /**
   * MinIO/S3 access key ID
   * @minLength 1
   */
  accesskey: string;
  /**
   * S3 bucket name
   * @minLength 1
   */
  bucket: string;
  /**
   * MinIO server endpoint URL
   * @minLength 1
   */
  endpoint: string;
  /**
   * MinIO/S3 secret access key
   * @minLength 1
   */
  secretkey: string;
  image?: ImageConfig;
  persistence?: PersistenceConfig;
  resources?: ResourceConfig;
}

/**
 * Arches AI configuration schema
 */
export interface ArchesConfig {
  api: APIConfig;
  auth: AuthConfig;
  billing: BillingConfig;
  database: DatabaseConfig;
  infrastructure: InfrastructureConfig;
  ingress: IngressConfig;
  intelligence: IntelligenceConfig;
  logging: LoggingConfig;
  monitoring: MonitoringConfig;
  platform: PlatformConfig;
  redis: RedisConfig;
  storage: StorageConfig;
}

export type HealthResponseServices = {
  /** @minLength 1 */
  database: string;
  /** @minLength 1 */
  email: string;
  /** @minLength 1 */
  redis: string;
};

export interface HealthResponse {
  services: HealthResponseServices;
  /** @minLength 1 */
  timestamp: string;
  uptime: number;
}

/**
 * 400 Bad Request
 */
export type BadRequestResponse = Problem;

/**
 * 401 Unauthorized
 */
export type UnauthorizedResponse = Problem;

/**
 * 404 Not Found
 */
export type NotFoundResponse = Problem;

/**
 * 204 No Content
 */
export type NoContentResponse = void;

/**
 * A recursive filter node that can be a condition or group
 */
export type AccountsFilterParameter = { [key: string]: unknown };

/**
 * Pagination (page number & size)
 */
export type PageQueryParameter = {
  /**
   * @minimum 1
   * @maximum 9007199254740991
   */
  number?: number;
  /**
   * @minimum 1
   * @maximum 100
   */
  size?: number;
};

/**
 * @minLength 1
 */
export type AccountsSortParameterItemField = typeof AccountsSortParameterItemField[keyof typeof AccountsSortParameterItemField];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountsSortParameterItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  accessToken: 'accessToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  accountId: 'accountId',
  idToken: 'idToken',
  password: 'password',
  providerId: 'providerId',
  refreshToken: 'refreshToken',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  userId: 'userId',
} as const;

/**
 * @minLength 1
 */
export type AccountsSortParameterItemOrder = typeof AccountsSortParameterItemOrder[keyof typeof AccountsSortParameterItemOrder];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountsSortParameterItemOrder = {
  asc: 'asc',
  desc: 'desc',
} as const;

export type AccountsSortParameterItem = {
  /** @minLength 1 */
  field: AccountsSortParameterItemField;
  /** @minLength 1 */
  order: AccountsSortParameterItemOrder;
};

/**
 * The sort parameter
 */
export type AccountsSortParameter = AccountsSortParameterItem[];

/**
 * A recursive filter node that can be a condition or group
 */
export type SessionsFilterParameter = { [key: string]: unknown };

/**
 * @minLength 1
 */
export type SessionsSortParameterItemField = typeof SessionsSortParameterItemField[keyof typeof SessionsSortParameterItemField];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SessionsSortParameterItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  activeOrganizationId: 'activeOrganizationId',
  expiresAt: 'expiresAt',
  ipAddress: 'ipAddress',
  token: 'token',
  userAgent: 'userAgent',
  userId: 'userId',
} as const;

/**
 * @minLength 1
 */
export type SessionsSortParameterItemOrder = typeof SessionsSortParameterItemOrder[keyof typeof SessionsSortParameterItemOrder];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SessionsSortParameterItemOrder = {
  asc: 'asc',
  desc: 'desc',
} as const;

export type SessionsSortParameterItem = {
  /** @minLength 1 */
  field: SessionsSortParameterItemField;
  /** @minLength 1 */
  order: SessionsSortParameterItemOrder;
};

/**
 * The sort parameter
 */
export type SessionsSortParameter = SessionsSortParameterItem[];

/**
 * A recursive filter node that can be a condition or group
 */
export type UsersFilterParameter = { [key: string]: unknown };

/**
 * @minLength 1
 */
export type UsersSortParameterItemField = typeof UsersSortParameterItemField[keyof typeof UsersSortParameterItemField];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsersSortParameterItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  name: 'name',
} as const;

/**
 * @minLength 1
 */
export type UsersSortParameterItemOrder = typeof UsersSortParameterItemOrder[keyof typeof UsersSortParameterItemOrder];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsersSortParameterItemOrder = {
  asc: 'asc',
  desc: 'desc',
} as const;

export type UsersSortParameterItem = {
  /** @minLength 1 */
  field: UsersSortParameterItemField;
  /** @minLength 1 */
  order: UsersSortParameterItemOrder;
};

/**
 * The sort parameter
 */
export type UsersSortParameter = UsersSortParameterItem[];

/**
 * A recursive filter node that can be a condition or group
 */
export type OrganizationsFilterParameter = { [key: string]: unknown };

/**
 * @minLength 1
 */
export type OrganizationsSortParameterItemField = typeof OrganizationsSortParameterItemField[keyof typeof OrganizationsSortParameterItemField];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrganizationsSortParameterItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  billingEmail: 'billingEmail',
  credits: 'credits',
  logo: 'logo',
  metadata: 'metadata',
  name: 'name',
  plan: 'plan',
  slug: 'slug',
  stripeCustomerId: 'stripeCustomerId',
} as const;

/**
 * @minLength 1
 */
export type OrganizationsSortParameterItemOrder = typeof OrganizationsSortParameterItemOrder[keyof typeof OrganizationsSortParameterItemOrder];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrganizationsSortParameterItemOrder = {
  asc: 'asc',
  desc: 'desc',
} as const;

export type OrganizationsSortParameterItem = {
  /** @minLength 1 */
  field: OrganizationsSortParameterItemField;
  /** @minLength 1 */
  order: OrganizationsSortParameterItemOrder;
};

/**
 * The sort parameter
 */
export type OrganizationsSortParameter = OrganizationsSortParameterItem[];

/**
 * A recursive filter node that can be a condition or group
 */
export type MembersFilterParameter = { [key: string]: unknown };

/**
 * @minLength 1
 */
export type MembersSortParameterItemField = typeof MembersSortParameterItemField[keyof typeof MembersSortParameterItemField];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MembersSortParameterItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId',
  role: 'role',
  userId: 'userId',
} as const;

/**
 * @minLength 1
 */
export type MembersSortParameterItemOrder = typeof MembersSortParameterItemOrder[keyof typeof MembersSortParameterItemOrder];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MembersSortParameterItemOrder = {
  asc: 'asc',
  desc: 'desc',
} as const;

export type MembersSortParameterItem = {
  /** @minLength 1 */
  field: MembersSortParameterItemField;
  /** @minLength 1 */
  order: MembersSortParameterItemOrder;
};

/**
 * The sort parameter
 */
export type MembersSortParameter = MembersSortParameterItem[];

/**
 * A recursive filter node that can be a condition or group
 */
export type InvitationsFilterParameter = { [key: string]: unknown };

/**
 * @minLength 1
 */
export type InvitationsSortParameterItemField = typeof InvitationsSortParameterItemField[keyof typeof InvitationsSortParameterItemField];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvitationsSortParameterItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  email: 'email',
  expiresAt: 'expiresAt',
  inviterId: 'inviterId',
  organizationId: 'organizationId',
  role: 'role',
  status: 'status',
} as const;

/**
 * @minLength 1
 */
export type InvitationsSortParameterItemOrder = typeof InvitationsSortParameterItemOrder[keyof typeof InvitationsSortParameterItemOrder];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvitationsSortParameterItemOrder = {
  asc: 'asc',
  desc: 'desc',
} as const;

export type InvitationsSortParameterItem = {
  /** @minLength 1 */
  field: InvitationsSortParameterItemField;
  /** @minLength 1 */
  order: InvitationsSortParameterItemOrder;
};

/**
 * The sort parameter
 */
export type InvitationsSortParameter = InvitationsSortParameterItem[];

/**
 * A recursive filter node that can be a condition or group
 */
export type PipelinesFilterParameter = { [key: string]: unknown };

/**
 * @minLength 1
 */
export type PipelinesSortParameterItemField = typeof PipelinesSortParameterItemField[keyof typeof PipelinesSortParameterItemField];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PipelinesSortParameterItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  description: 'description',
  name: 'name',
  organizationId: 'organizationId',
} as const;

/**
 * @minLength 1
 */
export type PipelinesSortParameterItemOrder = typeof PipelinesSortParameterItemOrder[keyof typeof PipelinesSortParameterItemOrder];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PipelinesSortParameterItemOrder = {
  asc: 'asc',
  desc: 'desc',
} as const;

export type PipelinesSortParameterItem = {
  /** @minLength 1 */
  field: PipelinesSortParameterItemField;
  /** @minLength 1 */
  order: PipelinesSortParameterItemOrder;
};

/**
 * The sort parameter
 */
export type PipelinesSortParameter = PipelinesSortParameterItem[];

/**
 * A recursive filter node that can be a condition or group
 */
export type RunsFilterParameter = { [key: string]: unknown };

/**
 * @minLength 1
 */
export type RunsSortParameterItemField = typeof RunsSortParameterItemField[keyof typeof RunsSortParameterItemField];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RunsSortParameterItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt',
  error: 'error',
  organizationId: 'organizationId',
  pipelineId: 'pipelineId',
  progress: 'progress',
  startedAt: 'startedAt',
  status: 'status',
  toolId: 'toolId',
} as const;

/**
 * @minLength 1
 */
export type RunsSortParameterItemOrder = typeof RunsSortParameterItemOrder[keyof typeof RunsSortParameterItemOrder];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RunsSortParameterItemOrder = {
  asc: 'asc',
  desc: 'desc',
} as const;

export type RunsSortParameterItem = {
  /** @minLength 1 */
  field: RunsSortParameterItemField;
  /** @minLength 1 */
  order: RunsSortParameterItemOrder;
};

/**
 * The sort parameter
 */
export type RunsSortParameter = RunsSortParameterItem[];

/**
 * A recursive filter node that can be a condition or group
 */
export type ToolsFilterParameter = { [key: string]: unknown };

/**
 * @minLength 1
 */
export type ToolsSortParameterItemField = typeof ToolsSortParameterItemField[keyof typeof ToolsSortParameterItemField];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ToolsSortParameterItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  description: 'description',
  inputMimeType: 'inputMimeType',
  name: 'name',
  organizationId: 'organizationId',
  outputMimeType: 'outputMimeType',
} as const;

/**
 * @minLength 1
 */
export type ToolsSortParameterItemOrder = typeof ToolsSortParameterItemOrder[keyof typeof ToolsSortParameterItemOrder];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ToolsSortParameterItemOrder = {
  asc: 'asc',
  desc: 'desc',
} as const;

export type ToolsSortParameterItem = {
  /** @minLength 1 */
  field: ToolsSortParameterItemField;
  /** @minLength 1 */
  order: ToolsSortParameterItemOrder;
};

/**
 * The sort parameter
 */
export type ToolsSortParameter = ToolsSortParameterItem[];

/**
 * A recursive filter node that can be a condition or group
 */
export type ArtifactsFilterParameter = { [key: string]: unknown };

/**
 * @minLength 1
 */
export type ArtifactsSortParameterItemField = typeof ArtifactsSortParameterItemField[keyof typeof ArtifactsSortParameterItemField];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArtifactsSortParameterItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  credits: 'credits',
  description: 'description',
  mimeType: 'mimeType',
  name: 'name',
  organizationId: 'organizationId',
  previewImage: 'previewImage',
  producerId: 'producerId',
  text: 'text',
  url: 'url',
} as const;

/**
 * @minLength 1
 */
export type ArtifactsSortParameterItemOrder = typeof ArtifactsSortParameterItemOrder[keyof typeof ArtifactsSortParameterItemOrder];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArtifactsSortParameterItemOrder = {
  asc: 'asc',
  desc: 'desc',
} as const;

export type ArtifactsSortParameterItem = {
  /** @minLength 1 */
  field: ArtifactsSortParameterItemField;
  /** @minLength 1 */
  order: ArtifactsSortParameterItemOrder;
};

/**
 * The sort parameter
 */
export type ArtifactsSortParameter = ArtifactsSortParameterItem[];

/**
 * A recursive filter node that can be a condition or group
 */
export type LabelsFilterParameter = { [key: string]: unknown };

/**
 * @minLength 1
 */
export type LabelsSortParameterItemField = typeof LabelsSortParameterItemField[keyof typeof LabelsSortParameterItemField];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LabelsSortParameterItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  name: 'name',
  organizationId: 'organizationId',
} as const;

/**
 * @minLength 1
 */
export type LabelsSortParameterItemOrder = typeof LabelsSortParameterItemOrder[keyof typeof LabelsSortParameterItemOrder];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LabelsSortParameterItemOrder = {
  asc: 'asc',
  desc: 'desc',
} as const;

export type LabelsSortParameterItem = {
  /** @minLength 1 */
  field: LabelsSortParameterItemField;
  /** @minLength 1 */
  order: LabelsSortParameterItemOrder;
};

/**
 * The sort parameter
 */
export type LabelsSortParameter = LabelsSortParameterItem[];

export type AccountsFindManyParams = {
/**
 * A recursive filter node that can be a condition or group
 */
filter?: AccountsFilterParameter;
/**
 * Pagination (page number & size)
 */
page?: PageQueryParameter;
/**
 * The sort parameter
 */
sort?: AccountsSortParameter;
};

export type AccountsFindMany200Meta = {
  total: number;
};

export type AccountsFindMany200 = {
  data: Account[];
  meta: AccountsFindMany200Meta;
};

export type AccountsGetOne200 = {
  data: Account;
};

export type AccountsDelete200 = {
  data: Account;
};

export type RegisterBody = {
  /**
   * The email address associated with the account
   * @minLength 1
   * @pattern ^(?!\.)(?!.*\.\.)([A-Za-z0-9_'+\-\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\-]*\.)+[A-Za-z]{2,}$
   */
  email: string;
  /**
   * The name of the user creating the account
   * @minLength 1
   */
  name: string;
  /**
   * The password for the account
   * @minLength 1
   */
  password: string;
};

export type LoginBody = {
  /**
   * The email address associated with the account
   * @minLength 1
   * @pattern ^(?!\.)(?!.*\.\.)([A-Za-z0-9_'+\-\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\-]*\.)+[A-Za-z]{2,}$
   */
  email: string;
  /**
   * The password for the account
   * @minLength 1
   */
  password: string;
};

export type ConfirmEmailVerificationBody = {
  /**
   * The password reset token
   * @minLength 1
   */
  token: string;
};

export type ConfirmEmailVerification200 = {
  session: Session;
  user: User;
};

export type RequestPasswordResetBody = {
  /**
   * The e-mail to send the password reset token to
   * @minLength 1
   */
  email: string;
};

export type ConfirmPasswordResetBody = {
  /**
   * The new password
   * @minLength 1
   */
  newPassword: string;
  /**
   * The password reset token
   * @minLength 1
   */
  token: string;
};

export type RequestEmailChangeBody = {
  /**
   * The e-mail to send the confirmation token to
   * @minLength 1
   * @pattern ^(?!\.)(?!.*\.\.)([A-Za-z0-9_'+\-\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\-]*\.)+[A-Za-z]{2,}$
   */
  newEmail: string;
  /**
   * The user ID of the user requesting the email change
   * @minLength 36
   */
  userId: string;
};

export type ConfirmEmailChangeBody = {
  /**
   * The e-mail to send the confirmation token to
   * @minLength 1
   * @pattern ^(?!\.)(?!.*\.\.)([A-Za-z0-9_'+\-\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\-]*\.)+[A-Za-z]{2,}$
   */
  newEmail: string;
  /**
   * The password reset token
   * @minLength 1
   */
  token: string;
  /**
   * The user ID of the user requesting the email change
   * @minLength 36
   */
  userId: string;
};

export type FindManySessionsParams = {
/**
 * A recursive filter node that can be a condition or group
 */
filter?: SessionsFilterParameter;
/**
 * Pagination (page number & size)
 */
page?: PageQueryParameter;
/**
 * The sort parameter
 */
sort?: SessionsSortParameter;
};

export type FindManySessions200Meta = {
  /** Total number of items in the collection */
  total: number;
};

export type FindManySessions200 = {
  data: Session[];
  meta: FindManySessions200Meta;
};

export type DeleteSession200 = {
  data: Session;
};

export type GetOneSession200 = {
  data: Session;
};

export type UpdateSessionBody = {
  /**
   * The active organization ID
   * @minLength 1
   */
  activeOrganizationId: string;
};

export type UpdateSession200 = {
  data: Session;
};

export type FindManyUsersParams = {
/**
 * A recursive filter node that can be a condition or group
 */
filter?: UsersFilterParameter;
/**
 * Pagination (page number & size)
 */
page?: PageQueryParameter;
/**
 * The sort parameter
 */
sort?: UsersSortParameter;
};

export type FindManyUsers200Meta = {
  /** Total number of items in the collection */
  total: number;
};

export type FindManyUsers200 = {
  data: User[];
  meta: FindManyUsers200Meta;
};

export type DeleteUser200 = {
  data: User;
};

export type GetOneUser200 = {
  data: User;
};

export type UpdateUserBody = {
  /**
   * The user's e-mail
   * @minLength 1
   */
  email?: string;
  /** The user's avatar image URL */
  image?: string;
};

export type UpdateUser200 = {
  data: User;
};

export type CreateOrganizationBody = {
  /**
   * The billing email to use for the organization
   * @minLength 1
   */
  billingEmail: string;
  /**
   * The ID of the item
   * @minLength 36
   */
  organizationId: string;
};

export type CreateOrganization201 = {
  data: Organization;
};

export type FindManyOrganizationsParams = {
/**
 * A recursive filter node that can be a condition or group
 */
filter?: OrganizationsFilterParameter;
/**
 * Pagination (page number & size)
 */
page?: PageQueryParameter;
/**
 * The sort parameter
 */
sort?: OrganizationsSortParameter;
};

export type FindManyOrganizations200Meta = {
  /** Total number of items in the collection */
  total: number;
};

export type FindManyOrganizations200 = {
  data: Organization[];
  meta: FindManyOrganizations200Meta;
};

export type DeleteOrganization200 = {
  data: Organization;
};

export type GetOneOrganization200 = {
  data: Organization;
};

export type UpdateOrganizationBody = {
  /** The billing email to use for the organization */
  billingEmail?: string;
  /** The ID of the item */
  organizationId?: string;
};

export type UpdateOrganization200 = {
  data: Organization;
};

/**
 * The role of the member
 * @minLength 1
 */
export type CreateMemberBodyRole = typeof CreateMemberBodyRole[keyof typeof CreateMemberBodyRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateMemberBodyRole = {
  admin: 'admin',
  owner: 'owner',
  member: 'member',
} as const;

export type CreateMemberBody = {
  /**
   * The role of the member
   * @minLength 1
   */
  role: CreateMemberBodyRole;
};

export type CreateMember201 = {
  data: Member;
};

export type FindManyMembersParams = {
/**
 * A recursive filter node that can be a condition or group
 */
filter?: MembersFilterParameter;
/**
 * Pagination (page number & size)
 */
page?: PageQueryParameter;
/**
 * The sort parameter
 */
sort?: MembersSortParameter;
};

export type FindManyMembers200Meta = {
  /** Total number of items in the collection */
  total: number;
};

export type FindManyMembers200 = {
  data: Member[];
  meta: FindManyMembers200Meta;
};

export type DeleteMember200 = {
  data: Member;
};

export type GetOneMember200 = {
  data: Member;
};

/**
 * The role of the member
 */
export type UpdateMemberBodyRole = typeof UpdateMemberBodyRole[keyof typeof UpdateMemberBodyRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateMemberBodyRole = {
  admin: 'admin',
  owner: 'owner',
  member: 'member',
} as const;

export type UpdateMemberBody = {
  /** The role of the member */
  role?: UpdateMemberBodyRole;
};

export type UpdateMember200 = {
  data: Member;
};

/**
 * The role of the invitation
 * @minLength 1
 */
export type CreateInvitationBodyRole = typeof CreateInvitationBodyRole[keyof typeof CreateInvitationBodyRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateInvitationBodyRole = {
  admin: 'admin',
  owner: 'owner',
  member: 'member',
} as const;

export type CreateInvitationBody = {
  /**
   * The email of the invitated user
   * @minLength 1
   */
  email: string;
  /**
   * The role of the invitation
   * @minLength 1
   */
  role: CreateInvitationBodyRole;
};

export type CreateInvitation201 = {
  data: Invitation;
};

export type FindManyInvitationsParams = {
/**
 * A recursive filter node that can be a condition or group
 */
filter?: InvitationsFilterParameter;
/**
 * Pagination (page number & size)
 */
page?: PageQueryParameter;
/**
 * The sort parameter
 */
sort?: InvitationsSortParameter;
};

export type FindManyInvitations200Meta = {
  /** Total number of items in the collection */
  total: number;
};

export type FindManyInvitations200 = {
  data: Invitation[];
  meta: FindManyInvitations200Meta;
};

export type DeleteInvitation200 = {
  data: Invitation;
};

export type GetOneInvitation200 = {
  data: Invitation;
};

/**
 * The role of the invitation
 */
export type UpdateInvitationBodyRole = typeof UpdateInvitationBodyRole[keyof typeof UpdateInvitationBodyRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateInvitationBodyRole = {
  admin: 'admin',
  owner: 'owner',
  member: 'member',
} as const;

export type UpdateInvitationBody = {
  /** The email of the invitated user */
  email?: string;
  /** The role of the invitation */
  role?: UpdateInvitationBodyRole;
};

export type UpdateInvitation200 = {
  data: Invitation;
};

export type CreatePipelineBody = {
  /**
   * The pipeline description
   * @minLength 1
   */
  description?: string;
  /**
   * The pipeline name
   * @minLength 1
   */
  name?: string;
};

export type CreatePipeline201 = {
  data: Pipeline;
};

export type FindManyPipelinesParams = {
/**
 * A recursive filter node that can be a condition or group
 */
filter?: PipelinesFilterParameter;
/**
 * Pagination (page number & size)
 */
page?: PageQueryParameter;
/**
 * The sort parameter
 */
sort?: PipelinesSortParameter;
};

export type FindManyPipelines200Meta = {
  /** Total number of items in the collection */
  total: number;
};

export type FindManyPipelines200 = {
  data: Pipeline[];
  meta: FindManyPipelines200Meta;
};

export type DeletePipeline200 = {
  data: Pipeline;
};

export type GetOnePipeline200 = {
  data: Pipeline;
};

export type UpdatePipelineBody = {
  /** The pipeline description */
  description?: string;
  /** The pipeline name */
  name?: string;
};

export type UpdatePipeline200 = {
  data: Pipeline;
};

export type CreateRunBody = {
  /**
   * The pipeline ID associated with the run
   * @minLength 1
   */
  pipelineId: string;
};

export type CreateRun201 = {
  data: Run;
};

export type FindManyRunsParams = {
/**
 * A recursive filter node that can be a condition or group
 */
filter?: RunsFilterParameter;
/**
 * Pagination (page number & size)
 */
page?: PageQueryParameter;
/**
 * The sort parameter
 */
sort?: RunsSortParameter;
};

export type FindManyRuns200Meta = {
  /** Total number of items in the collection */
  total: number;
};

export type FindManyRuns200 = {
  data: Run[];
  meta: FindManyRuns200Meta;
};

export type DeleteRun200 = {
  data: Run;
};

export type GetOneRun200 = {
  data: Run;
};

export type UpdateRunBody = {
  /** The pipeline ID associated with the run */
  pipelineId?: string;
};

export type UpdateRun200 = {
  data: Run;
};

export type CreateToolBody = {
  /**
   * The tool description
   * @minLength 1
   */
  description: string;
  /**
   * The name of the tool
   * @minLength 1
   */
  name: string;
};

export type CreateTool201 = {
  data: Tool;
};

export type FindManyToolsParams = {
/**
 * A recursive filter node that can be a condition or group
 */
filter?: ToolsFilterParameter;
/**
 * Pagination (page number & size)
 */
page?: PageQueryParameter;
/**
 * The sort parameter
 */
sort?: ToolsSortParameter;
};

export type FindManyTools200Meta = {
  /** Total number of items in the collection */
  total: number;
};

export type FindManyTools200 = {
  data: Tool[];
  meta: FindManyTools200Meta;
};

export type DeleteTool200 = {
  data: Tool;
};

export type GetOneTool200 = {
  data: Tool;
};

export type UpdateToolBody = {
  /**
   * The tool description
   * @minLength 1
   */
  description?: string;
  /**
   * The name of the tool
   * @minLength 1
   */
  name?: string;
};

export type UpdateTool200 = {
  data: Tool;
};

export type CreateArtifactBody = {
  /**
   * The name of the artifact
   * @minLength 1
   */
  name?: string;
  /**
   * The artifact text
   * @minLength 1
   */
  text: string;
};

export type CreateArtifact201 = {
  data: Artifact;
};

export type FindManyArtifactsParams = {
/**
 * A recursive filter node that can be a condition or group
 */
filter?: ArtifactsFilterParameter;
/**
 * Pagination (page number & size)
 */
page?: PageQueryParameter;
/**
 * The sort parameter
 */
sort?: ArtifactsSortParameter;
};

export type FindManyArtifacts200Meta = {
  /** Total number of items in the collection */
  total: number;
};

export type FindManyArtifacts200 = {
  data: Artifact[];
  meta: FindManyArtifacts200Meta;
};

export type DeleteArtifact200 = {
  data: Artifact;
};

export type GetOneArtifact200 = {
  data: Artifact;
};

export type UpdateArtifactBody = {
  /**
   * The name of the artifact
   * @minLength 1
   */
  name?: string;
  /** The artifact text */
  text?: string;
  /** The artifact URL */
  url?: string;
};

export type UpdateArtifact200 = {
  data: Artifact;
};

export type CreateLabelBody = {
  /**
   * The name of the label
   * @minLength 1
   */
  name: string;
};

export type CreateLabel201 = {
  data: Label;
};

export type FindManyLabelsParams = {
/**
 * A recursive filter node that can be a condition or group
 */
filter?: LabelsFilterParameter;
/**
 * Pagination (page number & size)
 */
page?: PageQueryParameter;
/**
 * The sort parameter
 */
sort?: LabelsSortParameter;
};

export type FindManyLabels200Meta = {
  /** Total number of items in the collection */
  total: number;
};

export type FindManyLabels200 = {
  data: Label[];
  meta: FindManyLabels200Meta;
};

export type DeleteLabel200 = {
  data: Label;
};

export type GetOneLabel200 = {
  data: Label;
};

export type UpdateLabelBody = {
  /**
   * The name of the label
   * @minLength 1
   */
  name?: string;
};

export type UpdateLabel200 = {
  data: Label;
};

