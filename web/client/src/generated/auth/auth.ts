/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v0.0.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query';

import type {
  BadRequestResponse,
  InternalServerErrorResponse,
  NotFoundResponse,
  OauthAuthorize200,
  OauthAuthorizeParams,
  OauthCallbackParams,
  Problem,
  RequestMagicLink200,
  RequestMagicLinkBody,
  Session,
  TooManyRequestsResponse,
  UnauthorizedResponse,
  VerifyMagicLinkBody
} from '../orval.schemas';

import { customFetch } from '../../fetcher';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Redirect user to OAuth provider authorization page
 * @summary Start OAuth authorization flow
 */
export const getOauthAuthorizeUrl = (provider: 'google' | 'github' | 'microsoft' | undefined | null,
    params?: OauthAuthorizeParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/auth/oauth/${provider}/authorize?${stringifiedParams}` : `/auth/oauth/${provider}/authorize`
}

export const oauthAuthorize = async (provider: 'google' | 'github' | 'microsoft' | undefined | null,
    params?: OauthAuthorizeParams, options?: RequestInit): Promise<OauthAuthorize200> => {
  
  return customFetch<OauthAuthorize200>(getOauthAuthorizeUrl(provider,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getOauthAuthorizeQueryKey = (provider?: 'google' | 'github' | 'microsoft' | undefined | null,
    params?: OauthAuthorizeParams,) => {
    return [`/auth/oauth/${provider}/authorize`, ...(params ? [params]: [])] as const;
    }

    
export const getOauthAuthorizeQueryOptions = <TData = Awaited<ReturnType<typeof oauthAuthorize>>, TError = null | BadRequestResponse | Problem>(provider: 'google' | 'github' | 'microsoft' | undefined | null,
    params?: OauthAuthorizeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof oauthAuthorize>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOauthAuthorizeQueryKey(provider,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof oauthAuthorize>>> = ({ signal }) => oauthAuthorize(provider,params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(provider), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof oauthAuthorize>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type OauthAuthorizeQueryResult = NonNullable<Awaited<ReturnType<typeof oauthAuthorize>>>
export type OauthAuthorizeQueryError = null | BadRequestResponse | Problem


export function useOauthAuthorize<TData = Awaited<ReturnType<typeof oauthAuthorize>>, TError = null | BadRequestResponse | Problem>(
 provider: 'google' | 'github' | 'microsoft' | undefined | null,
    params: undefined |  OauthAuthorizeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof oauthAuthorize>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthAuthorize>>,
          TError,
          Awaited<ReturnType<typeof oauthAuthorize>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOauthAuthorize<TData = Awaited<ReturnType<typeof oauthAuthorize>>, TError = null | BadRequestResponse | Problem>(
 provider: 'google' | 'github' | 'microsoft' | undefined | null,
    params?: OauthAuthorizeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof oauthAuthorize>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthAuthorize>>,
          TError,
          Awaited<ReturnType<typeof oauthAuthorize>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOauthAuthorize<TData = Awaited<ReturnType<typeof oauthAuthorize>>, TError = null | BadRequestResponse | Problem>(
 provider: 'google' | 'github' | 'microsoft' | undefined | null,
    params?: OauthAuthorizeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof oauthAuthorize>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Start OAuth authorization flow
 */

export function useOauthAuthorize<TData = Awaited<ReturnType<typeof oauthAuthorize>>, TError = null | BadRequestResponse | Problem>(
 provider: 'google' | 'github' | 'microsoft' | undefined | null,
    params?: OauthAuthorizeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof oauthAuthorize>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getOauthAuthorizeQueryOptions(provider,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getOauthAuthorizeSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof oauthAuthorize>>, TError = null | BadRequestResponse | Problem>(provider: 'google' | 'github' | 'microsoft' | undefined | null,
    params?: OauthAuthorizeParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof oauthAuthorize>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOauthAuthorizeQueryKey(provider,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof oauthAuthorize>>> = ({ signal }) => oauthAuthorize(provider,params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof oauthAuthorize>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type OauthAuthorizeSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof oauthAuthorize>>>
export type OauthAuthorizeSuspenseQueryError = null | BadRequestResponse | Problem


export function useOauthAuthorizeSuspense<TData = Awaited<ReturnType<typeof oauthAuthorize>>, TError = null | BadRequestResponse | Problem>(
 provider: 'google' | 'github' | 'microsoft' | undefined | null,
    params: undefined |  OauthAuthorizeParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof oauthAuthorize>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOauthAuthorizeSuspense<TData = Awaited<ReturnType<typeof oauthAuthorize>>, TError = null | BadRequestResponse | Problem>(
 provider: 'google' | 'github' | 'microsoft' | undefined | null,
    params?: OauthAuthorizeParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof oauthAuthorize>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOauthAuthorizeSuspense<TData = Awaited<ReturnType<typeof oauthAuthorize>>, TError = null | BadRequestResponse | Problem>(
 provider: 'google' | 'github' | 'microsoft' | undefined | null,
    params?: OauthAuthorizeParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof oauthAuthorize>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Start OAuth authorization flow
 */

export function useOauthAuthorizeSuspense<TData = Awaited<ReturnType<typeof oauthAuthorize>>, TError = null | BadRequestResponse | Problem>(
 provider: 'google' | 'github' | 'microsoft' | undefined | null,
    params?: OauthAuthorizeParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof oauthAuthorize>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getOauthAuthorizeSuspenseQueryOptions(provider,params,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Handle the callback from OAuth provider and complete authentication
 * @summary Handle OAuth callback
 */
export const getOauthCallbackUrl = (provider: 'google' | 'github' | 'microsoft' | undefined | null,
    params?: OauthCallbackParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/auth/oauth/${provider}/callback?${stringifiedParams}` : `/auth/oauth/${provider}/callback`
}

export const oauthCallback = async (provider: 'google' | 'github' | 'microsoft' | undefined | null,
    params?: OauthCallbackParams, options?: RequestInit): Promise<Session> => {
  
  return customFetch<Session>(getOauthCallbackUrl(provider,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getOauthCallbackQueryKey = (provider?: 'google' | 'github' | 'microsoft' | undefined | null,
    params?: OauthCallbackParams,) => {
    return [`/auth/oauth/${provider}/callback`, ...(params ? [params]: [])] as const;
    }

    
export const getOauthCallbackQueryOptions = <TData = Awaited<ReturnType<typeof oauthCallback>>, TError = null | BadRequestResponse | UnauthorizedResponse | Problem>(provider: 'google' | 'github' | 'microsoft' | undefined | null,
    params?: OauthCallbackParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof oauthCallback>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOauthCallbackQueryKey(provider,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof oauthCallback>>> = ({ signal }) => oauthCallback(provider,params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(provider), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof oauthCallback>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type OauthCallbackQueryResult = NonNullable<Awaited<ReturnType<typeof oauthCallback>>>
export type OauthCallbackQueryError = null | BadRequestResponse | UnauthorizedResponse | Problem


export function useOauthCallback<TData = Awaited<ReturnType<typeof oauthCallback>>, TError = null | BadRequestResponse | UnauthorizedResponse | Problem>(
 provider: 'google' | 'github' | 'microsoft' | undefined | null,
    params: undefined |  OauthCallbackParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof oauthCallback>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthCallback>>,
          TError,
          Awaited<ReturnType<typeof oauthCallback>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOauthCallback<TData = Awaited<ReturnType<typeof oauthCallback>>, TError = null | BadRequestResponse | UnauthorizedResponse | Problem>(
 provider: 'google' | 'github' | 'microsoft' | undefined | null,
    params?: OauthCallbackParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof oauthCallback>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof oauthCallback>>,
          TError,
          Awaited<ReturnType<typeof oauthCallback>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOauthCallback<TData = Awaited<ReturnType<typeof oauthCallback>>, TError = null | BadRequestResponse | UnauthorizedResponse | Problem>(
 provider: 'google' | 'github' | 'microsoft' | undefined | null,
    params?: OauthCallbackParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof oauthCallback>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Handle OAuth callback
 */

export function useOauthCallback<TData = Awaited<ReturnType<typeof oauthCallback>>, TError = null | BadRequestResponse | UnauthorizedResponse | Problem>(
 provider: 'google' | 'github' | 'microsoft' | undefined | null,
    params?: OauthCallbackParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof oauthCallback>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getOauthCallbackQueryOptions(provider,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getOauthCallbackSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof oauthCallback>>, TError = null | BadRequestResponse | UnauthorizedResponse | Problem>(provider: 'google' | 'github' | 'microsoft' | undefined | null,
    params?: OauthCallbackParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof oauthCallback>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOauthCallbackQueryKey(provider,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof oauthCallback>>> = ({ signal }) => oauthCallback(provider,params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof oauthCallback>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type OauthCallbackSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof oauthCallback>>>
export type OauthCallbackSuspenseQueryError = null | BadRequestResponse | UnauthorizedResponse | Problem


export function useOauthCallbackSuspense<TData = Awaited<ReturnType<typeof oauthCallback>>, TError = null | BadRequestResponse | UnauthorizedResponse | Problem>(
 provider: 'google' | 'github' | 'microsoft' | undefined | null,
    params: undefined |  OauthCallbackParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof oauthCallback>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOauthCallbackSuspense<TData = Awaited<ReturnType<typeof oauthCallback>>, TError = null | BadRequestResponse | UnauthorizedResponse | Problem>(
 provider: 'google' | 'github' | 'microsoft' | undefined | null,
    params?: OauthCallbackParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof oauthCallback>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOauthCallbackSuspense<TData = Awaited<ReturnType<typeof oauthCallback>>, TError = null | BadRequestResponse | UnauthorizedResponse | Problem>(
 provider: 'google' | 'github' | 'microsoft' | undefined | null,
    params?: OauthCallbackParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof oauthCallback>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Handle OAuth callback
 */

export function useOauthCallbackSuspense<TData = Awaited<ReturnType<typeof oauthCallback>>, TError = null | BadRequestResponse | UnauthorizedResponse | Problem>(
 provider: 'google' | 'github' | 'microsoft' | undefined | null,
    params?: OauthCallbackParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof oauthCallback>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getOauthCallbackSuspenseQueryOptions(provider,params,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Request a magic link to be sent via email or generate an OTP code
 * @summary Request a magic link
 */
export const getRequestMagicLinkUrl = () => {


  

  return `/auth/magic-links/request`
}

export const requestMagicLink = async (requestMagicLinkBody: RequestMagicLinkBody, options?: RequestInit): Promise<RequestMagicLink200> => {
  
  return customFetch<RequestMagicLink200>(getRequestMagicLinkUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      requestMagicLinkBody,)
  }
);}




export const getRequestMagicLinkMutationOptions = <TError = BadRequestResponse | TooManyRequestsResponse | InternalServerErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof requestMagicLink>>, TError,{data: RequestMagicLinkBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof requestMagicLink>>, TError,{data: RequestMagicLinkBody}, TContext> => {

const mutationKey = ['requestMagicLink'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof requestMagicLink>>, {data: RequestMagicLinkBody}> = (props) => {
          const {data} = props ?? {};

          return  requestMagicLink(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RequestMagicLinkMutationResult = NonNullable<Awaited<ReturnType<typeof requestMagicLink>>>
    export type RequestMagicLinkMutationBody = RequestMagicLinkBody
    export type RequestMagicLinkMutationError = BadRequestResponse | TooManyRequestsResponse | InternalServerErrorResponse

    /**
 * @summary Request a magic link
 */
export const useRequestMagicLink = <TError = BadRequestResponse | TooManyRequestsResponse | InternalServerErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof requestMagicLink>>, TError,{data: RequestMagicLinkBody}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof requestMagicLink>>,
        TError,
        {data: RequestMagicLinkBody},
        TContext
      > => {

      const mutationOptions = getRequestMagicLinkMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Verify a magic link token or OTP code and create a session
 * @summary Verify a magic link token
 */
export const getVerifyMagicLinkUrl = () => {


  

  return `/auth/magic-links/verify`
}

export const verifyMagicLink = async (verifyMagicLinkBody: VerifyMagicLinkBody, options?: RequestInit): Promise<Session> => {
  
  return customFetch<Session>(getVerifyMagicLinkUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      verifyMagicLinkBody,)
  }
);}




export const getVerifyMagicLinkMutationOptions = <TError = BadRequestResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof verifyMagicLink>>, TError,{data: VerifyMagicLinkBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof verifyMagicLink>>, TError,{data: VerifyMagicLinkBody}, TContext> => {

const mutationKey = ['verifyMagicLink'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof verifyMagicLink>>, {data: VerifyMagicLinkBody}> = (props) => {
          const {data} = props ?? {};

          return  verifyMagicLink(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type VerifyMagicLinkMutationResult = NonNullable<Awaited<ReturnType<typeof verifyMagicLink>>>
    export type VerifyMagicLinkMutationBody = VerifyMagicLinkBody
    export type VerifyMagicLinkMutationError = BadRequestResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse

    /**
 * @summary Verify a magic link token
 */
export const useVerifyMagicLink = <TError = BadRequestResponse | UnauthorizedResponse | NotFoundResponse | InternalServerErrorResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof verifyMagicLink>>, TError,{data: VerifyMagicLinkBody}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof verifyMagicLink>>,
        TError,
        {data: VerifyMagicLinkBody},
        TContext
      > => {

      const mutationOptions = getVerifyMagicLinkMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    