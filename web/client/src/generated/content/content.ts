/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v0.0.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query';

import type {
  BadRequestResponse,
  CreateArtifact201,
  CreateArtifactBody,
  CreateLabel201,
  CreateLabelBody,
  DeleteArtifact200,
  DeleteLabel200,
  FindManyArtifacts200,
  FindManyArtifactsParams,
  FindManyLabels200,
  FindManyLabelsParams,
  GetOneArtifact200,
  GetOneLabel200,
  NotFoundResponse,
  UnauthorizedResponse,
  UpdateArtifact200,
  UpdateArtifactBody,
  UpdateLabel200,
  UpdateLabelBody
} from '../orval.schemas';

import { customFetch } from '../../fetcher';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Create a new artifact
 * @summary Create a new artifact
 */
export const getCreateArtifactUrl = () => {


  

  return `/content/artifacts`
}

export const createArtifact = async (createArtifactBody: CreateArtifactBody, options?: RequestInit): Promise<CreateArtifact201> => {
  
  return customFetch<CreateArtifact201>(getCreateArtifactUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createArtifactBody,)
  }
);}




export const getCreateArtifactMutationOptions = <TError = BadRequestResponse | UnauthorizedResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createArtifact>>, TError,{data: CreateArtifactBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof createArtifact>>, TError,{data: CreateArtifactBody}, TContext> => {

const mutationKey = ['createArtifact'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createArtifact>>, {data: CreateArtifactBody}> = (props) => {
          const {data} = props ?? {};

          return  createArtifact(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateArtifactMutationResult = NonNullable<Awaited<ReturnType<typeof createArtifact>>>
    export type CreateArtifactMutationBody = CreateArtifactBody
    export type CreateArtifactMutationError = BadRequestResponse | UnauthorizedResponse

    /**
 * @summary Create a new artifact
 */
export const useCreateArtifact = <TError = BadRequestResponse | UnauthorizedResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createArtifact>>, TError,{data: CreateArtifactBody}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createArtifact>>,
        TError,
        {data: CreateArtifactBody},
        TContext
      > => {

      const mutationOptions = getCreateArtifactMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Find many artifacts
 * @summary Find many artifacts
 */
export const getFindManyArtifactsUrl = (params?: FindManyArtifactsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    const explodeParameters = ["sort"];

    if (Array.isArray(value) && explodeParameters.includes(key)) {
      value.forEach((v) => normalizedParams.append(key, v === null ? 'null' : v.toString()));
      return;
    }
      
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/content/artifacts?${stringifiedParams}` : `/content/artifacts`
}

export const findManyArtifacts = async (params?: FindManyArtifactsParams, options?: RequestInit): Promise<FindManyArtifacts200> => {
  
  return customFetch<FindManyArtifacts200>(getFindManyArtifactsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getFindManyArtifactsQueryKey = (params?: FindManyArtifactsParams,) => {
    return [`/content/artifacts`, ...(params ? [params]: [])] as const;
    }

    
export const getFindManyArtifactsQueryOptions = <TData = Awaited<ReturnType<typeof findManyArtifacts>>, TError = BadRequestResponse | UnauthorizedResponse>(params?: FindManyArtifactsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findManyArtifacts>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindManyArtifactsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findManyArtifacts>>> = ({ signal }) => findManyArtifacts(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findManyArtifacts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindManyArtifactsQueryResult = NonNullable<Awaited<ReturnType<typeof findManyArtifacts>>>
export type FindManyArtifactsQueryError = BadRequestResponse | UnauthorizedResponse


export function useFindManyArtifacts<TData = Awaited<ReturnType<typeof findManyArtifacts>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params: undefined |  FindManyArtifactsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findManyArtifacts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findManyArtifacts>>,
          TError,
          Awaited<ReturnType<typeof findManyArtifacts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindManyArtifacts<TData = Awaited<ReturnType<typeof findManyArtifacts>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: FindManyArtifactsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findManyArtifacts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findManyArtifacts>>,
          TError,
          Awaited<ReturnType<typeof findManyArtifacts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindManyArtifacts<TData = Awaited<ReturnType<typeof findManyArtifacts>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: FindManyArtifactsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findManyArtifacts>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Find many artifacts
 */

export function useFindManyArtifacts<TData = Awaited<ReturnType<typeof findManyArtifacts>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: FindManyArtifactsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findManyArtifacts>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindManyArtifactsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFindManyArtifactsSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof findManyArtifacts>>, TError = BadRequestResponse | UnauthorizedResponse>(params?: FindManyArtifactsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findManyArtifacts>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindManyArtifactsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findManyArtifacts>>> = ({ signal }) => findManyArtifacts(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof findManyArtifacts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindManyArtifactsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof findManyArtifacts>>>
export type FindManyArtifactsSuspenseQueryError = BadRequestResponse | UnauthorizedResponse


export function useFindManyArtifactsSuspense<TData = Awaited<ReturnType<typeof findManyArtifacts>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params: undefined |  FindManyArtifactsParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findManyArtifacts>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindManyArtifactsSuspense<TData = Awaited<ReturnType<typeof findManyArtifacts>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: FindManyArtifactsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findManyArtifacts>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindManyArtifactsSuspense<TData = Awaited<ReturnType<typeof findManyArtifacts>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: FindManyArtifactsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findManyArtifacts>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Find many artifacts
 */

export function useFindManyArtifactsSuspense<TData = Awaited<ReturnType<typeof findManyArtifacts>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: FindManyArtifactsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findManyArtifacts>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindManyArtifactsSuspenseQueryOptions(params,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Delete an artifact
 * @summary Delete an artifact
 */
export const getDeleteArtifactUrl = (id: string | undefined | null,) => {


  

  return `/content/artifacts/${id}`
}

export const deleteArtifact = async (id: string | undefined | null, options?: RequestInit): Promise<DeleteArtifact200> => {
  
  return customFetch<DeleteArtifact200>(getDeleteArtifactUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}




export const getDeleteArtifactMutationOptions = <TError = NotFoundResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteArtifact>>, TError,{id: string | undefined | null}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteArtifact>>, TError,{id: string | undefined | null}, TContext> => {

const mutationKey = ['deleteArtifact'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteArtifact>>, {id: string | undefined | null}> = (props) => {
          const {id} = props ?? {};

          return  deleteArtifact(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteArtifactMutationResult = NonNullable<Awaited<ReturnType<typeof deleteArtifact>>>
    
    export type DeleteArtifactMutationError = NotFoundResponse

    /**
 * @summary Delete an artifact
 */
export const useDeleteArtifact = <TError = NotFoundResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteArtifact>>, TError,{id: string | undefined | null}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteArtifact>>,
        TError,
        {id: string | undefined | null},
        TContext
      > => {

      const mutationOptions = getDeleteArtifactMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Find an artifact
 * @summary Find an artifact
 */
export const getGetOneArtifactUrl = (id: string | undefined | null,) => {


  

  return `/content/artifacts/${id}`
}

export const getOneArtifact = async (id: string | undefined | null, options?: RequestInit): Promise<GetOneArtifact200> => {
  
  return customFetch<GetOneArtifact200>(getGetOneArtifactUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetOneArtifactQueryKey = (id?: string | undefined | null,) => {
    return [`/content/artifacts/${id}`] as const;
    }

    
export const getGetOneArtifactQueryOptions = <TData = Awaited<ReturnType<typeof getOneArtifact>>, TError = NotFoundResponse>(id: string | undefined | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOneArtifact>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOneArtifactQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneArtifact>>> = ({ signal }) => getOneArtifact(id, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOneArtifact>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOneArtifactQueryResult = NonNullable<Awaited<ReturnType<typeof getOneArtifact>>>
export type GetOneArtifactQueryError = NotFoundResponse


export function useGetOneArtifact<TData = Awaited<ReturnType<typeof getOneArtifact>>, TError = NotFoundResponse>(
 id: string | undefined | null, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOneArtifact>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOneArtifact>>,
          TError,
          Awaited<ReturnType<typeof getOneArtifact>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOneArtifact<TData = Awaited<ReturnType<typeof getOneArtifact>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOneArtifact>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOneArtifact>>,
          TError,
          Awaited<ReturnType<typeof getOneArtifact>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOneArtifact<TData = Awaited<ReturnType<typeof getOneArtifact>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOneArtifact>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Find an artifact
 */

export function useGetOneArtifact<TData = Awaited<ReturnType<typeof getOneArtifact>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOneArtifact>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOneArtifactQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetOneArtifactSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getOneArtifact>>, TError = NotFoundResponse>(id: string | undefined | null, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOneArtifact>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOneArtifactQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneArtifact>>> = ({ signal }) => getOneArtifact(id, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOneArtifact>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOneArtifactSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getOneArtifact>>>
export type GetOneArtifactSuspenseQueryError = NotFoundResponse


export function useGetOneArtifactSuspense<TData = Awaited<ReturnType<typeof getOneArtifact>>, TError = NotFoundResponse>(
 id: string | undefined | null, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOneArtifact>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOneArtifactSuspense<TData = Awaited<ReturnType<typeof getOneArtifact>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOneArtifact>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOneArtifactSuspense<TData = Awaited<ReturnType<typeof getOneArtifact>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOneArtifact>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Find an artifact
 */

export function useGetOneArtifactSuspense<TData = Awaited<ReturnType<typeof getOneArtifact>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOneArtifact>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOneArtifactSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update an artifact
 * @summary Update an artifact
 */
export const getUpdateArtifactUrl = (id: string | undefined | null,) => {


  

  return `/content/artifacts/${id}`
}

export const updateArtifact = async (id: string | undefined | null,
    updateArtifactBody: UpdateArtifactBody, options?: RequestInit): Promise<UpdateArtifact200> => {
  
  return customFetch<UpdateArtifact200>(getUpdateArtifactUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateArtifactBody,)
  }
);}




export const getUpdateArtifactMutationOptions = <TError = NotFoundResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateArtifact>>, TError,{id: string | undefined | null;data: UpdateArtifactBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof updateArtifact>>, TError,{id: string | undefined | null;data: UpdateArtifactBody}, TContext> => {

const mutationKey = ['updateArtifact'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateArtifact>>, {id: string | undefined | null;data: UpdateArtifactBody}> = (props) => {
          const {id,data} = props ?? {};

          return  updateArtifact(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateArtifactMutationResult = NonNullable<Awaited<ReturnType<typeof updateArtifact>>>
    export type UpdateArtifactMutationBody = UpdateArtifactBody
    export type UpdateArtifactMutationError = NotFoundResponse

    /**
 * @summary Update an artifact
 */
export const useUpdateArtifact = <TError = NotFoundResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateArtifact>>, TError,{id: string | undefined | null;data: UpdateArtifactBody}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateArtifact>>,
        TError,
        {id: string | undefined | null;data: UpdateArtifactBody},
        TContext
      > => {

      const mutationOptions = getUpdateArtifactMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Create a new label
 * @summary Create a new label
 */
export const getCreateLabelUrl = () => {


  

  return `/content/labels`
}

export const createLabel = async (createLabelBody: CreateLabelBody, options?: RequestInit): Promise<CreateLabel201> => {
  
  return customFetch<CreateLabel201>(getCreateLabelUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createLabelBody,)
  }
);}




export const getCreateLabelMutationOptions = <TError = BadRequestResponse | UnauthorizedResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createLabel>>, TError,{data: CreateLabelBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof createLabel>>, TError,{data: CreateLabelBody}, TContext> => {

const mutationKey = ['createLabel'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createLabel>>, {data: CreateLabelBody}> = (props) => {
          const {data} = props ?? {};

          return  createLabel(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateLabelMutationResult = NonNullable<Awaited<ReturnType<typeof createLabel>>>
    export type CreateLabelMutationBody = CreateLabelBody
    export type CreateLabelMutationError = BadRequestResponse | UnauthorizedResponse

    /**
 * @summary Create a new label
 */
export const useCreateLabel = <TError = BadRequestResponse | UnauthorizedResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createLabel>>, TError,{data: CreateLabelBody}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createLabel>>,
        TError,
        {data: CreateLabelBody},
        TContext
      > => {

      const mutationOptions = getCreateLabelMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Find many labels
 * @summary Find many labels
 */
export const getFindManyLabelsUrl = (params?: FindManyLabelsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    const explodeParameters = ["sort"];

    if (Array.isArray(value) && explodeParameters.includes(key)) {
      value.forEach((v) => normalizedParams.append(key, v === null ? 'null' : v.toString()));
      return;
    }
      
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/content/labels?${stringifiedParams}` : `/content/labels`
}

export const findManyLabels = async (params?: FindManyLabelsParams, options?: RequestInit): Promise<FindManyLabels200> => {
  
  return customFetch<FindManyLabels200>(getFindManyLabelsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getFindManyLabelsQueryKey = (params?: FindManyLabelsParams,) => {
    return [`/content/labels`, ...(params ? [params]: [])] as const;
    }

    
export const getFindManyLabelsQueryOptions = <TData = Awaited<ReturnType<typeof findManyLabels>>, TError = BadRequestResponse | UnauthorizedResponse>(params?: FindManyLabelsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findManyLabels>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindManyLabelsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findManyLabels>>> = ({ signal }) => findManyLabels(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof findManyLabels>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindManyLabelsQueryResult = NonNullable<Awaited<ReturnType<typeof findManyLabels>>>
export type FindManyLabelsQueryError = BadRequestResponse | UnauthorizedResponse


export function useFindManyLabels<TData = Awaited<ReturnType<typeof findManyLabels>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params: undefined |  FindManyLabelsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof findManyLabels>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findManyLabels>>,
          TError,
          Awaited<ReturnType<typeof findManyLabels>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindManyLabels<TData = Awaited<ReturnType<typeof findManyLabels>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: FindManyLabelsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findManyLabels>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findManyLabels>>,
          TError,
          Awaited<ReturnType<typeof findManyLabels>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindManyLabels<TData = Awaited<ReturnType<typeof findManyLabels>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: FindManyLabelsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findManyLabels>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Find many labels
 */

export function useFindManyLabels<TData = Awaited<ReturnType<typeof findManyLabels>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: FindManyLabelsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof findManyLabels>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindManyLabelsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getFindManyLabelsSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof findManyLabels>>, TError = BadRequestResponse | UnauthorizedResponse>(params?: FindManyLabelsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findManyLabels>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getFindManyLabelsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof findManyLabels>>> = ({ signal }) => findManyLabels(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof findManyLabels>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindManyLabelsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof findManyLabels>>>
export type FindManyLabelsSuspenseQueryError = BadRequestResponse | UnauthorizedResponse


export function useFindManyLabelsSuspense<TData = Awaited<ReturnType<typeof findManyLabels>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params: undefined |  FindManyLabelsParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findManyLabels>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindManyLabelsSuspense<TData = Awaited<ReturnType<typeof findManyLabels>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: FindManyLabelsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findManyLabels>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useFindManyLabelsSuspense<TData = Awaited<ReturnType<typeof findManyLabels>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: FindManyLabelsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findManyLabels>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Find many labels
 */

export function useFindManyLabelsSuspense<TData = Awaited<ReturnType<typeof findManyLabels>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: FindManyLabelsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof findManyLabels>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getFindManyLabelsSuspenseQueryOptions(params,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Delete a label
 * @summary Delete a label
 */
export const getDeleteLabelUrl = (id: string | undefined | null,) => {


  

  return `/content/labels/${id}`
}

export const deleteLabel = async (id: string | undefined | null, options?: RequestInit): Promise<DeleteLabel200> => {
  
  return customFetch<DeleteLabel200>(getDeleteLabelUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}




export const getDeleteLabelMutationOptions = <TError = NotFoundResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLabel>>, TError,{id: string | undefined | null}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteLabel>>, TError,{id: string | undefined | null}, TContext> => {

const mutationKey = ['deleteLabel'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteLabel>>, {id: string | undefined | null}> = (props) => {
          const {id} = props ?? {};

          return  deleteLabel(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteLabelMutationResult = NonNullable<Awaited<ReturnType<typeof deleteLabel>>>
    
    export type DeleteLabelMutationError = NotFoundResponse

    /**
 * @summary Delete a label
 */
export const useDeleteLabel = <TError = NotFoundResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteLabel>>, TError,{id: string | undefined | null}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteLabel>>,
        TError,
        {id: string | undefined | null},
        TContext
      > => {

      const mutationOptions = getDeleteLabelMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Find a label
 * @summary Find a label
 */
export const getGetOneLabelUrl = (id: string | undefined | null,) => {


  

  return `/content/labels/${id}`
}

export const getOneLabel = async (id: string | undefined | null, options?: RequestInit): Promise<GetOneLabel200> => {
  
  return customFetch<GetOneLabel200>(getGetOneLabelUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetOneLabelQueryKey = (id?: string | undefined | null,) => {
    return [`/content/labels/${id}`] as const;
    }

    
export const getGetOneLabelQueryOptions = <TData = Awaited<ReturnType<typeof getOneLabel>>, TError = NotFoundResponse>(id: string | undefined | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOneLabel>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOneLabelQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneLabel>>> = ({ signal }) => getOneLabel(id, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getOneLabel>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOneLabelQueryResult = NonNullable<Awaited<ReturnType<typeof getOneLabel>>>
export type GetOneLabelQueryError = NotFoundResponse


export function useGetOneLabel<TData = Awaited<ReturnType<typeof getOneLabel>>, TError = NotFoundResponse>(
 id: string | undefined | null, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOneLabel>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOneLabel>>,
          TError,
          Awaited<ReturnType<typeof getOneLabel>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOneLabel<TData = Awaited<ReturnType<typeof getOneLabel>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOneLabel>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOneLabel>>,
          TError,
          Awaited<ReturnType<typeof getOneLabel>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOneLabel<TData = Awaited<ReturnType<typeof getOneLabel>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOneLabel>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Find a label
 */

export function useGetOneLabel<TData = Awaited<ReturnType<typeof getOneLabel>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getOneLabel>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOneLabelQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetOneLabelSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getOneLabel>>, TError = NotFoundResponse>(id: string | undefined | null, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOneLabel>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetOneLabelQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneLabel>>> = ({ signal }) => getOneLabel(id, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOneLabel>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOneLabelSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getOneLabel>>>
export type GetOneLabelSuspenseQueryError = NotFoundResponse


export function useGetOneLabelSuspense<TData = Awaited<ReturnType<typeof getOneLabel>>, TError = NotFoundResponse>(
 id: string | undefined | null, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOneLabel>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOneLabelSuspense<TData = Awaited<ReturnType<typeof getOneLabel>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOneLabel>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetOneLabelSuspense<TData = Awaited<ReturnType<typeof getOneLabel>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOneLabel>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Find a label
 */

export function useGetOneLabelSuspense<TData = Awaited<ReturnType<typeof getOneLabel>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getOneLabel>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetOneLabelSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update a label
 * @summary Update a label
 */
export const getUpdateLabelUrl = (id: string | undefined | null,) => {


  

  return `/content/labels/${id}`
}

export const updateLabel = async (id: string | undefined | null,
    updateLabelBody: UpdateLabelBody, options?: RequestInit): Promise<UpdateLabel200> => {
  
  return customFetch<UpdateLabel200>(getUpdateLabelUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateLabelBody,)
  }
);}




export const getUpdateLabelMutationOptions = <TError = NotFoundResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateLabel>>, TError,{id: string | undefined | null;data: UpdateLabelBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof updateLabel>>, TError,{id: string | undefined | null;data: UpdateLabelBody}, TContext> => {

const mutationKey = ['updateLabel'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateLabel>>, {id: string | undefined | null;data: UpdateLabelBody}> = (props) => {
          const {id,data} = props ?? {};

          return  updateLabel(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateLabelMutationResult = NonNullable<Awaited<ReturnType<typeof updateLabel>>>
    export type UpdateLabelMutationBody = UpdateLabelBody
    export type UpdateLabelMutationError = NotFoundResponse

    /**
 * @summary Update a label
 */
export const useUpdateLabel = <TError = NotFoundResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateLabel>>, TError,{id: string | undefined | null;data: UpdateLabelBody}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateLabel>>,
        TError,
        {id: string | undefined | null;data: UpdateLabelBody},
        TContext
      > => {

      const mutationOptions = getUpdateLabelMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    