/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v0.0.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query';

import type {
  BadRequestResponse,
  CreateRun201,
  CreateRunBody,
  DeleteRun200,
  GetRun200,
  ListRuns200,
  ListRunsParams,
  NotFoundResponse,
  UnauthorizedResponse,
  UpdateRun200,
  UpdateRunBody
} from '../orval.schemas';

import { customFetch } from '../../fetcher';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Create a run
 * @summary Create a run
 */
export const getCreateRunUrl = () => {


  

  return `/runs`
}

export const createRun = async (createRunBody: CreateRunBody, options?: RequestInit): Promise<CreateRun201> => {
  
  return customFetch<CreateRun201>(getCreateRunUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createRunBody,)
  }
);}




export const getCreateRunMutationOptions = <TError = BadRequestResponse | UnauthorizedResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createRun>>, TError,{data: CreateRunBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof createRun>>, TError,{data: CreateRunBody}, TContext> => {

const mutationKey = ['createRun'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createRun>>, {data: CreateRunBody}> = (props) => {
          const {data} = props ?? {};

          return  createRun(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateRunMutationResult = NonNullable<Awaited<ReturnType<typeof createRun>>>
    export type CreateRunMutationBody = CreateRunBody
    export type CreateRunMutationError = BadRequestResponse | UnauthorizedResponse

    /**
 * @summary Create a run
 */
export const useCreateRun = <TError = BadRequestResponse | UnauthorizedResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createRun>>, TError,{data: CreateRunBody}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createRun>>,
        TError,
        {data: CreateRunBody},
        TContext
      > => {

      const mutationOptions = getCreateRunMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * List runs
 * @summary List runs
 */
export const getListRunsUrl = (params?: ListRunsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    const explodeParameters = ["sort"];

    if (Array.isArray(value) && explodeParameters.includes(key)) {
      value.forEach((v) => normalizedParams.append(key, v === null ? 'null' : v.toString()));
      return;
    }
      
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/runs?${stringifiedParams}` : `/runs`
}

export const listRuns = async (params?: ListRunsParams, options?: RequestInit): Promise<ListRuns200> => {
  
  return customFetch<ListRuns200>(getListRunsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getListRunsQueryKey = (params?: ListRunsParams,) => {
    return [`/runs`, ...(params ? [params]: [])] as const;
    }

    
export const getListRunsQueryOptions = <TData = Awaited<ReturnType<typeof listRuns>>, TError = BadRequestResponse | UnauthorizedResponse>(params?: ListRunsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listRuns>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListRunsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listRuns>>> = ({ signal }) => listRuns(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listRuns>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListRunsQueryResult = NonNullable<Awaited<ReturnType<typeof listRuns>>>
export type ListRunsQueryError = BadRequestResponse | UnauthorizedResponse


export function useListRuns<TData = Awaited<ReturnType<typeof listRuns>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params: undefined |  ListRunsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listRuns>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listRuns>>,
          TError,
          Awaited<ReturnType<typeof listRuns>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListRuns<TData = Awaited<ReturnType<typeof listRuns>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: ListRunsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listRuns>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listRuns>>,
          TError,
          Awaited<ReturnType<typeof listRuns>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListRuns<TData = Awaited<ReturnType<typeof listRuns>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: ListRunsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listRuns>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List runs
 */

export function useListRuns<TData = Awaited<ReturnType<typeof listRuns>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: ListRunsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listRuns>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListRunsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getListRunsSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof listRuns>>, TError = BadRequestResponse | UnauthorizedResponse>(params?: ListRunsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof listRuns>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListRunsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listRuns>>> = ({ signal }) => listRuns(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof listRuns>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListRunsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof listRuns>>>
export type ListRunsSuspenseQueryError = BadRequestResponse | UnauthorizedResponse


export function useListRunsSuspense<TData = Awaited<ReturnType<typeof listRuns>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params: undefined |  ListRunsParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof listRuns>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListRunsSuspense<TData = Awaited<ReturnType<typeof listRuns>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: ListRunsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof listRuns>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListRunsSuspense<TData = Awaited<ReturnType<typeof listRuns>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: ListRunsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof listRuns>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List runs
 */

export function useListRunsSuspense<TData = Awaited<ReturnType<typeof listRuns>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: ListRunsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof listRuns>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListRunsSuspenseQueryOptions(params,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Delete a run
 * @summary Delete a run
 */
export const getDeleteRunUrl = (id: string | undefined | null,) => {


  

  return `/runs/${id}`
}

export const deleteRun = async (id: string | undefined | null, options?: RequestInit): Promise<DeleteRun200> => {
  
  return customFetch<DeleteRun200>(getDeleteRunUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}




export const getDeleteRunMutationOptions = <TError = NotFoundResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRun>>, TError,{id: string | undefined | null}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteRun>>, TError,{id: string | undefined | null}, TContext> => {

const mutationKey = ['deleteRun'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteRun>>, {id: string | undefined | null}> = (props) => {
          const {id} = props ?? {};

          return  deleteRun(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteRunMutationResult = NonNullable<Awaited<ReturnType<typeof deleteRun>>>
    
    export type DeleteRunMutationError = NotFoundResponse

    /**
 * @summary Delete a run
 */
export const useDeleteRun = <TError = NotFoundResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteRun>>, TError,{id: string | undefined | null}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteRun>>,
        TError,
        {id: string | undefined | null},
        TContext
      > => {

      const mutationOptions = getDeleteRunMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Find a run
 * @summary Find a run
 */
export const getGetRunUrl = (id: string | undefined | null,) => {


  

  return `/runs/${id}`
}

export const getRun = async (id: string | undefined | null, options?: RequestInit): Promise<GetRun200> => {
  
  return customFetch<GetRun200>(getGetRunUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetRunQueryKey = (id?: string | undefined | null,) => {
    return [`/runs/${id}`] as const;
    }

    
export const getGetRunQueryOptions = <TData = Awaited<ReturnType<typeof getRun>>, TError = NotFoundResponse>(id: string | undefined | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRun>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRunQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRun>>> = ({ signal }) => getRun(id, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRun>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetRunQueryResult = NonNullable<Awaited<ReturnType<typeof getRun>>>
export type GetRunQueryError = NotFoundResponse


export function useGetRun<TData = Awaited<ReturnType<typeof getRun>>, TError = NotFoundResponse>(
 id: string | undefined | null, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRun>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRun>>,
          TError,
          Awaited<ReturnType<typeof getRun>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRun<TData = Awaited<ReturnType<typeof getRun>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRun>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getRun>>,
          TError,
          Awaited<ReturnType<typeof getRun>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRun<TData = Awaited<ReturnType<typeof getRun>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRun>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Find a run
 */

export function useGetRun<TData = Awaited<ReturnType<typeof getRun>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRun>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetRunQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetRunSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getRun>>, TError = NotFoundResponse>(id: string | undefined | null, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getRun>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRunQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRun>>> = ({ signal }) => getRun(id, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getRun>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetRunSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getRun>>>
export type GetRunSuspenseQueryError = NotFoundResponse


export function useGetRunSuspense<TData = Awaited<ReturnType<typeof getRun>>, TError = NotFoundResponse>(
 id: string | undefined | null, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getRun>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRunSuspense<TData = Awaited<ReturnType<typeof getRun>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getRun>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetRunSuspense<TData = Awaited<ReturnType<typeof getRun>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getRun>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Find a run
 */

export function useGetRunSuspense<TData = Awaited<ReturnType<typeof getRun>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getRun>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetRunSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update a run
 * @summary Update a run
 */
export const getUpdateRunUrl = (id: string | undefined | null,) => {


  

  return `/runs/${id}`
}

export const updateRun = async (id: string | undefined | null,
    updateRunBody: UpdateRunBody, options?: RequestInit): Promise<UpdateRun200> => {
  
  return customFetch<UpdateRun200>(getUpdateRunUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateRunBody,)
  }
);}




export const getUpdateRunMutationOptions = <TError = NotFoundResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateRun>>, TError,{id: string | undefined | null;data: UpdateRunBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof updateRun>>, TError,{id: string | undefined | null;data: UpdateRunBody}, TContext> => {

const mutationKey = ['updateRun'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateRun>>, {id: string | undefined | null;data: UpdateRunBody}> = (props) => {
          const {id,data} = props ?? {};

          return  updateRun(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateRunMutationResult = NonNullable<Awaited<ReturnType<typeof updateRun>>>
    export type UpdateRunMutationBody = UpdateRunBody
    export type UpdateRunMutationError = NotFoundResponse

    /**
 * @summary Update a run
 */
export const useUpdateRun = <TError = NotFoundResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateRun>>, TError,{id: string | undefined | null;data: UpdateRunBody}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateRun>>,
        TError,
        {id: string | undefined | null;data: UpdateRunBody},
        TContext
      > => {

      const mutationOptions = getUpdateRunMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    