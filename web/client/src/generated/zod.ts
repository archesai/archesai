/**
 * Generated by orval v7.13.2 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v0.0.0
 */
import zod from 'zod';

/**
 * Authenticate user and create a session
 * @summary Login
 */
export const loginBodyEmailMax = 255;export const loginBodyPasswordMax = 72;
export const loginBodyPasswordRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/]*$');
export const loginBodyRememberMeDefault = false;

export const loginBody = zod.object({
  "email": zod.email().min(1).max(loginBodyEmailMax).describe('The email address associated with the account'),
  "password": zod.string().min(1).max(loginBodyPasswordMax).regex(loginBodyPasswordRegExp).describe('The password for the account'),
  "rememberMe": zod.boolean().optional().describe('Whether to create a long-lived session')
})


/**
 * Logout from current session
 * @summary Logout
 */
export const logoutResponseMessageMax = 255;
export const logoutResponseMessageRegExp = new RegExp('^[\\w\\s\\-.,!?()]+$');


export const logoutResponse = zod.object({
  "message": zod.string().min(1).max(logoutResponseMessageMax).regex(logoutResponseMessageRegExp)
})


/**
 * Logout from all sessions across all devices
 * @summary Logout all sessions
 */
export const logoutAllResponseMessageMax = 255;
export const logoutAllResponseMessageRegExp = new RegExp('^[\\w\\s\\-.,!?()]+$');


export const logoutAllResponse = zod.object({
  "message": zod.string().min(1).max(logoutAllResponseMessageMax).regex(logoutAllResponseMessageRegExp)
})


/**
 * Register a new user account with email and password
 * @summary Register
 */
export const registerBodyEmailMax = 255;
export const registerBodyEmailRegExp = new RegExp('^(?!\\.)(?!.*\\.\\.)([A-Za-z0-9_\'+\\-\\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\\-]*\\.)+[A-Za-z]{2,}$');
export const registerBodyNameMax = 255;
export const registerBodyNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/]*$');
export const registerBodyPasswordMin = 8;
export const registerBodyPasswordMax = 72;
export const registerBodyPasswordRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/]*$');


export const registerBody = zod.object({
  "email": zod.email().min(1).max(registerBodyEmailMax).regex(registerBodyEmailRegExp).describe('The email address for the new account'),
  "name": zod.string().min(1).max(registerBodyNameMax).regex(registerBodyNameRegExp).describe('The name of the user'),
  "password": zod.string().min(registerBodyPasswordMin).max(registerBodyPasswordMax).regex(registerBodyPasswordRegExp).describe('The password for the account')
})


/**
 * Request a magic link to be sent via email or generate an OTP code
 * @summary Request a magic link
 */
export const requestMagicLinkBodyIdentifierMax = 255;
export const requestMagicLinkBodyIdentifierRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/]*$');
export const requestMagicLinkBodyDeliveryMethodDefault = "email";export const requestMagicLinkBodyRedirectUrlMax = 2048;

export const requestMagicLinkBody = zod.object({
  "identifier": zod.string().min(1).max(requestMagicLinkBodyIdentifierMax).regex(requestMagicLinkBodyIdentifierRegExp).describe('Email address or username'),
  "deliveryMethod": zod.enum(['email', 'console', 'otp', 'webhook']).default(requestMagicLinkBodyDeliveryMethodDefault).describe('How to deliver the magic link'),
  "redirectUrl": zod.url().min(1).max(requestMagicLinkBodyRedirectUrlMax).optional().describe('URL to redirect to after successful authentication')
})

export const requestMagicLinkResponseMessageMax = 500;
export const requestMagicLinkResponseMessageRegExp = new RegExp('^[\\w\\s\\-.,!?()@]+$');
export const requestMagicLinkResponseOtpCodeMin = 6;
export const requestMagicLinkResponseOtpCodeMax = 6;
export const requestMagicLinkResponseOtpCodeRegExp = new RegExp('^[A-Za-z0-9_-]+$');
export const requestMagicLinkResponseExpiresInMax = 2147483647;export const requestMagicLinkResponseTokenIdMin = 36;
export const requestMagicLinkResponseTokenIdMax = 36;export const requestMagicLinkResponseTokenUserIDMin = 36;
export const requestMagicLinkResponseTokenUserIDMax = 36;export const requestMagicLinkResponseTokenTokenMin = 32;
export const requestMagicLinkResponseTokenTokenMax = 512;
export const requestMagicLinkResponseTokenTokenRegExp = new RegExp('^[a-zA-Z0-9]+$');
export const requestMagicLinkResponseTokenTokenHashMin = 64;
export const requestMagicLinkResponseTokenTokenHashMax = 64;
export const requestMagicLinkResponseTokenTokenHashRegExp = new RegExp('^[a-f0-9]{64}$');
export const requestMagicLinkResponseTokenCodeMin = 6;
export const requestMagicLinkResponseTokenCodeMax = 6;
export const requestMagicLinkResponseTokenCodeRegExp = new RegExp('^[0-9]{6}$');
export const requestMagicLinkResponseTokenIdentifierMax = 255;export const requestMagicLinkResponseTokenExpiresAtMax = 512;export const requestMagicLinkResponseTokenUsedAtMax = 512;export const requestMagicLinkResponseTokenIpAddressMin = 7;
export const requestMagicLinkResponseTokenIpAddressMax = 45;export const requestMagicLinkResponseTokenUserAgentMax = 512;
export const requestMagicLinkResponseTokenUserAgentRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\\(\\):;]+$');
export const requestMagicLinkResponseTokenCreatedAtMax = 512;

export const requestMagicLinkResponse = zod.object({
  "message": zod.string().min(1).max(requestMagicLinkResponseMessageMax).regex(requestMagicLinkResponseMessageRegExp).optional(),
  "otpCode": zod.string().min(requestMagicLinkResponseOtpCodeMin).max(requestMagicLinkResponseOtpCodeMax).regex(requestMagicLinkResponseOtpCodeRegExp).optional().describe('OTP code (only returned if deliveryMethod is \'otp\')'),
  "expiresIn": zod.number().min(1).max(requestMagicLinkResponseExpiresInMax).optional().describe('Token expiry in seconds'),
  "token": zod.object({
  "id": zod.uuid().min(requestMagicLinkResponseTokenIdMin).max(requestMagicLinkResponseTokenIdMax).describe('Unique identifier for the magic link token'),
  "userID": zod.uuid().min(requestMagicLinkResponseTokenUserIDMin).max(requestMagicLinkResponseTokenUserIDMax).nullish().describe('User ID if token is for existing user'),
  "token": zod.string().min(requestMagicLinkResponseTokenTokenMin).max(requestMagicLinkResponseTokenTokenMax).regex(requestMagicLinkResponseTokenTokenRegExp).optional().describe('The raw magic link token'),
  "tokenHash": zod.string().min(requestMagicLinkResponseTokenTokenHashMin).max(requestMagicLinkResponseTokenTokenHashMax).regex(requestMagicLinkResponseTokenTokenHashRegExp).describe('SHA256 hash of the magic link token'),
  "code": zod.string().min(requestMagicLinkResponseTokenCodeMin).max(requestMagicLinkResponseTokenCodeMax).regex(requestMagicLinkResponseTokenCodeRegExp).nullish().describe('Optional 6-digit OTP code'),
  "identifier": zod.email().min(1).max(requestMagicLinkResponseTokenIdentifierMax).describe('Email or username for authentication'),
  "deliveryMethod": zod.enum(['email', 'console', 'webhook', 'otp', 'file']).nullish().describe('How the magic link was delivered'),
  "expiresAt": zod.iso.datetime({}).min(1).max(requestMagicLinkResponseTokenExpiresAtMax).describe('When the token expires'),
  "usedAt": zod.iso.datetime({}).min(1).max(requestMagicLinkResponseTokenUsedAtMax).nullish().describe('When the token was used (null if unused)'),
  "ipAddress": zod.string().min(requestMagicLinkResponseTokenIpAddressMin).max(requestMagicLinkResponseTokenIpAddressMax).nullish().describe('IP address of the request'),
  "userAgent": zod.string().min(1).max(requestMagicLinkResponseTokenUserAgentMax).regex(requestMagicLinkResponseTokenUserAgentRegExp).nullish().describe('User agent of the request'),
  "createdAt": zod.iso.datetime({}).min(1).max(requestMagicLinkResponseTokenCreatedAtMax).nullable().describe('When the token was created')
}).optional().describe('Schema for MagicLinkToken entity')
})


/**
 * Verify a magic link token or OTP code and create a session
 * @summary Verify a magic link token
 */
export const verifyMagicLinkBodyTokenMin = 32;
export const verifyMagicLinkBodyTokenMax = 512;
export const verifyMagicLinkBodyTokenRegExp = new RegExp('^[A-Za-z0-9_-]+$');
export const verifyMagicLinkBodyCodeMin = 6;
export const verifyMagicLinkBodyCodeMax = 6;
export const verifyMagicLinkBodyCodeRegExp = new RegExp('^[0-9]{6}$');
export const verifyMagicLinkBodyIdentifierMax = 255;
export const verifyMagicLinkBodyIdentifierRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/]*$');


export const verifyMagicLinkBody = zod.object({
  "token": zod.string().min(verifyMagicLinkBodyTokenMin).max(verifyMagicLinkBodyTokenMax).regex(verifyMagicLinkBodyTokenRegExp).optional().describe('Magic link token from URL'),
  "code": zod.string().min(verifyMagicLinkBodyCodeMin).max(verifyMagicLinkBodyCodeMax).regex(verifyMagicLinkBodyCodeRegExp).optional().describe('OTP code (alternative to token)'),
  "identifier": zod.string().min(1).max(verifyMagicLinkBodyIdentifierMax).regex(verifyMagicLinkBodyIdentifierRegExp).optional().describe('Required when using OTP code')
})


/**
 * Link an additional authentication provider to the current user account
 * @summary Link authentication provider
 */
export const linkAccountBodyRedirectUrlMax = 2048;

export const linkAccountBody = zod.object({
  "provider": zod.enum(['google', 'github', 'microsoft', 'apple']).describe('The authentication provider to link'),
  "redirectUrl": zod.url().max(linkAccountBodyRedirectUrlMax).optional().describe('URL to redirect to after successful linking')
})

export const linkAccountResponseAuthorizationUrlMax = 2048;

export const linkAccountResponse = zod.object({
  "authorizationUrl": zod.url().min(1).max(linkAccountResponseAuthorizationUrlMax).describe('URL to redirect the user to for provider authorization')
})


/**
 * List all active sessions for the current user
 * @summary List sessions
 */
export const listSessionsQueryPageLimitDefault = 10;
export const listSessionsQueryPageLimitMax = 100;export const listSessionsQueryPageOffsetDefault = 0;
export const listSessionsQueryPageOffsetMin = 0;
export const listSessionsQueryPageOffsetMax = 9007199254740991;export const listSessionsQuerySortMax = 10;

export const listSessionsQueryParams = zod.object({
  "page": zod.object({
  "limit": zod.number().min(1).max(listSessionsQueryPageLimitMax).default(listSessionsQueryPageLimitDefault).describe('Maximum number of items to return'),
  "offset": zod.number().min(listSessionsQueryPageOffsetMin).max(listSessionsQueryPageOffsetMax).optional().describe('Number of items to skip before starting to collect the result set')
}).optional().describe('The page parameter'),
  "sort": zod.array(zod.object({
  "field": zod.enum(['createdAt', 'id', 'updatedAt', 'organizationID', 'expiresAt', 'ipAddress', 'token', 'userAgent', 'userID']),
  "order": zod.enum(['asc', 'desc'])
})).max(listSessionsQuerySortMax).optional().describe('The sort parameter')
})

export const listSessionsResponseDataItemIdMin = 36;
export const listSessionsResponseDataItemIdMax = 36;export const listSessionsResponseDataItemCreatedAtMax = 255;export const listSessionsResponseDataItemUpdatedAtMax = 255;export const listSessionsResponseDataItemOrganizationIDMin = 36;
export const listSessionsResponseDataItemOrganizationIDMax = 36;export const listSessionsResponseDataItemAuthMethodMax = 100;
export const listSessionsResponseDataItemAuthMethodRegExp = new RegExp('^[a-z_]+$');
export const listSessionsResponseDataItemExpiresAtMax = 255;export const listSessionsResponseDataItemIpAddressMin = 7;
export const listSessionsResponseDataItemIpAddressMax = 45;export const listSessionsResponseDataItemTokenMax = 512;
export const listSessionsResponseDataItemTokenRegExp = new RegExp('^[A-Za-z0-9_\\-\\.]+$');
export const listSessionsResponseDataItemUserAgentMax = 255;
export const listSessionsResponseDataItemUserAgentRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\\(\\):;]+$');
export const listSessionsResponseDataItemUserIDMin = 36;
export const listSessionsResponseDataItemUserIDMax = 36;export const listSessionsResponseDataMax = 10000;export const listSessionsResponseMetaTotalMin = 0;
export const listSessionsResponseMetaTotalMax = 2147483647;

export const listSessionsResponse = zod.object({
  "data": zod.array(zod.object({
  "id": zod.uuid().min(listSessionsResponseDataItemIdMin).max(listSessionsResponseDataItemIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(listSessionsResponseDataItemCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(listSessionsResponseDataItemUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "organizationID": zod.uuid().min(listSessionsResponseDataItemOrganizationIDMin).max(listSessionsResponseDataItemOrganizationIDMax).nullable().describe('The organization ID for this session (nullable for users without org)'),
  "authMethod": zod.string().min(1).max(listSessionsResponseDataItemAuthMethodMax).regex(listSessionsResponseDataItemAuthMethodRegExp).nullable().describe('The authentication method used (magic_link, oauth_google, oauth_github, etc.)'),
  "authProvider": zod.enum(['local', 'google', 'github', 'microsoft', 'apple']).nullable().describe('The authentication provider (google, github, microsoft, local)'),
  "expiresAt": zod.iso.datetime({}).min(1).max(listSessionsResponseDataItemExpiresAtMax).describe('The expiration date of the session'),
  "ipAddress": zod.string().min(listSessionsResponseDataItemIpAddressMin).max(listSessionsResponseDataItemIpAddressMax).nullable().describe('The IP address of the session'),
  "token": zod.string().min(1).max(listSessionsResponseDataItemTokenMax).regex(listSessionsResponseDataItemTokenRegExp).describe('The session token'),
  "userAgent": zod.string().min(1).max(listSessionsResponseDataItemUserAgentMax).regex(listSessionsResponseDataItemUserAgentRegExp).nullable().describe('The user agent of the session'),
  "userID": zod.uuid().min(listSessionsResponseDataItemUserIDMin).max(listSessionsResponseDataItemUserIDMax).describe('The user who owns this session')
})).describe('Schema for Session entity')).max(listSessionsResponseDataMax),
  "meta": zod.object({
  "total": zod.number().min(listSessionsResponseMetaTotalMin).max(listSessionsResponseMetaTotalMax).describe('Total number of items in the collection')
}).describe('Pagination metadata')
})


/**
 * Find a session
 * @summary Find a session
 */
export const getSessionPathIdMin = 36;
export const getSessionPathIdMax = 36;

export const getSessionParams = zod.object({
  "id": zod.uuid().min(getSessionPathIdMin).max(getSessionPathIdMax).describe('The unique identifier of the resource.')
})

export const getSessionResponseDataIdMin = 36;
export const getSessionResponseDataIdMax = 36;export const getSessionResponseDataCreatedAtMax = 255;export const getSessionResponseDataUpdatedAtMax = 255;export const getSessionResponseDataOrganizationIDMin = 36;
export const getSessionResponseDataOrganizationIDMax = 36;export const getSessionResponseDataAuthMethodMax = 100;
export const getSessionResponseDataAuthMethodRegExp = new RegExp('^[a-z_]+$');
export const getSessionResponseDataExpiresAtMax = 255;export const getSessionResponseDataIpAddressMin = 7;
export const getSessionResponseDataIpAddressMax = 45;export const getSessionResponseDataTokenMax = 512;
export const getSessionResponseDataTokenRegExp = new RegExp('^[A-Za-z0-9_\\-\\.]+$');
export const getSessionResponseDataUserAgentMax = 255;
export const getSessionResponseDataUserAgentRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\\(\\):;]+$');
export const getSessionResponseDataUserIDMin = 36;
export const getSessionResponseDataUserIDMax = 36;

export const getSessionResponse = zod.object({
  "data": zod.object({
  "id": zod.uuid().min(getSessionResponseDataIdMin).max(getSessionResponseDataIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(getSessionResponseDataCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(getSessionResponseDataUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "organizationID": zod.uuid().min(getSessionResponseDataOrganizationIDMin).max(getSessionResponseDataOrganizationIDMax).nullable().describe('The organization ID for this session (nullable for users without org)'),
  "authMethod": zod.string().min(1).max(getSessionResponseDataAuthMethodMax).regex(getSessionResponseDataAuthMethodRegExp).nullable().describe('The authentication method used (magic_link, oauth_google, oauth_github, etc.)'),
  "authProvider": zod.enum(['local', 'google', 'github', 'microsoft', 'apple']).nullable().describe('The authentication provider (google, github, microsoft, local)'),
  "expiresAt": zod.iso.datetime({}).min(1).max(getSessionResponseDataExpiresAtMax).describe('The expiration date of the session'),
  "ipAddress": zod.string().min(getSessionResponseDataIpAddressMin).max(getSessionResponseDataIpAddressMax).nullable().describe('The IP address of the session'),
  "token": zod.string().min(1).max(getSessionResponseDataTokenMax).regex(getSessionResponseDataTokenRegExp).describe('The session token'),
  "userAgent": zod.string().min(1).max(getSessionResponseDataUserAgentMax).regex(getSessionResponseDataUserAgentRegExp).nullable().describe('The user agent of the session'),
  "userID": zod.uuid().min(getSessionResponseDataUserIDMin).max(getSessionResponseDataUserIDMax).describe('The user who owns this session')
})).describe('Schema for Session entity')
})


/**
 * This endpoint will update the active organization for the current session
 * @summary Update Session
 */
export const updateSessionPathIdMin = 36;
export const updateSessionPathIdMax = 36;

export const updateSessionParams = zod.object({
  "id": zod.uuid().min(updateSessionPathIdMin).max(updateSessionPathIdMax).describe('The unique identifier of the resource.')
})

export const updateSessionBodyOrganizationIDMin = 36;
export const updateSessionBodyOrganizationIDMax = 36;

export const updateSessionBody = zod.object({
  "organizationID": zod.uuid().min(updateSessionBodyOrganizationIDMin).max(updateSessionBodyOrganizationIDMax).describe('The organization ID to set as active for this session')
})

export const updateSessionResponseDataIdMin = 36;
export const updateSessionResponseDataIdMax = 36;export const updateSessionResponseDataCreatedAtMax = 255;export const updateSessionResponseDataUpdatedAtMax = 255;export const updateSessionResponseDataOrganizationIDMin = 36;
export const updateSessionResponseDataOrganizationIDMax = 36;export const updateSessionResponseDataAuthMethodMax = 100;
export const updateSessionResponseDataAuthMethodRegExp = new RegExp('^[a-z_]+$');
export const updateSessionResponseDataExpiresAtMax = 255;export const updateSessionResponseDataIpAddressMin = 7;
export const updateSessionResponseDataIpAddressMax = 45;export const updateSessionResponseDataTokenMax = 512;
export const updateSessionResponseDataTokenRegExp = new RegExp('^[A-Za-z0-9_\\-\\.]+$');
export const updateSessionResponseDataUserAgentMax = 255;
export const updateSessionResponseDataUserAgentRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\\(\\):;]+$');
export const updateSessionResponseDataUserIDMin = 36;
export const updateSessionResponseDataUserIDMax = 36;

export const updateSessionResponse = zod.object({
  "data": zod.object({
  "id": zod.uuid().min(updateSessionResponseDataIdMin).max(updateSessionResponseDataIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(updateSessionResponseDataCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(updateSessionResponseDataUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "organizationID": zod.uuid().min(updateSessionResponseDataOrganizationIDMin).max(updateSessionResponseDataOrganizationIDMax).nullable().describe('The organization ID for this session (nullable for users without org)'),
  "authMethod": zod.string().min(1).max(updateSessionResponseDataAuthMethodMax).regex(updateSessionResponseDataAuthMethodRegExp).nullable().describe('The authentication method used (magic_link, oauth_google, oauth_github, etc.)'),
  "authProvider": zod.enum(['local', 'google', 'github', 'microsoft', 'apple']).nullable().describe('The authentication provider (google, github, microsoft, local)'),
  "expiresAt": zod.iso.datetime({}).min(1).max(updateSessionResponseDataExpiresAtMax).describe('The expiration date of the session'),
  "ipAddress": zod.string().min(updateSessionResponseDataIpAddressMin).max(updateSessionResponseDataIpAddressMax).nullable().describe('The IP address of the session'),
  "token": zod.string().min(1).max(updateSessionResponseDataTokenMax).regex(updateSessionResponseDataTokenRegExp).describe('The session token'),
  "userAgent": zod.string().min(1).max(updateSessionResponseDataUserAgentMax).regex(updateSessionResponseDataUserAgentRegExp).nullable().describe('The user agent of the session'),
  "userID": zod.uuid().min(updateSessionResponseDataUserIDMin).max(updateSessionResponseDataUserIDMax).describe('The user who owns this session')
})).describe('Schema for Session entity')
})


/**
 * Delete a specific session (logout from that session)
 * @summary Delete session (Logout)
 */
export const deleteSessionPathIdMin = 36;
export const deleteSessionPathIdMax = 36;

export const deleteSessionParams = zod.object({
  "id": zod.uuid().min(deleteSessionPathIdMin).max(deleteSessionPathIdMax).describe('The unique identifier of the resource.')
})


/**
 * List all linked authentication providers for the current user
 * @summary List linked accounts
 */
export const listAccountsResponseDataItemIdMin = 36;
export const listAccountsResponseDataItemIdMax = 36;export const listAccountsResponseDataItemCreatedAtMax = 255;export const listAccountsResponseDataItemUpdatedAtMax = 255;export const listAccountsResponseDataItemAccountIdentifierMax = 255;
export const listAccountsResponseDataItemAccountIdentifierRegExp = new RegExp('^[a-zA-Z0-9_\\-\\.@]+$');
export const listAccountsResponseDataItemUserIDMin = 36;
export const listAccountsResponseDataItemUserIDMax = 36;export const listAccountsResponseDataItemAccessTokenMax = 512;
export const listAccountsResponseDataItemAccessTokenRegExp = new RegExp('^[A-Za-z0-9_\\-\\.]+$');
export const listAccountsResponseDataItemAccessTokenExpiresAtMax = 255;export const listAccountsResponseDataItemRefreshTokenMax = 512;
export const listAccountsResponseDataItemRefreshTokenRegExp = new RegExp('^[A-Za-z0-9_\\-\\./]+$');
export const listAccountsResponseDataItemRefreshTokenExpiresAtMax = 255;export const listAccountsResponseDataItemIdTokenMax = 2048;
export const listAccountsResponseDataItemIdTokenRegExp = new RegExp('^[A-Za-z0-9_\\-\\.]+$');
export const listAccountsResponseDataItemScopeMax = 255;
export const listAccountsResponseDataItemScopeRegExp = new RegExp('^[\\w\\s\\-:]+$');
export const listAccountsResponseDataMax = 10000;export const listAccountsResponseMetaTotalMin = 0;
export const listAccountsResponseMetaTotalMax = 2147483647;

export const listAccountsResponse = zod.object({
  "data": zod.array(zod.object({
  "id": zod.uuid().min(listAccountsResponseDataItemIdMin).max(listAccountsResponseDataItemIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(listAccountsResponseDataItemCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(listAccountsResponseDataItemUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "accountIdentifier": zod.string().min(1).max(listAccountsResponseDataItemAccountIdentifierMax).regex(listAccountsResponseDataItemAccountIdentifierRegExp).describe('The unique identifier for the account from the provider'),
  "userID": zod.uuid().min(listAccountsResponseDataItemUserIDMin).max(listAccountsResponseDataItemUserIDMax).describe('The user ID this account belongs to'),
  "provider": zod.enum(['local', 'google', 'github', 'microsoft', 'apple']).describe('The authentication provider identifier'),
  "accessToken": zod.string().min(1).max(listAccountsResponseDataItemAccessTokenMax).regex(listAccountsResponseDataItemAccessTokenRegExp).nullable().describe('The OAuth access token'),
  "accessTokenExpiresAt": zod.iso.datetime({}).min(1).max(listAccountsResponseDataItemAccessTokenExpiresAtMax).nullable().describe('The access token expiration timestamp'),
  "refreshToken": zod.string().min(1).max(listAccountsResponseDataItemRefreshTokenMax).regex(listAccountsResponseDataItemRefreshTokenRegExp).nullable().describe('The OAuth refresh token'),
  "refreshTokenExpiresAt": zod.iso.datetime({}).min(1).max(listAccountsResponseDataItemRefreshTokenExpiresAtMax).nullable().describe('The refresh token expiration timestamp'),
  "idToken": zod.string().min(1).max(listAccountsResponseDataItemIdTokenMax).regex(listAccountsResponseDataItemIdTokenRegExp).nullable().describe('The OpenID Connect ID token'),
  "scope": zod.string().min(1).max(listAccountsResponseDataItemScopeMax).regex(listAccountsResponseDataItemScopeRegExp).nullable().describe('The OAuth scope granted')
})).describe('Schema for Account entity (authentication provider account)')).max(listAccountsResponseDataMax),
  "meta": zod.object({
  "total": zod.number().min(listAccountsResponseMetaTotalMin).max(listAccountsResponseMetaTotalMax).describe('Total number of items in the collection')
}).describe('Pagination metadata')
})


/**
 * Get an account
 * @summary Find an account
 */
export const getAccountPathIdMin = 36;
export const getAccountPathIdMax = 36;

export const getAccountParams = zod.object({
  "id": zod.uuid().min(getAccountPathIdMin).max(getAccountPathIdMax).describe('The unique identifier of the resource')
})

export const getAccountResponseDataIdMin = 36;
export const getAccountResponseDataIdMax = 36;export const getAccountResponseDataCreatedAtMax = 255;export const getAccountResponseDataUpdatedAtMax = 255;export const getAccountResponseDataAccountIdentifierMax = 255;
export const getAccountResponseDataAccountIdentifierRegExp = new RegExp('^[a-zA-Z0-9_\\-\\.@]+$');
export const getAccountResponseDataUserIDMin = 36;
export const getAccountResponseDataUserIDMax = 36;export const getAccountResponseDataAccessTokenMax = 512;
export const getAccountResponseDataAccessTokenRegExp = new RegExp('^[A-Za-z0-9_\\-\\.]+$');
export const getAccountResponseDataAccessTokenExpiresAtMax = 255;export const getAccountResponseDataRefreshTokenMax = 512;
export const getAccountResponseDataRefreshTokenRegExp = new RegExp('^[A-Za-z0-9_\\-\\./]+$');
export const getAccountResponseDataRefreshTokenExpiresAtMax = 255;export const getAccountResponseDataIdTokenMax = 2048;
export const getAccountResponseDataIdTokenRegExp = new RegExp('^[A-Za-z0-9_\\-\\.]+$');
export const getAccountResponseDataScopeMax = 255;
export const getAccountResponseDataScopeRegExp = new RegExp('^[\\w\\s\\-:]+$');


export const getAccountResponse = zod.object({
  "data": zod.object({
  "id": zod.uuid().min(getAccountResponseDataIdMin).max(getAccountResponseDataIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(getAccountResponseDataCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(getAccountResponseDataUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "accountIdentifier": zod.string().min(1).max(getAccountResponseDataAccountIdentifierMax).regex(getAccountResponseDataAccountIdentifierRegExp).describe('The unique identifier for the account from the provider'),
  "userID": zod.uuid().min(getAccountResponseDataUserIDMin).max(getAccountResponseDataUserIDMax).describe('The user ID this account belongs to'),
  "provider": zod.enum(['local', 'google', 'github', 'microsoft', 'apple']).describe('The authentication provider identifier'),
  "accessToken": zod.string().min(1).max(getAccountResponseDataAccessTokenMax).regex(getAccountResponseDataAccessTokenRegExp).nullable().describe('The OAuth access token'),
  "accessTokenExpiresAt": zod.iso.datetime({}).min(1).max(getAccountResponseDataAccessTokenExpiresAtMax).nullable().describe('The access token expiration timestamp'),
  "refreshToken": zod.string().min(1).max(getAccountResponseDataRefreshTokenMax).regex(getAccountResponseDataRefreshTokenRegExp).nullable().describe('The OAuth refresh token'),
  "refreshTokenExpiresAt": zod.iso.datetime({}).min(1).max(getAccountResponseDataRefreshTokenExpiresAtMax).nullable().describe('The refresh token expiration timestamp'),
  "idToken": zod.string().min(1).max(getAccountResponseDataIdTokenMax).regex(getAccountResponseDataIdTokenRegExp).nullable().describe('The OpenID Connect ID token'),
  "scope": zod.string().min(1).max(getAccountResponseDataScopeMax).regex(getAccountResponseDataScopeRegExp).nullable().describe('The OAuth scope granted')
})).describe('Schema for Account entity (authentication provider account)')
})


/**
 * Update an account
 * @summary Update an account
 */
export const updateAccountPathIdMin = 36;
export const updateAccountPathIdMax = 36;

export const updateAccountParams = zod.object({
  "id": zod.uuid().min(updateAccountPathIdMin).max(updateAccountPathIdMax).describe('The unique identifier of the resource')
})

export const updateAccountBodyProviderMax = 255;
export const updateAccountBodyProviderRegExp = new RegExp('^[a-z][a-z0-9-]*$');
export const updateAccountBodyProviderAccountIdentifierMax = 255;
export const updateAccountBodyProviderAccountIdentifierRegExp = new RegExp('^[a-z][a-z0-9-]*$');
export const updateAccountBodyTypeMax = 255;
export const updateAccountBodyTypeRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/]*$');


export const updateAccountBody = zod.object({
  "provider": zod.string().max(updateAccountBodyProviderMax).regex(updateAccountBodyProviderRegExp).optional().describe('The account provider'),
  "providerAccountIdentifier": zod.string().max(updateAccountBodyProviderAccountIdentifierMax).regex(updateAccountBodyProviderAccountIdentifierRegExp).optional().describe('The provider account ID'),
  "type": zod.string().max(updateAccountBodyTypeMax).regex(updateAccountBodyTypeRegExp).optional().describe('The account type')
})

export const updateAccountResponseDataIdMin = 36;
export const updateAccountResponseDataIdMax = 36;export const updateAccountResponseDataCreatedAtMax = 255;export const updateAccountResponseDataUpdatedAtMax = 255;export const updateAccountResponseDataAccountIdentifierMax = 255;
export const updateAccountResponseDataAccountIdentifierRegExp = new RegExp('^[a-zA-Z0-9_\\-\\.@]+$');
export const updateAccountResponseDataUserIDMin = 36;
export const updateAccountResponseDataUserIDMax = 36;export const updateAccountResponseDataAccessTokenMax = 512;
export const updateAccountResponseDataAccessTokenRegExp = new RegExp('^[A-Za-z0-9_\\-\\.]+$');
export const updateAccountResponseDataAccessTokenExpiresAtMax = 255;export const updateAccountResponseDataRefreshTokenMax = 512;
export const updateAccountResponseDataRefreshTokenRegExp = new RegExp('^[A-Za-z0-9_\\-\\./]+$');
export const updateAccountResponseDataRefreshTokenExpiresAtMax = 255;export const updateAccountResponseDataIdTokenMax = 2048;
export const updateAccountResponseDataIdTokenRegExp = new RegExp('^[A-Za-z0-9_\\-\\.]+$');
export const updateAccountResponseDataScopeMax = 255;
export const updateAccountResponseDataScopeRegExp = new RegExp('^[\\w\\s\\-:]+$');


export const updateAccountResponse = zod.object({
  "data": zod.object({
  "id": zod.uuid().min(updateAccountResponseDataIdMin).max(updateAccountResponseDataIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(updateAccountResponseDataCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(updateAccountResponseDataUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "accountIdentifier": zod.string().min(1).max(updateAccountResponseDataAccountIdentifierMax).regex(updateAccountResponseDataAccountIdentifierRegExp).describe('The unique identifier for the account from the provider'),
  "userID": zod.uuid().min(updateAccountResponseDataUserIDMin).max(updateAccountResponseDataUserIDMax).describe('The user ID this account belongs to'),
  "provider": zod.enum(['local', 'google', 'github', 'microsoft', 'apple']).describe('The authentication provider identifier'),
  "accessToken": zod.string().min(1).max(updateAccountResponseDataAccessTokenMax).regex(updateAccountResponseDataAccessTokenRegExp).nullable().describe('The OAuth access token'),
  "accessTokenExpiresAt": zod.iso.datetime({}).min(1).max(updateAccountResponseDataAccessTokenExpiresAtMax).nullable().describe('The access token expiration timestamp'),
  "refreshToken": zod.string().min(1).max(updateAccountResponseDataRefreshTokenMax).regex(updateAccountResponseDataRefreshTokenRegExp).nullable().describe('The OAuth refresh token'),
  "refreshTokenExpiresAt": zod.iso.datetime({}).min(1).max(updateAccountResponseDataRefreshTokenExpiresAtMax).nullable().describe('The refresh token expiration timestamp'),
  "idToken": zod.string().min(1).max(updateAccountResponseDataIdTokenMax).regex(updateAccountResponseDataIdTokenRegExp).nullable().describe('The OpenID Connect ID token'),
  "scope": zod.string().min(1).max(updateAccountResponseDataScopeMax).regex(updateAccountResponseDataScopeRegExp).nullable().describe('The OAuth scope granted')
})).describe('Schema for Account entity (authentication provider account)')
})


/**
 * Delete an account
 * @summary Delete an account
 */
export const deleteAccountPathIdMin = 36;
export const deleteAccountPathIdMax = 36;

export const deleteAccountParams = zod.object({
  "id": zod.uuid().min(deleteAccountPathIdMin).max(deleteAccountPathIdMax).describe('The unique identifier of the resource')
})


/**
 * This endpoint will confirm your e-mail with a token
 * @summary Confirm e-mail verification
 */
export const confirmEmailVerificationBodyTokenMax = 512;
export const confirmEmailVerificationBodyTokenRegExp = new RegExp('^[A-Za-z0-9_-]+$');


export const confirmEmailVerificationBody = zod.object({
  "token": zod.string().min(1).max(confirmEmailVerificationBodyTokenMax).regex(confirmEmailVerificationBodyTokenRegExp).describe('The email verification token')
})

export const confirmEmailVerificationResponseSessionIdMin = 36;
export const confirmEmailVerificationResponseSessionIdMax = 36;export const confirmEmailVerificationResponseSessionCreatedAtMax = 255;export const confirmEmailVerificationResponseSessionUpdatedAtMax = 255;export const confirmEmailVerificationResponseSessionOrganizationIDMin = 36;
export const confirmEmailVerificationResponseSessionOrganizationIDMax = 36;export const confirmEmailVerificationResponseSessionAuthMethodMax = 100;
export const confirmEmailVerificationResponseSessionAuthMethodRegExp = new RegExp('^[a-z_]+$');
export const confirmEmailVerificationResponseSessionExpiresAtMax = 255;export const confirmEmailVerificationResponseSessionIpAddressMin = 7;
export const confirmEmailVerificationResponseSessionIpAddressMax = 45;export const confirmEmailVerificationResponseSessionTokenMax = 512;
export const confirmEmailVerificationResponseSessionTokenRegExp = new RegExp('^[A-Za-z0-9_\\-\\.]+$');
export const confirmEmailVerificationResponseSessionUserAgentMax = 255;
export const confirmEmailVerificationResponseSessionUserAgentRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\\(\\):;]+$');
export const confirmEmailVerificationResponseSessionUserIDMin = 36;
export const confirmEmailVerificationResponseSessionUserIDMax = 36;export const confirmEmailVerificationResponseUserIdMin = 36;
export const confirmEmailVerificationResponseUserIdMax = 36;export const confirmEmailVerificationResponseUserCreatedAtMax = 255;export const confirmEmailVerificationResponseUserUpdatedAtMax = 255;export const confirmEmailVerificationResponseUserEmailMin = 5;
export const confirmEmailVerificationResponseUserEmailMax = 255;export const confirmEmailVerificationResponseUserEmailVerifiedDefault = false;export const confirmEmailVerificationResponseUserImageMin = 5;
export const confirmEmailVerificationResponseUserImageMax = 2048;export const confirmEmailVerificationResponseUserNameMax = 255;
export const confirmEmailVerificationResponseUserNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\']+$');


export const confirmEmailVerificationResponse = zod.object({
  "session": zod.object({
  "id": zod.uuid().min(confirmEmailVerificationResponseSessionIdMin).max(confirmEmailVerificationResponseSessionIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(confirmEmailVerificationResponseSessionCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(confirmEmailVerificationResponseSessionUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "organizationID": zod.uuid().min(confirmEmailVerificationResponseSessionOrganizationIDMin).max(confirmEmailVerificationResponseSessionOrganizationIDMax).nullable().describe('The organization ID for this session (nullable for users without org)'),
  "authMethod": zod.string().min(1).max(confirmEmailVerificationResponseSessionAuthMethodMax).regex(confirmEmailVerificationResponseSessionAuthMethodRegExp).nullable().describe('The authentication method used (magic_link, oauth_google, oauth_github, etc.)'),
  "authProvider": zod.enum(['local', 'google', 'github', 'microsoft', 'apple']).nullable().describe('The authentication provider (google, github, microsoft, local)'),
  "expiresAt": zod.iso.datetime({}).min(1).max(confirmEmailVerificationResponseSessionExpiresAtMax).describe('The expiration date of the session'),
  "ipAddress": zod.string().min(confirmEmailVerificationResponseSessionIpAddressMin).max(confirmEmailVerificationResponseSessionIpAddressMax).nullable().describe('The IP address of the session'),
  "token": zod.string().min(1).max(confirmEmailVerificationResponseSessionTokenMax).regex(confirmEmailVerificationResponseSessionTokenRegExp).describe('The session token'),
  "userAgent": zod.string().min(1).max(confirmEmailVerificationResponseSessionUserAgentMax).regex(confirmEmailVerificationResponseSessionUserAgentRegExp).nullable().describe('The user agent of the session'),
  "userID": zod.uuid().min(confirmEmailVerificationResponseSessionUserIDMin).max(confirmEmailVerificationResponseSessionUserIDMax).describe('The user who owns this session')
})).describe('Schema for Session entity'),
  "user": zod.object({
  "id": zod.uuid().min(confirmEmailVerificationResponseUserIdMin).max(confirmEmailVerificationResponseUserIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(confirmEmailVerificationResponseUserCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(confirmEmailVerificationResponseUserUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "email": zod.email().min(confirmEmailVerificationResponseUserEmailMin).max(confirmEmailVerificationResponseUserEmailMax).describe('The user\'s email address'),
  "emailVerified": zod.boolean().describe('Whether the user\'s email has been verified'),
  "image": zod.url().min(confirmEmailVerificationResponseUserImageMin).max(confirmEmailVerificationResponseUserImageMax).nullable().describe('The user\'s avatar image URL'),
  "name": zod.string().min(1).max(confirmEmailVerificationResponseUserNameMax).regex(confirmEmailVerificationResponseUserNameRegExp).describe('The user\'s display name')
})).describe('Schema for User entity')
})


/**
 * This endpoint will request a password reset link
 * @summary Request password reset
 */
export const requestPasswordResetBodyEmailMax = 255;

export const requestPasswordResetBody = zod.object({
  "email": zod.email().min(1).max(requestPasswordResetBodyEmailMax).describe('The e-mail to send the password reset token to')
})


/**
 * This endpoint will verify your password change with a token
 * @summary Verify password reset
 */
export const confirmPasswordResetBodyNewPasswordMin = 8;
export const confirmPasswordResetBodyNewPasswordMax = 72;
export const confirmPasswordResetBodyNewPasswordRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/]*$');
export const confirmPasswordResetBodyTokenMax = 512;
export const confirmPasswordResetBodyTokenRegExp = new RegExp('^[A-Za-z0-9_-]+$');


export const confirmPasswordResetBody = zod.object({
  "newPassword": zod.string().min(confirmPasswordResetBodyNewPasswordMin).max(confirmPasswordResetBodyNewPasswordMax).regex(confirmPasswordResetBodyNewPasswordRegExp).describe('The new password'),
  "token": zod.string().min(1).max(confirmPasswordResetBodyTokenMax).regex(confirmPasswordResetBodyTokenRegExp).describe('The password reset token')
})


/**
 * This endpoint will request your e-mail change with a token
 * @summary Request e-mail change
 */
export const requestEmailChangeBodyNewEmailMax = 255;export const requestEmailChangeBodyUserIDMin = 36;
export const requestEmailChangeBodyUserIDMax = 36;

export const requestEmailChangeBody = zod.object({
  "newEmail": zod.email().min(1).max(requestEmailChangeBodyNewEmailMax).describe('The e-mail to send the confirmation token to'),
  "userID": zod.uuid().min(requestEmailChangeBodyUserIDMin).max(requestEmailChangeBodyUserIDMax).describe('The user ID of the user requesting the email change')
})


/**
 * This endpoint will verify your e-mail change with a token
 * @summary Verify e-mail change
 */
export const confirmEmailChangeBodyNewEmailMax = 255;export const confirmEmailChangeBodyTokenMax = 512;
export const confirmEmailChangeBodyTokenRegExp = new RegExp('^[A-Za-z0-9_-]+$');
export const confirmEmailChangeBodyUserIDMin = 36;
export const confirmEmailChangeBodyUserIDMax = 36;

export const confirmEmailChangeBody = zod.object({
  "newEmail": zod.email().min(1).max(confirmEmailChangeBodyNewEmailMax).describe('The e-mail to send the confirmation token to'),
  "token": zod.string().min(1).max(confirmEmailChangeBodyTokenMax).regex(confirmEmailChangeBodyTokenRegExp).describe('The password reset token'),
  "userID": zod.uuid().min(confirmEmailChangeBodyUserIDMin).max(confirmEmailChangeBodyUserIDMax).describe('The user ID of the user requesting the email change')
})


/**
 * List users
 * @summary List users
 */
export const listUsersQueryFilterFieldMax = 255;
export const listUsersQueryFilterFieldRegExp = new RegExp('^[a-zA-Z_][a-zA-Z0-9_]*$');
export const listUsersQueryFilterValueMaxOne = 1000;
export const listUsersQueryFilterValueRegExpOne = new RegExp('^[\\w\\s\\-.,!?()@#+/\':;]+$');
export const listUsersQueryFilterValueMinTwo = -9223372036854776000;
export const listUsersQueryFilterValueMaxTwo = 9223372036854776000;export const listUsersQueryPageLimitDefault = 10;
export const listUsersQueryPageLimitMax = 100;export const listUsersQueryPageOffsetDefault = 0;
export const listUsersQueryPageOffsetMin = 0;
export const listUsersQueryPageOffsetMax = 9007199254740991;export const listUsersQuerySortMax = 10;

export const listUsersQueryParams = zod.object({
  "filter": zod.object({
  "type": zod.enum(['and', 'or', 'eq', 'ne', 'gt', 'gte', 'lt', 'lte', 'contains', 'startsWith', 'endsWith']).describe('The type of filter operation'),
  "field": zod.string().min(1).max(listUsersQueryFilterFieldMax).regex(listUsersQueryFilterFieldRegExp).optional().describe('The field to filter on (for leaf conditions)'),
  "value": zod.union([zod.string().max(listUsersQueryFilterValueMaxOne).regex(listUsersQueryFilterValueRegExpOne),zod.number().min(listUsersQueryFilterValueMinTwo).max(listUsersQueryFilterValueMaxTwo),zod.boolean()]).optional().describe('The value to compare against (for leaf conditions)')
}).optional().describe('Filter by field values'),
  "page": zod.object({
  "limit": zod.number().min(1).max(listUsersQueryPageLimitMax).default(listUsersQueryPageLimitDefault).describe('Maximum number of items to return'),
  "offset": zod.number().min(listUsersQueryPageOffsetMin).max(listUsersQueryPageOffsetMax).optional().describe('Number of items to skip before starting to collect the result set')
}).optional().describe('The page parameter'),
  "sort": zod.array(zod.object({
  "field": zod.enum(['createdAt', 'id', 'updatedAt', 'email', 'emailVerified', 'image', 'name']),
  "order": zod.enum(['asc', 'desc'])
})).max(listUsersQuerySortMax).optional().describe('The sort parameter')
})

export const listUsersResponseDataItemIdMin = 36;
export const listUsersResponseDataItemIdMax = 36;export const listUsersResponseDataItemCreatedAtMax = 255;export const listUsersResponseDataItemUpdatedAtMax = 255;export const listUsersResponseDataItemEmailMin = 5;
export const listUsersResponseDataItemEmailMax = 255;export const listUsersResponseDataItemEmailVerifiedDefault = false;export const listUsersResponseDataItemImageMin = 5;
export const listUsersResponseDataItemImageMax = 2048;export const listUsersResponseDataItemNameMax = 255;
export const listUsersResponseDataItemNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\']+$');
export const listUsersResponseDataMax = 10000;export const listUsersResponseMetaTotalMin = 0;
export const listUsersResponseMetaTotalMax = 2147483647;

export const listUsersResponse = zod.object({
  "data": zod.array(zod.object({
  "id": zod.uuid().min(listUsersResponseDataItemIdMin).max(listUsersResponseDataItemIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(listUsersResponseDataItemCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(listUsersResponseDataItemUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "email": zod.email().min(listUsersResponseDataItemEmailMin).max(listUsersResponseDataItemEmailMax).describe('The user\'s email address'),
  "emailVerified": zod.boolean().describe('Whether the user\'s email has been verified'),
  "image": zod.url().min(listUsersResponseDataItemImageMin).max(listUsersResponseDataItemImageMax).nullable().describe('The user\'s avatar image URL'),
  "name": zod.string().min(1).max(listUsersResponseDataItemNameMax).regex(listUsersResponseDataItemNameRegExp).describe('The user\'s display name')
})).describe('Schema for User entity')).max(listUsersResponseDataMax),
  "meta": zod.object({
  "total": zod.number().min(listUsersResponseMetaTotalMin).max(listUsersResponseMetaTotalMax).describe('Total number of items in the collection')
}).describe('Pagination metadata')
})


/**
 * Get a user
 * @summary Get a user
 */
export const getUserPathIdMin = 36;
export const getUserPathIdMax = 36;

export const getUserParams = zod.object({
  "id": zod.uuid().min(getUserPathIdMin).max(getUserPathIdMax).describe('The unique identifier of the resource.')
})

export const getUserResponseDataIdMin = 36;
export const getUserResponseDataIdMax = 36;export const getUserResponseDataCreatedAtMax = 255;export const getUserResponseDataUpdatedAtMax = 255;export const getUserResponseDataEmailMin = 5;
export const getUserResponseDataEmailMax = 255;export const getUserResponseDataEmailVerifiedDefault = false;export const getUserResponseDataImageMin = 5;
export const getUserResponseDataImageMax = 2048;export const getUserResponseDataNameMax = 255;
export const getUserResponseDataNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\']+$');


export const getUserResponse = zod.object({
  "data": zod.object({
  "id": zod.uuid().min(getUserResponseDataIdMin).max(getUserResponseDataIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(getUserResponseDataCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(getUserResponseDataUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "email": zod.email().min(getUserResponseDataEmailMin).max(getUserResponseDataEmailMax).describe('The user\'s email address'),
  "emailVerified": zod.boolean().describe('Whether the user\'s email has been verified'),
  "image": zod.url().min(getUserResponseDataImageMin).max(getUserResponseDataImageMax).nullable().describe('The user\'s avatar image URL'),
  "name": zod.string().min(1).max(getUserResponseDataNameMax).regex(getUserResponseDataNameRegExp).describe('The user\'s display name')
})).describe('Schema for User entity')
})


/**
 * Update an user
 * @summary Update an user
 */
export const updateUserPathIdMin = 36;
export const updateUserPathIdMax = 36;

export const updateUserParams = zod.object({
  "id": zod.uuid().min(updateUserPathIdMin).max(updateUserPathIdMax).describe('The unique identifier of the resource.')
})

export const updateUserBodyEmailMax = 255;export const updateUserBodyImageMax = 2048;
export const updateUserBodyImageRegExp = new RegExp('^https?://[\\w\\-\\.]+[\\w\\-\\./:?#@!$&\'()*+,;=]*$');


export const updateUserBody = zod.object({
  "email": zod.email().min(1).max(updateUserBodyEmailMax).optional().describe('The user\'s e-mail'),
  "image": zod.url().max(updateUserBodyImageMax).regex(updateUserBodyImageRegExp).optional().describe('The user\'s avatar image URL')
})

export const updateUserResponseDataIdMin = 36;
export const updateUserResponseDataIdMax = 36;export const updateUserResponseDataCreatedAtMax = 255;export const updateUserResponseDataUpdatedAtMax = 255;export const updateUserResponseDataEmailMin = 5;
export const updateUserResponseDataEmailMax = 255;export const updateUserResponseDataEmailVerifiedDefault = false;export const updateUserResponseDataImageMin = 5;
export const updateUserResponseDataImageMax = 2048;export const updateUserResponseDataNameMax = 255;
export const updateUserResponseDataNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\']+$');


export const updateUserResponse = zod.object({
  "data": zod.object({
  "id": zod.uuid().min(updateUserResponseDataIdMin).max(updateUserResponseDataIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(updateUserResponseDataCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(updateUserResponseDataUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "email": zod.email().min(updateUserResponseDataEmailMin).max(updateUserResponseDataEmailMax).describe('The user\'s email address'),
  "emailVerified": zod.boolean().describe('Whether the user\'s email has been verified'),
  "image": zod.url().min(updateUserResponseDataImageMin).max(updateUserResponseDataImageMax).nullable().describe('The user\'s avatar image URL'),
  "name": zod.string().min(1).max(updateUserResponseDataNameMax).regex(updateUserResponseDataNameRegExp).describe('The user\'s display name')
})).describe('Schema for User entity')
})


/**
 * Delete a user
 * @summary Delete a user
 */
export const deleteUserPathIdMin = 36;
export const deleteUserPathIdMax = 36;

export const deleteUserParams = zod.object({
  "id": zod.uuid().min(deleteUserPathIdMin).max(deleteUserPathIdMax).describe('The unique identifier of the resource.')
})


/**
 * Get the currently authenticated user's profile
 * @summary Get current user
 */
export const getCurrentUserResponseDataIdMin = 36;
export const getCurrentUserResponseDataIdMax = 36;export const getCurrentUserResponseDataCreatedAtMax = 255;export const getCurrentUserResponseDataUpdatedAtMax = 255;export const getCurrentUserResponseDataEmailMin = 5;
export const getCurrentUserResponseDataEmailMax = 255;export const getCurrentUserResponseDataEmailVerifiedDefault = false;export const getCurrentUserResponseDataImageMin = 5;
export const getCurrentUserResponseDataImageMax = 2048;export const getCurrentUserResponseDataNameMax = 255;
export const getCurrentUserResponseDataNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\']+$');


export const getCurrentUserResponse = zod.object({
  "data": zod.object({
  "id": zod.uuid().min(getCurrentUserResponseDataIdMin).max(getCurrentUserResponseDataIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(getCurrentUserResponseDataCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(getCurrentUserResponseDataUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "email": zod.email().min(getCurrentUserResponseDataEmailMin).max(getCurrentUserResponseDataEmailMax).describe('The user\'s email address'),
  "emailVerified": zod.boolean().describe('Whether the user\'s email has been verified'),
  "image": zod.url().min(getCurrentUserResponseDataImageMin).max(getCurrentUserResponseDataImageMax).nullable().describe('The user\'s avatar image URL'),
  "name": zod.string().min(1).max(getCurrentUserResponseDataNameMax).regex(getCurrentUserResponseDataNameRegExp).describe('The user\'s display name')
})).describe('Schema for User entity')
})


/**
 * Update the currently authenticated user's profile
 * @summary Update current user
 */
export const updateCurrentUserBodyNameMax = 255;
export const updateCurrentUserBodyNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/]*$');
export const updateCurrentUserBodyImageMin = 5;
export const updateCurrentUserBodyImageMax = 2048;

export const updateCurrentUserBody = zod.object({
  "name": zod.string().min(1).max(updateCurrentUserBodyNameMax).regex(updateCurrentUserBodyNameRegExp).optional().describe('The user\'s display name'),
  "image": zod.url().min(updateCurrentUserBodyImageMin).max(updateCurrentUserBodyImageMax).optional().describe('The user\'s avatar image URL')
})

export const updateCurrentUserResponseDataIdMin = 36;
export const updateCurrentUserResponseDataIdMax = 36;export const updateCurrentUserResponseDataCreatedAtMax = 255;export const updateCurrentUserResponseDataUpdatedAtMax = 255;export const updateCurrentUserResponseDataEmailMin = 5;
export const updateCurrentUserResponseDataEmailMax = 255;export const updateCurrentUserResponseDataEmailVerifiedDefault = false;export const updateCurrentUserResponseDataImageMin = 5;
export const updateCurrentUserResponseDataImageMax = 2048;export const updateCurrentUserResponseDataNameMax = 255;
export const updateCurrentUserResponseDataNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\']+$');


export const updateCurrentUserResponse = zod.object({
  "data": zod.object({
  "id": zod.uuid().min(updateCurrentUserResponseDataIdMin).max(updateCurrentUserResponseDataIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(updateCurrentUserResponseDataCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(updateCurrentUserResponseDataUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "email": zod.email().min(updateCurrentUserResponseDataEmailMin).max(updateCurrentUserResponseDataEmailMax).describe('The user\'s email address'),
  "emailVerified": zod.boolean().describe('Whether the user\'s email has been verified'),
  "image": zod.url().min(updateCurrentUserResponseDataImageMin).max(updateCurrentUserResponseDataImageMax).nullable().describe('The user\'s avatar image URL'),
  "name": zod.string().min(1).max(updateCurrentUserResponseDataNameMax).regex(updateCurrentUserResponseDataNameRegExp).describe('The user\'s display name')
})).describe('Schema for User entity')
})


/**
 * Delete the currently authenticated user's account (cascades to all sessions and accounts)
 * @summary Delete current user
 */
export const deleteCurrentUserHeader = zod.object({
  "X-Confirm": zod.enum(['DELETE_MY_ACCOUNT']).describe('Confirmation header to prevent accidental deletion')
})


/**
 * Redirect user to OAuth provider authorization page
 * @summary Start OAuth authorization flow
 */
export const oauthAuthorizeParams = zod.object({
  "provider": zod.enum(['google', 'github', 'microsoft']).describe('The OAuth provider to use for authorization')
})

export const oauthAuthorizeQueryRedirectUriMax = 2048;export const oauthAuthorizeQueryScopeMax = 255;
export const oauthAuthorizeQueryScopeRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/:]*$');
export const oauthAuthorizeQueryStateMax = 255;
export const oauthAuthorizeQueryStateRegExp = new RegExp('^[\\w\\-]+$');


export const oauthAuthorizeQueryParams = zod.object({
  "redirect_uri": zod.url().max(oauthAuthorizeQueryRedirectUriMax).optional().describe('Where to redirect after authorization (optional, uses default if not provided)'),
  "scope": zod.string().max(oauthAuthorizeQueryScopeMax).regex(oauthAuthorizeQueryScopeRegExp).optional().describe('OAuth scopes to request (optional, uses default if not provided)'),
  "state": zod.string().max(oauthAuthorizeQueryStateMax).regex(oauthAuthorizeQueryStateRegExp).optional().describe('State parameter for CSRF protection')
})

export const oauthAuthorizeResponseAuthorizationUrlMax = 2048;

export const oauthAuthorizeResponse = zod.object({
  "authorizationUrl": zod.url().min(1).max(oauthAuthorizeResponseAuthorizationUrlMax).describe('URL to redirect user for OAuth authorization')
})


/**
 * Handle the callback from OAuth provider and complete authentication
 * @summary Handle OAuth callback
 */
export const oauthCallbackParams = zod.object({
  "provider": zod.enum(['google', 'github', 'microsoft']).describe('The OAuth provider handling the callback')
})

export const oauthCallbackQueryCodeMax = 1024;
export const oauthCallbackQueryCodeRegExp = new RegExp('^[\\w\\-]+$');
export const oauthCallbackQueryStateMax = 255;
export const oauthCallbackQueryStateRegExp = new RegExp('^[\\w\\-]+$');
export const oauthCallbackQueryErrorMax = 100;
export const oauthCallbackQueryErrorRegExp = new RegExp('^[\\w\\-_]+$');
export const oauthCallbackQueryErrorDescriptionMax = 500;
export const oauthCallbackQueryErrorDescriptionRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/]*$');


export const oauthCallbackQueryParams = zod.object({
  "code": zod.string().max(oauthCallbackQueryCodeMax).regex(oauthCallbackQueryCodeRegExp).optional().describe('Authorization code from OAuth provider'),
  "state": zod.string().max(oauthCallbackQueryStateMax).regex(oauthCallbackQueryStateRegExp).optional().describe('State parameter for CSRF protection'),
  "error": zod.string().max(oauthCallbackQueryErrorMax).regex(oauthCallbackQueryErrorRegExp).optional().describe('Error code if authorization failed'),
  "error_description": zod.string().max(oauthCallbackQueryErrorDescriptionMax).regex(oauthCallbackQueryErrorDescriptionRegExp).optional().describe('Human-readable error description')
})

export const oauthCallbackResponseIdMin = 36;
export const oauthCallbackResponseIdMax = 36;export const oauthCallbackResponseCreatedAtMax = 255;export const oauthCallbackResponseUpdatedAtMax = 255;export const oauthCallbackResponseOrganizationIDMin = 36;
export const oauthCallbackResponseOrganizationIDMax = 36;export const oauthCallbackResponseAuthMethodMax = 100;
export const oauthCallbackResponseAuthMethodRegExp = new RegExp('^[a-z_]+$');
export const oauthCallbackResponseExpiresAtMax = 255;export const oauthCallbackResponseIpAddressMin = 7;
export const oauthCallbackResponseIpAddressMax = 45;export const oauthCallbackResponseTokenMax = 512;
export const oauthCallbackResponseTokenRegExp = new RegExp('^[A-Za-z0-9_\\-\\.]+$');
export const oauthCallbackResponseUserAgentMax = 255;
export const oauthCallbackResponseUserAgentRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\\(\\):;]+$');
export const oauthCallbackResponseUserIDMin = 36;
export const oauthCallbackResponseUserIDMax = 36;

export const oauthCallbackResponse = zod.object({
  "id": zod.uuid().min(oauthCallbackResponseIdMin).max(oauthCallbackResponseIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(oauthCallbackResponseCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(oauthCallbackResponseUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "organizationID": zod.uuid().min(oauthCallbackResponseOrganizationIDMin).max(oauthCallbackResponseOrganizationIDMax).nullable().describe('The organization ID for this session (nullable for users without org)'),
  "authMethod": zod.string().min(1).max(oauthCallbackResponseAuthMethodMax).regex(oauthCallbackResponseAuthMethodRegExp).nullable().describe('The authentication method used (magic_link, oauth_google, oauth_github, etc.)'),
  "authProvider": zod.enum(['local', 'google', 'github', 'microsoft', 'apple']).nullable().describe('The authentication provider (google, github, microsoft, local)'),
  "expiresAt": zod.iso.datetime({}).min(1).max(oauthCallbackResponseExpiresAtMax).describe('The expiration date of the session'),
  "ipAddress": zod.string().min(oauthCallbackResponseIpAddressMin).max(oauthCallbackResponseIpAddressMax).nullable().describe('The IP address of the session'),
  "token": zod.string().min(1).max(oauthCallbackResponseTokenMax).regex(oauthCallbackResponseTokenRegExp).describe('The session token'),
  "userAgent": zod.string().min(1).max(oauthCallbackResponseUserAgentMax).regex(oauthCallbackResponseUserAgentRegExp).nullable().describe('The user agent of the session'),
  "userID": zod.uuid().min(oauthCallbackResponseUserIDMin).max(oauthCallbackResponseUserIDMax).describe('The user who owns this session')
})).describe('Schema for Session entity')


/**
 * List user's tokens (without showing the actual key values)
 * @summary List tokens
 */
export const listAPIKeysQueryFilterFieldMax = 255;
export const listAPIKeysQueryFilterFieldRegExp = new RegExp('^[a-zA-Z_][a-zA-Z0-9_]*$');
export const listAPIKeysQueryFilterValueMaxOne = 1000;
export const listAPIKeysQueryFilterValueRegExpOne = new RegExp('^[\\w\\s\\-.,!?()@#+/\':;]+$');
export const listAPIKeysQueryFilterValueMinTwo = -9223372036854776000;
export const listAPIKeysQueryFilterValueMaxTwo = 9223372036854776000;export const listAPIKeysQueryPageLimitDefault = 10;
export const listAPIKeysQueryPageLimitMax = 100;export const listAPIKeysQueryPageOffsetDefault = 0;
export const listAPIKeysQueryPageOffsetMin = 0;
export const listAPIKeysQueryPageOffsetMax = 9007199254740991;export const listAPIKeysQuerySortMax = 10;

export const listAPIKeysQueryParams = zod.object({
  "filter": zod.object({
  "type": zod.enum(['and', 'or', 'eq', 'ne', 'gt', 'gte', 'lt', 'lte', 'contains', 'startsWith', 'endsWith']).describe('The type of filter operation'),
  "field": zod.string().min(1).max(listAPIKeysQueryFilterFieldMax).regex(listAPIKeysQueryFilterFieldRegExp).optional().describe('The field to filter on (for leaf conditions)'),
  "value": zod.union([zod.string().max(listAPIKeysQueryFilterValueMaxOne).regex(listAPIKeysQueryFilterValueRegExpOne),zod.number().min(listAPIKeysQueryFilterValueMinTwo).max(listAPIKeysQueryFilterValueMaxTwo),zod.boolean()]).optional().describe('The value to compare against (for leaf conditions)')
}).optional().describe('Filter by field values'),
  "page": zod.object({
  "limit": zod.number().min(1).max(listAPIKeysQueryPageLimitMax).default(listAPIKeysQueryPageLimitDefault).describe('Maximum number of items to return'),
  "offset": zod.number().min(listAPIKeysQueryPageOffsetMin).max(listAPIKeysQueryPageOffsetMax).optional().describe('Number of items to skip before starting to collect the result set')
}).optional().describe('The page parameter'),
  "sort": zod.array(zod.object({
  "field": zod.enum(['createdAt', 'id', 'updatedAt', 'userID', 'organizationID', 'keyHash', 'name', 'prefix', 'rateLimit', 'lastUsedAt', 'expiresAt']),
  "order": zod.enum(['asc', 'desc'])
})).max(listAPIKeysQuerySortMax).optional().describe('The sort parameter')
})

export const listAPIKeysResponseDataItemIdMin = 36;
export const listAPIKeysResponseDataItemIdMax = 36;export const listAPIKeysResponseDataItemCreatedAtMax = 255;export const listAPIKeysResponseDataItemUpdatedAtMax = 255;export const listAPIKeysResponseDataItemUserIDMin = 36;
export const listAPIKeysResponseDataItemUserIDMax = 36;export const listAPIKeysResponseDataItemOrganizationIDMin = 36;
export const listAPIKeysResponseDataItemOrganizationIDMax = 36;export const listAPIKeysResponseDataItemKeyHashMax = 255;
export const listAPIKeysResponseDataItemKeyHashRegExp = new RegExp('^[a-zA-Z0-9]+$');
export const listAPIKeysResponseDataItemNameMax = 255;
export const listAPIKeysResponseDataItemNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\']+$');
export const listAPIKeysResponseDataItemPrefixMax = 255;
export const listAPIKeysResponseDataItemPrefixRegExp = new RegExp('^[a-z]+$');
export const listAPIKeysResponseDataItemScopesItemMax = 255;
export const listAPIKeysResponseDataItemScopesItemRegExp = new RegExp('^[a-z]+:[a-z]+$');
export const listAPIKeysResponseDataItemScopesDefault = [];
export const listAPIKeysResponseDataItemScopesMax = 1000;export const listAPIKeysResponseDataItemRateLimitDefault = 60;
export const listAPIKeysResponseDataItemRateLimitMax = 2147483647;export const listAPIKeysResponseDataItemLastUsedAtMax = 255;export const listAPIKeysResponseDataItemExpiresAtMax = 255;export const listAPIKeysResponseDataMax = 10000;export const listAPIKeysResponseMetaTotalMin = 0;
export const listAPIKeysResponseMetaTotalMax = 2147483647;

export const listAPIKeysResponse = zod.object({
  "data": zod.array(zod.object({
  "id": zod.uuid().min(listAPIKeysResponseDataItemIdMin).max(listAPIKeysResponseDataItemIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(listAPIKeysResponseDataItemCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(listAPIKeysResponseDataItemUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "userID": zod.uuid().min(listAPIKeysResponseDataItemUserIDMin).max(listAPIKeysResponseDataItemUserIDMax).describe('The user who owns this API key'),
  "organizationID": zod.uuid().min(listAPIKeysResponseDataItemOrganizationIDMin).max(listAPIKeysResponseDataItemOrganizationIDMax).describe('The organization this API key belongs to'),
  "keyHash": zod.string().min(1).max(listAPIKeysResponseDataItemKeyHashMax).regex(listAPIKeysResponseDataItemKeyHashRegExp).describe('Hashed version of the API key for secure storage'),
  "name": zod.string().min(1).max(listAPIKeysResponseDataItemNameMax).regex(listAPIKeysResponseDataItemNameRegExp).nullable(),
  "prefix": zod.string().min(1).max(listAPIKeysResponseDataItemPrefixMax).regex(listAPIKeysResponseDataItemPrefixRegExp).nullable(),
  "scopes": zod.array(zod.string().max(listAPIKeysResponseDataItemScopesItemMax).regex(listAPIKeysResponseDataItemScopesItemRegExp)).max(listAPIKeysResponseDataItemScopesMax),
  "rateLimit": zod.number().min(1).max(listAPIKeysResponseDataItemRateLimitMax).describe('Requests per minute allowed for this API key'),
  "lastUsedAt": zod.iso.datetime({}).min(1).max(listAPIKeysResponseDataItemLastUsedAtMax).nullable().describe('When this API key was last used'),
  "expiresAt": zod.iso.datetime({}).min(1).max(listAPIKeysResponseDataItemExpiresAtMax).nullable().describe('When this API key expires')
})).describe('Schema for API Key entity')).max(listAPIKeysResponseDataMax),
  "meta": zod.object({
  "total": zod.number().min(listAPIKeysResponseMetaTotalMin).max(listAPIKeysResponseMetaTotalMax).describe('Total number of items in the collection')
}).describe('Pagination metadata')
})


/**
 * Create a token
 * @summary Create a token
 */
export const createAPIKeyBodyNameMax = 255;
export const createAPIKeyBodyNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/]*$');
export const createAPIKeyBodyScopesItemMax = 255;
export const createAPIKeyBodyScopesItemRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/:]*$');
export const createAPIKeyBodyScopesMax = 100;export const createAPIKeyBodyRateLimitDefault = 60;
export const createAPIKeyBodyRateLimitMax = 10000;export const createAPIKeyBodyExpiresAtMax = 255;

export const createAPIKeyBody = zod.object({
  "name": zod.string().min(1).max(createAPIKeyBodyNameMax).regex(createAPIKeyBodyNameRegExp).describe('Human-readable name for the API key'),
  "scopes": zod.array(zod.string().min(1).max(createAPIKeyBodyScopesItemMax).regex(createAPIKeyBodyScopesItemRegExp)).max(createAPIKeyBodyScopesMax).describe('List of scopes/permissions for this API key'),
  "rateLimit": zod.number().min(1).max(createAPIKeyBodyRateLimitMax).default(createAPIKeyBodyRateLimitDefault).describe('Requests per minute limit (default 60)'),
  "expiresAt": zod.iso.datetime({}).min(1).max(createAPIKeyBodyExpiresAtMax).optional().describe('When the API key expires (optional, no expiry if omitted)')
})


/**
 * Get details of a specific API key (without the actual key value)
 * @summary Get API key details
 */
export const getAPIKeyPathIdMin = 36;
export const getAPIKeyPathIdMax = 36;

export const getAPIKeyParams = zod.object({
  "id": zod.uuid().min(getAPIKeyPathIdMin).max(getAPIKeyPathIdMax).describe('The unique identifier of the resource.')
})

export const getAPIKeyResponseDataIdMin = 36;
export const getAPIKeyResponseDataIdMax = 36;export const getAPIKeyResponseDataCreatedAtMax = 255;export const getAPIKeyResponseDataUpdatedAtMax = 255;export const getAPIKeyResponseDataUserIDMin = 36;
export const getAPIKeyResponseDataUserIDMax = 36;export const getAPIKeyResponseDataOrganizationIDMin = 36;
export const getAPIKeyResponseDataOrganizationIDMax = 36;export const getAPIKeyResponseDataKeyHashMax = 255;
export const getAPIKeyResponseDataKeyHashRegExp = new RegExp('^[a-zA-Z0-9]+$');
export const getAPIKeyResponseDataNameMax = 255;
export const getAPIKeyResponseDataNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\']+$');
export const getAPIKeyResponseDataPrefixMax = 255;
export const getAPIKeyResponseDataPrefixRegExp = new RegExp('^[a-z]+$');
export const getAPIKeyResponseDataScopesItemMax = 255;
export const getAPIKeyResponseDataScopesItemRegExp = new RegExp('^[a-z]+:[a-z]+$');
export const getAPIKeyResponseDataScopesDefault = [];
export const getAPIKeyResponseDataScopesMax = 1000;export const getAPIKeyResponseDataRateLimitDefault = 60;
export const getAPIKeyResponseDataRateLimitMax = 2147483647;export const getAPIKeyResponseDataLastUsedAtMax = 255;export const getAPIKeyResponseDataExpiresAtMax = 255;

export const getAPIKeyResponse = zod.object({
  "data": zod.object({
  "id": zod.uuid().min(getAPIKeyResponseDataIdMin).max(getAPIKeyResponseDataIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(getAPIKeyResponseDataCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(getAPIKeyResponseDataUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "userID": zod.uuid().min(getAPIKeyResponseDataUserIDMin).max(getAPIKeyResponseDataUserIDMax).describe('The user who owns this API key'),
  "organizationID": zod.uuid().min(getAPIKeyResponseDataOrganizationIDMin).max(getAPIKeyResponseDataOrganizationIDMax).describe('The organization this API key belongs to'),
  "keyHash": zod.string().min(1).max(getAPIKeyResponseDataKeyHashMax).regex(getAPIKeyResponseDataKeyHashRegExp).describe('Hashed version of the API key for secure storage'),
  "name": zod.string().min(1).max(getAPIKeyResponseDataNameMax).regex(getAPIKeyResponseDataNameRegExp).nullable(),
  "prefix": zod.string().min(1).max(getAPIKeyResponseDataPrefixMax).regex(getAPIKeyResponseDataPrefixRegExp).nullable(),
  "scopes": zod.array(zod.string().max(getAPIKeyResponseDataScopesItemMax).regex(getAPIKeyResponseDataScopesItemRegExp)).max(getAPIKeyResponseDataScopesMax),
  "rateLimit": zod.number().min(1).max(getAPIKeyResponseDataRateLimitMax).describe('Requests per minute allowed for this API key'),
  "lastUsedAt": zod.iso.datetime({}).min(1).max(getAPIKeyResponseDataLastUsedAtMax).nullable().describe('When this API key was last used'),
  "expiresAt": zod.iso.datetime({}).min(1).max(getAPIKeyResponseDataExpiresAtMax).nullable().describe('When this API key expires')
})).describe('Schema for API Key entity')
})


/**
 * Update an API key's name, scopes, or rate limit
 * @summary Update API key
 */
export const updateAPIKeyPathIdMin = 36;
export const updateAPIKeyPathIdMax = 36;

export const updateAPIKeyParams = zod.object({
  "id": zod.uuid().min(updateAPIKeyPathIdMin).max(updateAPIKeyPathIdMax).describe('The unique identifier of the resource.')
})

export const updateAPIKeyBodyNameMax = 255;
export const updateAPIKeyBodyNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/]*$');
export const updateAPIKeyBodyScopesItemMax = 255;
export const updateAPIKeyBodyScopesItemRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/:]*$');
export const updateAPIKeyBodyScopesMax = 1000;export const updateAPIKeyBodyRateLimitMax = 10000;

export const updateAPIKeyBody = zod.object({
  "name": zod.string().min(1).max(updateAPIKeyBodyNameMax).regex(updateAPIKeyBodyNameRegExp).optional().describe('Human-readable name for the API key'),
  "scopes": zod.array(zod.string().max(updateAPIKeyBodyScopesItemMax).regex(updateAPIKeyBodyScopesItemRegExp)).max(updateAPIKeyBodyScopesMax).optional().describe('Array of permission scopes'),
  "rateLimit": zod.number().min(1).max(updateAPIKeyBodyRateLimitMax).optional().describe('Requests per minute allowed for this API key')
})

export const updateAPIKeyResponseDataIdMin = 36;
export const updateAPIKeyResponseDataIdMax = 36;export const updateAPIKeyResponseDataCreatedAtMax = 255;export const updateAPIKeyResponseDataUpdatedAtMax = 255;export const updateAPIKeyResponseDataUserIDMin = 36;
export const updateAPIKeyResponseDataUserIDMax = 36;export const updateAPIKeyResponseDataOrganizationIDMin = 36;
export const updateAPIKeyResponseDataOrganizationIDMax = 36;export const updateAPIKeyResponseDataKeyHashMax = 255;
export const updateAPIKeyResponseDataKeyHashRegExp = new RegExp('^[a-zA-Z0-9]+$');
export const updateAPIKeyResponseDataNameMax = 255;
export const updateAPIKeyResponseDataNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\']+$');
export const updateAPIKeyResponseDataPrefixMax = 255;
export const updateAPIKeyResponseDataPrefixRegExp = new RegExp('^[a-z]+$');
export const updateAPIKeyResponseDataScopesItemMax = 255;
export const updateAPIKeyResponseDataScopesItemRegExp = new RegExp('^[a-z]+:[a-z]+$');
export const updateAPIKeyResponseDataScopesDefault = [];
export const updateAPIKeyResponseDataScopesMax = 1000;export const updateAPIKeyResponseDataRateLimitDefault = 60;
export const updateAPIKeyResponseDataRateLimitMax = 2147483647;export const updateAPIKeyResponseDataLastUsedAtMax = 255;export const updateAPIKeyResponseDataExpiresAtMax = 255;

export const updateAPIKeyResponse = zod.object({
  "data": zod.object({
  "id": zod.uuid().min(updateAPIKeyResponseDataIdMin).max(updateAPIKeyResponseDataIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(updateAPIKeyResponseDataCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(updateAPIKeyResponseDataUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "userID": zod.uuid().min(updateAPIKeyResponseDataUserIDMin).max(updateAPIKeyResponseDataUserIDMax).describe('The user who owns this API key'),
  "organizationID": zod.uuid().min(updateAPIKeyResponseDataOrganizationIDMin).max(updateAPIKeyResponseDataOrganizationIDMax).describe('The organization this API key belongs to'),
  "keyHash": zod.string().min(1).max(updateAPIKeyResponseDataKeyHashMax).regex(updateAPIKeyResponseDataKeyHashRegExp).describe('Hashed version of the API key for secure storage'),
  "name": zod.string().min(1).max(updateAPIKeyResponseDataNameMax).regex(updateAPIKeyResponseDataNameRegExp).nullable(),
  "prefix": zod.string().min(1).max(updateAPIKeyResponseDataPrefixMax).regex(updateAPIKeyResponseDataPrefixRegExp).nullable(),
  "scopes": zod.array(zod.string().max(updateAPIKeyResponseDataScopesItemMax).regex(updateAPIKeyResponseDataScopesItemRegExp)).max(updateAPIKeyResponseDataScopesMax),
  "rateLimit": zod.number().min(1).max(updateAPIKeyResponseDataRateLimitMax).describe('Requests per minute allowed for this API key'),
  "lastUsedAt": zod.iso.datetime({}).min(1).max(updateAPIKeyResponseDataLastUsedAtMax).nullable().describe('When this API key was last used'),
  "expiresAt": zod.iso.datetime({}).min(1).max(updateAPIKeyResponseDataExpiresAtMax).nullable().describe('When this API key expires')
})).describe('Schema for API Key entity')
})


/**
 * Delete an API key permanently. This action cannot be undone.
 * @summary Delete API key
 */
export const deleteAPIKeyPathIdMin = 36;
export const deleteAPIKeyPathIdMax = 36;

export const deleteAPIKeyParams = zod.object({
  "id": zod.uuid().min(deleteAPIKeyPathIdMin).max(deleteAPIKeyPathIdMax).describe('The unique identifier of the resource.')
})


/**
 * List organizations
 * @summary List organizations
 */
export const listOrganizationsQueryFilterFieldMax = 255;
export const listOrganizationsQueryFilterFieldRegExp = new RegExp('^[a-zA-Z_][a-zA-Z0-9_]*$');
export const listOrganizationsQueryFilterValueMaxOne = 1000;
export const listOrganizationsQueryFilterValueRegExpOne = new RegExp('^[\\w\\s\\-.,!?()@#+/\':;]+$');
export const listOrganizationsQueryFilterValueMinTwo = -9223372036854776000;
export const listOrganizationsQueryFilterValueMaxTwo = 9223372036854776000;export const listOrganizationsQueryPageLimitDefault = 10;
export const listOrganizationsQueryPageLimitMax = 100;export const listOrganizationsQueryPageOffsetDefault = 0;
export const listOrganizationsQueryPageOffsetMin = 0;
export const listOrganizationsQueryPageOffsetMax = 9007199254740991;export const listOrganizationsQuerySortMax = 10;

export const listOrganizationsQueryParams = zod.object({
  "filter": zod.object({
  "type": zod.enum(['and', 'or', 'eq', 'ne', 'gt', 'gte', 'lt', 'lte', 'contains', 'startsWith', 'endsWith']).describe('The type of filter operation'),
  "field": zod.string().min(1).max(listOrganizationsQueryFilterFieldMax).regex(listOrganizationsQueryFilterFieldRegExp).optional().describe('The field to filter on (for leaf conditions)'),
  "value": zod.union([zod.string().max(listOrganizationsQueryFilterValueMaxOne).regex(listOrganizationsQueryFilterValueRegExpOne),zod.number().min(listOrganizationsQueryFilterValueMinTwo).max(listOrganizationsQueryFilterValueMaxTwo),zod.boolean()]).optional().describe('The value to compare against (for leaf conditions)')
}).optional().describe('Filter by field values'),
  "page": zod.object({
  "limit": zod.number().min(1).max(listOrganizationsQueryPageLimitMax).default(listOrganizationsQueryPageLimitDefault).describe('Maximum number of items to return'),
  "offset": zod.number().min(listOrganizationsQueryPageOffsetMin).max(listOrganizationsQueryPageOffsetMax).optional().describe('Number of items to skip before starting to collect the result set')
}).optional().describe('The page parameter'),
  "sort": zod.array(zod.object({
  "field": zod.enum(['createdAt', 'id', 'updatedAt', 'billingEmail', 'credits', 'logo', 'metadata', 'name', 'plan', 'slug', 'stripeCustomerIdentifier']),
  "order": zod.enum(['asc', 'desc'])
})).max(listOrganizationsQuerySortMax).optional().describe('The sort parameter')
})

export const listOrganizationsResponseDataItemIdMin = 36;
export const listOrganizationsResponseDataItemIdMax = 36;export const listOrganizationsResponseDataItemCreatedAtMax = 255;export const listOrganizationsResponseDataItemUpdatedAtMax = 255;export const listOrganizationsResponseDataItemNameMax = 255;
export const listOrganizationsResponseDataItemNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\'&]+$');
export const listOrganizationsResponseDataItemSlugMin = 3;
export const listOrganizationsResponseDataItemSlugMax = 50;
export const listOrganizationsResponseDataItemSlugRegExp = new RegExp('^[a-z0-9]+(?:-[a-z0-9]+)*$');
export const listOrganizationsResponseDataItemLogoMax = 2048;export const listOrganizationsResponseDataItemBillingEmailMin = 5;
export const listOrganizationsResponseDataItemBillingEmailMax = 255;export const listOrganizationsResponseDataItemPlanDefault = "FREE";export const listOrganizationsResponseDataItemCreditsDefault = 0;
export const listOrganizationsResponseDataItemCreditsMin = 0;
export const listOrganizationsResponseDataItemCreditsMax = 2147483647;export const listOrganizationsResponseDataItemStripeCustomerIdentifierMax = 255;
export const listOrganizationsResponseDataItemStripeCustomerIdentifierRegExp = new RegExp('^cus_[a-zA-Z0-9]+$');
export const listOrganizationsResponseDataMax = 10000;export const listOrganizationsResponseMetaTotalMin = 0;
export const listOrganizationsResponseMetaTotalMax = 2147483647;

export const listOrganizationsResponse = zod.object({
  "data": zod.array(zod.object({
  "id": zod.uuid().min(listOrganizationsResponseDataItemIdMin).max(listOrganizationsResponseDataItemIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(listOrganizationsResponseDataItemCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(listOrganizationsResponseDataItemUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "name": zod.string().min(1).max(listOrganizationsResponseDataItemNameMax).regex(listOrganizationsResponseDataItemNameRegExp).describe('The organization\'s display name'),
  "slug": zod.string().min(listOrganizationsResponseDataItemSlugMin).max(listOrganizationsResponseDataItemSlugMax).regex(listOrganizationsResponseDataItemSlugRegExp).describe('URL-friendly unique identifier for the organization'),
  "logo": zod.url().min(1).max(listOrganizationsResponseDataItemLogoMax).nullable().describe('The organization\'s logo URL'),
  "billingEmail": zod.email().min(listOrganizationsResponseDataItemBillingEmailMin).max(listOrganizationsResponseDataItemBillingEmailMax).nullable().describe('Email address for billing communications'),
  "plan": zod.enum(['FREE', 'BASIC', 'STANDARD', 'PREMIUM', 'UNLIMITED']).describe('The current subscription plan'),
  "credits": zod.number().min(listOrganizationsResponseDataItemCreditsMin).max(listOrganizationsResponseDataItemCreditsMax).describe('Available credits for this organization'),
  "stripeCustomerIdentifier": zod.string().min(1).max(listOrganizationsResponseDataItemStripeCustomerIdentifierMax).regex(listOrganizationsResponseDataItemStripeCustomerIdentifierRegExp).describe('Stripe customer identifier')
})).describe('Schema for Organization entity')).max(listOrganizationsResponseDataMax),
  "meta": zod.object({
  "total": zod.number().min(listOrganizationsResponseMetaTotalMin).max(listOrganizationsResponseMetaTotalMax).describe('Total number of items in the collection')
}).describe('Pagination metadata')
})


/**
 * Create an organization
 * @summary Create an organization
 */
export const createOrganizationBodyBillingEmailMax = 255;export const createOrganizationBodyOrganizationIDMin = 36;
export const createOrganizationBodyOrganizationIDMax = 36;

export const createOrganizationBody = zod.object({
  "billingEmail": zod.email().min(1).max(createOrganizationBodyBillingEmailMax).describe('The billing email to use for the organization'),
  "organizationID": zod.uuid().min(createOrganizationBodyOrganizationIDMin).max(createOrganizationBodyOrganizationIDMax).describe('UUID identifier')
})


/**
 * Get an organization
 * @summary Get an organization
 */
export const getOrganizationPathIdMin = 36;
export const getOrganizationPathIdMax = 36;

export const getOrganizationParams = zod.object({
  "id": zod.uuid().min(getOrganizationPathIdMin).max(getOrganizationPathIdMax).describe('The unique identifier of the resource.')
})

export const getOrganizationResponseDataIdMin = 36;
export const getOrganizationResponseDataIdMax = 36;export const getOrganizationResponseDataCreatedAtMax = 255;export const getOrganizationResponseDataUpdatedAtMax = 255;export const getOrganizationResponseDataNameMax = 255;
export const getOrganizationResponseDataNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\'&]+$');
export const getOrganizationResponseDataSlugMin = 3;
export const getOrganizationResponseDataSlugMax = 50;
export const getOrganizationResponseDataSlugRegExp = new RegExp('^[a-z0-9]+(?:-[a-z0-9]+)*$');
export const getOrganizationResponseDataLogoMax = 2048;export const getOrganizationResponseDataBillingEmailMin = 5;
export const getOrganizationResponseDataBillingEmailMax = 255;export const getOrganizationResponseDataPlanDefault = "FREE";export const getOrganizationResponseDataCreditsDefault = 0;
export const getOrganizationResponseDataCreditsMin = 0;
export const getOrganizationResponseDataCreditsMax = 2147483647;export const getOrganizationResponseDataStripeCustomerIdentifierMax = 255;
export const getOrganizationResponseDataStripeCustomerIdentifierRegExp = new RegExp('^cus_[a-zA-Z0-9]+$');


export const getOrganizationResponse = zod.object({
  "data": zod.object({
  "id": zod.uuid().min(getOrganizationResponseDataIdMin).max(getOrganizationResponseDataIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(getOrganizationResponseDataCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(getOrganizationResponseDataUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "name": zod.string().min(1).max(getOrganizationResponseDataNameMax).regex(getOrganizationResponseDataNameRegExp).describe('The organization\'s display name'),
  "slug": zod.string().min(getOrganizationResponseDataSlugMin).max(getOrganizationResponseDataSlugMax).regex(getOrganizationResponseDataSlugRegExp).describe('URL-friendly unique identifier for the organization'),
  "logo": zod.url().min(1).max(getOrganizationResponseDataLogoMax).nullable().describe('The organization\'s logo URL'),
  "billingEmail": zod.email().min(getOrganizationResponseDataBillingEmailMin).max(getOrganizationResponseDataBillingEmailMax).nullable().describe('Email address for billing communications'),
  "plan": zod.enum(['FREE', 'BASIC', 'STANDARD', 'PREMIUM', 'UNLIMITED']).describe('The current subscription plan'),
  "credits": zod.number().min(getOrganizationResponseDataCreditsMin).max(getOrganizationResponseDataCreditsMax).describe('Available credits for this organization'),
  "stripeCustomerIdentifier": zod.string().min(1).max(getOrganizationResponseDataStripeCustomerIdentifierMax).regex(getOrganizationResponseDataStripeCustomerIdentifierRegExp).describe('Stripe customer identifier')
})).describe('Schema for Organization entity')
})


/**
 * Update an organization
 * @summary Update an organization
 */
export const updateOrganizationPathIdMin = 36;
export const updateOrganizationPathIdMax = 36;

export const updateOrganizationParams = zod.object({
  "id": zod.uuid().min(updateOrganizationPathIdMin).max(updateOrganizationPathIdMax).describe('The unique identifier of the resource.')
})

export const updateOrganizationBodyBillingEmailMax = 255;export const updateOrganizationBodyOrganizationIDMin = 36;
export const updateOrganizationBodyOrganizationIDMax = 36;

export const updateOrganizationBody = zod.object({
  "billingEmail": zod.email().max(updateOrganizationBodyBillingEmailMax).optional().describe('The billing email to use for the organization'),
  "organizationID": zod.uuid().min(updateOrganizationBodyOrganizationIDMin).max(updateOrganizationBodyOrganizationIDMax).optional().describe('UUID identifier')
})

export const updateOrganizationResponseDataIdMin = 36;
export const updateOrganizationResponseDataIdMax = 36;export const updateOrganizationResponseDataCreatedAtMax = 255;export const updateOrganizationResponseDataUpdatedAtMax = 255;export const updateOrganizationResponseDataNameMax = 255;
export const updateOrganizationResponseDataNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\'&]+$');
export const updateOrganizationResponseDataSlugMin = 3;
export const updateOrganizationResponseDataSlugMax = 50;
export const updateOrganizationResponseDataSlugRegExp = new RegExp('^[a-z0-9]+(?:-[a-z0-9]+)*$');
export const updateOrganizationResponseDataLogoMax = 2048;export const updateOrganizationResponseDataBillingEmailMin = 5;
export const updateOrganizationResponseDataBillingEmailMax = 255;export const updateOrganizationResponseDataPlanDefault = "FREE";export const updateOrganizationResponseDataCreditsDefault = 0;
export const updateOrganizationResponseDataCreditsMin = 0;
export const updateOrganizationResponseDataCreditsMax = 2147483647;export const updateOrganizationResponseDataStripeCustomerIdentifierMax = 255;
export const updateOrganizationResponseDataStripeCustomerIdentifierRegExp = new RegExp('^cus_[a-zA-Z0-9]+$');


export const updateOrganizationResponse = zod.object({
  "data": zod.object({
  "id": zod.uuid().min(updateOrganizationResponseDataIdMin).max(updateOrganizationResponseDataIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(updateOrganizationResponseDataCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(updateOrganizationResponseDataUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "name": zod.string().min(1).max(updateOrganizationResponseDataNameMax).regex(updateOrganizationResponseDataNameRegExp).describe('The organization\'s display name'),
  "slug": zod.string().min(updateOrganizationResponseDataSlugMin).max(updateOrganizationResponseDataSlugMax).regex(updateOrganizationResponseDataSlugRegExp).describe('URL-friendly unique identifier for the organization'),
  "logo": zod.url().min(1).max(updateOrganizationResponseDataLogoMax).nullable().describe('The organization\'s logo URL'),
  "billingEmail": zod.email().min(updateOrganizationResponseDataBillingEmailMin).max(updateOrganizationResponseDataBillingEmailMax).nullable().describe('Email address for billing communications'),
  "plan": zod.enum(['FREE', 'BASIC', 'STANDARD', 'PREMIUM', 'UNLIMITED']).describe('The current subscription plan'),
  "credits": zod.number().min(updateOrganizationResponseDataCreditsMin).max(updateOrganizationResponseDataCreditsMax).describe('Available credits for this organization'),
  "stripeCustomerIdentifier": zod.string().min(1).max(updateOrganizationResponseDataStripeCustomerIdentifierMax).regex(updateOrganizationResponseDataStripeCustomerIdentifierRegExp).describe('Stripe customer identifier')
})).describe('Schema for Organization entity')
})


/**
 * Delete an organization
 * @summary Delete an organization
 */
export const deleteOrganizationPathIdMin = 36;
export const deleteOrganizationPathIdMax = 36;

export const deleteOrganizationParams = zod.object({
  "id": zod.uuid().min(deleteOrganizationPathIdMin).max(deleteOrganizationPathIdMax).describe('The unique identifier of the resource.')
})


/**
 * List members
 * @summary List members
 */
export const listMembersPathOrganizationIDMax = 36;

export const listMembersParams = zod.object({
  "organizationID": zod.uuid().max(listMembersPathOrganizationIDMax).describe('Organization ID')
})

export const listMembersQueryFilterFieldMax = 255;
export const listMembersQueryFilterFieldRegExp = new RegExp('^[a-zA-Z_][a-zA-Z0-9_]*$');
export const listMembersQueryFilterValueMaxOne = 1000;
export const listMembersQueryFilterValueRegExpOne = new RegExp('^[\\w\\s\\-.,!?()@#+/\':;]+$');
export const listMembersQueryFilterValueMinTwo = -9223372036854776000;
export const listMembersQueryFilterValueMaxTwo = 9223372036854776000;export const listMembersQueryPageLimitDefault = 10;
export const listMembersQueryPageLimitMax = 100;export const listMembersQueryPageOffsetDefault = 0;
export const listMembersQueryPageOffsetMin = 0;
export const listMembersQueryPageOffsetMax = 9007199254740991;export const listMembersQuerySortMax = 10;

export const listMembersQueryParams = zod.object({
  "filter": zod.object({
  "type": zod.enum(['and', 'or', 'eq', 'ne', 'gt', 'gte', 'lt', 'lte', 'contains', 'startsWith', 'endsWith']).describe('The type of filter operation'),
  "field": zod.string().min(1).max(listMembersQueryFilterFieldMax).regex(listMembersQueryFilterFieldRegExp).optional().describe('The field to filter on (for leaf conditions)'),
  "value": zod.union([zod.string().max(listMembersQueryFilterValueMaxOne).regex(listMembersQueryFilterValueRegExpOne),zod.number().min(listMembersQueryFilterValueMinTwo).max(listMembersQueryFilterValueMaxTwo),zod.boolean()]).optional().describe('The value to compare against (for leaf conditions)')
}).optional().describe('Filter by field values'),
  "page": zod.object({
  "limit": zod.number().min(1).max(listMembersQueryPageLimitMax).default(listMembersQueryPageLimitDefault).describe('Maximum number of items to return'),
  "offset": zod.number().min(listMembersQueryPageOffsetMin).max(listMembersQueryPageOffsetMax).optional().describe('Number of items to skip before starting to collect the result set')
}).optional().describe('The page parameter'),
  "sort": zod.array(zod.object({
  "field": zod.enum(['createdAt', 'id', 'updatedAt', 'organizationID', 'role', 'userID']),
  "order": zod.enum(['asc', 'desc'])
})).max(listMembersQuerySortMax).optional().describe('The sort parameter')
})

export const listMembersResponseDataItemIdMin = 36;
export const listMembersResponseDataItemIdMax = 36;export const listMembersResponseDataItemCreatedAtMax = 255;export const listMembersResponseDataItemUpdatedAtMax = 255;export const listMembersResponseDataItemOrganizationIDMin = 36;
export const listMembersResponseDataItemOrganizationIDMax = 36;export const listMembersResponseDataItemRoleDefault = "basic";export const listMembersResponseDataItemUserIDMin = 36;
export const listMembersResponseDataItemUserIDMax = 36;export const listMembersResponseDataMax = 10000;export const listMembersResponseMetaTotalMin = 0;
export const listMembersResponseMetaTotalMax = 2147483647;

export const listMembersResponse = zod.object({
  "data": zod.array(zod.object({
  "id": zod.uuid().min(listMembersResponseDataItemIdMin).max(listMembersResponseDataItemIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(listMembersResponseDataItemCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(listMembersResponseDataItemUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "organizationID": zod.uuid().min(listMembersResponseDataItemOrganizationIDMin).max(listMembersResponseDataItemOrganizationIDMax).describe('The organization this member belongs to'),
  "role": zod.enum(['admin', 'owner', 'basic']).describe('The role of the member'),
  "userID": zod.uuid().min(listMembersResponseDataItemUserIDMin).max(listMembersResponseDataItemUserIDMax).describe('The user who is a member of the organization')
})).describe('Schema for Member entity')).max(listMembersResponseDataMax),
  "meta": zod.object({
  "total": zod.number().min(listMembersResponseMetaTotalMin).max(listMembersResponseMetaTotalMax).describe('Total number of items in the collection')
}).describe('Pagination metadata')
})


/**
 * Create a member
 * @summary Create a member
 */
export const createMemberPathOrganizationIDMax = 36;

export const createMemberParams = zod.object({
  "organizationID": zod.uuid().max(createMemberPathOrganizationIDMax).describe('Organization ID')
})

export const createMemberBody = zod.object({
  "role": zod.enum(['admin', 'owner', 'member']).describe('The role of the member')
})


/**
 * Get a member
 * @summary Get a member
 */
export const getMemberPathOrganizationIDMin = 36;
export const getMemberPathOrganizationIDMax = 36;export const getMemberPathIdMin = 36;
export const getMemberPathIdMax = 36;

export const getMemberParams = zod.object({
  "organizationID": zod.uuid().min(getMemberPathOrganizationIDMin).max(getMemberPathOrganizationIDMax).describe('The unique identifier of the organization.'),
  "id": zod.uuid().min(getMemberPathIdMin).max(getMemberPathIdMax).describe('The unique identifier of the resource.')
})

export const getMemberResponseDataIdMin = 36;
export const getMemberResponseDataIdMax = 36;export const getMemberResponseDataCreatedAtMax = 255;export const getMemberResponseDataUpdatedAtMax = 255;export const getMemberResponseDataOrganizationIDMin = 36;
export const getMemberResponseDataOrganizationIDMax = 36;export const getMemberResponseDataRoleDefault = "basic";export const getMemberResponseDataUserIDMin = 36;
export const getMemberResponseDataUserIDMax = 36;

export const getMemberResponse = zod.object({
  "data": zod.object({
  "id": zod.uuid().min(getMemberResponseDataIdMin).max(getMemberResponseDataIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(getMemberResponseDataCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(getMemberResponseDataUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "organizationID": zod.uuid().min(getMemberResponseDataOrganizationIDMin).max(getMemberResponseDataOrganizationIDMax).describe('The organization this member belongs to'),
  "role": zod.enum(['admin', 'owner', 'basic']).describe('The role of the member'),
  "userID": zod.uuid().min(getMemberResponseDataUserIDMin).max(getMemberResponseDataUserIDMax).describe('The user who is a member of the organization')
})).describe('Schema for Member entity')
})


/**
 * Update a member
 * @summary Update a member
 */
export const updateMemberPathOrganizationIDMin = 36;
export const updateMemberPathOrganizationIDMax = 36;export const updateMemberPathIdMin = 36;
export const updateMemberPathIdMax = 36;

export const updateMemberParams = zod.object({
  "organizationID": zod.uuid().min(updateMemberPathOrganizationIDMin).max(updateMemberPathOrganizationIDMax).describe('The unique identifier of the organization.'),
  "id": zod.uuid().min(updateMemberPathIdMin).max(updateMemberPathIdMax).describe('The unique identifier of the resource.')
})

export const updateMemberBody = zod.object({
  "role": zod.enum(['admin', 'owner', 'member']).optional().describe('The role of the member')
})

export const updateMemberResponseDataIdMin = 36;
export const updateMemberResponseDataIdMax = 36;export const updateMemberResponseDataCreatedAtMax = 255;export const updateMemberResponseDataUpdatedAtMax = 255;export const updateMemberResponseDataOrganizationIDMin = 36;
export const updateMemberResponseDataOrganizationIDMax = 36;export const updateMemberResponseDataRoleDefault = "basic";export const updateMemberResponseDataUserIDMin = 36;
export const updateMemberResponseDataUserIDMax = 36;

export const updateMemberResponse = zod.object({
  "data": zod.object({
  "id": zod.uuid().min(updateMemberResponseDataIdMin).max(updateMemberResponseDataIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(updateMemberResponseDataCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(updateMemberResponseDataUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "organizationID": zod.uuid().min(updateMemberResponseDataOrganizationIDMin).max(updateMemberResponseDataOrganizationIDMax).describe('The organization this member belongs to'),
  "role": zod.enum(['admin', 'owner', 'basic']).describe('The role of the member'),
  "userID": zod.uuid().min(updateMemberResponseDataUserIDMin).max(updateMemberResponseDataUserIDMax).describe('The user who is a member of the organization')
})).describe('Schema for Member entity')
})


/**
 * Delete a member
 * @summary Delete a member
 */
export const deleteMemberPathOrganizationIDMin = 36;
export const deleteMemberPathOrganizationIDMax = 36;export const deleteMemberPathIdMin = 36;
export const deleteMemberPathIdMax = 36;

export const deleteMemberParams = zod.object({
  "organizationID": zod.uuid().min(deleteMemberPathOrganizationIDMin).max(deleteMemberPathOrganizationIDMax).describe('The unique identifier of the organization.'),
  "id": zod.uuid().min(deleteMemberPathIdMin).max(deleteMemberPathIdMax).describe('The unique identifier of the resource.')
})


/**
 * List invitations
 * @summary List invitations
 */
export const listInvitationsPathOrganizationIDMin = 36;
export const listInvitationsPathOrganizationIDMax = 36;

export const listInvitationsParams = zod.object({
  "organizationID": zod.uuid().min(listInvitationsPathOrganizationIDMin).max(listInvitationsPathOrganizationIDMax).describe('The unique identifier of the organization.')
})

export const listInvitationsQueryFilterFieldMax = 255;
export const listInvitationsQueryFilterFieldRegExp = new RegExp('^[a-zA-Z_][a-zA-Z0-9_]*$');
export const listInvitationsQueryFilterValueMaxOne = 1000;
export const listInvitationsQueryFilterValueRegExpOne = new RegExp('^[\\w\\s\\-.,!?()@#+/\':;]+$');
export const listInvitationsQueryFilterValueMinTwo = -9223372036854776000;
export const listInvitationsQueryFilterValueMaxTwo = 9223372036854776000;export const listInvitationsQueryPageLimitDefault = 10;
export const listInvitationsQueryPageLimitMax = 100;export const listInvitationsQueryPageOffsetDefault = 0;
export const listInvitationsQueryPageOffsetMin = 0;
export const listInvitationsQueryPageOffsetMax = 9007199254740991;export const listInvitationsQuerySortMax = 10;

export const listInvitationsQueryParams = zod.object({
  "filter": zod.object({
  "type": zod.enum(['and', 'or', 'eq', 'ne', 'gt', 'gte', 'lt', 'lte', 'contains', 'startsWith', 'endsWith']).describe('The type of filter operation'),
  "field": zod.string().min(1).max(listInvitationsQueryFilterFieldMax).regex(listInvitationsQueryFilterFieldRegExp).optional().describe('The field to filter on (for leaf conditions)'),
  "value": zod.union([zod.string().max(listInvitationsQueryFilterValueMaxOne).regex(listInvitationsQueryFilterValueRegExpOne),zod.number().min(listInvitationsQueryFilterValueMinTwo).max(listInvitationsQueryFilterValueMaxTwo),zod.boolean()]).optional().describe('The value to compare against (for leaf conditions)')
}).optional().describe('Filter by field values'),
  "page": zod.object({
  "limit": zod.number().min(1).max(listInvitationsQueryPageLimitMax).default(listInvitationsQueryPageLimitDefault).describe('Maximum number of items to return'),
  "offset": zod.number().min(listInvitationsQueryPageOffsetMin).max(listInvitationsQueryPageOffsetMax).optional().describe('Number of items to skip before starting to collect the result set')
}).optional().describe('The page parameter'),
  "sort": zod.array(zod.object({
  "field": zod.enum(['createdAt', 'id', 'updatedAt', 'email', 'expiresAt', 'inviterID', 'organizationID', 'role', 'status']),
  "order": zod.enum(['asc', 'desc'])
})).max(listInvitationsQuerySortMax).optional().describe('The sort parameter')
})

export const listInvitationsResponseDataItemIdMin = 36;
export const listInvitationsResponseDataItemIdMax = 36;export const listInvitationsResponseDataItemCreatedAtMax = 255;export const listInvitationsResponseDataItemUpdatedAtMax = 255;export const listInvitationsResponseDataItemEmailMax = 255;export const listInvitationsResponseDataItemExpiresAtMax = 255;export const listInvitationsResponseDataItemInviterIDMin = 36;
export const listInvitationsResponseDataItemInviterIDMax = 36;export const listInvitationsResponseDataItemOrganizationIDMin = 36;
export const listInvitationsResponseDataItemOrganizationIDMax = 36;export const listInvitationsResponseDataItemRoleDefault = "basic";export const listInvitationsResponseDataItemStatusDefault = "pending";export const listInvitationsResponseDataMax = 10000;export const listInvitationsResponseMetaTotalMin = 0;
export const listInvitationsResponseMetaTotalMax = 2147483647;

export const listInvitationsResponse = zod.object({
  "data": zod.array(zod.object({
  "id": zod.uuid().min(listInvitationsResponseDataItemIdMin).max(listInvitationsResponseDataItemIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(listInvitationsResponseDataItemCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(listInvitationsResponseDataItemUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "email": zod.email().min(1).max(listInvitationsResponseDataItemEmailMax).describe('The email of the invitated user'),
  "expiresAt": zod.iso.datetime({}).min(1).max(listInvitationsResponseDataItemExpiresAtMax).describe('The date and time when the invitation expires'),
  "inviterID": zod.uuid().min(listInvitationsResponseDataItemInviterIDMin).max(listInvitationsResponseDataItemInviterIDMax).describe('The ID of the user who sent this invitation'),
  "organizationID": zod.uuid().min(listInvitationsResponseDataItemOrganizationIDMin).max(listInvitationsResponseDataItemOrganizationIDMax).describe('The organization the user is being invited to join'),
  "role": zod.enum(['admin', 'owner', 'basic']).describe('The role of the invitation'),
  "status": zod.enum(['pending', 'accepted', 'declined', 'expired']).describe('The status of the invitation, e.g., pending, accepted, declined')
})).describe('Schema for Invitation entity')).max(listInvitationsResponseDataMax),
  "meta": zod.object({
  "total": zod.number().min(listInvitationsResponseMetaTotalMin).max(listInvitationsResponseMetaTotalMax).describe('Total number of items in the collection')
}).describe('Pagination metadata')
})


/**
 * Create an invitation
 * @summary Create an invitation
 */
export const createInvitationPathOrganizationIDMin = 36;
export const createInvitationPathOrganizationIDMax = 36;

export const createInvitationParams = zod.object({
  "organizationID": zod.uuid().min(createInvitationPathOrganizationIDMin).max(createInvitationPathOrganizationIDMax).describe('The unique identifier of the organization.')
})

export const createInvitationBodyEmailMax = 255;
export const createInvitationBodyEmailRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/]*$');


export const createInvitationBody = zod.object({
  "email": zod.string().min(1).max(createInvitationBodyEmailMax).regex(createInvitationBodyEmailRegExp).describe('The email of the invitated user'),
  "role": zod.enum(['admin', 'owner', 'member']).describe('The role of the invitation')
})


/**
 * Get an invitation
 * @summary Get an invitation
 */
export const getInvitationPathOrganizationIDMin = 36;
export const getInvitationPathOrganizationIDMax = 36;export const getInvitationPathIdMin = 36;
export const getInvitationPathIdMax = 36;

export const getInvitationParams = zod.object({
  "organizationID": zod.uuid().min(getInvitationPathOrganizationIDMin).max(getInvitationPathOrganizationIDMax).describe('The unique identifier of the organization.'),
  "id": zod.uuid().min(getInvitationPathIdMin).max(getInvitationPathIdMax).describe('The unique identifier of the resource.')
})

export const getInvitationResponseDataIdMin = 36;
export const getInvitationResponseDataIdMax = 36;export const getInvitationResponseDataCreatedAtMax = 255;export const getInvitationResponseDataUpdatedAtMax = 255;export const getInvitationResponseDataEmailMax = 255;export const getInvitationResponseDataExpiresAtMax = 255;export const getInvitationResponseDataInviterIDMin = 36;
export const getInvitationResponseDataInviterIDMax = 36;export const getInvitationResponseDataOrganizationIDMin = 36;
export const getInvitationResponseDataOrganizationIDMax = 36;export const getInvitationResponseDataRoleDefault = "basic";export const getInvitationResponseDataStatusDefault = "pending";

export const getInvitationResponse = zod.object({
  "data": zod.object({
  "id": zod.uuid().min(getInvitationResponseDataIdMin).max(getInvitationResponseDataIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(getInvitationResponseDataCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(getInvitationResponseDataUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "email": zod.email().min(1).max(getInvitationResponseDataEmailMax).describe('The email of the invitated user'),
  "expiresAt": zod.iso.datetime({}).min(1).max(getInvitationResponseDataExpiresAtMax).describe('The date and time when the invitation expires'),
  "inviterID": zod.uuid().min(getInvitationResponseDataInviterIDMin).max(getInvitationResponseDataInviterIDMax).describe('The ID of the user who sent this invitation'),
  "organizationID": zod.uuid().min(getInvitationResponseDataOrganizationIDMin).max(getInvitationResponseDataOrganizationIDMax).describe('The organization the user is being invited to join'),
  "role": zod.enum(['admin', 'owner', 'basic']).describe('The role of the invitation'),
  "status": zod.enum(['pending', 'accepted', 'declined', 'expired']).describe('The status of the invitation, e.g., pending, accepted, declined')
})).describe('Schema for Invitation entity')
})


/**
 * Update an invitation
 * @summary Update an invitation
 */
export const updateInvitationPathOrganizationIDMin = 36;
export const updateInvitationPathOrganizationIDMax = 36;export const updateInvitationPathIdMin = 36;
export const updateInvitationPathIdMax = 36;

export const updateInvitationParams = zod.object({
  "organizationID": zod.uuid().min(updateInvitationPathOrganizationIDMin).max(updateInvitationPathOrganizationIDMax).describe('The unique identifier of the organization.'),
  "id": zod.uuid().min(updateInvitationPathIdMin).max(updateInvitationPathIdMax).describe('The unique identifier of the resource.')
})

export const updateInvitationBodyEmailMax = 255;
export const updateInvitationBodyEmailRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/]*$');


export const updateInvitationBody = zod.object({
  "email": zod.string().max(updateInvitationBodyEmailMax).regex(updateInvitationBodyEmailRegExp).optional().describe('The email of the invitated user'),
  "role": zod.enum(['admin', 'owner', 'member']).optional().describe('The role of the invitation')
})

export const updateInvitationResponseDataIdMin = 36;
export const updateInvitationResponseDataIdMax = 36;export const updateInvitationResponseDataCreatedAtMax = 255;export const updateInvitationResponseDataUpdatedAtMax = 255;export const updateInvitationResponseDataEmailMax = 255;export const updateInvitationResponseDataExpiresAtMax = 255;export const updateInvitationResponseDataInviterIDMin = 36;
export const updateInvitationResponseDataInviterIDMax = 36;export const updateInvitationResponseDataOrganizationIDMin = 36;
export const updateInvitationResponseDataOrganizationIDMax = 36;export const updateInvitationResponseDataRoleDefault = "basic";export const updateInvitationResponseDataStatusDefault = "pending";

export const updateInvitationResponse = zod.object({
  "data": zod.object({
  "id": zod.uuid().min(updateInvitationResponseDataIdMin).max(updateInvitationResponseDataIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(updateInvitationResponseDataCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(updateInvitationResponseDataUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "email": zod.email().min(1).max(updateInvitationResponseDataEmailMax).describe('The email of the invitated user'),
  "expiresAt": zod.iso.datetime({}).min(1).max(updateInvitationResponseDataExpiresAtMax).describe('The date and time when the invitation expires'),
  "inviterID": zod.uuid().min(updateInvitationResponseDataInviterIDMin).max(updateInvitationResponseDataInviterIDMax).describe('The ID of the user who sent this invitation'),
  "organizationID": zod.uuid().min(updateInvitationResponseDataOrganizationIDMin).max(updateInvitationResponseDataOrganizationIDMax).describe('The organization the user is being invited to join'),
  "role": zod.enum(['admin', 'owner', 'basic']).describe('The role of the invitation'),
  "status": zod.enum(['pending', 'accepted', 'declined', 'expired']).describe('The status of the invitation, e.g., pending, accepted, declined')
})).describe('Schema for Invitation entity')
})


/**
 * Delete an invitation
 * @summary Delete an invitation
 */
export const deleteInvitationPathOrganizationIDMin = 36;
export const deleteInvitationPathOrganizationIDMax = 36;export const deleteInvitationPathIdMin = 36;
export const deleteInvitationPathIdMax = 36;

export const deleteInvitationParams = zod.object({
  "organizationID": zod.uuid().min(deleteInvitationPathOrganizationIDMin).max(deleteInvitationPathOrganizationIDMax).describe('The unique identifier of the organization.'),
  "id": zod.uuid().min(deleteInvitationPathIdMin).max(deleteInvitationPathIdMax).describe('The unique identifier of the resource.')
})


/**
 * List pipelines
 * @summary List pipelines
 */
export const listPipelinesQueryFilterFieldMax = 255;
export const listPipelinesQueryFilterFieldRegExp = new RegExp('^[a-zA-Z_][a-zA-Z0-9_]*$');
export const listPipelinesQueryFilterValueMaxOne = 1000;
export const listPipelinesQueryFilterValueRegExpOne = new RegExp('^[\\w\\s\\-.,!?()@#+/\':;]+$');
export const listPipelinesQueryFilterValueMinTwo = -9223372036854776000;
export const listPipelinesQueryFilterValueMaxTwo = 9223372036854776000;export const listPipelinesQueryPageLimitDefault = 10;
export const listPipelinesQueryPageLimitMax = 100;export const listPipelinesQueryPageOffsetDefault = 0;
export const listPipelinesQueryPageOffsetMin = 0;
export const listPipelinesQueryPageOffsetMax = 9007199254740991;export const listPipelinesQuerySortMax = 10;

export const listPipelinesQueryParams = zod.object({
  "filter": zod.object({
  "type": zod.enum(['and', 'or', 'eq', 'ne', 'gt', 'gte', 'lt', 'lte', 'contains', 'startsWith', 'endsWith']).describe('The type of filter operation'),
  "field": zod.string().min(1).max(listPipelinesQueryFilterFieldMax).regex(listPipelinesQueryFilterFieldRegExp).optional().describe('The field to filter on (for leaf conditions)'),
  "value": zod.union([zod.string().max(listPipelinesQueryFilterValueMaxOne).regex(listPipelinesQueryFilterValueRegExpOne),zod.number().min(listPipelinesQueryFilterValueMinTwo).max(listPipelinesQueryFilterValueMaxTwo),zod.boolean()]).optional().describe('The value to compare against (for leaf conditions)')
}).optional().describe('Filter by field values'),
  "page": zod.object({
  "limit": zod.number().min(1).max(listPipelinesQueryPageLimitMax).default(listPipelinesQueryPageLimitDefault).describe('Maximum number of items to return'),
  "offset": zod.number().min(listPipelinesQueryPageOffsetMin).max(listPipelinesQueryPageOffsetMax).optional().describe('Number of items to skip before starting to collect the result set')
}).optional().describe('The page parameter'),
  "sort": zod.array(zod.object({
  "field": zod.enum(['createdAt', 'id', 'updatedAt', 'description', 'name', 'organizationID']),
  "order": zod.enum(['asc', 'desc'])
})).max(listPipelinesQuerySortMax).optional().describe('The sort parameter')
})

export const listPipelinesResponseDataItemIdMin = 36;
export const listPipelinesResponseDataItemIdMax = 36;export const listPipelinesResponseDataItemCreatedAtMax = 255;export const listPipelinesResponseDataItemUpdatedAtMax = 255;export const listPipelinesResponseDataItemOrganizationIDMin = 36;
export const listPipelinesResponseDataItemOrganizationIDMax = 36;export const listPipelinesResponseDataItemNameMax = 255;
export const listPipelinesResponseDataItemNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\']+$');
export const listPipelinesResponseDataItemDescriptionMax = 1000;
export const listPipelinesResponseDataItemDescriptionRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\':;]+$');
export const listPipelinesResponseDataMax = 10000;export const listPipelinesResponseMetaTotalMin = 0;
export const listPipelinesResponseMetaTotalMax = 2147483647;

export const listPipelinesResponse = zod.object({
  "data": zod.array(zod.object({
  "id": zod.uuid().min(listPipelinesResponseDataItemIdMin).max(listPipelinesResponseDataItemIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(listPipelinesResponseDataItemCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(listPipelinesResponseDataItemUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "organizationID": zod.uuid().min(listPipelinesResponseDataItemOrganizationIDMin).max(listPipelinesResponseDataItemOrganizationIDMax).describe('The organization identifier'),
  "name": zod.string().min(1).max(listPipelinesResponseDataItemNameMax).regex(listPipelinesResponseDataItemNameRegExp).nullable().describe('The pipeline\'s display name'),
  "description": zod.string().max(listPipelinesResponseDataItemDescriptionMax).regex(listPipelinesResponseDataItemDescriptionRegExp).nullable().describe('Detailed description of the pipeline\'s purpose')
})).describe('Schema for Pipeline entity')).max(listPipelinesResponseDataMax),
  "meta": zod.object({
  "total": zod.number().min(listPipelinesResponseMetaTotalMin).max(listPipelinesResponseMetaTotalMax).describe('Total number of items in the collection')
}).describe('Pagination metadata')
})


/**
 * Create a pipeline
 * @summary Create a pipeline
 */
export const createPipelineBodyDescriptionMax = 1000;
export const createPipelineBodyDescriptionRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/]*$');
export const createPipelineBodyNameMax = 255;
export const createPipelineBodyNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/]*$');


export const createPipelineBody = zod.object({
  "description": zod.string().min(1).max(createPipelineBodyDescriptionMax).regex(createPipelineBodyDescriptionRegExp).optional().describe('The pipeline description'),
  "name": zod.string().min(1).max(createPipelineBodyNameMax).regex(createPipelineBodyNameRegExp).optional().describe('The pipeline name')
})


/**
 * Find a pipeline
 * @summary Find a pipeline
 */
export const getPipelinePathIdMin = 36;
export const getPipelinePathIdMax = 36;

export const getPipelineParams = zod.object({
  "id": zod.uuid().min(getPipelinePathIdMin).max(getPipelinePathIdMax).describe('The unique identifier of the resource.')
})

export const getPipelineResponseDataIdMin = 36;
export const getPipelineResponseDataIdMax = 36;export const getPipelineResponseDataCreatedAtMax = 255;export const getPipelineResponseDataUpdatedAtMax = 255;export const getPipelineResponseDataOrganizationIDMin = 36;
export const getPipelineResponseDataOrganizationIDMax = 36;export const getPipelineResponseDataNameMax = 255;
export const getPipelineResponseDataNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\']+$');
export const getPipelineResponseDataDescriptionMax = 1000;
export const getPipelineResponseDataDescriptionRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\':;]+$');


export const getPipelineResponse = zod.object({
  "data": zod.object({
  "id": zod.uuid().min(getPipelineResponseDataIdMin).max(getPipelineResponseDataIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(getPipelineResponseDataCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(getPipelineResponseDataUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "organizationID": zod.uuid().min(getPipelineResponseDataOrganizationIDMin).max(getPipelineResponseDataOrganizationIDMax).describe('The organization identifier'),
  "name": zod.string().min(1).max(getPipelineResponseDataNameMax).regex(getPipelineResponseDataNameRegExp).nullable().describe('The pipeline\'s display name'),
  "description": zod.string().max(getPipelineResponseDataDescriptionMax).regex(getPipelineResponseDataDescriptionRegExp).nullable().describe('Detailed description of the pipeline\'s purpose')
})).describe('Schema for Pipeline entity')
})


/**
 * Update a pipeline
 * @summary Update a pipeline
 */
export const updatePipelinePathIdMin = 36;
export const updatePipelinePathIdMax = 36;

export const updatePipelineParams = zod.object({
  "id": zod.uuid().min(updatePipelinePathIdMin).max(updatePipelinePathIdMax).describe('The unique identifier of the resource.')
})

export const updatePipelineBodyDescriptionMax = 1000;
export const updatePipelineBodyDescriptionRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/]*$');
export const updatePipelineBodyNameMax = 255;
export const updatePipelineBodyNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/]*$');


export const updatePipelineBody = zod.object({
  "description": zod.string().max(updatePipelineBodyDescriptionMax).regex(updatePipelineBodyDescriptionRegExp).optional().describe('The pipeline description'),
  "name": zod.string().max(updatePipelineBodyNameMax).regex(updatePipelineBodyNameRegExp).optional().describe('The pipeline name')
})

export const updatePipelineResponseDataIdMin = 36;
export const updatePipelineResponseDataIdMax = 36;export const updatePipelineResponseDataCreatedAtMax = 255;export const updatePipelineResponseDataUpdatedAtMax = 255;export const updatePipelineResponseDataOrganizationIDMin = 36;
export const updatePipelineResponseDataOrganizationIDMax = 36;export const updatePipelineResponseDataNameMax = 255;
export const updatePipelineResponseDataNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\']+$');
export const updatePipelineResponseDataDescriptionMax = 1000;
export const updatePipelineResponseDataDescriptionRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\':;]+$');


export const updatePipelineResponse = zod.object({
  "data": zod.object({
  "id": zod.uuid().min(updatePipelineResponseDataIdMin).max(updatePipelineResponseDataIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(updatePipelineResponseDataCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(updatePipelineResponseDataUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "organizationID": zod.uuid().min(updatePipelineResponseDataOrganizationIDMin).max(updatePipelineResponseDataOrganizationIDMax).describe('The organization identifier'),
  "name": zod.string().min(1).max(updatePipelineResponseDataNameMax).regex(updatePipelineResponseDataNameRegExp).nullable().describe('The pipeline\'s display name'),
  "description": zod.string().max(updatePipelineResponseDataDescriptionMax).regex(updatePipelineResponseDataDescriptionRegExp).nullable().describe('Detailed description of the pipeline\'s purpose')
})).describe('Schema for Pipeline entity')
})


/**
 * Delete a pipeline
 * @summary Delete a pipeline
 */
export const deletePipelinePathIdMin = 36;
export const deletePipelinePathIdMax = 36;

export const deletePipelineParams = zod.object({
  "id": zod.uuid().min(deletePipelinePathIdMin).max(deletePipelinePathIdMax).describe('The unique identifier of the resource.')
})


/**
 * Retrieve all steps and their dependencies for a pipeline
 * @summary Get all steps for a pipeline
 */
export const getPipelineStepsPathIdMin = 36;
export const getPipelineStepsPathIdMax = 36;

export const getPipelineStepsParams = zod.object({
  "id": zod.uuid().min(getPipelineStepsPathIdMin).max(getPipelineStepsPathIdMax).describe('The unique identifier of the resource.')
})

export const getPipelineStepsResponseDataItemIdMin = 36;
export const getPipelineStepsResponseDataItemIdMax = 36;export const getPipelineStepsResponseDataItemCreatedAtMax = 255;export const getPipelineStepsResponseDataItemUpdatedAtMax = 255;export const getPipelineStepsResponseDataItemPipelineIDMin = 36;
export const getPipelineStepsResponseDataItemPipelineIDMax = 36;export const getPipelineStepsResponseDataItemToolIDMin = 36;
export const getPipelineStepsResponseDataItemToolIDMax = 36;export const getPipelineStepsResponseDataMax = 10000;

export const getPipelineStepsResponse = zod.object({
  "data": zod.array(zod.object({
  "id": zod.uuid().min(getPipelineStepsResponseDataItemIdMin).max(getPipelineStepsResponseDataItemIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(getPipelineStepsResponseDataItemCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(getPipelineStepsResponseDataItemUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "pipelineID": zod.uuid().min(getPipelineStepsResponseDataItemPipelineIDMin).max(getPipelineStepsResponseDataItemPipelineIDMax).describe('The pipeline this step belongs to'),
  "toolID": zod.uuid().min(getPipelineStepsResponseDataItemToolIDMin).max(getPipelineStepsResponseDataItemToolIDMax).describe('The tool used in this step')
})).describe('Schema for PipelineStep entity')).max(getPipelineStepsResponseDataMax)
})


/**
 * Create a step in the pipeline
 * @summary Add a step to a pipeline
 */
export const createPipelineStepPathIdMin = 36;
export const createPipelineStepPathIdMax = 36;

export const createPipelineStepParams = zod.object({
  "id": zod.uuid().min(createPipelineStepPathIdMin).max(createPipelineStepPathIdMax).describe('The unique identifier of the resource.')
})

export const createPipelineStepBodyToolIDMin = 36;
export const createPipelineStepBodyToolIDMax = 36;export const createPipelineStepBodyNameMax = 255;
export const createPipelineStepBodyNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/]*$');
export const createPipelineStepBodyDescriptionMax = 1000;
export const createPipelineStepBodyDescriptionRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/]*$');
export const createPipelineStepBodyPositionMin = 0;
export const createPipelineStepBodyPositionMax = 2147483647;export const createPipelineStepBodyDependenciesItemMin = 36;
export const createPipelineStepBodyDependenciesItemMax = 36;export const createPipelineStepBodyDependenciesMax = 1000;

export const createPipelineStepBody = zod.object({
  "toolID": zod.uuid().min(createPipelineStepBodyToolIDMin).max(createPipelineStepBodyToolIDMax).describe('UUID identifier'),
  "name": zod.string().min(1).max(createPipelineStepBodyNameMax).regex(createPipelineStepBodyNameRegExp).describe('Name of the step'),
  "description": zod.string().max(createPipelineStepBodyDescriptionMax).regex(createPipelineStepBodyDescriptionRegExp).optional().describe('Description of what this step does'),
  "position": zod.number().min(createPipelineStepBodyPositionMin).max(createPipelineStepBodyPositionMax).optional().describe('Position in the pipeline (for ordering)'),
  "dependencies": zod.array(zod.uuid().min(createPipelineStepBodyDependenciesItemMin).max(createPipelineStepBodyDependenciesItemMax).describe('UUID identifier')).max(createPipelineStepBodyDependenciesMax).optional().describe('IDs of steps this step depends on')
})


/**
 * Get the DAG execution plan showing which steps can run in parallel
 * @summary Get execution plan for a pipeline
 */
export const getPipelineExecutionPlanPathIdMin = 36;
export const getPipelineExecutionPlanPathIdMax = 36;

export const getPipelineExecutionPlanParams = zod.object({
  "id": zod.uuid().min(getPipelineExecutionPlanPathIdMin).max(getPipelineExecutionPlanPathIdMax).describe('The unique identifier of the resource.')
})

export const getPipelineExecutionPlanResponseDataPipelineIDMin = 36;
export const getPipelineExecutionPlanResponseDataPipelineIDMax = 36;export const getPipelineExecutionPlanResponseDataLevelsItemLevelMin = 0;
export const getPipelineExecutionPlanResponseDataLevelsItemLevelMax = 2147483647;export const getPipelineExecutionPlanResponseDataLevelsItemStepsItemMin = 36;
export const getPipelineExecutionPlanResponseDataLevelsItemStepsItemMax = 36;export const getPipelineExecutionPlanResponseDataLevelsItemStepsMax = 10000;export const getPipelineExecutionPlanResponseDataLevelsMax = 1000;export const getPipelineExecutionPlanResponseDataTotalStepsMin = 0;
export const getPipelineExecutionPlanResponseDataTotalStepsMax = 2147483647;export const getPipelineExecutionPlanResponseDataEstimatedDurationMin = 0;
export const getPipelineExecutionPlanResponseDataEstimatedDurationMax = 2147483647;

export const getPipelineExecutionPlanResponse = zod.object({
  "data": zod.object({
  "pipelineID": zod.uuid().min(getPipelineExecutionPlanResponseDataPipelineIDMin).max(getPipelineExecutionPlanResponseDataPipelineIDMax).describe('UUID identifier'),
  "levels": zod.array(zod.object({
  "level": zod.number().min(getPipelineExecutionPlanResponseDataLevelsItemLevelMin).max(getPipelineExecutionPlanResponseDataLevelsItemLevelMax).describe('Execution level (0-based)'),
  "steps": zod.array(zod.uuid().min(getPipelineExecutionPlanResponseDataLevelsItemStepsItemMin).max(getPipelineExecutionPlanResponseDataLevelsItemStepsItemMax).describe('Step IDs that can run in parallel at this level')).max(getPipelineExecutionPlanResponseDataLevelsItemStepsMax)
})).max(getPipelineExecutionPlanResponseDataLevelsMax),
  "totalSteps": zod.number().min(getPipelineExecutionPlanResponseDataTotalStepsMin).max(getPipelineExecutionPlanResponseDataTotalStepsMax).describe('Total number of steps in the pipeline'),
  "isValid": zod.boolean().describe('Whether the pipeline DAG is valid (no cycles)'),
  "estimatedDuration": zod.number().min(getPipelineExecutionPlanResponseDataEstimatedDurationMin).max(getPipelineExecutionPlanResponseDataEstimatedDurationMax).optional().describe('Estimated execution time in seconds')
})
})


/**
 * Validate that a pipeline can be executed without issues
 * @summary Validate a pipeline configuration
 */
export const validatePipelineExecutionPlanPathIdMin = 36;
export const validatePipelineExecutionPlanPathIdMax = 36;

export const validatePipelineExecutionPlanParams = zod.object({
  "id": zod.uuid().min(validatePipelineExecutionPlanPathIdMin).max(validatePipelineExecutionPlanPathIdMax).describe('The unique identifier of the resource.')
})

export const validatePipelineExecutionPlanResponseDataIdMin = 36;
export const validatePipelineExecutionPlanResponseDataIdMax = 36;export const validatePipelineExecutionPlanResponseDataCreatedAtMax = 255;export const validatePipelineExecutionPlanResponseDataUpdatedAtMax = 255;export const validatePipelineExecutionPlanResponseDataOrganizationIDMin = 36;
export const validatePipelineExecutionPlanResponseDataOrganizationIDMax = 36;export const validatePipelineExecutionPlanResponseDataNameMax = 255;
export const validatePipelineExecutionPlanResponseDataNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\']+$');
export const validatePipelineExecutionPlanResponseDataDescriptionMax = 1000;
export const validatePipelineExecutionPlanResponseDataDescriptionRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\':;]+$');


export const validatePipelineExecutionPlanResponse = zod.object({
  "data": zod.object({
  "id": zod.uuid().min(validatePipelineExecutionPlanResponseDataIdMin).max(validatePipelineExecutionPlanResponseDataIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(validatePipelineExecutionPlanResponseDataCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(validatePipelineExecutionPlanResponseDataUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "organizationID": zod.uuid().min(validatePipelineExecutionPlanResponseDataOrganizationIDMin).max(validatePipelineExecutionPlanResponseDataOrganizationIDMax).describe('The organization identifier'),
  "name": zod.string().min(1).max(validatePipelineExecutionPlanResponseDataNameMax).regex(validatePipelineExecutionPlanResponseDataNameRegExp).nullable().describe('The pipeline\'s display name'),
  "description": zod.string().max(validatePipelineExecutionPlanResponseDataDescriptionMax).regex(validatePipelineExecutionPlanResponseDataDescriptionRegExp).nullable().describe('Detailed description of the pipeline\'s purpose')
})).describe('Schema for Pipeline entity')
})


/**
 * List runs
 * @summary List runs
 */
export const listRunsQueryFilterFieldMax = 255;
export const listRunsQueryFilterFieldRegExp = new RegExp('^[a-zA-Z_][a-zA-Z0-9_]*$');
export const listRunsQueryFilterValueMaxOne = 1000;
export const listRunsQueryFilterValueRegExpOne = new RegExp('^[\\w\\s\\-.,!?()@#+/\':;]+$');
export const listRunsQueryFilterValueMinTwo = -9223372036854776000;
export const listRunsQueryFilterValueMaxTwo = 9223372036854776000;export const listRunsQueryPageLimitDefault = 10;
export const listRunsQueryPageLimitMax = 100;export const listRunsQueryPageOffsetDefault = 0;
export const listRunsQueryPageOffsetMin = 0;
export const listRunsQueryPageOffsetMax = 9007199254740991;export const listRunsQuerySortMax = 10;

export const listRunsQueryParams = zod.object({
  "filter": zod.object({
  "type": zod.enum(['and', 'or', 'eq', 'ne', 'gt', 'gte', 'lt', 'lte', 'contains', 'startsWith', 'endsWith']).describe('The type of filter operation'),
  "field": zod.string().min(1).max(listRunsQueryFilterFieldMax).regex(listRunsQueryFilterFieldRegExp).optional().describe('The field to filter on (for leaf conditions)'),
  "value": zod.union([zod.string().max(listRunsQueryFilterValueMaxOne).regex(listRunsQueryFilterValueRegExpOne),zod.number().min(listRunsQueryFilterValueMinTwo).max(listRunsQueryFilterValueMaxTwo),zod.boolean()]).optional().describe('The value to compare against (for leaf conditions)')
}).optional().describe('Filter by field values'),
  "page": zod.object({
  "limit": zod.number().min(1).max(listRunsQueryPageLimitMax).default(listRunsQueryPageLimitDefault).describe('Maximum number of items to return'),
  "offset": zod.number().min(listRunsQueryPageOffsetMin).max(listRunsQueryPageOffsetMax).optional().describe('Number of items to skip before starting to collect the result set')
}).optional().describe('The page parameter'),
  "sort": zod.array(zod.object({
  "field": zod.enum(['createdAt', 'id', 'updatedAt', 'completedAt', 'error', 'organizationID', 'pipelineID', 'progress', 'startedAt', 'status', 'toolID']),
  "order": zod.enum(['asc', 'desc'])
})).max(listRunsQuerySortMax).optional().describe('The sort parameter')
})

export const listRunsResponseDataItemIdMin = 36;
export const listRunsResponseDataItemIdMax = 36;export const listRunsResponseDataItemCreatedAtMax = 255;export const listRunsResponseDataItemUpdatedAtMax = 255;export const listRunsResponseDataItemCompletedAtMax = 255;export const listRunsResponseDataItemErrorMax = 255;
export const listRunsResponseDataItemErrorRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\':;]+$');
export const listRunsResponseDataItemOrganizationIDMin = 36;
export const listRunsResponseDataItemOrganizationIDMax = 36;export const listRunsResponseDataItemPipelineIDMin = 36;
export const listRunsResponseDataItemPipelineIDMax = 36;export const listRunsResponseDataItemProgressDefault = 0;
export const listRunsResponseDataItemProgressMin = 0;
export const listRunsResponseDataItemProgressMax = 100;export const listRunsResponseDataItemStartedAtMax = 255;export const listRunsResponseDataItemStatusDefault = "QUEUED";export const listRunsResponseDataItemToolIDMin = 36;
export const listRunsResponseDataItemToolIDMax = 36;export const listRunsResponseDataMax = 10000;export const listRunsResponseMetaTotalMin = 0;
export const listRunsResponseMetaTotalMax = 2147483647;

export const listRunsResponse = zod.object({
  "data": zod.array(zod.object({
  "id": zod.uuid().min(listRunsResponseDataItemIdMin).max(listRunsResponseDataItemIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(listRunsResponseDataItemCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(listRunsResponseDataItemUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "completedAt": zod.iso.datetime({}).min(1).max(listRunsResponseDataItemCompletedAtMax).nullable().describe('The timestamp when the run completed'),
  "error": zod.string().min(1).max(listRunsResponseDataItemErrorMax).regex(listRunsResponseDataItemErrorRegExp).nullable().describe('The error message'),
  "organizationID": zod.uuid().min(listRunsResponseDataItemOrganizationIDMin).max(listRunsResponseDataItemOrganizationIDMax).describe('The organization this run belongs to'),
  "pipelineID": zod.uuid().min(listRunsResponseDataItemPipelineIDMin).max(listRunsResponseDataItemPipelineIDMax).describe('The pipeline this run is executing'),
  "progress": zod.number().min(listRunsResponseDataItemProgressMin).max(listRunsResponseDataItemProgressMax).describe('The percent progress of the run (0-100)'),
  "startedAt": zod.iso.datetime({}).min(1).max(listRunsResponseDataItemStartedAtMax).nullable().describe('The timestamp when the run started'),
  "status": zod.enum(['COMPLETED', 'FAILED', 'PROCESSING', 'QUEUED']),
  "toolID": zod.uuid().min(listRunsResponseDataItemToolIDMin).max(listRunsResponseDataItemToolIDMax).describe('The tool being used in this run')
})).describe('Schema for Run entity')).max(listRunsResponseDataMax),
  "meta": zod.object({
  "total": zod.number().min(listRunsResponseMetaTotalMin).max(listRunsResponseMetaTotalMax).describe('Total number of items in the collection')
}).describe('Pagination metadata')
})


/**
 * Create a run
 * @summary Create a run
 */
export const createRunBodyPipelineIDMin = 36;
export const createRunBodyPipelineIDMax = 36;

export const createRunBody = zod.object({
  "pipelineID": zod.uuid().min(createRunBodyPipelineIDMin).max(createRunBodyPipelineIDMax).describe('UUID identifier')
})


/**
 * Find a run
 * @summary Find a run
 */
export const getRunPathIdMin = 36;
export const getRunPathIdMax = 36;

export const getRunParams = zod.object({
  "id": zod.uuid().min(getRunPathIdMin).max(getRunPathIdMax).describe('The unique identifier of the resource.')
})

export const getRunResponseDataIdMin = 36;
export const getRunResponseDataIdMax = 36;export const getRunResponseDataCreatedAtMax = 255;export const getRunResponseDataUpdatedAtMax = 255;export const getRunResponseDataCompletedAtMax = 255;export const getRunResponseDataErrorMax = 255;
export const getRunResponseDataErrorRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\':;]+$');
export const getRunResponseDataOrganizationIDMin = 36;
export const getRunResponseDataOrganizationIDMax = 36;export const getRunResponseDataPipelineIDMin = 36;
export const getRunResponseDataPipelineIDMax = 36;export const getRunResponseDataProgressDefault = 0;
export const getRunResponseDataProgressMin = 0;
export const getRunResponseDataProgressMax = 100;export const getRunResponseDataStartedAtMax = 255;export const getRunResponseDataStatusDefault = "QUEUED";export const getRunResponseDataToolIDMin = 36;
export const getRunResponseDataToolIDMax = 36;

export const getRunResponse = zod.object({
  "data": zod.object({
  "id": zod.uuid().min(getRunResponseDataIdMin).max(getRunResponseDataIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(getRunResponseDataCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(getRunResponseDataUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "completedAt": zod.iso.datetime({}).min(1).max(getRunResponseDataCompletedAtMax).nullable().describe('The timestamp when the run completed'),
  "error": zod.string().min(1).max(getRunResponseDataErrorMax).regex(getRunResponseDataErrorRegExp).nullable().describe('The error message'),
  "organizationID": zod.uuid().min(getRunResponseDataOrganizationIDMin).max(getRunResponseDataOrganizationIDMax).describe('The organization this run belongs to'),
  "pipelineID": zod.uuid().min(getRunResponseDataPipelineIDMin).max(getRunResponseDataPipelineIDMax).describe('The pipeline this run is executing'),
  "progress": zod.number().min(getRunResponseDataProgressMin).max(getRunResponseDataProgressMax).describe('The percent progress of the run (0-100)'),
  "startedAt": zod.iso.datetime({}).min(1).max(getRunResponseDataStartedAtMax).nullable().describe('The timestamp when the run started'),
  "status": zod.enum(['COMPLETED', 'FAILED', 'PROCESSING', 'QUEUED']),
  "toolID": zod.uuid().min(getRunResponseDataToolIDMin).max(getRunResponseDataToolIDMax).describe('The tool being used in this run')
})).describe('Schema for Run entity')
})


/**
 * Update a run
 * @summary Update a run
 */
export const updateRunPathIdMin = 36;
export const updateRunPathIdMax = 36;

export const updateRunParams = zod.object({
  "id": zod.uuid().min(updateRunPathIdMin).max(updateRunPathIdMax).describe('The unique identifier of the resource.')
})

export const updateRunBodyPipelineIDMin = 36;
export const updateRunBodyPipelineIDMax = 36;

export const updateRunBody = zod.object({
  "pipelineID": zod.uuid().min(updateRunBodyPipelineIDMin).max(updateRunBodyPipelineIDMax).optional().describe('UUID identifier')
})

export const updateRunResponseDataIdMin = 36;
export const updateRunResponseDataIdMax = 36;export const updateRunResponseDataCreatedAtMax = 255;export const updateRunResponseDataUpdatedAtMax = 255;export const updateRunResponseDataCompletedAtMax = 255;export const updateRunResponseDataErrorMax = 255;
export const updateRunResponseDataErrorRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\':;]+$');
export const updateRunResponseDataOrganizationIDMin = 36;
export const updateRunResponseDataOrganizationIDMax = 36;export const updateRunResponseDataPipelineIDMin = 36;
export const updateRunResponseDataPipelineIDMax = 36;export const updateRunResponseDataProgressDefault = 0;
export const updateRunResponseDataProgressMin = 0;
export const updateRunResponseDataProgressMax = 100;export const updateRunResponseDataStartedAtMax = 255;export const updateRunResponseDataStatusDefault = "QUEUED";export const updateRunResponseDataToolIDMin = 36;
export const updateRunResponseDataToolIDMax = 36;

export const updateRunResponse = zod.object({
  "data": zod.object({
  "id": zod.uuid().min(updateRunResponseDataIdMin).max(updateRunResponseDataIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(updateRunResponseDataCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(updateRunResponseDataUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "completedAt": zod.iso.datetime({}).min(1).max(updateRunResponseDataCompletedAtMax).nullable().describe('The timestamp when the run completed'),
  "error": zod.string().min(1).max(updateRunResponseDataErrorMax).regex(updateRunResponseDataErrorRegExp).nullable().describe('The error message'),
  "organizationID": zod.uuid().min(updateRunResponseDataOrganizationIDMin).max(updateRunResponseDataOrganizationIDMax).describe('The organization this run belongs to'),
  "pipelineID": zod.uuid().min(updateRunResponseDataPipelineIDMin).max(updateRunResponseDataPipelineIDMax).describe('The pipeline this run is executing'),
  "progress": zod.number().min(updateRunResponseDataProgressMin).max(updateRunResponseDataProgressMax).describe('The percent progress of the run (0-100)'),
  "startedAt": zod.iso.datetime({}).min(1).max(updateRunResponseDataStartedAtMax).nullable().describe('The timestamp when the run started'),
  "status": zod.enum(['COMPLETED', 'FAILED', 'PROCESSING', 'QUEUED']),
  "toolID": zod.uuid().min(updateRunResponseDataToolIDMin).max(updateRunResponseDataToolIDMax).describe('The tool being used in this run')
})).describe('Schema for Run entity')
})


/**
 * Delete a run
 * @summary Delete a run
 */
export const deleteRunPathIdMin = 36;
export const deleteRunPathIdMax = 36;

export const deleteRunParams = zod.object({
  "id": zod.uuid().min(deleteRunPathIdMin).max(deleteRunPathIdMax).describe('The unique identifier of the resource.')
})


/**
 * List tools
 * @summary List tools
 */
export const listToolsQueryFilterFieldMax = 255;
export const listToolsQueryFilterFieldRegExp = new RegExp('^[a-zA-Z_][a-zA-Z0-9_]*$');
export const listToolsQueryFilterValueMaxOne = 1000;
export const listToolsQueryFilterValueRegExpOne = new RegExp('^[\\w\\s\\-.,!?()@#+/\':;]+$');
export const listToolsQueryFilterValueMinTwo = -9223372036854776000;
export const listToolsQueryFilterValueMaxTwo = 9223372036854776000;export const listToolsQueryPageLimitDefault = 10;
export const listToolsQueryPageLimitMax = 100;export const listToolsQueryPageOffsetDefault = 0;
export const listToolsQueryPageOffsetMin = 0;
export const listToolsQueryPageOffsetMax = 9007199254740991;export const listToolsQuerySortMax = 10;

export const listToolsQueryParams = zod.object({
  "filter": zod.object({
  "type": zod.enum(['and', 'or', 'eq', 'ne', 'gt', 'gte', 'lt', 'lte', 'contains', 'startsWith', 'endsWith']).describe('The type of filter operation'),
  "field": zod.string().min(1).max(listToolsQueryFilterFieldMax).regex(listToolsQueryFilterFieldRegExp).optional().describe('The field to filter on (for leaf conditions)'),
  "value": zod.union([zod.string().max(listToolsQueryFilterValueMaxOne).regex(listToolsQueryFilterValueRegExpOne),zod.number().min(listToolsQueryFilterValueMinTwo).max(listToolsQueryFilterValueMaxTwo),zod.boolean()]).optional().describe('The value to compare against (for leaf conditions)')
}).optional().describe('Filter by field values'),
  "page": zod.object({
  "limit": zod.number().min(1).max(listToolsQueryPageLimitMax).default(listToolsQueryPageLimitDefault).describe('Maximum number of items to return'),
  "offset": zod.number().min(listToolsQueryPageOffsetMin).max(listToolsQueryPageOffsetMax).optional().describe('Number of items to skip before starting to collect the result set')
}).optional().describe('The page parameter'),
  "sort": zod.array(zod.object({
  "field": zod.enum(['createdAt', 'id', 'updatedAt', 'description', 'inputMimeType', 'name', 'organizationID', 'outputMimeType']),
  "order": zod.enum(['asc', 'desc'])
})).max(listToolsQuerySortMax).optional().describe('The sort parameter')
})

export const listToolsResponseDataItemIdMin = 36;
export const listToolsResponseDataItemIdMax = 36;export const listToolsResponseDataItemCreatedAtMax = 255;export const listToolsResponseDataItemUpdatedAtMax = 255;export const listToolsResponseDataItemDescriptionMax = 1000;
export const listToolsResponseDataItemDescriptionRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\':;]+$');
export const listToolsResponseDataItemInputMimeTypeDefault = "application/octet-stream";
export const listToolsResponseDataItemInputMimeTypeMax = 255;
export const listToolsResponseDataItemInputMimeTypeRegExp = new RegExp('^[a-z]+/[a-z0-9\\+\\-\\.]+$');
export const listToolsResponseDataItemNameMax = 255;
export const listToolsResponseDataItemNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\']+$');
export const listToolsResponseDataItemOrganizationIDMin = 36;
export const listToolsResponseDataItemOrganizationIDMax = 36;export const listToolsResponseDataItemOutputMimeTypeDefault = "application/octet-stream";
export const listToolsResponseDataItemOutputMimeTypeMax = 255;
export const listToolsResponseDataItemOutputMimeTypeRegExp = new RegExp('^[a-z]+/[a-z0-9\\+\\-\\.]+$');
export const listToolsResponseDataMax = 10000;export const listToolsResponseMetaTotalMin = 0;
export const listToolsResponseMetaTotalMax = 2147483647;

export const listToolsResponse = zod.object({
  "data": zod.array(zod.object({
  "id": zod.uuid().min(listToolsResponseDataItemIdMin).max(listToolsResponseDataItemIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(listToolsResponseDataItemCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(listToolsResponseDataItemUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "description": zod.string().min(1).max(listToolsResponseDataItemDescriptionMax).regex(listToolsResponseDataItemDescriptionRegExp).describe('The tool description'),
  "inputMimeType": zod.string().min(1).max(listToolsResponseDataItemInputMimeTypeMax).regex(listToolsResponseDataItemInputMimeTypeRegExp).describe('The MIME type of the input for the tool, e.g. text/plain'),
  "name": zod.string().min(1).max(listToolsResponseDataItemNameMax).regex(listToolsResponseDataItemNameRegExp).describe('The name of the tool'),
  "organizationID": zod.uuid().min(listToolsResponseDataItemOrganizationIDMin).max(listToolsResponseDataItemOrganizationIDMax).describe('The organization that owns this tool'),
  "outputMimeType": zod.string().min(1).max(listToolsResponseDataItemOutputMimeTypeMax).regex(listToolsResponseDataItemOutputMimeTypeRegExp).describe('The MIME type of the output for the tool, e.g. text/plain')
})).describe('Schema for Tool entity')).max(listToolsResponseDataMax),
  "meta": zod.object({
  "total": zod.number().min(listToolsResponseMetaTotalMin).max(listToolsResponseMetaTotalMax).describe('Total number of items in the collection')
}).describe('Pagination metadata')
})


/**
 * Create a tool
 * @summary Create a tool
 */
export const createToolBodyDescriptionMax = 1000;
export const createToolBodyDescriptionRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/]*$');
export const createToolBodyNameMax = 255;
export const createToolBodyNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/]*$');


export const createToolBody = zod.object({
  "description": zod.string().min(1).max(createToolBodyDescriptionMax).regex(createToolBodyDescriptionRegExp).describe('The tool description'),
  "name": zod.string().min(1).max(createToolBodyNameMax).regex(createToolBodyNameRegExp).describe('The name of the tool')
})


/**
 * Find a tool
 * @summary Find a tool
 */
export const getToolPathIdMin = 36;
export const getToolPathIdMax = 36;

export const getToolParams = zod.object({
  "id": zod.uuid().min(getToolPathIdMin).max(getToolPathIdMax).describe('The unique identifier of the resource.')
})

export const getToolResponseDataIdMin = 36;
export const getToolResponseDataIdMax = 36;export const getToolResponseDataCreatedAtMax = 255;export const getToolResponseDataUpdatedAtMax = 255;export const getToolResponseDataDescriptionMax = 1000;
export const getToolResponseDataDescriptionRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\':;]+$');
export const getToolResponseDataInputMimeTypeDefault = "application/octet-stream";
export const getToolResponseDataInputMimeTypeMax = 255;
export const getToolResponseDataInputMimeTypeRegExp = new RegExp('^[a-z]+/[a-z0-9\\+\\-\\.]+$');
export const getToolResponseDataNameMax = 255;
export const getToolResponseDataNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\']+$');
export const getToolResponseDataOrganizationIDMin = 36;
export const getToolResponseDataOrganizationIDMax = 36;export const getToolResponseDataOutputMimeTypeDefault = "application/octet-stream";
export const getToolResponseDataOutputMimeTypeMax = 255;
export const getToolResponseDataOutputMimeTypeRegExp = new RegExp('^[a-z]+/[a-z0-9\\+\\-\\.]+$');


export const getToolResponse = zod.object({
  "data": zod.object({
  "id": zod.uuid().min(getToolResponseDataIdMin).max(getToolResponseDataIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(getToolResponseDataCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(getToolResponseDataUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "description": zod.string().min(1).max(getToolResponseDataDescriptionMax).regex(getToolResponseDataDescriptionRegExp).describe('The tool description'),
  "inputMimeType": zod.string().min(1).max(getToolResponseDataInputMimeTypeMax).regex(getToolResponseDataInputMimeTypeRegExp).describe('The MIME type of the input for the tool, e.g. text/plain'),
  "name": zod.string().min(1).max(getToolResponseDataNameMax).regex(getToolResponseDataNameRegExp).describe('The name of the tool'),
  "organizationID": zod.uuid().min(getToolResponseDataOrganizationIDMin).max(getToolResponseDataOrganizationIDMax).describe('The organization that owns this tool'),
  "outputMimeType": zod.string().min(1).max(getToolResponseDataOutputMimeTypeMax).regex(getToolResponseDataOutputMimeTypeRegExp).describe('The MIME type of the output for the tool, e.g. text/plain')
})).describe('Schema for Tool entity')
})


/**
 * Update a tool
 * @summary Update a tool
 */
export const updateToolPathIdMin = 36;
export const updateToolPathIdMax = 36;

export const updateToolParams = zod.object({
  "id": zod.uuid().min(updateToolPathIdMin).max(updateToolPathIdMax).describe('The unique identifier of the resource.')
})

export const updateToolBodyDescriptionMax = 1000;
export const updateToolBodyDescriptionRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/]*$');
export const updateToolBodyNameMax = 255;
export const updateToolBodyNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/]*$');


export const updateToolBody = zod.object({
  "description": zod.string().min(1).max(updateToolBodyDescriptionMax).regex(updateToolBodyDescriptionRegExp).optional().describe('The tool description'),
  "name": zod.string().min(1).max(updateToolBodyNameMax).regex(updateToolBodyNameRegExp).optional().describe('The name of the tool')
})

export const updateToolResponseDataIdMin = 36;
export const updateToolResponseDataIdMax = 36;export const updateToolResponseDataCreatedAtMax = 255;export const updateToolResponseDataUpdatedAtMax = 255;export const updateToolResponseDataDescriptionMax = 1000;
export const updateToolResponseDataDescriptionRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\':;]+$');
export const updateToolResponseDataInputMimeTypeDefault = "application/octet-stream";
export const updateToolResponseDataInputMimeTypeMax = 255;
export const updateToolResponseDataInputMimeTypeRegExp = new RegExp('^[a-z]+/[a-z0-9\\+\\-\\.]+$');
export const updateToolResponseDataNameMax = 255;
export const updateToolResponseDataNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\']+$');
export const updateToolResponseDataOrganizationIDMin = 36;
export const updateToolResponseDataOrganizationIDMax = 36;export const updateToolResponseDataOutputMimeTypeDefault = "application/octet-stream";
export const updateToolResponseDataOutputMimeTypeMax = 255;
export const updateToolResponseDataOutputMimeTypeRegExp = new RegExp('^[a-z]+/[a-z0-9\\+\\-\\.]+$');


export const updateToolResponse = zod.object({
  "data": zod.object({
  "id": zod.uuid().min(updateToolResponseDataIdMin).max(updateToolResponseDataIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(updateToolResponseDataCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(updateToolResponseDataUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "description": zod.string().min(1).max(updateToolResponseDataDescriptionMax).regex(updateToolResponseDataDescriptionRegExp).describe('The tool description'),
  "inputMimeType": zod.string().min(1).max(updateToolResponseDataInputMimeTypeMax).regex(updateToolResponseDataInputMimeTypeRegExp).describe('The MIME type of the input for the tool, e.g. text/plain'),
  "name": zod.string().min(1).max(updateToolResponseDataNameMax).regex(updateToolResponseDataNameRegExp).describe('The name of the tool'),
  "organizationID": zod.uuid().min(updateToolResponseDataOrganizationIDMin).max(updateToolResponseDataOrganizationIDMax).describe('The organization that owns this tool'),
  "outputMimeType": zod.string().min(1).max(updateToolResponseDataOutputMimeTypeMax).regex(updateToolResponseDataOutputMimeTypeRegExp).describe('The MIME type of the output for the tool, e.g. text/plain')
})).describe('Schema for Tool entity')
})


/**
 * Delete a tool
 * @summary Delete a tool
 */
export const deleteToolPathIdMin = 36;
export const deleteToolPathIdMax = 36;

export const deleteToolParams = zod.object({
  "id": zod.uuid().min(deleteToolPathIdMin).max(deleteToolPathIdMax).describe('The unique identifier of the resource.')
})


/**
 * List artifacts
 * @summary List artifacts
 */
export const listArtifactsQueryFilterFieldMax = 255;
export const listArtifactsQueryFilterFieldRegExp = new RegExp('^[a-zA-Z_][a-zA-Z0-9_]*$');
export const listArtifactsQueryFilterValueMaxOne = 1000;
export const listArtifactsQueryFilterValueRegExpOne = new RegExp('^[\\w\\s\\-.,!?()@#+/\':;]+$');
export const listArtifactsQueryFilterValueMinTwo = -9223372036854776000;
export const listArtifactsQueryFilterValueMaxTwo = 9223372036854776000;export const listArtifactsQueryPageLimitDefault = 10;
export const listArtifactsQueryPageLimitMax = 100;export const listArtifactsQueryPageOffsetDefault = 0;
export const listArtifactsQueryPageOffsetMin = 0;
export const listArtifactsQueryPageOffsetMax = 9007199254740991;export const listArtifactsQuerySortMax = 10;

export const listArtifactsQueryParams = zod.object({
  "filter": zod.object({
  "type": zod.enum(['and', 'or', 'eq', 'ne', 'gt', 'gte', 'lt', 'lte', 'contains', 'startsWith', 'endsWith']).describe('The type of filter operation'),
  "field": zod.string().min(1).max(listArtifactsQueryFilterFieldMax).regex(listArtifactsQueryFilterFieldRegExp).optional().describe('The field to filter on (for leaf conditions)'),
  "value": zod.union([zod.string().max(listArtifactsQueryFilterValueMaxOne).regex(listArtifactsQueryFilterValueRegExpOne),zod.number().min(listArtifactsQueryFilterValueMinTwo).max(listArtifactsQueryFilterValueMaxTwo),zod.boolean()]).optional().describe('The value to compare against (for leaf conditions)')
}).optional().describe('Filter by field values'),
  "page": zod.object({
  "limit": zod.number().min(1).max(listArtifactsQueryPageLimitMax).default(listArtifactsQueryPageLimitDefault).describe('Maximum number of items to return'),
  "offset": zod.number().min(listArtifactsQueryPageOffsetMin).max(listArtifactsQueryPageOffsetMax).optional().describe('Number of items to skip before starting to collect the result set')
}).optional().describe('The page parameter'),
  "sort": zod.array(zod.object({
  "field": zod.enum(['createdAt', 'id', 'updatedAt', 'credits', 'description', 'mimeType', 'name', 'organizationID', 'previewImage', 'producerID', 'text', 'url']),
  "order": zod.enum(['asc', 'desc'])
})).max(listArtifactsQuerySortMax).optional().describe('The sort parameter')
})

export const listArtifactsResponseDataItemIdMin = 36;
export const listArtifactsResponseDataItemIdMax = 36;export const listArtifactsResponseDataItemCreatedAtMax = 255;export const listArtifactsResponseDataItemUpdatedAtMax = 255;export const listArtifactsResponseDataItemCreditsDefault = 0;
export const listArtifactsResponseDataItemCreditsMin = 0;
export const listArtifactsResponseDataItemCreditsMax = 2147483647;export const listArtifactsResponseDataItemDescriptionMax = 1000;
export const listArtifactsResponseDataItemDescriptionRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\':;]+$');
export const listArtifactsResponseDataItemMimeTypeDefault = "application/octet-stream";
export const listArtifactsResponseDataItemMimeTypeMax = 255;
export const listArtifactsResponseDataItemMimeTypeRegExp = new RegExp('^[a-z]+/[a-z0-9\\+\\-\\.]+$');
export const listArtifactsResponseDataItemNameMax = 255;
export const listArtifactsResponseDataItemNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\']+$');
export const listArtifactsResponseDataItemOrganizationIDMin = 36;
export const listArtifactsResponseDataItemOrganizationIDMax = 36;export const listArtifactsResponseDataItemPreviewImageMax = 2048;export const listArtifactsResponseDataItemProducerIDMin = 36;
export const listArtifactsResponseDataItemProducerIDMax = 36;export const listArtifactsResponseDataItemTextMax = 255;
export const listArtifactsResponseDataItemTextRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\':;]+$');
export const listArtifactsResponseDataItemUrlMax = 2048;export const listArtifactsResponseDataMax = 10000;export const listArtifactsResponseMetaTotalMin = 0;
export const listArtifactsResponseMetaTotalMax = 2147483647;

export const listArtifactsResponse = zod.object({
  "data": zod.array(zod.object({
  "id": zod.uuid().min(listArtifactsResponseDataItemIdMin).max(listArtifactsResponseDataItemIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(listArtifactsResponseDataItemCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(listArtifactsResponseDataItemUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "credits": zod.number().min(listArtifactsResponseDataItemCreditsMin).max(listArtifactsResponseDataItemCreditsMax).describe('The number of credits required to access this artifact. This is used for metering and billing purposes.'),
  "description": zod.string().min(1).max(listArtifactsResponseDataItemDescriptionMax).regex(listArtifactsResponseDataItemDescriptionRegExp).nullable().describe('The artifact\'s description'),
  "mimeType": zod.string().min(1).max(listArtifactsResponseDataItemMimeTypeMax).regex(listArtifactsResponseDataItemMimeTypeRegExp).describe('The MIME type of the artifact, e.g. image/png'),
  "name": zod.string().min(1).max(listArtifactsResponseDataItemNameMax).regex(listArtifactsResponseDataItemNameRegExp).nullable().describe('The name of the artifact, used for display purposes'),
  "organizationID": zod.uuid().min(listArtifactsResponseDataItemOrganizationIDMin).max(listArtifactsResponseDataItemOrganizationIDMax).describe('The organization that owns this artifact'),
  "previewImage": zod.url().min(1).max(listArtifactsResponseDataItemPreviewImageMax).nullable().describe('The URL of the preview image for this artifact. This is used for displaying a thumbnail in the UI.'),
  "producerID": zod.uuid().min(listArtifactsResponseDataItemProducerIDMin).max(listArtifactsResponseDataItemProducerIDMax).nullable().describe('The ID of the entity that produced this artifact'),
  "text": zod.string().min(1).max(listArtifactsResponseDataItemTextMax).regex(listArtifactsResponseDataItemTextRegExp).nullable().describe('The artifact text'),
  "url": zod.url().min(1).max(listArtifactsResponseDataItemUrlMax).nullable().describe('The URL of the artifact if it\'s stored externally')
})).describe('Schema for Artifact entity')).max(listArtifactsResponseDataMax),
  "meta": zod.object({
  "total": zod.number().min(listArtifactsResponseMetaTotalMin).max(listArtifactsResponseMetaTotalMax).describe('Total number of items in the collection')
}).describe('Pagination metadata')
})


/**
 * Create a artifact
 * @summary Create a artifact
 */
export const createArtifactBodyNameMax = 255;
export const createArtifactBodyNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/]*$');
export const createArtifactBodyTextMax = 1000;
export const createArtifactBodyTextRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/]*$');


export const createArtifactBody = zod.object({
  "name": zod.string().min(1).max(createArtifactBodyNameMax).regex(createArtifactBodyNameRegExp).optional().describe('The name of the artifact'),
  "text": zod.string().min(1).max(createArtifactBodyTextMax).regex(createArtifactBodyTextRegExp).describe('The artifact text')
})


/**
 * Find an artifact
 * @summary Find an artifact
 */
export const getArtifactPathIdMin = 36;
export const getArtifactPathIdMax = 36;

export const getArtifactParams = zod.object({
  "id": zod.uuid().min(getArtifactPathIdMin).max(getArtifactPathIdMax).describe('The unique identifier of the resource.')
})

export const getArtifactResponseDataIdMin = 36;
export const getArtifactResponseDataIdMax = 36;export const getArtifactResponseDataCreatedAtMax = 255;export const getArtifactResponseDataUpdatedAtMax = 255;export const getArtifactResponseDataCreditsDefault = 0;
export const getArtifactResponseDataCreditsMin = 0;
export const getArtifactResponseDataCreditsMax = 2147483647;export const getArtifactResponseDataDescriptionMax = 1000;
export const getArtifactResponseDataDescriptionRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\':;]+$');
export const getArtifactResponseDataMimeTypeDefault = "application/octet-stream";
export const getArtifactResponseDataMimeTypeMax = 255;
export const getArtifactResponseDataMimeTypeRegExp = new RegExp('^[a-z]+/[a-z0-9\\+\\-\\.]+$');
export const getArtifactResponseDataNameMax = 255;
export const getArtifactResponseDataNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\']+$');
export const getArtifactResponseDataOrganizationIDMin = 36;
export const getArtifactResponseDataOrganizationIDMax = 36;export const getArtifactResponseDataPreviewImageMax = 2048;export const getArtifactResponseDataProducerIDMin = 36;
export const getArtifactResponseDataProducerIDMax = 36;export const getArtifactResponseDataTextMax = 255;
export const getArtifactResponseDataTextRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\':;]+$');
export const getArtifactResponseDataUrlMax = 2048;

export const getArtifactResponse = zod.object({
  "data": zod.object({
  "id": zod.uuid().min(getArtifactResponseDataIdMin).max(getArtifactResponseDataIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(getArtifactResponseDataCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(getArtifactResponseDataUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "credits": zod.number().min(getArtifactResponseDataCreditsMin).max(getArtifactResponseDataCreditsMax).describe('The number of credits required to access this artifact. This is used for metering and billing purposes.'),
  "description": zod.string().min(1).max(getArtifactResponseDataDescriptionMax).regex(getArtifactResponseDataDescriptionRegExp).nullable().describe('The artifact\'s description'),
  "mimeType": zod.string().min(1).max(getArtifactResponseDataMimeTypeMax).regex(getArtifactResponseDataMimeTypeRegExp).describe('The MIME type of the artifact, e.g. image/png'),
  "name": zod.string().min(1).max(getArtifactResponseDataNameMax).regex(getArtifactResponseDataNameRegExp).nullable().describe('The name of the artifact, used for display purposes'),
  "organizationID": zod.uuid().min(getArtifactResponseDataOrganizationIDMin).max(getArtifactResponseDataOrganizationIDMax).describe('The organization that owns this artifact'),
  "previewImage": zod.url().min(1).max(getArtifactResponseDataPreviewImageMax).nullable().describe('The URL of the preview image for this artifact. This is used for displaying a thumbnail in the UI.'),
  "producerID": zod.uuid().min(getArtifactResponseDataProducerIDMin).max(getArtifactResponseDataProducerIDMax).nullable().describe('The ID of the entity that produced this artifact'),
  "text": zod.string().min(1).max(getArtifactResponseDataTextMax).regex(getArtifactResponseDataTextRegExp).nullable().describe('The artifact text'),
  "url": zod.url().min(1).max(getArtifactResponseDataUrlMax).nullable().describe('The URL of the artifact if it\'s stored externally')
})).describe('Schema for Artifact entity')
})


/**
 * Update an artifact
 * @summary Update an artifact
 */
export const updateArtifactPathIdMin = 36;
export const updateArtifactPathIdMax = 36;

export const updateArtifactParams = zod.object({
  "id": zod.uuid().min(updateArtifactPathIdMin).max(updateArtifactPathIdMax).describe('The unique identifier of the resource.')
})

export const updateArtifactBodyNameMax = 255;
export const updateArtifactBodyNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/]*$');
export const updateArtifactBodyTextMax = 1000;
export const updateArtifactBodyTextRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/]*$');
export const updateArtifactBodyUrlMax = 2048;

export const updateArtifactBody = zod.object({
  "name": zod.string().min(1).max(updateArtifactBodyNameMax).regex(updateArtifactBodyNameRegExp).optional().describe('The name of the artifact'),
  "text": zod.string().max(updateArtifactBodyTextMax).regex(updateArtifactBodyTextRegExp).optional().describe('The artifact text'),
  "url": zod.url().max(updateArtifactBodyUrlMax).optional().describe('The artifact URL')
})

export const updateArtifactResponseDataIdMin = 36;
export const updateArtifactResponseDataIdMax = 36;export const updateArtifactResponseDataCreatedAtMax = 255;export const updateArtifactResponseDataUpdatedAtMax = 255;export const updateArtifactResponseDataCreditsDefault = 0;
export const updateArtifactResponseDataCreditsMin = 0;
export const updateArtifactResponseDataCreditsMax = 2147483647;export const updateArtifactResponseDataDescriptionMax = 1000;
export const updateArtifactResponseDataDescriptionRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\':;]+$');
export const updateArtifactResponseDataMimeTypeDefault = "application/octet-stream";
export const updateArtifactResponseDataMimeTypeMax = 255;
export const updateArtifactResponseDataMimeTypeRegExp = new RegExp('^[a-z]+/[a-z0-9\\+\\-\\.]+$');
export const updateArtifactResponseDataNameMax = 255;
export const updateArtifactResponseDataNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\']+$');
export const updateArtifactResponseDataOrganizationIDMin = 36;
export const updateArtifactResponseDataOrganizationIDMax = 36;export const updateArtifactResponseDataPreviewImageMax = 2048;export const updateArtifactResponseDataProducerIDMin = 36;
export const updateArtifactResponseDataProducerIDMax = 36;export const updateArtifactResponseDataTextMax = 255;
export const updateArtifactResponseDataTextRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\':;]+$');
export const updateArtifactResponseDataUrlMax = 2048;

export const updateArtifactResponse = zod.object({
  "data": zod.object({
  "id": zod.uuid().min(updateArtifactResponseDataIdMin).max(updateArtifactResponseDataIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(updateArtifactResponseDataCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(updateArtifactResponseDataUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "credits": zod.number().min(updateArtifactResponseDataCreditsMin).max(updateArtifactResponseDataCreditsMax).describe('The number of credits required to access this artifact. This is used for metering and billing purposes.'),
  "description": zod.string().min(1).max(updateArtifactResponseDataDescriptionMax).regex(updateArtifactResponseDataDescriptionRegExp).nullable().describe('The artifact\'s description'),
  "mimeType": zod.string().min(1).max(updateArtifactResponseDataMimeTypeMax).regex(updateArtifactResponseDataMimeTypeRegExp).describe('The MIME type of the artifact, e.g. image/png'),
  "name": zod.string().min(1).max(updateArtifactResponseDataNameMax).regex(updateArtifactResponseDataNameRegExp).nullable().describe('The name of the artifact, used for display purposes'),
  "organizationID": zod.uuid().min(updateArtifactResponseDataOrganizationIDMin).max(updateArtifactResponseDataOrganizationIDMax).describe('The organization that owns this artifact'),
  "previewImage": zod.url().min(1).max(updateArtifactResponseDataPreviewImageMax).nullable().describe('The URL of the preview image for this artifact. This is used for displaying a thumbnail in the UI.'),
  "producerID": zod.uuid().min(updateArtifactResponseDataProducerIDMin).max(updateArtifactResponseDataProducerIDMax).nullable().describe('The ID of the entity that produced this artifact'),
  "text": zod.string().min(1).max(updateArtifactResponseDataTextMax).regex(updateArtifactResponseDataTextRegExp).nullable().describe('The artifact text'),
  "url": zod.url().min(1).max(updateArtifactResponseDataUrlMax).nullable().describe('The URL of the artifact if it\'s stored externally')
})).describe('Schema for Artifact entity')
})


/**
 * Delete an artifact
 * @summary Delete an artifact
 */
export const deleteArtifactPathIdMin = 36;
export const deleteArtifactPathIdMax = 36;

export const deleteArtifactParams = zod.object({
  "id": zod.uuid().min(deleteArtifactPathIdMin).max(deleteArtifactPathIdMax).describe('The unique identifier of the resource.')
})


/**
 * List labels
 * @summary List labels
 */
export const listLabelsQueryFilterFieldMax = 255;
export const listLabelsQueryFilterFieldRegExp = new RegExp('^[a-zA-Z_][a-zA-Z0-9_]*$');
export const listLabelsQueryFilterValueMaxOne = 1000;
export const listLabelsQueryFilterValueRegExpOne = new RegExp('^[\\w\\s\\-.,!?()@#+/\':;]+$');
export const listLabelsQueryFilterValueMinTwo = -9223372036854776000;
export const listLabelsQueryFilterValueMaxTwo = 9223372036854776000;export const listLabelsQueryPageLimitDefault = 10;
export const listLabelsQueryPageLimitMax = 100;export const listLabelsQueryPageOffsetDefault = 0;
export const listLabelsQueryPageOffsetMin = 0;
export const listLabelsQueryPageOffsetMax = 9007199254740991;export const listLabelsQuerySortMax = 10;

export const listLabelsQueryParams = zod.object({
  "filter": zod.object({
  "type": zod.enum(['and', 'or', 'eq', 'ne', 'gt', 'gte', 'lt', 'lte', 'contains', 'startsWith', 'endsWith']).describe('The type of filter operation'),
  "field": zod.string().min(1).max(listLabelsQueryFilterFieldMax).regex(listLabelsQueryFilterFieldRegExp).optional().describe('The field to filter on (for leaf conditions)'),
  "value": zod.union([zod.string().max(listLabelsQueryFilterValueMaxOne).regex(listLabelsQueryFilterValueRegExpOne),zod.number().min(listLabelsQueryFilterValueMinTwo).max(listLabelsQueryFilterValueMaxTwo),zod.boolean()]).optional().describe('The value to compare against (for leaf conditions)')
}).optional().describe('Filter by field values'),
  "page": zod.object({
  "limit": zod.number().min(1).max(listLabelsQueryPageLimitMax).default(listLabelsQueryPageLimitDefault).describe('Maximum number of items to return'),
  "offset": zod.number().min(listLabelsQueryPageOffsetMin).max(listLabelsQueryPageOffsetMax).optional().describe('Number of items to skip before starting to collect the result set')
}).optional().describe('The page parameter'),
  "sort": zod.array(zod.object({
  "field": zod.enum(['createdAt', 'id', 'updatedAt', 'name', 'organizationID']),
  "order": zod.enum(['asc', 'desc'])
})).max(listLabelsQuerySortMax).optional().describe('The sort parameter')
})

export const listLabelsResponseDataItemIdMin = 36;
export const listLabelsResponseDataItemIdMax = 36;export const listLabelsResponseDataItemCreatedAtMax = 255;export const listLabelsResponseDataItemUpdatedAtMax = 255;export const listLabelsResponseDataItemNameMax = 255;
export const listLabelsResponseDataItemNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\']+$');
export const listLabelsResponseDataItemOrganizationIDMin = 36;
export const listLabelsResponseDataItemOrganizationIDMax = 36;export const listLabelsResponseDataMax = 10000;export const listLabelsResponseMetaTotalMin = 0;
export const listLabelsResponseMetaTotalMax = 2147483647;

export const listLabelsResponse = zod.object({
  "data": zod.array(zod.object({
  "id": zod.uuid().min(listLabelsResponseDataItemIdMin).max(listLabelsResponseDataItemIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(listLabelsResponseDataItemCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(listLabelsResponseDataItemUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "name": zod.string().min(1).max(listLabelsResponseDataItemNameMax).regex(listLabelsResponseDataItemNameRegExp).describe('The name of the label'),
  "organizationID": zod.uuid().min(listLabelsResponseDataItemOrganizationIDMin).max(listLabelsResponseDataItemOrganizationIDMax).describe('The organization this label belongs to')
})).describe('Schema for Label entity')).max(listLabelsResponseDataMax),
  "meta": zod.object({
  "total": zod.number().min(listLabelsResponseMetaTotalMin).max(listLabelsResponseMetaTotalMax).describe('Total number of items in the collection')
}).describe('Pagination metadata')
})


/**
 * Create a label
 * @summary Create a label
 */
export const createLabelBodyNameMax = 255;
export const createLabelBodyNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/]*$');


export const createLabelBody = zod.object({
  "name": zod.string().min(1).max(createLabelBodyNameMax).regex(createLabelBodyNameRegExp).describe('The name of the label')
})


/**
 * Find a label
 * @summary Find a label
 */
export const getLabelPathIdMin = 36;
export const getLabelPathIdMax = 36;

export const getLabelParams = zod.object({
  "id": zod.uuid().min(getLabelPathIdMin).max(getLabelPathIdMax).describe('The unique identifier of the resource.')
})

export const getLabelResponseDataIdMin = 36;
export const getLabelResponseDataIdMax = 36;export const getLabelResponseDataCreatedAtMax = 255;export const getLabelResponseDataUpdatedAtMax = 255;export const getLabelResponseDataNameMax = 255;
export const getLabelResponseDataNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\']+$');
export const getLabelResponseDataOrganizationIDMin = 36;
export const getLabelResponseDataOrganizationIDMax = 36;

export const getLabelResponse = zod.object({
  "data": zod.object({
  "id": zod.uuid().min(getLabelResponseDataIdMin).max(getLabelResponseDataIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(getLabelResponseDataCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(getLabelResponseDataUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "name": zod.string().min(1).max(getLabelResponseDataNameMax).regex(getLabelResponseDataNameRegExp).describe('The name of the label'),
  "organizationID": zod.uuid().min(getLabelResponseDataOrganizationIDMin).max(getLabelResponseDataOrganizationIDMax).describe('The organization this label belongs to')
})).describe('Schema for Label entity')
})


/**
 * Update a label
 * @summary Update a label
 */
export const updateLabelPathIdMin = 36;
export const updateLabelPathIdMax = 36;

export const updateLabelParams = zod.object({
  "id": zod.uuid().min(updateLabelPathIdMin).max(updateLabelPathIdMax).describe('The unique identifier of the resource.')
})

export const updateLabelBodyNameMax = 255;
export const updateLabelBodyNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/]*$');


export const updateLabelBody = zod.object({
  "name": zod.string().min(1).max(updateLabelBodyNameMax).regex(updateLabelBodyNameRegExp).optional().describe('The name of the label')
})

export const updateLabelResponseDataIdMin = 36;
export const updateLabelResponseDataIdMax = 36;export const updateLabelResponseDataCreatedAtMax = 255;export const updateLabelResponseDataUpdatedAtMax = 255;export const updateLabelResponseDataNameMax = 255;
export const updateLabelResponseDataNameRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/\']+$');
export const updateLabelResponseDataOrganizationIDMin = 36;
export const updateLabelResponseDataOrganizationIDMax = 36;

export const updateLabelResponse = zod.object({
  "data": zod.object({
  "id": zod.uuid().min(updateLabelResponseDataIdMin).max(updateLabelResponseDataIdMax).describe('Unique identifier for the resource'),
  "createdAt": zod.iso.datetime({}).min(1).max(updateLabelResponseDataCreatedAtMax).describe('The date and time when the resource was created'),
  "updatedAt": zod.iso.datetime({}).min(1).max(updateLabelResponseDataUpdatedAtMax).describe('The date and time when the resource was last updated')
}).describe('Base schema for all entities with common fields').and(zod.object({
  "name": zod.string().min(1).max(updateLabelResponseDataNameMax).regex(updateLabelResponseDataNameRegExp).describe('The name of the label'),
  "organizationID": zod.uuid().min(updateLabelResponseDataOrganizationIDMin).max(updateLabelResponseDataOrganizationIDMax).describe('The organization this label belongs to')
})).describe('Schema for Label entity')
})


/**
 * Delete a label
 * @summary Delete a label
 */
export const deleteLabelPathIdMin = 36;
export const deleteLabelPathIdMax = 36;

export const deleteLabelParams = zod.object({
  "id": zod.uuid().min(deleteLabelPathIdMin).max(deleteLabelPathIdMax).describe('The unique identifier of the resource.')
})


/**
 * Get the configuration of the application
 * @summary Get the configuration
 */
export const getConfigResponseDataApiCorsDefault = "localhost";
export const getConfigResponseDataApiCorsMax = 2048;
export const getConfigResponseDataApiCorsRegExp = new RegExp('^[\\w\\-\\.,:/@]+$');
export const getConfigResponseDataApiUrlDefault = "http://localhost:3001";
export const getConfigResponseDataApiUrlMax = 2048;export const getConfigResponseDataApiDocsDefault = true;export const getConfigResponseDataApiEmailEnabledDefault = false;export const getConfigResponseDataApiEmailServiceMax = 255;
export const getConfigResponseDataApiEmailServiceRegExp = new RegExp('^[\\w\\-]+$');
export const getConfigResponseDataApiEmailUserMax = 255;
export const getConfigResponseDataApiEmailUserRegExp = new RegExp('^(?!\\.)(?!.*\\.\\.)([A-Za-z0-9_\'+\\-\\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\\-]*\\.)+[A-Za-z]{2,}$');
export const getConfigResponseDataApiEmailPasswordMax = 255;
export const getConfigResponseDataApiEmailPasswordRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/=]*$');
export const getConfigResponseDataApiEnvironmentDefault = "development";export const getConfigResponseDataApiHostDefault = "0.0.0.0";
export const getConfigResponseDataApiHostMax = 255;
export const getConfigResponseDataApiHostRegExp = new RegExp('^[\\w\\-\\.:]+$');
export const getConfigResponseDataApiPortDefault = 3001;
export const getConfigResponseDataApiPortMax = 65535;export const getConfigResponseDataApiValidationDefault = true;export const getConfigResponseDataApiImagePullPolicyDefault = "IfNotPresent";export const getConfigResponseDataApiImageRepositoryMax = 255;
export const getConfigResponseDataApiImageRepositoryRegExp = new RegExp('^[a-z0-9]+(([._]|__|[-]+)[a-z0-9]+)*(\\/[a-z0-9]+(([._]|__|[-]+)[a-z0-9]+)*)*$');
export const getConfigResponseDataApiImageTagDefault = "latest";
export const getConfigResponseDataApiImageTagMax = 255;
export const getConfigResponseDataApiImageTagRegExp = new RegExp('^[a-zA-Z0-9_][a-zA-Z0-9._-]*$');
export const getConfigResponseDataApiResourcesLimitsCpuDefault = "1000m";
export const getConfigResponseDataApiResourcesLimitsCpuMax = 255;
export const getConfigResponseDataApiResourcesLimitsCpuRegExp = new RegExp('^\\d+m?$');
export const getConfigResponseDataApiResourcesLimitsMemoryDefault = "1Gi";
export const getConfigResponseDataApiResourcesLimitsMemoryMax = 255;
export const getConfigResponseDataApiResourcesLimitsMemoryRegExp = new RegExp('^\\d+(Mi|Gi|Ki)?$');
export const getConfigResponseDataApiResourcesRequestsCpuDefault = "100m";
export const getConfigResponseDataApiResourcesRequestsCpuMax = 255;
export const getConfigResponseDataApiResourcesRequestsCpuRegExp = new RegExp('^\\d+m?$');
export const getConfigResponseDataApiResourcesRequestsMemoryDefault = "128Mi";
export const getConfigResponseDataApiResourcesRequestsMemoryMax = 255;
export const getConfigResponseDataApiResourcesRequestsMemoryRegExp = new RegExp('^\\d+(Mi|Gi|Ki)?$');
export const getConfigResponseDataAuthEnabledDefault = true;export const getConfigResponseDataAuthFirebaseEnabledDefault = false;export const getConfigResponseDataAuthFirebaseClientEmailMax = 255;
export const getConfigResponseDataAuthFirebaseClientEmailRegExp = new RegExp('^(?!\\.)(?!.*\\.\\.)([A-Za-z0-9_\'+\\-\\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\\-]*\\.)+[A-Za-z]{2,}$');
export const getConfigResponseDataAuthFirebasePrivateKeyMax = 10000;
export const getConfigResponseDataAuthFirebasePrivateKeyRegExp = new RegExp('^[\\w\\s\\-.,!?()@#+/=\\n\\r]*$');
export const getConfigResponseDataAuthFirebaseProjectIDMax = 255;
export const getConfigResponseDataAuthFirebaseProjectIDRegExp = new RegExp('^[\\w\\-]+$');
export const getConfigResponseDataAuthLocalEnabledDefault = true;export const getConfigResponseDataAuthLocalJwtSecretDefault = "change-me-in-production";
export const getConfigResponseDataAuthLocalJwtSecretMin = 32;
export const getConfigResponseDataAuthLocalJwtSecretMax = 512;
export const getConfigResponseDataAuthLocalJwtSecretRegExp = new RegExp('^[\\w\\-+=/.]+$');
export const getConfigResponseDataAuthLocalAccessTokenTTLDefault = "15m";
export const getConfigResponseDataAuthLocalAccessTokenTTLMin = 2;
export const getConfigResponseDataAuthLocalAccessTokenTTLMax = 20;
export const getConfigResponseDataAuthLocalAccessTokenTTLRegExp = new RegExp('^(\\d+[smhd])+$');
export const getConfigResponseDataAuthLocalRefreshTokenTTLDefault = "168h";
export const getConfigResponseDataAuthLocalRefreshTokenTTLMin = 2;
export const getConfigResponseDataAuthLocalRefreshTokenTTLMax = 20;
export const getConfigResponseDataAuthLocalRefreshTokenTTLRegExp = new RegExp('^(\\d+[smhd])+$');
export const getConfigResponseDataAuthMagicLinkEnabledDefault = false;export const getConfigResponseDataAuthMagicLinkTokenExpiryDefault = 15;
export const getConfigResponseDataAuthMagicLinkTokenExpiryMax = 60;export const getConfigResponseDataAuthMagicLinkOtpLengthDefault = 6;
export const getConfigResponseDataAuthMagicLinkOtpLengthMin = 4;
export const getConfigResponseDataAuthMagicLinkOtpLengthMax = 8;export const getConfigResponseDataAuthMagicLinkDeliveryMethodsEmailEnabledDefault = true;export const getConfigResponseDataAuthMagicLinkDeliveryMethodsEmailFromMax = 255;export const getConfigResponseDataAuthMagicLinkDeliveryMethodsConsoleEnabledDefault = false;export const getConfigResponseDataAuthMagicLinkDeliveryMethodsOtpEnabledDefault = true;export const getConfigResponseDataAuthMagicLinkDeliveryMethodsWebhookEnabledDefault = false;export const getConfigResponseDataAuthMagicLinkDeliveryMethodsWebhookUrlMax = 2048;export const getConfigResponseDataAuthMagicLinkRateLimitMaxAttemptsDefault = 5;
export const getConfigResponseDataAuthMagicLinkRateLimitMaxAttemptsMax = 2147483647;export const getConfigResponseDataAuthMagicLinkRateLimitWindowMinutesDefault = 15;
export const getConfigResponseDataAuthMagicLinkRateLimitWindowMinutesMax = 2147483647;export const getConfigResponseDataAuthTwitterEnabledDefault = false;export const getConfigResponseDataAuthTwitterCallbackURLMax = 2048;export const getConfigResponseDataAuthTwitterConsumerKeyMax = 255;
export const getConfigResponseDataAuthTwitterConsumerKeyRegExp = new RegExp('^[\\w\\-]+$');
export const getConfigResponseDataAuthTwitterConsumerSecretMax = 255;
export const getConfigResponseDataAuthTwitterConsumerSecretRegExp = new RegExp('^[\\w\\-]+$');
export const getConfigResponseDataAuthGoogleEnabledDefault = false;export const getConfigResponseDataAuthGoogleClientIdMax = 255;
export const getConfigResponseDataAuthGoogleClientIdRegExp = new RegExp('^[\\w\\.\\-]+$');
export const getConfigResponseDataAuthGoogleClientSecretMax = 255;
export const getConfigResponseDataAuthGoogleClientSecretRegExp = new RegExp('^[\\w\\-]+$');
export const getConfigResponseDataAuthGoogleRedirectUrlMax = 2048;export const getConfigResponseDataAuthGoogleScopesItemMax = 255;
export const getConfigResponseDataAuthGoogleScopesItemRegExp = new RegExp('^[\\w\\s\\-:\\.]+$');
export const getConfigResponseDataAuthGoogleScopesDefault = ["openid", "profile", "email"];
export const getConfigResponseDataAuthGoogleScopesMax = 1000;export const getConfigResponseDataAuthGithubEnabledDefault = false;export const getConfigResponseDataAuthGithubClientIdMax = 255;
export const getConfigResponseDataAuthGithubClientIdRegExp = new RegExp('^[\\w\\.\\-]+$');
export const getConfigResponseDataAuthGithubClientSecretMax = 255;
export const getConfigResponseDataAuthGithubClientSecretRegExp = new RegExp('^[\\w\\-]+$');
export const getConfigResponseDataAuthGithubRedirectUrlMax = 2048;export const getConfigResponseDataAuthGithubScopesItemMax = 255;
export const getConfigResponseDataAuthGithubScopesItemRegExp = new RegExp('^[\\w\\s\\-:]+$');
export const getConfigResponseDataAuthGithubScopesDefault = ["user:email"];
export const getConfigResponseDataAuthGithubScopesMax = 1000;export const getConfigResponseDataAuthMicrosoftEnabledDefault = false;export const getConfigResponseDataAuthMicrosoftClientIdMax = 255;export const getConfigResponseDataAuthMicrosoftClientSecretMax = 255;
export const getConfigResponseDataAuthMicrosoftClientSecretRegExp = new RegExp('^[\\w\\-~]+$');
export const getConfigResponseDataAuthMicrosoftRedirectUrlMax = 2048;export const getConfigResponseDataAuthMicrosoftTenantDefault = "common";
export const getConfigResponseDataAuthMicrosoftTenantMax = 255;
export const getConfigResponseDataAuthMicrosoftTenantRegExp = new RegExp('^[\\w\\-]+$');
export const getConfigResponseDataAuthMicrosoftScopesItemMax = 255;
export const getConfigResponseDataAuthMicrosoftScopesItemRegExp = new RegExp('^[\\w\\s\\-:\\.]+$');
export const getConfigResponseDataAuthMicrosoftScopesDefault = ["openid", "profile", "email", "User.Read"];
export const getConfigResponseDataAuthMicrosoftScopesMax = 1000;export const getConfigResponseDataBillingEnabledDefault = false;export const getConfigResponseDataBillingStripeTokenMax = 512;
export const getConfigResponseDataBillingStripeTokenRegExp = new RegExp('^[a-zA-Z0-9_]+$');
export const getConfigResponseDataBillingStripeWhsecMax = 255;
export const getConfigResponseDataBillingStripeWhsecRegExp = new RegExp('^[a-zA-Z0-9_]+$');
export const getConfigResponseDataDatabaseEnabledDefault = true;export const getConfigResponseDataDatabaseUrlDefault = "postgresql://admin:password@127.0.0.1:5432/archesai";
export const getConfigResponseDataDatabaseUrlMax = 2048;export const getConfigResponseDataDatabaseTypeDefault = "postgresql";export const getConfigResponseDataDatabaseMaxConnsDefault = 25;
export const getConfigResponseDataDatabaseMaxConnsMax = 2147483647;export const getConfigResponseDataDatabaseMinConnsDefault = 5;
export const getConfigResponseDataDatabaseMinConnsMin = 0;
export const getConfigResponseDataDatabaseMinConnsMax = 2147483647;export const getConfigResponseDataDatabaseConnMaxLifetimeMin = 2;
export const getConfigResponseDataDatabaseConnMaxLifetimeMax = 20;
export const getConfigResponseDataDatabaseConnMaxLifetimeRegExp = new RegExp('^(\\d+[smh])+$');
export const getConfigResponseDataDatabaseConnMaxIdleTimeMin = 2;
export const getConfigResponseDataDatabaseConnMaxIdleTimeMax = 20;
export const getConfigResponseDataDatabaseConnMaxIdleTimeRegExp = new RegExp('^(\\d+[smh])+$');
export const getConfigResponseDataDatabaseHealthCheckPeriodMin = 2;
export const getConfigResponseDataDatabaseHealthCheckPeriodMax = 20;
export const getConfigResponseDataDatabaseHealthCheckPeriodRegExp = new RegExp('^(\\d+[smh])+$');
export const getConfigResponseDataDatabaseRunMigrationsDefault = false;export const getConfigResponseDataDatabaseManagedDefault = false;export const getConfigResponseDataDatabaseImagePullPolicyDefault = "IfNotPresent";export const getConfigResponseDataDatabaseImageRepositoryMax = 255;
export const getConfigResponseDataDatabaseImageRepositoryRegExp = new RegExp('^[a-z0-9]+(([._]|__|[-]+)[a-z0-9]+)*(\\/[a-z0-9]+(([._]|__|[-]+)[a-z0-9]+)*)*$');
export const getConfigResponseDataDatabaseImageTagDefault = "latest";
export const getConfigResponseDataDatabaseImageTagMax = 255;
export const getConfigResponseDataDatabaseImageTagRegExp = new RegExp('^[a-zA-Z0-9_][a-zA-Z0-9._-]*$');
export const getConfigResponseDataDatabasePersistenceEnabledDefault = true;export const getConfigResponseDataDatabasePersistenceSizeDefault = "10Gi";
export const getConfigResponseDataDatabasePersistenceSizeMax = 255;
export const getConfigResponseDataDatabasePersistenceSizeRegExp = new RegExp('^[0-9]+(Ei|Pi|Ti|Gi|Mi|Ki|E|P|T|G|M|K)?$');
export const getConfigResponseDataDatabaseResourcesLimitsCpuDefault = "1000m";
export const getConfigResponseDataDatabaseResourcesLimitsCpuMax = 255;
export const getConfigResponseDataDatabaseResourcesLimitsCpuRegExp = new RegExp('^\\d+m?$');
export const getConfigResponseDataDatabaseResourcesLimitsMemoryDefault = "1Gi";
export const getConfigResponseDataDatabaseResourcesLimitsMemoryMax = 255;
export const getConfigResponseDataDatabaseResourcesLimitsMemoryRegExp = new RegExp('^\\d+(Mi|Gi|Ki)?$');
export const getConfigResponseDataDatabaseResourcesRequestsCpuDefault = "100m";
export const getConfigResponseDataDatabaseResourcesRequestsCpuMax = 255;
export const getConfigResponseDataDatabaseResourcesRequestsCpuRegExp = new RegExp('^\\d+m?$');
export const getConfigResponseDataDatabaseResourcesRequestsMemoryDefault = "128Mi";
export const getConfigResponseDataDatabaseResourcesRequestsMemoryMax = 255;
export const getConfigResponseDataDatabaseResourcesRequestsMemoryRegExp = new RegExp('^\\d+(Mi|Gi|Ki)?$');
export const getConfigResponseDataIntelligenceEmbeddingTypeDefault = "ollama";export const getConfigResponseDataIntelligenceEmbeddingEndpointMax = 2048;export const getConfigResponseDataIntelligenceEmbeddingTokenMax = 512;
export const getConfigResponseDataIntelligenceEmbeddingTokenRegExp = new RegExp('^[a-zA-Z0-9_\\-\\.]+$');
export const getConfigResponseDataIntelligenceLlmTypeDefault = "ollama";export const getConfigResponseDataIntelligenceLlmEndpointMax = 2048;export const getConfigResponseDataIntelligenceLlmTokenMax = 512;
export const getConfigResponseDataIntelligenceLlmTokenRegExp = new RegExp('^[a-zA-Z0-9_\\-\\.]+$');
export const getConfigResponseDataIntelligenceRunpodEnabledDefault = false;export const getConfigResponseDataIntelligenceRunpodTokenMax = 512;
export const getConfigResponseDataIntelligenceRunpodTokenRegExp = new RegExp('^[a-zA-Z0-9_\\-\\.]+$');
export const getConfigResponseDataIntelligenceScraperEnabledDefault = false;export const getConfigResponseDataIntelligenceScraperManagedDefault = false;export const getConfigResponseDataIntelligenceScraperEndpointMax = 2048;export const getConfigResponseDataIntelligenceScraperImagePullPolicyDefault = "IfNotPresent";export const getConfigResponseDataIntelligenceScraperImageRepositoryMax = 255;
export const getConfigResponseDataIntelligenceScraperImageRepositoryRegExp = new RegExp('^[a-z0-9]+(([._]|__|[-]+)[a-z0-9]+)*(\\/[a-z0-9]+(([._]|__|[-]+)[a-z0-9]+)*)*$');
export const getConfigResponseDataIntelligenceScraperImageTagDefault = "latest";
export const getConfigResponseDataIntelligenceScraperImageTagMax = 255;
export const getConfigResponseDataIntelligenceScraperImageTagRegExp = new RegExp('^[a-zA-Z0-9_][a-zA-Z0-9._-]*$');
export const getConfigResponseDataIntelligenceScraperResourcesLimitsCpuDefault = "1000m";
export const getConfigResponseDataIntelligenceScraperResourcesLimitsCpuMax = 255;
export const getConfigResponseDataIntelligenceScraperResourcesLimitsCpuRegExp = new RegExp('^\\d+m?$');
export const getConfigResponseDataIntelligenceScraperResourcesLimitsMemoryDefault = "1Gi";
export const getConfigResponseDataIntelligenceScraperResourcesLimitsMemoryMax = 255;
export const getConfigResponseDataIntelligenceScraperResourcesLimitsMemoryRegExp = new RegExp('^\\d+(Mi|Gi|Ki)?$');
export const getConfigResponseDataIntelligenceScraperResourcesRequestsCpuDefault = "100m";
export const getConfigResponseDataIntelligenceScraperResourcesRequestsCpuMax = 255;
export const getConfigResponseDataIntelligenceScraperResourcesRequestsCpuRegExp = new RegExp('^\\d+m?$');
export const getConfigResponseDataIntelligenceScraperResourcesRequestsMemoryDefault = "128Mi";
export const getConfigResponseDataIntelligenceScraperResourcesRequestsMemoryMax = 255;
export const getConfigResponseDataIntelligenceScraperResourcesRequestsMemoryRegExp = new RegExp('^\\d+(Mi|Gi|Ki)?$');
export const getConfigResponseDataIntelligenceSpeechEnabledDefault = false;export const getConfigResponseDataIntelligenceSpeechTokenMax = 512;
export const getConfigResponseDataIntelligenceSpeechTokenRegExp = new RegExp('^[a-zA-Z0-9_\\-\\.]+$');
export const getConfigResponseDataIntelligenceUnstructuredEnabledDefault = false;export const getConfigResponseDataIntelligenceUnstructuredManagedDefault = false;export const getConfigResponseDataIntelligenceUnstructuredImagePullPolicyDefault = "IfNotPresent";export const getConfigResponseDataIntelligenceUnstructuredImageRepositoryMax = 255;
export const getConfigResponseDataIntelligenceUnstructuredImageRepositoryRegExp = new RegExp('^[a-z0-9]+(([._]|__|[-]+)[a-z0-9]+)*(\\/[a-z0-9]+(([._]|__|[-]+)[a-z0-9]+)*)*$');
export const getConfigResponseDataIntelligenceUnstructuredImageTagDefault = "latest";
export const getConfigResponseDataIntelligenceUnstructuredImageTagMax = 255;
export const getConfigResponseDataIntelligenceUnstructuredImageTagRegExp = new RegExp('^[a-zA-Z0-9_][a-zA-Z0-9._-]*$');
export const getConfigResponseDataIntelligenceUnstructuredResourcesLimitsCpuDefault = "1000m";
export const getConfigResponseDataIntelligenceUnstructuredResourcesLimitsCpuMax = 255;
export const getConfigResponseDataIntelligenceUnstructuredResourcesLimitsCpuRegExp = new RegExp('^\\d+m?$');
export const getConfigResponseDataIntelligenceUnstructuredResourcesLimitsMemoryDefault = "1Gi";
export const getConfigResponseDataIntelligenceUnstructuredResourcesLimitsMemoryMax = 255;
export const getConfigResponseDataIntelligenceUnstructuredResourcesLimitsMemoryRegExp = new RegExp('^\\d+(Mi|Gi|Ki)?$');
export const getConfigResponseDataIntelligenceUnstructuredResourcesRequestsCpuDefault = "100m";
export const getConfigResponseDataIntelligenceUnstructuredResourcesRequestsCpuMax = 255;
export const getConfigResponseDataIntelligenceUnstructuredResourcesRequestsCpuRegExp = new RegExp('^\\d+m?$');
export const getConfigResponseDataIntelligenceUnstructuredResourcesRequestsMemoryDefault = "128Mi";
export const getConfigResponseDataIntelligenceUnstructuredResourcesRequestsMemoryMax = 255;
export const getConfigResponseDataIntelligenceUnstructuredResourcesRequestsMemoryRegExp = new RegExp('^\\d+(Mi|Gi|Ki)?$');
export const getConfigResponseDataLoggingLevelDefault = "info";export const getConfigResponseDataLoggingPrettyDefault = false;export const getConfigResponseDataPlatformEnabledDefault = false;export const getConfigResponseDataPlatformManagedDefault = false;export const getConfigResponseDataPlatformUrlDefault = "http://localhost:3000";
export const getConfigResponseDataPlatformUrlMax = 2048;export const getConfigResponseDataPlatformImagePullPolicyDefault = "IfNotPresent";export const getConfigResponseDataPlatformImageRepositoryMax = 255;
export const getConfigResponseDataPlatformImageRepositoryRegExp = new RegExp('^[a-z0-9]+(([._]|__|[-]+)[a-z0-9]+)*(\\/[a-z0-9]+(([._]|__|[-]+)[a-z0-9]+)*)*$');
export const getConfigResponseDataPlatformImageTagDefault = "latest";
export const getConfigResponseDataPlatformImageTagMax = 255;
export const getConfigResponseDataPlatformImageTagRegExp = new RegExp('^[a-zA-Z0-9_][a-zA-Z0-9._-]*$');
export const getConfigResponseDataPlatformResourcesLimitsCpuDefault = "1000m";
export const getConfigResponseDataPlatformResourcesLimitsCpuMax = 255;
export const getConfigResponseDataPlatformResourcesLimitsCpuRegExp = new RegExp('^\\d+m?$');
export const getConfigResponseDataPlatformResourcesLimitsMemoryDefault = "1Gi";
export const getConfigResponseDataPlatformResourcesLimitsMemoryMax = 255;
export const getConfigResponseDataPlatformResourcesLimitsMemoryRegExp = new RegExp('^\\d+(Mi|Gi|Ki)?$');
export const getConfigResponseDataPlatformResourcesRequestsCpuDefault = "100m";
export const getConfigResponseDataPlatformResourcesRequestsCpuMax = 255;
export const getConfigResponseDataPlatformResourcesRequestsCpuRegExp = new RegExp('^\\d+m?$');
export const getConfigResponseDataPlatformResourcesRequestsMemoryDefault = "128Mi";
export const getConfigResponseDataPlatformResourcesRequestsMemoryMax = 255;
export const getConfigResponseDataPlatformResourcesRequestsMemoryRegExp = new RegExp('^\\d+(Mi|Gi|Ki)?$');
export const getConfigResponseDataRedisEnabledDefault = false;export const getConfigResponseDataRedisManagedDefault = false;export const getConfigResponseDataRedisAuthDefault = "password";
export const getConfigResponseDataRedisAuthMax = 72;
export const getConfigResponseDataRedisAuthRegExp = new RegExp('^[\\w\\-@./#&+!*()]+$');
export const getConfigResponseDataRedisCaMax = 255;
export const getConfigResponseDataRedisCaRegExp = new RegExp('^[\\w\\s\\-./]+$');
export const getConfigResponseDataRedisHostDefault = "localhost";
export const getConfigResponseDataRedisHostMax = 255;
export const getConfigResponseDataRedisHostRegExp = new RegExp('^[a-zA-Z0-9.\\-]+$');
export const getConfigResponseDataRedisPortDefault = 6379;
export const getConfigResponseDataRedisPortMax = 65535;export const getConfigResponseDataRedisImagePullPolicyDefault = "IfNotPresent";export const getConfigResponseDataRedisImageRepositoryMax = 255;
export const getConfigResponseDataRedisImageRepositoryRegExp = new RegExp('^[a-z0-9]+(([._]|__|[-]+)[a-z0-9]+)*(\\/[a-z0-9]+(([._]|__|[-]+)[a-z0-9]+)*)*$');
export const getConfigResponseDataRedisImageTagDefault = "latest";
export const getConfigResponseDataRedisImageTagMax = 255;
export const getConfigResponseDataRedisImageTagRegExp = new RegExp('^[a-zA-Z0-9_][a-zA-Z0-9._-]*$');
export const getConfigResponseDataRedisPersistenceEnabledDefault = true;export const getConfigResponseDataRedisPersistenceSizeDefault = "10Gi";
export const getConfigResponseDataRedisPersistenceSizeMax = 255;
export const getConfigResponseDataRedisPersistenceSizeRegExp = new RegExp('^[0-9]+(Ei|Pi|Ti|Gi|Mi|Ki|E|P|T|G|M|K)?$');
export const getConfigResponseDataRedisResourcesLimitsCpuDefault = "1000m";
export const getConfigResponseDataRedisResourcesLimitsCpuMax = 255;
export const getConfigResponseDataRedisResourcesLimitsCpuRegExp = new RegExp('^\\d+m?$');
export const getConfigResponseDataRedisResourcesLimitsMemoryDefault = "1Gi";
export const getConfigResponseDataRedisResourcesLimitsMemoryMax = 255;
export const getConfigResponseDataRedisResourcesLimitsMemoryRegExp = new RegExp('^\\d+(Mi|Gi|Ki)?$');
export const getConfigResponseDataRedisResourcesRequestsCpuDefault = "100m";
export const getConfigResponseDataRedisResourcesRequestsCpuMax = 255;
export const getConfigResponseDataRedisResourcesRequestsCpuRegExp = new RegExp('^\\d+m?$');
export const getConfigResponseDataRedisResourcesRequestsMemoryDefault = "128Mi";
export const getConfigResponseDataRedisResourcesRequestsMemoryMax = 255;
export const getConfigResponseDataRedisResourcesRequestsMemoryRegExp = new RegExp('^\\d+(Mi|Gi|Ki)?$');
export const getConfigResponseDataStorageEnabledDefault = false;export const getConfigResponseDataStorageManagedDefault = false;export const getConfigResponseDataStorageAccesskeyDefault = "minioadmin";
export const getConfigResponseDataStorageAccesskeyMax = 255;
export const getConfigResponseDataStorageAccesskeyRegExp = new RegExp('^[A-Z0-9]+$');
export const getConfigResponseDataStorageBucketDefault = "archesai";
export const getConfigResponseDataStorageBucketMax = 255;
export const getConfigResponseDataStorageBucketRegExp = new RegExp('^[a-z0-9][a-z0-9\\-]*[a-z0-9]$');
export const getConfigResponseDataStorageEndpointDefault = "http://localhost:9000";
export const getConfigResponseDataStorageEndpointMax = 2048;export const getConfigResponseDataStorageSecretkeyDefault = "minioadmin";
export const getConfigResponseDataStorageSecretkeyMax = 255;
export const getConfigResponseDataStorageSecretkeyRegExp = new RegExp('^[A-Za-z0-9+/=]+$');
export const getConfigResponseDataStorageImagePullPolicyDefault = "IfNotPresent";export const getConfigResponseDataStorageImageRepositoryMax = 255;
export const getConfigResponseDataStorageImageRepositoryRegExp = new RegExp('^[a-z0-9]+(([._]|__|[-]+)[a-z0-9]+)*(\\/[a-z0-9]+(([._]|__|[-]+)[a-z0-9]+)*)*$');
export const getConfigResponseDataStorageImageTagDefault = "latest";
export const getConfigResponseDataStorageImageTagMax = 255;
export const getConfigResponseDataStorageImageTagRegExp = new RegExp('^[a-zA-Z0-9_][a-zA-Z0-9._-]*$');
export const getConfigResponseDataStoragePersistenceEnabledDefault = true;export const getConfigResponseDataStoragePersistenceSizeDefault = "10Gi";
export const getConfigResponseDataStoragePersistenceSizeMax = 255;
export const getConfigResponseDataStoragePersistenceSizeRegExp = new RegExp('^[0-9]+(Ei|Pi|Ti|Gi|Mi|Ki|E|P|T|G|M|K)?$');
export const getConfigResponseDataStorageResourcesLimitsCpuDefault = "1000m";
export const getConfigResponseDataStorageResourcesLimitsCpuMax = 255;
export const getConfigResponseDataStorageResourcesLimitsCpuRegExp = new RegExp('^\\d+m?$');
export const getConfigResponseDataStorageResourcesLimitsMemoryDefault = "1Gi";
export const getConfigResponseDataStorageResourcesLimitsMemoryMax = 255;
export const getConfigResponseDataStorageResourcesLimitsMemoryRegExp = new RegExp('^\\d+(Mi|Gi|Ki)?$');
export const getConfigResponseDataStorageResourcesRequestsCpuDefault = "100m";
export const getConfigResponseDataStorageResourcesRequestsCpuMax = 255;
export const getConfigResponseDataStorageResourcesRequestsCpuRegExp = new RegExp('^\\d+m?$');
export const getConfigResponseDataStorageResourcesRequestsMemoryDefault = "128Mi";
export const getConfigResponseDataStorageResourcesRequestsMemoryMax = 255;
export const getConfigResponseDataStorageResourcesRequestsMemoryRegExp = new RegExp('^\\d+(Mi|Gi|Ki)?$');
export const getConfigResponseDataKubernetesInfrastructureImagesImagePullSecretsItemMax = 255;
export const getConfigResponseDataKubernetesInfrastructureImagesImagePullSecretsItemRegExp = new RegExp('^[a-z0-9]([-a-z0-9]*[a-z0-9])?$');
export const getConfigResponseDataKubernetesInfrastructureImagesImagePullSecretsDefault = [];
export const getConfigResponseDataKubernetesInfrastructureImagesImagePullSecretsMax = 1000;export const getConfigResponseDataKubernetesInfrastructureImagesImageRegistryDefault = "";
export const getConfigResponseDataKubernetesInfrastructureImagesImageRegistryMax = 2048;
export const getConfigResponseDataKubernetesInfrastructureImagesImageRegistryRegExp = new RegExp('^(|[a-z0-9]([-a-z0-9\\.]*[a-z0-9])?(:[0-9]+)?)$');
export const getConfigResponseDataKubernetesInfrastructureMigrationsEnabledDefault = false;export const getConfigResponseDataKubernetesInfrastructureNamespaceDefault = "arches-system";
export const getConfigResponseDataKubernetesInfrastructureNamespaceMax = 255;
export const getConfigResponseDataKubernetesInfrastructureNamespaceRegExp = new RegExp('^[a-z0-9]([-a-z0-9]*[a-z0-9])?$');
export const getConfigResponseDataKubernetesInfrastructureServiceAccountCreateDefault = true;export const getConfigResponseDataKubernetesInfrastructureServiceAccountNameDefault = "";
export const getConfigResponseDataKubernetesInfrastructureServiceAccountNameMax = 255;
export const getConfigResponseDataKubernetesInfrastructureServiceAccountNameRegExp = new RegExp('^(|[a-z0-9]([-a-z0-9]*[a-z0-9])?)$');
export const getConfigResponseDataKubernetesIngressEnabledDefault = false;export const getConfigResponseDataKubernetesIngressDomainDefault = "archesai.dev";
export const getConfigResponseDataKubernetesIngressDomainMax = 255;export const getConfigResponseDataKubernetesIngressTlsEnabledDefault = true;export const getConfigResponseDataKubernetesIngressTlsIssuerDefault = "letsencrypt-staging";
export const getConfigResponseDataKubernetesIngressTlsIssuerMax = 255;
export const getConfigResponseDataKubernetesIngressTlsIssuerRegExp = new RegExp('^[a-z0-9]([-a-z0-9]*[a-z0-9])?$');
export const getConfigResponseDataKubernetesIngressTlsSecretNameDefault = "archesai-tls";
export const getConfigResponseDataKubernetesIngressTlsSecretNameMax = 255;
export const getConfigResponseDataKubernetesIngressTlsSecretNameRegExp = new RegExp('^[a-z0-9]([-a-z0-9]*[a-z0-9])?$');
export const getConfigResponseDataKubernetesMonitoringGrafanaEnabledDefault = false;export const getConfigResponseDataKubernetesMonitoringGrafanaManagedDefault = false;export const getConfigResponseDataKubernetesMonitoringGrafanaImagePullPolicyDefault = "IfNotPresent";export const getConfigResponseDataKubernetesMonitoringGrafanaImageRepositoryMax = 255;
export const getConfigResponseDataKubernetesMonitoringGrafanaImageRepositoryRegExp = new RegExp('^[a-z0-9]+(([._]|__|[-]+)[a-z0-9]+)*(\\/[a-z0-9]+(([._]|__|[-]+)[a-z0-9]+)*)*$');
export const getConfigResponseDataKubernetesMonitoringGrafanaImageTagDefault = "latest";
export const getConfigResponseDataKubernetesMonitoringGrafanaImageTagMax = 255;
export const getConfigResponseDataKubernetesMonitoringGrafanaImageTagRegExp = new RegExp('^[a-zA-Z0-9_][a-zA-Z0-9._-]*$');
export const getConfigResponseDataKubernetesMonitoringGrafanaResourcesLimitsCpuDefault = "1000m";
export const getConfigResponseDataKubernetesMonitoringGrafanaResourcesLimitsCpuMax = 255;
export const getConfigResponseDataKubernetesMonitoringGrafanaResourcesLimitsCpuRegExp = new RegExp('^\\d+m?$');
export const getConfigResponseDataKubernetesMonitoringGrafanaResourcesLimitsMemoryDefault = "1Gi";
export const getConfigResponseDataKubernetesMonitoringGrafanaResourcesLimitsMemoryMax = 255;
export const getConfigResponseDataKubernetesMonitoringGrafanaResourcesLimitsMemoryRegExp = new RegExp('^\\d+(Mi|Gi|Ki)?$');
export const getConfigResponseDataKubernetesMonitoringGrafanaResourcesRequestsCpuDefault = "100m";
export const getConfigResponseDataKubernetesMonitoringGrafanaResourcesRequestsCpuMax = 255;
export const getConfigResponseDataKubernetesMonitoringGrafanaResourcesRequestsCpuRegExp = new RegExp('^\\d+m?$');
export const getConfigResponseDataKubernetesMonitoringGrafanaResourcesRequestsMemoryDefault = "128Mi";
export const getConfigResponseDataKubernetesMonitoringGrafanaResourcesRequestsMemoryMax = 255;
export const getConfigResponseDataKubernetesMonitoringGrafanaResourcesRequestsMemoryRegExp = new RegExp('^\\d+(Mi|Gi|Ki)?$');
export const getConfigResponseDataKubernetesMonitoringLokiEnabledDefault = false;export const getConfigResponseDataKubernetesMonitoringLokiManagedDefault = false;export const getConfigResponseDataKubernetesMonitoringLokiHostDefault = "http://localhost:3100";
export const getConfigResponseDataKubernetesMonitoringLokiHostMax = 2048;export const getConfigResponseDataKubernetesMonitoringLokiImagePullPolicyDefault = "IfNotPresent";export const getConfigResponseDataKubernetesMonitoringLokiImageRepositoryMax = 255;
export const getConfigResponseDataKubernetesMonitoringLokiImageRepositoryRegExp = new RegExp('^[a-z0-9]+(([._]|__|[-]+)[a-z0-9]+)*(\\/[a-z0-9]+(([._]|__|[-]+)[a-z0-9]+)*)*$');
export const getConfigResponseDataKubernetesMonitoringLokiImageTagDefault = "latest";
export const getConfigResponseDataKubernetesMonitoringLokiImageTagMax = 255;
export const getConfigResponseDataKubernetesMonitoringLokiImageTagRegExp = new RegExp('^[a-zA-Z0-9_][a-zA-Z0-9._-]*$');
export const getConfigResponseDataKubernetesMonitoringLokiResourcesLimitsCpuDefault = "1000m";
export const getConfigResponseDataKubernetesMonitoringLokiResourcesLimitsCpuMax = 255;
export const getConfigResponseDataKubernetesMonitoringLokiResourcesLimitsCpuRegExp = new RegExp('^\\d+m?$');
export const getConfigResponseDataKubernetesMonitoringLokiResourcesLimitsMemoryDefault = "1Gi";
export const getConfigResponseDataKubernetesMonitoringLokiResourcesLimitsMemoryMax = 255;
export const getConfigResponseDataKubernetesMonitoringLokiResourcesLimitsMemoryRegExp = new RegExp('^\\d+(Mi|Gi|Ki)?$');
export const getConfigResponseDataKubernetesMonitoringLokiResourcesRequestsCpuDefault = "100m";
export const getConfigResponseDataKubernetesMonitoringLokiResourcesRequestsCpuMax = 255;
export const getConfigResponseDataKubernetesMonitoringLokiResourcesRequestsCpuRegExp = new RegExp('^\\d+m?$');
export const getConfigResponseDataKubernetesMonitoringLokiResourcesRequestsMemoryDefault = "128Mi";
export const getConfigResponseDataKubernetesMonitoringLokiResourcesRequestsMemoryMax = 255;
export const getConfigResponseDataKubernetesMonitoringLokiResourcesRequestsMemoryRegExp = new RegExp('^\\d+(Mi|Gi|Ki)?$');


export const getConfigResponse = zod.object({
  "data": zod.object({
  "api": zod.object({
  "cors": zod.string().min(1).max(getConfigResponseDataApiCorsMax).regex(getConfigResponseDataApiCorsRegExp).describe('A comma-separated list of allowed origins for CORS requests'),
  "url": zod.url().max(getConfigResponseDataApiUrlMax).default(getConfigResponseDataApiUrlDefault).describe('The public URL for the API'),
  "docs": zod.boolean().describe('Enable or disable API documentation'),
  "email": zod.object({
  "enabled": zod.boolean().describe('Enable email functionality'),
  "service": zod.string().max(getConfigResponseDataApiEmailServiceMax).regex(getConfigResponseDataApiEmailServiceRegExp).optional().describe('Email service provider (e.g., \"gmail\", \"sendgrid\", etc.)'),
  "user": zod.email().max(getConfigResponseDataApiEmailUserMax).regex(getConfigResponseDataApiEmailUserRegExp).optional().describe('Username for the email service'),
  "password": zod.string().max(getConfigResponseDataApiEmailPasswordMax).regex(getConfigResponseDataApiEmailPasswordRegExp).optional().describe('Password for the email service')
}).optional().describe('Email configuration for sending emails'),
  "environment": zod.enum(['development', 'staging', 'production']).describe('Deployment environment (development, staging, production)'),
  "host": zod.string().min(1).max(getConfigResponseDataApiHostMax).regex(getConfigResponseDataApiHostRegExp).describe('The host address on which the API server will listen'),
  "port": zod.number().min(1).max(getConfigResponseDataApiPortMax).describe('The port on which the API server will listen'),
  "validation": zod.boolean().describe('Enable or disable request validation'),
  "image": zod.object({
  "pullPolicy": zod.enum(['Always', 'IfNotPresent', 'Never']).describe('Kubernetes image pull policy'),
  "repository": zod.string().min(1).max(getConfigResponseDataApiImageRepositoryMax).regex(getConfigResponseDataApiImageRepositoryRegExp).optional().describe('Container image repository'),
  "tag": zod.string().min(1).max(getConfigResponseDataApiImageTagMax).regex(getConfigResponseDataApiImageTagRegExp).describe('Container image tag')
}).optional().describe('Container image configuration'),
  "resources": zod.object({
  "limits": zod.object({
  "cpu": zod.string().min(1).max(getConfigResponseDataApiResourcesLimitsCpuMax).regex(getConfigResponseDataApiResourcesLimitsCpuRegExp).describe('Maximum CPU allocation'),
  "memory": zod.string().min(1).max(getConfigResponseDataApiResourcesLimitsMemoryMax).regex(getConfigResponseDataApiResourcesLimitsMemoryRegExp).describe('Maximum memory allocation')
}).describe('Resource limits'),
  "requests": zod.object({
  "cpu": zod.string().min(1).max(getConfigResponseDataApiResourcesRequestsCpuMax).regex(getConfigResponseDataApiResourcesRequestsCpuRegExp).describe('Requested CPU allocation'),
  "memory": zod.string().min(1).max(getConfigResponseDataApiResourcesRequestsMemoryMax).regex(getConfigResponseDataApiResourcesRequestsMemoryRegExp).describe('Requested memory allocation')
}).describe('Resource requests')
}).optional().describe('Kubernetes resource configuration')
}).optional().describe('Configuration schema for the API server'),
  "auth": zod.object({
  "enabled": zod.boolean().describe('Enable authentication'),
  "firebase": zod.object({
  "enabled": zod.boolean().describe('Enable Firebase authentication'),
  "clientEmail": zod.email().max(getConfigResponseDataAuthFirebaseClientEmailMax).regex(getConfigResponseDataAuthFirebaseClientEmailRegExp).optional().describe('Firebase service account client email address'),
  "privateKey": zod.string().min(1).max(getConfigResponseDataAuthFirebasePrivateKeyMax).regex(getConfigResponseDataAuthFirebasePrivateKeyRegExp).optional().describe('Firebase service account private key (PEM format)'),
  "projectID": zod.string().max(getConfigResponseDataAuthFirebaseProjectIDMax).regex(getConfigResponseDataAuthFirebaseProjectIDRegExp).optional().describe('Firebase project ID for authentication')
}).optional().describe('Firebase authentication configuration'),
  "local": zod.object({
  "enabled": zod.boolean().describe('Enable local authentication'),
  "jwtSecret": zod.string().min(getConfigResponseDataAuthLocalJwtSecretMin).max(getConfigResponseDataAuthLocalJwtSecretMax).regex(getConfigResponseDataAuthLocalJwtSecretRegExp).describe('Secret key for JWT token signing'),
  "accessTokenTTL": zod.string().min(getConfigResponseDataAuthLocalAccessTokenTTLMin).max(getConfigResponseDataAuthLocalAccessTokenTTLMax).regex(getConfigResponseDataAuthLocalAccessTokenTTLRegExp).describe('Access token time-to-live duration (e.g., \"15m\", \"1h\")'),
  "refreshTokenTTL": zod.string().min(getConfigResponseDataAuthLocalRefreshTokenTTLMin).max(getConfigResponseDataAuthLocalRefreshTokenTTLMax).regex(getConfigResponseDataAuthLocalRefreshTokenTTLRegExp).describe('Refresh token time-to-live duration (e.g., \"7d\", \"168h\")')
}).optional().describe('Local username/password authentication'),
  "magicLink": zod.object({
  "enabled": zod.boolean().describe('Enable magic link authentication'),
  "tokenExpiry": zod.number().min(1).max(getConfigResponseDataAuthMagicLinkTokenExpiryMax).default(getConfigResponseDataAuthMagicLinkTokenExpiryDefault).describe('Token expiry duration in minutes'),
  "otpLength": zod.number().min(getConfigResponseDataAuthMagicLinkOtpLengthMin).max(getConfigResponseDataAuthMagicLinkOtpLengthMax).default(getConfigResponseDataAuthMagicLinkOtpLengthDefault).describe('Length of OTP code'),
  "deliveryMethods": zod.object({
  "email": zod.object({
  "enabled": zod.boolean().default(getConfigResponseDataAuthMagicLinkDeliveryMethodsEmailEnabledDefault),
  "from": zod.email().max(getConfigResponseDataAuthMagicLinkDeliveryMethodsEmailFromMax).optional()
}).optional(),
  "console": zod.object({
  "enabled": zod.boolean().optional().describe('Enable console output (development only)')
}).optional(),
  "otp": zod.object({
  "enabled": zod.boolean().default(getConfigResponseDataAuthMagicLinkDeliveryMethodsOtpEnabledDefault)
}).optional(),
  "webhook": zod.object({
  "enabled": zod.boolean().optional(),
  "url": zod.url().max(getConfigResponseDataAuthMagicLinkDeliveryMethodsWebhookUrlMax).optional()
}).optional()
}).optional().describe('Available delivery methods'),
  "rateLimit": zod.object({
  "maxAttempts": zod.number().min(1).max(getConfigResponseDataAuthMagicLinkRateLimitMaxAttemptsMax).default(getConfigResponseDataAuthMagicLinkRateLimitMaxAttemptsDefault).describe('Maximum number of attempts within window'),
  "windowMinutes": zod.number().min(1).max(getConfigResponseDataAuthMagicLinkRateLimitWindowMinutesMax).default(getConfigResponseDataAuthMagicLinkRateLimitWindowMinutesDefault).describe('Time window in minutes')
}).optional().describe('Rate limiting configuration')
}).optional().describe('Magic link authentication configuration'),
  "twitter": zod.object({
  "enabled": zod.boolean().describe('Enable Twitter OAuth'),
  "callbackURL": zod.url().min(1).max(getConfigResponseDataAuthTwitterCallbackURLMax).optional().describe('OAuth callback URL'),
  "consumerKey": zod.string().min(1).max(getConfigResponseDataAuthTwitterConsumerKeyMax).regex(getConfigResponseDataAuthTwitterConsumerKeyRegExp).optional().describe('Twitter API consumer key'),
  "consumerSecret": zod.string().min(1).max(getConfigResponseDataAuthTwitterConsumerSecretMax).regex(getConfigResponseDataAuthTwitterConsumerSecretRegExp).optional().describe('Twitter API consumer secret')
}).optional().describe('Twitter OAuth configuration'),
  "google": zod.object({
  "enabled": zod.boolean().describe('Enable Google OAuth'),
  "clientId": zod.string().min(1).max(getConfigResponseDataAuthGoogleClientIdMax).regex(getConfigResponseDataAuthGoogleClientIdRegExp).optional().describe('Google OAuth client ID'),
  "clientSecret": zod.string().min(1).max(getConfigResponseDataAuthGoogleClientSecretMax).regex(getConfigResponseDataAuthGoogleClientSecretRegExp).optional().describe('Google OAuth client secret'),
  "redirectUrl": zod.url().max(getConfigResponseDataAuthGoogleRedirectUrlMax).optional().describe('OAuth callback URL'),
  "scopes": zod.array(zod.string().min(1).max(getConfigResponseDataAuthGoogleScopesItemMax).regex(getConfigResponseDataAuthGoogleScopesItemRegExp)).max(getConfigResponseDataAuthGoogleScopesMax).default(getConfigResponseDataAuthGoogleScopesDefault).describe('OAuth scopes to request')
}).optional().describe('Google OAuth configuration'),
  "github": zod.object({
  "enabled": zod.boolean().describe('Enable GitHub OAuth'),
  "clientId": zod.string().min(1).max(getConfigResponseDataAuthGithubClientIdMax).regex(getConfigResponseDataAuthGithubClientIdRegExp).optional().describe('GitHub OAuth App client ID'),
  "clientSecret": zod.string().min(1).max(getConfigResponseDataAuthGithubClientSecretMax).regex(getConfigResponseDataAuthGithubClientSecretRegExp).optional().describe('GitHub OAuth App client secret'),
  "redirectUrl": zod.url().max(getConfigResponseDataAuthGithubRedirectUrlMax).optional().describe('OAuth callback URL'),
  "scopes": zod.array(zod.string().max(getConfigResponseDataAuthGithubScopesItemMax).regex(getConfigResponseDataAuthGithubScopesItemRegExp)).max(getConfigResponseDataAuthGithubScopesMax).default(getConfigResponseDataAuthGithubScopesDefault).describe('OAuth scopes to request')
}).optional().describe('GitHub OAuth configuration'),
  "microsoft": zod.object({
  "enabled": zod.boolean().describe('Enable Microsoft OAuth'),
  "clientId": zod.uuid().min(1).max(getConfigResponseDataAuthMicrosoftClientIdMax).optional().describe('Azure AD Application (client) ID'),
  "clientSecret": zod.string().min(1).max(getConfigResponseDataAuthMicrosoftClientSecretMax).regex(getConfigResponseDataAuthMicrosoftClientSecretRegExp).optional().describe('Azure AD client secret'),
  "redirectUrl": zod.url().max(getConfigResponseDataAuthMicrosoftRedirectUrlMax).optional().describe('OAuth callback URL'),
  "tenant": zod.string().min(1).max(getConfigResponseDataAuthMicrosoftTenantMax).regex(getConfigResponseDataAuthMicrosoftTenantRegExp).default(getConfigResponseDataAuthMicrosoftTenantDefault).describe('Azure AD tenant ID (use \'common\' for multi-tenant)'),
  "scopes": zod.array(zod.string().max(getConfigResponseDataAuthMicrosoftScopesItemMax).regex(getConfigResponseDataAuthMicrosoftScopesItemRegExp)).max(getConfigResponseDataAuthMicrosoftScopesMax).default(getConfigResponseDataAuthMicrosoftScopesDefault).describe('OAuth scopes to request')
}).optional().describe('Microsoft/Azure AD OAuth configuration')
}).optional().describe('Authentication configuration for the API server'),
  "billing": zod.object({
  "enabled": zod.boolean().describe('Enable billing functionality'),
  "stripe": zod.object({
  "token": zod.string().min(1).max(getConfigResponseDataBillingStripeTokenMax).regex(getConfigResponseDataBillingStripeTokenRegExp).describe('Stripe secret API key'),
  "whsec": zod.string().min(1).max(getConfigResponseDataBillingStripeWhsecMax).regex(getConfigResponseDataBillingStripeWhsecRegExp).describe('Stripe webhook endpoint secret')
}).optional().describe('Stripe payment configuration')
}).optional().describe('Billing configuration for Stripe'),
  "database": zod.object({
  "enabled": zod.boolean().describe('Enable database'),
  "url": zod.url().min(1).max(getConfigResponseDataDatabaseUrlMax).describe('Database connection url/string'),
  "type": zod.enum(['postgresql', 'sqlite']).describe('Database type (postgresql or sqlite)'),
  "maxConns": zod.number().min(1).max(getConfigResponseDataDatabaseMaxConnsMax).describe('Maximum number of connections in pool (PostgreSQL)'),
  "minConns": zod.number().min(getConfigResponseDataDatabaseMinConnsMin).max(getConfigResponseDataDatabaseMinConnsMax).describe('Minimum number of connections in pool (PostgreSQL)'),
  "connMaxLifetime": zod.string().min(getConfigResponseDataDatabaseConnMaxLifetimeMin).max(getConfigResponseDataDatabaseConnMaxLifetimeMax).regex(getConfigResponseDataDatabaseConnMaxLifetimeRegExp).optional().describe('Maximum connection lifetime (e.g., \"30m\")'),
  "connMaxIdleTime": zod.string().min(getConfigResponseDataDatabaseConnMaxIdleTimeMin).max(getConfigResponseDataDatabaseConnMaxIdleTimeMax).regex(getConfigResponseDataDatabaseConnMaxIdleTimeRegExp).optional().describe('Maximum connection idle time (e.g., \"5m\")'),
  "healthCheckPeriod": zod.string().min(getConfigResponseDataDatabaseHealthCheckPeriodMin).max(getConfigResponseDataDatabaseHealthCheckPeriodMax).regex(getConfigResponseDataDatabaseHealthCheckPeriodRegExp).optional().describe('Health check period for connections (PostgreSQL)'),
  "runMigrations": zod.boolean().describe('Automatically run database migrations on startup'),
  "managed": zod.boolean().describe('Use managed database deployment'),
  "image": zod.object({
  "pullPolicy": zod.enum(['Always', 'IfNotPresent', 'Never']).describe('Kubernetes image pull policy'),
  "repository": zod.string().min(1).max(getConfigResponseDataDatabaseImageRepositoryMax).regex(getConfigResponseDataDatabaseImageRepositoryRegExp).optional().describe('Container image repository'),
  "tag": zod.string().min(1).max(getConfigResponseDataDatabaseImageTagMax).regex(getConfigResponseDataDatabaseImageTagRegExp).describe('Container image tag')
}).optional().describe('Container image configuration'),
  "persistence": zod.object({
  "enabled": zod.boolean().describe('Enable persistent storage'),
  "size": zod.string().min(1).max(getConfigResponseDataDatabasePersistenceSizeMax).regex(getConfigResponseDataDatabasePersistenceSizeRegExp).describe('Size of persistent volume')
}).optional().describe('Persistent storage configuration'),
  "resources": zod.object({
  "limits": zod.object({
  "cpu": zod.string().min(1).max(getConfigResponseDataDatabaseResourcesLimitsCpuMax).regex(getConfigResponseDataDatabaseResourcesLimitsCpuRegExp).describe('Maximum CPU allocation'),
  "memory": zod.string().min(1).max(getConfigResponseDataDatabaseResourcesLimitsMemoryMax).regex(getConfigResponseDataDatabaseResourcesLimitsMemoryRegExp).describe('Maximum memory allocation')
}).describe('Resource limits'),
  "requests": zod.object({
  "cpu": zod.string().min(1).max(getConfigResponseDataDatabaseResourcesRequestsCpuMax).regex(getConfigResponseDataDatabaseResourcesRequestsCpuRegExp).describe('Requested CPU allocation'),
  "memory": zod.string().min(1).max(getConfigResponseDataDatabaseResourcesRequestsMemoryMax).regex(getConfigResponseDataDatabaseResourcesRequestsMemoryRegExp).describe('Requested memory allocation')
}).describe('Resource requests')
}).optional().describe('Kubernetes resource configuration')
}).optional().describe('Database configuration for PostgreSQL'),
  "intelligence": zod.object({
  "embedding": zod.object({
  "type": zod.enum(['ollama', 'openai']).describe('LLM provider type'),
  "endpoint": zod.url().min(1).max(getConfigResponseDataIntelligenceEmbeddingEndpointMax).optional().describe('LLM service endpoint URL'),
  "token": zod.string().min(1).max(getConfigResponseDataIntelligenceEmbeddingTokenMax).regex(getConfigResponseDataIntelligenceEmbeddingTokenRegExp).optional().describe('Authentication token for LLM service')
}).optional().describe('Large Language Model configuration'),
  "llm": zod.object({
  "type": zod.enum(['ollama', 'openai']).describe('LLM provider type'),
  "endpoint": zod.url().min(1).max(getConfigResponseDataIntelligenceLlmEndpointMax).optional().describe('LLM service endpoint URL'),
  "token": zod.string().min(1).max(getConfigResponseDataIntelligenceLlmTokenMax).regex(getConfigResponseDataIntelligenceLlmTokenRegExp).optional().describe('Authentication token for LLM service')
}).optional().describe('Large Language Model configuration'),
  "runpod": zod.object({
  "enabled": zod.boolean().describe('Enable RunPod integration'),
  "token": zod.string().min(1).max(getConfigResponseDataIntelligenceRunpodTokenMax).regex(getConfigResponseDataIntelligenceRunpodTokenRegExp).optional().describe('RunPod API token')
}).optional().describe('RunPod serverless GPU configuration'),
  "scraper": zod.object({
  "enabled": zod.boolean().describe('Enable scraper service'),
  "managed": zod.boolean().optional().describe('Use managed scraper deployment'),
  "endpoint": zod.url().min(1).max(getConfigResponseDataIntelligenceScraperEndpointMax).optional().describe('Web scraper service endpoint URL'),
  "image": zod.object({
  "pullPolicy": zod.enum(['Always', 'IfNotPresent', 'Never']).describe('Kubernetes image pull policy'),
  "repository": zod.string().min(1).max(getConfigResponseDataIntelligenceScraperImageRepositoryMax).regex(getConfigResponseDataIntelligenceScraperImageRepositoryRegExp).optional().describe('Container image repository'),
  "tag": zod.string().min(1).max(getConfigResponseDataIntelligenceScraperImageTagMax).regex(getConfigResponseDataIntelligenceScraperImageTagRegExp).describe('Container image tag')
}).optional().describe('Container image configuration'),
  "resources": zod.object({
  "limits": zod.object({
  "cpu": zod.string().min(1).max(getConfigResponseDataIntelligenceScraperResourcesLimitsCpuMax).regex(getConfigResponseDataIntelligenceScraperResourcesLimitsCpuRegExp).describe('Maximum CPU allocation'),
  "memory": zod.string().min(1).max(getConfigResponseDataIntelligenceScraperResourcesLimitsMemoryMax).regex(getConfigResponseDataIntelligenceScraperResourcesLimitsMemoryRegExp).describe('Maximum memory allocation')
}).describe('Resource limits'),
  "requests": zod.object({
  "cpu": zod.string().min(1).max(getConfigResponseDataIntelligenceScraperResourcesRequestsCpuMax).regex(getConfigResponseDataIntelligenceScraperResourcesRequestsCpuRegExp).describe('Requested CPU allocation'),
  "memory": zod.string().min(1).max(getConfigResponseDataIntelligenceScraperResourcesRequestsMemoryMax).regex(getConfigResponseDataIntelligenceScraperResourcesRequestsMemoryRegExp).describe('Requested memory allocation')
}).describe('Resource requests')
}).optional().describe('Kubernetes resource configuration')
}).optional().describe('Web scraping service configuration'),
  "speech": zod.object({
  "enabled": zod.boolean().describe('Enable speech services'),
  "token": zod.string().min(1).max(getConfigResponseDataIntelligenceSpeechTokenMax).regex(getConfigResponseDataIntelligenceSpeechTokenRegExp).optional().describe('Speech-to-text service API token')
}).optional().describe('Speech recognition and TTS services'),
  "unstructured": zod.object({
  "enabled": zod.boolean().describe('Enable unstructured document parsing'),
  "managed": zod.boolean().optional().describe('Use managed unstructured deployment'),
  "image": zod.object({
  "pullPolicy": zod.enum(['Always', 'IfNotPresent', 'Never']).describe('Kubernetes image pull policy'),
  "repository": zod.string().min(1).max(getConfigResponseDataIntelligenceUnstructuredImageRepositoryMax).regex(getConfigResponseDataIntelligenceUnstructuredImageRepositoryRegExp).optional().describe('Container image repository'),
  "tag": zod.string().min(1).max(getConfigResponseDataIntelligenceUnstructuredImageTagMax).regex(getConfigResponseDataIntelligenceUnstructuredImageTagRegExp).describe('Container image tag')
}).optional().describe('Container image configuration'),
  "resources": zod.object({
  "limits": zod.object({
  "cpu": zod.string().min(1).max(getConfigResponseDataIntelligenceUnstructuredResourcesLimitsCpuMax).regex(getConfigResponseDataIntelligenceUnstructuredResourcesLimitsCpuRegExp).describe('Maximum CPU allocation'),
  "memory": zod.string().min(1).max(getConfigResponseDataIntelligenceUnstructuredResourcesLimitsMemoryMax).regex(getConfigResponseDataIntelligenceUnstructuredResourcesLimitsMemoryRegExp).describe('Maximum memory allocation')
}).describe('Resource limits'),
  "requests": zod.object({
  "cpu": zod.string().min(1).max(getConfigResponseDataIntelligenceUnstructuredResourcesRequestsCpuMax).regex(getConfigResponseDataIntelligenceUnstructuredResourcesRequestsCpuRegExp).describe('Requested CPU allocation'),
  "memory": zod.string().min(1).max(getConfigResponseDataIntelligenceUnstructuredResourcesRequestsMemoryMax).regex(getConfigResponseDataIntelligenceUnstructuredResourcesRequestsMemoryRegExp).describe('Requested memory allocation')
}).describe('Resource requests')
}).optional().describe('Kubernetes resource configuration')
}).optional().describe('Unstructured.io service for document parsing')
}).optional().describe('Intelligence configuration (LLMs, embeddings, scraper, speech, etc.)'),
  "logging": zod.object({
  "level": zod.enum(['fatal', 'error', 'warn', 'info', 'debug', 'trace', 'silent']).describe('Minimum log level to output'),
  "pretty": zod.boolean().describe('Enable pretty-printed logs for development')
}).optional().describe('Logging configuration'),
  "platform": zod.object({
  "enabled": zod.boolean().describe('Enable platform service'),
  "managed": zod.boolean().optional().describe('Use managed platform deployment'),
  "url": zod.url().max(getConfigResponseDataPlatformUrlMax).default(getConfigResponseDataPlatformUrlDefault).describe('Platform URL'),
  "image": zod.object({
  "pullPolicy": zod.enum(['Always', 'IfNotPresent', 'Never']).describe('Kubernetes image pull policy'),
  "repository": zod.string().min(1).max(getConfigResponseDataPlatformImageRepositoryMax).regex(getConfigResponseDataPlatformImageRepositoryRegExp).optional().describe('Container image repository'),
  "tag": zod.string().min(1).max(getConfigResponseDataPlatformImageTagMax).regex(getConfigResponseDataPlatformImageTagRegExp).describe('Container image tag')
}).optional().describe('Container image configuration'),
  "resources": zod.object({
  "limits": zod.object({
  "cpu": zod.string().min(1).max(getConfigResponseDataPlatformResourcesLimitsCpuMax).regex(getConfigResponseDataPlatformResourcesLimitsCpuRegExp).describe('Maximum CPU allocation'),
  "memory": zod.string().min(1).max(getConfigResponseDataPlatformResourcesLimitsMemoryMax).regex(getConfigResponseDataPlatformResourcesLimitsMemoryRegExp).describe('Maximum memory allocation')
}).describe('Resource limits'),
  "requests": zod.object({
  "cpu": zod.string().min(1).max(getConfigResponseDataPlatformResourcesRequestsCpuMax).regex(getConfigResponseDataPlatformResourcesRequestsCpuRegExp).describe('Requested CPU allocation'),
  "memory": zod.string().min(1).max(getConfigResponseDataPlatformResourcesRequestsMemoryMax).regex(getConfigResponseDataPlatformResourcesRequestsMemoryRegExp).describe('Requested memory allocation')
}).describe('Resource requests')
}).optional().describe('Kubernetes resource configuration')
}).optional().describe('Platform configuration (host, image, resources)'),
  "redis": zod.object({
  "enabled": zod.boolean().describe('Enable Redis'),
  "managed": zod.boolean().optional().describe('Use managed Redis deployment'),
  "auth": zod.string().min(1).max(getConfigResponseDataRedisAuthMax).regex(getConfigResponseDataRedisAuthRegExp).describe('Redis authentication password'),
  "ca": zod.string().min(1).max(getConfigResponseDataRedisCaMax).regex(getConfigResponseDataRedisCaRegExp).optional().describe('Certificate Authority for TLS (optional)'),
  "host": zod.string().min(1).max(getConfigResponseDataRedisHostMax).regex(getConfigResponseDataRedisHostRegExp).describe('Redis hostname or IP'),
  "port": zod.number().min(1).max(getConfigResponseDataRedisPortMax).describe('Redis port number'),
  "image": zod.object({
  "pullPolicy": zod.enum(['Always', 'IfNotPresent', 'Never']).describe('Kubernetes image pull policy'),
  "repository": zod.string().min(1).max(getConfigResponseDataRedisImageRepositoryMax).regex(getConfigResponseDataRedisImageRepositoryRegExp).optional().describe('Container image repository'),
  "tag": zod.string().min(1).max(getConfigResponseDataRedisImageTagMax).regex(getConfigResponseDataRedisImageTagRegExp).describe('Container image tag')
}).optional().describe('Container image configuration'),
  "persistence": zod.object({
  "enabled": zod.boolean().describe('Enable persistent storage'),
  "size": zod.string().min(1).max(getConfigResponseDataRedisPersistenceSizeMax).regex(getConfigResponseDataRedisPersistenceSizeRegExp).describe('Size of persistent volume')
}).optional().describe('Persistent storage configuration'),
  "resources": zod.object({
  "limits": zod.object({
  "cpu": zod.string().min(1).max(getConfigResponseDataRedisResourcesLimitsCpuMax).regex(getConfigResponseDataRedisResourcesLimitsCpuRegExp).describe('Maximum CPU allocation'),
  "memory": zod.string().min(1).max(getConfigResponseDataRedisResourcesLimitsMemoryMax).regex(getConfigResponseDataRedisResourcesLimitsMemoryRegExp).describe('Maximum memory allocation')
}).describe('Resource limits'),
  "requests": zod.object({
  "cpu": zod.string().min(1).max(getConfigResponseDataRedisResourcesRequestsCpuMax).regex(getConfigResponseDataRedisResourcesRequestsCpuRegExp).describe('Requested CPU allocation'),
  "memory": zod.string().min(1).max(getConfigResponseDataRedisResourcesRequestsMemoryMax).regex(getConfigResponseDataRedisResourcesRequestsMemoryRegExp).describe('Requested memory allocation')
}).describe('Resource requests')
}).optional().describe('Kubernetes resource configuration')
}).optional().describe('Redis configuration'),
  "storage": zod.object({
  "enabled": zod.boolean().describe('Enable object storage'),
  "managed": zod.boolean().optional().describe('Use managed storage deployment'),
  "accesskey": zod.string().min(1).max(getConfigResponseDataStorageAccesskeyMax).regex(getConfigResponseDataStorageAccesskeyRegExp).describe('MinIO/S3 access key ID'),
  "bucket": zod.string().min(1).max(getConfigResponseDataStorageBucketMax).regex(getConfigResponseDataStorageBucketRegExp).describe('S3 bucket name'),
  "endpoint": zod.url().min(1).max(getConfigResponseDataStorageEndpointMax).describe('MinIO server endpoint URL'),
  "secretkey": zod.string().min(1).max(getConfigResponseDataStorageSecretkeyMax).regex(getConfigResponseDataStorageSecretkeyRegExp).describe('MinIO/S3 secret access key'),
  "image": zod.object({
  "pullPolicy": zod.enum(['Always', 'IfNotPresent', 'Never']).describe('Kubernetes image pull policy'),
  "repository": zod.string().min(1).max(getConfigResponseDataStorageImageRepositoryMax).regex(getConfigResponseDataStorageImageRepositoryRegExp).optional().describe('Container image repository'),
  "tag": zod.string().min(1).max(getConfigResponseDataStorageImageTagMax).regex(getConfigResponseDataStorageImageTagRegExp).describe('Container image tag')
}).optional().describe('Container image configuration'),
  "persistence": zod.object({
  "enabled": zod.boolean().describe('Enable persistent storage'),
  "size": zod.string().min(1).max(getConfigResponseDataStoragePersistenceSizeMax).regex(getConfigResponseDataStoragePersistenceSizeRegExp).describe('Size of persistent volume')
}).optional().describe('Persistent storage configuration'),
  "resources": zod.object({
  "limits": zod.object({
  "cpu": zod.string().min(1).max(getConfigResponseDataStorageResourcesLimitsCpuMax).regex(getConfigResponseDataStorageResourcesLimitsCpuRegExp).describe('Maximum CPU allocation'),
  "memory": zod.string().min(1).max(getConfigResponseDataStorageResourcesLimitsMemoryMax).regex(getConfigResponseDataStorageResourcesLimitsMemoryRegExp).describe('Maximum memory allocation')
}).describe('Resource limits'),
  "requests": zod.object({
  "cpu": zod.string().min(1).max(getConfigResponseDataStorageResourcesRequestsCpuMax).regex(getConfigResponseDataStorageResourcesRequestsCpuRegExp).describe('Requested CPU allocation'),
  "memory": zod.string().min(1).max(getConfigResponseDataStorageResourcesRequestsMemoryMax).regex(getConfigResponseDataStorageResourcesRequestsMemoryRegExp).describe('Requested memory allocation')
}).describe('Resource requests')
}).optional().describe('Kubernetes resource configuration')
}).optional().describe('Object storage configuration for MinIO or S3-compatible services'),
  "kubernetes": zod.object({
  "infrastructure": zod.object({
  "images": zod.object({
  "imagePullSecrets": zod.array(zod.string().min(1).max(getConfigResponseDataKubernetesInfrastructureImagesImagePullSecretsItemMax).regex(getConfigResponseDataKubernetesInfrastructureImagesImagePullSecretsItemRegExp)).max(getConfigResponseDataKubernetesInfrastructureImagesImagePullSecretsMax).describe('List of Kubernetes secrets for pulling private images'),
  "imageRegistry": zod.string().max(getConfigResponseDataKubernetesInfrastructureImagesImageRegistryMax).regex(getConfigResponseDataKubernetesInfrastructureImagesImageRegistryRegExp).describe('Custom container registry URL (leave empty for Docker Hub)')
}).describe('Container image configuration'),
  "migrations": zod.object({
  "enabled": zod.boolean().describe('Enable automatic DB migrations')
}).describe('Database migration configuration'),
  "namespace": zod.string().min(1).max(getConfigResponseDataKubernetesInfrastructureNamespaceMax).regex(getConfigResponseDataKubernetesInfrastructureNamespaceRegExp).describe('Kubernetes namespace where all resources will be deployed'),
  "serviceAccount": zod.object({
  "create": zod.boolean().describe('Create dedicated service account'),
  "name": zod.string().max(getConfigResponseDataKubernetesInfrastructureServiceAccountNameMax).regex(getConfigResponseDataKubernetesInfrastructureServiceAccountNameRegExp).describe('Custom service account name')
}).describe('Kubernetes service account configuration')
}).optional().describe('Infrastructure configuration for Kubernetes deployments'),
  "ingress": zod.object({
  "enabled": zod.boolean().describe('Enable ingress'),
  "domain": zod.url().min(1).max(getConfigResponseDataKubernetesIngressDomainMax).default(getConfigResponseDataKubernetesIngressDomainDefault).describe('Primary domain name for ingress routing'),
  "tls": zod.object({
  "enabled": zod.boolean().describe('Enable TLS/SSL'),
  "issuer": zod.string().min(1).max(getConfigResponseDataKubernetesIngressTlsIssuerMax).regex(getConfigResponseDataKubernetesIngressTlsIssuerRegExp).default(getConfigResponseDataKubernetesIngressTlsIssuerDefault).describe('Cert-manager ClusterIssuer'),
  "secretName": zod.string().min(1).max(getConfigResponseDataKubernetesIngressTlsSecretNameMax).regex(getConfigResponseDataKubernetesIngressTlsSecretNameRegExp).default(getConfigResponseDataKubernetesIngressTlsSecretNameDefault).describe('Kubernetes secret name for TLS certificates')
}).optional().describe('TLS configuration')
}).optional().describe('Ingress configuration'),
  "monitoring": zod.object({
  "grafana": zod.object({
  "enabled": zod.boolean().describe('Enable Grafana'),
  "managed": zod.boolean().optional().describe('Use managed Grafana deployment'),
  "image": zod.object({
  "pullPolicy": zod.enum(['Always', 'IfNotPresent', 'Never']).describe('Kubernetes image pull policy'),
  "repository": zod.string().min(1).max(getConfigResponseDataKubernetesMonitoringGrafanaImageRepositoryMax).regex(getConfigResponseDataKubernetesMonitoringGrafanaImageRepositoryRegExp).optional().describe('Container image repository'),
  "tag": zod.string().min(1).max(getConfigResponseDataKubernetesMonitoringGrafanaImageTagMax).regex(getConfigResponseDataKubernetesMonitoringGrafanaImageTagRegExp).describe('Container image tag')
}).optional().describe('Container image configuration'),
  "resources": zod.object({
  "limits": zod.object({
  "cpu": zod.string().min(1).max(getConfigResponseDataKubernetesMonitoringGrafanaResourcesLimitsCpuMax).regex(getConfigResponseDataKubernetesMonitoringGrafanaResourcesLimitsCpuRegExp).describe('Maximum CPU allocation'),
  "memory": zod.string().min(1).max(getConfigResponseDataKubernetesMonitoringGrafanaResourcesLimitsMemoryMax).regex(getConfigResponseDataKubernetesMonitoringGrafanaResourcesLimitsMemoryRegExp).describe('Maximum memory allocation')
}).describe('Resource limits'),
  "requests": zod.object({
  "cpu": zod.string().min(1).max(getConfigResponseDataKubernetesMonitoringGrafanaResourcesRequestsCpuMax).regex(getConfigResponseDataKubernetesMonitoringGrafanaResourcesRequestsCpuRegExp).describe('Requested CPU allocation'),
  "memory": zod.string().min(1).max(getConfigResponseDataKubernetesMonitoringGrafanaResourcesRequestsMemoryMax).regex(getConfigResponseDataKubernetesMonitoringGrafanaResourcesRequestsMemoryRegExp).describe('Requested memory allocation')
}).describe('Resource requests')
}).optional().describe('Kubernetes resource configuration')
}).describe('Grafana monitoring dashboard configuration'),
  "loki": zod.object({
  "enabled": zod.boolean().describe('Enable Loki'),
  "managed": zod.boolean().optional().describe('Use managed Loki deployment'),
  "host": zod.url().min(1).max(getConfigResponseDataKubernetesMonitoringLokiHostMax).default(getConfigResponseDataKubernetesMonitoringLokiHostDefault).describe('Loki host URL'),
  "image": zod.object({
  "pullPolicy": zod.enum(['Always', 'IfNotPresent', 'Never']).describe('Kubernetes image pull policy'),
  "repository": zod.string().min(1).max(getConfigResponseDataKubernetesMonitoringLokiImageRepositoryMax).regex(getConfigResponseDataKubernetesMonitoringLokiImageRepositoryRegExp).optional().describe('Container image repository'),
  "tag": zod.string().min(1).max(getConfigResponseDataKubernetesMonitoringLokiImageTagMax).regex(getConfigResponseDataKubernetesMonitoringLokiImageTagRegExp).describe('Container image tag')
}).optional().describe('Container image configuration'),
  "resources": zod.object({
  "limits": zod.object({
  "cpu": zod.string().min(1).max(getConfigResponseDataKubernetesMonitoringLokiResourcesLimitsCpuMax).regex(getConfigResponseDataKubernetesMonitoringLokiResourcesLimitsCpuRegExp).describe('Maximum CPU allocation'),
  "memory": zod.string().min(1).max(getConfigResponseDataKubernetesMonitoringLokiResourcesLimitsMemoryMax).regex(getConfigResponseDataKubernetesMonitoringLokiResourcesLimitsMemoryRegExp).describe('Maximum memory allocation')
}).describe('Resource limits'),
  "requests": zod.object({
  "cpu": zod.string().min(1).max(getConfigResponseDataKubernetesMonitoringLokiResourcesRequestsCpuMax).regex(getConfigResponseDataKubernetesMonitoringLokiResourcesRequestsCpuRegExp).describe('Requested CPU allocation'),
  "memory": zod.string().min(1).max(getConfigResponseDataKubernetesMonitoringLokiResourcesRequestsMemoryMax).regex(getConfigResponseDataKubernetesMonitoringLokiResourcesRequestsMemoryRegExp).describe('Requested memory allocation')
}).describe('Resource requests')
}).optional().describe('Kubernetes resource configuration')
}).describe('Loki log aggregation service configuration')
}).optional().describe('Monitoring configuration for Grafana and Loki')
}).optional().describe('Kubernetes-specific deployment configuration')
}).optional().describe('Arches AI configuration schema')
}).describe('Configuration object')


/**
 * Check the health status of the application
 * @summary Get health status
 */
export const getHealthResponseTimestampMax = 64;export const getHealthResponseUptimeMin = 0;
export const getHealthResponseUptimeMax = 9223372036854776000;

export const getHealthResponse = zod.object({
  "services": zod.object({
  "database": zod.enum(['healthy', 'unhealthy', 'degraded']),
  "email": zod.enum(['healthy', 'unhealthy', 'degraded']),
  "redis": zod.enum(['healthy', 'unhealthy', 'degraded'])
}),
  "timestamp": zod.iso.datetime({}).max(getHealthResponseTimestampMax),
  "uptime": zod.number().min(getHealthResponseUptimeMin).max(getHealthResponseUptimeMax).describe('System uptime in seconds')
}).describe('Health check response')
