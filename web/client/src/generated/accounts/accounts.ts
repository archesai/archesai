/**
 * Generated by orval v7.13.0 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v0.0.0
 */
import {
  useMutation,
  useQuery,
  useSuspenseQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query';

import type {
  Account,
  BadRequestResponse,
  ConfirmEmailChangeBody,
  ConfirmEmailVerification200,
  ConfirmEmailVerificationBody,
  ConfirmPasswordResetBody,
  CreateAccountBody,
  DeleteAccount200,
  GetAccount200,
  ListAccounts200,
  ListAccountsParams,
  NoContentResponse,
  NotFoundResponse,
  Problem,
  RequestEmailChangeBody,
  RequestPasswordResetBody,
  UnauthorizedResponse,
  UpdateAccount200,
  UpdateAccountBody
} from '../orval.schemas';

import { customFetch } from '../../fetcher';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * List accounts
 * @summary List accounts
 */
export const getListAccountsUrl = (params?: ListAccountsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    const explodeParameters = ["sort"];

    if (Array.isArray(value) && explodeParameters.includes(key)) {
      value.forEach((v) => normalizedParams.append(key, v === null ? 'null' : v.toString()));
      return;
    }
      
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `/accounts?${stringifiedParams}` : `/accounts`
}

export const listAccounts = async (params?: ListAccountsParams, options?: RequestInit): Promise<ListAccounts200> => {
  
  return customFetch<ListAccounts200>(getListAccountsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getListAccountsQueryKey = (params?: ListAccountsParams,) => {
    return [`/accounts`, ...(params ? [params]: [])] as const;
    }

    
export const getListAccountsQueryOptions = <TData = Awaited<ReturnType<typeof listAccounts>>, TError = BadRequestResponse | UnauthorizedResponse>(params?: ListAccountsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listAccounts>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListAccountsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listAccounts>>> = ({ signal }) => listAccounts(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listAccounts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListAccountsQueryResult = NonNullable<Awaited<ReturnType<typeof listAccounts>>>
export type ListAccountsQueryError = BadRequestResponse | UnauthorizedResponse


export function useListAccounts<TData = Awaited<ReturnType<typeof listAccounts>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params: undefined |  ListAccountsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listAccounts>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listAccounts>>,
          TError,
          Awaited<ReturnType<typeof listAccounts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListAccounts<TData = Awaited<ReturnType<typeof listAccounts>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: ListAccountsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listAccounts>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listAccounts>>,
          TError,
          Awaited<ReturnType<typeof listAccounts>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListAccounts<TData = Awaited<ReturnType<typeof listAccounts>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: ListAccountsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listAccounts>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List accounts
 */

export function useListAccounts<TData = Awaited<ReturnType<typeof listAccounts>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: ListAccountsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listAccounts>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListAccountsQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getListAccountsSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof listAccounts>>, TError = BadRequestResponse | UnauthorizedResponse>(params?: ListAccountsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof listAccounts>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListAccountsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listAccounts>>> = ({ signal }) => listAccounts(params, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof listAccounts>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListAccountsSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof listAccounts>>>
export type ListAccountsSuspenseQueryError = BadRequestResponse | UnauthorizedResponse


export function useListAccountsSuspense<TData = Awaited<ReturnType<typeof listAccounts>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params: undefined |  ListAccountsParams, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof listAccounts>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListAccountsSuspense<TData = Awaited<ReturnType<typeof listAccounts>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: ListAccountsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof listAccounts>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListAccountsSuspense<TData = Awaited<ReturnType<typeof listAccounts>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: ListAccountsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof listAccounts>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List accounts
 */

export function useListAccountsSuspense<TData = Awaited<ReturnType<typeof listAccounts>>, TError = BadRequestResponse | UnauthorizedResponse>(
 params?: ListAccountsParams, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof listAccounts>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListAccountsSuspenseQueryOptions(params,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Register a new user account with email and password
 * @summary Create account
 */
export const getCreateAccountUrl = () => {


  

  return `/accounts`
}

export const createAccount = async (createAccountBody: CreateAccountBody, options?: RequestInit): Promise<Account> => {
  
  return customFetch<Account>(getCreateAccountUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createAccountBody,)
  }
);}




export const getCreateAccountMutationOptions = <TError = BadRequestResponse | Problem,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAccount>>, TError,{data: CreateAccountBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof createAccount>>, TError,{data: CreateAccountBody}, TContext> => {

const mutationKey = ['createAccount'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createAccount>>, {data: CreateAccountBody}> = (props) => {
          const {data} = props ?? {};

          return  createAccount(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateAccountMutationResult = NonNullable<Awaited<ReturnType<typeof createAccount>>>
    export type CreateAccountMutationBody = CreateAccountBody
    export type CreateAccountMutationError = BadRequestResponse | Problem

    /**
 * @summary Create account
 */
export const useCreateAccount = <TError = BadRequestResponse | Problem,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAccount>>, TError,{data: CreateAccountBody}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createAccount>>,
        TError,
        {data: CreateAccountBody},
        TContext
      > => {

      const mutationOptions = getCreateAccountMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Get an account
 * @summary Find an account
 */
export const getGetAccountUrl = (id: string | undefined | null,) => {


  

  return `/accounts/${id}`
}

export const getAccount = async (id: string | undefined | null, options?: RequestInit): Promise<GetAccount200> => {
  
  return customFetch<GetAccount200>(getGetAccountUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export const getGetAccountQueryKey = (id?: string | undefined | null,) => {
    return [`/accounts/${id}`] as const;
    }

    
export const getGetAccountQueryOptions = <TData = Awaited<ReturnType<typeof getAccount>>, TError = NotFoundResponse>(id: string | undefined | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAccountQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAccount>>> = ({ signal }) => getAccount(id, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAccountQueryResult = NonNullable<Awaited<ReturnType<typeof getAccount>>>
export type GetAccountQueryError = NotFoundResponse


export function useGetAccount<TData = Awaited<ReturnType<typeof getAccount>>, TError = NotFoundResponse>(
 id: string | undefined | null, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAccount>>,
          TError,
          Awaited<ReturnType<typeof getAccount>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAccount<TData = Awaited<ReturnType<typeof getAccount>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAccount>>,
          TError,
          Awaited<ReturnType<typeof getAccount>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAccount<TData = Awaited<ReturnType<typeof getAccount>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Find an account
 */

export function useGetAccount<TData = Awaited<ReturnType<typeof getAccount>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAccountQueryOptions(id,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAccountSuspenseQueryOptions = <TData = Awaited<ReturnType<typeof getAccount>>, TError = NotFoundResponse>(id: string | undefined | null, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAccountQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAccount>>> = ({ signal }) => getAccount(id, { signal, ...requestOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAccountSuspenseQueryResult = NonNullable<Awaited<ReturnType<typeof getAccount>>>
export type GetAccountSuspenseQueryError = NotFoundResponse


export function useGetAccountSuspense<TData = Awaited<ReturnType<typeof getAccount>>, TError = NotFoundResponse>(
 id: string | undefined | null, options: { query:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAccountSuspense<TData = Awaited<ReturnType<typeof getAccount>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAccountSuspense<TData = Awaited<ReturnType<typeof getAccount>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient
  ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Find an account
 */

export function useGetAccountSuspense<TData = Awaited<ReturnType<typeof getAccount>>, TError = NotFoundResponse>(
 id: string | undefined | null, options?: { query?:Partial<UseSuspenseQueryOptions<Awaited<ReturnType<typeof getAccount>>, TError, TData>>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient 
 ):  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAccountSuspenseQueryOptions(id,options)

  const query = useSuspenseQuery(queryOptions , queryClient) as  UseSuspenseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Update an account
 * @summary Update an account
 */
export const getUpdateAccountUrl = (id: string | undefined | null,) => {


  

  return `/accounts/${id}`
}

export const updateAccount = async (id: string | undefined | null,
    updateAccountBody: UpdateAccountBody, options?: RequestInit): Promise<UpdateAccount200> => {
  
  return customFetch<UpdateAccount200>(getUpdateAccountUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateAccountBody,)
  }
);}




export const getUpdateAccountMutationOptions = <TError = NotFoundResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAccount>>, TError,{id: string | undefined | null;data: UpdateAccountBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof updateAccount>>, TError,{id: string | undefined | null;data: UpdateAccountBody}, TContext> => {

const mutationKey = ['updateAccount'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateAccount>>, {id: string | undefined | null;data: UpdateAccountBody}> = (props) => {
          const {id,data} = props ?? {};

          return  updateAccount(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateAccountMutationResult = NonNullable<Awaited<ReturnType<typeof updateAccount>>>
    export type UpdateAccountMutationBody = UpdateAccountBody
    export type UpdateAccountMutationError = NotFoundResponse

    /**
 * @summary Update an account
 */
export const useUpdateAccount = <TError = NotFoundResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAccount>>, TError,{id: string | undefined | null;data: UpdateAccountBody}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateAccount>>,
        TError,
        {id: string | undefined | null;data: UpdateAccountBody},
        TContext
      > => {

      const mutationOptions = getUpdateAccountMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Delete an account
 * @summary Delete an account
 */
export const getDeleteAccountUrl = (id: string | undefined | null,) => {


  

  return `/accounts/${id}`
}

export const deleteAccount = async (id: string | undefined | null, options?: RequestInit): Promise<DeleteAccount200> => {
  
  return customFetch<DeleteAccount200>(getDeleteAccountUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
);}




export const getDeleteAccountMutationOptions = <TError = NotFoundResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAccount>>, TError,{id: string | undefined | null}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAccount>>, TError,{id: string | undefined | null}, TContext> => {

const mutationKey = ['deleteAccount'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAccount>>, {id: string | undefined | null}> = (props) => {
          const {id} = props ?? {};

          return  deleteAccount(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAccountMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAccount>>>
    
    export type DeleteAccountMutationError = NotFoundResponse

    /**
 * @summary Delete an account
 */
export const useDeleteAccount = <TError = NotFoundResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAccount>>, TError,{id: string | undefined | null}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAccount>>,
        TError,
        {id: string | undefined | null},
        TContext
      > => {

      const mutationOptions = getDeleteAccountMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * This endpoint will confirm your e-mail with a token
 * @summary Confirm e-mail verification
 */
export const getConfirmEmailVerificationUrl = () => {


  

  return `/accounts/email-verification/verify`
}

export const confirmEmailVerification = async (confirmEmailVerificationBody: ConfirmEmailVerificationBody, options?: RequestInit): Promise<ConfirmEmailVerification200> => {
  
  return customFetch<ConfirmEmailVerification200>(getConfirmEmailVerificationUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      confirmEmailVerificationBody,)
  }
);}




export const getConfirmEmailVerificationMutationOptions = <TError = UnauthorizedResponse | NotFoundResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof confirmEmailVerification>>, TError,{data: ConfirmEmailVerificationBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof confirmEmailVerification>>, TError,{data: ConfirmEmailVerificationBody}, TContext> => {

const mutationKey = ['confirmEmailVerification'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof confirmEmailVerification>>, {data: ConfirmEmailVerificationBody}> = (props) => {
          const {data} = props ?? {};

          return  confirmEmailVerification(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ConfirmEmailVerificationMutationResult = NonNullable<Awaited<ReturnType<typeof confirmEmailVerification>>>
    export type ConfirmEmailVerificationMutationBody = ConfirmEmailVerificationBody
    export type ConfirmEmailVerificationMutationError = UnauthorizedResponse | NotFoundResponse

    /**
 * @summary Confirm e-mail verification
 */
export const useConfirmEmailVerification = <TError = UnauthorizedResponse | NotFoundResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof confirmEmailVerification>>, TError,{data: ConfirmEmailVerificationBody}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof confirmEmailVerification>>,
        TError,
        {data: ConfirmEmailVerificationBody},
        TContext
      > => {

      const mutationOptions = getConfirmEmailVerificationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * This endpoint will send an e-mail verification link to you. ADMIN ONLY.
 * @summary Request e-mail verification
 */
export const getRequestEmailVerificationUrl = () => {


  

  return `/accounts/email-verification/request`
}

export const requestEmailVerification = async ( options?: RequestInit): Promise<NoContentResponse> => {
  
  return customFetch<NoContentResponse>(getRequestEmailVerificationUrl(),
  {      
    ...options,
    method: 'POST'
    
    
  }
);}




export const getRequestEmailVerificationMutationOptions = <TError = BadRequestResponse | UnauthorizedResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof requestEmailVerification>>, TError,void, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof requestEmailVerification>>, TError,void, TContext> => {

const mutationKey = ['requestEmailVerification'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof requestEmailVerification>>, void> = () => {
          

          return  requestEmailVerification(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RequestEmailVerificationMutationResult = NonNullable<Awaited<ReturnType<typeof requestEmailVerification>>>
    
    export type RequestEmailVerificationMutationError = BadRequestResponse | UnauthorizedResponse

    /**
 * @summary Request e-mail verification
 */
export const useRequestEmailVerification = <TError = BadRequestResponse | UnauthorizedResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof requestEmailVerification>>, TError,void, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof requestEmailVerification>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getRequestEmailVerificationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * This endpoint will request a password reset link
 * @summary Request password reset
 */
export const getRequestPasswordResetUrl = () => {


  

  return `/accounts/password-reset/request`
}

export const requestPasswordReset = async (requestPasswordResetBody: RequestPasswordResetBody, options?: RequestInit): Promise<NoContentResponse> => {
  
  return customFetch<NoContentResponse>(getRequestPasswordResetUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      requestPasswordResetBody,)
  }
);}




export const getRequestPasswordResetMutationOptions = <TError = BadRequestResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof requestPasswordReset>>, TError,{data: RequestPasswordResetBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof requestPasswordReset>>, TError,{data: RequestPasswordResetBody}, TContext> => {

const mutationKey = ['requestPasswordReset'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof requestPasswordReset>>, {data: RequestPasswordResetBody}> = (props) => {
          const {data} = props ?? {};

          return  requestPasswordReset(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RequestPasswordResetMutationResult = NonNullable<Awaited<ReturnType<typeof requestPasswordReset>>>
    export type RequestPasswordResetMutationBody = RequestPasswordResetBody
    export type RequestPasswordResetMutationError = BadRequestResponse

    /**
 * @summary Request password reset
 */
export const useRequestPasswordReset = <TError = BadRequestResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof requestPasswordReset>>, TError,{data: RequestPasswordResetBody}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof requestPasswordReset>>,
        TError,
        {data: RequestPasswordResetBody},
        TContext
      > => {

      const mutationOptions = getRequestPasswordResetMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * This endpoint will verify your password change with a token
 * @summary Verify password reset
 */
export const getConfirmPasswordResetUrl = () => {


  

  return `/accounts/password-reset/verify`
}

export const confirmPasswordReset = async (confirmPasswordResetBody: ConfirmPasswordResetBody, options?: RequestInit): Promise<NoContentResponse> => {
  
  return customFetch<NoContentResponse>(getConfirmPasswordResetUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      confirmPasswordResetBody,)
  }
);}




export const getConfirmPasswordResetMutationOptions = <TError = UnauthorizedResponse | NotFoundResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof confirmPasswordReset>>, TError,{data: ConfirmPasswordResetBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof confirmPasswordReset>>, TError,{data: ConfirmPasswordResetBody}, TContext> => {

const mutationKey = ['confirmPasswordReset'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof confirmPasswordReset>>, {data: ConfirmPasswordResetBody}> = (props) => {
          const {data} = props ?? {};

          return  confirmPasswordReset(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ConfirmPasswordResetMutationResult = NonNullable<Awaited<ReturnType<typeof confirmPasswordReset>>>
    export type ConfirmPasswordResetMutationBody = ConfirmPasswordResetBody
    export type ConfirmPasswordResetMutationError = UnauthorizedResponse | NotFoundResponse

    /**
 * @summary Verify password reset
 */
export const useConfirmPasswordReset = <TError = UnauthorizedResponse | NotFoundResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof confirmPasswordReset>>, TError,{data: ConfirmPasswordResetBody}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof confirmPasswordReset>>,
        TError,
        {data: ConfirmPasswordResetBody},
        TContext
      > => {

      const mutationOptions = getConfirmPasswordResetMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * This endpoint will request your e-mail change with a token
 * @summary Request e-mail change
 */
export const getRequestEmailChangeUrl = () => {


  

  return `/accounts/email-change/request`
}

export const requestEmailChange = async (requestEmailChangeBody: RequestEmailChangeBody, options?: RequestInit): Promise<NoContentResponse> => {
  
  return customFetch<NoContentResponse>(getRequestEmailChangeUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      requestEmailChangeBody,)
  }
);}




export const getRequestEmailChangeMutationOptions = <TError = BadRequestResponse | UnauthorizedResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof requestEmailChange>>, TError,{data: RequestEmailChangeBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof requestEmailChange>>, TError,{data: RequestEmailChangeBody}, TContext> => {

const mutationKey = ['requestEmailChange'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof requestEmailChange>>, {data: RequestEmailChangeBody}> = (props) => {
          const {data} = props ?? {};

          return  requestEmailChange(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RequestEmailChangeMutationResult = NonNullable<Awaited<ReturnType<typeof requestEmailChange>>>
    export type RequestEmailChangeMutationBody = RequestEmailChangeBody
    export type RequestEmailChangeMutationError = BadRequestResponse | UnauthorizedResponse

    /**
 * @summary Request e-mail change
 */
export const useRequestEmailChange = <TError = BadRequestResponse | UnauthorizedResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof requestEmailChange>>, TError,{data: RequestEmailChangeBody}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof requestEmailChange>>,
        TError,
        {data: RequestEmailChangeBody},
        TContext
      > => {

      const mutationOptions = getRequestEmailChangeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * This endpoint will verify your e-mail change with a token
 * @summary Verify e-mail change
 */
export const getConfirmEmailChangeUrl = () => {


  

  return `/accounts/email-change/verify`
}

export const confirmEmailChange = async (confirmEmailChangeBody: ConfirmEmailChangeBody, options?: RequestInit): Promise<NotFoundResponse> => {
  
  return customFetch<NotFoundResponse>(getConfirmEmailChangeUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      confirmEmailChangeBody,)
  }
);}




export const getConfirmEmailChangeMutationOptions = <TError = UnauthorizedResponse | NotFoundResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof confirmEmailChange>>, TError,{data: ConfirmEmailChangeBody}, TContext>, request?: SecondParameter<typeof customFetch>}
): UseMutationOptions<Awaited<ReturnType<typeof confirmEmailChange>>, TError,{data: ConfirmEmailChangeBody}, TContext> => {

const mutationKey = ['confirmEmailChange'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof confirmEmailChange>>, {data: ConfirmEmailChangeBody}> = (props) => {
          const {data} = props ?? {};

          return  confirmEmailChange(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ConfirmEmailChangeMutationResult = NonNullable<Awaited<ReturnType<typeof confirmEmailChange>>>
    export type ConfirmEmailChangeMutationBody = ConfirmEmailChangeBody
    export type ConfirmEmailChangeMutationError = UnauthorizedResponse | NotFoundResponse

    /**
 * @summary Verify e-mail change
 */
export const useConfirmEmailChange = <TError = UnauthorizedResponse | NotFoundResponse,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof confirmEmailChange>>, TError,{data: ConfirmEmailChangeBody}, TContext>, request?: SecondParameter<typeof customFetch>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof confirmEmailChange>>,
        TError,
        {data: ConfirmEmailChangeBody},
        TContext
      > => {

      const mutationOptions = getConfirmEmailChangeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    