// Package main converts PostgreSQL migration files to SQLite format
package main

import (
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"
)

func main() {
	postgresDir := filepath.Join("internal", "migrations", "postgresql")
	sqliteDir := filepath.Join("internal", "migrations", "sqlite")

	// Ensure SQLite directory exists
	if err := os.MkdirAll(sqliteDir, 0755); err != nil {
		log.Fatalf("Error creating SQLite directory: %v", err)
	}

	// Read all SQL files from PostgreSQL directory
	files, err := os.ReadDir(postgresDir)
	if err != nil {
		log.Fatalf("Error reading PostgreSQL directory: %v", err)
	}

	convertedCount := 0
	for _, file := range files {
		if !strings.HasSuffix(file.Name(), ".sql") {
			continue
		}

		postgresPath := filepath.Join(postgresDir, file.Name())
		sqlitePath := filepath.Join(sqliteDir, file.Name())

		// Read PostgreSQL file
		content, err := os.ReadFile(postgresPath)
		if err != nil {
			log.Printf("Error reading %s: %v", postgresPath, err)
			continue
		}

		// Convert PostgreSQL to SQLite
		sqliteContent := convertToSQLite(string(content))

		// Write SQLite file
		if err := os.WriteFile(sqlitePath, []byte(sqliteContent), 0644); err != nil {
			log.Printf("Error writing %s: %v", sqlitePath, err)
			continue
		}

		fmt.Printf("Converted: %s -> %s\n", file.Name(), file.Name())
		convertedCount++
	}
}

func convertToSQLite(content string) string {
	// Replace UUID with TEXT (SQLite doesn't have native UUID type)
	content = strings.ReplaceAll(content, "UUID", "TEXT")

	// Remove DEFAULT gen_random_uuid() as SQLite doesn't support it
	// We'll generate UUIDs in the application layer
	content = strings.ReplaceAll(content, " DEFAULT gen_random_uuid()", "")

	// Replace TIMESTAMPTZ with TEXT
	content = strings.ReplaceAll(content, "TIMESTAMPTZ", "TEXT")

	// Replace CURRENT_TIMESTAMP with SQLite datetime function
	content = strings.ReplaceAll(content, "DEFAULT CURRENT_TIMESTAMP", "DEFAULT (strftime('%Y-%m-%d %H:%M:%f', 'now'))")

	// Replace DOUBLE PRECISION with REAL
	content = strings.ReplaceAll(content, "DOUBLE PRECISION", "REAL")

	// Remove ON DELETE CASCADE and ON UPDATE CASCADE from foreign keys
	// SQLite supports these but they need to be enabled with PRAGMA foreign_keys = ON
	// For simplicity, we'll keep them as they work in SQLite 3.6.19+

	// Handle BOOLEAN type (SQLite uses INTEGER for boolean)
	content = strings.ReplaceAll(content, "BOOLEAN", "INTEGER")

	// Fix boolean defaults
	content = strings.ReplaceAll(content, "DEFAULT false", "DEFAULT 0")
	content = strings.ReplaceAll(content, "DEFAULT true", "DEFAULT 1")

	// Add header comment
	header := `-- SQLite schema (auto-generated from PostgreSQL)
-- Generated by internal/database/migrations/convert.go
-- DO NOT EDIT MANUALLY - Edit PostgreSQL schema and regenerate

`

	return header + content
}
