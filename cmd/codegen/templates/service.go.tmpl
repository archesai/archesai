package {{.Package}}

import (
	"context"
	"errors"
	"fmt"
	{{if .HasSlugField}}"regexp"
	"strings"{{end}}

	"go.uber.org/zap"
)

// Service handles {{.LowerEntity}} business logic
type Service struct {
	repo   *Repository
	logger *zap.Logger
}

// NewService creates a new {{.LowerEntity}} service
func NewService(repo *Repository, logger *zap.Logger) *Service {
	return &Service{
		repo:   repo,
		logger: logger,
	}
}

// Create creates a new {{.LowerEntity}}
func (s *Service) Create(ctx context.Context, params Create{{.Entity}}Params) (*{{.Entity}}, error) {
	// Create {{.LowerEntity}}
	{{.LowerEntity}}, err := s.repo.Create(ctx, params)
	if err != nil {
		s.logger.Error("failed to create {{.LowerEntity}}", 
			{{range .LogFields}}zap.String("{{.LogName}}", params.{{.Name}}),
			{{end}}zap.Error(err))
		return nil, fmt.Errorf("failed to create {{.LowerEntity}}: %w", err)
	}

	s.logger.Info("{{.LowerEntity}} created", 
		zap.String("id", {{.LowerEntity}}.Id))

	return {{.LowerEntity}}, nil
}

// GetByID retrieves a {{.LowerEntity}} by Id
func (s *Service) GetByID(ctx context.Context, id string) (*{{.Entity}}, error) {
	{{.LowerEntity}}, err := s.repo.GetByID(ctx, id)
	if err != nil {
		if errors.Is(err, Err{{.Entity}}NotFound) {
			return nil, err
		}
		s.logger.Error("failed to get {{.LowerEntity}}", 
			zap.String("id", id),
			zap.Error(err))
		return nil, fmt.Errorf("failed to get {{.LowerEntity}}: %w", err)
	}

	return {{.LowerEntity}}, nil
}

{{if .HasSlugField}}// GetBySlug retrieves a {{.LowerEntity}} by slug
func (s *Service) GetBySlug(ctx context.Context, slug string) (*{{.Entity}}, error) {
	{{.LowerEntity}}, err := s.repo.GetBySlug(ctx, slug)
	if err != nil {
		if errors.Is(err, Err{{.Entity}}NotFound) {
			return nil, err
		}
		s.logger.Error("failed to get {{.LowerEntity}} by slug", 
			zap.String("slug", slug),
			zap.Error(err))
		return nil, fmt.Errorf("failed to get {{.LowerEntity}}: %w", err)
	}

	return {{.LowerEntity}}, nil
}
{{end}}

// Update updates a {{.LowerEntity}}
func (s *Service) Update(ctx context.Context, id string, params Update{{.Entity}}Params) (*{{.Entity}}, error) {
	// Verify {{.LowerEntity}} exists
	_, err := s.repo.GetByID(ctx, id)
	if err != nil {
		if errors.Is(err, Err{{.Entity}}NotFound) {
			return nil, err
		}
		s.logger.Error("failed to get {{.LowerEntity}} for update",
			zap.String("id", id),
			zap.Error(err))
		return nil, fmt.Errorf("failed to get {{.LowerEntity}}: %w", err)
	}

	// Update {{.LowerEntity}}
	{{.LowerEntity}}, err := s.repo.Update(ctx, id, params)
	if err != nil {
		s.logger.Error("failed to update {{.LowerEntity}}", 
			zap.String("id", id),
			zap.Error(err))
		return nil, fmt.Errorf("failed to update {{.LowerEntity}}: %w", err)
	}

	s.logger.Info("{{.LowerEntity}} updated", 
		zap.String("id", {{.LowerEntity}}.Id))

	return {{.LowerEntity}}, nil
}

// Delete deletes a {{.LowerEntity}}
func (s *Service) Delete(ctx context.Context, id string) error {
	err := s.repo.Delete(ctx, id)
	if err != nil {
		if errors.Is(err, Err{{.Entity}}NotFound) {
			return err
		}
		s.logger.Error("failed to delete {{.LowerEntity}}", 
			zap.String("id", id),
			zap.Error(err))
		return fmt.Errorf("failed to delete {{.LowerEntity}}: %w", err)
	}

	s.logger.Info("{{.LowerEntity}} deleted", 
		zap.String("id", id))

	return nil
}

// List lists {{.LowerEntity}}s with pagination
func (s *Service) List(ctx context.Context, params List{{.Entity}}sParams) ([]*{{.Entity}}, int64, error) {
	// Get total count
	totalCount, err := s.repo.Count(ctx)
	if err != nil {
		s.logger.Error("failed to count {{.LowerEntity}}s", zap.Error(err))
		return nil, 0, fmt.Errorf("failed to count {{.LowerEntity}}s: %w", err)
	}

	// Get {{.LowerEntity}}s
	{{.LowerEntity}}s, err := s.repo.List(ctx, params)
	if err != nil {
		s.logger.Error("failed to list {{.LowerEntity}}s", zap.Error(err))
		return nil, 0, fmt.Errorf("failed to list {{.LowerEntity}}s: %w", err)
	}

	return {{.LowerEntity}}s, totalCount, nil
}

{{if .HasSlugField}}// normalizeSlug normalizes a slug by converting to lowercase and replacing spaces with hyphens
func (s *Service) normalizeSlug(slug string) string {
	slug = strings.ToLower(slug)
	slug = strings.TrimSpace(slug)
	slug = regexp.MustCompile(`[^a-z0-9-]+`).ReplaceAllString(slug, "-")
	slug = regexp.MustCompile(`-+`).ReplaceAllString(slug, "-")
	slug = strings.Trim(slug, "-")
	return slug
}

// isValidSlug checks if a slug is valid
func (s *Service) isValidSlug(slug string) bool {
	if len(slug) < 3 || len(slug) > 50 {
		return false
	}
	matched, _ := regexp.MatchString(`^[a-z0-9][a-z0-9-]*[a-z0-9]$`, slug)
	return matched
}
{{end}}