# Task ID: 26
# Title: Complete OpenAPI codegen system
# Status: in-progress
# Dependencies: None
# Priority: high
# Description: Finish comprehensive codegen functionality to generate all boilerplate from OpenAPI specs
# Details:
Build a complete OpenAPI-driven code generation system that automatically generates all necessary boilerplate code from the api/openapi.yaml specification.

Key Components:
- Repository interfaces and implementations (PostgreSQL/SQLite)
- HTTP handlers with proper request/response handling
- Type definitions with validation
- Cache interfaces and Redis/memory implementations
- Event publishers and subscribers
- Database adapters with type conversion
- Comprehensive test boilerplate

Technical Requirements:
- Source: api/openapi.yaml (single source of truth)
- Auto-detect domains from OpenAPI tags
- Generate "DO NOT EDIT" headers on all files
- All generators enabled (repo, cache, events, handlers, adapters, tests)
- Type-safe adapters between layers
- Integration with existing make generate command
- Remove dependency on codegen.yaml config

Domain Architecture Considerations:
- Consider separating Users from Auth domain
- Intelligent tag-based domain inference
- Consistent file naming and structure
- Proper import path management

# Test Strategy:
Generate comprehensive test boilerplate including mock repositories, handler tests, service tests, and integration tests. Test generation should include setup/teardown, common test cases, and proper mocking patterns.

# Subtasks:
## 1. Validate existing codegen framework [done]
### Dependencies: None
### Description: Verify the core codegen framework in internal/codegen/ is complete and all components are working correctly
### Details:
Review the existing codegen framework structure, verify all files are present (codegen.go, parser.go, templates/), test basic code generation functionality, and ensure the make generate command integration is working properly.

## 2. Test repository interface generation [done]
### Dependencies: 26.1
### Description: Validate that repository interfaces and PostgreSQL/SQLite implementations are generated correctly from OpenAPI specs
### Details:
Run codegen to generate repository interfaces, verify PostgreSQL and SQLite implementations are created, test that generated code compiles and follows the expected patterns for database operations.
<info added on 2025-09-08T15:17:08.372Z>
Repository interface generation is working correctly, generating all three expected files (interface, PostgreSQL, and SQLite implementations). However, critical issues identified in PostgreSQL and SQLite templates: 1) Templates are hardcoded for specific entities (User, Session, Account) instead of being generic for all entity types, 2) Method naming inconsistencies (using GetByID instead of Get), 3) Missing proper error handling patterns. Templates require refactoring to use dynamic entity types and standardized method signatures before this subtask can be marked complete.
</info added on 2025-09-08T15:17:08.372Z>
<info added on 2025-09-08T15:29:40.497Z>
Repository generation confirmed working - all three files (interface, PostgreSQL, SQLite) are generated as expected. However, template implementation is fundamentally flawed with hardcoded entity logic (User/Session/Account), missing conversion functions, and incorrect method names. Generated code is invalid and non-functional. Template refactoring required as separate task to make repository generation truly functional.
</info added on 2025-09-08T15:29:40.497Z>

## 3. Verify cache interface generation [in-progress]
### Dependencies: 26.1
### Description: Test cache interfaces and Redis/memory implementations are generated properly
### Details:
Execute cache generation from OpenAPI specs, verify Redis and memory cache implementations are created with proper interfaces, test that cache operations compile and follow expected patterns.

## 8. Fix repository template implementation [pending]
### Dependencies: 26.2
### Description: Refactor repository templates to generate valid, working code for all entity types
### Details:
The repository templates (repository_postgres.go.tmpl and repository_sqlite.go.tmpl) need complete refactoring. Current issues: 1) Templates are hardcoded for User/Session/Account entities only, 2) Missing conversion functions like AccountDBToAPI, 3) Incorrect method signatures (GetByID vs Get), 4) Type mismatches between sql.DB and postgresql.DBTX, 5) Incomplete error handling. Need to create generic templates that work with any entity type defined in OpenAPI specs.

## 4. Validate event system generation [pending]
### Dependencies: 26.1
### Description: Ensure event publishers and subscribers are generated correctly with proper type safety
### Details:
Test event generation functionality, verify publishers and subscribers are created with correct types, ensure event handling follows the established patterns and integrates properly with the existing system.

## 5. Test HTTP handler generation [pending]
### Dependencies: 26.1
### Description: Verify HTTP handlers with request/response handling are generated correctly
### Details:
Generate HTTP handlers from OpenAPI specs, verify proper request/response types are used, test that handlers follow Echo framework patterns and include proper error handling and validation.

## 6. Validate domain auto-detection [pending]
### Dependencies: 26.2, 26.3, 26.4, 26.5
### Description: Test that domains are automatically detected from OpenAPI tags without requiring codegen.yaml config
### Details:
Run codegen on the current OpenAPI spec, verify domains are correctly inferred from tags, ensure generated files are placed in appropriate domain directories, and confirm config-free operation works as expected.

## 7. Create codegen documentation and examples [pending]
### Dependencies: 26.6
### Description: Document the complete codegen system usage and provide examples for developers
### Details:
Create comprehensive documentation covering codegen usage, OpenAPI annotation requirements, generated file structure, and integration with make commands. Include examples of how to extend the system and troubleshoot common issues.

