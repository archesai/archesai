// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package workflows

import (
	"context"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// CreatePipeline provides a mock function for the type MockRepository
func (_mock *MockRepository) CreatePipeline(ctx context.Context, entity *Pipeline) (*Pipeline, error) {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for CreatePipeline")
	}

	var r0 *Pipeline
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Pipeline) (*Pipeline, error)); ok {
		return returnFunc(ctx, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Pipeline) *Pipeline); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Pipeline)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *Pipeline) error); ok {
		r1 = returnFunc(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_CreatePipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePipeline'
type MockRepository_CreatePipeline_Call struct {
	*mock.Call
}

// CreatePipeline is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *Pipeline
func (_e *MockRepository_Expecter) CreatePipeline(ctx interface{}, entity interface{}) *MockRepository_CreatePipeline_Call {
	return &MockRepository_CreatePipeline_Call{Call: _e.mock.On("CreatePipeline", ctx, entity)}
}

func (_c *MockRepository_CreatePipeline_Call) Run(run func(ctx context.Context, entity *Pipeline)) *MockRepository_CreatePipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Pipeline
		if args[1] != nil {
			arg1 = args[1].(*Pipeline)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_CreatePipeline_Call) Return(pipeline *Pipeline, err error) *MockRepository_CreatePipeline_Call {
	_c.Call.Return(pipeline, err)
	return _c
}

func (_c *MockRepository_CreatePipeline_Call) RunAndReturn(run func(ctx context.Context, entity *Pipeline) (*Pipeline, error)) *MockRepository_CreatePipeline_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRun provides a mock function for the type MockRepository
func (_mock *MockRepository) CreateRun(ctx context.Context, entity *Run) (*Run, error) {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for CreateRun")
	}

	var r0 *Run
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Run) (*Run, error)); ok {
		return returnFunc(ctx, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Run) *Run); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Run)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *Run) error); ok {
		r1 = returnFunc(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_CreateRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRun'
type MockRepository_CreateRun_Call struct {
	*mock.Call
}

// CreateRun is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *Run
func (_e *MockRepository_Expecter) CreateRun(ctx interface{}, entity interface{}) *MockRepository_CreateRun_Call {
	return &MockRepository_CreateRun_Call{Call: _e.mock.On("CreateRun", ctx, entity)}
}

func (_c *MockRepository_CreateRun_Call) Run(run func(ctx context.Context, entity *Run)) *MockRepository_CreateRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Run
		if args[1] != nil {
			arg1 = args[1].(*Run)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_CreateRun_Call) Return(run *Run, err error) *MockRepository_CreateRun_Call {
	_c.Call.Return(run, err)
	return _c
}

func (_c *MockRepository_CreateRun_Call) RunAndReturn(run func(ctx context.Context, entity *Run) (*Run, error)) *MockRepository_CreateRun_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTool provides a mock function for the type MockRepository
func (_mock *MockRepository) CreateTool(ctx context.Context, entity *Tool) (*Tool, error) {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for CreateTool")
	}

	var r0 *Tool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Tool) (*Tool, error)); ok {
		return returnFunc(ctx, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Tool) *Tool); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Tool)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *Tool) error); ok {
		r1 = returnFunc(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_CreateTool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTool'
type MockRepository_CreateTool_Call struct {
	*mock.Call
}

// CreateTool is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *Tool
func (_e *MockRepository_Expecter) CreateTool(ctx interface{}, entity interface{}) *MockRepository_CreateTool_Call {
	return &MockRepository_CreateTool_Call{Call: _e.mock.On("CreateTool", ctx, entity)}
}

func (_c *MockRepository_CreateTool_Call) Run(run func(ctx context.Context, entity *Tool)) *MockRepository_CreateTool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Tool
		if args[1] != nil {
			arg1 = args[1].(*Tool)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_CreateTool_Call) Return(tool *Tool, err error) *MockRepository_CreateTool_Call {
	_c.Call.Return(tool, err)
	return _c
}

func (_c *MockRepository_CreateTool_Call) RunAndReturn(run func(ctx context.Context, entity *Tool) (*Tool, error)) *MockRepository_CreateTool_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePipeline provides a mock function for the type MockRepository
func (_mock *MockRepository) DeletePipeline(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePipeline")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_DeletePipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePipeline'
type MockRepository_DeletePipeline_Call struct {
	*mock.Call
}

// DeletePipeline is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepository_Expecter) DeletePipeline(ctx interface{}, id interface{}) *MockRepository_DeletePipeline_Call {
	return &MockRepository_DeletePipeline_Call{Call: _e.mock.On("DeletePipeline", ctx, id)}
}

func (_c *MockRepository_DeletePipeline_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_DeletePipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_DeletePipeline_Call) Return(err error) *MockRepository_DeletePipeline_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_DeletePipeline_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockRepository_DeletePipeline_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRun provides a mock function for the type MockRepository
func (_mock *MockRepository) DeleteRun(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRun")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_DeleteRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRun'
type MockRepository_DeleteRun_Call struct {
	*mock.Call
}

// DeleteRun is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepository_Expecter) DeleteRun(ctx interface{}, id interface{}) *MockRepository_DeleteRun_Call {
	return &MockRepository_DeleteRun_Call{Call: _e.mock.On("DeleteRun", ctx, id)}
}

func (_c *MockRepository_DeleteRun_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_DeleteRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_DeleteRun_Call) Return(err error) *MockRepository_DeleteRun_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_DeleteRun_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockRepository_DeleteRun_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTool provides a mock function for the type MockRepository
func (_mock *MockRepository) DeleteTool(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTool")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_DeleteTool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTool'
type MockRepository_DeleteTool_Call struct {
	*mock.Call
}

// DeleteTool is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepository_Expecter) DeleteTool(ctx interface{}, id interface{}) *MockRepository_DeleteTool_Call {
	return &MockRepository_DeleteTool_Call{Call: _e.mock.On("DeleteTool", ctx, id)}
}

func (_c *MockRepository_DeleteTool_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_DeleteTool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_DeleteTool_Call) Return(err error) *MockRepository_DeleteTool_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_DeleteTool_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockRepository_DeleteTool_Call {
	_c.Call.Return(run)
	return _c
}

// GetPipeline provides a mock function for the type MockRepository
func (_mock *MockRepository) GetPipeline(ctx context.Context, id uuid.UUID) (*Pipeline, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPipeline")
	}

	var r0 *Pipeline
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Pipeline, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Pipeline); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Pipeline)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetPipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPipeline'
type MockRepository_GetPipeline_Call struct {
	*mock.Call
}

// GetPipeline is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepository_Expecter) GetPipeline(ctx interface{}, id interface{}) *MockRepository_GetPipeline_Call {
	return &MockRepository_GetPipeline_Call{Call: _e.mock.On("GetPipeline", ctx, id)}
}

func (_c *MockRepository_GetPipeline_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_GetPipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetPipeline_Call) Return(pipeline *Pipeline, err error) *MockRepository_GetPipeline_Call {
	_c.Call.Return(pipeline, err)
	return _c
}

func (_c *MockRepository_GetPipeline_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*Pipeline, error)) *MockRepository_GetPipeline_Call {
	_c.Call.Return(run)
	return _c
}

// GetRun provides a mock function for the type MockRepository
func (_mock *MockRepository) GetRun(ctx context.Context, id uuid.UUID) (*Run, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetRun")
	}

	var r0 *Run
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Run, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Run); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Run)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRun'
type MockRepository_GetRun_Call struct {
	*mock.Call
}

// GetRun is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepository_Expecter) GetRun(ctx interface{}, id interface{}) *MockRepository_GetRun_Call {
	return &MockRepository_GetRun_Call{Call: _e.mock.On("GetRun", ctx, id)}
}

func (_c *MockRepository_GetRun_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_GetRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetRun_Call) Return(run *Run, err error) *MockRepository_GetRun_Call {
	_c.Call.Return(run, err)
	return _c
}

func (_c *MockRepository_GetRun_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*Run, error)) *MockRepository_GetRun_Call {
	_c.Call.Return(run)
	return _c
}

// GetTool provides a mock function for the type MockRepository
func (_mock *MockRepository) GetTool(ctx context.Context, id uuid.UUID) (*Tool, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTool")
	}

	var r0 *Tool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Tool, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Tool); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Tool)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetTool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTool'
type MockRepository_GetTool_Call struct {
	*mock.Call
}

// GetTool is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepository_Expecter) GetTool(ctx interface{}, id interface{}) *MockRepository_GetTool_Call {
	return &MockRepository_GetTool_Call{Call: _e.mock.On("GetTool", ctx, id)}
}

func (_c *MockRepository_GetTool_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_GetTool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetTool_Call) Return(tool *Tool, err error) *MockRepository_GetTool_Call {
	_c.Call.Return(tool, err)
	return _c
}

func (_c *MockRepository_GetTool_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*Tool, error)) *MockRepository_GetTool_Call {
	_c.Call.Return(run)
	return _c
}

// ListPipelines provides a mock function for the type MockRepository
func (_mock *MockRepository) ListPipelines(ctx context.Context, params ListPipelinesParams) ([]*Pipeline, int64, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelines")
	}

	var r0 []*Pipeline
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ListPipelinesParams) ([]*Pipeline, int64, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ListPipelinesParams) []*Pipeline); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Pipeline)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ListPipelinesParams) int64); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, ListPipelinesParams) error); ok {
		r2 = returnFunc(ctx, params)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRepository_ListPipelines_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPipelines'
type MockRepository_ListPipelines_Call struct {
	*mock.Call
}

// ListPipelines is a helper method to define mock.On call
//   - ctx context.Context
//   - params ListPipelinesParams
func (_e *MockRepository_Expecter) ListPipelines(ctx interface{}, params interface{}) *MockRepository_ListPipelines_Call {
	return &MockRepository_ListPipelines_Call{Call: _e.mock.On("ListPipelines", ctx, params)}
}

func (_c *MockRepository_ListPipelines_Call) Run(run func(ctx context.Context, params ListPipelinesParams)) *MockRepository_ListPipelines_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ListPipelinesParams
		if args[1] != nil {
			arg1 = args[1].(ListPipelinesParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_ListPipelines_Call) Return(pipelines []*Pipeline, n int64, err error) *MockRepository_ListPipelines_Call {
	_c.Call.Return(pipelines, n, err)
	return _c
}

func (_c *MockRepository_ListPipelines_Call) RunAndReturn(run func(ctx context.Context, params ListPipelinesParams) ([]*Pipeline, int64, error)) *MockRepository_ListPipelines_Call {
	_c.Call.Return(run)
	return _c
}

// ListRuns provides a mock function for the type MockRepository
func (_mock *MockRepository) ListRuns(ctx context.Context, params ListRunsParams) ([]*Run, int64, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListRuns")
	}

	var r0 []*Run
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ListRunsParams) ([]*Run, int64, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ListRunsParams) []*Run); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Run)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ListRunsParams) int64); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, ListRunsParams) error); ok {
		r2 = returnFunc(ctx, params)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRepository_ListRuns_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRuns'
type MockRepository_ListRuns_Call struct {
	*mock.Call
}

// ListRuns is a helper method to define mock.On call
//   - ctx context.Context
//   - params ListRunsParams
func (_e *MockRepository_Expecter) ListRuns(ctx interface{}, params interface{}) *MockRepository_ListRuns_Call {
	return &MockRepository_ListRuns_Call{Call: _e.mock.On("ListRuns", ctx, params)}
}

func (_c *MockRepository_ListRuns_Call) Run(run func(ctx context.Context, params ListRunsParams)) *MockRepository_ListRuns_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ListRunsParams
		if args[1] != nil {
			arg1 = args[1].(ListRunsParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_ListRuns_Call) Return(runs []*Run, n int64, err error) *MockRepository_ListRuns_Call {
	_c.Call.Return(runs, n, err)
	return _c
}

func (_c *MockRepository_ListRuns_Call) RunAndReturn(run func(ctx context.Context, params ListRunsParams) ([]*Run, int64, error)) *MockRepository_ListRuns_Call {
	_c.Call.Return(run)
	return _c
}

// ListTools provides a mock function for the type MockRepository
func (_mock *MockRepository) ListTools(ctx context.Context, params ListToolsParams) ([]*Tool, int64, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListTools")
	}

	var r0 []*Tool
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ListToolsParams) ([]*Tool, int64, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ListToolsParams) []*Tool); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Tool)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ListToolsParams) int64); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, ListToolsParams) error); ok {
		r2 = returnFunc(ctx, params)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRepository_ListTools_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTools'
type MockRepository_ListTools_Call struct {
	*mock.Call
}

// ListTools is a helper method to define mock.On call
//   - ctx context.Context
//   - params ListToolsParams
func (_e *MockRepository_Expecter) ListTools(ctx interface{}, params interface{}) *MockRepository_ListTools_Call {
	return &MockRepository_ListTools_Call{Call: _e.mock.On("ListTools", ctx, params)}
}

func (_c *MockRepository_ListTools_Call) Run(run func(ctx context.Context, params ListToolsParams)) *MockRepository_ListTools_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ListToolsParams
		if args[1] != nil {
			arg1 = args[1].(ListToolsParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_ListTools_Call) Return(tools []*Tool, n int64, err error) *MockRepository_ListTools_Call {
	_c.Call.Return(tools, n, err)
	return _c
}

func (_c *MockRepository_ListTools_Call) RunAndReturn(run func(ctx context.Context, params ListToolsParams) ([]*Tool, int64, error)) *MockRepository_ListTools_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePipeline provides a mock function for the type MockRepository
func (_mock *MockRepository) UpdatePipeline(ctx context.Context, id uuid.UUID, entity *Pipeline) (*Pipeline, error) {
	ret := _mock.Called(ctx, id, entity)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePipeline")
	}

	var r0 *Pipeline
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *Pipeline) (*Pipeline, error)); ok {
		return returnFunc(ctx, id, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *Pipeline) *Pipeline); ok {
		r0 = returnFunc(ctx, id, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Pipeline)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *Pipeline) error); ok {
		r1 = returnFunc(ctx, id, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_UpdatePipeline_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePipeline'
type MockRepository_UpdatePipeline_Call struct {
	*mock.Call
}

// UpdatePipeline is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - entity *Pipeline
func (_e *MockRepository_Expecter) UpdatePipeline(ctx interface{}, id interface{}, entity interface{}) *MockRepository_UpdatePipeline_Call {
	return &MockRepository_UpdatePipeline_Call{Call: _e.mock.On("UpdatePipeline", ctx, id, entity)}
}

func (_c *MockRepository_UpdatePipeline_Call) Run(run func(ctx context.Context, id uuid.UUID, entity *Pipeline)) *MockRepository_UpdatePipeline_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *Pipeline
		if args[2] != nil {
			arg2 = args[2].(*Pipeline)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepository_UpdatePipeline_Call) Return(pipeline *Pipeline, err error) *MockRepository_UpdatePipeline_Call {
	_c.Call.Return(pipeline, err)
	return _c
}

func (_c *MockRepository_UpdatePipeline_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, entity *Pipeline) (*Pipeline, error)) *MockRepository_UpdatePipeline_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRun provides a mock function for the type MockRepository
func (_mock *MockRepository) UpdateRun(ctx context.Context, id uuid.UUID, entity *Run) (*Run, error) {
	ret := _mock.Called(ctx, id, entity)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRun")
	}

	var r0 *Run
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *Run) (*Run, error)); ok {
		return returnFunc(ctx, id, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *Run) *Run); ok {
		r0 = returnFunc(ctx, id, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Run)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *Run) error); ok {
		r1 = returnFunc(ctx, id, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_UpdateRun_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRun'
type MockRepository_UpdateRun_Call struct {
	*mock.Call
}

// UpdateRun is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - entity *Run
func (_e *MockRepository_Expecter) UpdateRun(ctx interface{}, id interface{}, entity interface{}) *MockRepository_UpdateRun_Call {
	return &MockRepository_UpdateRun_Call{Call: _e.mock.On("UpdateRun", ctx, id, entity)}
}

func (_c *MockRepository_UpdateRun_Call) Run(run func(ctx context.Context, id uuid.UUID, entity *Run)) *MockRepository_UpdateRun_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *Run
		if args[2] != nil {
			arg2 = args[2].(*Run)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepository_UpdateRun_Call) Return(run *Run, err error) *MockRepository_UpdateRun_Call {
	_c.Call.Return(run, err)
	return _c
}

func (_c *MockRepository_UpdateRun_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, entity *Run) (*Run, error)) *MockRepository_UpdateRun_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTool provides a mock function for the type MockRepository
func (_mock *MockRepository) UpdateTool(ctx context.Context, id uuid.UUID, entity *Tool) (*Tool, error) {
	ret := _mock.Called(ctx, id, entity)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTool")
	}

	var r0 *Tool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *Tool) (*Tool, error)); ok {
		return returnFunc(ctx, id, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *Tool) *Tool); ok {
		r0 = returnFunc(ctx, id, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Tool)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *Tool) error); ok {
		r1 = returnFunc(ctx, id, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_UpdateTool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTool'
type MockRepository_UpdateTool_Call struct {
	*mock.Call
}

// UpdateTool is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - entity *Tool
func (_e *MockRepository_Expecter) UpdateTool(ctx interface{}, id interface{}, entity interface{}) *MockRepository_UpdateTool_Call {
	return &MockRepository_UpdateTool_Call{Call: _e.mock.On("UpdateTool", ctx, id, entity)}
}

func (_c *MockRepository_UpdateTool_Call) Run(run func(ctx context.Context, id uuid.UUID, entity *Tool)) *MockRepository_UpdateTool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *Tool
		if args[2] != nil {
			arg2 = args[2].(*Tool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepository_UpdateTool_Call) Return(tool *Tool, err error) *MockRepository_UpdateTool_Call {
	_c.Call.Return(tool, err)
	return _c
}

func (_c *MockRepository_UpdateTool_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, entity *Tool) (*Tool, error)) *MockRepository_UpdateTool_Call {
	_c.Call.Return(run)
	return _c
}
