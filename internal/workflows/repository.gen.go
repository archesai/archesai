// Code generated by codegen repository. DO NOT EDIT.
package workflows

import (
	"context"
	"fmt"
	"github.com/google/uuid"
)

// Repository provides data access operations for workflows domain.
type Repository interface {

	// Pipeline operations
	CreatePipeline(ctx context.Context, entity *Pipeline) (*Pipeline, error)
	GetPipeline(ctx context.Context, id uuid.UUID) (*Pipeline, error)
	UpdatePipeline(ctx context.Context, id uuid.UUID, entity *Pipeline) (*Pipeline, error)
	DeletePipeline(ctx context.Context, id uuid.UUID) error
	ListPipelines(ctx context.Context, params ListPipelinesParams) ([]*Pipeline, int64, error)

	// Run operations
	CreateRun(ctx context.Context, entity *Run) (*Run, error)
	GetRun(ctx context.Context, id uuid.UUID) (*Run, error)
	UpdateRun(ctx context.Context, id uuid.UUID, entity *Run) (*Run, error)
	DeleteRun(ctx context.Context, id uuid.UUID) error
	ListRuns(ctx context.Context, params ListRunsParams) ([]*Run, int64, error)

	// Tool operations
	CreateTool(ctx context.Context, entity *Tool) (*Tool, error)
	GetTool(ctx context.Context, id uuid.UUID) (*Tool, error)
	UpdateTool(ctx context.Context, id uuid.UUID, entity *Tool) (*Tool, error)
	DeleteTool(ctx context.Context, id uuid.UUID) error
	ListTools(ctx context.Context, params ListToolsParams) ([]*Tool, int64, error)
}

// ListPipelinesParams represents parameters for listing pipelines.
type ListPipelinesParams struct {
	Limit  int
	Offset int
}

// ListRunsParams represents parameters for listing runs.
type ListRunsParams struct {
	Limit  int
	Offset int
}

// ListToolsParams represents parameters for listing tools.
type ListToolsParams struct {
	Limit  int
	Offset int
}

// RepositoryError represents a repository error.
type RepositoryError struct {
	Operation string
	Err       error
}

func (e *RepositoryError) Error() string {
	return fmt.Sprintf("repository %s: %v", e.Operation, e.Err)
}

func (e *RepositoryError) Unwrap() error {
	return e.Err
}

// NewRepositoryError creates a new repository error.
func NewRepositoryError(operation string, err error) *RepositoryError {
	return &RepositoryError{
		Operation: operation,
		Err:       err,
	}
}
