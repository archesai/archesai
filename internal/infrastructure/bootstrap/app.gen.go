// Code generated by archesai. DO NOT EDIT.

package bootstrap

import (
	"context"
	"fmt"
	"log/slog"
	"net/http"

	"golang.org/x/sync/errgroup"

	"github.com/archesai/archesai/internal/adapters/http/controllers"
	"github.com/archesai/archesai/internal/adapters/http/server"
	apikeyCommands "github.com/archesai/archesai/internal/application/commands/apikey"
	artifactCommands "github.com/archesai/archesai/internal/application/commands/artifact"
	authCommands "github.com/archesai/archesai/internal/application/commands/auth"
	invitationCommands "github.com/archesai/archesai/internal/application/commands/invitation"
	labelCommands "github.com/archesai/archesai/internal/application/commands/label"
	memberCommands "github.com/archesai/archesai/internal/application/commands/member"
	organizationCommands "github.com/archesai/archesai/internal/application/commands/organization"
	pipelineCommands "github.com/archesai/archesai/internal/application/commands/pipeline"
	runCommands "github.com/archesai/archesai/internal/application/commands/run"
	toolCommands "github.com/archesai/archesai/internal/application/commands/tool"
	userCommands "github.com/archesai/archesai/internal/application/commands/user"
	apikeyQueries "github.com/archesai/archesai/internal/application/queries/apikey"
	artifactQueries "github.com/archesai/archesai/internal/application/queries/artifact"
	authQueries "github.com/archesai/archesai/internal/application/queries/auth"
	configQueries "github.com/archesai/archesai/internal/application/queries/config"
	healthQueries "github.com/archesai/archesai/internal/application/queries/health"
	invitationQueries "github.com/archesai/archesai/internal/application/queries/invitation"
	labelQueries "github.com/archesai/archesai/internal/application/queries/label"
	memberQueries "github.com/archesai/archesai/internal/application/queries/member"
	organizationQueries "github.com/archesai/archesai/internal/application/queries/organization"
	pipelineQueries "github.com/archesai/archesai/internal/application/queries/pipeline"
	runQueries "github.com/archesai/archesai/internal/application/queries/run"
	toolQueries "github.com/archesai/archesai/internal/application/queries/tool"
	userQueries "github.com/archesai/archesai/internal/application/queries/user"
	"github.com/archesai/archesai/internal/infrastructure/auth"
	"github.com/archesai/archesai/internal/infrastructure/cache"
	"github.com/archesai/archesai/internal/infrastructure/config"
	"github.com/archesai/archesai/internal/infrastructure/notifications"
	database "github.com/archesai/archesai/internal/infrastructure/persistence"
)

// App holds all application dependencies.
type App struct {
	// Core infrastructure
	infra *Infrastructure

	// Public infrastructure access
	Config *config.Config
	Server *server.Server

	// HTTP Controllers
	AuthController         *controllers.AuthController
	APIKeyController       *controllers.APIKeyController
	ArtifactController     *controllers.ArtifactController
	ConfigController       *controllers.ConfigController
	HealthController       *controllers.HealthController
	InvitationController   *controllers.InvitationController
	LabelController        *controllers.LabelController
	MemberController       *controllers.MemberController
	OrganizationController *controllers.OrganizationController
	PipelineController     *controllers.PipelineController
	RunController          *controllers.RunController
	ToolController         *controllers.ToolController
	UserController         *controllers.UserController
}

// NewApp creates and initializes all application dependencies.
func NewApp(cfg *config.Config) (*App, error) {
	// Initialize infrastructure
	infra, err := NewInfrastructure(cfg)
	if err != nil {
		return nil, fmt.Errorf("failed to initialize infrastructure: %w", err)
	}

	// Run migrations if enabled
	if cfg.Database.RunMigrations {
		slog.Info("running database migrations")
		if err := database.RunMigrations(infra.Database); err != nil {
			slog.Error("failed to run migrations", "error", err)
			isProduction := cfg.API.Environment == "production"
			if isProduction {
				return nil, fmt.Errorf("failed to run migrations: %w", err)
			}
		}
		slog.Info("database migrations completed")
	}

	// Create repositories
	slog.Info("creating repositories")
	repos, err := NewRepositories(infra)
	if err != nil {
		return nil, fmt.Errorf("failed to create repositories: %w", err)
	}

	// Initialize auth service after repositories are available
	slog.Info("initializing auth service")
	var stringCache cache.Cache[string]
	if infra.redisClient != nil {
		stringCache = cache.NewRedisCache[string](infra.redisClient.GetRedisClient(), "auth:tokens")
	} else {
		stringCache = cache.NewMemoryCache[string]()
	}

	// Initialize notification deliverers
	magicLinkDeliverer := notifications.NewConsoleDeliverer()
	otpDeliverer := notifications.NewOTPDeliverer()

	infra.AuthService = auth.NewService(cfg, repos.Sessions, repos.Users, repos.Accounts, stringCache, magicLinkDeliverer, otpDeliverer)
	slog.Info("auth service ready")

	// Create app instance to populate
	app := &App{
		// Infrastructure
		infra:  infra,
		Config: cfg,
	}

	// Initialize all domain handlers in parallel where possible
	g, _ := errgroup.WithContext(context.Background())

	// Initialize config domain (infrastructure query - needs special handling)
	slog.Info("initializing config domain")
	getConfigHandler := configQueries.NewGetConfigQueryHandler(cfg)
	app.ConfigController = controllers.NewConfigController(getConfigHandler)
	slog.Info("config domain ready")

	// Initialize health domain (infrastructure query - needs special handling)
	slog.Info("initializing health domain")
	getHealthHandler := healthQueries.NewGetHealthQueryHandler()
	app.HealthController = controllers.NewHealthController(getHealthHandler)
	slog.Info("health domain ready")

	// Initialize auth domain (cross-cutting concern spanning multiple entities)
	g.Go(func() error {
		slog.Info("initializing auth domain")

		// Create command handlers (in REST operation order matching controller signature)
		confirmEmailChangeHandler := authCommands.NewConfirmEmailChangeCommandHandler(infra.AuthService)
		confirmEmailVerificationHandler := authCommands.NewConfirmEmailVerificationCommandHandler(infra.AuthService)
		confirmPasswordResetHandler := authCommands.NewConfirmPasswordResetCommandHandler(infra.AuthService)
		linkAccountHandler := authCommands.NewLinkAccountCommandHandler(infra.AuthService)
		loginHandler := authCommands.NewLoginCommandHandler(infra.AuthService)
		logoutHandler := authCommands.NewLogoutCommandHandler(infra.AuthService)
		logoutAllHandler := authCommands.NewLogoutAllCommandHandler(infra.AuthService)
		registerHandler := authCommands.NewRegisterCommandHandler(infra.AuthService, repos.Users, repos.Accounts)
		requestEmailChangeHandler := authCommands.NewRequestEmailChangeCommandHandler(infra.AuthService)
		requestEmailVerificationHandler := authCommands.NewRequestEmailVerificationCommandHandler(infra.AuthService)
		requestMagicLinkHandler := authCommands.NewRequestMagicLinkCommandHandler(infra.AuthService)
		requestPasswordResetHandler := authCommands.NewRequestPasswordResetCommandHandler(infra.AuthService)
		verifyMagicLinkHandler := authCommands.NewVerifyMagicLinkCommandHandler(infra.AuthService)
		updateAccountHandler := authCommands.NewUpdateAccountCommandHandler(infra.AuthService)
		updateSessionHandler := authCommands.NewUpdateSessionCommandHandler(repos.Sessions)
		deleteAccountHandler := authCommands.NewDeleteAccountCommandHandler(infra.AuthService)
		deleteSessionHandler := authCommands.NewDeleteSessionCommandHandler(repos.Sessions)

		// Create query handlers (in REST operation order matching controller signature)
		getAccountHandler := authQueries.NewGetAccountQueryHandler(repos.Accounts)
		getSessionHandler := authQueries.NewGetSessionQueryHandler(repos.Sessions)
		oauthAuthorizeHandler := authQueries.NewOAuthAuthorizeQueryHandler(infra.AuthService)
		oauthCallbackHandler := authQueries.NewOAuthCallbackQueryHandler(infra.AuthService, infra.EventPublisher)
		listAccountsHandler := authQueries.NewListAccountsQueryHandler(repos.Accounts)
		listSessionsHandler := authQueries.NewListSessionsQueryHandler(repos.Sessions)

		// Create controller with handlers in order matching NewAuthController signature
		app.AuthController = controllers.NewAuthController(
			confirmEmailChangeHandler,
			confirmEmailVerificationHandler,
			confirmPasswordResetHandler,
			linkAccountHandler,
			loginHandler,
			logoutHandler,
			logoutAllHandler,
			registerHandler,
			requestEmailChangeHandler,
			requestEmailVerificationHandler,
			requestMagicLinkHandler,
			requestPasswordResetHandler,
			verifyMagicLinkHandler,
			updateAccountHandler,
			updateSessionHandler,
			deleteAccountHandler,
			deleteSessionHandler,
			getAccountHandler,
			getSessionHandler,
			oauthAuthorizeHandler,
			oauthCallbackHandler,
			listAccountsHandler,
			listSessionsHandler,
		)

		slog.Info("auth domain ready")
		return nil
	})

	// Initialize apikey domain
	g.Go(func() error {
		slog.Info("initializing apikey domain")
		// Create command and query handlers
		createAPIKeyHandler := apikeyCommands.NewCreateAPIKeyCommandHandler(
			repos.APIKeys,
			infra.EventPublisher,
		)
		updateAPIKeyHandler := apikeyCommands.NewUpdateAPIKeyCommandHandler(
			repos.APIKeys,
			infra.EventPublisher,
		)
		deleteAPIKeyHandler := apikeyCommands.NewDeleteAPIKeyCommandHandler(
			repos.APIKeys,
			infra.EventPublisher,
		)
		getAPIKeyHandler := apikeyQueries.NewGetAPIKeyQueryHandler(
			repos.APIKeys,
		)
		listAPIKeysHandler := apikeyQueries.NewListAPIKeysQueryHandler(
			repos.APIKeys,
		)

		// Create controller with handlers
		app.APIKeyController = controllers.NewAPIKeyController(
			createAPIKeyHandler,
			updateAPIKeyHandler,
			deleteAPIKeyHandler,
			getAPIKeyHandler,
			listAPIKeysHandler,
		)

		slog.Info("apikey domain ready")
		return nil
	})

	// Initialize artifact domain
	g.Go(func() error {
		slog.Info("initializing artifact domain")
		// Create command and query handlers
		createArtifactHandler := artifactCommands.NewCreateArtifactCommandHandler(
			repos.Artifacts,
			infra.EventPublisher,
		)
		updateArtifactHandler := artifactCommands.NewUpdateArtifactCommandHandler(
			repos.Artifacts,
			infra.EventPublisher,
		)
		deleteArtifactHandler := artifactCommands.NewDeleteArtifactCommandHandler(
			repos.Artifacts,
			infra.EventPublisher,
		)
		getArtifactHandler := artifactQueries.NewGetArtifactQueryHandler(
			repos.Artifacts,
		)
		listArtifactsHandler := artifactQueries.NewListArtifactsQueryHandler(
			repos.Artifacts,
		)

		// Create controller with handlers
		app.ArtifactController = controllers.NewArtifactController(
			createArtifactHandler,
			updateArtifactHandler,
			deleteArtifactHandler,
			getArtifactHandler,
			listArtifactsHandler,
		)

		slog.Info("artifact domain ready")
		return nil
	})

	// Initialize invitation domain
	g.Go(func() error {
		slog.Info("initializing invitation domain")
		// Create command and query handlers
		createInvitationHandler := invitationCommands.NewCreateInvitationCommandHandler(
			repos.Invitations,
			infra.EventPublisher,
		)
		updateInvitationHandler := invitationCommands.NewUpdateInvitationCommandHandler(
			repos.Invitations,
			infra.EventPublisher,
		)
		deleteInvitationHandler := invitationCommands.NewDeleteInvitationCommandHandler(
			repos.Invitations,
			infra.EventPublisher,
		)
		getInvitationHandler := invitationQueries.NewGetInvitationQueryHandler(
			repos.Invitations,
		)
		listInvitationsHandler := invitationQueries.NewListInvitationsQueryHandler(
			repos.Invitations,
		)

		// Create controller with handlers
		app.InvitationController = controllers.NewInvitationController(
			createInvitationHandler,
			updateInvitationHandler,
			deleteInvitationHandler,
			getInvitationHandler,
			listInvitationsHandler,
		)

		slog.Info("invitation domain ready")
		return nil
	})

	// Initialize label domain
	g.Go(func() error {
		slog.Info("initializing label domain")
		// Create command and query handlers
		createLabelHandler := labelCommands.NewCreateLabelCommandHandler(
			repos.Labels,
			infra.EventPublisher,
		)
		updateLabelHandler := labelCommands.NewUpdateLabelCommandHandler(
			repos.Labels,
			infra.EventPublisher,
		)
		deleteLabelHandler := labelCommands.NewDeleteLabelCommandHandler(
			repos.Labels,
			infra.EventPublisher,
		)
		getLabelHandler := labelQueries.NewGetLabelQueryHandler(
			repos.Labels,
		)
		listLabelsHandler := labelQueries.NewListLabelsQueryHandler(
			repos.Labels,
		)

		// Create controller with handlers
		app.LabelController = controllers.NewLabelController(
			createLabelHandler,
			updateLabelHandler,
			deleteLabelHandler,
			getLabelHandler,
			listLabelsHandler,
		)

		slog.Info("label domain ready")
		return nil
	})

	// Initialize member domain
	g.Go(func() error {
		slog.Info("initializing member domain")
		// Create command and query handlers
		createMemberHandler := memberCommands.NewCreateMemberCommandHandler(
			repos.Members,
			infra.EventPublisher,
		)
		updateMemberHandler := memberCommands.NewUpdateMemberCommandHandler(
			repos.Members,
			infra.EventPublisher,
		)
		deleteMemberHandler := memberCommands.NewDeleteMemberCommandHandler(
			repos.Members,
			infra.EventPublisher,
		)
		getMemberHandler := memberQueries.NewGetMemberQueryHandler(
			repos.Members,
		)
		listMembersHandler := memberQueries.NewListMembersQueryHandler(
			repos.Members,
		)

		// Create controller with handlers
		app.MemberController = controllers.NewMemberController(
			createMemberHandler,
			updateMemberHandler,
			deleteMemberHandler,
			getMemberHandler,
			listMembersHandler,
		)

		slog.Info("member domain ready")
		return nil
	})

	// Initialize organization domain
	g.Go(func() error {
		slog.Info("initializing organization domain")
		// Create command and query handlers
		createOrganizationHandler := organizationCommands.NewCreateOrganizationCommandHandler(
			repos.Organizations,
			infra.EventPublisher,
		)
		updateOrganizationHandler := organizationCommands.NewUpdateOrganizationCommandHandler(
			repos.Organizations,
			infra.EventPublisher,
		)
		deleteOrganizationHandler := organizationCommands.NewDeleteOrganizationCommandHandler(
			repos.Organizations,
			infra.EventPublisher,
		)
		getOrganizationHandler := organizationQueries.NewGetOrganizationQueryHandler(
			repos.Organizations,
		)
		listOrganizationsHandler := organizationQueries.NewListOrganizationsQueryHandler(
			repos.Organizations,
		)

		// Create controller with handlers
		app.OrganizationController = controllers.NewOrganizationController(
			createOrganizationHandler,
			updateOrganizationHandler,
			deleteOrganizationHandler,
			getOrganizationHandler,
			listOrganizationsHandler,
		)

		slog.Info("organization domain ready")
		return nil
	})

	// Initialize pipeline domain
	g.Go(func() error {
		slog.Info("initializing pipeline domain")
		// Create command and query handlers
		createPipelineHandler := pipelineCommands.NewCreatePipelineCommandHandler(
			repos.Pipelines,
			infra.EventPublisher,
		)
		createPipelineStepHandler := pipelineCommands.NewCreatePipelineStepCommandHandler(
			repos.Pipelines,
			infra.EventPublisher,
		)
		validatePipelineExecutionPlanHandler := pipelineCommands.NewValidatePipelineExecutionPlanCommandHandler(
			repos.Pipelines,
			infra.EventPublisher,
		)
		updatePipelineHandler := pipelineCommands.NewUpdatePipelineCommandHandler(
			repos.Pipelines,
			infra.EventPublisher,
		)
		deletePipelineHandler := pipelineCommands.NewDeletePipelineCommandHandler(
			repos.Pipelines,
			infra.EventPublisher,
		)
		getPipelineHandler := pipelineQueries.NewGetPipelineQueryHandler(
			repos.Pipelines,
		)
		getPipelineExecutionPlanHandler := pipelineQueries.NewGetPipelineExecutionPlanQueryHandler(
			repos.Pipelines,
		)
		getPipelineStepsHandler := pipelineQueries.NewGetPipelineStepsQueryHandler(
			repos.Pipelines,
		)
		listPipelinesHandler := pipelineQueries.NewListPipelinesQueryHandler(
			repos.Pipelines,
		)

		// Create controller with handlers
		app.PipelineController = controllers.NewPipelineController(
			createPipelineHandler,
			createPipelineStepHandler,
			validatePipelineExecutionPlanHandler,
			updatePipelineHandler,
			deletePipelineHandler,
			getPipelineHandler,
			getPipelineExecutionPlanHandler,
			getPipelineStepsHandler,
			listPipelinesHandler,
		)

		slog.Info("pipeline domain ready")
		return nil
	})

	// Initialize run domain
	g.Go(func() error {
		slog.Info("initializing run domain")
		// Create command and query handlers
		createRunHandler := runCommands.NewCreateRunCommandHandler(
			repos.Runs,
			infra.EventPublisher,
		)
		updateRunHandler := runCommands.NewUpdateRunCommandHandler(
			repos.Runs,
			infra.EventPublisher,
		)
		deleteRunHandler := runCommands.NewDeleteRunCommandHandler(
			repos.Runs,
			infra.EventPublisher,
		)
		getRunHandler := runQueries.NewGetRunQueryHandler(
			repos.Runs,
		)
		listRunsHandler := runQueries.NewListRunsQueryHandler(
			repos.Runs,
		)

		// Create controller with handlers
		app.RunController = controllers.NewRunController(
			createRunHandler,
			updateRunHandler,
			deleteRunHandler,
			getRunHandler,
			listRunsHandler,
		)

		slog.Info("run domain ready")
		return nil
	})

	// Initialize tool domain
	g.Go(func() error {
		slog.Info("initializing tool domain")
		// Create command and query handlers
		createToolHandler := toolCommands.NewCreateToolCommandHandler(
			repos.Tools,
			infra.EventPublisher,
		)
		updateToolHandler := toolCommands.NewUpdateToolCommandHandler(
			repos.Tools,
			infra.EventPublisher,
		)
		deleteToolHandler := toolCommands.NewDeleteToolCommandHandler(
			repos.Tools,
			infra.EventPublisher,
		)
		getToolHandler := toolQueries.NewGetToolQueryHandler(
			repos.Tools,
		)
		listToolsHandler := toolQueries.NewListToolsQueryHandler(
			repos.Tools,
		)

		// Create controller with handlers
		app.ToolController = controllers.NewToolController(
			createToolHandler,
			updateToolHandler,
			deleteToolHandler,
			getToolHandler,
			listToolsHandler,
		)

		slog.Info("tool domain ready")
		return nil
	})

	// Initialize user domain
	g.Go(func() error {
		slog.Info("initializing user domain")
		// Create command and query handlers
		updateCurrentUserHandler := userCommands.NewUpdateCurrentUserCommandHandler(
			repos.Users,
			infra.EventPublisher,
		)
		updateUserHandler := userCommands.NewUpdateUserCommandHandler(
			repos.Users,
			infra.EventPublisher,
		)
		deleteCurrentUserHandler := userCommands.NewDeleteCurrentUserCommandHandler(
			repos.Users,
			infra.EventPublisher,
		)
		deleteUserHandler := userCommands.NewDeleteUserCommandHandler(
			repos.Users,
			infra.EventPublisher,
		)
		getCurrentUserHandler := userQueries.NewGetCurrentUserQueryHandler(
			repos.Users,
		)
		getUserHandler := userQueries.NewGetUserQueryHandler(
			repos.Users,
		)
		listUsersHandler := userQueries.NewListUsersQueryHandler(
			repos.Users,
		)

		// Create controller with handlers
		app.UserController = controllers.NewUserController(
			updateCurrentUserHandler,
			updateUserHandler,
			deleteCurrentUserHandler,
			deleteUserHandler,
			getCurrentUserHandler,
			getUserHandler,
			listUsersHandler,
		)

		slog.Info("user domain ready")
		return nil
	})

	// Wait for all parallel initializations to complete
	if err := g.Wait(); err != nil {
		return nil, fmt.Errorf("failed to initialize domains: %w", err)
	}

	// Create the HTTP server
	slog.Info("creating HTTP server")
	app.Server = server.NewServer(cfg.API)

	// Register all application routes
	app.registerRoutes()

	slog.Info("application initialized successfully")
	return app, nil
}

// Close cleans up all resources.
func (a *App) Close() error {
	slog.Info("shutting down application")
	if a.infra != nil {
		return a.infra.Close()
	}
	return nil
}

// registerRoutes registers all application routes with the server.
func (a *App) registerRoutes() {
	// Get the mux from the server
	mux := a.Server.Mux()

	// Register all application routes
	a.RegisterRoutes(mux)
	slog.Info("routes registered")
}

// RegisterRoutes registers all application routes with the http.ServeMux.
func (a *App) RegisterRoutes(mux *http.ServeMux) {
	slog.Info("registering API routes...")

	// ========================================
	// API ROUTES
	// ========================================
	// Auth routes
	slog.Info("registering auth routes")
	controllers.RegisterAuthRoutes(mux, a.AuthController)
	// apikey routes
	slog.Info("registering apikey routes")
	controllers.RegisterAPIKeyRoutes(mux, a.APIKeyController)
	// artifact routes
	slog.Info("registering artifact routes")
	controllers.RegisterArtifactRoutes(mux, a.ArtifactController)
	// config routes
	slog.Info("registering config routes")
	controllers.RegisterConfigRoutes(mux, a.ConfigController)
	// health routes
	slog.Info("registering health routes")
	controllers.RegisterHealthRoutes(mux, a.HealthController)
	// invitation routes
	slog.Info("registering invitation routes")
	controllers.RegisterInvitationRoutes(mux, a.InvitationController)
	// label routes
	slog.Info("registering label routes")
	controllers.RegisterLabelRoutes(mux, a.LabelController)
	// member routes
	slog.Info("registering member routes")
	controllers.RegisterMemberRoutes(mux, a.MemberController)
	// organization routes
	slog.Info("registering organization routes")
	controllers.RegisterOrganizationRoutes(mux, a.OrganizationController)
	// pipeline routes
	slog.Info("registering pipeline routes")
	controllers.RegisterPipelineRoutes(mux, a.PipelineController)
	// run routes
	slog.Info("registering run routes")
	controllers.RegisterRunRoutes(mux, a.RunController)
	// tool routes
	slog.Info("registering tool routes")
	controllers.RegisterToolRoutes(mux, a.ToolController)
	// user routes
	slog.Info("registering user routes")
	controllers.RegisterUserRoutes(mux, a.UserController)

	slog.Info("all routes registered successfully")
}
