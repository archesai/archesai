// Code generated by codegen repository. DO NOT EDIT.
package repositories

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/errors"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgxpool"
)

// PostgresRunRepository implements RunRepository using PostgreSQL.
type PostgresRunRepository struct {
	queries *Queries
}

// NewPostgresRunRepository creates a new PostgreSQL repository.
func NewPostgresRunRepository(db *pgxpool.Pool) *PostgresRunRepository {
	return &PostgresRunRepository{
		queries: New(db),
	}
}

// Run operations

// Create creates a new run
func (r *PostgresRunRepository) Create(ctx context.Context, entity *entities.Run) (*entities.Run, error) {
	params := CreateRunParams{
		ID: entity.ID,
	}

	result, err := r.queries.CreateRun(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to create run: %w", err)
	}

	return mapRunFromDB(&result), nil
}

// Get retrieves a run by ID
func (r *PostgresRunRepository) Get(ctx context.Context, id uuid.UUID) (*entities.Run, error) {
	result, err := r.queries.GetRun(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, errors.ErrRunNotFound
		}
		return nil, fmt.Errorf("failed to get run: %w", err)
	}

	return mapRunFromDB(&result), nil
}

// Update updates an existing run
func (r *PostgresRunRepository) Update(ctx context.Context, id uuid.UUID, entity *entities.Run) (*entities.Run, error) {
	params := UpdateRunParams{
		ID: id,
	}

	result, err := r.queries.UpdateRun(ctx, params)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, errors.ErrRunNotFound
		}
		return nil, fmt.Errorf("failed to update run: %w", err)
	}

	return mapRunFromDB(&result), nil
}

// Delete removes a run
func (r *PostgresRunRepository) Delete(ctx context.Context, id uuid.UUID) error {
	err := r.queries.DeleteRun(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return errors.ErrRunNotFound
		}
		return fmt.Errorf("failed to delete run: %w", err)
	}
	return nil
}

// List returns a paginated list of runs
func (r *PostgresRunRepository) List(ctx context.Context, limit, offset int32) ([]*entities.Run, int64, error) {
	listParams := ListRunsParams{
		Limit:  limit,
		Offset: offset,
	}

	results, err := r.queries.ListRuns(ctx, listParams)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list runs: %w", err)
	}

	items := make([]*entities.Run, len(results))
	for i, result := range results {
		items[i] = mapRunFromDB(&result)
	}

	// For now, return the count as the length of results
	// In production, you'd want a separate count query
	count := int64(len(results))

	return items, count, nil
}

// Additional methods

// ListByPipeline retrieves multiple runs by pipelineID
func (r *PostgresRunRepository) ListByPipeline(ctx context.Context, pipelineID string) ([]*entities.Run, error) {
	// TODO: Implement ListByPipeline - fetch multiple runs
	return nil, fmt.Errorf("ListByPipeline not yet implemented")
}

// ListByOrganization retrieves multiple runs by organizationID
func (r *PostgresRunRepository) ListByOrganization(ctx context.Context, organizationID string) ([]*entities.Run, error) {
	// TODO: Implement ListByOrganization - fetch multiple runs
	return nil, fmt.Errorf("ListByOrganization not yet implemented")
}

// ListByTool retrieves multiple runs by toolID
func (r *PostgresRunRepository) ListByTool(ctx context.Context, toolID string) ([]*entities.Run, error) {
	// TODO: Implement ListByTool - fetch multiple runs
	return nil, fmt.Errorf("ListByTool not yet implemented")
}

func mapRunFromDB(db *Run) *entities.Run {
	if db == nil {
		return nil
	}

	result := &entities.Run{
		ID:        db.ID,
		CreatedAt: db.CreatedAt,
		UpdatedAt: db.UpdatedAt,
	}

	return result
}
