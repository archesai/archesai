// Code generated by codegen repository. DO NOT EDIT.
package repositories

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/archesai/archesai/internal/application/dto"
	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/errors"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgxpool"
)

// PostgresMemberRepository implements MemberRepository using PostgreSQL.
type PostgresMemberRepository struct {
	queries *Queries
}

// NewPostgresMemberRepository creates a new PostgreSQL repository.
func NewPostgresMemberRepository(db *pgxpool.Pool) *PostgresMemberRepository {
	return &PostgresMemberRepository{
		queries: New(db),
	}
}

// Member operations

// Create creates a new member
func (r *PostgresMemberRepository) Create(ctx context.Context, entity *entities.Member) (*entities.Member, error) {
	params := CreateMemberParams{
		ID: entity.ID,
	}

	result, err := r.queries.CreateMember(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to create member: %w", err)
	}

	return mapMemberFromDB(&result), nil
}

// Get retrieves a member by ID
func (r *PostgresMemberRepository) Get(ctx context.Context, id uuid.UUID) (*entities.Member, error) {
	result, err := r.queries.GetMember(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, errors.ErrMemberNotFound
		}
		return nil, fmt.Errorf("failed to get member: %w", err)
	}

	return mapMemberFromDB(&result), nil
}

// Update updates an existing member
func (r *PostgresMemberRepository) Update(ctx context.Context, id uuid.UUID, entity *entities.Member) (*entities.Member, error) {
	params := UpdateMemberParams{
		ID: id,
	}

	result, err := r.queries.UpdateMember(ctx, params)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, errors.ErrMemberNotFound
		}
		return nil, fmt.Errorf("failed to update member: %w", err)
	}

	return mapMemberFromDB(&result), nil
}

// Delete removes a member
func (r *PostgresMemberRepository) Delete(ctx context.Context, id uuid.UUID) error {
	err := r.queries.DeleteMember(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return errors.ErrMemberNotFound
		}
		return fmt.Errorf("failed to delete member: %w", err)
	}
	return nil
}

// List returns a paginated list of members
func (r *PostgresMemberRepository) List(ctx context.Context, params dto.ListMembersParams) ([]*entities.Member, int64, error) {
	// Calculate offset from page
	offset := int32(0)
	limit := int32(10) // default

	// Check if params has Page field with Limit and Offset
	if params.Page != nil {
		if params.Page.Offset != nil && *params.Page.Offset >= 0 {
			offset = int32(*params.Page.Offset)
		}
		if params.Page.Limit != nil && *params.Page.Limit > 0 {
			limit = int32(*params.Page.Limit)
		}
	}

	listParams := ListMembersParams{
		Limit:  limit,
		Offset: offset,
	}

	results, err := r.queries.ListMembers(ctx, listParams)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list members: %w", err)
	}

	items := make([]*entities.Member, len(results))
	for i, result := range results {
		items[i] = mapMemberFromDB(&result)
	}

	// For now, return the count as the length of results
	// In production, you'd want a separate count query
	count := int64(len(results))

	return items, count, nil
}

// Additional methods

// ListByOrganization retrieves multiple members by organizationID
func (r *PostgresMemberRepository) ListByOrganization(ctx context.Context, organizationID string) ([]*entities.Member, error) {

	// TODO: Implement ListByOrganization - fetch multiple members
	return nil, fmt.Errorf("ListByOrganization not yet implemented")

}

// ListByUser retrieves multiple members by userID
func (r *PostgresMemberRepository) ListByUser(ctx context.Context, userID string) ([]*entities.Member, error) {

	// TODO: Implement ListByUser - fetch multiple members
	return nil, fmt.Errorf("ListByUser not yet implemented")

}

// GetByUserAndOrganization retrieves a single member by userID and organizationID
func (r *PostgresMemberRepository) GetByUserAndOrganization(ctx context.Context, userID string, organizationID string) (*entities.Member, error) {

	// TODO: Implement GetByUserAndOrganization - fetch single member
	return nil, fmt.Errorf("GetByUserAndOrganization not yet implemented")

}

func mapMemberFromDB(db *Member) *entities.Member {
	if db == nil {
		return nil
	}

	result := &entities.Member{
		ID:        db.ID,
		CreatedAt: db.CreatedAt,
		UpdatedAt: db.UpdatedAt,
	}

	return result
}
