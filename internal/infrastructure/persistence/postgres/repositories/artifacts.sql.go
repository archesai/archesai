// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: artifacts.sql

package repositories

import (
	"context"

	"github.com/google/uuid"
)

const createArtifact = `-- name: CreateArtifact :one
INSERT INTO
  artifact (
    id,
    organization_id,
    name,
    description,
    mime_type,
    url,
    credits,
    preview_image,
    producer_id,
    text
  )
VALUES
  ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING
  id, created_at, updated_at, credits, description, mime_type, name, organization_id, preview_image, producer_id, text, url
`

type CreateArtifactParams struct {
	ID             uuid.UUID
	OrganizationID uuid.UUID
	Name           *string
	Description    *string
	MimeType       string
	URL            *string
	Credits        int32
	PreviewImage   *string
	ProducerID     *uuid.UUID
	Text           *string
}

func (q *Queries) CreateArtifact(ctx context.Context, arg CreateArtifactParams) (Artifact, error) {
	row := q.db.QueryRow(ctx, createArtifact,
		arg.ID,
		arg.OrganizationID,
		arg.Name,
		arg.Description,
		arg.MimeType,
		arg.URL,
		arg.Credits,
		arg.PreviewImage,
		arg.ProducerID,
		arg.Text,
	)
	var i Artifact
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Credits,
		&i.Description,
		&i.MimeType,
		&i.Name,
		&i.OrganizationID,
		&i.PreviewImage,
		&i.ProducerID,
		&i.Text,
		&i.URL,
	)
	return i, err
}

const deleteArtifact = `-- name: DeleteArtifact :exec
DELETE FROM artifact
WHERE
  id = $1
`

type DeleteArtifactParams struct {
	ID uuid.UUID
}

func (q *Queries) DeleteArtifact(ctx context.Context, arg DeleteArtifactParams) error {
	_, err := q.db.Exec(ctx, deleteArtifact, arg.ID)
	return err
}

const deleteArtifactsByOrganization = `-- name: DeleteArtifactsByOrganization :exec
DELETE FROM artifact
WHERE
  organization_id = $1
`

type DeleteArtifactsByOrganizationParams struct {
	OrganizationID uuid.UUID
}

func (q *Queries) DeleteArtifactsByOrganization(ctx context.Context, arg DeleteArtifactsByOrganizationParams) error {
	_, err := q.db.Exec(ctx, deleteArtifactsByOrganization, arg.OrganizationID)
	return err
}

const getArtifact = `-- name: GetArtifact :one
SELECT
  id, created_at, updated_at, credits, description, mime_type, name, organization_id, preview_image, producer_id, text, url
FROM
  artifact
WHERE
  id = $1
LIMIT
  1
`

type GetArtifactParams struct {
	ID uuid.UUID
}

func (q *Queries) GetArtifact(ctx context.Context, arg GetArtifactParams) (Artifact, error) {
	row := q.db.QueryRow(ctx, getArtifact, arg.ID)
	var i Artifact
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Credits,
		&i.Description,
		&i.MimeType,
		&i.Name,
		&i.OrganizationID,
		&i.PreviewImage,
		&i.ProducerID,
		&i.Text,
		&i.URL,
	)
	return i, err
}

const listArtifacts = `-- name: ListArtifacts :many
SELECT
  id, created_at, updated_at, credits, description, mime_type, name, organization_id, preview_image, producer_id, text, url
FROM
  artifact
ORDER BY
  created_at DESC
LIMIT
  $1
OFFSET
  $2
`

type ListArtifactsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListArtifacts(ctx context.Context, arg ListArtifactsParams) ([]Artifact, error) {
	rows, err := q.db.Query(ctx, listArtifacts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Artifact
	for rows.Next() {
		var i Artifact
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Credits,
			&i.Description,
			&i.MimeType,
			&i.Name,
			&i.OrganizationID,
			&i.PreviewImage,
			&i.ProducerID,
			&i.Text,
			&i.URL,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listArtifactsByOrganization = `-- name: ListArtifactsByOrganization :many
SELECT
  id, created_at, updated_at, credits, description, mime_type, name, organization_id, preview_image, producer_id, text, url
FROM
  artifact
WHERE
  organization_id = $1
ORDER BY
  created_at DESC
LIMIT
  $2
OFFSET
  $3
`

type ListArtifactsByOrganizationParams struct {
	OrganizationID uuid.UUID
	Limit          int32
	Offset         int32
}

func (q *Queries) ListArtifactsByOrganization(ctx context.Context, arg ListArtifactsByOrganizationParams) ([]Artifact, error) {
	rows, err := q.db.Query(ctx, listArtifactsByOrganization, arg.OrganizationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Artifact
	for rows.Next() {
		var i Artifact
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Credits,
			&i.Description,
			&i.MimeType,
			&i.Name,
			&i.OrganizationID,
			&i.PreviewImage,
			&i.ProducerID,
			&i.Text,
			&i.URL,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listArtifactsByProducer = `-- name: ListArtifactsByProducer :many
SELECT
  id, created_at, updated_at, credits, description, mime_type, name, organization_id, preview_image, producer_id, text, url
FROM
  artifact
WHERE
  producer_id = $1
ORDER BY
  created_at DESC
LIMIT
  $2
OFFSET
  $3
`

type ListArtifactsByProducerParams struct {
	ProducerID *uuid.UUID
	Limit      int32
	Offset     int32
}

func (q *Queries) ListArtifactsByProducer(ctx context.Context, arg ListArtifactsByProducerParams) ([]Artifact, error) {
	rows, err := q.db.Query(ctx, listArtifactsByProducer, arg.ProducerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Artifact
	for rows.Next() {
		var i Artifact
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Credits,
			&i.Description,
			&i.MimeType,
			&i.Name,
			&i.OrganizationID,
			&i.PreviewImage,
			&i.ProducerID,
			&i.Text,
			&i.URL,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArtifact = `-- name: UpdateArtifact :one
UPDATE artifact
SET
  name = COALESCE($2, name),
  description = COALESCE($3, description),
  mime_type = COALESCE($4, mime_type),
  url = COALESCE($5, url),
  credits = COALESCE($6, credits),
  preview_image = COALESCE($7, preview_image),
  text = COALESCE($8, text)
WHERE
  id = $1
RETURNING
  id, created_at, updated_at, credits, description, mime_type, name, organization_id, preview_image, producer_id, text, url
`

type UpdateArtifactParams struct {
	ID           uuid.UUID
	Name         *string
	Description  *string
	MimeType     *string
	URL          *string
	Credits      *int32
	PreviewImage *string
	Text         *string
}

func (q *Queries) UpdateArtifact(ctx context.Context, arg UpdateArtifactParams) (Artifact, error) {
	row := q.db.QueryRow(ctx, updateArtifact,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.MimeType,
		arg.URL,
		arg.Credits,
		arg.PreviewImage,
		arg.Text,
	)
	var i Artifact
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Credits,
		&i.Description,
		&i.MimeType,
		&i.Name,
		&i.OrganizationID,
		&i.PreviewImage,
		&i.ProducerID,
		&i.Text,
		&i.URL,
	)
	return i, err
}
