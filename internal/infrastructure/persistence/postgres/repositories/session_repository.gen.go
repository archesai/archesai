// Code generated by codegen repository. DO NOT EDIT.
package repositories

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/archesai/archesai/internal/core/entities"
	corerrors "github.com/archesai/archesai/internal/core/errors"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
)

// PostgresSessionRepository implements SessionRepository using PostgreSQL.
type PostgresSessionRepository struct {
	queries *Queries
}

// NewPostgresSessionRepository creates a new PostgreSQL repository.
func NewPostgresSessionRepository(db *pgxpool.Pool) *PostgresSessionRepository {
	return &PostgresSessionRepository{
		queries: New(db),
	}
}

// Session operations

// Create creates a new session
func (r *PostgresSessionRepository) Create(ctx context.Context, entity *entities.Session) (*entities.Session, error) {
	// Map entity fields to CreateSessionParams based on SQL INSERT statement
	// See: internal/infrastructure/persistence/postgres/queries/session.sql
	params := CreateSessionParams{
		ID:             entity.ID,
		AuthMethod:     entity.AuthMethod,
		AuthProvider:   entity.AuthProvider,
		ExpiresAt:      entity.ExpiresAt,
		IPAddress:      entity.IpAddress,
		OrganizationID: entity.OrganizationID,
		Token:          entity.Token,
		UserAgent:      entity.UserAgent,
		UserID:         entity.UserID,
	}

	result, err := r.queries.CreateSession(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to create session: %w", err)
	}

	return mapSessionFromDB(&result), nil
}

// Get retrieves a session by ID
func (r *PostgresSessionRepository) Get(ctx context.Context, id uuid.UUID) (*entities.Session, error) {
	result, err := r.queries.GetSession(ctx, id)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.ErrSessionNotFound
		}
		return nil, fmt.Errorf("failed to get session: %w", err)
	}

	return mapSessionFromDB(&result), nil
}

// Update updates an existing session
func (r *PostgresSessionRepository) Update(ctx context.Context, id uuid.UUID, entity *entities.Session) (*entities.Session, error) {
	// Map entity fields to UpdateSessionParams based on SQL UPDATE statement
	// See: internal/infrastructure/persistence/postgres/queries/session.sql
	params := UpdateSessionParams{
		ID:             id,
		AuthMethod:     entity.AuthMethod,
		AuthProvider:   entity.AuthProvider,
		ExpiresAt:      &entity.ExpiresAt,
		OrganizationID: entity.OrganizationID,
	}

	result, err := r.queries.UpdateSession(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.ErrSessionNotFound
		}
		return nil, fmt.Errorf("failed to update session: %w", err)
	}

	return mapSessionFromDB(&result), nil
}

// Delete removes a session
func (r *PostgresSessionRepository) Delete(ctx context.Context, id uuid.UUID) error {
	err := r.queries.DeleteSession(ctx, id)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return corerrors.ErrSessionNotFound
		}
		return fmt.Errorf("failed to delete session: %w", err)
	}
	return nil
}

// List returns a paginated list of sessions
func (r *PostgresSessionRepository) List(ctx context.Context, limit, offset int32) ([]*entities.Session, int64, error) {
	listParams := ListSessionsParams{
		Limit:  limit,
		Offset: offset,
	}

	results, err := r.queries.ListSessions(ctx, listParams)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list sessions: %w", err)
	}

	items := make([]*entities.Session, len(results))
	for i, result := range results {
		items[i] = mapSessionFromDB(&result)
	}

	// For now, return the count as the length of results
	// In production, you'd want a separate count query
	count := int64(len(results))

	return items, count, nil
}

func mapSessionFromDB(db *Session) *entities.Session {
	if db == nil {
		return nil
	}

	result := &entities.Session{
		ID:             db.ID,
		CreatedAt:      db.CreatedAt,
		UpdatedAt:      db.UpdatedAt,
		AuthMethod:     db.AuthMethod,
		AuthProvider:   db.AuthProvider,
		ExpiresAt:      db.ExpiresAt,
		IpAddress:      db.IPAddress,
		OrganizationID: db.OrganizationID,
		Token:          db.Token,
		UserAgent:      db.UserAgent,
		UserID:         db.UserID,
	}

	return result
}
