// Code generated by archesai. DO NOT EDIT.

package repositories

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/archesai/archesai/internal/core/entities"
	corerrors "github.com/archesai/archesai/internal/core/errors"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
)

// PostgresInvitationRepository implements InvitationRepository using PostgreSQL.
type PostgresInvitationRepository struct {
	queries *Queries
}

// NewPostgresInvitationRepository creates a new PostgreSQL repository.
func NewPostgresInvitationRepository(db *pgxpool.Pool) *PostgresInvitationRepository {
	return &PostgresInvitationRepository{
		queries: New(db),
	}
}

// Invitation operations

// Create creates a new invitation
func (r *PostgresInvitationRepository) Create(ctx context.Context, entity *entities.Invitation) (*entities.Invitation, error) {
	params := CreateInvitationParams{
		ID:             entity.ID,
		Email:          entity.Email,
		ExpiresAt:      entity.ExpiresAt,
		InviterID:      entity.InviterID,
		OrganizationID: entity.OrganizationID,
		Role:           string(entity.Role),
		Status:         string(entity.Status),
	}

	result, err := r.queries.CreateInvitation(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to create invitation: %w", err)
	}

	return mapInvitationFromDB(&result), nil
}

// Get retrieves a invitation by ID
func (r *PostgresInvitationRepository) Get(ctx context.Context, id uuid.UUID) (*entities.Invitation, error) {
	params := GetInvitationParams{
		ID: id,
	}

	result, err := r.queries.GetInvitation(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.ErrInvitationNotFound
		}
		return nil, fmt.Errorf("failed to get invitation: %w", err)
	}

	return mapInvitationFromDB(&result), nil
}

// Update updates an existing invitation
func (r *PostgresInvitationRepository) Update(ctx context.Context, id uuid.UUID, entity *entities.Invitation) (*entities.Invitation, error) {

	roleStr := string(entity.Role)
	statusStr := string(entity.Status)
	params := UpdateInvitationParams{
		ID:        id,
		Email:     &entity.Email,
		ExpiresAt: &entity.ExpiresAt,
		Role:      &roleStr,
		Status:    &statusStr,
	}

	result, err := r.queries.UpdateInvitation(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.ErrInvitationNotFound
		}
		return nil, fmt.Errorf("failed to update invitation: %w", err)
	}

	return mapInvitationFromDB(&result), nil
}

// Delete removes a invitation
func (r *PostgresInvitationRepository) Delete(ctx context.Context, id uuid.UUID) error {
	params := DeleteInvitationParams{
		ID: id,
	}

	err := r.queries.DeleteInvitation(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return corerrors.ErrInvitationNotFound
		}
		return fmt.Errorf("failed to delete invitation: %w", err)
	}
	return nil
}

// List returns a paginated list of invitations
func (r *PostgresInvitationRepository) List(ctx context.Context, limit, offset int32) ([]*entities.Invitation, int64, error) {
	listParams := ListInvitationsParams{
		Limit:  limit,
		Offset: offset,
	}

	results, err := r.queries.ListInvitations(ctx, listParams)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list invitations: %w", err)
	}

	items := make([]*entities.Invitation, len(results))
	for i, result := range results {
		items[i] = mapInvitationFromDB(&result)
	}

	// For now, return the count as the length of results
	// In production, you'd want a separate count query
	count := int64(len(results))

	return items, count, nil
}

// ListInvitationsByOrganization retrieves multiple Invitations by organizationID
func (r *PostgresInvitationRepository) ListInvitationsByOrganization(ctx context.Context, organizationID string) ([]*entities.Invitation, error) {
	params := ListInvitationsByOrganizationParams{
		OrganizationID: uuid.MustParse(organizationID),
	}

	result, err := r.queries.ListInvitationsByOrganization(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.ErrInvitationNotFound
		}
		return nil, fmt.Errorf("failed to ListInvitationsByOrganization: %w", err)
	}
	items := make([]*entities.Invitation, len(result))
	for i, res := range result {
		items[i] = mapInvitationFromDB(&res)
	}
	return items, nil

}

// GetInvitationByEmail retrieves a single Invitation by email and organizationID
func (r *PostgresInvitationRepository) GetInvitationByEmail(ctx context.Context, email string, organizationID string) (*entities.Invitation, error) {
	params := GetInvitationByEmailParams{
		Email:          email,
		OrganizationID: uuid.MustParse(organizationID),
	}

	result, err := r.queries.GetInvitationByEmail(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.ErrInvitationNotFound
		}
		return nil, fmt.Errorf("failed to GetInvitationByEmail: %w", err)
	}

	return mapInvitationFromDB(&result), nil

}

// ListInvitationsByInviter retrieves multiple Invitations by inviterID
func (r *PostgresInvitationRepository) ListInvitationsByInviter(ctx context.Context, inviterID string) ([]*entities.Invitation, error) {
	params := ListInvitationsByInviterParams{
		InviterID: uuid.MustParse(inviterID),
	}

	result, err := r.queries.ListInvitationsByInviter(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.ErrInvitationNotFound
		}
		return nil, fmt.Errorf("failed to ListInvitationsByInviter: %w", err)
	}
	items := make([]*entities.Invitation, len(result))
	for i, res := range result {
		items[i] = mapInvitationFromDB(&res)
	}
	return items, nil

}

func mapInvitationFromDB(db *Invitation) *entities.Invitation {
	if db == nil {
		return nil
	}

	result := &entities.Invitation{
		ID:             db.ID,
		CreatedAt:      db.CreatedAt,
		UpdatedAt:      db.UpdatedAt,
		Email:          db.Email,
		ExpiresAt:      db.ExpiresAt,
		InviterID:      db.InviterID,
		OrganizationID: db.OrganizationID,
		Role:           entities.InvitationRole(db.Role),
		Status:         entities.InvitationStatus(db.Status),
	}

	return result
}
