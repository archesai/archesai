// Code generated by codegen repository. DO NOT EDIT.
package repositories

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/archesai/archesai/internal/core/entities"
	corerrors "github.com/archesai/archesai/internal/core/errors"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
)

// PostgresLabelRepository implements LabelRepository using PostgreSQL.
type PostgresLabelRepository struct {
	queries *Queries
}

// NewPostgresLabelRepository creates a new PostgreSQL repository.
func NewPostgresLabelRepository(db *pgxpool.Pool) *PostgresLabelRepository {
	return &PostgresLabelRepository{
		queries: New(db),
	}
}

// Label operations

// Create creates a new label
func (r *PostgresLabelRepository) Create(ctx context.Context, entity *entities.Label) (*entities.Label, error) {
	// TODO: Review and adjust field mappings based on SQL schema
	// SQL params may have different pointer/type requirements than entity fields
	params := CreateLabelParams{
		ID: entity.ID,
		// Add required fields here based on CreateLabelParams struct
	}

	result, err := r.queries.CreateLabel(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to create label: %w", err)
	}

	return mapLabelFromDB(&result), nil
}

// Get retrieves a label by ID
func (r *PostgresLabelRepository) Get(ctx context.Context, id uuid.UUID) (*entities.Label, error) {
	result, err := r.queries.GetLabel(ctx, id)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.ErrLabelNotFound
		}
		return nil, fmt.Errorf("failed to get label: %w", err)
	}

	return mapLabelFromDB(&result), nil
}

// Update updates an existing label
func (r *PostgresLabelRepository) Update(ctx context.Context, id uuid.UUID, entity *entities.Label) (*entities.Label, error) {
	// TODO: Review and adjust field mappings based on SQL schema
	// Only include fields that are updatable (check SQL UPDATE query)
	params := UpdateLabelParams{
		ID: id,
		// Add updatable fields here based on UpdateLabelParams struct
	}

	result, err := r.queries.UpdateLabel(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.ErrLabelNotFound
		}
		return nil, fmt.Errorf("failed to update label: %w", err)
	}

	return mapLabelFromDB(&result), nil
}

// Delete removes a label
func (r *PostgresLabelRepository) Delete(ctx context.Context, id uuid.UUID) error {
	err := r.queries.DeleteLabel(ctx, id)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return corerrors.ErrLabelNotFound
		}
		return fmt.Errorf("failed to delete label: %w", err)
	}
	return nil
}

// List returns a paginated list of labels
func (r *PostgresLabelRepository) List(ctx context.Context, limit, offset int32) ([]*entities.Label, int64, error) {
	listParams := ListLabelsParams{
		Limit:  limit,
		Offset: offset,
	}

	results, err := r.queries.ListLabels(ctx, listParams)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list labels: %w", err)
	}

	items := make([]*entities.Label, len(results))
	for i, result := range results {
		items[i] = mapLabelFromDB(&result)
	}

	// For now, return the count as the length of results
	// In production, you'd want a separate count query
	count := int64(len(results))

	return items, count, nil
}

// Additional methods

// ListByOrganization retrieves multiple labels by organizationID
func (r *PostgresLabelRepository) ListByOrganization(ctx context.Context, organizationID string) ([]*entities.Label, error) {
	// TODO: Implement ListByOrganization - fetch multiple labels
	return nil, fmt.Errorf("ListByOrganization not yet implemented")
}

// GetLabelByName retrieves a single label by name and organizationID
func (r *PostgresLabelRepository) GetLabelByName(ctx context.Context, name string, organizationID string) (*entities.Label, error) {
	params := GetLabelByNameParams{
		Name:           name,
		OrganizationID: uuid.MustParse(organizationID),
	}

	result, err := r.queries.GetLabelByName(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.ErrLabelNotFound
		}
		return nil, fmt.Errorf("failed to GetLabelByName: %w", err)
	}

	return mapLabelFromDB(&result), nil
}

func mapLabelFromDB(db *Label) *entities.Label {
	if db == nil {
		return nil
	}

	result := &entities.Label{
		ID:             db.ID,
		CreatedAt:      db.CreatedAt,
		UpdatedAt:      db.UpdatedAt,
		Name:           db.Name,
		OrganizationID: db.OrganizationID,
	}

	return result
}
