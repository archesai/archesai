// Code generated by archesai. DO NOT EDIT.

package repositories

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/archesai/archesai/internal/core/entities"
	corerrors "github.com/archesai/archesai/internal/core/errors"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
)

// PostgresToolRepository implements ToolRepository using PostgreSQL.
type PostgresToolRepository struct {
	queries *Queries
}

// NewPostgresToolRepository creates a new PostgreSQL repository.
func NewPostgresToolRepository(db *pgxpool.Pool) *PostgresToolRepository {
	return &PostgresToolRepository{
		queries: New(db),
	}
}

// Tool operations

// Create creates a new tool
func (r *PostgresToolRepository) Create(ctx context.Context, entity *entities.Tool) (*entities.Tool, error) {
	params := CreateToolParams{
		ID:             entity.ID,
		Description:    entity.Description,
		InputMimeType:  entity.InputMimeType,
		Name:           entity.Name,
		OrganizationID: entity.OrganizationID,
		OutputMimeType: entity.OutputMimeType,
	}

	result, err := r.queries.CreateTool(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to create tool: %w", err)
	}

	return mapToolFromDB(&result), nil
}

// Get retrieves a tool by ID
func (r *PostgresToolRepository) Get(ctx context.Context, id uuid.UUID) (*entities.Tool, error) {
	params := GetToolParams{
		ID: id,
	}

	result, err := r.queries.GetTool(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.ErrToolNotFound
		}
		return nil, fmt.Errorf("failed to get tool: %w", err)
	}

	return mapToolFromDB(&result), nil
}

// Update updates an existing tool
func (r *PostgresToolRepository) Update(ctx context.Context, id uuid.UUID, entity *entities.Tool) (*entities.Tool, error) {

	params := UpdateToolParams{
		ID:             id,
		Description:    &entity.Description,
		InputMimeType:  &entity.InputMimeType,
		Name:           &entity.Name,
		OutputMimeType: &entity.OutputMimeType,
	}

	result, err := r.queries.UpdateTool(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.ErrToolNotFound
		}
		return nil, fmt.Errorf("failed to update tool: %w", err)
	}

	return mapToolFromDB(&result), nil
}

// Delete removes a tool
func (r *PostgresToolRepository) Delete(ctx context.Context, id uuid.UUID) error {
	params := DeleteToolParams{
		ID: id,
	}

	err := r.queries.DeleteTool(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return corerrors.ErrToolNotFound
		}
		return fmt.Errorf("failed to delete tool: %w", err)
	}
	return nil
}

// List returns a paginated list of tools
func (r *PostgresToolRepository) List(ctx context.Context, limit, offset int32) ([]*entities.Tool, int64, error) {
	listParams := ListToolsParams{
		Limit:  limit,
		Offset: offset,
	}

	results, err := r.queries.ListTools(ctx, listParams)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list tools: %w", err)
	}

	items := make([]*entities.Tool, len(results))
	for i, result := range results {
		items[i] = mapToolFromDB(&result)
	}

	// For now, return the count as the length of results
	// In production, you'd want a separate count query
	count := int64(len(results))

	return items, count, nil
}

// ListToolsByOrganization retrieves multiple Tools by organizationID
func (r *PostgresToolRepository) ListToolsByOrganization(ctx context.Context, organizationID string) ([]*entities.Tool, error) {
	params := ListToolsByOrganizationParams{
		OrganizationID: uuid.MustParse(organizationID),
	}

	result, err := r.queries.ListToolsByOrganization(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.ErrToolNotFound
		}
		return nil, fmt.Errorf("failed to ListToolsByOrganization: %w", err)
	}
	items := make([]*entities.Tool, len(result))
	for i, res := range result {
		items[i] = mapToolFromDB(&res)
	}
	return items, nil

}

func mapToolFromDB(db *Tool) *entities.Tool {
	if db == nil {
		return nil
	}

	result := &entities.Tool{
		ID:             db.ID,
		CreatedAt:      db.CreatedAt,
		UpdatedAt:      db.UpdatedAt,
		Description:    db.Description,
		InputMimeType:  db.InputMimeType,
		Name:           db.Name,
		OrganizationID: db.OrganizationID,
		OutputMimeType: db.OutputMimeType,
	}

	return result
}
