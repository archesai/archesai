// Code generated by codegen repository. DO NOT EDIT.
package repositories

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/errors"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgxpool"
)

// PostgresOrganizationRepository implements OrganizationRepository using PostgreSQL.
type PostgresOrganizationRepository struct {
	queries *Queries
}

// NewPostgresOrganizationRepository creates a new PostgreSQL repository.
func NewPostgresOrganizationRepository(db *pgxpool.Pool) *PostgresOrganizationRepository {
	return &PostgresOrganizationRepository{
		queries: New(db),
	}
}

// Organization operations

// Create creates a new organization
func (r *PostgresOrganizationRepository) Create(ctx context.Context, entity *entities.Organization) (*entities.Organization, error) {
	params := CreateOrganizationParams{
		ID: entity.ID,
	}

	result, err := r.queries.CreateOrganization(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to create organization: %w", err)
	}

	return mapOrganizationFromDB(&result), nil
}

// Get retrieves a organization by ID
func (r *PostgresOrganizationRepository) Get(ctx context.Context, id uuid.UUID) (*entities.Organization, error) {
	result, err := r.queries.GetOrganization(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, errors.ErrOrganizationNotFound
		}
		return nil, fmt.Errorf("failed to get organization: %w", err)
	}

	return mapOrganizationFromDB(&result), nil
}

// Update updates an existing organization
func (r *PostgresOrganizationRepository) Update(ctx context.Context, id uuid.UUID, entity *entities.Organization) (*entities.Organization, error) {
	params := UpdateOrganizationParams{
		ID: id,
	}

	result, err := r.queries.UpdateOrganization(ctx, params)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, errors.ErrOrganizationNotFound
		}
		return nil, fmt.Errorf("failed to update organization: %w", err)
	}

	return mapOrganizationFromDB(&result), nil
}

// Delete removes a organization
func (r *PostgresOrganizationRepository) Delete(ctx context.Context, id uuid.UUID) error {
	err := r.queries.DeleteOrganization(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return errors.ErrOrganizationNotFound
		}
		return fmt.Errorf("failed to delete organization: %w", err)
	}
	return nil
}

// List returns a paginated list of organizations
func (r *PostgresOrganizationRepository) List(ctx context.Context, limit, offset int32) ([]*entities.Organization, int64, error) {
	listParams := ListOrganizationsParams{
		Limit:  limit,
		Offset: offset,
	}

	results, err := r.queries.ListOrganizations(ctx, listParams)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list organizations: %w", err)
	}

	items := make([]*entities.Organization, len(results))
	for i, result := range results {
		items[i] = mapOrganizationFromDB(&result)
	}

	// For now, return the count as the length of results
	// In production, you'd want a separate count query
	count := int64(len(results))

	return items, count, nil
}

// Additional methods

// GetBySlug retrieves a single organization by slug
func (r *PostgresOrganizationRepository) GetBySlug(ctx context.Context, slug string) (*entities.Organization, error) {

	// TODO: Implement GetBySlug - fetch single organization
	return nil, fmt.Errorf("GetBySlug not yet implemented")

}

// GetByStripeCustomerID retrieves a single organization by stripeCustomerID
func (r *PostgresOrganizationRepository) GetByStripeCustomerID(ctx context.Context, stripeCustomerID string) (*entities.Organization, error) {

	// TODO: Implement GetByStripeCustomerID - fetch single organization
	return nil, fmt.Errorf("GetByStripeCustomerID not yet implemented")

}

func mapOrganizationFromDB(db *Organization) *entities.Organization {
	if db == nil {
		return nil
	}

	result := &entities.Organization{
		ID:        db.ID,
		CreatedAt: db.CreatedAt,
		UpdatedAt: db.UpdatedAt,
	}

	return result
}
