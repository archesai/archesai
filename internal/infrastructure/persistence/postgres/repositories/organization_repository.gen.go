// Code generated by archesai. DO NOT EDIT.

package repositories

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/archesai/archesai/internal/core/entities"
	corerrors "github.com/archesai/archesai/internal/core/errors"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
)

// PostgresOrganizationRepository implements OrganizationRepository using PostgreSQL.
type PostgresOrganizationRepository struct {
	queries *Queries
}

// NewPostgresOrganizationRepository creates a new PostgreSQL repository.
func NewPostgresOrganizationRepository(db *pgxpool.Pool) *PostgresOrganizationRepository {
	return &PostgresOrganizationRepository{
		queries: New(db),
	}
}

// Organization operations

// Create creates a new organization
func (r *PostgresOrganizationRepository) Create(ctx context.Context, entity *entities.Organization) (*entities.Organization, error) {
	params := CreateOrganizationParams{
		ID:                       entity.ID,
		BillingEmail:             entity.BillingEmail,
		Credits:                  entity.Credits,
		Logo:                     entity.Logo,
		Name:                     entity.Name,
		Plan:                     string(entity.Plan),
		Slug:                     entity.Slug,
		StripeCustomerIdentifier: entity.StripeCustomerIdentifier,
	}

	result, err := r.queries.CreateOrganization(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to create organization: %w", err)
	}

	return mapOrganizationFromDB(&result), nil
}

// Get retrieves a organization by ID
func (r *PostgresOrganizationRepository) Get(ctx context.Context, id uuid.UUID) (*entities.Organization, error) {
	params := GetOrganizationParams{
		ID: id,
	}

	result, err := r.queries.GetOrganization(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.ErrOrganizationNotFound
		}
		return nil, fmt.Errorf("failed to get organization: %w", err)
	}

	return mapOrganizationFromDB(&result), nil
}

// Update updates an existing organization
func (r *PostgresOrganizationRepository) Update(ctx context.Context, id uuid.UUID, entity *entities.Organization) (*entities.Organization, error) {

	planStr := string(entity.Plan)
	params := UpdateOrganizationParams{
		ID:           id,
		BillingEmail: entity.BillingEmail,
		Credits:      &entity.Credits,
		Logo:         entity.Logo,
		Name:         &entity.Name,
		Plan:         &planStr,
	}

	result, err := r.queries.UpdateOrganization(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.ErrOrganizationNotFound
		}
		return nil, fmt.Errorf("failed to update organization: %w", err)
	}

	return mapOrganizationFromDB(&result), nil
}

// Delete removes a organization
func (r *PostgresOrganizationRepository) Delete(ctx context.Context, id uuid.UUID) error {
	params := DeleteOrganizationParams{
		ID: id,
	}

	err := r.queries.DeleteOrganization(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return corerrors.ErrOrganizationNotFound
		}
		return fmt.Errorf("failed to delete organization: %w", err)
	}
	return nil
}

// List returns a paginated list of organizations
func (r *PostgresOrganizationRepository) List(ctx context.Context, limit, offset int32) ([]*entities.Organization, int64, error) {
	listParams := ListOrganizationsParams{
		Limit:  limit,
		Offset: offset,
	}

	results, err := r.queries.ListOrganizations(ctx, listParams)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list organizations: %w", err)
	}

	items := make([]*entities.Organization, len(results))
	for i, result := range results {
		items[i] = mapOrganizationFromDB(&result)
	}

	// For now, return the count as the length of results
	// In production, you'd want a separate count query
	count := int64(len(results))

	return items, count, nil
}

// GetOrganizationBySlug retrieves a single Organization by slug
func (r *PostgresOrganizationRepository) GetOrganizationBySlug(ctx context.Context, slug string) (*entities.Organization, error) {
	params := GetOrganizationBySlugParams{
		Slug: slug,
	}

	result, err := r.queries.GetOrganizationBySlug(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.ErrOrganizationNotFound
		}
		return nil, fmt.Errorf("failed to GetOrganizationBySlug: %w", err)
	}

	return mapOrganizationFromDB(&result), nil

}

// GetOrganizationByStripeCustomerID retrieves a single Organization by stripeCustomerIdentifier
func (r *PostgresOrganizationRepository) GetOrganizationByStripeCustomerID(ctx context.Context, stripeCustomerIdentifier string) (*entities.Organization, error) {
	params := GetOrganizationByStripeCustomerIDParams{
		StripeCustomerIdentifier: stripeCustomerIdentifier,
	}

	result, err := r.queries.GetOrganizationByStripeCustomerID(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.ErrOrganizationNotFound
		}
		return nil, fmt.Errorf("failed to GetOrganizationByStripeCustomerID: %w", err)
	}

	return mapOrganizationFromDB(&result), nil

}

func mapOrganizationFromDB(db *Organization) *entities.Organization {
	if db == nil {
		return nil
	}

	result := &entities.Organization{
		ID:                       db.ID,
		CreatedAt:                db.CreatedAt,
		UpdatedAt:                db.UpdatedAt,
		BillingEmail:             db.BillingEmail,
		Credits:                  db.Credits,
		Logo:                     db.Logo,
		Name:                     db.Name,
		Plan:                     entities.OrganizationPlan(db.Plan),
		Slug:                     db.Slug,
		StripeCustomerIdentifier: db.StripeCustomerIdentifier,
	}

	return result
}
