// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: labels.sql

package repositories

import (
	"context"

	"github.com/google/uuid"
)

const createLabel = `-- name: CreateLabel :one
INSERT INTO
  label (id, organization_id, name)
VALUES
  ($1, $2, $3)
RETURNING
  id, created_at, updated_at, name, organization_id
`

type CreateLabelParams struct {
	ID             uuid.UUID
	OrganizationID uuid.UUID
	Name           string
}

func (q *Queries) CreateLabel(ctx context.Context, arg CreateLabelParams) (Label, error) {
	row := q.db.QueryRow(ctx, createLabel, arg.ID, arg.OrganizationID, arg.Name)
	var i Label
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.OrganizationID,
	)
	return i, err
}

const deleteLabel = `-- name: DeleteLabel :exec
DELETE FROM label
WHERE
  id = $1
`

func (q *Queries) DeleteLabel(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteLabel, id)
	return err
}

const deleteLabelsByOrganization = `-- name: DeleteLabelsByOrganization :exec
DELETE FROM label
WHERE
  organization_id = $1
`

func (q *Queries) DeleteLabelsByOrganization(ctx context.Context, organizationID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteLabelsByOrganization, organizationID)
	return err
}

const getLabel = `-- name: GetLabel :one
SELECT
  id, created_at, updated_at, name, organization_id
FROM
  label
WHERE
  id = $1
LIMIT
  1
`

func (q *Queries) GetLabel(ctx context.Context, id uuid.UUID) (Label, error) {
	row := q.db.QueryRow(ctx, getLabel, id)
	var i Label
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.OrganizationID,
	)
	return i, err
}

const getLabelByName = `-- name: GetLabelByName :one
SELECT
  id, created_at, updated_at, name, organization_id
FROM
  label
WHERE
  organization_id = $1
  AND name = $2
LIMIT
  1
`

type GetLabelByNameParams struct {
	OrganizationID uuid.UUID
	Name           string
}

func (q *Queries) GetLabelByName(ctx context.Context, arg GetLabelByNameParams) (Label, error) {
	row := q.db.QueryRow(ctx, getLabelByName, arg.OrganizationID, arg.Name)
	var i Label
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.OrganizationID,
	)
	return i, err
}

const listLabels = `-- name: ListLabels :many
SELECT
  id, created_at, updated_at, name, organization_id
FROM
  label
ORDER BY
  created_at DESC
LIMIT
  $1
OFFSET
  $2
`

type ListLabelsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListLabels(ctx context.Context, arg ListLabelsParams) ([]Label, error) {
	rows, err := q.db.Query(ctx, listLabels, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Label
	for rows.Next() {
		var i Label
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.OrganizationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLabelsByOrganization = `-- name: ListLabelsByOrganization :many
SELECT
  id, created_at, updated_at, name, organization_id
FROM
  label
WHERE
  organization_id = $1
ORDER BY
  name ASC
LIMIT
  $2
OFFSET
  $3
`

type ListLabelsByOrganizationParams struct {
	OrganizationID uuid.UUID
	Limit          int32
	Offset         int32
}

func (q *Queries) ListLabelsByOrganization(ctx context.Context, arg ListLabelsByOrganizationParams) ([]Label, error) {
	rows, err := q.db.Query(ctx, listLabelsByOrganization, arg.OrganizationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Label
	for rows.Next() {
		var i Label
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.OrganizationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLabel = `-- name: UpdateLabel :one
UPDATE label
SET
  name = COALESCE($2, name)
WHERE
  id = $1
RETURNING
  id, created_at, updated_at, name, organization_id
`

type UpdateLabelParams struct {
	ID   uuid.UUID
	Name *string
}

func (q *Queries) UpdateLabel(ctx context.Context, arg UpdateLabelParams) (Label, error) {
	row := q.db.QueryRow(ctx, updateLabel, arg.ID, arg.Name)
	var i Label
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.OrganizationID,
	)
	return i, err
}
