// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package repositories

import (
	"context"

	"github.com/google/uuid"
)

const countUsers = `-- name: CountUsers :one
SELECT
  COUNT(*)
FROM
  "user"
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO
  "user" (id, email, name, email_verified, image)
VALUES
  (
    $1,
    $2,
    $3,
    COALESCE($4, false),
    $5
  )
RETURNING
  id, created_at, updated_at, email, email_verified, image, name
`

type CreateUserParams struct {
	ID            uuid.UUID
	Email         string
	Name          string
	EmailVerified interface{}
	Image         *string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Name,
		arg.EmailVerified,
		arg.Image,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.EmailVerified,
		&i.Image,
		&i.Name,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user"
WHERE
  id = $1
`

type DeleteUserParams struct {
	ID uuid.UUID
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) error {
	_, err := q.db.Exec(ctx, deleteUser, arg.ID)
	return err
}

const getByEmail = `-- name: GetByEmail :one
SELECT
  id, created_at, updated_at, email, email_verified, image, name
FROM
  "user"
WHERE
  email = $1
LIMIT
  1
`

type GetByEmailParams struct {
	Email string
}

func (q *Queries) GetByEmail(ctx context.Context, arg GetByEmailParams) (User, error) {
	row := q.db.QueryRow(ctx, getByEmail, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.EmailVerified,
		&i.Image,
		&i.Name,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT
  id, created_at, updated_at, email, email_verified, image, name
FROM
  "user"
WHERE
  id = $1
LIMIT
  1
`

type GetUserParams struct {
	ID uuid.UUID
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (User, error) {
	row := q.db.QueryRow(ctx, getUser, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.EmailVerified,
		&i.Image,
		&i.Name,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
  id, created_at, updated_at, email, email_verified, image, name
FROM
  "user"
WHERE
  email = $1
LIMIT
  1
`

type GetUserByEmailParams struct {
	Email string
}

func (q *Queries) GetUserByEmail(ctx context.Context, arg GetUserByEmailParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.EmailVerified,
		&i.Image,
		&i.Name,
	)
	return i, err
}

const getUserBySessionID = `-- name: GetUserBySessionID :one
SELECT u.id, u.created_at, u.updated_at, u.email, u.email_verified, u.image, u.name
FROM "user" u
JOIN "session" s ON u.id = s.user_id
WHERE s.id = $1
LIMIT 1
`

type GetUserBySessionIDParams struct {
	SessionID uuid.UUID
}

func (q *Queries) GetUserBySessionID(ctx context.Context, arg GetUserBySessionIDParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserBySessionID, arg.SessionID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.EmailVerified,
		&i.Image,
		&i.Name,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT
  id, created_at, updated_at, email, email_verified, image, name
FROM
  "user"
ORDER BY
  created_at DESC
LIMIT
  $1
OFFSET
  $2
`

type ListUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.EmailVerified,
			&i.Image,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user"
SET
  name = COALESCE($2, name),
  email = COALESCE($3, email),
  email_verified = COALESCE($4, email_verified),
  image = COALESCE($5, image)
WHERE
  id = $1
RETURNING
  id, created_at, updated_at, email, email_verified, image, name
`

type UpdateUserParams struct {
	ID            uuid.UUID
	Name          *string
	Email         *string
	EmailVerified *bool
	Image         *string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.EmailVerified,
		arg.Image,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.EmailVerified,
		&i.Image,
		&i.Name,
	)
	return i, err
}
