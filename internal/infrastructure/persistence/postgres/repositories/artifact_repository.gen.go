// Code generated by codegen repository. DO NOT EDIT.
package repositories

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/errors"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgxpool"
)

// PostgresArtifactRepository implements ArtifactRepository using PostgreSQL.
type PostgresArtifactRepository struct {
	queries *Queries
}

// NewPostgresArtifactRepository creates a new PostgreSQL repository.
func NewPostgresArtifactRepository(db *pgxpool.Pool) *PostgresArtifactRepository {
	return &PostgresArtifactRepository{
		queries: New(db),
	}
}

// Artifact operations

// Create creates a new artifact
func (r *PostgresArtifactRepository) Create(ctx context.Context, entity *entities.Artifact) (*entities.Artifact, error) {
	params := CreateArtifactParams{
		ID: entity.ID,
	}

	result, err := r.queries.CreateArtifact(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to create artifact: %w", err)
	}

	return mapArtifactFromDB(&result), nil
}

// Get retrieves a artifact by ID
func (r *PostgresArtifactRepository) Get(ctx context.Context, id uuid.UUID) (*entities.Artifact, error) {
	result, err := r.queries.GetArtifact(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, errors.ErrArtifactNotFound
		}
		return nil, fmt.Errorf("failed to get artifact: %w", err)
	}

	return mapArtifactFromDB(&result), nil
}

// Update updates an existing artifact
func (r *PostgresArtifactRepository) Update(ctx context.Context, id uuid.UUID, entity *entities.Artifact) (*entities.Artifact, error) {
	params := UpdateArtifactParams{
		ID: id,
	}

	result, err := r.queries.UpdateArtifact(ctx, params)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, errors.ErrArtifactNotFound
		}
		return nil, fmt.Errorf("failed to update artifact: %w", err)
	}

	return mapArtifactFromDB(&result), nil
}

// Delete removes a artifact
func (r *PostgresArtifactRepository) Delete(ctx context.Context, id uuid.UUID) error {
	err := r.queries.DeleteArtifact(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return errors.ErrArtifactNotFound
		}
		return fmt.Errorf("failed to delete artifact: %w", err)
	}
	return nil
}

// List returns a paginated list of artifacts
func (r *PostgresArtifactRepository) List(ctx context.Context, limit, offset int32) ([]*entities.Artifact, int64, error) {
	listParams := ListArtifactsParams{
		Limit:  limit,
		Offset: offset,
	}

	results, err := r.queries.ListArtifacts(ctx, listParams)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list artifacts: %w", err)
	}

	items := make([]*entities.Artifact, len(results))
	for i, result := range results {
		items[i] = mapArtifactFromDB(&result)
	}

	// For now, return the count as the length of results
	// In production, you'd want a separate count query
	count := int64(len(results))

	return items, count, nil
}

// Additional methods

// ListByOrganization retrieves multiple artifacts by organizationID
func (r *PostgresArtifactRepository) ListByOrganization(ctx context.Context, organizationID string) ([]*entities.Artifact, error) {
	// TODO: Implement ListByOrganization - fetch multiple artifacts
	return nil, fmt.Errorf("ListByOrganization not yet implemented")
}

// ListByProducer retrieves multiple artifacts by producerID
func (r *PostgresArtifactRepository) ListByProducer(ctx context.Context, producerID string) ([]*entities.Artifact, error) {
	// TODO: Implement ListByProducer - fetch multiple artifacts
	return nil, fmt.Errorf("ListByProducer not yet implemented")
}

func mapArtifactFromDB(db *Artifact) *entities.Artifact {
	if db == nil {
		return nil
	}

	result := &entities.Artifact{
		ID:        db.ID,
		CreatedAt: db.CreatedAt,
		UpdatedAt: db.UpdatedAt,
	}

	return result
}
