// Code generated by archesai. DO NOT EDIT.

package repositories

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/archesai/archesai/internal/core/entities"
	corerrors "github.com/archesai/archesai/internal/core/errors"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
)

// PostgresArtifactRepository implements ArtifactRepository using PostgreSQL.
type PostgresArtifactRepository struct {
	queries *Queries
}

// NewPostgresArtifactRepository creates a new PostgreSQL repository.
func NewPostgresArtifactRepository(db *pgxpool.Pool) *PostgresArtifactRepository {
	return &PostgresArtifactRepository{
		queries: New(db),
	}
}

// Artifact operations

// Create creates a new artifact
func (r *PostgresArtifactRepository) Create(ctx context.Context, entity *entities.Artifact) (*entities.Artifact, error) {
	params := CreateArtifactParams{
		ID:             entity.ID,
		Credits:        entity.Credits,
		Description:    entity.Description,
		MimeType:       entity.MimeType,
		Name:           entity.Name,
		OrganizationID: entity.OrganizationID,
		PreviewImage:   entity.PreviewImage,
		ProducerID:     entity.ProducerID,
		Text:           entity.Text,
	}

	result, err := r.queries.CreateArtifact(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to create artifact: %w", err)
	}

	return mapArtifactFromDB(&result), nil
}

// Get retrieves a artifact by ID
func (r *PostgresArtifactRepository) Get(ctx context.Context, id uuid.UUID) (*entities.Artifact, error) {
	params := GetArtifactParams{
		ID: id,
	}

	result, err := r.queries.GetArtifact(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.ErrArtifactNotFound
		}
		return nil, fmt.Errorf("failed to get artifact: %w", err)
	}

	return mapArtifactFromDB(&result), nil
}

// Update updates an existing artifact
func (r *PostgresArtifactRepository) Update(ctx context.Context, id uuid.UUID, entity *entities.Artifact) (*entities.Artifact, error) {

	params := UpdateArtifactParams{
		ID:           id,
		Credits:      &entity.Credits,
		Description:  entity.Description,
		MimeType:     &entity.MimeType,
		Name:         entity.Name,
		PreviewImage: entity.PreviewImage,
		Text:         entity.Text,
	}

	result, err := r.queries.UpdateArtifact(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.ErrArtifactNotFound
		}
		return nil, fmt.Errorf("failed to update artifact: %w", err)
	}

	return mapArtifactFromDB(&result), nil
}

// Delete removes a artifact
func (r *PostgresArtifactRepository) Delete(ctx context.Context, id uuid.UUID) error {
	params := DeleteArtifactParams{
		ID: id,
	}

	err := r.queries.DeleteArtifact(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return corerrors.ErrArtifactNotFound
		}
		return fmt.Errorf("failed to delete artifact: %w", err)
	}
	return nil
}

// List returns a paginated list of artifacts
func (r *PostgresArtifactRepository) List(ctx context.Context, limit, offset int32) ([]*entities.Artifact, int64, error) {
	listParams := ListArtifactsParams{
		Limit:  limit,
		Offset: offset,
	}

	results, err := r.queries.ListArtifacts(ctx, listParams)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list artifacts: %w", err)
	}

	items := make([]*entities.Artifact, len(results))
	for i, result := range results {
		items[i] = mapArtifactFromDB(&result)
	}

	// For now, return the count as the length of results
	// In production, you'd want a separate count query
	count := int64(len(results))

	return items, count, nil
}

// ListArtifactsByOrganization retrieves multiple Artifacts by organizationID
func (r *PostgresArtifactRepository) ListArtifactsByOrganization(ctx context.Context, organizationID string) ([]*entities.Artifact, error) {
	params := ListArtifactsByOrganizationParams{
		OrganizationID: uuid.MustParse(organizationID),
	}

	result, err := r.queries.ListArtifactsByOrganization(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.ErrArtifactNotFound
		}
		return nil, fmt.Errorf("failed to ListArtifactsByOrganization: %w", err)
	}
	items := make([]*entities.Artifact, len(result))
	for i, res := range result {
		items[i] = mapArtifactFromDB(&res)
	}
	return items, nil

}

// ListArtifactsByProducer retrieves multiple Artifacts by producerID
func (r *PostgresArtifactRepository) ListArtifactsByProducer(ctx context.Context, producerID string) ([]*entities.Artifact, error) {
	params := ListArtifactsByProducerParams{
		ProducerID: func() *uuid.UUID {
			id := uuid.MustParse(producerID)
			return &id
		}(),
	}

	result, err := r.queries.ListArtifactsByProducer(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.ErrArtifactNotFound
		}
		return nil, fmt.Errorf("failed to ListArtifactsByProducer: %w", err)
	}
	items := make([]*entities.Artifact, len(result))
	for i, res := range result {
		items[i] = mapArtifactFromDB(&res)
	}
	return items, nil

}

func mapArtifactFromDB(db *Artifact) *entities.Artifact {
	if db == nil {
		return nil
	}

	result := &entities.Artifact{
		ID:             db.ID,
		CreatedAt:      db.CreatedAt,
		UpdatedAt:      db.UpdatedAt,
		Credits:        db.Credits,
		Description:    db.Description,
		MimeType:       db.MimeType,
		Name:           db.Name,
		OrganizationID: db.OrganizationID,
		PreviewImage:   db.PreviewImage,
		ProducerID:     db.ProducerID,
		Text:           db.Text,
	}

	return result
}
