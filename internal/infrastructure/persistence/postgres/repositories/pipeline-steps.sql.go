// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: pipeline-steps.sql

package repositories

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const countPipelineSteps = `-- name: CountPipelineSteps :one
SELECT
  COUNT(*) as count
FROM
  pipeline_step
WHERE
  pipeline_id = $1
`

func (q *Queries) CountPipelineSteps(ctx context.Context, pipelineID uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countPipelineSteps, pipelineID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPipelineStep = `-- name: CreatePipelineStep :one
INSERT INTO
  pipeline_step (id, pipeline_id, tool_id)
VALUES
  ($1, $2, $3)
RETURNING
  id, created_at, updated_at, pipeline_id, tool_id
`

type CreatePipelineStepParams struct {
	ID         uuid.UUID
	PipelineID uuid.UUID
	ToolID     uuid.UUID
}

func (q *Queries) CreatePipelineStep(ctx context.Context, arg CreatePipelineStepParams) (PipelineStep, error) {
	row := q.db.QueryRow(ctx, createPipelineStep, arg.ID, arg.PipelineID, arg.ToolID)
	var i PipelineStep
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PipelineID,
		&i.ToolID,
	)
	return i, err
}

const deletePipelineStep = `-- name: DeletePipelineStep :exec
DELETE FROM pipeline_step
WHERE
  id = $1
`

func (q *Queries) DeletePipelineStep(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePipelineStep, id)
	return err
}

const deletePipelineStepsByPipeline = `-- name: DeletePipelineStepsByPipeline :exec
DELETE FROM pipeline_step
WHERE
  pipeline_id = $1
`

func (q *Queries) DeletePipelineStepsByPipeline(ctx context.Context, pipelineID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePipelineStepsByPipeline, pipelineID)
	return err
}

const getPipelineStep = `-- name: GetPipelineStep :one
SELECT
  id, created_at, updated_at, pipeline_id, tool_id
FROM
  pipeline_step
WHERE
  id = $1
LIMIT
  1
`

func (q *Queries) GetPipelineStep(ctx context.Context, id uuid.UUID) (PipelineStep, error) {
	row := q.db.QueryRow(ctx, getPipelineStep, id)
	var i PipelineStep
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PipelineID,
		&i.ToolID,
	)
	return i, err
}

const getPipelineStepsWithDependencies = `-- name: GetPipelineStepsWithDependencies :many
SELECT
  ps.id,
  ps.pipeline_id,
  ps.tool_id,
  ps.created_at,
  ps.updated_at,
  COALESCE(
    ARRAY_AGG(DISTINCT psd.prerequisite_id) FILTER (
      WHERE
        psd.prerequisite_id IS NOT NULL
    ),
    ARRAY[]::UUID[]
  ) as dependencies
FROM
  pipeline_step ps
  LEFT JOIN pipeline_step_to_dependency psd ON ps.id = psd.pipeline_step_id
WHERE
  ps.pipeline_id = $1
GROUP BY
  ps.id,
  ps.pipeline_id,
  ps.tool_id,
  ps.created_at,
  ps.updated_at
ORDER BY
  ps.created_at ASC
`

type GetPipelineStepsWithDependenciesRow struct {
	ID           uuid.UUID
	PipelineID   uuid.UUID
	ToolID       uuid.UUID
	CreatedAt    time.Time
	UpdatedAt    time.Time
	Dependencies interface{}
}

func (q *Queries) GetPipelineStepsWithDependencies(ctx context.Context, pipelineID uuid.UUID) ([]GetPipelineStepsWithDependenciesRow, error) {
	rows, err := q.db.Query(ctx, getPipelineStepsWithDependencies, pipelineID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPipelineStepsWithDependenciesRow
	for rows.Next() {
		var i GetPipelineStepsWithDependenciesRow
		if err := rows.Scan(
			&i.ID,
			&i.PipelineID,
			&i.ToolID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Dependencies,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPipelineSteps = `-- name: ListPipelineSteps :many
SELECT
  id, created_at, updated_at, pipeline_id, tool_id
FROM
  pipeline_step
ORDER BY
  created_at DESC
LIMIT
  $1
OFFSET
  $2
`

type ListPipelineStepsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListPipelineSteps(ctx context.Context, arg ListPipelineStepsParams) ([]PipelineStep, error) {
	rows, err := q.db.Query(ctx, listPipelineSteps, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PipelineStep
	for rows.Next() {
		var i PipelineStep
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PipelineID,
			&i.ToolID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPipelineStepsByPipeline = `-- name: ListPipelineStepsByPipeline :many
SELECT
  id, created_at, updated_at, pipeline_id, tool_id
FROM
  pipeline_step
WHERE
  pipeline_id = $1
ORDER BY
  created_at ASC
LIMIT
  $2
OFFSET
  $3
`

type ListPipelineStepsByPipelineParams struct {
	PipelineID uuid.UUID
	Limit      int32
	Offset     int32
}

func (q *Queries) ListPipelineStepsByPipeline(ctx context.Context, arg ListPipelineStepsByPipelineParams) ([]PipelineStep, error) {
	rows, err := q.db.Query(ctx, listPipelineStepsByPipeline, arg.PipelineID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PipelineStep
	for rows.Next() {
		var i PipelineStep
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PipelineID,
			&i.ToolID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPipelineStepsByTool = `-- name: ListPipelineStepsByTool :many
SELECT
  id, created_at, updated_at, pipeline_id, tool_id
FROM
  pipeline_step
WHERE
  tool_id = $1
ORDER BY
  created_at DESC
LIMIT
  $2
OFFSET
  $3
`

type ListPipelineStepsByToolParams struct {
	ToolID uuid.UUID
	Limit  int32
	Offset int32
}

func (q *Queries) ListPipelineStepsByTool(ctx context.Context, arg ListPipelineStepsByToolParams) ([]PipelineStep, error) {
	rows, err := q.db.Query(ctx, listPipelineStepsByTool, arg.ToolID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PipelineStep
	for rows.Next() {
		var i PipelineStep
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PipelineID,
			&i.ToolID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePipelineStep = `-- name: UpdatePipelineStep :one
UPDATE pipeline_step
SET
  tool_id = COALESCE($2, tool_id)
WHERE
  id = $1
RETURNING
  id, created_at, updated_at, pipeline_id, tool_id
`

type UpdatePipelineStepParams struct {
	ID     uuid.UUID
	ToolID *uuid.UUID
}

func (q *Queries) UpdatePipelineStep(ctx context.Context, arg UpdatePipelineStepParams) (PipelineStep, error) {
	row := q.db.QueryRow(ctx, updatePipelineStep, arg.ID, arg.ToolID)
	var i PipelineStep
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PipelineID,
		&i.ToolID,
	)
	return i, err
}
