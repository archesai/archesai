// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: invitations.sql

package repositories

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createInvitation = `-- name: CreateInvitation :one
INSERT INTO
  invitation (
    id,
    organization_id,
    inviter_id,
    email,
    role,
    expires_at,
    status
  )
VALUES
  ($1, $2, $3, $4, $5, $6, $7)
RETURNING
  id, created_at, updated_at, email, expires_at, inviter_id, organization_id, role, status
`

type CreateInvitationParams struct {
	ID             uuid.UUID
	OrganizationID uuid.UUID
	InviterID      uuid.UUID
	Email          string
	Role           string
	ExpiresAt      time.Time
	Status         string
}

func (q *Queries) CreateInvitation(ctx context.Context, arg CreateInvitationParams) (Invitation, error) {
	row := q.db.QueryRow(ctx, createInvitation,
		arg.ID,
		arg.OrganizationID,
		arg.InviterID,
		arg.Email,
		arg.Role,
		arg.ExpiresAt,
		arg.Status,
	)
	var i Invitation
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.ExpiresAt,
		&i.InviterID,
		&i.OrganizationID,
		&i.Role,
		&i.Status,
	)
	return i, err
}

const deleteInvitation = `-- name: DeleteInvitation :exec
DELETE FROM invitation
WHERE
  id = $1
`

type DeleteInvitationParams struct {
	ID uuid.UUID
}

func (q *Queries) DeleteInvitation(ctx context.Context, arg DeleteInvitationParams) error {
	_, err := q.db.Exec(ctx, deleteInvitation, arg.ID)
	return err
}

const deleteInvitationsByOrganization = `-- name: DeleteInvitationsByOrganization :exec
DELETE FROM invitation
WHERE
  organization_id = $1
`

type DeleteInvitationsByOrganizationParams struct {
	OrganizationID uuid.UUID
}

func (q *Queries) DeleteInvitationsByOrganization(ctx context.Context, arg DeleteInvitationsByOrganizationParams) error {
	_, err := q.db.Exec(ctx, deleteInvitationsByOrganization, arg.OrganizationID)
	return err
}

const getInvitation = `-- name: GetInvitation :one
SELECT
  id, created_at, updated_at, email, expires_at, inviter_id, organization_id, role, status
FROM
  invitation
WHERE
  id = $1
LIMIT
  1
`

type GetInvitationParams struct {
	ID uuid.UUID
}

func (q *Queries) GetInvitation(ctx context.Context, arg GetInvitationParams) (Invitation, error) {
	row := q.db.QueryRow(ctx, getInvitation, arg.ID)
	var i Invitation
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.ExpiresAt,
		&i.InviterID,
		&i.OrganizationID,
		&i.Role,
		&i.Status,
	)
	return i, err
}

const getInvitationByEmail = `-- name: GetInvitationByEmail :one
SELECT
  id, created_at, updated_at, email, expires_at, inviter_id, organization_id, role, status
FROM
  invitation
WHERE
  organization_id = $1
  AND email = $2
LIMIT
  1
`

type GetInvitationByEmailParams struct {
	OrganizationID uuid.UUID
	Email          string
}

func (q *Queries) GetInvitationByEmail(ctx context.Context, arg GetInvitationByEmailParams) (Invitation, error) {
	row := q.db.QueryRow(ctx, getInvitationByEmail, arg.OrganizationID, arg.Email)
	var i Invitation
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.ExpiresAt,
		&i.InviterID,
		&i.OrganizationID,
		&i.Role,
		&i.Status,
	)
	return i, err
}

const listInvitations = `-- name: ListInvitations :many
SELECT
  id, created_at, updated_at, email, expires_at, inviter_id, organization_id, role, status
FROM
  invitation
ORDER BY
  created_at DESC
LIMIT
  $1
OFFSET
  $2
`

type ListInvitationsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListInvitations(ctx context.Context, arg ListInvitationsParams) ([]Invitation, error) {
	rows, err := q.db.Query(ctx, listInvitations, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invitation
	for rows.Next() {
		var i Invitation
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.ExpiresAt,
			&i.InviterID,
			&i.OrganizationID,
			&i.Role,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listInvitationsByInviter = `-- name: ListInvitationsByInviter :many
SELECT
  id, created_at, updated_at, email, expires_at, inviter_id, organization_id, role, status
FROM
  invitation
WHERE
  inviter_id = $1
ORDER BY
  created_at DESC
LIMIT
  $2
OFFSET
  $3
`

type ListInvitationsByInviterParams struct {
	InviterID uuid.UUID
	Limit     int32
	Offset    int32
}

func (q *Queries) ListInvitationsByInviter(ctx context.Context, arg ListInvitationsByInviterParams) ([]Invitation, error) {
	rows, err := q.db.Query(ctx, listInvitationsByInviter, arg.InviterID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invitation
	for rows.Next() {
		var i Invitation
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.ExpiresAt,
			&i.InviterID,
			&i.OrganizationID,
			&i.Role,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listInvitationsByOrganization = `-- name: ListInvitationsByOrganization :many
SELECT
  id, created_at, updated_at, email, expires_at, inviter_id, organization_id, role, status
FROM
  invitation
WHERE
  organization_id = $1
ORDER BY
  created_at DESC
LIMIT
  $2
OFFSET
  $3
`

type ListInvitationsByOrganizationParams struct {
	OrganizationID uuid.UUID
	Limit          int32
	Offset         int32
}

func (q *Queries) ListInvitationsByOrganization(ctx context.Context, arg ListInvitationsByOrganizationParams) ([]Invitation, error) {
	rows, err := q.db.Query(ctx, listInvitationsByOrganization, arg.OrganizationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invitation
	for rows.Next() {
		var i Invitation
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.ExpiresAt,
			&i.InviterID,
			&i.OrganizationID,
			&i.Role,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInvitation = `-- name: UpdateInvitation :one
UPDATE invitation
SET
  email = COALESCE($2, email),
  role = COALESCE($3, role),
  expires_at = COALESCE($4, expires_at),
  status = COALESCE($5, status),
  updated_at = NOW()
WHERE
  id = $1
RETURNING
  id, created_at, updated_at, email, expires_at, inviter_id, organization_id, role, status
`

type UpdateInvitationParams struct {
	ID        uuid.UUID
	Email     *string
	Role      *string
	ExpiresAt *time.Time
	Status    *string
}

func (q *Queries) UpdateInvitation(ctx context.Context, arg UpdateInvitationParams) (Invitation, error) {
	row := q.db.QueryRow(ctx, updateInvitation,
		arg.ID,
		arg.Email,
		arg.Role,
		arg.ExpiresAt,
		arg.Status,
	)
	var i Invitation
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.ExpiresAt,
		&i.InviterID,
		&i.OrganizationID,
		&i.Role,
		&i.Status,
	)
	return i, err
}
