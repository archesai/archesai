// Code generated by codegen repository. DO NOT EDIT.
package repositories

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/errors"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgxpool"
)

// PostgresAPIKeyRepository implements APIKeyRepository using PostgreSQL.
type PostgresAPIKeyRepository struct {
	queries *Queries
}

// NewPostgresAPIKeyRepository creates a new PostgreSQL repository.
func NewPostgresAPIKeyRepository(db *pgxpool.Pool) *PostgresAPIKeyRepository {
	return &PostgresAPIKeyRepository{
		queries: New(db),
	}
}

// APIKey operations

// Create creates a new apikey
func (r *PostgresAPIKeyRepository) Create(ctx context.Context, entity *entities.APIKey) (*entities.APIKey, error) {
	params := CreateAPIKeyParams{
		ID: entity.ID,
	}

	result, err := r.queries.CreateAPIKey(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to create apikey: %w", err)
	}

	return mapAPIKeyFromDB(&result), nil
}

// Get retrieves a apikey by ID
func (r *PostgresAPIKeyRepository) Get(ctx context.Context, id uuid.UUID) (*entities.APIKey, error) {
	result, err := r.queries.GetAPIKey(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, errors.ErrAPIKeyNotFound
		}
		return nil, fmt.Errorf("failed to get apikey: %w", err)
	}

	return mapAPIKeyFromDB(&result), nil
}

// Update updates an existing apikey
func (r *PostgresAPIKeyRepository) Update(ctx context.Context, id uuid.UUID, entity *entities.APIKey) (*entities.APIKey, error) {
	params := UpdateAPIKeyParams{
		ID: id,
	}

	result, err := r.queries.UpdateAPIKey(ctx, params)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, errors.ErrAPIKeyNotFound
		}
		return nil, fmt.Errorf("failed to update apikey: %w", err)
	}

	return mapAPIKeyFromDB(&result), nil
}

// Delete removes a apikey
func (r *PostgresAPIKeyRepository) Delete(ctx context.Context, id uuid.UUID) error {
	err := r.queries.DeleteAPIKey(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return errors.ErrAPIKeyNotFound
		}
		return fmt.Errorf("failed to delete apikey: %w", err)
	}
	return nil
}

// List returns a paginated list of apikeys
func (r *PostgresAPIKeyRepository) List(ctx context.Context, limit, offset int32) ([]*entities.APIKey, int64, error) {
	listParams := ListAPIKeysParams{
		Limit:  limit,
		Offset: offset,
	}

	results, err := r.queries.ListAPIKeys(ctx, listParams)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list apikeys: %w", err)
	}

	items := make([]*entities.APIKey, len(results))
	for i, result := range results {
		items[i] = mapAPIKeyFromDB(&result)
	}

	// For now, return the count as the length of results
	// In production, you'd want a separate count query
	count := int64(len(results))

	return items, count, nil
}

func mapAPIKeyFromDB(db *APIKey) *entities.APIKey {
	if db == nil {
		return nil
	}

	result := &entities.APIKey{
		ID:        db.ID,
		CreatedAt: db.CreatedAt,
		UpdatedAt: db.UpdatedAt,
	}

	return result
}
