// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: accounts.sql

package repositories

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO
  account (
    id,
    user_id,
    provider_id,
    account_id,
    access_token,
    refresh_token,
    access_token_expires_at,
    refresh_token_expires_at,
    scope,
    id_token,
    password
  )
VALUES
  (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11
  )
RETURNING
  id, created_at, updated_at, access_token, access_token_expires_at, account_id, id_token, password, provider_id, refresh_token, refresh_token_expires_at, scope, user_id
`

type CreateAccountParams struct {
	ID                    uuid.UUID
	UserID                uuid.UUID
	ProviderID            string
	AccountID             string
	AccessToken           *string
	RefreshToken          *string
	AccessTokenExpiresAt  *time.Time
	RefreshTokenExpiresAt *time.Time
	Scope                 *string
	IDToken               *string
	Password              *string
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, createAccount,
		arg.ID,
		arg.UserID,
		arg.ProviderID,
		arg.AccountID,
		arg.AccessToken,
		arg.RefreshToken,
		arg.AccessTokenExpiresAt,
		arg.RefreshTokenExpiresAt,
		arg.Scope,
		arg.IDToken,
		arg.Password,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AccessToken,
		&i.AccessTokenExpiresAt,
		&i.AccountID,
		&i.IDToken,
		&i.Password,
		&i.ProviderID,
		&i.RefreshToken,
		&i.RefreshTokenExpiresAt,
		&i.Scope,
		&i.UserID,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM account
WHERE
  id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAccount, id)
	return err
}

const deleteAccountsByUser = `-- name: DeleteAccountsByUser :exec
DELETE FROM account
WHERE
  user_id = $1
`

func (q *Queries) DeleteAccountsByUser(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAccountsByUser, userID)
	return err
}

const getAccount = `-- name: GetAccount :one
SELECT
  id, created_at, updated_at, access_token, access_token_expires_at, account_id, id_token, password, provider_id, refresh_token, refresh_token_expires_at, scope, user_id
FROM
  account
WHERE
  id = $1
LIMIT
  1
`

func (q *Queries) GetAccount(ctx context.Context, id uuid.UUID) (Account, error) {
	row := q.db.QueryRow(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AccessToken,
		&i.AccessTokenExpiresAt,
		&i.AccountID,
		&i.IDToken,
		&i.Password,
		&i.ProviderID,
		&i.RefreshToken,
		&i.RefreshTokenExpiresAt,
		&i.Scope,
		&i.UserID,
	)
	return i, err
}

const getAccountByProviderID = `-- name: GetAccountByProviderID :one
SELECT
  id, created_at, updated_at, access_token, access_token_expires_at, account_id, id_token, password, provider_id, refresh_token, refresh_token_expires_at, scope, user_id
FROM
  account
WHERE
  provider_id = $1
  AND account_id = $2
LIMIT
  1
`

type GetAccountByProviderIDParams struct {
	ProviderID string
	AccountID  string
}

func (q *Queries) GetAccountByProviderID(ctx context.Context, arg GetAccountByProviderIDParams) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByProviderID, arg.ProviderID, arg.AccountID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AccessToken,
		&i.AccessTokenExpiresAt,
		&i.AccountID,
		&i.IDToken,
		&i.Password,
		&i.ProviderID,
		&i.RefreshToken,
		&i.RefreshTokenExpiresAt,
		&i.Scope,
		&i.UserID,
	)
	return i, err
}

const getAccountByUser = `-- name: GetAccountByUser :one
SELECT
  id, created_at, updated_at, access_token, access_token_expires_at, account_id, id_token, password, provider_id, refresh_token, refresh_token_expires_at, scope, user_id
FROM
  account
WHERE
  user_id = $1
  AND provider_id = $2
LIMIT
  1
`

type GetAccountByUserParams struct {
	UserID     uuid.UUID
	ProviderID string
}

func (q *Queries) GetAccountByUser(ctx context.Context, arg GetAccountByUserParams) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByUser, arg.UserID, arg.ProviderID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AccessToken,
		&i.AccessTokenExpiresAt,
		&i.AccountID,
		&i.IDToken,
		&i.Password,
		&i.ProviderID,
		&i.RefreshToken,
		&i.RefreshTokenExpiresAt,
		&i.Scope,
		&i.UserID,
	)
	return i, err
}

const listAccounts = `-- name: ListAccounts :many
SELECT
  id, created_at, updated_at, access_token, access_token_expires_at, account_id, id_token, password, provider_id, refresh_token, refresh_token_expires_at, scope, user_id
FROM
  account
ORDER BY
  created_at DESC
LIMIT
  $1
OFFSET
  $2
`

type ListAccountsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListAccounts(ctx context.Context, arg ListAccountsParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, listAccounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AccessToken,
			&i.AccessTokenExpiresAt,
			&i.AccountID,
			&i.IDToken,
			&i.Password,
			&i.ProviderID,
			&i.RefreshToken,
			&i.RefreshTokenExpiresAt,
			&i.Scope,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAccountsByUser = `-- name: ListAccountsByUser :many
SELECT
  id, created_at, updated_at, access_token, access_token_expires_at, account_id, id_token, password, provider_id, refresh_token, refresh_token_expires_at, scope, user_id
FROM
  account
WHERE
  user_id = $1
ORDER BY
  created_at DESC
`

func (q *Queries) ListAccountsByUser(ctx context.Context, userID uuid.UUID) ([]Account, error) {
	rows, err := q.db.Query(ctx, listAccountsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AccessToken,
			&i.AccessTokenExpiresAt,
			&i.AccountID,
			&i.IDToken,
			&i.Password,
			&i.ProviderID,
			&i.RefreshToken,
			&i.RefreshTokenExpiresAt,
			&i.Scope,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE account
SET
  access_token = COALESCE($2, access_token),
  refresh_token = COALESCE($3, refresh_token),
  access_token_expires_at = COALESCE(
    $4,
    access_token_expires_at
  ),
  refresh_token_expires_at = COALESCE(
    $5,
    refresh_token_expires_at
  ),
  scope = COALESCE($6, scope),
  id_token = COALESCE($7, id_token),
  password = COALESCE($8, password),
  updated_at = NOW()
WHERE
  id = $1
RETURNING
  id, created_at, updated_at, access_token, access_token_expires_at, account_id, id_token, password, provider_id, refresh_token, refresh_token_expires_at, scope, user_id
`

type UpdateAccountParams struct {
	ID                    uuid.UUID
	AccessToken           *string
	RefreshToken          *string
	AccessTokenExpiresAt  *time.Time
	RefreshTokenExpiresAt *time.Time
	Scope                 *string
	IDToken               *string
	Password              *string
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, updateAccount,
		arg.ID,
		arg.AccessToken,
		arg.RefreshToken,
		arg.AccessTokenExpiresAt,
		arg.RefreshTokenExpiresAt,
		arg.Scope,
		arg.IDToken,
		arg.Password,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AccessToken,
		&i.AccessTokenExpiresAt,
		&i.AccountID,
		&i.IDToken,
		&i.Password,
		&i.ProviderID,
		&i.RefreshToken,
		&i.RefreshTokenExpiresAt,
		&i.Scope,
		&i.UserID,
	)
	return i, err
}
