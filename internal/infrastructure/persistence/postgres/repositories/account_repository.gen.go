// Code generated by codegen repository. DO NOT EDIT.
package repositories

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/archesai/archesai/internal/core/entities"
	corerrors "github.com/archesai/archesai/internal/core/errors"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
)

// PostgresAccountRepository implements AccountRepository using PostgreSQL.
type PostgresAccountRepository struct {
	queries *Queries
}

// NewPostgresAccountRepository creates a new PostgreSQL repository.
func NewPostgresAccountRepository(db *pgxpool.Pool) *PostgresAccountRepository {
	return &PostgresAccountRepository{
		queries: New(db),
	}
}

// Account operations

// Create creates a new account
func (r *PostgresAccountRepository) Create(ctx context.Context, entity *entities.Account) (*entities.Account, error) {
	// Map entity fields to CreateAccountParams based on SQL INSERT statement
	// See: internal/infrastructure/persistence/postgres/queries/account.sql
	params := CreateAccountParams{
		ID:                    entity.ID,
		AccessToken:           entity.AccessToken,
		AccessTokenExpiresAt:  entity.AccessTokenExpiresAt,
		AccountIdentifier:     entity.AccountIdentifier,
		IDToken:               entity.IdToken,
		Provider:              string(entity.Provider),
		RefreshToken:          entity.RefreshToken,
		RefreshTokenExpiresAt: entity.RefreshTokenExpiresAt,
		Scope:                 entity.Scope,
		UserID:                entity.UserID,
	}

	result, err := r.queries.CreateAccount(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to create account: %w", err)
	}

	return mapAccountFromDB(&result), nil
}

// Get retrieves a account by ID
func (r *PostgresAccountRepository) Get(ctx context.Context, id uuid.UUID) (*entities.Account, error) {
	result, err := r.queries.GetAccount(ctx, id)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.ErrAccountNotFound
		}
		return nil, fmt.Errorf("failed to get account: %w", err)
	}

	return mapAccountFromDB(&result), nil
}

// Update updates an existing account
func (r *PostgresAccountRepository) Update(ctx context.Context, id uuid.UUID, entity *entities.Account) (*entities.Account, error) {
	// Map entity fields to UpdateAccountParams based on SQL UPDATE statement
	// See: internal/infrastructure/persistence/postgres/queries/account.sql
	params := UpdateAccountParams{
		ID:                    id,
		AccessToken:           entity.AccessToken,
		AccessTokenExpiresAt:  entity.AccessTokenExpiresAt,
		IDToken:               entity.IdToken,
		RefreshToken:          entity.RefreshToken,
		RefreshTokenExpiresAt: entity.RefreshTokenExpiresAt,
		Scope:                 entity.Scope,
	}

	result, err := r.queries.UpdateAccount(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.ErrAccountNotFound
		}
		return nil, fmt.Errorf("failed to update account: %w", err)
	}

	return mapAccountFromDB(&result), nil
}

// Delete removes a account
func (r *PostgresAccountRepository) Delete(ctx context.Context, id uuid.UUID) error {
	err := r.queries.DeleteAccount(ctx, id)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return corerrors.ErrAccountNotFound
		}
		return fmt.Errorf("failed to delete account: %w", err)
	}
	return nil
}

// List returns a paginated list of accounts
func (r *PostgresAccountRepository) List(ctx context.Context, limit, offset int32) ([]*entities.Account, int64, error) {
	listParams := ListAccountsParams{
		Limit:  limit,
		Offset: offset,
	}

	results, err := r.queries.ListAccounts(ctx, listParams)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list accounts: %w", err)
	}

	items := make([]*entities.Account, len(results))
	for i, result := range results {
		items[i] = mapAccountFromDB(&result)
	}

	// For now, return the count as the length of results
	// In production, you'd want a separate count query
	count := int64(len(results))

	return items, count, nil
}

// Additional methods

// GetAccountByProvider retrieves a single account by provider and accountIdentifier
func (r *PostgresAccountRepository) GetAccountByProvider(ctx context.Context, provider string, accountIdentifier string) (*entities.Account, error) {
	params := GetAccountByProviderParams{
		Provider:          provider,
		AccountIdentifier: accountIdentifier,
	}

	result, err := r.queries.GetAccountByProvider(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.ErrAccountNotFound
		}
		return nil, fmt.Errorf("failed to GetAccountByProvider: %w", err)
	}

	return mapAccountFromDB(&result), nil
}

// ListAccountsByUserID retrieves multiple accounts by userID
func (r *PostgresAccountRepository) ListAccountsByUserID(ctx context.Context, userID string) ([]*entities.Account, error) {
	// TODO: Implement ListAccountsByUserID - fetch multiple accounts
	return nil, fmt.Errorf("ListAccountsByUserID not yet implemented")
}

func mapAccountFromDB(db *Account) *entities.Account {
	if db == nil {
		return nil
	}

	result := &entities.Account{
		ID:                    db.ID,
		CreatedAt:             db.CreatedAt,
		UpdatedAt:             db.UpdatedAt,
		AccessToken:           db.AccessToken,
		AccessTokenExpiresAt:  db.AccessTokenExpiresAt,
		AccountIdentifier:     db.AccountIdentifier,
		IdToken:               db.IDToken,
		Provider:              entities.AccountProvider(db.Provider),
		RefreshToken:          db.RefreshToken,
		RefreshTokenExpiresAt: db.RefreshTokenExpiresAt,
		Scope:                 db.Scope,
		UserID:                db.UserID,
	}

	return result
}
