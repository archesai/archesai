// Code generated by codegen repository. DO NOT EDIT.
package repositories

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/errors"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgxpool"
)

// PostgresAccountRepository implements AccountRepository using PostgreSQL.
type PostgresAccountRepository struct {
	queries *Queries
}

// NewPostgresAccountRepository creates a new PostgreSQL repository.
func NewPostgresAccountRepository(db *pgxpool.Pool) *PostgresAccountRepository {
	return &PostgresAccountRepository{
		queries: New(db),
	}
}

// Account operations

// Create creates a new account
func (r *PostgresAccountRepository) Create(ctx context.Context, entity *entities.Account) (*entities.Account, error) {
	params := CreateAccountParams{
		ID: entity.ID,
	}

	result, err := r.queries.CreateAccount(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to create account: %w", err)
	}

	return mapAccountFromDB(&result), nil
}

// Get retrieves a account by ID
func (r *PostgresAccountRepository) Get(ctx context.Context, id uuid.UUID) (*entities.Account, error) {
	result, err := r.queries.GetAccount(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, errors.ErrAccountNotFound
		}
		return nil, fmt.Errorf("failed to get account: %w", err)
	}

	return mapAccountFromDB(&result), nil
}

// Update updates an existing account
func (r *PostgresAccountRepository) Update(ctx context.Context, id uuid.UUID, entity *entities.Account) (*entities.Account, error) {
	params := UpdateAccountParams{
		ID: id,
	}

	result, err := r.queries.UpdateAccount(ctx, params)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, errors.ErrAccountNotFound
		}
		return nil, fmt.Errorf("failed to update account: %w", err)
	}

	return mapAccountFromDB(&result), nil
}

// Delete removes a account
func (r *PostgresAccountRepository) Delete(ctx context.Context, id uuid.UUID) error {
	err := r.queries.DeleteAccount(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return errors.ErrAccountNotFound
		}
		return fmt.Errorf("failed to delete account: %w", err)
	}
	return nil
}

// List returns a paginated list of accounts
func (r *PostgresAccountRepository) List(ctx context.Context, limit, offset int32) ([]*entities.Account, int64, error) {
	listParams := ListAccountsParams{
		Limit:  limit,
		Offset: offset,
	}

	results, err := r.queries.ListAccounts(ctx, listParams)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list accounts: %w", err)
	}

	items := make([]*entities.Account, len(results))
	for i, result := range results {
		items[i] = mapAccountFromDB(&result)
	}

	// For now, return the count as the length of results
	// In production, you'd want a separate count query
	count := int64(len(results))

	return items, count, nil
}

// Additional methods

// GetByProviderID retrieves a single account by provider and providerAccountID
func (r *PostgresAccountRepository) GetByProviderID(ctx context.Context, provider string, providerAccountID string) (*entities.Account, error) {

	// TODO: Implement GetByProviderID - fetch single account
	return nil, fmt.Errorf("GetByProviderID not yet implemented")

}

// ListByUserID retrieves multiple accounts by userID
func (r *PostgresAccountRepository) ListByUserID(ctx context.Context, userID string) ([]*entities.Account, error) {

	// TODO: Implement ListByUserID - fetch multiple accounts
	return nil, fmt.Errorf("ListByUserID not yet implemented")

}

func mapAccountFromDB(db *Account) *entities.Account {
	if db == nil {
		return nil
	}

	result := &entities.Account{
		ID:        db.ID,
		CreatedAt: db.CreatedAt,
		UpdatedAt: db.UpdatedAt,
	}

	return result
}
