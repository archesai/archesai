// Code generated by codegen repository. DO NOT EDIT.
package repositories

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/errors"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgxpool"
)

// PostgresUserRepository implements UserRepository using PostgreSQL.
type PostgresUserRepository struct {
	queries *Queries
}

// NewPostgresUserRepository creates a new PostgreSQL repository.
func NewPostgresUserRepository(db *pgxpool.Pool) *PostgresUserRepository {
	return &PostgresUserRepository{
		queries: New(db),
	}
}

// User operations

// Create creates a new user
func (r *PostgresUserRepository) Create(ctx context.Context, entity *entities.User) (*entities.User, error) {
	params := CreateUserParams{
		ID: entity.ID,
	}

	result, err := r.queries.CreateUser(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to create user: %w", err)
	}

	return mapUserFromDB(&result), nil
}

// Get retrieves a user by ID
func (r *PostgresUserRepository) Get(ctx context.Context, id uuid.UUID) (*entities.User, error) {
	result, err := r.queries.GetUser(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, errors.ErrUserNotFound
		}
		return nil, fmt.Errorf("failed to get user: %w", err)
	}

	return mapUserFromDB(&result), nil
}

// Update updates an existing user
func (r *PostgresUserRepository) Update(ctx context.Context, id uuid.UUID, entity *entities.User) (*entities.User, error) {
	params := UpdateUserParams{
		ID: id,
	}

	result, err := r.queries.UpdateUser(ctx, params)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, errors.ErrUserNotFound
		}
		return nil, fmt.Errorf("failed to update user: %w", err)
	}

	return mapUserFromDB(&result), nil
}

// Delete removes a user
func (r *PostgresUserRepository) Delete(ctx context.Context, id uuid.UUID) error {
	err := r.queries.DeleteUser(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return errors.ErrUserNotFound
		}
		return fmt.Errorf("failed to delete user: %w", err)
	}
	return nil
}

// List returns a paginated list of users
func (r *PostgresUserRepository) List(ctx context.Context, limit, offset int32) ([]*entities.User, int64, error) {
	listParams := ListUsersParams{
		Limit:  limit,
		Offset: offset,
	}

	results, err := r.queries.ListUsers(ctx, listParams)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list users: %w", err)
	}

	items := make([]*entities.User, len(results))
	for i, result := range results {
		items[i] = mapUserFromDB(&result)
	}

	// For now, return the count as the length of results
	// In production, you'd want a separate count query
	count := int64(len(results))

	return items, count, nil
}

// Additional methods

// GetUserByEmail retrieves a single user by email
func (r *PostgresUserRepository) GetUserByEmail(ctx context.Context, email string) (*entities.User, error) {
	result, err := r.queries.GetUserByEmail(ctx, email)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, errors.ErrUserNotFound
		}
		return nil, fmt.Errorf("failed to GetUserByEmail: %w", err)
	}

	return mapUserFromDB(&result), nil
}

// GetUserBySessionID retrieves a single user by sessionID
func (r *PostgresUserRepository) GetUserBySessionID(ctx context.Context, sessionID string) (*entities.User, error) {
	result, err := r.queries.GetUserBySessionID(ctx, uuid.MustParse(sessionID))
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, errors.ErrUserNotFound
		}
		return nil, fmt.Errorf("failed to GetUserBySessionID: %w", err)
	}

	return mapUserFromDB(&result), nil
}

func mapUserFromDB(db *User) *entities.User {
	if db == nil {
		return nil
	}

	result := &entities.User{
		ID:        db.ID,
		CreatedAt: db.CreatedAt,
		UpdatedAt: db.UpdatedAt,
	}

	return result
}
