// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: api-keys.sql

package repositories

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAPIKey = `-- name: CreateAPIKey :one
INSERT INTO
  api_keys (
    id,
    user_id,
    organization_id,
    name,
    key_hash,
    prefix,
    scopes,
    rate_limit,
    expires_at
  )
VALUES
  ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING
  id, created_at, updated_at, expires_at, key_hash, last_used_at, name, organization_id, prefix, rate_limit, scopes, user_id
`

type CreateAPIKeyParams struct {
	ID             uuid.UUID
	UserID         uuid.UUID
	OrganizationID uuid.UUID
	Name           *string
	KeyHash        string
	Prefix         *string
	Scopes         []string
	RateLimit      int32
	ExpiresAt      *time.Time
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) (APIKey, error) {
	row := q.db.QueryRow(ctx, createAPIKey,
		arg.ID,
		arg.UserID,
		arg.OrganizationID,
		arg.Name,
		arg.KeyHash,
		arg.Prefix,
		arg.Scopes,
		arg.RateLimit,
		arg.ExpiresAt,
	)
	var i APIKey
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.KeyHash,
		&i.LastUsedAt,
		&i.Name,
		&i.OrganizationID,
		&i.Prefix,
		&i.RateLimit,
		&i.Scopes,
		&i.UserID,
	)
	return i, err
}

const deleteAPIKey = `-- name: DeleteAPIKey :exec
DELETE FROM api_keys
WHERE
  id = $1
`

type DeleteAPIKeyParams struct {
	ID uuid.UUID
}

func (q *Queries) DeleteAPIKey(ctx context.Context, arg DeleteAPIKeyParams) error {
	_, err := q.db.Exec(ctx, deleteAPIKey, arg.ID)
	return err
}

const deleteAPIKeysByUser = `-- name: DeleteAPIKeysByUser :exec
DELETE FROM api_keys
WHERE
  user_id = $1
`

type DeleteAPIKeysByUserParams struct {
	UserID uuid.UUID
}

func (q *Queries) DeleteAPIKeysByUser(ctx context.Context, arg DeleteAPIKeysByUserParams) error {
	_, err := q.db.Exec(ctx, deleteAPIKeysByUser, arg.UserID)
	return err
}

const deleteExpiredAPIKeys = `-- name: DeleteExpiredAPIKeys :exec
DELETE FROM api_keys
WHERE
  expires_at IS NOT NULL
  AND expires_at < CURRENT_TIMESTAMP
`

func (q *Queries) DeleteExpiredAPIKeys(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredAPIKeys)
	return err
}

const getAPIKey = `-- name: GetAPIKey :one
SELECT
  id, created_at, updated_at, expires_at, key_hash, last_used_at, name, organization_id, prefix, rate_limit, scopes, user_id
FROM
  api_keys
WHERE
  id = $1
LIMIT
  1
`

type GetAPIKeyParams struct {
	ID uuid.UUID
}

func (q *Queries) GetAPIKey(ctx context.Context, arg GetAPIKeyParams) (APIKey, error) {
	row := q.db.QueryRow(ctx, getAPIKey, arg.ID)
	var i APIKey
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.KeyHash,
		&i.LastUsedAt,
		&i.Name,
		&i.OrganizationID,
		&i.Prefix,
		&i.RateLimit,
		&i.Scopes,
		&i.UserID,
	)
	return i, err
}

const getAPIKeyByKeyHash = `-- name: GetAPIKeyByKeyHash :one
SELECT
  id, created_at, updated_at, expires_at, key_hash, last_used_at, name, organization_id, prefix, rate_limit, scopes, user_id
FROM
  api_keys
WHERE
  key_hash = $1
LIMIT
  1
`

type GetAPIKeyByKeyHashParams struct {
	KeyHash string
}

func (q *Queries) GetAPIKeyByKeyHash(ctx context.Context, arg GetAPIKeyByKeyHashParams) (APIKey, error) {
	row := q.db.QueryRow(ctx, getAPIKeyByKeyHash, arg.KeyHash)
	var i APIKey
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.KeyHash,
		&i.LastUsedAt,
		&i.Name,
		&i.OrganizationID,
		&i.Prefix,
		&i.RateLimit,
		&i.Scopes,
		&i.UserID,
	)
	return i, err
}

const listAPIKeys = `-- name: ListAPIKeys :many
SELECT
  id, created_at, updated_at, expires_at, key_hash, last_used_at, name, organization_id, prefix, rate_limit, scopes, user_id
FROM
  api_keys
ORDER BY
  created_at DESC
LIMIT
  $1
OFFSET
  $2
`

type ListAPIKeysParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListAPIKeys(ctx context.Context, arg ListAPIKeysParams) ([]APIKey, error) {
	rows, err := q.db.Query(ctx, listAPIKeys, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []APIKey
	for rows.Next() {
		var i APIKey
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiresAt,
			&i.KeyHash,
			&i.LastUsedAt,
			&i.Name,
			&i.OrganizationID,
			&i.Prefix,
			&i.RateLimit,
			&i.Scopes,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAPIKeysByOrganization = `-- name: ListAPIKeysByOrganization :many
SELECT
  id, created_at, updated_at, expires_at, key_hash, last_used_at, name, organization_id, prefix, rate_limit, scopes, user_id
FROM
  api_keys
WHERE
  organization_id = $1
ORDER BY
  created_at DESC
LIMIT
  $2
OFFSET
  $3
`

type ListAPIKeysByOrganizationParams struct {
	OrganizationID uuid.UUID
	Limit          int32
	Offset         int32
}

func (q *Queries) ListAPIKeysByOrganization(ctx context.Context, arg ListAPIKeysByOrganizationParams) ([]APIKey, error) {
	rows, err := q.db.Query(ctx, listAPIKeysByOrganization, arg.OrganizationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []APIKey
	for rows.Next() {
		var i APIKey
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiresAt,
			&i.KeyHash,
			&i.LastUsedAt,
			&i.Name,
			&i.OrganizationID,
			&i.Prefix,
			&i.RateLimit,
			&i.Scopes,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAPIKeysByUser = `-- name: ListAPIKeysByUser :many
SELECT
  id, created_at, updated_at, expires_at, key_hash, last_used_at, name, organization_id, prefix, rate_limit, scopes, user_id
FROM
  api_keys
WHERE
  user_id = $1
ORDER BY
  created_at DESC
LIMIT
  $2
OFFSET
  $3
`

type ListAPIKeysByUserParams struct {
	UserID uuid.UUID
	Limit  int32
	Offset int32
}

func (q *Queries) ListAPIKeysByUser(ctx context.Context, arg ListAPIKeysByUserParams) ([]APIKey, error) {
	rows, err := q.db.Query(ctx, listAPIKeysByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []APIKey
	for rows.Next() {
		var i APIKey
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiresAt,
			&i.KeyHash,
			&i.LastUsedAt,
			&i.Name,
			&i.OrganizationID,
			&i.Prefix,
			&i.RateLimit,
			&i.Scopes,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAPIKey = `-- name: UpdateAPIKey :one
UPDATE api_keys
SET
  name = COALESCE($1, name),
  scopes = COALESCE($2, scopes),
  rate_limit = COALESCE($3, rate_limit),
  expires_at = COALESCE($4, expires_at),
  updated_at = CURRENT_TIMESTAMP
WHERE
  id = $5
RETURNING
  id, created_at, updated_at, expires_at, key_hash, last_used_at, name, organization_id, prefix, rate_limit, scopes, user_id
`

type UpdateAPIKeyParams struct {
	Name      *string
	Scopes    []string
	RateLimit *int32
	ExpiresAt *time.Time
	ID        uuid.UUID
}

func (q *Queries) UpdateAPIKey(ctx context.Context, arg UpdateAPIKeyParams) (APIKey, error) {
	row := q.db.QueryRow(ctx, updateAPIKey,
		arg.Name,
		arg.Scopes,
		arg.RateLimit,
		arg.ExpiresAt,
		arg.ID,
	)
	var i APIKey
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.KeyHash,
		&i.LastUsedAt,
		&i.Name,
		&i.OrganizationID,
		&i.Prefix,
		&i.RateLimit,
		&i.Scopes,
		&i.UserID,
	)
	return i, err
}

const updateAPIKeyLastUsed = `-- name: UpdateAPIKeyLastUsed :exec
UPDATE api_keys
SET
  last_used_at = CURRENT_TIMESTAMP
WHERE
  id = $1
`

type UpdateAPIKeyLastUsedParams struct {
	ID uuid.UUID
}

func (q *Queries) UpdateAPIKeyLastUsed(ctx context.Context, arg UpdateAPIKeyLastUsedParams) error {
	_, err := q.db.Exec(ctx, updateAPIKeyLastUsed, arg.ID)
	return err
}
