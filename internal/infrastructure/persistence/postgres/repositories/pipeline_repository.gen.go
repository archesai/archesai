// Code generated by archesai. DO NOT EDIT.

package repositories

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/archesai/archesai/internal/core/entities"
	corerrors "github.com/archesai/archesai/internal/core/errors"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
)

// PostgresPipelineRepository implements PipelineRepository using PostgreSQL.
type PostgresPipelineRepository struct {
	queries *Queries
}

// NewPostgresPipelineRepository creates a new PostgreSQL repository.
func NewPostgresPipelineRepository(db *pgxpool.Pool) *PostgresPipelineRepository {
	return &PostgresPipelineRepository{
		queries: New(db),
	}
}

// Pipeline operations

// Create creates a new pipeline
func (r *PostgresPipelineRepository) Create(ctx context.Context, entity *entities.Pipeline) (*entities.Pipeline, error) {
	params := CreatePipelineParams{
		ID:             entity.ID,
		Description:    entity.Description,
		Name:           entity.Name,
		OrganizationID: entity.OrganizationID,
	}

	result, err := r.queries.CreatePipeline(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to create pipeline: %w", err)
	}

	return mapPipelineFromDB(&result), nil
}

// Get retrieves a pipeline by ID
func (r *PostgresPipelineRepository) Get(ctx context.Context, id uuid.UUID) (*entities.Pipeline, error) {
	params := GetPipelineParams{
		ID: id,
	}

	result, err := r.queries.GetPipeline(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.ErrPipelineNotFound
		}
		return nil, fmt.Errorf("failed to get pipeline: %w", err)
	}

	return mapPipelineFromDB(&result), nil
}

// Update updates an existing pipeline
func (r *PostgresPipelineRepository) Update(ctx context.Context, id uuid.UUID, entity *entities.Pipeline) (*entities.Pipeline, error) {

	params := UpdatePipelineParams{
		ID:          id,
		Description: entity.Description,
		Name:        entity.Name,
	}

	result, err := r.queries.UpdatePipeline(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.ErrPipelineNotFound
		}
		return nil, fmt.Errorf("failed to update pipeline: %w", err)
	}

	return mapPipelineFromDB(&result), nil
}

// Delete removes a pipeline
func (r *PostgresPipelineRepository) Delete(ctx context.Context, id uuid.UUID) error {
	params := DeletePipelineParams{
		ID: id,
	}

	err := r.queries.DeletePipeline(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return corerrors.ErrPipelineNotFound
		}
		return fmt.Errorf("failed to delete pipeline: %w", err)
	}
	return nil
}

// List returns a paginated list of pipelines
func (r *PostgresPipelineRepository) List(ctx context.Context, limit, offset int32) ([]*entities.Pipeline, int64, error) {
	listParams := ListPipelinesParams{
		Limit:  limit,
		Offset: offset,
	}

	results, err := r.queries.ListPipelines(ctx, listParams)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list pipelines: %w", err)
	}

	items := make([]*entities.Pipeline, len(results))
	for i, result := range results {
		items[i] = mapPipelineFromDB(&result)
	}

	// For now, return the count as the length of results
	// In production, you'd want a separate count query
	count := int64(len(results))

	return items, count, nil
}

// ListPipelinesByOrganization retrieves multiple Pipelines by organizationID
func (r *PostgresPipelineRepository) ListPipelinesByOrganization(ctx context.Context, organizationID string) ([]*entities.Pipeline, error) {
	params := ListPipelinesByOrganizationParams{
		OrganizationID: uuid.MustParse(organizationID),
	}

	result, err := r.queries.ListPipelinesByOrganization(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.ErrPipelineNotFound
		}
		return nil, fmt.Errorf("failed to ListPipelinesByOrganization: %w", err)
	}
	items := make([]*entities.Pipeline, len(result))
	for i, res := range result {
		items[i] = mapPipelineFromDB(&res)
	}
	return items, nil

}

func mapPipelineFromDB(db *Pipeline) *entities.Pipeline {
	if db == nil {
		return nil
	}

	result := &entities.Pipeline{
		ID:             db.ID,
		CreatedAt:      db.CreatedAt,
		UpdatedAt:      db.UpdatedAt,
		Description:    db.Description,
		Name:           db.Name,
		OrganizationID: db.OrganizationID,
	}

	return result
}
