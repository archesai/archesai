// Code generated by codegen repository. DO NOT EDIT.
package repositories

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/archesai/archesai/internal/core/entities"
	corerrors "github.com/archesai/archesai/internal/core/errors"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
)

// PostgresPipelineStepRepository implements PipelineStepRepository using PostgreSQL.
type PostgresPipelineStepRepository struct {
	queries *Queries
}

// NewPostgresPipelineStepRepository creates a new PostgreSQL repository.
func NewPostgresPipelineStepRepository(db *pgxpool.Pool) *PostgresPipelineStepRepository {
	return &PostgresPipelineStepRepository{
		queries: New(db),
	}
}

// PipelineStep operations

// Create creates a new pipelinestep
func (r *PostgresPipelineStepRepository) Create(ctx context.Context, entity *entities.PipelineStep) (*entities.PipelineStep, error) {
	// TODO: Review and adjust field mappings based on SQL schema
	// SQL params may have different pointer/type requirements than entity fields
	params := CreatePipelineStepParams{
		ID: entity.ID,
		// Add required fields here based on CreatePipelineStepParams struct
	}

	result, err := r.queries.CreatePipelineStep(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to create pipelinestep: %w", err)
	}

	return mapPipelineStepFromDB(&result), nil
}

// Get retrieves a pipelinestep by ID
func (r *PostgresPipelineStepRepository) Get(ctx context.Context, id uuid.UUID) (*entities.PipelineStep, error) {
	result, err := r.queries.GetPipelineStep(ctx, id)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.ErrPipelineStepNotFound
		}
		return nil, fmt.Errorf("failed to get pipelinestep: %w", err)
	}

	return mapPipelineStepFromDB(&result), nil
}

// Update updates an existing pipelinestep
func (r *PostgresPipelineStepRepository) Update(ctx context.Context, id uuid.UUID, entity *entities.PipelineStep) (*entities.PipelineStep, error) {
	// TODO: Review and adjust field mappings based on SQL schema
	// Only include fields that are updatable (check SQL UPDATE query)
	params := UpdatePipelineStepParams{
		ID: id,
		// Add updatable fields here based on UpdatePipelineStepParams struct
	}

	result, err := r.queries.UpdatePipelineStep(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.ErrPipelineStepNotFound
		}
		return nil, fmt.Errorf("failed to update pipelinestep: %w", err)
	}

	return mapPipelineStepFromDB(&result), nil
}

// Delete removes a pipelinestep
func (r *PostgresPipelineStepRepository) Delete(ctx context.Context, id uuid.UUID) error {
	err := r.queries.DeletePipelineStep(ctx, id)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return corerrors.ErrPipelineStepNotFound
		}
		return fmt.Errorf("failed to delete pipelinestep: %w", err)
	}
	return nil
}

// List returns a paginated list of pipelinesteps
func (r *PostgresPipelineStepRepository) List(ctx context.Context, limit, offset int32) ([]*entities.PipelineStep, int64, error) {
	listParams := ListPipelineStepsParams{
		Limit:  limit,
		Offset: offset,
	}

	results, err := r.queries.ListPipelineSteps(ctx, listParams)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list pipelinesteps: %w", err)
	}

	items := make([]*entities.PipelineStep, len(results))
	for i, result := range results {
		items[i] = mapPipelineStepFromDB(&result)
	}

	// For now, return the count as the length of results
	// In production, you'd want a separate count query
	count := int64(len(results))

	return items, count, nil
}

func mapPipelineStepFromDB(db *PipelineStep) *entities.PipelineStep {
	if db == nil {
		return nil
	}

	result := &entities.PipelineStep{
		ID:           db.ID,
		CreatedAt:    db.CreatedAt,
		UpdatedAt:    db.UpdatedAt,
		PipelineID:   db.PipelineID,
		ToolID:       db.ToolID,
	}

	return result
}
