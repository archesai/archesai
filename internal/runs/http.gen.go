// Package runs provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package runs

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Find many runs
	// (GET /runs)
	ListRuns(ctx echo.Context, params ListRunsParams) error
	// Create a new run
	// (POST /runs)
	CreateRun(ctx echo.Context) error
	// Delete a run
	// (DELETE /runs/{id})
	DeleteRun(ctx echo.Context, id UUID) error
	// Find a run
	// (GET /runs/{id})
	GetRun(ctx echo.Context, id UUID) error
	// Update a run
	// (PATCH /runs/{id})
	UpdateRun(ctx echo.Context, id openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListRuns converts echo context to params.
func (w *ServerInterfaceWrapper) ListRuns(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRunsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListRuns(ctx, params)
	return err
}

// CreateRun converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRun(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateRun(ctx)
	return err
}

// DeleteRun converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRun(ctx, id)
	return err
}

// GetRun converts echo context to params.
func (w *ServerInterfaceWrapper) GetRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRun(ctx, id)
	return err
}

// UpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateRun(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/runs", wrapper.ListRuns)
	router.POST(baseURL+"/runs", wrapper.CreateRun)
	router.DELETE(baseURL+"/runs/:id", wrapper.DeleteRun)
	router.GET(baseURL+"/runs/:id", wrapper.GetRun)
	router.PATCH(baseURL+"/runs/:id", wrapper.UpdateRun)

}

type BadRequestApplicationProblemPlusJSONResponse Problem

type NotFoundApplicationProblemPlusJSONResponse Problem

type UnauthorizedApplicationProblemPlusJSONResponse Problem

type ListRunsRequestObject struct {
	Params ListRunsParams
}

type ListRunsResponseObject interface {
	VisitListRunsResponse(w http.ResponseWriter) error
}

type ListRuns200JSONResponse struct {
	Data []Run `json:"data"`
	Meta struct {
		// Total Total number of items in the collection
		Total float32 `json:"total"`
	} `json:"meta"`
}

func (response ListRuns200JSONResponse) VisitListRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListRuns400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response ListRuns400ApplicationProblemPlusJSONResponse) VisitListRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListRuns401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response ListRuns401ApplicationProblemPlusJSONResponse) VisitListRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateRunRequestObject struct {
	Body *CreateRunJSONRequestBody
}

type CreateRunResponseObject interface {
	VisitCreateRunResponse(w http.ResponseWriter) error
}

type CreateRun201JSONResponse struct {
	// Data Schema for Run entity
	Data Run `json:"data"`
}

func (response CreateRun201JSONResponse) VisitCreateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateRun400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response CreateRun400ApplicationProblemPlusJSONResponse) VisitCreateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateRun401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response CreateRun401ApplicationProblemPlusJSONResponse) VisitCreateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRunRequestObject struct {
	Id UUID `json:"id"`
}

type DeleteRunResponseObject interface {
	VisitDeleteRunResponse(w http.ResponseWriter) error
}

type DeleteRun200JSONResponse struct {
	// Data Schema for Run entity
	Data Run `json:"data"`
}

func (response DeleteRun200JSONResponse) VisitDeleteRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRun404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response DeleteRun404ApplicationProblemPlusJSONResponse) VisitDeleteRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetRunRequestObject struct {
	Id UUID `json:"id"`
}

type GetRunResponseObject interface {
	VisitGetRunResponse(w http.ResponseWriter) error
}

type GetRun200JSONResponse struct {
	// Data Schema for Run entity
	Data Run `json:"data"`
}

func (response GetRun200JSONResponse) VisitGetRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRun404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response GetRun404ApplicationProblemPlusJSONResponse) VisitGetRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRunRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *UpdateRunJSONRequestBody
}

type UpdateRunResponseObject interface {
	VisitUpdateRunResponse(w http.ResponseWriter) error
}

type UpdateRun200JSONResponse struct {
	// Data Schema for Run entity
	Data Run `json:"data"`
}

func (response UpdateRun200JSONResponse) VisitUpdateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRun404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response UpdateRun404ApplicationProblemPlusJSONResponse) VisitUpdateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Find many runs
	// (GET /runs)
	ListRuns(ctx context.Context, request ListRunsRequestObject) (ListRunsResponseObject, error)
	// Create a new run
	// (POST /runs)
	CreateRun(ctx context.Context, request CreateRunRequestObject) (CreateRunResponseObject, error)
	// Delete a run
	// (DELETE /runs/{id})
	DeleteRun(ctx context.Context, request DeleteRunRequestObject) (DeleteRunResponseObject, error)
	// Find a run
	// (GET /runs/{id})
	GetRun(ctx context.Context, request GetRunRequestObject) (GetRunResponseObject, error)
	// Update a run
	// (PATCH /runs/{id})
	UpdateRun(ctx context.Context, request UpdateRunRequestObject) (UpdateRunResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ListRuns operation middleware
func (sh *strictHandler) ListRuns(ctx echo.Context, params ListRunsParams) error {
	var request ListRunsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListRuns(ctx.Request().Context(), request.(ListRunsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListRuns")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListRunsResponseObject); ok {
		return validResponse.VisitListRunsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateRun operation middleware
func (sh *strictHandler) CreateRun(ctx echo.Context) error {
	var request CreateRunRequestObject

	var body CreateRunJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateRun(ctx.Request().Context(), request.(CreateRunRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateRun")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateRunResponseObject); ok {
		return validResponse.VisitCreateRunResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteRun operation middleware
func (sh *strictHandler) DeleteRun(ctx echo.Context, id UUID) error {
	var request DeleteRunRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRun(ctx.Request().Context(), request.(DeleteRunRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRun")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteRunResponseObject); ok {
		return validResponse.VisitDeleteRunResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetRun operation middleware
func (sh *strictHandler) GetRun(ctx echo.Context, id UUID) error {
	var request GetRunRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRun(ctx.Request().Context(), request.(GetRunRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRun")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRunResponseObject); ok {
		return validResponse.VisitGetRunResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateRun operation middleware
func (sh *strictHandler) UpdateRun(ctx echo.Context, id openapi_types.UUID) error {
	var request UpdateRunRequestObject

	request.Id = id

	var body UpdateRunJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateRun(ctx.Request().Context(), request.(UpdateRunRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateRun")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateRunResponseObject); ok {
		return validResponse.VisitUpdateRunResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
