// Package runs provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package runs

import (
	"time"

	"github.com/google/uuid"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for RunStatus.
const (
	COMPLETED  RunStatus = "COMPLETED"
	FAILED     RunStatus = "FAILED"
	PROCESSING RunStatus = "PROCESSING"
	QUEUED     RunStatus = "QUEUED"
)

// Defines values for ListRunsParamsSortField.
const (
	CompletedAt    ListRunsParamsSortField = "completedAt"
	CreatedAt      ListRunsParamsSortField = "createdAt"
	Error          ListRunsParamsSortField = "error"
	ID             ListRunsParamsSortField = "id"
	OrganizationID ListRunsParamsSortField = "organizationID"
	PipelineID     ListRunsParamsSortField = "pipelineID"
	Progress       ListRunsParamsSortField = "progress"
	StartedAt      ListRunsParamsSortField = "startedAt"
	Status         ListRunsParamsSortField = "status"
	ToolID         ListRunsParamsSortField = "toolID"
	UpdatedAt      ListRunsParamsSortField = "updatedAt"
)

// Defines values for ListRunsParamsSortOrder.
const (
	Asc  ListRunsParamsSortOrder = "asc"
	Desc ListRunsParamsSortOrder = "desc"
)

// Base defines model for Base.
type Base struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// ID Universally Unique IDentifier
	ID UUID `json:"id" yaml:"id"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// FilterNode A recursive filter node that can be a condition or group
type FilterNode = interface{}

// Page Pagination (page number & size)
type Page struct {
	Number int `json:"number,omitempty,omitzero" yaml:"number,omitempty"`
	Size   int `json:"size,omitempty,omitzero" yaml:"size,omitempty"`
}

// Problem RFC 7807 (Problem Details) compliant error response
type Problem struct {
	// Detail Human-readable explanation specific to this occurrence
	Detail string `json:"detail,omitempty,omitzero" yaml:"detail,omitempty"`

	// Instance URI identifying the specific occurrence
	Instance string `json:"instance,omitempty,omitzero" yaml:"instance,omitempty"`

	// Status HTTP status code
	Status int `json:"status" yaml:"status"`

	// Title Short, human-readable summary
	Title string `json:"title" yaml:"title"`

	// Type URI identifying the problem type
	Type string `json:"type,omitempty,omitzero" yaml:"type,omitempty"`
}

// Run defines model for Run.
type Run struct {
	// CompletedAt The timestamp when the run completed
	CompletedAt time.Time `json:"completedAt,omitempty,omitzero" yaml:"completedAt,omitempty"`

	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// Error The error message
	Error string `json:"error,omitempty,omitzero" yaml:"error,omitempty"`

	// ID Universally Unique IDentifier
	ID             UUID `json:"id" yaml:"id"`
	OrganizationID UUID `json:"organizationID" yaml:"organizationID"`
	PipelineID     UUID `json:"pipelineID" yaml:"pipelineID"`

	// Progress The percent progress of the run
	Progress float32 `json:"progress" yaml:"progress"`

	// StartedAt The timestamp when the run started
	StartedAt time.Time `json:"startedAt,omitempty,omitzero" yaml:"startedAt,omitempty"`
	Status    RunStatus `json:"status" yaml:"status"`
	ToolID    UUID      `json:"toolID" yaml:"toolID"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// RunStatus defines model for Run.Status.
type RunStatus string

// UUID Universally Unique IDentifier
type UUID = uuid.UUID

// PageQuery Pagination (page number & size)
type PageQuery = Page

// RunsFilter A recursive filter node that can be a condition or group
type RunsFilter = FilterNode

// RunsSort defines model for RunsSort.
type RunsSort = []struct {
	Field string `json:"field" yaml:"field"`
	Order string `json:"order" yaml:"order"`
}

// BadRequest RFC 7807 (Problem Details) compliant error response
type BadRequest = Problem

// NotFound RFC 7807 (Problem Details) compliant error response
type NotFound = Problem

// Unauthorized RFC 7807 (Problem Details) compliant error response
type Unauthorized = Problem

// ListRunsParams defines parameters for ListRuns.
type ListRunsParams struct {
	// Filter Filter runs by field values. Supported fields:
	// - createdAt, id, updatedAt, completedAt, error, organizationID
	// - pipelineID, progress, startedAt, status, toolID
	Filter RunsFilter `json:"filter,omitempty,omitzero" yaml:"filter,omitempty"`

	// Page The page parameter
	Page PageQuery `form:"page,omitempty" json:"page,omitempty,omitzero" yaml:"page,omitempty"`

	// Sort The sort parameter
	Sort RunsSort `form:"sort,omitempty" json:"sort,omitempty,omitzero" yaml:"sort,omitempty"`
}

// ListRunsParamsSortField defines parameters for ListRuns.
type ListRunsParamsSortField string

// ListRunsParamsSortOrder defines parameters for ListRuns.
type ListRunsParamsSortOrder string

// CreateRunJSONBody defines parameters for CreateRun.
type CreateRunJSONBody struct {
	PipelineID UUID `json:"pipelineID" yaml:"pipelineID"`
}

// UpdateRunJSONBody defines parameters for UpdateRun.
type UpdateRunJSONBody struct {
	PipelineID UUID `json:"pipelineID,omitempty,omitzero" yaml:"pipelineID,omitempty"`
}

// CreateRunJSONRequestBody defines body for CreateRun for application/json ContentType.
type CreateRunJSONRequestBody CreateRunJSONBody

// UpdateRunJSONRequestBody defines body for UpdateRun for application/json ContentType.
type UpdateRunJSONRequestBody UpdateRunJSONBody
