// Code generated by archesai codegen. DO NOT EDIT.
package runs

import (
	"time"

	"github.com/google/uuid"
)

// Defines values for RunStatus.
const (
	COMPLETED  RunStatus = "COMPLETED"
	FAILED     RunStatus = "FAILED"
	PROCESSING RunStatus = "PROCESSING"
	QUEUED     RunStatus = "QUEUED"
)

// Defines values for ListRunsParamsSortField.
const (
	RunsCompletedAt    ListRunsParamsSortField = "completedAt"
	RunsCreatedAt      ListRunsParamsSortField = "createdAt"
	RunsError          ListRunsParamsSortField = "error"
	RunsID             ListRunsParamsSortField = "id"
	RunsOrganizationID ListRunsParamsSortField = "organizationID"
	RunsPipelineID     ListRunsParamsSortField = "pipelineID"
	RunsProgress       ListRunsParamsSortField = "progress"
	RunsStartedAt      ListRunsParamsSortField = "startedAt"
	RunsStatus         ListRunsParamsSortField = "status"
	RunsToolID         ListRunsParamsSortField = "toolID"
	RunsUpdatedAt      ListRunsParamsSortField = "updatedAt"
)

// Defines values for ListRunsParamsSortOrder.
const (
	RunsAsc  ListRunsParamsSortOrder = "asc"
	RunsDesc ListRunsParamsSortOrder = "desc"
)

// RunStatus represents the type for RunStatus enum values.
type RunStatus string

// ListRunsParamsSortField represents the type for ListRunsParamsSortField enum values.
type ListRunsParamsSortField string

// ListRunsParamsSortOrder represents the type for ListRunsParamsSortOrder enum values.
type ListRunsParamsSortOrder string

// CreateRunResponse
type CreateRunResponse = Run

// UpdateRunResponse
type UpdateRunResponse = Run

// GetRunResponse
type GetRunResponse = Run

// Run Schema for Run entity
type Run struct {
	// CompletedAt The timestamp when the run completed
	CompletedAt *time.Time `json:"completedAt,omitempty" yaml:"completedAt,omitempty"`
	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`
	// Error The error message
	Error *string `json:"error,omitempty" yaml:"error,omitempty"`
	// ID Unique identifier for the resource
	ID uuid.UUID `json:"id" yaml:"id"`
	// OrganizationID The organization this run belongs to
	OrganizationID uuid.UUID `json:"organizationID" yaml:"organizationID"`
	// PipelineID The pipeline this run is executing
	PipelineID uuid.UUID `json:"pipelineID" yaml:"pipelineID"`
	// Progress The percent progress of the run
	Progress float64 `json:"progress" yaml:"progress"`
	// StartedAt The timestamp when the run started
	StartedAt *time.Time `json:"startedAt,omitempty" yaml:"startedAt,omitempty"`
	Status    RunStatus  `json:"status" yaml:"status"`
	// ToolID The tool being used in this run
	ToolID uuid.UUID `json:"toolID" yaml:"toolID"`
	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// CreateRunRequestBody Request body for createRun
type CreateRunRequestBody struct {
	// Description The runs description
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name The runs name
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`
}

// UpdateRunRequestBody Request body for updateRun
type UpdateRunRequestBody struct {
	// Description The runs description
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name The runs name
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`
}

// ListRunsParams Parameters for listing runs
type ListRunsParams struct {
	// Filter Filter parameters
	Filter *ListRunsParamsFilter `json:"filter,omitempty" yaml:"filter,omitempty"`
	// Page Pagination parameters
	Page *ListRunsParamsPage `json:"page,omitempty" yaml:"page,omitempty"`
	// Sort Sort parameters
	Sort *ListRunsParamsSort `json:"sort,omitempty" yaml:"sort,omitempty"`
}

// ListRunsParamsFilter Filter runs by field values
type ListRunsParamsFilter struct {
	// Filter A recursive filter node that can be a condition or group
	Filter interface{} `json:"filter" yaml:"filter"`
}

// ListRunsParamsPage Pagination parameters for listing runs
type ListRunsParamsPage struct {
	// Number Page number (1-indexed)
	Number int `json:"number" yaml:"number"`
	// Size Page size (items per page)
	Size int `json:"size" yaml:"size"`
}

// ListRunsParamsSort Sort runs by field and order
type ListRunsParamsSort struct {
	// Field Field to sort by
	Field ListRunsParamsSortField `json:"field" yaml:"field"`
	// Order Sort order (asc or desc)
	Order ListRunsParamsSortOrder `json:"order" yaml:"order"`
}

// ListMetadata Metadata for list responses
type ListMetadata struct {
	// Total Total number of items
	Total int64 `json:"total" yaml:"total"`
}

// DeleteRunResponse Response for deleting a run
type DeleteRunResponse struct {
}

// ListRunsResponse Response for listing runs
type ListRunsResponse struct {
	// Data List of runs
	Data []*Run `json:"data" yaml:"data"`
	// Meta Metadata about the list response
	Meta ListMetadata `json:"meta" yaml:"meta"`
}
