// Code generated by archesai/codegen. DO NOT EDIT.

package runs

import (
	"context"
	"log/slog"
)

// StrictServer implements StrictServerInterface by delegating to the service
type StrictServer struct {
	service ServiceInterface
	logger  *slog.Logger
}

// NewStrictServer creates a new strict server that implements StrictServerInterface
func NewStrictServer(service ServiceInterface, logger *slog.Logger) StrictServerInterface {
	return &StrictServer{
		service: service,
		logger:  logger,
	}
}

// CreateRun handles the create run endpoint
func (s *StrictServer) CreateRun(ctx context.Context, request CreateRunRequestObject) (CreateRunResponseObject, error) {
	return s.service.Create(ctx, request)
}

// GetRun handles the get run endpoint
func (s *StrictServer) GetRun(ctx context.Context, request GetRunRequestObject) (GetRunResponseObject, error) {
	return s.service.Get(ctx, request)
}

// UpdateRun handles the update run endpoint
func (s *StrictServer) UpdateRun(ctx context.Context, request UpdateRunRequestObject) (UpdateRunResponseObject, error) {
	return s.service.Update(ctx, request)
}

// DeleteRun handles the delete run endpoint
func (s *StrictServer) DeleteRun(ctx context.Context, request DeleteRunRequestObject) (DeleteRunResponseObject, error) {
	return s.service.Delete(ctx, request)
}

// ListRuns handles the list runs endpoint
func (s *StrictServer) ListRuns(ctx context.Context, request ListRunsRequestObject) (ListRunsResponseObject, error) {
	return s.service.List(ctx, request)
}
