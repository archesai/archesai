// Code generated by codegen repository. DO NOT EDIT.
package runs

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/archesai/archesai/internal/database/postgresql"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgxpool"
)

// PostgresRepository implements Repository using PostgreSQL.
type PostgresRepository struct {
	queries *postgresql.Queries
}

// NewPostgresRepository creates a new PostgreSQL repository.
func NewPostgresRepository(db *pgxpool.Pool) Repository {
	return &PostgresRepository{
		queries: postgresql.New(db),
	}
}

// Run operations

// Create creates a new run
func (r *PostgresRepository) Create(ctx context.Context, entity *Run) (*Run, error) {
	params := postgresql.CreateRunParams{
		ID: entity.ID,

		OrganizationID: entity.OrganizationID,
		PipelineID:     entity.PipelineID,
		Progress:       entity.Progress,
		Status:         string(entity.Status),
		ToolID:         entity.ToolID,
	}

	result, err := r.queries.CreateRun(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to create run: %w", err)
	}

	return mapRunFromDB(&result), nil
}

// Get retrieves a run by ID
func (r *PostgresRepository) Get(ctx context.Context, id uuid.UUID) (*Run, error) {
	result, err := r.queries.GetRun(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrRunNotFound
		}
		return nil, fmt.Errorf("failed to get run: %w", err)
	}

	return mapRunFromDB(&result), nil
}

// Update updates an existing run
func (r *PostgresRepository) Update(ctx context.Context, id uuid.UUID, entity *Run) (*Run, error) {
	params := postgresql.UpdateRunParams{
		ID: id,

		CompletedAt: entity.CompletedAt,
		Error:       entity.Error,
		Progress:    &entity.Progress,
		StartedAt:   entity.StartedAt,
		Status:      func() *string { s := string(entity.Status); return &s }(),
	}

	result, err := r.queries.UpdateRun(ctx, params)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrRunNotFound
		}
		return nil, fmt.Errorf("failed to update run: %w", err)
	}

	return mapRunFromDB(&result), nil
}

// Delete removes a run
func (r *PostgresRepository) Delete(ctx context.Context, id uuid.UUID) error {
	err := r.queries.DeleteRun(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return ErrRunNotFound
		}
		return fmt.Errorf("failed to delete run: %w", err)
	}
	return nil
}

// List returns a paginated list of runs
func (r *PostgresRepository) List(ctx context.Context, params ListRunsParams) ([]*Run, int64, error) {
	// Calculate offset from page
	offset := int32(0)
	limit := int32(10) // default

	// Check if params has Page field with Number and Size
	if params.Page != nil && params.Page.Number > 0 && params.Page.Size > 0 {
		offset = int32((params.Page.Number - 1) * params.Page.Size)
		limit = int32(params.Page.Size)
	}

	listParams := postgresql.ListRunsParams{
		Limit:  limit,
		Offset: offset,
	}

	results, err := r.queries.ListRuns(ctx, listParams)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list runs: %w", err)
	}

	items := make([]*Run, len(results))
	for i, result := range results {
		items[i] = mapRunFromDB(&result)
	}

	// For now, return the count as the length of results
	// In production, you'd want a separate count query
	count := int64(len(results))

	return items, count, nil
}

// Additional methods

// ListByPipeline retrieves multiple runs by pipelineID
func (r *PostgresRepository) ListByPipeline(ctx context.Context, pipelineID uuid.UUID) ([]*Run, error) {

	// TODO: Implement ListByPipeline - fetch multiple runs
	return nil, fmt.Errorf("ListByPipeline not yet implemented")

}

// ListByOrganization retrieves multiple runs by organizationID
func (r *PostgresRepository) ListByOrganization(ctx context.Context, organizationID uuid.UUID) ([]*Run, error) {

	// TODO: Implement ListByOrganization - fetch multiple runs
	return nil, fmt.Errorf("ListByOrganization not yet implemented")

}

// ListByTool retrieves multiple runs by toolID
func (r *PostgresRepository) ListByTool(ctx context.Context, toolID uuid.UUID) ([]*Run, error) {

	// TODO: Implement ListByTool - fetch multiple runs
	return nil, fmt.Errorf("ListByTool not yet implemented")

}

// Mapper functions - Convert between domain types and database types

func mapRunFromDB(db *postgresql.Run) *Run {
	if db == nil {
		return nil
	}

	result := &Run{
		ID:        db.ID,
		CreatedAt: db.CreatedAt,
		UpdatedAt: db.UpdatedAt,

		CompletedAt: db.CompletedAt,

		Error: db.Error,

		OrganizationID: db.OrganizationID,

		PipelineID: db.PipelineID,

		Progress: db.Progress,

		StartedAt: db.StartedAt,

		Status: RunStatus(db.Status),

		ToolID: db.ToolID,
	}

	return result
}
