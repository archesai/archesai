// Code generated by archesai/codegen. DO NOT EDIT.

package runs

import (
	"context"
	"errors"
	"log/slog"
	"time"

	"github.com/archesai/archesai/internal/database/postgresql"
	"github.com/google/uuid"
)

// ServiceInterface defines the business logic operations
type ServiceInterface interface {
	CreateRun(ctx context.Context, request CreateRunRequestObject) (CreateRunResponseObject, error)
	GetRun(ctx context.Context, request GetRunRequestObject) (GetRunResponseObject, error)
	UpdateRun(ctx context.Context, request UpdateRunRequestObject) (UpdateRunResponseObject, error)
	DeleteRun(ctx context.Context, request DeleteRunRequestObject) (DeleteRunResponseObject, error)
	ListRuns(ctx context.Context, request ListRunsRequestObject) (ListRunsResponseObject, error)
}

// Service implements the business logic
type Service struct {
	repo   Repository
	db     *postgresql.Queries
	logger *slog.Logger
}

// NewService creates a new service implementation
func NewService(repo Repository, db *postgresql.Queries, logger *slog.Logger) *Service {
	return &Service{
		repo:   repo,
		db:     db,
		logger: logger,
	}
}

// CreateRun creates a new run
func (s *Service) CreateRun(ctx context.Context, request CreateRunRequestObject) (CreateRunResponseObject, error) {
	if request.Body == nil {
		return CreateRun400ApplicationProblemPlusJSONResponse{
			BadRequestApplicationProblemPlusJSONResponse: BadRequestApplicationProblemPlusJSONResponse{
				Detail: "Request body is required",
				Status: 400,
				Title:  "Bad Request",
				Type:   "about:blank",
			},
		}, nil
	}

	// Create entity from request
	entity := &Run{
		ID:        uuid.New(),
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}

	// Call repository to persist
	created, err := s.repo.Create(ctx, entity)
	if err != nil {
		s.logger.Error("Failed to create run", "error", err)
		return CreateRun400ApplicationProblemPlusJSONResponse{
			BadRequestApplicationProblemPlusJSONResponse: BadRequestApplicationProblemPlusJSONResponse{
				Detail: "Failed to create run",
				Status: 400,
				Title:  "Bad Request",
				Type:   "about:blank",
			},
		}, nil
	}
	// Check if response type has Data field (wrapped response)
	return CreateRun201JSONResponse{
		Data: *created,
	}, nil
}

// GetRun gets a run by ID
func (s *Service) GetRun(ctx context.Context, request GetRunRequestObject) (GetRunResponseObject, error) {
	// Call repository to fetch entity
	entity, err := s.repo.Get(ctx, request.ID)
	if err != nil {
		if errors.Is(err, ErrRunNotFound) {
			return GetRun404ApplicationProblemPlusJSONResponse{
				NotFoundApplicationProblemPlusJSONResponse: NotFoundApplicationProblemPlusJSONResponse{
					Detail: "Run not found",
					Status: 404,
					Title:  "Not Found",
					Type:   "about:blank",
				},
			}, nil
		}

		s.logger.Error("Failed to get run", "error", err, "id", request.ID)
		return GetRun404ApplicationProblemPlusJSONResponse{
			NotFoundApplicationProblemPlusJSONResponse: NotFoundApplicationProblemPlusJSONResponse{
				Detail: "Failed to retrieve run",
				Status: 404,
				Title:  "Not Found",
				Type:   "about:blank",
			},
		}, nil
	}

	return GetRun200JSONResponse{
		Data: *entity,
	}, nil
}

// UpdateRun updates a run
func (s *Service) UpdateRun(ctx context.Context, request UpdateRunRequestObject) (UpdateRunResponseObject, error) {
	if request.Body == nil {
		return UpdateRun404ApplicationProblemPlusJSONResponse{
			NotFoundApplicationProblemPlusJSONResponse: NotFoundApplicationProblemPlusJSONResponse{
				Detail: "Request body is required",
				Status: 400,
				Title:  "Bad Request",
				Type:   "about:blank",
			},
		}, nil
	}

	// Get existing entity to verify it exists
	existing, err := s.repo.Get(ctx, request.ID)
	if err != nil {
		if errors.Is(err, ErrRunNotFound) {
			return UpdateRun404ApplicationProblemPlusJSONResponse{
				NotFoundApplicationProblemPlusJSONResponse: NotFoundApplicationProblemPlusJSONResponse{
					Detail: "Run not found",
					Status: 404,
					Title:  "Not Found",
					Type:   "about:blank",
				},
			}, nil
		}
		s.logger.Error("Failed to get run for update", "error", err, "id", request.ID)
		return UpdateRun404ApplicationProblemPlusJSONResponse{
			NotFoundApplicationProblemPlusJSONResponse: NotFoundApplicationProblemPlusJSONResponse{
				Detail: "Internal server error",
				Status: 500,
				Title:  "Internal Server Error",
				Type:   "about:blank",
			},
		}, nil
	}

	// Update the entity with current timestamp
	existing.UpdatedAt = time.Now()

	// Call repository to persist changes
	updated, err := s.repo.Update(ctx, request.ID, existing)
	if err != nil {
		s.logger.Error("Failed to update run", "error", err, "id", request.ID)
		return UpdateRun404ApplicationProblemPlusJSONResponse{
			NotFoundApplicationProblemPlusJSONResponse: NotFoundApplicationProblemPlusJSONResponse{
				Detail: "Failed to update run",
				Status: 500,
				Title:  "Internal Server Error",
				Type:   "about:blank",
			},
		}, nil
	}

	return UpdateRun200JSONResponse{
		Data: *updated,
	}, nil
}

// DeleteRun deletes a run
func (s *Service) DeleteRun(ctx context.Context, request DeleteRunRequestObject) (DeleteRunResponseObject, error) {
	// Check if entity exists first
	_, err := s.repo.Get(ctx, request.ID)
	if err != nil {
		if errors.Is(err, ErrRunNotFound) {
			return DeleteRun404ApplicationProblemPlusJSONResponse{
				NotFoundApplicationProblemPlusJSONResponse: NotFoundApplicationProblemPlusJSONResponse{
					Detail: "Run not found",
					Status: 404,
					Title:  "Not Found",
					Type:   "about:blank",
				},
			}, nil
		}
		s.logger.Error("Failed to get run for deletion", "error", err, "id", request.ID)
		return DeleteRun404ApplicationProblemPlusJSONResponse{
			NotFoundApplicationProblemPlusJSONResponse: NotFoundApplicationProblemPlusJSONResponse{
				Detail: "Internal server error",
				Status: 500,
				Title:  "Internal Server Error",
				Type:   "about:blank",
			},
		}, nil
	}

	// Delete the entity
	err = s.repo.Delete(ctx, request.ID)
	if err != nil {
		s.logger.Error("Failed to delete run", "error", err, "id", request.ID)
		return DeleteRun404ApplicationProblemPlusJSONResponse{
			NotFoundApplicationProblemPlusJSONResponse: NotFoundApplicationProblemPlusJSONResponse{
				Detail: "Failed to delete run",
				Status: 500,
				Title:  "Internal Server Error",
				Type:   "about:blank",
			},
		}, nil
	}

	return DeleteRun200JSONResponse{}, nil
}

// ListRuns lists all runs
func (s *Service) ListRuns(ctx context.Context, request ListRunsRequestObject) (ListRunsResponseObject, error) {
	// Call repository to fetch entities using the request parameters
	entities, total, err := s.repo.List(ctx, request.Params)
	if err != nil {
		s.logger.Error("Failed to list runs", "error", err)
		return ListRuns400ApplicationProblemPlusJSONResponse{
			BadRequestApplicationProblemPlusJSONResponse: BadRequestApplicationProblemPlusJSONResponse{
				Detail: "Failed to list runs",
				Status: 500,
				Title:  "Internal Server Error",
				Type:   "about:blank",
			},
		}, nil
	}

	// Convert entities to response format
	var responseData []Run
	for _, entity := range entities {
		if entity != nil {
			responseData = append(responseData, *entity)
		}
	}

	return ListRuns200JSONResponse{
		Data: responseData,
		Meta: struct {
			Total float32 `json:"total"`
		}{
			Total: float32(total),
		},
	}, nil
}
