// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// ConfigAuthGoogle represents Google OAuth configuration
type ConfigAuthGoogle struct {
	ClientId     *string  `json:"clientId,omitempty" yaml:"clientId,omitempty"`         // Google OAuth client ID
	ClientSecret *string  `json:"clientSecret,omitempty" yaml:"clientSecret,omitempty"` // Google OAuth client secret
	Enabled      bool     `json:"enabled" yaml:"enabled"`                               // Enable Google OAuth
	RedirectUrl  *string  `json:"redirectUrl,omitempty" yaml:"redirectUrl,omitempty"`   // OAuth callback URL
	Scopes       []string `json:"scopes,omitempty" yaml:"scopes,omitempty"`             // OAuth scopes to request
}

// NewConfigAuthGoogle creates a new ConfigAuthGoogle value object
func NewConfigAuthGoogle(clientID *string, clientSecret *string, enabled bool, redirectURL *string, scopes []string) (ConfigAuthGoogle, error) {

	return ConfigAuthGoogle{
		ClientId:     clientID,
		ClientSecret: clientSecret,
		Enabled:      enabled,
		RedirectUrl:  redirectURL,
		Scopes:       scopes,
	}, nil
}

// GetClientId returns the ClientId
func (v ConfigAuthGoogle) GetClientId() *string {
	return v.ClientId
}

// GetClientSecret returns the ClientSecret
func (v ConfigAuthGoogle) GetClientSecret() *string {
	return v.ClientSecret
}

// GetEnabled returns the Enabled
func (v ConfigAuthGoogle) GetEnabled() bool {
	return v.Enabled
}

// GetRedirectUrl returns the RedirectUrl
func (v ConfigAuthGoogle) GetRedirectUrl() *string {
	return v.RedirectUrl
}

// GetScopes returns the Scopes
func (v ConfigAuthGoogle) GetScopes() []string {
	return v.Scopes
}

// Equals checks if two ConfigAuthGoogle value objects are equal
// func (v ConfigAuthGoogle) Equals(other ConfigAuthGoogle) bool {
//	return v.ClientId == other.ClientId && v.ClientSecret == other.ClientSecret && v.Enabled == other.Enabled && v.RedirectUrl == other.RedirectUrl && v.Scopes == other.Scopes
// }

// String returns a string representation of ConfigAuthGoogle
func (v ConfigAuthGoogle) String() string {
	// Build string representation field by field to avoid recursion
	var fields []string
	fields = append(fields, fmt.Sprintf("ClientId: %v", v.ClientId))
	fields = append(fields, fmt.Sprintf("ClientSecret: %v", v.ClientSecret))
	fields = append(fields, fmt.Sprintf("Enabled: %v", v.Enabled))
	fields = append(fields, fmt.Sprintf("RedirectUrl: %v", v.RedirectUrl))
	fields = append(fields, fmt.Sprintf("Scopes: %v", v.Scopes))
	return fmt.Sprintf("ConfigAuthGoogle{%s}", strings.Join(fields, ", "))
}
