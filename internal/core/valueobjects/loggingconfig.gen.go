// Code generated by archesai-codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// LoggingConfigLevel represents the enumeration of valid values for Level
type LoggingConfigLevel string

// Valid Level values
const (
	LoggingConfigLevelFatal  LoggingConfigLevel = "fatal"
	LoggingConfigLevelError  LoggingConfigLevel = "error"
	LoggingConfigLevelWarn   LoggingConfigLevel = "warn"
	LoggingConfigLevelInfo   LoggingConfigLevel = "info"
	LoggingConfigLevelDebug  LoggingConfigLevel = "debug"
	LoggingConfigLevelTrace  LoggingConfigLevel = "trace"
	LoggingConfigLevelSilent LoggingConfigLevel = "silent"
)

// String returns the string representation
func (e LoggingConfigLevel) String() string {
	return string(e)
}

// IsValid checks if the value is valid
func (e LoggingConfigLevel) IsValid() bool {
	switch e {
	case LoggingConfigLevelFatal:
		return true
	case LoggingConfigLevelError:
		return true
	case LoggingConfigLevelWarn:
		return true
	case LoggingConfigLevelInfo:
		return true
	case LoggingConfigLevelDebug:
		return true
	case LoggingConfigLevelTrace:
		return true
	case LoggingConfigLevelSilent:
		return true
	default:
		return false
	}
}

// ParseLoggingConfigLevel parses a string into the enum type
func ParseLoggingConfigLevel(s string) (LoggingConfigLevel, error) {
	v := LoggingConfigLevel(s)
	if !v.IsValid() {
		return "", fmt.Errorf("invalid Level: %s", s)
	}
	return v, nil
}

// LoggingConfig represents Logging configuration
type LoggingConfig struct {

	// Level Minimum log level to output
	Level LoggingConfigLevel `json:"level" yaml:"level"`

	// Pretty Enable pretty-printed logs for development
	Pretty bool `json:"pretty" yaml:"pretty"`
}

// NewLoggingConfig creates a new immutable LoggingConfig value object.
// Value objects are immutable and validated upon creation.
func NewLoggingConfig(
	level LoggingConfigLevel,
	pretty bool,
) (LoggingConfig, error) {
	// Validate required fields
	if !level.IsValid() {
		return LoggingConfig{}, fmt.Errorf("invalid Level: %s", level)
	}
	return LoggingConfig{
		Level:  level,
		Pretty: pretty,
	}, nil
}

// ZeroLoggingConfig returns the zero value for LoggingConfig.
// This is useful for comparisons and as a default value.
func ZeroLoggingConfig() LoggingConfig {
	return LoggingConfig{}
}

// GetLevel returns the Level value.
// Value objects are immutable, so this returns a copy of the value.
func (v LoggingConfig) GetLevel() LoggingConfigLevel {
	return v.Level
}

// GetPretty returns the Pretty value.
// Value objects are immutable, so this returns a copy of the value.
func (v LoggingConfig) GetPretty() bool {
	return v.Pretty
}

// Validate validates the LoggingConfig value object.
// Returns an error if any field fails validation.
func (v LoggingConfig) Validate() error {
	if !v.Level.IsValid() {
		return fmt.Errorf("invalid Level: %s", v.Level)
	}
	return nil
}

// IsZero returns true if this is the zero value.
func (v LoggingConfig) IsZero() bool {
	zero := ZeroLoggingConfig()
	// Compare using string representation as a simple equality check
	return v.String() == zero.String()
}

// String returns a string representation of LoggingConfig
func (v LoggingConfig) String() string {
	var fields []string
	fields = append(fields, fmt.Sprintf("Level: %v", v.Level))
	fields = append(fields, fmt.Sprintf("Pretty: %v", v.Pretty))
	return fmt.Sprintf("LoggingConfig{%s}", strings.Join(fields, ", "))
}
