// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import "fmt"

// ConfigDatabase represents Database configuration for PostgreSQL
type ConfigDatabase struct {
	ConnMaxIdleTime   *string            `json:"connMaxIdleTime,omitempty" yaml:"connMaxIdleTime,omitempty"`     // Maximum connection idle time (e.g., "5m")
	ConnMaxLifetime   *string            `json:"connMaxLifetime,omitempty" yaml:"connMaxLifetime,omitempty"`     // Maximum connection lifetime (e.g., "30m")
	Enabled           bool               `json:"enabled" yaml:"enabled"`                                         // Enable database
	HealthCheckPeriod *string            `json:"healthCheckPeriod,omitempty" yaml:"healthCheckPeriod,omitempty"` // Health check period for connections (PostgreSQL)
	Image             *ConfigImage       `json:"image,omitempty" yaml:"image,omitempty"`
	Managed           bool               `json:"managed" yaml:"managed"`   // Use managed database deployment
	MaxConns          int32              `json:"maxConns" yaml:"maxConns"` // Maximum number of connections in pool (PostgreSQL)
	MinConns          int32              `json:"minConns" yaml:"minConns"` // Minimum number of connections in pool (PostgreSQL)
	Persistence       *ConfigPersistence `json:"persistence,omitempty" yaml:"persistence,omitempty"`
	Resources         *ConfigResource    `json:"resources,omitempty" yaml:"resources,omitempty"`
	RunMigrations     bool               `json:"runMigrations" yaml:"runMigrations"` // Automatically run database migrations on startup
	Type              string             `json:"type" yaml:"type"`                   // Database type (postgresql or sqlite)
	URL               string             `json:"url" yaml:"url"`                     // Database connection url/string
}

// NewConfigDatabase creates a new ConfigDatabase value object
func NewConfigDatabase(connMaxIdleTime *string, connMaxLifetime *string, enabled bool, healthCheckPeriod *string, image *ConfigImage, managed bool, maxConns int32, minConns int32, persistence *ConfigPersistence, resources *ConfigResource, runMigrations bool, type_ string, url string) (ConfigDatabase, error) {
	if type_ == "" {
		return ConfigDatabase{}, fmt.Errorf("Type cannot be empty")
	}
	if url == "" {
		return ConfigDatabase{}, fmt.Errorf("URL cannot be empty")
	}

	return ConfigDatabase{
		ConnMaxIdleTime:   connMaxIdleTime,
		ConnMaxLifetime:   connMaxLifetime,
		Enabled:           enabled,
		HealthCheckPeriod: healthCheckPeriod,
		Image:             image,
		Managed:           managed,
		MaxConns:          maxConns,
		MinConns:          minConns,
		Persistence:       persistence,
		Resources:         resources,
		RunMigrations:     runMigrations,
		Type:              type_,
		URL:               url,
	}, nil
}

// GetConnMaxIdleTime returns the ConnMaxIdleTime
func (v ConfigDatabase) GetConnMaxIdleTime() *string {
	return v.ConnMaxIdleTime
}

// GetConnMaxLifetime returns the ConnMaxLifetime
func (v ConfigDatabase) GetConnMaxLifetime() *string {
	return v.ConnMaxLifetime
}

// GetEnabled returns the Enabled
func (v ConfigDatabase) GetEnabled() bool {
	return v.Enabled
}

// GetHealthCheckPeriod returns the HealthCheckPeriod
func (v ConfigDatabase) GetHealthCheckPeriod() *string {
	return v.HealthCheckPeriod
}

// GetImage returns the Image
func (v ConfigDatabase) GetImage() *ConfigImage {
	return v.Image
}

// GetManaged returns the Managed
func (v ConfigDatabase) GetManaged() bool {
	return v.Managed
}

// GetMaxConns returns the MaxConns
func (v ConfigDatabase) GetMaxConns() int32 {
	return v.MaxConns
}

// GetMinConns returns the MinConns
func (v ConfigDatabase) GetMinConns() int32 {
	return v.MinConns
}

// GetPersistence returns the Persistence
func (v ConfigDatabase) GetPersistence() *ConfigPersistence {
	return v.Persistence
}

// GetResources returns the Resources
func (v ConfigDatabase) GetResources() *ConfigResource {
	return v.Resources
}

// GetRunMigrations returns the RunMigrations
func (v ConfigDatabase) GetRunMigrations() bool {
	return v.RunMigrations
}

// GetType returns the Type
func (v ConfigDatabase) GetType() string {
	return v.Type
}

// GetURL returns the URL
func (v ConfigDatabase) GetURL() string {
	return v.URL
}

// Equals checks if two ConfigDatabase value objects are equal
// func (v ConfigDatabase) Equals(other ConfigDatabase) bool {
//	return v.ConnMaxIdleTime == other.ConnMaxIdleTime && v.ConnMaxLifetime == other.ConnMaxLifetime && v.Enabled == other.Enabled && v.HealthCheckPeriod == other.HealthCheckPeriod && v.Image == other.Image && v.Managed == other.Managed && v.MaxConns == other.MaxConns && v.MinConns == other.MinConns && v.Persistence == other.Persistence && v.Resources == other.Resources && v.RunMigrations == other.RunMigrations && v.Type == other.Type && v.URL == other.URL
// }

// String returns a string representation of ConfigDatabase
func (v ConfigDatabase) String() string {
	return fmt.Sprintf("%+v", v)
}
