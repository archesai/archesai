// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// ConfigAuth represents Authentication configuration for the API server
type ConfigAuth struct {
	Enabled   bool                 `json:"enabled" yaml:"enabled"` // Enable authentication
	Firebase  *ConfigAuthFirebase  `json:"firebase,omitempty" yaml:"firebase,omitempty"`
	Github    *ConfigAuthGithub    `json:"github,omitempty" yaml:"github,omitempty"`
	Google    *ConfigAuthGoogle    `json:"google,omitempty" yaml:"google,omitempty"`
	Local     *ConfigAuthLocal     `json:"local,omitempty" yaml:"local,omitempty"`
	MagicLink *ConfigAuthMagicLink `json:"magicLink,omitempty" yaml:"magicLink,omitempty"`
	Microsoft *ConfigAuthMicrosoft `json:"microsoft,omitempty" yaml:"microsoft,omitempty"`
	Twitter   *ConfigAuthTwitter   `json:"twitter,omitempty" yaml:"twitter,omitempty"`
}

// NewConfigAuth creates a new ConfigAuth value object
func NewConfigAuth(enabled bool, firebase *ConfigAuthFirebase, github *ConfigAuthGithub, google *ConfigAuthGoogle, local *ConfigAuthLocal, magicLink *ConfigAuthMagicLink, microsoft *ConfigAuthMicrosoft, twitter *ConfigAuthTwitter) (ConfigAuth, error) {

	return ConfigAuth{
		Enabled:   enabled,
		Firebase:  firebase,
		Github:    github,
		Google:    google,
		Local:     local,
		MagicLink: magicLink,
		Microsoft: microsoft,
		Twitter:   twitter,
	}, nil
}

// GetEnabled returns the Enabled
func (v ConfigAuth) GetEnabled() bool {
	return v.Enabled
}

// GetFirebase returns the Firebase
func (v ConfigAuth) GetFirebase() *ConfigAuthFirebase {
	return v.Firebase
}

// GetGithub returns the Github
func (v ConfigAuth) GetGithub() *ConfigAuthGithub {
	return v.Github
}

// GetGoogle returns the Google
func (v ConfigAuth) GetGoogle() *ConfigAuthGoogle {
	return v.Google
}

// GetLocal returns the Local
func (v ConfigAuth) GetLocal() *ConfigAuthLocal {
	return v.Local
}

// GetMagicLink returns the MagicLink
func (v ConfigAuth) GetMagicLink() *ConfigAuthMagicLink {
	return v.MagicLink
}

// GetMicrosoft returns the Microsoft
func (v ConfigAuth) GetMicrosoft() *ConfigAuthMicrosoft {
	return v.Microsoft
}

// GetTwitter returns the Twitter
func (v ConfigAuth) GetTwitter() *ConfigAuthTwitter {
	return v.Twitter
}

// Equals checks if two ConfigAuth value objects are equal
// func (v ConfigAuth) Equals(other ConfigAuth) bool {
//	return v.Enabled == other.Enabled && v.Firebase == other.Firebase && v.Github == other.Github && v.Google == other.Google && v.Local == other.Local && v.MagicLink == other.MagicLink && v.Microsoft == other.Microsoft && v.Twitter == other.Twitter
// }

// String returns a string representation of ConfigAuth
func (v ConfigAuth) String() string {
	// Build string representation field by field to avoid recursion
	var fields []string
	fields = append(fields, fmt.Sprintf("Enabled: %v", v.Enabled))
	fields = append(fields, fmt.Sprintf("Firebase: %v", v.Firebase))
	fields = append(fields, fmt.Sprintf("Github: %v", v.Github))
	fields = append(fields, fmt.Sprintf("Google: %v", v.Google))
	fields = append(fields, fmt.Sprintf("Local: %v", v.Local))
	fields = append(fields, fmt.Sprintf("MagicLink: %v", v.MagicLink))
	fields = append(fields, fmt.Sprintf("Microsoft: %v", v.Microsoft))
	fields = append(fields, fmt.Sprintf("Twitter: %v", v.Twitter))
	return fmt.Sprintf("ConfigAuth{%s}", strings.Join(fields, ", "))
}
