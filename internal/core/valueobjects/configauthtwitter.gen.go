// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// ConfigAuthTwitter represents Twitter OAuth configuration
type ConfigAuthTwitter struct {
	CallbackURL    *string `json:"callbackURL,omitempty" yaml:"callbackURL,omitempty"`       // OAuth callback URL
	ConsumerKey    *string `json:"consumerKey,omitempty" yaml:"consumerKey,omitempty"`       // Twitter API consumer key
	ConsumerSecret *string `json:"consumerSecret,omitempty" yaml:"consumerSecret,omitempty"` // Twitter API consumer secret
	Enabled        bool    `json:"enabled" yaml:"enabled"`                                   // Enable Twitter OAuth
}

// NewConfigAuthTwitter creates a new immutable ConfigAuthTwitter value object.
// Value objects are immutable and validated upon creation.
func NewConfigAuthTwitter(callbackURL *string, consumerKey *string, consumerSecret *string, enabled bool) (ConfigAuthTwitter, error) {
	// Validate all fields

	return ConfigAuthTwitter{
		CallbackURL:    callbackURL,
		ConsumerKey:    consumerKey,
		ConsumerSecret: consumerSecret,
		Enabled:        enabled,
	}, nil
}

// MustConfigAuthTwitter creates a new ConfigAuthTwitter value object and panics on validation error.
// Use this only when you are certain the values are valid (e.g., in tests or with hardcoded values).
func MustConfigAuthTwitter(callbackURL *string, consumerKey *string, consumerSecret *string, enabled bool) ConfigAuthTwitter {
	v, err := NewConfigAuthTwitter(callbackURL, consumerKey, consumerSecret, enabled)
	if err != nil {
		panic(fmt.Sprintf("failed to create ConfigAuthTwitter: %v", err))
	}
	return v
}

// ZeroConfigAuthTwitter returns the zero value for ConfigAuthTwitter.
// This is useful for comparisons and as a default value.
func ZeroConfigAuthTwitter() ConfigAuthTwitter {
	return ConfigAuthTwitter{}
}

// GetCallbackURL returns the CallbackURL value.
// Value objects are immutable, so this returns a copy of the value.
func (v ConfigAuthTwitter) GetCallbackURL() *string {
	return v.CallbackURL
}

// GetConsumerKey returns the ConsumerKey value.
// Value objects are immutable, so this returns a copy of the value.
func (v ConfigAuthTwitter) GetConsumerKey() *string {
	return v.ConsumerKey
}

// GetConsumerSecret returns the ConsumerSecret value.
// Value objects are immutable, so this returns a copy of the value.
func (v ConfigAuthTwitter) GetConsumerSecret() *string {
	return v.ConsumerSecret
}

// GetEnabled returns the Enabled value.
// Value objects are immutable, so this returns a copy of the value.
func (v ConfigAuthTwitter) GetEnabled() bool {
	return v.Enabled
}

// IsZero returns true if this is the zero value.
func (v ConfigAuthTwitter) IsZero() bool {
	zero := ZeroConfigAuthTwitter()
	// Compare using string representation as a simple equality check
	return v.String() == zero.String()
}

// Validate checks if the value object is valid.
// This is automatically called during construction but can be used for explicit validation.
func (v ConfigAuthTwitter) Validate() error {
	return nil
}

// String returns a string representation of ConfigAuthTwitter
func (v ConfigAuthTwitter) String() string {
	var fields []string
	if v.CallbackURL != nil {
		fields = append(fields, fmt.Sprintf("CallbackURL: %v", *v.CallbackURL))
	} else {
		fields = append(fields, "CallbackURL: <nil>")
	}
	if v.ConsumerKey != nil {
		fields = append(fields, fmt.Sprintf("ConsumerKey: %v", *v.ConsumerKey))
	} else {
		fields = append(fields, "ConsumerKey: <nil>")
	}
	if v.ConsumerSecret != nil {
		fields = append(fields, fmt.Sprintf("ConsumerSecret: %v", *v.ConsumerSecret))
	} else {
		fields = append(fields, "ConsumerSecret: <nil>")
	}
	fields = append(fields, fmt.Sprintf("Enabled: %v", v.Enabled))
	return fmt.Sprintf("ConfigAuthTwitter{%s}", strings.Join(fields, ", "))
}
