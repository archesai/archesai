// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// ConfigAuthTwitter represents Twitter OAuth configuration
type ConfigAuthTwitter struct {
	CallbackURL    *string `json:"callbackURL,omitempty" yaml:"callbackURL,omitempty"`       // OAuth callback URL
	ConsumerKey    *string `json:"consumerKey,omitempty" yaml:"consumerKey,omitempty"`       // Twitter API consumer key
	ConsumerSecret *string `json:"consumerSecret,omitempty" yaml:"consumerSecret,omitempty"` // Twitter API consumer secret
	Enabled        bool    `json:"enabled" yaml:"enabled"`                                   // Enable Twitter OAuth
}

// NewConfigAuthTwitter creates a new ConfigAuthTwitter value object
func NewConfigAuthTwitter(callbackURL *string, consumerKey *string, consumerSecret *string, enabled bool) (ConfigAuthTwitter, error) {

	return ConfigAuthTwitter{
		CallbackURL:    callbackURL,
		ConsumerKey:    consumerKey,
		ConsumerSecret: consumerSecret,
		Enabled:        enabled,
	}, nil
}

// GetCallbackURL returns the CallbackURL
func (v ConfigAuthTwitter) GetCallbackURL() *string {
	return v.CallbackURL
}

// GetConsumerKey returns the ConsumerKey
func (v ConfigAuthTwitter) GetConsumerKey() *string {
	return v.ConsumerKey
}

// GetConsumerSecret returns the ConsumerSecret
func (v ConfigAuthTwitter) GetConsumerSecret() *string {
	return v.ConsumerSecret
}

// GetEnabled returns the Enabled
func (v ConfigAuthTwitter) GetEnabled() bool {
	return v.Enabled
}

// Equals checks if two ConfigAuthTwitter value objects are equal
// func (v ConfigAuthTwitter) Equals(other ConfigAuthTwitter) bool {
//	return v.CallbackURL == other.CallbackURL && v.ConsumerKey == other.ConsumerKey && v.ConsumerSecret == other.ConsumerSecret && v.Enabled == other.Enabled
// }

// String returns a string representation of ConfigAuthTwitter
func (v ConfigAuthTwitter) String() string {
	// Build string representation field by field to avoid recursion
	var fields []string
	fields = append(fields, fmt.Sprintf("CallbackURL: %v", v.CallbackURL))
	fields = append(fields, fmt.Sprintf("ConsumerKey: %v", v.ConsumerKey))
	fields = append(fields, fmt.Sprintf("ConsumerSecret: %v", v.ConsumerSecret))
	fields = append(fields, fmt.Sprintf("Enabled: %v", v.Enabled))
	return fmt.Sprintf("ConfigAuthTwitter{%s}", strings.Join(fields, ", "))
}
