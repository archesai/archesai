// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// ConfigTLS represents TLS configuration
type ConfigTLS struct {
	Enabled    bool    `json:"enabled" yaml:"enabled"`                           // Enable TLS/SSL
	Issuer     *string `json:"issuer,omitempty" yaml:"issuer,omitempty"`         // Cert-manager ClusterIssuer
	SecretName *string `json:"secretName,omitempty" yaml:"secretName,omitempty"` // Kubernetes secret name for TLS certificates
}

// NewConfigTLS creates a new ConfigTLS value object
func NewConfigTLS(enabled bool, issuer *string, secretName *string) (ConfigTLS, error) {

	return ConfigTLS{
		Enabled:    enabled,
		Issuer:     issuer,
		SecretName: secretName,
	}, nil
}

// GetEnabled returns the Enabled
func (v ConfigTLS) GetEnabled() bool {
	return v.Enabled
}

// GetIssuer returns the Issuer
func (v ConfigTLS) GetIssuer() *string {
	return v.Issuer
}

// GetSecretName returns the SecretName
func (v ConfigTLS) GetSecretName() *string {
	return v.SecretName
}

// Equals checks if two ConfigTLS value objects are equal
// func (v ConfigTLS) Equals(other ConfigTLS) bool {
//	return v.Enabled == other.Enabled && v.Issuer == other.Issuer && v.SecretName == other.SecretName
// }

// String returns a string representation of ConfigTLS
func (v ConfigTLS) String() string {
	// Build string representation field by field to avoid recursion
	var fields []string
	fields = append(fields, fmt.Sprintf("Enabled: %v", v.Enabled))
	fields = append(fields, fmt.Sprintf("Issuer: %v", v.Issuer))
	fields = append(fields, fmt.Sprintf("SecretName: %v", v.SecretName))
	return fmt.Sprintf("ConfigTLS{%s}", strings.Join(fields, ", "))
}
