// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// ConfigTLS represents TLS configuration
type ConfigTLS struct {
	Enabled    bool    `json:"enabled" yaml:"enabled"`                           // Enable TLS/SSL
	Issuer     *string `json:"issuer,omitempty" yaml:"issuer,omitempty"`         // Cert-manager ClusterIssuer
	SecretName *string `json:"secretName,omitempty" yaml:"secretName,omitempty"` // Kubernetes secret name for TLS certificates
}

// NewConfigTLS creates a new immutable ConfigTLS value object.
// Value objects are immutable and validated upon creation.
func NewConfigTLS(enabled bool, issuer *string, secretName *string) (ConfigTLS, error) {
	// Validate all fields

	return ConfigTLS{
		Enabled:    enabled,
		Issuer:     issuer,
		SecretName: secretName,
	}, nil
}

// MustConfigTLS creates a new ConfigTLS value object and panics on validation error.
// Use this only when you are certain the values are valid (e.g., in tests or with hardcoded values).
func MustConfigTLS(enabled bool, issuer *string, secretName *string) ConfigTLS {
	v, err := NewConfigTLS(enabled, issuer, secretName)
	if err != nil {
		panic(fmt.Sprintf("failed to create ConfigTLS: %v", err))
	}
	return v
}

// ZeroConfigTLS returns the zero value for ConfigTLS.
// This is useful for comparisons and as a default value.
func ZeroConfigTLS() ConfigTLS {
	return ConfigTLS{}
}

// GetEnabled returns the Enabled value.
// Value objects are immutable, so this returns a copy of the value.
func (v ConfigTLS) GetEnabled() bool {
	return v.Enabled
}

// GetIssuer returns the Issuer value.
// Value objects are immutable, so this returns a copy of the value.
func (v ConfigTLS) GetIssuer() *string {
	return v.Issuer
}

// GetSecretName returns the SecretName value.
// Value objects are immutable, so this returns a copy of the value.
func (v ConfigTLS) GetSecretName() *string {
	return v.SecretName
}

// IsZero returns true if this is the zero value.
func (v ConfigTLS) IsZero() bool {
	zero := ZeroConfigTLS()
	// Compare using string representation as a simple equality check
	return v.String() == zero.String()
}

// Validate checks if the value object is valid.
// This is automatically called during construction but can be used for explicit validation.
func (v ConfigTLS) Validate() error {
	return nil
}

// String returns a string representation of ConfigTLS
func (v ConfigTLS) String() string {
	var fields []string
	fields = append(fields, fmt.Sprintf("Enabled: %v", v.Enabled))
	if v.Issuer != nil {
		fields = append(fields, fmt.Sprintf("Issuer: %v", *v.Issuer))
	} else {
		fields = append(fields, "Issuer: <nil>")
	}
	if v.SecretName != nil {
		fields = append(fields, fmt.Sprintf("SecretName: %v", *v.SecretName))
	} else {
		fields = append(fields, "SecretName: <nil>")
	}
	return fmt.Sprintf("ConfigTLS{%s}", strings.Join(fields, ", "))
}
