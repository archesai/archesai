// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// ConfigLogging represents Logging configuration
type ConfigLogging struct {
	Level  string `json:"level" yaml:"level"`   // Minimum log level to output
	Pretty bool   `json:"pretty" yaml:"pretty"` // Enable pretty-printed logs for development
}

// NewConfigLogging creates a new ConfigLogging value object
func NewConfigLogging(level string, pretty bool) (ConfigLogging, error) {
	if level == "" {
		return ConfigLogging{}, fmt.Errorf("Level cannot be empty")
	}

	return ConfigLogging{
		Level:  level,
		Pretty: pretty,
	}, nil
}

// GetLevel returns the Level
func (v ConfigLogging) GetLevel() string {
	return v.Level
}

// GetPretty returns the Pretty
func (v ConfigLogging) GetPretty() bool {
	return v.Pretty
}

// Equals checks if two ConfigLogging value objects are equal
// func (v ConfigLogging) Equals(other ConfigLogging) bool {
//	return v.Level == other.Level && v.Pretty == other.Pretty
// }

// String returns a string representation of ConfigLogging
func (v ConfigLogging) String() string {
	// Build string representation field by field to avoid recursion
	var fields []string
	fields = append(fields, fmt.Sprintf("Level: %v", v.Level))
	fields = append(fields, fmt.Sprintf("Pretty: %v", v.Pretty))
	return fmt.Sprintf("ConfigLogging{%s}", strings.Join(fields, ", "))
}
