// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// ConfigIntelligence represents Intelligence configuration (LLMs, embeddings, scraper, speech, etc.)
type ConfigIntelligence struct {
	Embedding    *ConfigLLM          `json:"embedding,omitempty" yaml:"embedding,omitempty"`
	Llm          *ConfigLLM          `json:"llm,omitempty" yaml:"llm,omitempty"`
	Runpod       *ConfigRunPod       `json:"runpod,omitempty" yaml:"runpod,omitempty"`
	Scraper      *ConfigScraper      `json:"scraper,omitempty" yaml:"scraper,omitempty"`
	Speech       *ConfigSpeech       `json:"speech,omitempty" yaml:"speech,omitempty"`
	Unstructured *ConfigUnstructured `json:"unstructured,omitempty" yaml:"unstructured,omitempty"`
}

// NewConfigIntelligence creates a new ConfigIntelligence value object
func NewConfigIntelligence(embedding *ConfigLLM, llm *ConfigLLM, runpod *ConfigRunPod, scraper *ConfigScraper, speech *ConfigSpeech, unstructured *ConfigUnstructured) (ConfigIntelligence, error) {

	return ConfigIntelligence{
		Embedding:    embedding,
		Llm:          llm,
		Runpod:       runpod,
		Scraper:      scraper,
		Speech:       speech,
		Unstructured: unstructured,
	}, nil
}

// GetEmbedding returns the Embedding
func (v ConfigIntelligence) GetEmbedding() *ConfigLLM {
	return v.Embedding
}

// GetLlm returns the Llm
func (v ConfigIntelligence) GetLlm() *ConfigLLM {
	return v.Llm
}

// GetRunpod returns the Runpod
func (v ConfigIntelligence) GetRunpod() *ConfigRunPod {
	return v.Runpod
}

// GetScraper returns the Scraper
func (v ConfigIntelligence) GetScraper() *ConfigScraper {
	return v.Scraper
}

// GetSpeech returns the Speech
func (v ConfigIntelligence) GetSpeech() *ConfigSpeech {
	return v.Speech
}

// GetUnstructured returns the Unstructured
func (v ConfigIntelligence) GetUnstructured() *ConfigUnstructured {
	return v.Unstructured
}

// Equals checks if two ConfigIntelligence value objects are equal
// func (v ConfigIntelligence) Equals(other ConfigIntelligence) bool {
//	return v.Embedding == other.Embedding && v.Llm == other.Llm && v.Runpod == other.Runpod && v.Scraper == other.Scraper && v.Speech == other.Speech && v.Unstructured == other.Unstructured
// }

// String returns a string representation of ConfigIntelligence
func (v ConfigIntelligence) String() string {
	// Build string representation field by field to avoid recursion
	var fields []string
	fields = append(fields, fmt.Sprintf("Embedding: %v", v.Embedding))
	fields = append(fields, fmt.Sprintf("Llm: %v", v.Llm))
	fields = append(fields, fmt.Sprintf("Runpod: %v", v.Runpod))
	fields = append(fields, fmt.Sprintf("Scraper: %v", v.Scraper))
	fields = append(fields, fmt.Sprintf("Speech: %v", v.Speech))
	fields = append(fields, fmt.Sprintf("Unstructured: %v", v.Unstructured))
	return fmt.Sprintf("ConfigIntelligence{%s}", strings.Join(fields, ", "))
}
