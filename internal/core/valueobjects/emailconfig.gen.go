// Code generated by archesai-codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// EmailConfig represents Email configuration for sending emails
type EmailConfig struct {

	// Enabled Enable email functionality
	Enabled bool `json:"enabled" yaml:"enabled"`

	// Password Password for the email service
	Password *string `json:"password,omitempty" yaml:"password,omitempty"`

	// Service Email service provider (e.g., "gmail", "sendgrid", etc.)
	Service *string `json:"service,omitempty" yaml:"service,omitempty"`

	// User Username for the email service
	User *string `json:"user,omitempty" yaml:"user,omitempty"`
}

// NewEmailConfig creates a new immutable EmailConfig value object.
// Value objects are immutable and validated upon creation.
func NewEmailConfig(
	enabled bool,
	password *string,
	service *string,
	user *string,
) (EmailConfig, error) {
	// Validate required fields
	return EmailConfig{
		Enabled:  enabled,
		Password: password,
		Service:  service,
		User:     user,
	}, nil
}

// ZeroEmailConfig returns the zero value for EmailConfig.
// This is useful for comparisons and as a default value.
func ZeroEmailConfig() EmailConfig {
	return EmailConfig{}
}

// GetEnabled returns the Enabled value.
// Value objects are immutable, so this returns a copy of the value.
func (v EmailConfig) GetEnabled() bool {
	return v.Enabled
}

// GetPassword returns the Password value.
// Value objects are immutable, so this returns a copy of the value.
func (v EmailConfig) GetPassword() *string {
	return v.Password
}

// GetService returns the Service value.
// Value objects are immutable, so this returns a copy of the value.
func (v EmailConfig) GetService() *string {
	return v.Service
}

// GetUser returns the User value.
// Value objects are immutable, so this returns a copy of the value.
func (v EmailConfig) GetUser() *string {
	return v.User
}

// Validate validates the EmailConfig value object.
// Returns an error if any field fails validation.
func (v EmailConfig) Validate() error {
	return nil
}

// IsZero returns true if this is the zero value.
func (v EmailConfig) IsZero() bool {
	zero := ZeroEmailConfig()
	// Compare using string representation as a simple equality check
	return v.String() == zero.String()
}

// String returns a string representation of EmailConfig
func (v EmailConfig) String() string {
	var fields []string
	fields = append(fields, fmt.Sprintf("Enabled: %v", v.Enabled))
	fields = append(fields, fmt.Sprintf("Password: %v", v.Password))
	fields = append(fields, fmt.Sprintf("Service: %v", v.Service))
	fields = append(fields, fmt.Sprintf("User: %v", v.User))
	return fmt.Sprintf("EmailConfig{%s}", strings.Join(fields, ", "))
}
