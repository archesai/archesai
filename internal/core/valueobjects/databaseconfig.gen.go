// Code generated by archesai-codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// DatabaseConfigType represents the enumeration of valid values for Type
type DatabaseConfigType string

// Valid Type values
const (
	DatabaseConfigTypePostgresql DatabaseConfigType = "postgresql"
	DatabaseConfigTypeSqlite     DatabaseConfigType = "sqlite"
)

// String returns the string representation
func (e DatabaseConfigType) String() string {
	return string(e)
}

// IsValid checks if the value is valid
func (e DatabaseConfigType) IsValid() bool {
	switch e {
	case DatabaseConfigTypePostgresql:
		return true
	case DatabaseConfigTypeSqlite:
		return true
	default:
		return false
	}
}

// ParseDatabaseConfigType parses a string into the enum type
func ParseDatabaseConfigType(s string) (DatabaseConfigType, error) {
	v := DatabaseConfigType(s)
	if !v.IsValid() {
		return "", fmt.Errorf("invalid Type: %s", s)
	}
	return v, nil
}

// DatabaseConfig represents Database configuration for PostgreSQL
type DatabaseConfig struct {

	// ConnMaxIdleTime Maximum connection idle time (e.g., "5m")
	ConnMaxIdleTime *string `json:"connMaxIdleTime,omitempty" yaml:"connMaxIdleTime,omitempty"`

	// ConnMaxLifetime Maximum connection lifetime (e.g., "30m")
	ConnMaxLifetime *string `json:"connMaxLifetime,omitempty" yaml:"connMaxLifetime,omitempty"`

	// Enabled Enable database
	Enabled bool `json:"enabled" yaml:"enabled"`

	// HealthCheckPeriod Health check period for connections (PostgreSQL)
	HealthCheckPeriod *string      `json:"healthCheckPeriod,omitempty" yaml:"healthCheckPeriod,omitempty"`
	Image             *ImageConfig `json:"image,omitempty" yaml:"image,omitempty"`

	// Managed Use managed database deployment
	Managed bool `json:"managed" yaml:"managed"`

	// MaxConns Maximum number of connections in pool (PostgreSQL)
	MaxConns int32 `json:"maxConns" yaml:"maxConns"`

	// MinConns Minimum number of connections in pool (PostgreSQL)
	MinConns    int32              `json:"minConns" yaml:"minConns"`
	Persistence *PersistenceConfig `json:"persistence,omitempty" yaml:"persistence,omitempty"`
	Resources   *ResourceConfig    `json:"resources,omitempty" yaml:"resources,omitempty"`

	// RunMigrations Automatically run database migrations on startup
	RunMigrations bool `json:"runMigrations" yaml:"runMigrations"`

	// Type Database type (postgresql or sqlite)
	Type DatabaseConfigType `json:"type" yaml:"type"`

	// URL Database connection url/string
	URL string `json:"url" yaml:"url"`
}

// NewDatabaseConfig creates a new immutable DatabaseConfig value object.
// Value objects are immutable and validated upon creation.
func NewDatabaseConfig(
	connMaxIdleTime *string,
	connMaxLifetime *string,
	enabled bool,
	healthCheckPeriod *string,
	image *ImageConfig,
	managed bool,
	maxConns int32,
	minConns int32,
	persistence *PersistenceConfig,
	resources *ResourceConfig,
	runMigrations bool,
	type_ DatabaseConfigType,
	url string,
) (DatabaseConfig, error) {
	// Validate required fields
	if !type_.IsValid() {
		return DatabaseConfig{}, fmt.Errorf("invalid Type: %s", type_)
	}
	if url == "" {
		return DatabaseConfig{}, fmt.Errorf("URL cannot be empty")
	}
	return DatabaseConfig{
		ConnMaxIdleTime:   connMaxIdleTime,
		ConnMaxLifetime:   connMaxLifetime,
		Enabled:           enabled,
		HealthCheckPeriod: healthCheckPeriod,
		Image:             image,
		Managed:           managed,
		MaxConns:          maxConns,
		MinConns:          minConns,
		Persistence:       persistence,
		Resources:         resources,
		RunMigrations:     runMigrations,
		Type:              type_,
		URL:               url,
	}, nil
}

// ZeroDatabaseConfig returns the zero value for DatabaseConfig.
// This is useful for comparisons and as a default value.
func ZeroDatabaseConfig() DatabaseConfig {
	return DatabaseConfig{}
}

// GetConnMaxIdleTime returns the ConnMaxIdleTime value.
// Value objects are immutable, so this returns a copy of the value.
func (v DatabaseConfig) GetConnMaxIdleTime() *string {
	return v.ConnMaxIdleTime
}

// GetConnMaxLifetime returns the ConnMaxLifetime value.
// Value objects are immutable, so this returns a copy of the value.
func (v DatabaseConfig) GetConnMaxLifetime() *string {
	return v.ConnMaxLifetime
}

// GetEnabled returns the Enabled value.
// Value objects are immutable, so this returns a copy of the value.
func (v DatabaseConfig) GetEnabled() bool {
	return v.Enabled
}

// GetHealthCheckPeriod returns the HealthCheckPeriod value.
// Value objects are immutable, so this returns a copy of the value.
func (v DatabaseConfig) GetHealthCheckPeriod() *string {
	return v.HealthCheckPeriod
}

// GetImage returns the Image value.
// Value objects are immutable, so this returns a copy of the value.
func (v DatabaseConfig) GetImage() *ImageConfig {
	return v.Image
}

// GetManaged returns the Managed value.
// Value objects are immutable, so this returns a copy of the value.
func (v DatabaseConfig) GetManaged() bool {
	return v.Managed
}

// GetMaxConns returns the MaxConns value.
// Value objects are immutable, so this returns a copy of the value.
func (v DatabaseConfig) GetMaxConns() int32 {
	return v.MaxConns
}

// GetMinConns returns the MinConns value.
// Value objects are immutable, so this returns a copy of the value.
func (v DatabaseConfig) GetMinConns() int32 {
	return v.MinConns
}

// GetPersistence returns the Persistence value.
// Value objects are immutable, so this returns a copy of the value.
func (v DatabaseConfig) GetPersistence() *PersistenceConfig {
	return v.Persistence
}

// GetResources returns the Resources value.
// Value objects are immutable, so this returns a copy of the value.
func (v DatabaseConfig) GetResources() *ResourceConfig {
	return v.Resources
}

// GetRunMigrations returns the RunMigrations value.
// Value objects are immutable, so this returns a copy of the value.
func (v DatabaseConfig) GetRunMigrations() bool {
	return v.RunMigrations
}

// GetType returns the Type value.
// Value objects are immutable, so this returns a copy of the value.
func (v DatabaseConfig) GetType() DatabaseConfigType {
	return v.Type
}

// GetURL returns the URL value.
// Value objects are immutable, so this returns a copy of the value.
func (v DatabaseConfig) GetURL() string {
	return v.URL
}

// Validate validates the DatabaseConfig value object.
// Returns an error if any field fails validation.
func (v DatabaseConfig) Validate() error {
	if !v.Type.IsValid() {
		return fmt.Errorf("invalid Type: %s", v.Type)
	}
	return nil
}

// IsZero returns true if this is the zero value.
func (v DatabaseConfig) IsZero() bool {
	zero := ZeroDatabaseConfig()
	// Compare using string representation as a simple equality check
	return v.String() == zero.String()
}

// String returns a string representation of DatabaseConfig
func (v DatabaseConfig) String() string {
	var fields []string
	fields = append(fields, fmt.Sprintf("ConnMaxIdleTime: %v", v.ConnMaxIdleTime))
	fields = append(fields, fmt.Sprintf("ConnMaxLifetime: %v", v.ConnMaxLifetime))
	fields = append(fields, fmt.Sprintf("Enabled: %v", v.Enabled))
	fields = append(fields, fmt.Sprintf("HealthCheckPeriod: %v", v.HealthCheckPeriod))
	fields = append(fields, fmt.Sprintf("Image: %v", v.Image))
	fields = append(fields, fmt.Sprintf("Managed: %v", v.Managed))
	fields = append(fields, fmt.Sprintf("MaxConns: %v", v.MaxConns))
	fields = append(fields, fmt.Sprintf("MinConns: %v", v.MinConns))
	fields = append(fields, fmt.Sprintf("Persistence: %v", v.Persistence))
	fields = append(fields, fmt.Sprintf("Resources: %v", v.Resources))
	fields = append(fields, fmt.Sprintf("RunMigrations: %v", v.RunMigrations))
	fields = append(fields, fmt.Sprintf("Type: %v", v.Type))
	fields = append(fields, fmt.Sprintf("URL: %v", v.URL))
	return fmt.Sprintf("DatabaseConfig{%s}", strings.Join(fields, ", "))
}
