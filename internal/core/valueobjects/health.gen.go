// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// Health represents Health check response
type Health struct {
	Services struct {
		Database string `json:"database" yaml:"database"`
		Email    string `json:"email" yaml:"email"`
		Redis    string `json:"redis" yaml:"redis"`
	} `json:"services" yaml:"services"`
	Timestamp string  `json:"timestamp" yaml:"timestamp"`
	Uptime    float64 `json:"uptime" yaml:"uptime"`
}

// NewHealth creates a new Health value object
func NewHealth(services struct {
	Database string `json:"database" yaml:"database"`
	Email    string `json:"email" yaml:"email"`
	Redis    string `json:"redis" yaml:"redis"`
}, timestamp string, uptime float64) (Health, error) {
	if timestamp == "" {
		return Health{}, fmt.Errorf("Timestamp cannot be empty")
	}

	return Health{
		Services:  services,
		Timestamp: timestamp,
		Uptime:    uptime,
	}, nil
}

// GetServices returns the Services
func (v Health) GetServices() struct {
	Database string `json:"database" yaml:"database"`
	Email    string `json:"email" yaml:"email"`
	Redis    string `json:"redis" yaml:"redis"`
} {
	return v.Services
}

// GetTimestamp returns the Timestamp
func (v Health) GetTimestamp() string {
	return v.Timestamp
}

// GetUptime returns the Uptime
func (v Health) GetUptime() float64 {
	return v.Uptime
}

// Equals checks if two Health value objects are equal
// func (v Health) Equals(other Health) bool {
//	return v.Services == other.Services && v.Timestamp == other.Timestamp && v.Uptime == other.Uptime
// }

// String returns a string representation of Health
func (v Health) String() string {
	// Build string representation field by field to avoid recursion
	var fields []string
	fields = append(fields, fmt.Sprintf("Services: %v", v.Services))
	fields = append(fields, fmt.Sprintf("Timestamp: %v", v.Timestamp))
	fields = append(fields, fmt.Sprintf("Uptime: %v", v.Uptime))
	return fmt.Sprintf("Health{%s}", strings.Join(fields, ", "))
}
