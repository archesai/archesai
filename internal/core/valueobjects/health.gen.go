// Code generated by archesai-codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
	"time"
)

// HealthServices represents a nested type for Health
type HealthServices struct {
	Database string `json:"database" yaml:"database"`
	Email    string `json:"email" yaml:"email"`
	Redis    string `json:"redis" yaml:"redis"`
}

// Health represents Health check response
type Health struct {
	Services  HealthServices `json:"services" yaml:"services"`
	Timestamp time.Time      `json:"timestamp" yaml:"timestamp"`
	Uptime    int64          `json:"uptime" yaml:"uptime"` // System uptime in seconds
}

// NewHealth creates a new immutable Health value object.
// Value objects are immutable and validated upon creation.
func NewHealth(services HealthServices, timestamp time.Time, uptime int64) (Health, error) {
	// Validate required fields
	return Health{
		Services:  services,
		Timestamp: timestamp,
		Uptime:    uptime,
	}, nil
}

// ZeroHealth returns the zero value for Health.
// This is useful for comparisons and as a default value.
func ZeroHealth() Health {
	return Health{}
}

// GetServices returns the Services value.
// Value objects are immutable, so this returns a copy of the value.
func (v Health) GetServices() HealthServices {
	return v.Services
}

// GetTimestamp returns the Timestamp value.
// Value objects are immutable, so this returns a copy of the value.
func (v Health) GetTimestamp() time.Time {
	return v.Timestamp
}

// GetUptime returns the Uptime value.
// Value objects are immutable, so this returns a copy of the value.
func (v Health) GetUptime() int64 {
	return v.Uptime
}

// Validate validates the Health value object.
// Returns an error if any field fails validation.
func (v Health) Validate() error {
	return nil
}

// IsZero returns true if this is the zero value.
func (v Health) IsZero() bool {
	zero := ZeroHealth()
	// Compare using string representation as a simple equality check
	return v.String() == zero.String()
}

// String returns a string representation of Health
func (v Health) String() string {
	var fields []string
	fields = append(fields, fmt.Sprintf("Services: %v", v.Services))
	fields = append(fields, fmt.Sprintf("Timestamp: %v", v.Timestamp))
	fields = append(fields, fmt.Sprintf("Uptime: %v", v.Uptime))
	return fmt.Sprintf("Health{%s}", strings.Join(fields, ", "))
}
