// Code generated by archesai-codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// ImageConfigPullPolicy represents the enumeration of valid values for PullPolicy
type ImageConfigPullPolicy string

// Valid PullPolicy values
const (
	ImageConfigPullPolicyAlways       ImageConfigPullPolicy = "Always"
	ImageConfigPullPolicyIfNotPresent ImageConfigPullPolicy = "IfNotPresent"
	ImageConfigPullPolicyNever        ImageConfigPullPolicy = "Never"
)

// String returns the string representation
func (e ImageConfigPullPolicy) String() string {
	return string(e)
}

// IsValid checks if the value is valid
func (e ImageConfigPullPolicy) IsValid() bool {
	switch e {
	case ImageConfigPullPolicyAlways:
		return true
	case ImageConfigPullPolicyIfNotPresent:
		return true
	case ImageConfigPullPolicyNever:
		return true
	default:
		return false
	}
}

// ParseImageConfigPullPolicy parses a string into the enum type
func ParseImageConfigPullPolicy(s string) (ImageConfigPullPolicy, error) {
	v := ImageConfigPullPolicy(s)
	if !v.IsValid() {
		return "", fmt.Errorf("invalid PullPolicy: %s", s)
	}
	return v, nil
}

// ImageConfig represents Container image configuration
type ImageConfig struct {

	// PullPolicy Kubernetes image pull policy
	PullPolicy ImageConfigPullPolicy `json:"pullPolicy" yaml:"pullPolicy"`

	// Repository Container image repository
	Repository *string `json:"repository,omitempty" yaml:"repository,omitempty"`

	// Tag Container image tag
	Tag string `json:"tag" yaml:"tag"`
}

// NewImageConfig creates a new immutable ImageConfig value object.
// Value objects are immutable and validated upon creation.
func NewImageConfig(
	pullPolicy ImageConfigPullPolicy,
	repository *string,
	tag string,
) (ImageConfig, error) {
	// Validate required fields
	if !pullPolicy.IsValid() {
		return ImageConfig{}, fmt.Errorf("invalid PullPolicy: %s", pullPolicy)
	}
	return ImageConfig{
		PullPolicy: pullPolicy,
		Repository: repository,
		Tag:        tag,
	}, nil
}

// ZeroImageConfig returns the zero value for ImageConfig.
// This is useful for comparisons and as a default value.
func ZeroImageConfig() ImageConfig {
	return ImageConfig{}
}

// GetPullPolicy returns the PullPolicy value.
// Value objects are immutable, so this returns a copy of the value.
func (v ImageConfig) GetPullPolicy() ImageConfigPullPolicy {
	return v.PullPolicy
}

// GetRepository returns the Repository value.
// Value objects are immutable, so this returns a copy of the value.
func (v ImageConfig) GetRepository() *string {
	return v.Repository
}

// GetTag returns the Tag value.
// Value objects are immutable, so this returns a copy of the value.
func (v ImageConfig) GetTag() string {
	return v.Tag
}

// Validate validates the ImageConfig value object.
// Returns an error if any field fails validation.
func (v ImageConfig) Validate() error {
	if !v.PullPolicy.IsValid() {
		return fmt.Errorf("invalid PullPolicy: %s", v.PullPolicy)
	}
	return nil
}

// IsZero returns true if this is the zero value.
func (v ImageConfig) IsZero() bool {
	zero := ZeroImageConfig()
	// Compare using string representation as a simple equality check
	return v.String() == zero.String()
}

// String returns a string representation of ImageConfig
func (v ImageConfig) String() string {
	var fields []string
	fields = append(fields, fmt.Sprintf("PullPolicy: %v", v.PullPolicy))
	fields = append(fields, fmt.Sprintf("Repository: %v", v.Repository))
	fields = append(fields, fmt.Sprintf("Tag: %v", v.Tag))
	return fmt.Sprintf("ImageConfig{%s}", strings.Join(fields, ", "))
}
