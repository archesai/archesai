// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// ConfigKubernetes represents Kubernetes-specific deployment configuration
type ConfigKubernetes struct {
	Infrastructure *ConfigInfrastructure `json:"infrastructure,omitempty" yaml:"infrastructure,omitempty"`
	Ingress        *ConfigIngress        `json:"ingress,omitempty" yaml:"ingress,omitempty"`
	Monitoring     *ConfigMonitoring     `json:"monitoring,omitempty" yaml:"monitoring,omitempty"`
}

// NewConfigKubernetes creates a new ConfigKubernetes value object
func NewConfigKubernetes(infrastructure *ConfigInfrastructure, ingress *ConfigIngress, monitoring *ConfigMonitoring) (ConfigKubernetes, error) {

	return ConfigKubernetes{
		Infrastructure: infrastructure,
		Ingress:        ingress,
		Monitoring:     monitoring,
	}, nil
}

// GetInfrastructure returns the Infrastructure
func (v ConfigKubernetes) GetInfrastructure() *ConfigInfrastructure {
	return v.Infrastructure
}

// GetIngress returns the Ingress
func (v ConfigKubernetes) GetIngress() *ConfigIngress {
	return v.Ingress
}

// GetMonitoring returns the Monitoring
func (v ConfigKubernetes) GetMonitoring() *ConfigMonitoring {
	return v.Monitoring
}

// Equals checks if two ConfigKubernetes value objects are equal
// func (v ConfigKubernetes) Equals(other ConfigKubernetes) bool {
//	return v.Infrastructure == other.Infrastructure && v.Ingress == other.Ingress && v.Monitoring == other.Monitoring
// }

// String returns a string representation of ConfigKubernetes
func (v ConfigKubernetes) String() string {
	// Build string representation field by field to avoid recursion
	var fields []string
	fields = append(fields, fmt.Sprintf("Infrastructure: %v", v.Infrastructure))
	fields = append(fields, fmt.Sprintf("Ingress: %v", v.Ingress))
	fields = append(fields, fmt.Sprintf("Monitoring: %v", v.Monitoring))
	return fmt.Sprintf("ConfigKubernetes{%s}", strings.Join(fields, ", "))
}
