// Code generated by archesai-codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// IngressConfig represents Ingress configuration
type IngressConfig struct {

	// Domain Primary domain name for ingress routing
	Domain *string `json:"domain,omitempty" yaml:"domain,omitempty"`

	// Enabled Enable ingress
	Enabled bool       `json:"enabled" yaml:"enabled"`
	Tls     *TLSConfig `json:"tls,omitempty" yaml:"tls,omitempty"`
}

// NewIngressConfig creates a new immutable IngressConfig value object.
// Value objects are immutable and validated upon creation.
func NewIngressConfig(
	domain *string,
	enabled bool,
	tls *TLSConfig,
) (IngressConfig, error) {
	// Validate required fields
	return IngressConfig{
		Domain:  domain,
		Enabled: enabled,
		Tls:     tls,
	}, nil
}

// ZeroIngressConfig returns the zero value for IngressConfig.
// This is useful for comparisons and as a default value.
func ZeroIngressConfig() IngressConfig {
	return IngressConfig{}
}

// GetDomain returns the Domain value.
// Value objects are immutable, so this returns a copy of the value.
func (v IngressConfig) GetDomain() *string {
	return v.Domain
}

// GetEnabled returns the Enabled value.
// Value objects are immutable, so this returns a copy of the value.
func (v IngressConfig) GetEnabled() bool {
	return v.Enabled
}

// GetTls returns the Tls value.
// Value objects are immutable, so this returns a copy of the value.
func (v IngressConfig) GetTls() *TLSConfig {
	return v.Tls
}

// Validate validates the IngressConfig value object.
// Returns an error if any field fails validation.
func (v IngressConfig) Validate() error {
	return nil
}

// IsZero returns true if this is the zero value.
func (v IngressConfig) IsZero() bool {
	zero := ZeroIngressConfig()
	// Compare using string representation as a simple equality check
	return v.String() == zero.String()
}

// String returns a string representation of IngressConfig
func (v IngressConfig) String() string {
	var fields []string
	fields = append(fields, fmt.Sprintf("Domain: %v", v.Domain))
	fields = append(fields, fmt.Sprintf("Enabled: %v", v.Enabled))
	fields = append(fields, fmt.Sprintf("Tls: %v", v.Tls))
	return fmt.Sprintf("IngressConfig{%s}", strings.Join(fields, ", "))
}
