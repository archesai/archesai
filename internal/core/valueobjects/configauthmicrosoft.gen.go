// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import "fmt"

// ConfigAuthMicrosoft represents Microsoft/Azure AD OAuth configuration
type ConfigAuthMicrosoft struct {
	ClientId     *string  `json:"clientId,omitempty" yaml:"clientId,omitempty"`         // Azure AD Application (client) ID
	ClientSecret *string  `json:"clientSecret,omitempty" yaml:"clientSecret,omitempty"` // Azure AD client secret
	Enabled      bool     `json:"enabled" yaml:"enabled"`                               // Enable Microsoft OAuth
	RedirectUrl  *string  `json:"redirectUrl,omitempty" yaml:"redirectUrl,omitempty"`   // OAuth callback URL
	Scopes       []string `json:"scopes,omitempty" yaml:"scopes,omitempty"`             // OAuth scopes to request
	Tenant       *string  `json:"tenant,omitempty" yaml:"tenant,omitempty"`             // Azure AD tenant ID (use 'common' for multi-tenant)
}

// NewConfigAuthMicrosoft creates a new ConfigAuthMicrosoft value object
func NewConfigAuthMicrosoft(clientID *string, clientSecret *string, enabled bool, redirectURL *string, scopes []string, tenant *string) (ConfigAuthMicrosoft, error) {

	return ConfigAuthMicrosoft{
		ClientId:     clientID,
		ClientSecret: clientSecret,
		Enabled:      enabled,
		RedirectUrl:  redirectURL,
		Scopes:       scopes,
		Tenant:       tenant,
	}, nil
}

// GetClientId returns the ClientId
func (v ConfigAuthMicrosoft) GetClientId() *string {
	return v.ClientId
}

// GetClientSecret returns the ClientSecret
func (v ConfigAuthMicrosoft) GetClientSecret() *string {
	return v.ClientSecret
}

// GetEnabled returns the Enabled
func (v ConfigAuthMicrosoft) GetEnabled() bool {
	return v.Enabled
}

// GetRedirectUrl returns the RedirectUrl
func (v ConfigAuthMicrosoft) GetRedirectUrl() *string {
	return v.RedirectUrl
}

// GetScopes returns the Scopes
func (v ConfigAuthMicrosoft) GetScopes() []string {
	return v.Scopes
}

// GetTenant returns the Tenant
func (v ConfigAuthMicrosoft) GetTenant() *string {
	return v.Tenant
}

// Equals checks if two ConfigAuthMicrosoft value objects are equal
// func (v ConfigAuthMicrosoft) Equals(other ConfigAuthMicrosoft) bool {
//	return v.ClientId == other.ClientId && v.ClientSecret == other.ClientSecret && v.Enabled == other.Enabled && v.RedirectUrl == other.RedirectUrl && v.Scopes == other.Scopes && v.Tenant == other.Tenant
// }

// String returns a string representation of ConfigAuthMicrosoft
func (v ConfigAuthMicrosoft) String() string {
	return fmt.Sprintf("%+v", v)
}
