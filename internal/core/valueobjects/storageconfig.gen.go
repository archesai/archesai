// Code generated by archesai-codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// StorageConfig represents Object storage configuration for MinIO or S3-compatible services
type StorageConfig struct {
	Accesskey   string             `json:"accesskey" yaml:"accesskey"` // MinIO/S3 access key ID
	Bucket      string             `json:"bucket" yaml:"bucket"`       // S3 bucket name
	Enabled     bool               `json:"enabled" yaml:"enabled"`     // Enable object storage
	Endpoint    string             `json:"endpoint" yaml:"endpoint"`   // MinIO server endpoint URL
	Image       *ImageConfig       `json:"image,omitempty" yaml:"image,omitempty"`
	Managed     *bool              `json:"managed,omitempty" yaml:"managed,omitempty"` // Use managed storage deployment
	Persistence *PersistenceConfig `json:"persistence,omitempty" yaml:"persistence,omitempty"`
	Resources   *ResourceConfig    `json:"resources,omitempty" yaml:"resources,omitempty"`
	Secretkey   string             `json:"secretkey" yaml:"secretkey"` // MinIO/S3 secret access key
}

// NewStorageConfig creates a new immutable StorageConfig value object.
// Value objects are immutable and validated upon creation.
func NewStorageConfig(accesskey string, bucket string, enabled bool, endpoint string, image *ImageConfig, managed *bool, persistence *PersistenceConfig, resources *ResourceConfig, secretkey string) (StorageConfig, error) {
	// Validate required fields
	return StorageConfig{
		Accesskey:   accesskey,
		Bucket:      bucket,
		Enabled:     enabled,
		Endpoint:    endpoint,
		Image:       image,
		Managed:     managed,
		Persistence: persistence,
		Resources:   resources,
		Secretkey:   secretkey,
	}, nil
}

// ZeroStorageConfig returns the zero value for StorageConfig.
// This is useful for comparisons and as a default value.
func ZeroStorageConfig() StorageConfig {
	return StorageConfig{}
}

// GetAccesskey returns the Accesskey value.
// Value objects are immutable, so this returns a copy of the value.
func (v StorageConfig) GetAccesskey() string {
	return v.Accesskey
}

// GetBucket returns the Bucket value.
// Value objects are immutable, so this returns a copy of the value.
func (v StorageConfig) GetBucket() string {
	return v.Bucket
}

// GetEnabled returns the Enabled value.
// Value objects are immutable, so this returns a copy of the value.
func (v StorageConfig) GetEnabled() bool {
	return v.Enabled
}

// GetEndpoint returns the Endpoint value.
// Value objects are immutable, so this returns a copy of the value.
func (v StorageConfig) GetEndpoint() string {
	return v.Endpoint
}

// GetImage returns the Image value.
// Value objects are immutable, so this returns a copy of the value.
func (v StorageConfig) GetImage() *ImageConfig {
	return v.Image
}

// GetManaged returns the Managed value.
// Value objects are immutable, so this returns a copy of the value.
func (v StorageConfig) GetManaged() *bool {
	return v.Managed
}

// GetPersistence returns the Persistence value.
// Value objects are immutable, so this returns a copy of the value.
func (v StorageConfig) GetPersistence() *PersistenceConfig {
	return v.Persistence
}

// GetResources returns the Resources value.
// Value objects are immutable, so this returns a copy of the value.
func (v StorageConfig) GetResources() *ResourceConfig {
	return v.Resources
}

// GetSecretkey returns the Secretkey value.
// Value objects are immutable, so this returns a copy of the value.
func (v StorageConfig) GetSecretkey() string {
	return v.Secretkey
}

// Validate validates the StorageConfig value object.
// Returns an error if any field fails validation.
func (v StorageConfig) Validate() error {
	return nil
}

// IsZero returns true if this is the zero value.
func (v StorageConfig) IsZero() bool {
	zero := ZeroStorageConfig()
	// Compare using string representation as a simple equality check
	return v.String() == zero.String()
}

// String returns a string representation of StorageConfig
func (v StorageConfig) String() string {
	var fields []string
	fields = append(fields, fmt.Sprintf("Accesskey: %v", v.Accesskey))
	fields = append(fields, fmt.Sprintf("Bucket: %v", v.Bucket))
	fields = append(fields, fmt.Sprintf("Enabled: %v", v.Enabled))
	fields = append(fields, fmt.Sprintf("Endpoint: %v", v.Endpoint))
	fields = append(fields, fmt.Sprintf("Image: %v", v.Image))
	fields = append(fields, fmt.Sprintf("Managed: %v", v.Managed))
	fields = append(fields, fmt.Sprintf("Persistence: %v", v.Persistence))
	fields = append(fields, fmt.Sprintf("Resources: %v", v.Resources))
	fields = append(fields, fmt.Sprintf("Secretkey: %v", v.Secretkey))
	return fmt.Sprintf("StorageConfig{%s}", strings.Join(fields, ", "))
}
