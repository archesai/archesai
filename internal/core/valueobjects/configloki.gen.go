// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// ConfigLoki represents Loki log aggregation service configuration
type ConfigLoki struct {
	Enabled   bool            `json:"enabled" yaml:"enabled"`               // Enable Loki
	Host      *string         `json:"host,omitempty" yaml:"host,omitempty"` // Loki host URL
	Image     *ConfigImage    `json:"image,omitempty" yaml:"image,omitempty"`
	Managed   *bool           `json:"managed,omitempty" yaml:"managed,omitempty"` // Use managed Loki deployment
	Resources *ConfigResource `json:"resources,omitempty" yaml:"resources,omitempty"`
}

// NewConfigLoki creates a new ConfigLoki value object
func NewConfigLoki(enabled bool, host *string, image *ConfigImage, managed *bool, resources *ConfigResource) (ConfigLoki, error) {

	return ConfigLoki{
		Enabled:   enabled,
		Host:      host,
		Image:     image,
		Managed:   managed,
		Resources: resources,
	}, nil
}

// GetEnabled returns the Enabled
func (v ConfigLoki) GetEnabled() bool {
	return v.Enabled
}

// GetHost returns the Host
func (v ConfigLoki) GetHost() *string {
	return v.Host
}

// GetImage returns the Image
func (v ConfigLoki) GetImage() *ConfigImage {
	return v.Image
}

// GetManaged returns the Managed
func (v ConfigLoki) GetManaged() *bool {
	return v.Managed
}

// GetResources returns the Resources
func (v ConfigLoki) GetResources() *ConfigResource {
	return v.Resources
}

// Equals checks if two ConfigLoki value objects are equal
// func (v ConfigLoki) Equals(other ConfigLoki) bool {
//	return v.Enabled == other.Enabled && v.Host == other.Host && v.Image == other.Image && v.Managed == other.Managed && v.Resources == other.Resources
// }

// String returns a string representation of ConfigLoki
func (v ConfigLoki) String() string {
	// Build string representation field by field to avoid recursion
	var fields []string
	fields = append(fields, fmt.Sprintf("Enabled: %v", v.Enabled))
	fields = append(fields, fmt.Sprintf("Host: %v", v.Host))
	fields = append(fields, fmt.Sprintf("Image: %v", v.Image))
	fields = append(fields, fmt.Sprintf("Managed: %v", v.Managed))
	fields = append(fields, fmt.Sprintf("Resources: %v", v.Resources))
	return fmt.Sprintf("ConfigLoki{%s}", strings.Join(fields, ", "))
}
