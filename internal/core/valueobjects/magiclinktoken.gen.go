// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"time"

	"github.com/google/uuid"
)

// MagicLinkToken represents Schema for MagicLinkToken entity
type MagicLinkToken struct {
	Code           *string      `json:"code,omitempty" yaml:"code,omitempty"`                     // Optional 6-digit OTP code
	CreatedAt      time.Time    `json:"createdAt" yaml:"createdAt"`                               // When the token was created
	DeliveryMethod *string      `json:"deliveryMethod,omitempty" yaml:"deliveryMethod,omitempty"` // How the magic link was delivered
	ExpiresAt      time.Time    `json:"expiresAt" yaml:"expiresAt"`                               // When the token expires
	ID             uuid.UUID    `json:"id" yaml:"id"`                                             // Unique identifier for the magic link token
	Identifier     string       `json:"identifier" yaml:"identifier"`                             // Email or username for authentication
	IpAddress      *string      `json:"ipAddress,omitempty" yaml:"ipAddress,omitempty"`           // IP address of the request
	Token          *string      `json:"token,omitempty" yaml:"token,omitempty"`                   // The raw magic link token
	TokenHash      string       `json:"tokenHash" yaml:"tokenHash"`                               // SHA256 hash of the magic link token
	UsedAt         *interface{} `json:"usedAt,omitempty" yaml:"usedAt,omitempty"`                 // When the token was used (null if unused)
	UserAgent      *string      `json:"userAgent,omitempty" yaml:"userAgent,omitempty"`           // User agent of the request
	UserID         *uuid.UUID   `json:"userID,omitempty" yaml:"userID,omitempty"`                 // User ID if token is for existing user
}

// NewMagicLinkToken creates a new MagicLinkToken value object
func NewMagicLinkToken(code *string, createdAt time.Time, deliveryMethod *string, expiresAt time.Time, id uuid.UUID, identifier string, ipAddress *string, token *string, tokenHash string, usedAt *interface{}, userAgent *string, userID *uuid.UUID) (MagicLinkToken, error) {
	if identifier == "" {
		return MagicLinkToken{}, fmt.Errorf("Identifier cannot be empty")
	}
	if tokenHash == "" {
		return MagicLinkToken{}, fmt.Errorf("TokenHash cannot be empty")
	}

	return MagicLinkToken{
		Code:           code,
		CreatedAt:      createdAt,
		DeliveryMethod: deliveryMethod,
		ExpiresAt:      expiresAt,
		ID:             id,
		Identifier:     identifier,
		IpAddress:      ipAddress,
		Token:          token,
		TokenHash:      tokenHash,
		UsedAt:         usedAt,
		UserAgent:      userAgent,
		UserID:         userID,
	}, nil
}

// GetCode returns the Code
func (v MagicLinkToken) GetCode() *string {
	return v.Code
}

// GetCreatedAt returns the CreatedAt
func (v MagicLinkToken) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetDeliveryMethod returns the DeliveryMethod
func (v MagicLinkToken) GetDeliveryMethod() *string {
	return v.DeliveryMethod
}

// GetExpiresAt returns the ExpiresAt
func (v MagicLinkToken) GetExpiresAt() time.Time {
	return v.ExpiresAt
}

// GetID returns the ID
func (v MagicLinkToken) GetID() uuid.UUID {
	return v.ID
}

// GetIdentifier returns the Identifier
func (v MagicLinkToken) GetIdentifier() string {
	return v.Identifier
}

// GetIpAddress returns the IpAddress
func (v MagicLinkToken) GetIpAddress() *string {
	return v.IpAddress
}

// GetToken returns the Token
func (v MagicLinkToken) GetToken() *string {
	return v.Token
}

// GetTokenHash returns the TokenHash
func (v MagicLinkToken) GetTokenHash() string {
	return v.TokenHash
}

// GetUsedAt returns the UsedAt
func (v MagicLinkToken) GetUsedAt() *interface{} {
	return v.UsedAt
}

// GetUserAgent returns the UserAgent
func (v MagicLinkToken) GetUserAgent() *string {
	return v.UserAgent
}

// GetUserID returns the UserID
func (v MagicLinkToken) GetUserID() *uuid.UUID {
	return v.UserID
}

// Equals checks if two MagicLinkToken value objects are equal
// func (v MagicLinkToken) Equals(other MagicLinkToken) bool {
//	return v.Code == other.Code && v.CreatedAt == other.CreatedAt && v.DeliveryMethod == other.DeliveryMethod && v.ExpiresAt == other.ExpiresAt && v.ID == other.ID && v.Identifier == other.Identifier && v.IpAddress == other.IpAddress && v.Token == other.Token && v.TokenHash == other.TokenHash && v.UsedAt == other.UsedAt && v.UserAgent == other.UserAgent && v.UserID == other.UserID
// }

// String returns a string representation of MagicLinkToken
func (v MagicLinkToken) String() string {
	return fmt.Sprintf("%+v", v)
}
