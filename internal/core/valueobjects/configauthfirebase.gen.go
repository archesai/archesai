// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// ConfigAuthFirebase represents Firebase authentication configuration
type ConfigAuthFirebase struct {
	ClientEmail *string `json:"clientEmail,omitempty" yaml:"clientEmail,omitempty"` // Firebase service account client email address
	Enabled     bool    `json:"enabled" yaml:"enabled"`                             // Enable Firebase authentication
	PrivateKey  *string `json:"privateKey,omitempty" yaml:"privateKey,omitempty"`   // Firebase service account private key (PEM format)
	ProjectID   *string `json:"projectID,omitempty" yaml:"projectID,omitempty"`     // Firebase project ID for authentication
}

// NewConfigAuthFirebase creates a new ConfigAuthFirebase value object
func NewConfigAuthFirebase(clientEmail *string, enabled bool, privateKey *string, projectID *string) (ConfigAuthFirebase, error) {

	return ConfigAuthFirebase{
		ClientEmail: clientEmail,
		Enabled:     enabled,
		PrivateKey:  privateKey,
		ProjectID:   projectID,
	}, nil
}

// GetClientEmail returns the ClientEmail
func (v ConfigAuthFirebase) GetClientEmail() *string {
	return v.ClientEmail
}

// GetEnabled returns the Enabled
func (v ConfigAuthFirebase) GetEnabled() bool {
	return v.Enabled
}

// GetPrivateKey returns the PrivateKey
func (v ConfigAuthFirebase) GetPrivateKey() *string {
	return v.PrivateKey
}

// GetProjectID returns the ProjectID
func (v ConfigAuthFirebase) GetProjectID() *string {
	return v.ProjectID
}

// Equals checks if two ConfigAuthFirebase value objects are equal
// func (v ConfigAuthFirebase) Equals(other ConfigAuthFirebase) bool {
//	return v.ClientEmail == other.ClientEmail && v.Enabled == other.Enabled && v.PrivateKey == other.PrivateKey && v.ProjectID == other.ProjectID
// }

// String returns a string representation of ConfigAuthFirebase
func (v ConfigAuthFirebase) String() string {
	// Build string representation field by field to avoid recursion
	var fields []string
	fields = append(fields, fmt.Sprintf("ClientEmail: %v", v.ClientEmail))
	fields = append(fields, fmt.Sprintf("Enabled: %v", v.Enabled))
	fields = append(fields, fmt.Sprintf("PrivateKey: %v", v.PrivateKey))
	fields = append(fields, fmt.Sprintf("ProjectID: %v", v.ProjectID))
	return fmt.Sprintf("ConfigAuthFirebase{%s}", strings.Join(fields, ", "))
}
