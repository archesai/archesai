// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// ConfigSpeech represents Speech recognition and TTS services
type ConfigSpeech struct {
	Enabled bool    `json:"enabled" yaml:"enabled"`                 // Enable speech services
	Token   *string `json:"token,omitempty" yaml:"token,omitempty"` // Speech-to-text service API token
}

// NewConfigSpeech creates a new ConfigSpeech value object
func NewConfigSpeech(enabled bool, token *string) (ConfigSpeech, error) {

	return ConfigSpeech{
		Enabled: enabled,
		Token:   token,
	}, nil
}

// GetEnabled returns the Enabled
func (v ConfigSpeech) GetEnabled() bool {
	return v.Enabled
}

// GetToken returns the Token
func (v ConfigSpeech) GetToken() *string {
	return v.Token
}

// Equals checks if two ConfigSpeech value objects are equal
// func (v ConfigSpeech) Equals(other ConfigSpeech) bool {
//	return v.Enabled == other.Enabled && v.Token == other.Token
// }

// String returns a string representation of ConfigSpeech
func (v ConfigSpeech) String() string {
	// Build string representation field by field to avoid recursion
	var fields []string
	fields = append(fields, fmt.Sprintf("Enabled: %v", v.Enabled))
	fields = append(fields, fmt.Sprintf("Token: %v", v.Token))
	return fmt.Sprintf("ConfigSpeech{%s}", strings.Join(fields, ", "))
}
