// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// ConfigImage represents Container image configuration
type ConfigImage struct {
	PullPolicy string  `json:"pullPolicy" yaml:"pullPolicy"`                     // Kubernetes image pull policy
	Repository *string `json:"repository,omitempty" yaml:"repository,omitempty"` // Container image repository
	Tag        string  `json:"tag" yaml:"tag"`                                   // Container image tag
}

// NewConfigImage creates a new ConfigImage value object
func NewConfigImage(pullPolicy string, repository *string, tag string) (ConfigImage, error) {
	if pullPolicy == "" {
		return ConfigImage{}, fmt.Errorf("PullPolicy cannot be empty")
	}
	if tag == "" {
		return ConfigImage{}, fmt.Errorf("Tag cannot be empty")
	}

	return ConfigImage{
		PullPolicy: pullPolicy,
		Repository: repository,
		Tag:        tag,
	}, nil
}

// GetPullPolicy returns the PullPolicy
func (v ConfigImage) GetPullPolicy() string {
	return v.PullPolicy
}

// GetRepository returns the Repository
func (v ConfigImage) GetRepository() *string {
	return v.Repository
}

// GetTag returns the Tag
func (v ConfigImage) GetTag() string {
	return v.Tag
}

// Equals checks if two ConfigImage value objects are equal
// func (v ConfigImage) Equals(other ConfigImage) bool {
//	return v.PullPolicy == other.PullPolicy && v.Repository == other.Repository && v.Tag == other.Tag
// }

// String returns a string representation of ConfigImage
func (v ConfigImage) String() string {
	// Build string representation field by field to avoid recursion
	var fields []string
	fields = append(fields, fmt.Sprintf("PullPolicy: %v", v.PullPolicy))
	fields = append(fields, fmt.Sprintf("Repository: %v", v.Repository))
	fields = append(fields, fmt.Sprintf("Tag: %v", v.Tag))
	return fmt.Sprintf("ConfigImage{%s}", strings.Join(fields, ", "))
}
