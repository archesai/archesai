// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"time"

	"github.com/google/uuid"
)

// Session represents Schema for Session entity
type Session struct {
	AuthMethod     *string    `json:"authMethod,omitempty" yaml:"authMethod,omitempty"`         // The authentication method used (magic_link, oauth_google, oauth_github, etc.)
	AuthProvider   *string    `json:"authProvider,omitempty" yaml:"authProvider,omitempty"`     // The authentication provider (google, github, microsoft, local)
	CreatedAt      time.Time  `json:"createdAt" yaml:"createdAt"`                               // The date and time when the resource was created
	ExpiresAt      time.Time  `json:"expiresAt" yaml:"expiresAt"`                               // The expiration date of the session
	ID             uuid.UUID  `json:"id" yaml:"id"`                                             // Unique identifier for the resource
	IpAddress      string     `json:"ipAddress" yaml:"ipAddress"`                               // The IP address of the session
	OrganizationID *uuid.UUID `json:"organizationID,omitempty" yaml:"organizationID,omitempty"` // The organization ID for this session (nullable for users without org)
	Token          string     `json:"token" yaml:"token"`                                       // The session token
	UpdatedAt      time.Time  `json:"updatedAt" yaml:"updatedAt"`                               // The date and time when the resource was last updated
	UserAgent      string     `json:"userAgent" yaml:"userAgent"`                               // The user agent of the session
	UserID         uuid.UUID  `json:"userID" yaml:"userID"`                                     // The user who owns this session
}

// NewSession creates a new Session value object
func NewSession(authMethod *string, authProvider *string, createdAt time.Time, expiresAt time.Time, id uuid.UUID, ipAddress string, organizationID *uuid.UUID, token string, updatedAt time.Time, userAgent string, userID uuid.UUID) (Session, error) {
	if ipAddress == "" {
		return Session{}, fmt.Errorf("IpAddress cannot be empty")
	}
	if token == "" {
		return Session{}, fmt.Errorf("Token cannot be empty")
	}
	if userAgent == "" {
		return Session{}, fmt.Errorf("UserAgent cannot be empty")
	}

	return Session{
		AuthMethod:     authMethod,
		AuthProvider:   authProvider,
		CreatedAt:      createdAt,
		ExpiresAt:      expiresAt,
		ID:             id,
		IpAddress:      ipAddress,
		OrganizationID: organizationID,
		Token:          token,
		UpdatedAt:      updatedAt,
		UserAgent:      userAgent,
		UserID:         userID,
	}, nil
}

// GetAuthMethod returns the AuthMethod
func (v Session) GetAuthMethod() *string {
	return v.AuthMethod
}

// GetAuthProvider returns the AuthProvider
func (v Session) GetAuthProvider() *string {
	return v.AuthProvider
}

// GetCreatedAt returns the CreatedAt
func (v Session) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetExpiresAt returns the ExpiresAt
func (v Session) GetExpiresAt() time.Time {
	return v.ExpiresAt
}

// GetID returns the ID
func (v Session) GetID() uuid.UUID {
	return v.ID
}

// GetIpAddress returns the IpAddress
func (v Session) GetIpAddress() string {
	return v.IpAddress
}

// GetOrganizationID returns the OrganizationID
func (v Session) GetOrganizationID() *uuid.UUID {
	return v.OrganizationID
}

// GetToken returns the Token
func (v Session) GetToken() string {
	return v.Token
}

// GetUpdatedAt returns the UpdatedAt
func (v Session) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetUserAgent returns the UserAgent
func (v Session) GetUserAgent() string {
	return v.UserAgent
}

// GetUserID returns the UserID
func (v Session) GetUserID() uuid.UUID {
	return v.UserID
}

// Equals checks if two Session value objects are equal
func (v Session) Equals(other Session) bool {
	return v.AuthMethod == other.AuthMethod && v.AuthProvider == other.AuthProvider && v.CreatedAt == other.CreatedAt && v.ExpiresAt == other.ExpiresAt && v.ID == other.ID && v.IpAddress == other.IpAddress && v.OrganizationID == other.OrganizationID && v.Token == other.Token && v.UpdatedAt == other.UpdatedAt && v.UserAgent == other.UserAgent && v.UserID == other.UserID
}

// String returns a string representation of Session
func (v Session) String() string {
	return fmt.Sprintf("%+v", v)
}
