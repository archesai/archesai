// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import "fmt"

// ConfigAuthLocal represents Local username/password authentication
type ConfigAuthLocal struct {
	AccessTokenTTL  string `json:"accessTokenTtl" yaml:"accessTokenTtl"`   // Access token time-to-live duration (e.g., "15m", "1h")
	Enabled         bool   `json:"enabled" yaml:"enabled"`                 // Enable local authentication
	JWTSecret       string `json:"jwtSecret" yaml:"jwtSecret"`             // Secret key for JWT token signing
	RefreshTokenTTL string `json:"refreshTokenTtl" yaml:"refreshTokenTtl"` // Refresh token time-to-live duration (e.g., "7d", "168h")
}

// NewConfigAuthLocal creates a new ConfigAuthLocal value object
func NewConfigAuthLocal(accessTokenTtl string, enabled bool, jwtsecret string, refreshTokenTtl string) (ConfigAuthLocal, error) {
	if accessTokenTtl == "" {
		return ConfigAuthLocal{}, fmt.Errorf("AccessTokenTTL cannot be empty")
	}
	if jwtsecret == "" {
		return ConfigAuthLocal{}, fmt.Errorf("JWTSecret cannot be empty")
	}
	if refreshTokenTtl == "" {
		return ConfigAuthLocal{}, fmt.Errorf("RefreshTokenTTL cannot be empty")
	}

	return ConfigAuthLocal{
		AccessTokenTTL:  accessTokenTtl,
		Enabled:         enabled,
		JWTSecret:       jwtsecret,
		RefreshTokenTTL: refreshTokenTtl,
	}, nil
}

// GetAccessTokenTTL returns the AccessTokenTTL
func (v ConfigAuthLocal) GetAccessTokenTTL() string {
	return v.AccessTokenTTL
}

// GetEnabled returns the Enabled
func (v ConfigAuthLocal) GetEnabled() bool {
	return v.Enabled
}

// GetJWTSecret returns the JWTSecret
func (v ConfigAuthLocal) GetJWTSecret() string {
	return v.JWTSecret
}

// GetRefreshTokenTTL returns the RefreshTokenTTL
func (v ConfigAuthLocal) GetRefreshTokenTTL() string {
	return v.RefreshTokenTTL
}

// Equals checks if two ConfigAuthLocal value objects are equal
// func (v ConfigAuthLocal) Equals(other ConfigAuthLocal) bool {
//	return v.AccessTokenTTL == other.AccessTokenTTL && v.Enabled == other.Enabled && v.JWTSecret == other.JWTSecret && v.RefreshTokenTTL == other.RefreshTokenTTL
// }

// String returns a string representation of ConfigAuthLocal
func (v ConfigAuthLocal) String() string {
	return fmt.Sprintf("%+v", v)
}
