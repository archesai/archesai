// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// ConfigAuthLocal represents Local username/password authentication
type ConfigAuthLocal struct {
	AccessTokenTTL  string `json:"accessTokenTtl" yaml:"accessTokenTtl"`   // Access token time-to-live duration (e.g., "15m", "1h")
	Enabled         bool   `json:"enabled" yaml:"enabled"`                 // Enable local authentication
	JWTSecret       string `json:"jwtSecret" yaml:"jwtSecret"`             // Secret key for JWT token signing
	RefreshTokenTTL string `json:"refreshTokenTtl" yaml:"refreshTokenTtl"` // Refresh token time-to-live duration (e.g., "7d", "168h")
}

// NewConfigAuthLocal creates a new immutable ConfigAuthLocal value object.
// Value objects are immutable and validated upon creation.
func NewConfigAuthLocal(accessTokenTtl string, enabled bool, jwtsecret string, refreshTokenTtl string) (ConfigAuthLocal, error) {
	// Validate all fields
	if accessTokenTtl == "" {
		return ConfigAuthLocal{}, fmt.Errorf("AccessTokenTTL cannot be empty")
	}
	if jwtsecret == "" {
		return ConfigAuthLocal{}, fmt.Errorf("JWTSecret cannot be empty")
	}
	if refreshTokenTtl == "" {
		return ConfigAuthLocal{}, fmt.Errorf("RefreshTokenTTL cannot be empty")
	}

	return ConfigAuthLocal{
		AccessTokenTTL:  accessTokenTtl,
		Enabled:         enabled,
		JWTSecret:       jwtsecret,
		RefreshTokenTTL: refreshTokenTtl,
	}, nil
}

// MustConfigAuthLocal creates a new ConfigAuthLocal value object and panics on validation error.
// Use this only when you are certain the values are valid (e.g., in tests or with hardcoded values).
func MustConfigAuthLocal(accessTokenTtl string, enabled bool, jwtsecret string, refreshTokenTtl string) ConfigAuthLocal {
	v, err := NewConfigAuthLocal(accessTokenTtl, enabled, jwtsecret, refreshTokenTtl)
	if err != nil {
		panic(fmt.Sprintf("failed to create ConfigAuthLocal: %v", err))
	}
	return v
}

// ZeroConfigAuthLocal returns the zero value for ConfigAuthLocal.
// This is useful for comparisons and as a default value.
func ZeroConfigAuthLocal() ConfigAuthLocal {
	return ConfigAuthLocal{}
}

// GetAccessTokenTTL returns the AccessTokenTTL value.
// Value objects are immutable, so this returns a copy of the value.
func (v ConfigAuthLocal) GetAccessTokenTTL() string {
	return v.AccessTokenTTL
}

// GetEnabled returns the Enabled value.
// Value objects are immutable, so this returns a copy of the value.
func (v ConfigAuthLocal) GetEnabled() bool {
	return v.Enabled
}

// GetJWTSecret returns the JWTSecret value.
// Value objects are immutable, so this returns a copy of the value.
func (v ConfigAuthLocal) GetJWTSecret() string {
	return v.JWTSecret
}

// GetRefreshTokenTTL returns the RefreshTokenTTL value.
// Value objects are immutable, so this returns a copy of the value.
func (v ConfigAuthLocal) GetRefreshTokenTTL() string {
	return v.RefreshTokenTTL
}

// IsZero returns true if this is the zero value.
func (v ConfigAuthLocal) IsZero() bool {
	zero := ZeroConfigAuthLocal()
	// Compare using string representation as a simple equality check
	return v.String() == zero.String()
}

// Validate checks if the value object is valid.
// This is automatically called during construction but can be used for explicit validation.
func (v ConfigAuthLocal) Validate() error {
	if v.AccessTokenTTL == "" {
		return fmt.Errorf("AccessTokenTTL cannot be empty")
	}
	if v.JWTSecret == "" {
		return fmt.Errorf("JWTSecret cannot be empty")
	}
	if v.RefreshTokenTTL == "" {
		return fmt.Errorf("RefreshTokenTTL cannot be empty")
	}
	return nil
}

// String returns a string representation of ConfigAuthLocal
func (v ConfigAuthLocal) String() string {
	var fields []string
	fields = append(fields, fmt.Sprintf("AccessTokenTTL: %v", v.AccessTokenTTL))
	fields = append(fields, fmt.Sprintf("Enabled: %v", v.Enabled))
	fields = append(fields, fmt.Sprintf("JWTSecret: %v", v.JWTSecret))
	fields = append(fields, fmt.Sprintf("RefreshTokenTTL: %v", v.RefreshTokenTTL))
	return fmt.Sprintf("ConfigAuthLocal{%s}", strings.Join(fields, ", "))
}
