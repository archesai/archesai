// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// ConfigRedis represents Redis configuration
type ConfigRedis struct {
	Auth        string             `json:"auth" yaml:"auth"`                 // Redis authentication password
	Ca          *string            `json:"ca,omitempty" yaml:"ca,omitempty"` // Certificate Authority for TLS (optional)
	Enabled     bool               `json:"enabled" yaml:"enabled"`           // Enable Redis
	Host        string             `json:"host" yaml:"host"`                 // Redis hostname or IP
	Image       *ConfigImage       `json:"image,omitempty" yaml:"image,omitempty"`
	Managed     *bool              `json:"managed,omitempty" yaml:"managed,omitempty"` // Use managed Redis deployment
	Persistence *ConfigPersistence `json:"persistence,omitempty" yaml:"persistence,omitempty"`
	Port        float64            `json:"port" yaml:"port"` // Redis port number
	Resources   *ConfigResource    `json:"resources,omitempty" yaml:"resources,omitempty"`
}

// NewConfigRedis creates a new immutable ConfigRedis value object.
// Value objects are immutable and validated upon creation.
func NewConfigRedis(auth string, ca *string, enabled bool, host string, image *ConfigImage, managed *bool, persistence *ConfigPersistence, port float64, resources *ConfigResource) (ConfigRedis, error) {
	// Validate all fields
	if auth == "" {
		return ConfigRedis{}, fmt.Errorf("Auth cannot be empty")
	}
	if host == "" {
		return ConfigRedis{}, fmt.Errorf("Host cannot be empty")
	}
	if port < 0 {
		return ConfigRedis{}, fmt.Errorf("Port cannot be negative")
	}

	return ConfigRedis{
		Auth:        auth,
		Ca:          ca,
		Enabled:     enabled,
		Host:        host,
		Image:       image,
		Managed:     managed,
		Persistence: persistence,
		Port:        port,
		Resources:   resources,
	}, nil
}

// MustConfigRedis creates a new ConfigRedis value object and panics on validation error.
// Use this only when you are certain the values are valid (e.g., in tests or with hardcoded values).
func MustConfigRedis(auth string, ca *string, enabled bool, host string, image *ConfigImage, managed *bool, persistence *ConfigPersistence, port float64, resources *ConfigResource) ConfigRedis {
	v, err := NewConfigRedis(auth, ca, enabled, host, image, managed, persistence, port, resources)
	if err != nil {
		panic(fmt.Sprintf("failed to create ConfigRedis: %v", err))
	}
	return v
}

// ZeroConfigRedis returns the zero value for ConfigRedis.
// This is useful for comparisons and as a default value.
func ZeroConfigRedis() ConfigRedis {
	return ConfigRedis{}
}

// GetAuth returns the Auth value.
// Value objects are immutable, so this returns a copy of the value.
func (v ConfigRedis) GetAuth() string {
	return v.Auth
}

// GetCa returns the Ca value.
// Value objects are immutable, so this returns a copy of the value.
func (v ConfigRedis) GetCa() *string {
	return v.Ca
}

// GetEnabled returns the Enabled value.
// Value objects are immutable, so this returns a copy of the value.
func (v ConfigRedis) GetEnabled() bool {
	return v.Enabled
}

// GetHost returns the Host value.
// Value objects are immutable, so this returns a copy of the value.
func (v ConfigRedis) GetHost() string {
	return v.Host
}

// GetImage returns the Image value.
// Value objects are immutable, so this returns a copy of the value.
func (v ConfigRedis) GetImage() *ConfigImage {
	return v.Image
}

// GetManaged returns the Managed value.
// Value objects are immutable, so this returns a copy of the value.
func (v ConfigRedis) GetManaged() *bool {
	return v.Managed
}

// GetPersistence returns the Persistence value.
// Value objects are immutable, so this returns a copy of the value.
func (v ConfigRedis) GetPersistence() *ConfigPersistence {
	return v.Persistence
}

// GetPort returns the Port value.
// Value objects are immutable, so this returns a copy of the value.
func (v ConfigRedis) GetPort() float64 {
	return v.Port
}

// GetResources returns the Resources value.
// Value objects are immutable, so this returns a copy of the value.
func (v ConfigRedis) GetResources() *ConfigResource {
	return v.Resources
}

// IsZero returns true if this is the zero value.
func (v ConfigRedis) IsZero() bool {
	zero := ZeroConfigRedis()
	// Compare using string representation as a simple equality check
	return v.String() == zero.String()
}

// Validate checks if the value object is valid.
// This is automatically called during construction but can be used for explicit validation.
func (v ConfigRedis) Validate() error {
	if v.Auth == "" {
		return fmt.Errorf("Auth cannot be empty")
	}
	if v.Host == "" {
		return fmt.Errorf("Host cannot be empty")
	}
	return nil
}

// String returns a string representation of ConfigRedis
func (v ConfigRedis) String() string {
	var fields []string
	fields = append(fields, fmt.Sprintf("Auth: %v", v.Auth))
	if v.Ca != nil {
		fields = append(fields, fmt.Sprintf("Ca: %v", *v.Ca))
	} else {
		fields = append(fields, "Ca: <nil>")
	}
	fields = append(fields, fmt.Sprintf("Enabled: %v", v.Enabled))
	fields = append(fields, fmt.Sprintf("Host: %v", v.Host))
	if v.Image != nil {
		fields = append(fields, fmt.Sprintf("Image: %v", *v.Image))
	} else {
		fields = append(fields, "Image: <nil>")
	}
	if v.Managed != nil {
		fields = append(fields, fmt.Sprintf("Managed: %v", *v.Managed))
	} else {
		fields = append(fields, "Managed: <nil>")
	}
	if v.Persistence != nil {
		fields = append(fields, fmt.Sprintf("Persistence: %v", *v.Persistence))
	} else {
		fields = append(fields, "Persistence: <nil>")
	}
	fields = append(fields, fmt.Sprintf("Port: %v", v.Port))
	if v.Resources != nil {
		fields = append(fields, fmt.Sprintf("Resources: %v", *v.Resources))
	} else {
		fields = append(fields, "Resources: <nil>")
	}
	return fmt.Sprintf("ConfigRedis{%s}", strings.Join(fields, ", "))
}
