// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// ConfigRedis represents Redis configuration
type ConfigRedis struct {
	Auth        string             `json:"auth" yaml:"auth"`                 // Redis authentication password
	Ca          *string            `json:"ca,omitempty" yaml:"ca,omitempty"` // Certificate Authority for TLS (optional)
	Enabled     bool               `json:"enabled" yaml:"enabled"`           // Enable Redis
	Host        string             `json:"host" yaml:"host"`                 // Redis hostname or IP
	Image       *ConfigImage       `json:"image,omitempty" yaml:"image,omitempty"`
	Managed     *bool              `json:"managed,omitempty" yaml:"managed,omitempty"` // Use managed Redis deployment
	Persistence *ConfigPersistence `json:"persistence,omitempty" yaml:"persistence,omitempty"`
	Port        float64            `json:"port" yaml:"port"` // Redis port number
	Resources   *ConfigResource    `json:"resources,omitempty" yaml:"resources,omitempty"`
}

// NewConfigRedis creates a new ConfigRedis value object
func NewConfigRedis(auth string, ca *string, enabled bool, host string, image *ConfigImage, managed *bool, persistence *ConfigPersistence, port float64, resources *ConfigResource) (ConfigRedis, error) {
	if auth == "" {
		return ConfigRedis{}, fmt.Errorf("Auth cannot be empty")
	}
	if host == "" {
		return ConfigRedis{}, fmt.Errorf("Host cannot be empty")
	}

	return ConfigRedis{
		Auth:        auth,
		Ca:          ca,
		Enabled:     enabled,
		Host:        host,
		Image:       image,
		Managed:     managed,
		Persistence: persistence,
		Port:        port,
		Resources:   resources,
	}, nil
}

// GetAuth returns the Auth
func (v ConfigRedis) GetAuth() string {
	return v.Auth
}

// GetCa returns the Ca
func (v ConfigRedis) GetCa() *string {
	return v.Ca
}

// GetEnabled returns the Enabled
func (v ConfigRedis) GetEnabled() bool {
	return v.Enabled
}

// GetHost returns the Host
func (v ConfigRedis) GetHost() string {
	return v.Host
}

// GetImage returns the Image
func (v ConfigRedis) GetImage() *ConfigImage {
	return v.Image
}

// GetManaged returns the Managed
func (v ConfigRedis) GetManaged() *bool {
	return v.Managed
}

// GetPersistence returns the Persistence
func (v ConfigRedis) GetPersistence() *ConfigPersistence {
	return v.Persistence
}

// GetPort returns the Port
func (v ConfigRedis) GetPort() float64 {
	return v.Port
}

// GetResources returns the Resources
func (v ConfigRedis) GetResources() *ConfigResource {
	return v.Resources
}

// Equals checks if two ConfigRedis value objects are equal
// func (v ConfigRedis) Equals(other ConfigRedis) bool {
//	return v.Auth == other.Auth && v.Ca == other.Ca && v.Enabled == other.Enabled && v.Host == other.Host && v.Image == other.Image && v.Managed == other.Managed && v.Persistence == other.Persistence && v.Port == other.Port && v.Resources == other.Resources
// }

// String returns a string representation of ConfigRedis
func (v ConfigRedis) String() string {
	// Build string representation field by field to avoid recursion
	var fields []string
	fields = append(fields, fmt.Sprintf("Auth: %v", v.Auth))
	fields = append(fields, fmt.Sprintf("Ca: %v", v.Ca))
	fields = append(fields, fmt.Sprintf("Enabled: %v", v.Enabled))
	fields = append(fields, fmt.Sprintf("Host: %v", v.Host))
	fields = append(fields, fmt.Sprintf("Image: %v", v.Image))
	fields = append(fields, fmt.Sprintf("Managed: %v", v.Managed))
	fields = append(fields, fmt.Sprintf("Persistence: %v", v.Persistence))
	fields = append(fields, fmt.Sprintf("Port: %v", v.Port))
	fields = append(fields, fmt.Sprintf("Resources: %v", v.Resources))
	return fmt.Sprintf("ConfigRedis{%s}", strings.Join(fields, ", "))
}
