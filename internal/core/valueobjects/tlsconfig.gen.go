// Code generated by archesai-codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// TLSConfig represents TLS configuration
type TLSConfig struct {
	Enabled    bool    `json:"enabled" yaml:"enabled"`                           // Enable TLS/SSL
	Issuer     *string `json:"issuer,omitempty" yaml:"issuer,omitempty"`         // Cert-manager ClusterIssuer
	SecretName *string `json:"secretName,omitempty" yaml:"secretName,omitempty"` // Kubernetes secret name for TLS certificates
}

// NewTLSConfig creates a new immutable TLSConfig value object.
// Value objects are immutable and validated upon creation.
func NewTLSConfig(enabled bool, issuer *string, secretName *string) (TLSConfig, error) {
	// Validate required fields
	return TLSConfig{
		Enabled:    enabled,
		Issuer:     issuer,
		SecretName: secretName,
	}, nil
}

// ZeroTLSConfig returns the zero value for TLSConfig.
// This is useful for comparisons and as a default value.
func ZeroTLSConfig() TLSConfig {
	return TLSConfig{}
}

// GetEnabled returns the Enabled value.
// Value objects are immutable, so this returns a copy of the value.
func (v TLSConfig) GetEnabled() bool {
	return v.Enabled
}

// GetIssuer returns the Issuer value.
// Value objects are immutable, so this returns a copy of the value.
func (v TLSConfig) GetIssuer() *string {
	return v.Issuer
}

// GetSecretName returns the SecretName value.
// Value objects are immutable, so this returns a copy of the value.
func (v TLSConfig) GetSecretName() *string {
	return v.SecretName
}

// Validate validates the TLSConfig value object.
// Returns an error if any field fails validation.
func (v TLSConfig) Validate() error {
	return nil
}

// IsZero returns true if this is the zero value.
func (v TLSConfig) IsZero() bool {
	zero := ZeroTLSConfig()
	// Compare using string representation as a simple equality check
	return v.String() == zero.String()
}

// String returns a string representation of TLSConfig
func (v TLSConfig) String() string {
	var fields []string
	fields = append(fields, fmt.Sprintf("Enabled: %v", v.Enabled))
	fields = append(fields, fmt.Sprintf("Issuer: %v", v.Issuer))
	fields = append(fields, fmt.Sprintf("SecretName: %v", v.SecretName))
	return fmt.Sprintf("TLSConfig{%s}", strings.Join(fields, ", "))
}
