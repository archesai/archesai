// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// ConfigAPI represents Configuration schema for the API server
type ConfigAPI struct {
	Cors        string          `json:"cors" yaml:"cors"` // A comma-separated list of allowed origins for CORS requests
	Docs        bool            `json:"docs" yaml:"docs"` // Enable or disable API documentation
	Email       *ConfigEmail    `json:"email,omitempty" yaml:"email,omitempty"`
	Environment string          `json:"environment" yaml:"environment"` // Deployment environment (development, staging, production)
	Host        string          `json:"host" yaml:"host"`               // The host address on which the API server will listen
	Image       *ConfigImage    `json:"image,omitempty" yaml:"image,omitempty"`
	Port        float64         `json:"port" yaml:"port"` // The port on which the API server will listen
	Resources   *ConfigResource `json:"resources,omitempty" yaml:"resources,omitempty"`
	Validate    bool            `json:"validate" yaml:"validate"` // Enable or disable request validation
}

// NewConfigAPI creates a new ConfigAPI value object
func NewConfigAPI(cors string, docs bool, email *ConfigEmail, environment string, host string, image *ConfigImage, port float64, resources *ConfigResource, validate bool) (ConfigAPI, error) {
	if cors == "" {
		return ConfigAPI{}, fmt.Errorf("Cors cannot be empty")
	}
	if environment == "" {
		return ConfigAPI{}, fmt.Errorf("Environment cannot be empty")
	}
	if host == "" {
		return ConfigAPI{}, fmt.Errorf("Host cannot be empty")
	}

	return ConfigAPI{
		Cors:        cors,
		Docs:        docs,
		Email:       email,
		Environment: environment,
		Host:        host,
		Image:       image,
		Port:        port,
		Resources:   resources,
		Validate:    validate,
	}, nil
}

// GetCors returns the Cors
func (v ConfigAPI) GetCors() string {
	return v.Cors
}

// GetDocs returns the Docs
func (v ConfigAPI) GetDocs() bool {
	return v.Docs
}

// GetEmail returns the Email
func (v ConfigAPI) GetEmail() *ConfigEmail {
	return v.Email
}

// GetEnvironment returns the Environment
func (v ConfigAPI) GetEnvironment() string {
	return v.Environment
}

// GetHost returns the Host
func (v ConfigAPI) GetHost() string {
	return v.Host
}

// GetImage returns the Image
func (v ConfigAPI) GetImage() *ConfigImage {
	return v.Image
}

// GetPort returns the Port
func (v ConfigAPI) GetPort() float64 {
	return v.Port
}

// GetResources returns the Resources
func (v ConfigAPI) GetResources() *ConfigResource {
	return v.Resources
}

// GetValidate returns the Validate
func (v ConfigAPI) GetValidate() bool {
	return v.Validate
}

// Equals checks if two ConfigAPI value objects are equal
// func (v ConfigAPI) Equals(other ConfigAPI) bool {
//	return v.Cors == other.Cors && v.Docs == other.Docs && v.Email == other.Email && v.Environment == other.Environment && v.Host == other.Host && v.Image == other.Image && v.Port == other.Port && v.Resources == other.Resources && v.Validate == other.Validate
// }

// String returns a string representation of ConfigAPI
func (v ConfigAPI) String() string {
	// Build string representation field by field to avoid recursion
	var fields []string
	fields = append(fields, fmt.Sprintf("Cors: %v", v.Cors))
	fields = append(fields, fmt.Sprintf("Docs: %v", v.Docs))
	fields = append(fields, fmt.Sprintf("Email: %v", v.Email))
	fields = append(fields, fmt.Sprintf("Environment: %v", v.Environment))
	fields = append(fields, fmt.Sprintf("Host: %v", v.Host))
	fields = append(fields, fmt.Sprintf("Image: %v", v.Image))
	fields = append(fields, fmt.Sprintf("Port: %v", v.Port))
	fields = append(fields, fmt.Sprintf("Resources: %v", v.Resources))
	fields = append(fields, fmt.Sprintf("Validate: %v", v.Validate))
	return fmt.Sprintf("ConfigAPI{%s}", strings.Join(fields, ", "))
}
