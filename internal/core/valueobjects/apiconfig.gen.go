// Code generated by archesai-codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// APIConfigEnvironment represents the enumeration of valid values for Environment
type APIConfigEnvironment string

// Valid Environment values
const (
	APIConfigEnvironmentDevelopment APIConfigEnvironment = "development"
	APIConfigEnvironmentStaging     APIConfigEnvironment = "staging"
	APIConfigEnvironmentProduction  APIConfigEnvironment = "production"
)

// String returns the string representation
func (e APIConfigEnvironment) String() string {
	return string(e)
}

// IsValid checks if the value is valid
func (e APIConfigEnvironment) IsValid() bool {
	switch e {
	case APIConfigEnvironmentDevelopment:
		return true
	case APIConfigEnvironmentStaging:
		return true
	case APIConfigEnvironmentProduction:
		return true
	default:
		return false
	}
}

// ParseAPIConfigEnvironment parses a string into the enum type
func ParseAPIConfigEnvironment(s string) (APIConfigEnvironment, error) {
	v := APIConfigEnvironment(s)
	if !v.IsValid() {
		return "", fmt.Errorf("invalid Environment: %s", s)
	}
	return v, nil
}

// APIConfig represents Configuration schema for the API server
type APIConfig struct {
	Cors        string               `json:"cors" yaml:"cors"` // A comma-separated list of allowed origins for CORS requests
	Docs        bool                 `json:"docs" yaml:"docs"` // Enable or disable API documentation
	Email       *EmailConfig         `json:"email,omitempty" yaml:"email,omitempty"`
	Environment APIConfigEnvironment `json:"environment" yaml:"environment"` // Deployment environment (development, staging, production)
	Host        string               `json:"host" yaml:"host"`               // The host address on which the API server will listen
	Image       *ImageConfig         `json:"image,omitempty" yaml:"image,omitempty"`
	Port        int32                `json:"port" yaml:"port"` // The port on which the API server will listen
	Resources   *ResourceConfig      `json:"resources,omitempty" yaml:"resources,omitempty"`
	URL         *string              `json:"url,omitempty" yaml:"url,omitempty"` // The public URL for the API
	Validation  bool                 `json:"validation" yaml:"validation"`       // Enable or disable request validation
}

// NewAPIConfig creates a new immutable APIConfig value object.
// Value objects are immutable and validated upon creation.
func NewAPIConfig(cors string, docs bool, email *EmailConfig, environment APIConfigEnvironment, host string, image *ImageConfig, port int32, resources *ResourceConfig, url *string, validation bool) (APIConfig, error) {
	// Validate required fields
	if !environment.IsValid() {
		return APIConfig{}, fmt.Errorf("invalid Environment: %s", environment)
	}
	return APIConfig{
		Cors:        cors,
		Docs:        docs,
		Email:       email,
		Environment: environment,
		Host:        host,
		Image:       image,
		Port:        port,
		Resources:   resources,
		URL:         url,
		Validation:  validation,
	}, nil
}

// ZeroAPIConfig returns the zero value for APIConfig.
// This is useful for comparisons and as a default value.
func ZeroAPIConfig() APIConfig {
	return APIConfig{}
}

// GetCors returns the Cors value.
// Value objects are immutable, so this returns a copy of the value.
func (v APIConfig) GetCors() string {
	return v.Cors
}

// GetDocs returns the Docs value.
// Value objects are immutable, so this returns a copy of the value.
func (v APIConfig) GetDocs() bool {
	return v.Docs
}

// GetEmail returns the Email value.
// Value objects are immutable, so this returns a copy of the value.
func (v APIConfig) GetEmail() *EmailConfig {
	return v.Email
}

// GetEnvironment returns the Environment value.
// Value objects are immutable, so this returns a copy of the value.
func (v APIConfig) GetEnvironment() APIConfigEnvironment {
	return v.Environment
}

// GetHost returns the Host value.
// Value objects are immutable, so this returns a copy of the value.
func (v APIConfig) GetHost() string {
	return v.Host
}

// GetImage returns the Image value.
// Value objects are immutable, so this returns a copy of the value.
func (v APIConfig) GetImage() *ImageConfig {
	return v.Image
}

// GetPort returns the Port value.
// Value objects are immutable, so this returns a copy of the value.
func (v APIConfig) GetPort() int32 {
	return v.Port
}

// GetResources returns the Resources value.
// Value objects are immutable, so this returns a copy of the value.
func (v APIConfig) GetResources() *ResourceConfig {
	return v.Resources
}

// GetURL returns the URL value.
// Value objects are immutable, so this returns a copy of the value.
func (v APIConfig) GetURL() *string {
	return v.URL
}

// GetValidation returns the Validation value.
// Value objects are immutable, so this returns a copy of the value.
func (v APIConfig) GetValidation() bool {
	return v.Validation
}

// Validate validates the APIConfig value object.
// Returns an error if any field fails validation.
func (v APIConfig) Validate() error {
	if !v.Environment.IsValid() {
		return fmt.Errorf("invalid Environment: %s", v.Environment)
	}
	return nil
}

// IsZero returns true if this is the zero value.
func (v APIConfig) IsZero() bool {
	zero := ZeroAPIConfig()
	// Compare using string representation as a simple equality check
	return v.String() == zero.String()
}

// String returns a string representation of APIConfig
func (v APIConfig) String() string {
	var fields []string
	fields = append(fields, fmt.Sprintf("Cors: %v", v.Cors))
	fields = append(fields, fmt.Sprintf("Docs: %v", v.Docs))
	fields = append(fields, fmt.Sprintf("Email: %v", v.Email))
	fields = append(fields, fmt.Sprintf("Environment: %v", v.Environment))
	fields = append(fields, fmt.Sprintf("Host: %v", v.Host))
	fields = append(fields, fmt.Sprintf("Image: %v", v.Image))
	fields = append(fields, fmt.Sprintf("Port: %v", v.Port))
	fields = append(fields, fmt.Sprintf("Resources: %v", v.Resources))
	fields = append(fields, fmt.Sprintf("URL: %v", v.URL))
	fields = append(fields, fmt.Sprintf("Validation: %v", v.Validation))
	return fmt.Sprintf("APIConfig{%s}", strings.Join(fields, ", "))
}
