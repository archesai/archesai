// Code generated by archesai-codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// LLMConfigType represents the enumeration of valid values for Type
type LLMConfigType string

// Valid Type values
const (
	LLMConfigTypeOllama LLMConfigType = "ollama"
	LLMConfigTypeOpenai LLMConfigType = "openai"
)

// String returns the string representation
func (e LLMConfigType) String() string {
	return string(e)
}

// IsValid checks if the value is valid
func (e LLMConfigType) IsValid() bool {
	switch e {
	case LLMConfigTypeOllama:
		return true
	case LLMConfigTypeOpenai:
		return true
	default:
		return false
	}
}

// ParseLLMConfigType parses a string into the enum type
func ParseLLMConfigType(s string) (LLMConfigType, error) {
	v := LLMConfigType(s)
	if !v.IsValid() {
		return "", fmt.Errorf("invalid Type: %s", s)
	}
	return v, nil
}

// LLMConfig represents Large Language Model configuration
type LLMConfig struct {
	Endpoint *string       `json:"endpoint,omitempty" yaml:"endpoint,omitempty"` // LLM service endpoint URL
	Token    *string       `json:"token,omitempty" yaml:"token,omitempty"`       // Authentication token for LLM service
	Type     LLMConfigType `json:"type" yaml:"type"`                             // LLM provider type
}

// NewLLMConfig creates a new immutable LLMConfig value object.
// Value objects are immutable and validated upon creation.
func NewLLMConfig(endpoint *string, token *string, type_ LLMConfigType) (LLMConfig, error) {
	// Validate required fields
	if !type_.IsValid() {
		return LLMConfig{}, fmt.Errorf("invalid Type: %s", type_)
	}
	return LLMConfig{
		Endpoint: endpoint,
		Token:    token,
		Type:     type_,
	}, nil
}

// ZeroLLMConfig returns the zero value for LLMConfig.
// This is useful for comparisons and as a default value.
func ZeroLLMConfig() LLMConfig {
	return LLMConfig{}
}

// GetEndpoint returns the Endpoint value.
// Value objects are immutable, so this returns a copy of the value.
func (v LLMConfig) GetEndpoint() *string {
	return v.Endpoint
}

// GetToken returns the Token value.
// Value objects are immutable, so this returns a copy of the value.
func (v LLMConfig) GetToken() *string {
	return v.Token
}

// GetType returns the Type value.
// Value objects are immutable, so this returns a copy of the value.
func (v LLMConfig) GetType() LLMConfigType {
	return v.Type
}

// Validate validates the LLMConfig value object.
// Returns an error if any field fails validation.
func (v LLMConfig) Validate() error {
	if !v.Type.IsValid() {
		return fmt.Errorf("invalid Type: %s", v.Type)
	}
	return nil
}

// IsZero returns true if this is the zero value.
func (v LLMConfig) IsZero() bool {
	zero := ZeroLLMConfig()
	// Compare using string representation as a simple equality check
	return v.String() == zero.String()
}

// String returns a string representation of LLMConfig
func (v LLMConfig) String() string {
	var fields []string
	fields = append(fields, fmt.Sprintf("Endpoint: %v", v.Endpoint))
	fields = append(fields, fmt.Sprintf("Token: %v", v.Token))
	fields = append(fields, fmt.Sprintf("Type: %v", v.Type))
	return fmt.Sprintf("LLMConfig{%s}", strings.Join(fields, ", "))
}
