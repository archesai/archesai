// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import "fmt"

// ConfigStorage represents Object storage configuration for MinIO or S3-compatible services
type ConfigStorage struct {
	Accesskey   string             `json:"accesskey" yaml:"accesskey"` // MinIO/S3 access key ID
	Bucket      string             `json:"bucket" yaml:"bucket"`       // S3 bucket name
	Enabled     bool               `json:"enabled" yaml:"enabled"`     // Enable object storage
	Endpoint    string             `json:"endpoint" yaml:"endpoint"`   // MinIO server endpoint URL
	Image       *ConfigImage       `json:"image,omitempty" yaml:"image,omitempty"`
	Managed     *bool              `json:"managed,omitempty" yaml:"managed,omitempty"` // Use managed storage deployment
	Persistence *ConfigPersistence `json:"persistence,omitempty" yaml:"persistence,omitempty"`
	Resources   *ConfigResource    `json:"resources,omitempty" yaml:"resources,omitempty"`
	Secretkey   string             `json:"secretkey" yaml:"secretkey"` // MinIO/S3 secret access key
}

// NewConfigStorage creates a new ConfigStorage value object
func NewConfigStorage(accesskey string, bucket string, enabled bool, endpoint string, image *ConfigImage, managed *bool, persistence *ConfigPersistence, resources *ConfigResource, secretkey string) (ConfigStorage, error) {
	if accesskey == "" {
		return ConfigStorage{}, fmt.Errorf("Accesskey cannot be empty")
	}
	if bucket == "" {
		return ConfigStorage{}, fmt.Errorf("Bucket cannot be empty")
	}
	if endpoint == "" {
		return ConfigStorage{}, fmt.Errorf("Endpoint cannot be empty")
	}
	if secretkey == "" {
		return ConfigStorage{}, fmt.Errorf("Secretkey cannot be empty")
	}

	return ConfigStorage{
		Accesskey:   accesskey,
		Bucket:      bucket,
		Enabled:     enabled,
		Endpoint:    endpoint,
		Image:       image,
		Managed:     managed,
		Persistence: persistence,
		Resources:   resources,
		Secretkey:   secretkey,
	}, nil
}

// GetAccesskey returns the Accesskey
func (v ConfigStorage) GetAccesskey() string {
	return v.Accesskey
}

// GetBucket returns the Bucket
func (v ConfigStorage) GetBucket() string {
	return v.Bucket
}

// GetEnabled returns the Enabled
func (v ConfigStorage) GetEnabled() bool {
	return v.Enabled
}

// GetEndpoint returns the Endpoint
func (v ConfigStorage) GetEndpoint() string {
	return v.Endpoint
}

// GetImage returns the Image
func (v ConfigStorage) GetImage() *ConfigImage {
	return v.Image
}

// GetManaged returns the Managed
func (v ConfigStorage) GetManaged() *bool {
	return v.Managed
}

// GetPersistence returns the Persistence
func (v ConfigStorage) GetPersistence() *ConfigPersistence {
	return v.Persistence
}

// GetResources returns the Resources
func (v ConfigStorage) GetResources() *ConfigResource {
	return v.Resources
}

// GetSecretkey returns the Secretkey
func (v ConfigStorage) GetSecretkey() string {
	return v.Secretkey
}

// Equals checks if two ConfigStorage value objects are equal
// func (v ConfigStorage) Equals(other ConfigStorage) bool {
//	return v.Accesskey == other.Accesskey && v.Bucket == other.Bucket && v.Enabled == other.Enabled && v.Endpoint == other.Endpoint && v.Image == other.Image && v.Managed == other.Managed && v.Persistence == other.Persistence && v.Resources == other.Resources && v.Secretkey == other.Secretkey
// }

// String returns a string representation of ConfigStorage
func (v ConfigStorage) String() string {
	return fmt.Sprintf("%+v", v)
}
