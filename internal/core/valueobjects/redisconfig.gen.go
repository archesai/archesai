// Code generated by archesai-codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// RedisConfig represents Redis configuration
type RedisConfig struct {
	Auth        string             `json:"auth" yaml:"auth"`                 // Redis authentication password
	Ca          *string            `json:"ca,omitempty" yaml:"ca,omitempty"` // Certificate Authority for TLS (optional)
	Enabled     bool               `json:"enabled" yaml:"enabled"`           // Enable Redis
	Host        string             `json:"host" yaml:"host"`                 // Redis hostname or IP
	Image       *ImageConfig       `json:"image,omitempty" yaml:"image,omitempty"`
	Managed     *bool              `json:"managed,omitempty" yaml:"managed,omitempty"` // Use managed Redis deployment
	Persistence *PersistenceConfig `json:"persistence,omitempty" yaml:"persistence,omitempty"`
	Port        float64            `json:"port" yaml:"port"` // Redis port number
	Resources   *ResourceConfig    `json:"resources,omitempty" yaml:"resources,omitempty"`
}

// NewRedisConfig creates a new immutable RedisConfig value object.
// Value objects are immutable and validated upon creation.
func NewRedisConfig(auth string, ca *string, enabled bool, host string, image *ImageConfig, managed *bool, persistence *PersistenceConfig, port float64, resources *ResourceConfig) (RedisConfig, error) {
	// Validate required fields
	return RedisConfig{
		Auth:        auth,
		Ca:          ca,
		Enabled:     enabled,
		Host:        host,
		Image:       image,
		Managed:     managed,
		Persistence: persistence,
		Port:        port,
		Resources:   resources,
	}, nil
}

// ZeroRedisConfig returns the zero value for RedisConfig.
// This is useful for comparisons and as a default value.
func ZeroRedisConfig() RedisConfig {
	return RedisConfig{}
}

// GetAuth returns the Auth value.
// Value objects are immutable, so this returns a copy of the value.
func (v RedisConfig) GetAuth() string {
	return v.Auth
}

// GetCa returns the Ca value.
// Value objects are immutable, so this returns a copy of the value.
func (v RedisConfig) GetCa() *string {
	return v.Ca
}

// GetEnabled returns the Enabled value.
// Value objects are immutable, so this returns a copy of the value.
func (v RedisConfig) GetEnabled() bool {
	return v.Enabled
}

// GetHost returns the Host value.
// Value objects are immutable, so this returns a copy of the value.
func (v RedisConfig) GetHost() string {
	return v.Host
}

// GetImage returns the Image value.
// Value objects are immutable, so this returns a copy of the value.
func (v RedisConfig) GetImage() *ImageConfig {
	return v.Image
}

// GetManaged returns the Managed value.
// Value objects are immutable, so this returns a copy of the value.
func (v RedisConfig) GetManaged() *bool {
	return v.Managed
}

// GetPersistence returns the Persistence value.
// Value objects are immutable, so this returns a copy of the value.
func (v RedisConfig) GetPersistence() *PersistenceConfig {
	return v.Persistence
}

// GetPort returns the Port value.
// Value objects are immutable, so this returns a copy of the value.
func (v RedisConfig) GetPort() float64 {
	return v.Port
}

// GetResources returns the Resources value.
// Value objects are immutable, so this returns a copy of the value.
func (v RedisConfig) GetResources() *ResourceConfig {
	return v.Resources
}

// Validate validates the RedisConfig value object.
// Returns an error if any field fails validation.
func (v RedisConfig) Validate() error {
	return nil
}

// IsZero returns true if this is the zero value.
func (v RedisConfig) IsZero() bool {
	zero := ZeroRedisConfig()
	// Compare using string representation as a simple equality check
	return v.String() == zero.String()
}

// String returns a string representation of RedisConfig
func (v RedisConfig) String() string {
	var fields []string
	fields = append(fields, fmt.Sprintf("Auth: %v", v.Auth))
	fields = append(fields, fmt.Sprintf("Ca: %v", v.Ca))
	fields = append(fields, fmt.Sprintf("Enabled: %v", v.Enabled))
	fields = append(fields, fmt.Sprintf("Host: %v", v.Host))
	fields = append(fields, fmt.Sprintf("Image: %v", v.Image))
	fields = append(fields, fmt.Sprintf("Managed: %v", v.Managed))
	fields = append(fields, fmt.Sprintf("Persistence: %v", v.Persistence))
	fields = append(fields, fmt.Sprintf("Port: %v", v.Port))
	fields = append(fields, fmt.Sprintf("Resources: %v", v.Resources))
	return fmt.Sprintf("RedisConfig{%s}", strings.Join(fields, ", "))
}
