// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// ConfigScraper represents Web scraping service configuration
type ConfigScraper struct {
	Enabled   bool            `json:"enabled" yaml:"enabled"`                       // Enable scraper service
	Endpoint  *string         `json:"endpoint,omitempty" yaml:"endpoint,omitempty"` // Web scraper service endpoint URL
	Image     *ConfigImage    `json:"image,omitempty" yaml:"image,omitempty"`
	Managed   *bool           `json:"managed,omitempty" yaml:"managed,omitempty"` // Use managed scraper deployment
	Resources *ConfigResource `json:"resources,omitempty" yaml:"resources,omitempty"`
}

// NewConfigScraper creates a new ConfigScraper value object
func NewConfigScraper(enabled bool, endpoint *string, image *ConfigImage, managed *bool, resources *ConfigResource) (ConfigScraper, error) {

	return ConfigScraper{
		Enabled:   enabled,
		Endpoint:  endpoint,
		Image:     image,
		Managed:   managed,
		Resources: resources,
	}, nil
}

// GetEnabled returns the Enabled
func (v ConfigScraper) GetEnabled() bool {
	return v.Enabled
}

// GetEndpoint returns the Endpoint
func (v ConfigScraper) GetEndpoint() *string {
	return v.Endpoint
}

// GetImage returns the Image
func (v ConfigScraper) GetImage() *ConfigImage {
	return v.Image
}

// GetManaged returns the Managed
func (v ConfigScraper) GetManaged() *bool {
	return v.Managed
}

// GetResources returns the Resources
func (v ConfigScraper) GetResources() *ConfigResource {
	return v.Resources
}

// Equals checks if two ConfigScraper value objects are equal
// func (v ConfigScraper) Equals(other ConfigScraper) bool {
//	return v.Enabled == other.Enabled && v.Endpoint == other.Endpoint && v.Image == other.Image && v.Managed == other.Managed && v.Resources == other.Resources
// }

// String returns a string representation of ConfigScraper
func (v ConfigScraper) String() string {
	// Build string representation field by field to avoid recursion
	var fields []string
	fields = append(fields, fmt.Sprintf("Enabled: %v", v.Enabled))
	fields = append(fields, fmt.Sprintf("Endpoint: %v", v.Endpoint))
	fields = append(fields, fmt.Sprintf("Image: %v", v.Image))
	fields = append(fields, fmt.Sprintf("Managed: %v", v.Managed))
	fields = append(fields, fmt.Sprintf("Resources: %v", v.Resources))
	return fmt.Sprintf("ConfigScraper{%s}", strings.Join(fields, ", "))
}
