// Code generated by archesai-codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// ImagesConfig represents Container image configuration
type ImagesConfig struct {
	ImagePullSecrets []string `json:"imagePullSecrets" yaml:"imagePullSecrets"` // List of Kubernetes secrets for pulling private images
	ImageRegistry    string   `json:"imageRegistry" yaml:"imageRegistry"`       // Custom container registry URL (leave empty for Docker Hub)
}

// NewImagesConfig creates a new immutable ImagesConfig value object.
// Value objects are immutable and validated upon creation.
func NewImagesConfig(imagePullSecrets []string, imageRegistry string) (ImagesConfig, error) {
	// Validate required fields
	return ImagesConfig{
		ImagePullSecrets: imagePullSecrets,
		ImageRegistry:    imageRegistry,
	}, nil
}

// ZeroImagesConfig returns the zero value for ImagesConfig.
// This is useful for comparisons and as a default value.
func ZeroImagesConfig() ImagesConfig {
	return ImagesConfig{}
}

// GetImagePullSecrets returns the ImagePullSecrets value.
// Value objects are immutable, so this returns a copy of the value.
func (v ImagesConfig) GetImagePullSecrets() []string {
	// Return a copy for slices and maps to maintain immutability
	result := make([]string, len(v.ImagePullSecrets))
	copy(result, v.ImagePullSecrets)
	return result
}

// GetImageRegistry returns the ImageRegistry value.
// Value objects are immutable, so this returns a copy of the value.
func (v ImagesConfig) GetImageRegistry() string {
	return v.ImageRegistry
}

// Validate validates the ImagesConfig value object.
// Returns an error if any field fails validation.
func (v ImagesConfig) Validate() error {
	return nil
}

// IsZero returns true if this is the zero value.
func (v ImagesConfig) IsZero() bool {
	zero := ZeroImagesConfig()
	// Compare using string representation as a simple equality check
	return v.String() == zero.String()
}

// String returns a string representation of ImagesConfig
func (v ImagesConfig) String() string {
	var fields []string
	fields = append(fields, fmt.Sprintf("ImagePullSecrets: %v", v.ImagePullSecrets))
	fields = append(fields, fmt.Sprintf("ImageRegistry: %v", v.ImageRegistry))
	return fmt.Sprintf("ImagesConfig{%s}", strings.Join(fields, ", "))
}
