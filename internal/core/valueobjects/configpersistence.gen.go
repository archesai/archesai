// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// ConfigPersistence represents Persistent storage configuration
type ConfigPersistence struct {
	Enabled bool   `json:"enabled" yaml:"enabled"` // Enable persistent storage
	Size    string `json:"size" yaml:"size"`       // Size of persistent volume
}

// NewConfigPersistence creates a new ConfigPersistence value object
func NewConfigPersistence(enabled bool, size string) (ConfigPersistence, error) {
	if size == "" {
		return ConfigPersistence{}, fmt.Errorf("Size cannot be empty")
	}

	return ConfigPersistence{
		Enabled: enabled,
		Size:    size,
	}, nil
}

// GetEnabled returns the Enabled
func (v ConfigPersistence) GetEnabled() bool {
	return v.Enabled
}

// GetSize returns the Size
func (v ConfigPersistence) GetSize() string {
	return v.Size
}

// Equals checks if two ConfigPersistence value objects are equal
// func (v ConfigPersistence) Equals(other ConfigPersistence) bool {
//	return v.Enabled == other.Enabled && v.Size == other.Size
// }

// String returns a string representation of ConfigPersistence
func (v ConfigPersistence) String() string {
	// Build string representation field by field to avoid recursion
	var fields []string
	fields = append(fields, fmt.Sprintf("Enabled: %v", v.Enabled))
	fields = append(fields, fmt.Sprintf("Size: %v", v.Size))
	return fmt.Sprintf("ConfigPersistence{%s}", strings.Join(fields, ", "))
}
