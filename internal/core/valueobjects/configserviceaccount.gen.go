// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// ConfigServiceAccount represents Kubernetes service account configuration
type ConfigServiceAccount struct {
	Create bool   `json:"create" yaml:"create"` // Create dedicated service account
	Name   string `json:"name" yaml:"name"`     // Custom service account name
}

// NewConfigServiceAccount creates a new immutable ConfigServiceAccount value object.
// Value objects are immutable and validated upon creation.
func NewConfigServiceAccount(create bool, name string) (ConfigServiceAccount, error) {
	// Validate all fields
	if name == "" {
		return ConfigServiceAccount{}, fmt.Errorf("Name cannot be empty")
	}

	return ConfigServiceAccount{
		Create: create,
		Name:   name,
	}, nil
}

// MustConfigServiceAccount creates a new ConfigServiceAccount value object and panics on validation error.
// Use this only when you are certain the values are valid (e.g., in tests or with hardcoded values).
func MustConfigServiceAccount(create bool, name string) ConfigServiceAccount {
	v, err := NewConfigServiceAccount(create, name)
	if err != nil {
		panic(fmt.Sprintf("failed to create ConfigServiceAccount: %v", err))
	}
	return v
}

// ZeroConfigServiceAccount returns the zero value for ConfigServiceAccount.
// This is useful for comparisons and as a default value.
func ZeroConfigServiceAccount() ConfigServiceAccount {
	return ConfigServiceAccount{}
}

// GetCreate returns the Create value.
// Value objects are immutable, so this returns a copy of the value.
func (v ConfigServiceAccount) GetCreate() bool {
	return v.Create
}

// GetName returns the Name value.
// Value objects are immutable, so this returns a copy of the value.
func (v ConfigServiceAccount) GetName() string {
	return v.Name
}

// IsZero returns true if this is the zero value.
func (v ConfigServiceAccount) IsZero() bool {
	zero := ZeroConfigServiceAccount()
	// Compare using string representation as a simple equality check
	return v.String() == zero.String()
}

// Validate checks if the value object is valid.
// This is automatically called during construction but can be used for explicit validation.
func (v ConfigServiceAccount) Validate() error {
	if v.Name == "" {
		return fmt.Errorf("Name cannot be empty")
	}
	return nil
}

// String returns a string representation of ConfigServiceAccount
func (v ConfigServiceAccount) String() string {
	var fields []string
	fields = append(fields, fmt.Sprintf("Create: %v", v.Create))
	fields = append(fields, fmt.Sprintf("Name: %v", v.Name))
	return fmt.Sprintf("ConfigServiceAccount{%s}", strings.Join(fields, ", "))
}
