// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// ConfigMigrations represents Database migration configuration
type ConfigMigrations struct {
	Enabled bool `json:"enabled" yaml:"enabled"` // Enable automatic DB migrations
}

// NewConfigMigrations creates a new immutable ConfigMigrations value object.
// Value objects are immutable and validated upon creation.
func NewConfigMigrations(enabled bool) (ConfigMigrations, error) {
	// Validate all fields

	return ConfigMigrations{
		Enabled: enabled,
	}, nil
}

// MustConfigMigrations creates a new ConfigMigrations value object and panics on validation error.
// Use this only when you are certain the values are valid (e.g., in tests or with hardcoded values).
func MustConfigMigrations(enabled bool) ConfigMigrations {
	v, err := NewConfigMigrations(enabled)
	if err != nil {
		panic(fmt.Sprintf("failed to create ConfigMigrations: %v", err))
	}
	return v
}

// ZeroConfigMigrations returns the zero value for ConfigMigrations.
// This is useful for comparisons and as a default value.
func ZeroConfigMigrations() ConfigMigrations {
	return ConfigMigrations{}
}

// GetEnabled returns the Enabled value.
// Value objects are immutable, so this returns a copy of the value.
func (v ConfigMigrations) GetEnabled() bool {
	return v.Enabled
}

// IsZero returns true if this is the zero value.
func (v ConfigMigrations) IsZero() bool {
	zero := ZeroConfigMigrations()
	// Compare using string representation as a simple equality check
	return v.String() == zero.String()
}

// Validate checks if the value object is valid.
// This is automatically called during construction but can be used for explicit validation.
func (v ConfigMigrations) Validate() error {
	return nil
}

// String returns a string representation of ConfigMigrations
func (v ConfigMigrations) String() string {
	var fields []string
	fields = append(fields, fmt.Sprintf("Enabled: %v", v.Enabled))
	return fmt.Sprintf("ConfigMigrations{%s}", strings.Join(fields, ", "))
}
