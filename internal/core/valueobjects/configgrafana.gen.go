// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// ConfigGrafana represents Grafana monitoring dashboard configuration
type ConfigGrafana struct {
	Enabled   bool            `json:"enabled" yaml:"enabled"` // Enable Grafana
	Image     *ConfigImage    `json:"image,omitempty" yaml:"image,omitempty"`
	Managed   *bool           `json:"managed,omitempty" yaml:"managed,omitempty"` // Use managed Grafana deployment
	Resources *ConfigResource `json:"resources,omitempty" yaml:"resources,omitempty"`
}

// NewConfigGrafana creates a new ConfigGrafana value object
func NewConfigGrafana(enabled bool, image *ConfigImage, managed *bool, resources *ConfigResource) (ConfigGrafana, error) {

	return ConfigGrafana{
		Enabled:   enabled,
		Image:     image,
		Managed:   managed,
		Resources: resources,
	}, nil
}

// GetEnabled returns the Enabled
func (v ConfigGrafana) GetEnabled() bool {
	return v.Enabled
}

// GetImage returns the Image
func (v ConfigGrafana) GetImage() *ConfigImage {
	return v.Image
}

// GetManaged returns the Managed
func (v ConfigGrafana) GetManaged() *bool {
	return v.Managed
}

// GetResources returns the Resources
func (v ConfigGrafana) GetResources() *ConfigResource {
	return v.Resources
}

// Equals checks if two ConfigGrafana value objects are equal
// func (v ConfigGrafana) Equals(other ConfigGrafana) bool {
//	return v.Enabled == other.Enabled && v.Image == other.Image && v.Managed == other.Managed && v.Resources == other.Resources
// }

// String returns a string representation of ConfigGrafana
func (v ConfigGrafana) String() string {
	// Build string representation field by field to avoid recursion
	var fields []string
	fields = append(fields, fmt.Sprintf("Enabled: %v", v.Enabled))
	fields = append(fields, fmt.Sprintf("Image: %v", v.Image))
	fields = append(fields, fmt.Sprintf("Managed: %v", v.Managed))
	fields = append(fields, fmt.Sprintf("Resources: %v", v.Resources))
	return fmt.Sprintf("ConfigGrafana{%s}", strings.Join(fields, ", "))
}
