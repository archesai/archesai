// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// ConfigEmail represents Email configuration for sending emails
type ConfigEmail struct {
	Enabled  bool    `json:"enabled" yaml:"enabled"`                       // Enable email functionality
	Password *string `json:"password,omitempty" yaml:"password,omitempty"` // Password for the email service
	Service  *string `json:"service,omitempty" yaml:"service,omitempty"`   // Email service provider (e.g., "gmail", "sendgrid", etc.)
	User     *string `json:"user,omitempty" yaml:"user,omitempty"`         // Username for the email service
}

// NewConfigEmail creates a new ConfigEmail value object
func NewConfigEmail(enabled bool, password *string, service *string, user *string) (ConfigEmail, error) {

	return ConfigEmail{
		Enabled:  enabled,
		Password: password,
		Service:  service,
		User:     user,
	}, nil
}

// GetEnabled returns the Enabled
func (v ConfigEmail) GetEnabled() bool {
	return v.Enabled
}

// GetPassword returns the Password
func (v ConfigEmail) GetPassword() *string {
	return v.Password
}

// GetService returns the Service
func (v ConfigEmail) GetService() *string {
	return v.Service
}

// GetUser returns the User
func (v ConfigEmail) GetUser() *string {
	return v.User
}

// Equals checks if two ConfigEmail value objects are equal
// func (v ConfigEmail) Equals(other ConfigEmail) bool {
//	return v.Enabled == other.Enabled && v.Password == other.Password && v.Service == other.Service && v.User == other.User
// }

// String returns a string representation of ConfigEmail
func (v ConfigEmail) String() string {
	// Build string representation field by field to avoid recursion
	var fields []string
	fields = append(fields, fmt.Sprintf("Enabled: %v", v.Enabled))
	fields = append(fields, fmt.Sprintf("Password: %v", v.Password))
	fields = append(fields, fmt.Sprintf("Service: %v", v.Service))
	fields = append(fields, fmt.Sprintf("User: %v", v.User))
	return fmt.Sprintf("ConfigEmail{%s}", strings.Join(fields, ", "))
}
