// Code generated by archesai/codegen. DO NOT EDIT.

package valueobjects

import (
	"fmt"
	"strings"
)

// ConfigEmail represents Email configuration for sending emails
type ConfigEmail struct {
	Enabled  bool    `json:"enabled" yaml:"enabled"`                       // Enable email functionality
	Password *string `json:"password,omitempty" yaml:"password,omitempty"` // Password for the email service
	Service  *string `json:"service,omitempty" yaml:"service,omitempty"`   // Email service provider (e.g., "gmail", "sendgrid", etc.)
	User     *string `json:"user,omitempty" yaml:"user,omitempty"`         // Username for the email service
}

// NewConfigEmail creates a new immutable ConfigEmail value object.
// Value objects are immutable and validated upon creation.
func NewConfigEmail(enabled bool, password *string, service *string, user *string) (ConfigEmail, error) {
	// Validate all fields

	return ConfigEmail{
		Enabled:  enabled,
		Password: password,
		Service:  service,
		User:     user,
	}, nil
}

// MustConfigEmail creates a new ConfigEmail value object and panics on validation error.
// Use this only when you are certain the values are valid (e.g., in tests or with hardcoded values).
func MustConfigEmail(enabled bool, password *string, service *string, user *string) ConfigEmail {
	v, err := NewConfigEmail(enabled, password, service, user)
	if err != nil {
		panic(fmt.Sprintf("failed to create ConfigEmail: %v", err))
	}
	return v
}

// ZeroConfigEmail returns the zero value for ConfigEmail.
// This is useful for comparisons and as a default value.
func ZeroConfigEmail() ConfigEmail {
	return ConfigEmail{}
}

// GetEnabled returns the Enabled value.
// Value objects are immutable, so this returns a copy of the value.
func (v ConfigEmail) GetEnabled() bool {
	return v.Enabled
}

// GetPassword returns the Password value.
// Value objects are immutable, so this returns a copy of the value.
func (v ConfigEmail) GetPassword() *string {
	return v.Password
}

// GetService returns the Service value.
// Value objects are immutable, so this returns a copy of the value.
func (v ConfigEmail) GetService() *string {
	return v.Service
}

// GetUser returns the User value.
// Value objects are immutable, so this returns a copy of the value.
func (v ConfigEmail) GetUser() *string {
	return v.User
}

// IsZero returns true if this is the zero value.
func (v ConfigEmail) IsZero() bool {
	zero := ZeroConfigEmail()
	// Compare using string representation as a simple equality check
	return v.String() == zero.String()
}

// Validate checks if the value object is valid.
// This is automatically called during construction but can be used for explicit validation.
func (v ConfigEmail) Validate() error {
	return nil
}

// String returns a string representation of ConfigEmail
func (v ConfigEmail) String() string {
	var fields []string
	fields = append(fields, fmt.Sprintf("Enabled: %v", v.Enabled))
	if v.Password != nil {
		fields = append(fields, fmt.Sprintf("Password: %v", *v.Password))
	} else {
		fields = append(fields, "Password: <nil>")
	}
	if v.Service != nil {
		fields = append(fields, fmt.Sprintf("Service: %v", *v.Service))
	} else {
		fields = append(fields, "Service: <nil>")
	}
	if v.User != nil {
		fields = append(fields, fmt.Sprintf("User: %v", *v.User))
	} else {
		fields = append(fields, "User: <nil>")
	}
	return fmt.Sprintf("ConfigEmail{%s}", strings.Join(fields, ", "))
}
