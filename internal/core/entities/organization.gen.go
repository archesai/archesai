// Code generated by archesai/codegen. DO NOT EDIT.

package entities

import (
	"fmt"
	"time"

	"github.com/archesai/archesai/internal/core/events"
	"github.com/google/uuid"
)

// Organization represents Schema for Organization entity
type Organization struct {
	BillingEmail     *string              `json:"billingEmail,omitempty" yaml:"billingEmail,omitempty"`         // Email address for billing communications
	CreatedAt        time.Time            `json:"createdAt" yaml:"createdAt"`                                   // The date and time when the resource was created
	Credits          int32                `json:"credits" yaml:"credits"`                                       // Available credits for this organization
	ID               uuid.UUID            `json:"id" yaml:"id"`                                                 // Unique identifier for the resource
	Logo             *string              `json:"logo,omitempty" yaml:"logo,omitempty"`                         // The organization's logo URL
	Name             string               `json:"name" yaml:"name"`                                             // The organization's display name
	Plan             string               `json:"plan" yaml:"plan"`                                             // The current subscription plan
	Slug             string               `json:"slug" yaml:"slug"`                                             // URL-friendly unique identifier for the organization
	StripeCustomerID *string              `json:"stripeCustomerID,omitempty" yaml:"stripeCustomerID,omitempty"` // Stripe customer identifier
	UpdatedAt        time.Time            `json:"updatedAt" yaml:"updatedAt"`                                   // The date and time when the resource was last updated
	events           []events.DomainEvent `json:"-" yaml:"-"`
}

// NewOrganization creates a new Organization entity
func NewOrganization(
	credits int32,
	name string,
	plan string,
	slug string,
) (*Organization, error) {
	if name == "" {
		return nil, fmt.Errorf("Name cannot be empty")
	}
	if plan == "" {
		return nil, fmt.Errorf("Plan cannot be empty")
	}
	if slug == "" {
		return nil, fmt.Errorf("Slug cannot be empty")
	}

	organization := &Organization{
		CreatedAt: time.Now().UTC(),
		Credits:   credits,
		ID:        uuid.New(),
		Name:      name,
		Plan:      plan,
		Slug:      slug,
		UpdatedAt: time.Now().UTC(),
		events:    []events.DomainEvent{},
	}
	organization.addEvent(events.NewOrganizationCreatedEvent(organization.ID))

	return organization, nil
}

// GetBillingEmail returns the BillingEmail
func (e *Organization) GetBillingEmail() *string {
	return e.BillingEmail
}

// GetCreatedAt returns the CreatedAt
func (e *Organization) GetCreatedAt() time.Time {
	return e.CreatedAt
}

// GetCredits returns the Credits
func (e *Organization) GetCredits() int32 {
	return e.Credits
}

// GetID returns the ID
func (e *Organization) GetID() uuid.UUID {
	return e.ID
}

// GetLogo returns the Logo
func (e *Organization) GetLogo() *string {
	return e.Logo
}

// GetName returns the Name
func (e *Organization) GetName() string {
	return e.Name
}

// GetPlan returns the Plan
func (e *Organization) GetPlan() string {
	return e.Plan
}

// GetSlug returns the Slug
func (e *Organization) GetSlug() string {
	return e.Slug
}

// GetStripeCustomerID returns the StripeCustomerID
func (e *Organization) GetStripeCustomerID() *string {
	return e.StripeCustomerID
}

// GetUpdatedAt returns the UpdatedAt
func (e *Organization) GetUpdatedAt() time.Time {
	return e.UpdatedAt
}

// Events returns the domain events
func (e *Organization) Events() []events.DomainEvent {
	return e.events
}

// ClearEvents clears the domain events
func (e *Organization) ClearEvents() {
	e.events = []events.DomainEvent{}
}

// addEvent adds a domain event
func (e *Organization) addEvent(event events.DomainEvent) {
	e.events = append(e.events, event)
}

// ReconstructOrganization reconstructs a Organization from persistence
func ReconstructOrganization(
	billingEmail *string,
	createdAt time.Time,
	credits int32,
	id uuid.UUID,
	logo *string,
	name string,
	plan string,
	slug string,
	stripeCustomerID *string,
	updatedAt time.Time,
) *Organization {
	return &Organization{
		BillingEmail:     billingEmail,
		CreatedAt:        createdAt,
		Credits:          credits,
		ID:               id,
		Logo:             logo,
		Name:             name,
		Plan:             plan,
		Slug:             slug,
		StripeCustomerID: stripeCustomerID,
		UpdatedAt:        updatedAt,
		events:           []events.DomainEvent{},
	}
}
