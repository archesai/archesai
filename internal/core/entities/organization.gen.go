// Code generated by archesai-codegen. DO NOT EDIT.

package entities

import (
	"fmt"
	"time"

	"github.com/archesai/archesai/internal/core/events"
	"github.com/google/uuid"
)

// OrganizationPlan represents the enumeration of valid values for Plan
type OrganizationPlan string

// Valid Plan values
const (
	OrganizationPlanFREE      OrganizationPlan = "FREE"
	OrganizationPlanBASIC     OrganizationPlan = "BASIC"
	OrganizationPlanSTANDARD  OrganizationPlan = "STANDARD"
	OrganizationPlanPREMIUM   OrganizationPlan = "PREMIUM"
	OrganizationPlanUNLIMITED OrganizationPlan = "UNLIMITED"
)

// String returns the string representation
func (e OrganizationPlan) String() string {
	return string(e)
}

// IsValid checks if the value is valid
func (e OrganizationPlan) IsValid() bool {
	switch e {
	case OrganizationPlanFREE:
		return true
	case OrganizationPlanBASIC:
		return true
	case OrganizationPlanSTANDARD:
		return true
	case OrganizationPlanPREMIUM:
		return true
	case OrganizationPlanUNLIMITED:
		return true
	default:
		return false
	}
}

// ParseOrganizationPlan parses a string into the enum type
func ParseOrganizationPlan(s string) (OrganizationPlan, error) {
	v := OrganizationPlan(s)
	if !v.IsValid() {
		return "", fmt.Errorf("invalid Plan: %s", s)
	}
	return v, nil
}

// Organization represents Schema for Organization entity
type Organization struct {

	// ID Unique identifier for the resource
	ID uuid.UUID `json:"id" yaml:"id"`

	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`

	// BillingEmail Email address for billing communications
	BillingEmail *string `json:"billingEmail" yaml:"billingEmail"`

	// Credits Available credits for this organization
	Credits int32 `json:"credits" yaml:"credits"`

	// Logo The organization's logo URL
	Logo *string `json:"logo" yaml:"logo"`

	// Name The organization's display name
	Name string `json:"name" yaml:"name"`

	// Plan The current subscription plan
	Plan OrganizationPlan `json:"plan" yaml:"plan"`

	// Slug URL-friendly unique identifier for the organization
	Slug string `json:"slug" yaml:"slug"`

	// StripeCustomerIdentifier Stripe customer identifier
	StripeCustomerIdentifier string `json:"stripeCustomerIdentifier" yaml:"stripeCustomerIdentifier"`

	events []events.DomainEvent `json:"-" yaml:"-"`
}

// NewOrganization creates a new Organization entity.
// All required fields must be provided and valid.
func NewOrganization(
	billingEmail *string,
	credits int32,
	logo *string,
	name string,
	plan OrganizationPlan,
	slug string,
	stripeCustomerIdentifier string,
) (*Organization, error) {
	// Validate required fields
	if name == "" {
		return nil, fmt.Errorf("Name cannot be empty")
	}
	if !plan.IsValid() {
		return nil, fmt.Errorf("invalid Plan: %s", plan)
	}
	if slug == "" {
		return nil, fmt.Errorf("Slug cannot be empty")
	}
	if stripeCustomerIdentifier == "" {
		return nil, fmt.Errorf("StripeCustomerIdentifier cannot be empty")
	}
	now := time.Now().UTC()
	id := uuid.New()
	organization := &Organization{
		ID:                       id,
		CreatedAt:                now,
		UpdatedAt:                now,
		BillingEmail:             billingEmail,
		Credits:                  credits,
		Logo:                     logo,
		Name:                     name,
		Plan:                     plan,
		Slug:                     slug,
		StripeCustomerIdentifier: stripeCustomerIdentifier,
		events:                   []events.DomainEvent{},
	}
	organization.addEvent(events.NewOrganizationCreatedEvent(id))

	return organization, nil
}

// GetID returns the ID
func (e *Organization) GetID() uuid.UUID {
	return e.ID
}

// GetCreatedAt returns the CreatedAt
func (e *Organization) GetCreatedAt() time.Time {
	return e.CreatedAt
}

// GetUpdatedAt returns the UpdatedAt
func (e *Organization) GetUpdatedAt() time.Time {
	return e.UpdatedAt
}

// GetBillingEmail returns the BillingEmail
func (e *Organization) GetBillingEmail() *string {
	return e.BillingEmail
}

// GetCredits returns the Credits
func (e *Organization) GetCredits() int32 {
	return e.Credits
}

// GetLogo returns the Logo
func (e *Organization) GetLogo() *string {
	return e.Logo
}

// GetName returns the Name
func (e *Organization) GetName() string {
	return e.Name
}

// GetPlan returns the Plan
func (e *Organization) GetPlan() OrganizationPlan {
	return e.Plan
}

// GetSlug returns the Slug
func (e *Organization) GetSlug() string {
	return e.Slug
}

// GetStripeCustomerIdentifier returns the StripeCustomerIdentifier
func (e *Organization) GetStripeCustomerIdentifier() string {
	return e.StripeCustomerIdentifier
}

// Events returns the domain events
func (e *Organization) Events() []events.DomainEvent {
	return e.events
}

// ClearEvents clears the domain events
func (e *Organization) ClearEvents() {
	e.events = []events.DomainEvent{}
}

// addEvent adds a domain event
func (e *Organization) addEvent(event events.DomainEvent) {
	e.events = append(e.events, event)
}
