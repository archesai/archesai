// Code generated by archesai-codegen. DO NOT EDIT.

package entities

import (
	"fmt"
	"time"

	"github.com/archesai/archesai/internal/core/events"
	"github.com/google/uuid"
)

// RunStatus represents the enumeration of valid values for Status
type RunStatus string

// Valid Status values
const (
	RunStatusCOMPLETED  RunStatus = "COMPLETED"
	RunStatusFAILED     RunStatus = "FAILED"
	RunStatusPROCESSING RunStatus = "PROCESSING"
	RunStatusQUEUED     RunStatus = "QUEUED"
)

// String returns the string representation
func (e RunStatus) String() string {
	return string(e)
}

// IsValid checks if the value is valid
func (e RunStatus) IsValid() bool {
	switch e {
	case RunStatusCOMPLETED:
		return true
	case RunStatusFAILED:
		return true
	case RunStatusPROCESSING:
		return true
	case RunStatusQUEUED:
		return true
	default:
		return false
	}
}

// ParseRunStatus parses a string into the enum type
func ParseRunStatus(s string) (RunStatus, error) {
	v := RunStatus(s)
	if !v.IsValid() {
		return "", fmt.Errorf("invalid Status: %s", s)
	}
	return v, nil
}

// Run represents Schema for Run entity
type Run struct {

	// ID Unique identifier for the resource
	ID uuid.UUID `json:"id" yaml:"id"`

	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`

	// CompletedAt The timestamp when the run completed
	CompletedAt *time.Time `json:"completedAt" yaml:"completedAt"`

	// Error The error message
	Error *string `json:"error" yaml:"error"`

	// OrganizationID The organization this run belongs to
	OrganizationID uuid.UUID `json:"organizationID" yaml:"organizationID"`

	// PipelineID The pipeline this run is executing
	PipelineID uuid.UUID `json:"pipelineID" yaml:"pipelineID"`

	// Progress The percent progress of the run (0-100)
	Progress int32 `json:"progress" yaml:"progress"`

	// StartedAt The timestamp when the run started
	StartedAt *time.Time `json:"startedAt" yaml:"startedAt"`
	Status    RunStatus  `json:"status" yaml:"status"`

	// ToolID The tool being used in this run
	ToolID uuid.UUID `json:"toolID" yaml:"toolID"`

	events []events.DomainEvent `json:"-" yaml:"-"`
}

// NewRun creates a new Run entity.
// All required fields must be provided and valid.
func NewRun(
	completedAt *time.Time,
	error *string,
	organizationID uuid.UUID,
	pipelineID uuid.UUID,
	progress int32,
	startedAt *time.Time,
	status RunStatus,
	toolID uuid.UUID,
) (*Run, error) {
	// Validate required fields
	if organizationID == uuid.Nil {
		return nil, fmt.Errorf("OrganizationID cannot be nil UUID")
	}
	if pipelineID == uuid.Nil {
		return nil, fmt.Errorf("PipelineID cannot be nil UUID")
	}
	if !status.IsValid() {
		return nil, fmt.Errorf("invalid Status: %s", status)
	}
	if toolID == uuid.Nil {
		return nil, fmt.Errorf("ToolID cannot be nil UUID")
	}
	now := time.Now().UTC()
	id := uuid.New()
	run := &Run{
		ID:             id,
		CreatedAt:      now,
		UpdatedAt:      now,
		CompletedAt:    completedAt,
		Error:          error,
		OrganizationID: organizationID,
		PipelineID:     pipelineID,
		Progress:       progress,
		StartedAt:      startedAt,
		Status:         status,
		ToolID:         toolID,
		events:         []events.DomainEvent{},
	}
	run.addEvent(events.NewRunCreatedEvent(id))

	return run, nil
}

// GetID returns the ID
func (e *Run) GetID() uuid.UUID {
	return e.ID
}

// GetCreatedAt returns the CreatedAt
func (e *Run) GetCreatedAt() time.Time {
	return e.CreatedAt
}

// GetUpdatedAt returns the UpdatedAt
func (e *Run) GetUpdatedAt() time.Time {
	return e.UpdatedAt
}

// GetCompletedAt returns the CompletedAt
func (e *Run) GetCompletedAt() *time.Time {
	return e.CompletedAt
}

// GetError returns the Error
func (e *Run) GetError() *string {
	return e.Error
}

// GetOrganizationID returns the OrganizationID
func (e *Run) GetOrganizationID() uuid.UUID {
	return e.OrganizationID
}

// GetPipelineID returns the PipelineID
func (e *Run) GetPipelineID() uuid.UUID {
	return e.PipelineID
}

// GetProgress returns the Progress
func (e *Run) GetProgress() int32 {
	return e.Progress
}

// GetStartedAt returns the StartedAt
func (e *Run) GetStartedAt() *time.Time {
	return e.StartedAt
}

// GetStatus returns the Status
func (e *Run) GetStatus() RunStatus {
	return e.Status
}

// GetToolID returns the ToolID
func (e *Run) GetToolID() uuid.UUID {
	return e.ToolID
}

// Events returns the domain events
func (e *Run) Events() []events.DomainEvent {
	return e.events
}

// ClearEvents clears the domain events
func (e *Run) ClearEvents() {
	e.events = []events.DomainEvent{}
}

// addEvent adds a domain event
func (e *Run) addEvent(event events.DomainEvent) {
	e.events = append(e.events, event)
}
