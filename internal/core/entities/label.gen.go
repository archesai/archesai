// Code generated by archesai-codegen. DO NOT EDIT.

package entities

import (
	"fmt"
	"time"

	"github.com/archesai/archesai/internal/core/events"
	"github.com/google/uuid"
)

// Label represents Schema for Label entity
type Label struct {
	ID             uuid.UUID            `json:"id" yaml:"id"`                         // Unique identifier for the resource
	CreatedAt      time.Time            `json:"createdAt" yaml:"createdAt"`           // The date and time when the resource was created
	Name           string               `json:"name" yaml:"name"`                     // The name of the label
	OrganizationID uuid.UUID            `json:"organizationID" yaml:"organizationID"` // The organization this label belongs to
	UpdatedAt      time.Time            `json:"updatedAt" yaml:"updatedAt"`           // The date and time when the resource was last updated
	events         []events.DomainEvent `json:"-" yaml:"-"`
}

// NewLabel creates a new Label entity.
// All required fields must be provided and valid.
func NewLabel(
	name string,
	organizationID uuid.UUID,
) (*Label, error) {
	// Validate required fields
	if name == "" {
		return nil, fmt.Errorf("Name cannot be empty")
	}
	now := time.Now().UTC()
	id := uuid.New()
	label := &Label{
		ID:             id,
		CreatedAt:      now,
		Name:           name,
		OrganizationID: organizationID,
		UpdatedAt:      now,
		events:         []events.DomainEvent{},
	}
	label.addEvent(events.NewLabelCreatedEvent(id))

	return label, nil
}

// GetID returns the ID
func (e *Label) GetID() uuid.UUID {
	return e.ID
}

// GetCreatedAt returns the CreatedAt
func (e *Label) GetCreatedAt() time.Time {
	return e.CreatedAt
}

// GetName returns the Name
func (e *Label) GetName() string {
	return e.Name
}

// GetOrganizationID returns the OrganizationID
func (e *Label) GetOrganizationID() uuid.UUID {
	return e.OrganizationID
}

// GetUpdatedAt returns the UpdatedAt
func (e *Label) GetUpdatedAt() time.Time {
	return e.UpdatedAt
}

// Events returns the domain events
func (e *Label) Events() []events.DomainEvent {
	return e.events
}

// ClearEvents clears the domain events
func (e *Label) ClearEvents() {
	e.events = []events.DomainEvent{}
}

// addEvent adds a domain event
func (e *Label) addEvent(event events.DomainEvent) {
	e.events = append(e.events, event)
}
