// Code generated by archesai-codegen. DO NOT EDIT.

package entities

import (
	"fmt"
	"time"

	"github.com/archesai/archesai/internal/core/events"
	"github.com/google/uuid"
)

// SessionAuthProvider represents the enumeration of valid values for AuthProvider
type SessionAuthProvider string

// Valid AuthProvider values
const (
	SessionAuthProviderLocal     SessionAuthProvider = "local"
	SessionAuthProviderGoogle    SessionAuthProvider = "google"
	SessionAuthProviderGithub    SessionAuthProvider = "github"
	SessionAuthProviderMicrosoft SessionAuthProvider = "microsoft"
	SessionAuthProviderApple     SessionAuthProvider = "apple"
)

// String returns the string representation
func (e SessionAuthProvider) String() string {
	return string(e)
}

// IsValid checks if the value is valid
func (e SessionAuthProvider) IsValid() bool {
	switch e {
	case SessionAuthProviderLocal:
		return true
	case SessionAuthProviderGoogle:
		return true
	case SessionAuthProviderGithub:
		return true
	case SessionAuthProviderMicrosoft:
		return true
	case SessionAuthProviderApple:
		return true
	default:
		return false
	}
}

// ParseSessionAuthProvider parses a string into the enum type
func ParseSessionAuthProvider(s string) (SessionAuthProvider, error) {
	v := SessionAuthProvider(s)
	if !v.IsValid() {
		return "", fmt.Errorf("invalid AuthProvider: %s", s)
	}
	return v, nil
}

// Session represents Schema for Session entity
type Session struct {

	// ID Unique identifier for the resource
	ID uuid.UUID `json:"id" yaml:"id"`

	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`

	// AuthMethod The authentication method used (magic_link, oauth_google, oauth_github, etc.)
	AuthMethod *string `json:"authMethod" yaml:"authMethod"`

	// AuthProvider The authentication provider (google, github, microsoft, local)
	AuthProvider *SessionAuthProvider `json:"authProvider" yaml:"authProvider"`

	// ExpiresAt The expiration date of the session
	ExpiresAt time.Time `json:"expiresAt" yaml:"expiresAt"`

	// IPAddress The IP address of the session
	IPAddress *string `json:"ipAddress" yaml:"ipAddress"`

	// OrganizationID The organization ID for this session (nullable for users without org)
	OrganizationID *uuid.UUID `json:"organizationID" yaml:"organizationID"`

	// Token The session token
	Token string `json:"token" yaml:"token"`

	// UserAgent The user agent of the session
	UserAgent *string `json:"userAgent" yaml:"userAgent"`

	// UserID The user who owns this session
	UserID uuid.UUID `json:"userID" yaml:"userID"`

	events []events.DomainEvent `json:"-" yaml:"-"`
}

// NewSession creates a new Session entity.
// All required fields must be provided and valid.
func NewSession(
	authMethod *string,
	authProvider *SessionAuthProvider,
	expiresAt time.Time,
	ipAddress *string,
	organizationID *uuid.UUID,
	token string,
	userAgent *string,
	userID uuid.UUID,
) (*Session, error) {
	// Validate required fields
	// Nullable enum - validate only if present
	if authProvider != nil && !(*authProvider).IsValid() {
		return nil, fmt.Errorf("invalid AuthProvider: %s", *authProvider)
	}
	if token == "" {
		return nil, fmt.Errorf("Token cannot be empty")
	}
	if userID == uuid.Nil {
		return nil, fmt.Errorf("UserID cannot be nil UUID")
	}
	now := time.Now().UTC()
	id := uuid.New()
	session := &Session{
		ID:             id,
		CreatedAt:      now,
		UpdatedAt:      now,
		AuthMethod:     authMethod,
		AuthProvider:   authProvider,
		ExpiresAt:      expiresAt,
		IPAddress:      ipAddress,
		OrganizationID: organizationID,
		Token:          token,
		UserAgent:      userAgent,
		UserID:         userID,
		events:         []events.DomainEvent{},
	}
	session.addEvent(events.NewSessionCreatedEvent(id))

	return session, nil
}

// GetID returns the ID
func (e *Session) GetID() uuid.UUID {
	return e.ID
}

// GetCreatedAt returns the CreatedAt
func (e *Session) GetCreatedAt() time.Time {
	return e.CreatedAt
}

// GetUpdatedAt returns the UpdatedAt
func (e *Session) GetUpdatedAt() time.Time {
	return e.UpdatedAt
}

// GetAuthMethod returns the AuthMethod
func (e *Session) GetAuthMethod() *string {
	return e.AuthMethod
}

// GetAuthProvider returns the AuthProvider
func (e *Session) GetAuthProvider() *SessionAuthProvider {
	return e.AuthProvider
}

// GetExpiresAt returns the ExpiresAt
func (e *Session) GetExpiresAt() time.Time {
	return e.ExpiresAt
}

// GetIPAddress returns the IPAddress
func (e *Session) GetIPAddress() *string {
	return e.IPAddress
}

// GetOrganizationID returns the OrganizationID
func (e *Session) GetOrganizationID() *uuid.UUID {
	return e.OrganizationID
}

// GetToken returns the Token
func (e *Session) GetToken() string {
	return e.Token
}

// GetUserAgent returns the UserAgent
func (e *Session) GetUserAgent() *string {
	return e.UserAgent
}

// GetUserID returns the UserID
func (e *Session) GetUserID() uuid.UUID {
	return e.UserID
}

// Events returns the domain events
func (e *Session) Events() []events.DomainEvent {
	return e.events
}

// ClearEvents clears the domain events
func (e *Session) ClearEvents() {
	e.events = []events.DomainEvent{}
}

// addEvent adds a domain event
func (e *Session) addEvent(event events.DomainEvent) {
	e.events = append(e.events, event)
}
