// Code generated by archesai-codegen. DO NOT EDIT.

package entities

import (
	"fmt"
	"time"

	"github.com/archesai/archesai/internal/core/events"
	"github.com/google/uuid"
)

// Session represents Schema for Session entity
type Session struct {
	ID             uuid.UUID            `json:"id" yaml:"id"`                                             // Unique identifier for the resource
	AuthMethod     *string              `json:"authMethod,omitempty" yaml:"authMethod,omitempty"`         // The authentication method used (magic_link, oauth_google, oauth_github, etc.)
	AuthProvider   *string              `json:"authProvider,omitempty" yaml:"authProvider,omitempty"`     // The authentication provider (google, github, microsoft, local)
	CreatedAt      time.Time            `json:"createdAt" yaml:"createdAt"`                               // The date and time when the resource was created
	ExpiresAt      time.Time            `json:"expiresAt" yaml:"expiresAt"`                               // The expiration date of the session
	IPAddress      *string              `json:"ipAddress,omitempty" yaml:"ipAddress,omitempty"`           // The IP address of the session
	OrganizationID *uuid.UUID           `json:"organizationID,omitempty" yaml:"organizationID,omitempty"` // The organization ID for this session (nullable for users without org)
	Token          string               `json:"token" yaml:"token"`                                       // The session token
	UpdatedAt      time.Time            `json:"updatedAt" yaml:"updatedAt"`                               // The date and time when the resource was last updated
	UserAgent      *string              `json:"userAgent,omitempty" yaml:"userAgent,omitempty"`           // The user agent of the session
	UserID         uuid.UUID            `json:"userID" yaml:"userID"`                                     // The user who owns this session
	events         []events.DomainEvent `json:"-" yaml:"-"`
}

// NewSession creates a new Session entity.
// All required fields must be provided and valid.
func NewSession(
	expiresAt time.Time,
	token string,
	userID uuid.UUID,
) (*Session, error) {
	// Validate required fields
	if token == "" {
		return nil, fmt.Errorf("Token cannot be empty")
	}
	now := time.Now().UTC()
	id := uuid.New()
	session := &Session{
		ID:        id,
		CreatedAt: now,
		ExpiresAt: expiresAt,
		Token:     token,
		UpdatedAt: now,
		UserID:    userID,
		events:    []events.DomainEvent{},
	}
	session.addEvent(events.NewSessionCreatedEvent(id))

	return session, nil
}

// GetID returns the ID
func (e *Session) GetID() uuid.UUID {
	return e.ID
}

// GetAuthMethod returns the AuthMethod
func (e *Session) GetAuthMethod() *string {
	return e.AuthMethod
}

// GetAuthProvider returns the AuthProvider
func (e *Session) GetAuthProvider() *string {
	return e.AuthProvider
}

// GetCreatedAt returns the CreatedAt
func (e *Session) GetCreatedAt() time.Time {
	return e.CreatedAt
}

// GetExpiresAt returns the ExpiresAt
func (e *Session) GetExpiresAt() time.Time {
	return e.ExpiresAt
}

// GetIPAddress returns the IPAddress
func (e *Session) GetIPAddress() *string {
	return e.IPAddress
}

// GetOrganizationID returns the OrganizationID
func (e *Session) GetOrganizationID() *uuid.UUID {
	return e.OrganizationID
}

// GetToken returns the Token
func (e *Session) GetToken() string {
	return e.Token
}

// GetUpdatedAt returns the UpdatedAt
func (e *Session) GetUpdatedAt() time.Time {
	return e.UpdatedAt
}

// GetUserAgent returns the UserAgent
func (e *Session) GetUserAgent() *string {
	return e.UserAgent
}

// GetUserID returns the UserID
func (e *Session) GetUserID() uuid.UUID {
	return e.UserID
}

// Events returns the domain events
func (e *Session) Events() []events.DomainEvent {
	return e.events
}

// ClearEvents clears the domain events
func (e *Session) ClearEvents() {
	e.events = []events.DomainEvent{}
}

// addEvent adds a domain event
func (e *Session) addEvent(event events.DomainEvent) {
	e.events = append(e.events, event)
}
