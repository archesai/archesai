// Code generated by archesai/codegen. DO NOT EDIT.

package entities

import (
	"fmt"
	"time"

	"github.com/archesai/archesai/internal/core/events"
	"github.com/google/uuid"
)

// Tool represents Schema for Tool entity
type Tool struct {
	CreatedAt      time.Time            `json:"createdAt" yaml:"createdAt"`           // The date and time when the resource was created
	Description    string               `json:"description" yaml:"description"`       // The tool description
	ID             uuid.UUID            `json:"id" yaml:"id"`                         // Unique identifier for the resource
	InputMimeType  string               `json:"inputMimeType" yaml:"inputMimeType"`   // The MIME type of the input for the tool, e.g. text/plain
	Name           string               `json:"name" yaml:"name"`                     // The name of the tool
	OrganizationID uuid.UUID            `json:"organizationID" yaml:"organizationID"` // The organization that owns this tool
	OutputMimeType string               `json:"outputMimeType" yaml:"outputMimeType"` // The MIME type of the output for the tool, e.g. text/plain
	UpdatedAt      time.Time            `json:"updatedAt" yaml:"updatedAt"`           // The date and time when the resource was last updated
	events         []events.DomainEvent `json:"-" yaml:"-"`
}

// NewTool creates a new Tool entity
func NewTool(
	description string,
	inputMimeType string,
	name string,
	organizationID uuid.UUID,
	outputMimeType string,
) (*Tool, error) {
	if description == "" {
		return nil, fmt.Errorf("Description cannot be empty")
	}
	if inputMimeType == "" {
		return nil, fmt.Errorf("InputMimeType cannot be empty")
	}
	if name == "" {
		return nil, fmt.Errorf("Name cannot be empty")
	}
	if outputMimeType == "" {
		return nil, fmt.Errorf("OutputMimeType cannot be empty")
	}

	tool := &Tool{
		CreatedAt:      time.Now().UTC(),
		Description:    description,
		ID:             uuid.New(),
		InputMimeType:  inputMimeType,
		Name:           name,
		OrganizationID: organizationID,
		OutputMimeType: outputMimeType,
		UpdatedAt:      time.Now().UTC(),
		events:         []events.DomainEvent{},
	}
	tool.addEvent(events.NewToolCreatedEvent(tool.ID))

	return tool, nil
}

// GetCreatedAt returns the CreatedAt
func (e *Tool) GetCreatedAt() time.Time {
	return e.CreatedAt
}

// GetDescription returns the Description
func (e *Tool) GetDescription() string {
	return e.Description
}

// GetID returns the ID
func (e *Tool) GetID() uuid.UUID {
	return e.ID
}

// GetInputMimeType returns the InputMimeType
func (e *Tool) GetInputMimeType() string {
	return e.InputMimeType
}

// GetName returns the Name
func (e *Tool) GetName() string {
	return e.Name
}

// GetOrganizationID returns the OrganizationID
func (e *Tool) GetOrganizationID() uuid.UUID {
	return e.OrganizationID
}

// GetOutputMimeType returns the OutputMimeType
func (e *Tool) GetOutputMimeType() string {
	return e.OutputMimeType
}

// GetUpdatedAt returns the UpdatedAt
func (e *Tool) GetUpdatedAt() time.Time {
	return e.UpdatedAt
}

// Events returns the domain events
func (e *Tool) Events() []events.DomainEvent {
	return e.events
}

// ClearEvents clears the domain events
func (e *Tool) ClearEvents() {
	e.events = []events.DomainEvent{}
}

// addEvent adds a domain event
func (e *Tool) addEvent(event events.DomainEvent) {
	e.events = append(e.events, event)
}

// ReconstructTool reconstructs a Tool from persistence
func ReconstructTool(
	createdAt time.Time,
	description string,
	id uuid.UUID,
	inputMimeType string,
	name string,
	organizationID uuid.UUID,
	outputMimeType string,
	updatedAt time.Time,
) *Tool {
	return &Tool{
		CreatedAt:      createdAt,
		Description:    description,
		ID:             id,
		InputMimeType:  inputMimeType,
		Name:           name,
		OrganizationID: organizationID,
		OutputMimeType: outputMimeType,
		UpdatedAt:      updatedAt,
		events:         []events.DomainEvent{},
	}
}
