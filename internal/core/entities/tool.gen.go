// Code generated by archesai-codegen. DO NOT EDIT.

package entities

import (
	"fmt"
	"time"

	"github.com/archesai/archesai/internal/core/events"
	"github.com/google/uuid"
)

// Tool represents Schema for Tool entity
type Tool struct {

	// ID Unique identifier for the resource
	ID uuid.UUID `json:"id" yaml:"id"`

	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`

	// Description The tool description
	Description string `json:"description" yaml:"description"`

	// InputMimeType The MIME type of the input for the tool, e.g. text/plain
	InputMimeType string `json:"inputMimeType" yaml:"inputMimeType"`

	// Name The name of the tool
	Name string `json:"name" yaml:"name"`

	// OrganizationID The organization that owns this tool
	OrganizationID uuid.UUID `json:"organizationID" yaml:"organizationID"`

	// OutputMimeType The MIME type of the output for the tool, e.g. text/plain
	OutputMimeType string `json:"outputMimeType" yaml:"outputMimeType"`

	events []events.DomainEvent `json:"-" yaml:"-"`
}

// NewTool creates a new Tool entity.
// All required fields must be provided and valid.
func NewTool(
	description string,
	inputMimeType string,
	name string,
	organizationID uuid.UUID,
	outputMimeType string,
) (*Tool, error) {
	// Validate required fields
	if description == "" {
		return nil, fmt.Errorf("Description cannot be empty")
	}
	if inputMimeType == "" {
		return nil, fmt.Errorf("InputMimeType cannot be empty")
	}
	if name == "" {
		return nil, fmt.Errorf("Name cannot be empty")
	}
	if outputMimeType == "" {
		return nil, fmt.Errorf("OutputMimeType cannot be empty")
	}
	now := time.Now().UTC()
	id := uuid.New()
	tool := &Tool{
		ID:             id,
		CreatedAt:      now,
		UpdatedAt:      now,
		Description:    description,
		InputMimeType:  inputMimeType,
		Name:           name,
		OrganizationID: organizationID,
		OutputMimeType: outputMimeType,
		events:         []events.DomainEvent{},
	}
	tool.addEvent(events.NewToolCreatedEvent(id))

	return tool, nil
}

// GetID returns the ID
func (e *Tool) GetID() uuid.UUID {
	return e.ID
}

// GetCreatedAt returns the CreatedAt
func (e *Tool) GetCreatedAt() time.Time {
	return e.CreatedAt
}

// GetUpdatedAt returns the UpdatedAt
func (e *Tool) GetUpdatedAt() time.Time {
	return e.UpdatedAt
}

// GetDescription returns the Description
func (e *Tool) GetDescription() string {
	return e.Description
}

// GetInputMimeType returns the InputMimeType
func (e *Tool) GetInputMimeType() string {
	return e.InputMimeType
}

// GetName returns the Name
func (e *Tool) GetName() string {
	return e.Name
}

// GetOrganizationID returns the OrganizationID
func (e *Tool) GetOrganizationID() uuid.UUID {
	return e.OrganizationID
}

// GetOutputMimeType returns the OutputMimeType
func (e *Tool) GetOutputMimeType() string {
	return e.OutputMimeType
}

// Events returns the domain events
func (e *Tool) Events() []events.DomainEvent {
	return e.events
}

// ClearEvents clears the domain events
func (e *Tool) ClearEvents() {
	e.events = []events.DomainEvent{}
}

// addEvent adds a domain event
func (e *Tool) addEvent(event events.DomainEvent) {
	e.events = append(e.events, event)
}
