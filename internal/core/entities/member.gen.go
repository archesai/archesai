// Code generated by archesai/codegen. DO NOT EDIT.

package entities

import (
	"fmt"
	"time"

	"github.com/archesai/archesai/internal/core/events"
	"github.com/google/uuid"
)

// MemberRole represents the enumeration of valid values for Role
type MemberRole string

// Valid Role values
const (
	MemberRoleAdmin MemberRole = "admin"
	MemberRoleOwner MemberRole = "owner"
	MemberRoleBasic MemberRole = "basic"
)

// String returns the string representation
func (e MemberRole) String() string {
	return string(e)
}

// IsValid checks if the value is valid
func (e MemberRole) IsValid() bool {
	switch e {
	case MemberRoleAdmin:
		return true
	case MemberRoleOwner:
		return true
	case MemberRoleBasic:
		return true
	default:
		return false
	}
}

// ParseMemberRole parses a string into the enum type
func ParseMemberRole(s string) (MemberRole, error) {
	v := MemberRole(s)
	if !v.IsValid() {
		return "", fmt.Errorf("invalid Role: %s", s)
	}
	return v, nil
}

// Member represents Schema for Member entity
type Member struct {
	CreatedAt      time.Time            `json:"createdAt" yaml:"createdAt"`           // The date and time when the resource was created
	ID             uuid.UUID            `json:"id" yaml:"id"`                         // Unique identifier for the resource
	OrganizationID uuid.UUID            `json:"organizationID" yaml:"organizationID"` // The organization this member belongs to
	Role           MemberRole           `json:"role" yaml:"role"`                     // The role of the member
	UpdatedAt      time.Time            `json:"updatedAt" yaml:"updatedAt"`           // The date and time when the resource was last updated
	UserID         uuid.UUID            `json:"userID" yaml:"userID"`                 // The user who is a member of the organization
	events         []events.DomainEvent `json:"-" yaml:"-"`
}

// NewMember creates a new Member entity with validation.
// All required fields must be provided and valid.
func NewMember(
	organizationID uuid.UUID,
	role MemberRole,
	userID uuid.UUID,
) (*Member, error) {
	// Validate required fields
	if !role.IsValid() {
		return nil, fmt.Errorf("invalid Role: %s", role)
	}

	now := time.Now().UTC()
	member := &Member{
		CreatedAt:      now,
		ID:             uuid.New(),
		OrganizationID: organizationID,
		Role:           role,
		UpdatedAt:      now,
		UserID:         userID,
		events:         []events.DomainEvent{},
	}
	member.addEvent(events.NewMemberCreatedEvent(member.ID))

	return member, nil
}

// GetCreatedAt returns the CreatedAt
func (e *Member) GetCreatedAt() time.Time {
	return e.CreatedAt
}

// GetID returns the ID
func (e *Member) GetID() uuid.UUID {
	return e.ID
}

// GetOrganizationID returns the OrganizationID
func (e *Member) GetOrganizationID() uuid.UUID {
	return e.OrganizationID
}

// GetRole returns the Role
func (e *Member) GetRole() string {
	return string(e.Role)
}

// GetUpdatedAt returns the UpdatedAt
func (e *Member) GetUpdatedAt() time.Time {
	return e.UpdatedAt
}

// GetUserID returns the UserID
func (e *Member) GetUserID() uuid.UUID {
	return e.UserID
}

// Events returns the domain events
func (e *Member) Events() []events.DomainEvent {
	return e.events
}

// ClearEvents clears the domain events
func (e *Member) ClearEvents() {
	e.events = []events.DomainEvent{}
}

// addEvent adds a domain event
func (e *Member) addEvent(event events.DomainEvent) {
	e.events = append(e.events, event)
}

// ReconstructMember reconstructs a Member from persistence
func ReconstructMember(
	createdAt time.Time,
	id uuid.UUID,
	organizationID uuid.UUID,
	role string,
	updatedAt time.Time,
	userID uuid.UUID,
) *Member {
	return &Member{
		CreatedAt:      createdAt,
		ID:             id,
		OrganizationID: organizationID,
		Role:           MemberRole(role),
		UpdatedAt:      updatedAt,
		UserID:         userID,
		events:         []events.DomainEvent{},
	}
}
