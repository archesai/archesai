// Code generated by archesai/codegen. DO NOT EDIT.

package entities

import (
	"time"

	"github.com/archesai/archesai/internal/core/events"
	"github.com/google/uuid"
)

// PipelineStep represents Schema for PipelineStep entity
type PipelineStep struct {
	CreatedAt  time.Time            `json:"createdAt" yaml:"createdAt"`   // The date and time when the resource was created
	ID         uuid.UUID            `json:"id" yaml:"id"`                 // Unique identifier for the resource
	PipelineID uuid.UUID            `json:"pipelineID" yaml:"pipelineID"` // The pipeline this step belongs to
	ToolID     uuid.UUID            `json:"toolID" yaml:"toolID"`         // The tool used in this step
	UpdatedAt  time.Time            `json:"updatedAt" yaml:"updatedAt"`   // The date and time when the resource was last updated
	events     []events.DomainEvent `json:"-" yaml:"-"`
}

// NewPipelineStep creates a new PipelineStep entity with validation.
// All required fields must be provided and valid.
func NewPipelineStep(
	pipelineID uuid.UUID,
	toolID uuid.UUID,
) (*PipelineStep, error) {
	// Validate required fields

	now := time.Now().UTC()
	pipelinestep := &PipelineStep{
		CreatedAt:  now,
		ID:         uuid.New(),
		PipelineID: pipelineID,
		ToolID:     toolID,
		UpdatedAt:  now,
		events:     []events.DomainEvent{},
	}
	pipelinestep.addEvent(events.NewPipelineStepCreatedEvent(pipelinestep.ID))

	return pipelinestep, nil
}

// GetCreatedAt returns the CreatedAt
func (e *PipelineStep) GetCreatedAt() time.Time {
	return e.CreatedAt
}

// GetID returns the ID
func (e *PipelineStep) GetID() uuid.UUID {
	return e.ID
}

// GetPipelineID returns the PipelineID
func (e *PipelineStep) GetPipelineID() uuid.UUID {
	return e.PipelineID
}

// GetToolID returns the ToolID
func (e *PipelineStep) GetToolID() uuid.UUID {
	return e.ToolID
}

// GetUpdatedAt returns the UpdatedAt
func (e *PipelineStep) GetUpdatedAt() time.Time {
	return e.UpdatedAt
}

// Events returns the domain events
func (e *PipelineStep) Events() []events.DomainEvent {
	return e.events
}

// ClearEvents clears the domain events
func (e *PipelineStep) ClearEvents() {
	e.events = []events.DomainEvent{}
}

// addEvent adds a domain event
func (e *PipelineStep) addEvent(event events.DomainEvent) {
	e.events = append(e.events, event)
}

// ReconstructPipelineStep reconstructs a PipelineStep from persistence
func ReconstructPipelineStep(
	createdAt time.Time,
	id uuid.UUID,
	pipelineID uuid.UUID,
	toolID uuid.UUID,
	updatedAt time.Time,
) *PipelineStep {
	return &PipelineStep{
		CreatedAt:  createdAt,
		ID:         id,
		PipelineID: pipelineID,
		ToolID:     toolID,
		UpdatedAt:  updatedAt,
		events:     []events.DomainEvent{},
	}
}
