// Code generated by archesai/codegen. DO NOT EDIT.

package entities

import (
	"fmt"
	"time"

	"github.com/archesai/archesai/internal/core/events"
	"github.com/google/uuid"
)

// PipelineStep represents Schema for PipelineStep entity
type PipelineStep struct {
	Config       map[string]interface{} `json:"config,omitempty" yaml:"config,omitempty"`             // Configuration parameters for the tool
	CreatedAt    time.Time              `json:"createdAt" yaml:"createdAt"`                           // The date and time when the resource was created
	Dependencies []uuid.UUID            `json:"dependencies,omitempty" yaml:"dependencies,omitempty"` // IDs of steps this step depends on
	Description  *string                `json:"description,omitempty" yaml:"description,omitempty"`   // Description of what this step does
	ID           uuid.UUID              `json:"id" yaml:"id"`                                         // Unique identifier for the resource
	Name         string                 `json:"name" yaml:"name"`                                     // Name of the step
	PipelineID   uuid.UUID              `json:"pipelineID" yaml:"pipelineID"`                         // The pipeline this step belongs to
	Position     *int                   `json:"position,omitempty" yaml:"position,omitempty"`         // Position in the pipeline for ordering
	Retries      *int                   `json:"retries,omitempty" yaml:"retries,omitempty"`           // Number of retries on failure
	Status       *string                `json:"status,omitempty" yaml:"status,omitempty"`             // Current status of the step
	Timeout      *int                   `json:"timeout,omitempty" yaml:"timeout,omitempty"`           // Timeout in seconds
	ToolID       uuid.UUID              `json:"toolID" yaml:"toolID"`                                 // The tool used in this step
	UpdatedAt    time.Time              `json:"updatedAt" yaml:"updatedAt"`                           // The date and time when the resource was last updated
	events       []events.DomainEvent   `json:"-" yaml:"-"`
}

// NewPipelineStep creates a new PipelineStep entity
func NewPipelineStep(
	name string,
	pipelineID uuid.UUID,
	toolID uuid.UUID,
) (*PipelineStep, error) {
	if name == "" {
		return nil, fmt.Errorf("Name cannot be empty")
	}

	pipelinestep := &PipelineStep{
		CreatedAt:  time.Now().UTC(),
		ID:         uuid.New(),
		Name:       name,
		PipelineID: pipelineID,
		ToolID:     toolID,
		UpdatedAt:  time.Now().UTC(),
		events:     []events.DomainEvent{},
	}
	pipelinestep.addEvent(events.NewPipelineStepCreatedEvent(pipelinestep.ID))

	return pipelinestep, nil
}

// GetConfig returns the Config
func (e *PipelineStep) GetConfig() map[string]interface{} {
	return e.Config
}

// GetCreatedAt returns the CreatedAt
func (e *PipelineStep) GetCreatedAt() time.Time {
	return e.CreatedAt
}

// GetDependencies returns the Dependencies
func (e *PipelineStep) GetDependencies() []uuid.UUID {
	return e.Dependencies
}

// GetDescription returns the Description
func (e *PipelineStep) GetDescription() *string {
	return e.Description
}

// GetID returns the ID
func (e *PipelineStep) GetID() uuid.UUID {
	return e.ID
}

// GetName returns the Name
func (e *PipelineStep) GetName() string {
	return e.Name
}

// GetPipelineID returns the PipelineID
func (e *PipelineStep) GetPipelineID() uuid.UUID {
	return e.PipelineID
}

// GetPosition returns the Position
func (e *PipelineStep) GetPosition() *int {
	return e.Position
}

// GetRetries returns the Retries
func (e *PipelineStep) GetRetries() *int {
	return e.Retries
}

// GetStatus returns the Status
func (e *PipelineStep) GetStatus() *string {
	return e.Status
}

// GetTimeout returns the Timeout
func (e *PipelineStep) GetTimeout() *int {
	return e.Timeout
}

// GetToolID returns the ToolID
func (e *PipelineStep) GetToolID() uuid.UUID {
	return e.ToolID
}

// GetUpdatedAt returns the UpdatedAt
func (e *PipelineStep) GetUpdatedAt() time.Time {
	return e.UpdatedAt
}

// Events returns the domain events
func (e *PipelineStep) Events() []events.DomainEvent {
	return e.events
}

// ClearEvents clears the domain events
func (e *PipelineStep) ClearEvents() {
	e.events = []events.DomainEvent{}
}

// addEvent adds a domain event
func (e *PipelineStep) addEvent(event events.DomainEvent) {
	e.events = append(e.events, event)
}

// ReconstructPipelineStep reconstructs a PipelineStep from persistence
func ReconstructPipelineStep(
	config map[string]interface{},
	createdAt time.Time,
	dependencies []uuid.UUID,
	description *string,
	id uuid.UUID,
	name string,
	pipelineID uuid.UUID,
	position *int,
	retries *int,
	status *string,
	timeout *int,
	toolID uuid.UUID,
	updatedAt time.Time,
) *PipelineStep {
	return &PipelineStep{
		Config:       config,
		CreatedAt:    createdAt,
		Dependencies: dependencies,
		Description:  description,
		ID:           id,
		Name:         name,
		PipelineID:   pipelineID,
		Position:     position,
		Retries:      retries,
		Status:       status,
		Timeout:      timeout,
		ToolID:       toolID,
		UpdatedAt:    updatedAt,
		events:       []events.DomainEvent{},
	}
}
