// Code generated by archesai-codegen. DO NOT EDIT.

package entities

import (
	"fmt"
	"time"

	"github.com/archesai/archesai/internal/core/events"
	"github.com/google/uuid"
)

// User represents Schema for User entity
type User struct {

	// ID Unique identifier for the resource
	ID uuid.UUID `json:"id" yaml:"id"`

	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`

	// Email The user's email address
	Email string `json:"email" yaml:"email"`

	// EmailVerified Whether the user's email has been verified
	EmailVerified bool `json:"emailVerified" yaml:"emailVerified"`

	// Image The user's avatar image URL
	Image *string `json:"image" yaml:"image"`

	// Name The user's display name
	Name string `json:"name" yaml:"name"`

	events []events.DomainEvent `json:"-" yaml:"-"`
}

// NewUser creates a new User entity.
// All required fields must be provided and valid.
func NewUser(
	email string,
	emailVerified bool,
	image *string,
	name string,
) (*User, error) {
	// Validate required fields
	if email == "" {
		return nil, fmt.Errorf("Email cannot be empty")
	}
	if name == "" {
		return nil, fmt.Errorf("Name cannot be empty")
	}
	now := time.Now().UTC()
	id := uuid.New()
	user := &User{
		ID:            id,
		CreatedAt:     now,
		UpdatedAt:     now,
		Email:         email,
		EmailVerified: emailVerified,
		Image:         image,
		Name:          name,
		events:        []events.DomainEvent{},
	}
	user.addEvent(events.NewUserCreatedEvent(id))

	return user, nil
}

// GetID returns the ID
func (e *User) GetID() uuid.UUID {
	return e.ID
}

// GetCreatedAt returns the CreatedAt
func (e *User) GetCreatedAt() time.Time {
	return e.CreatedAt
}

// GetUpdatedAt returns the UpdatedAt
func (e *User) GetUpdatedAt() time.Time {
	return e.UpdatedAt
}

// GetEmail returns the Email
func (e *User) GetEmail() string {
	return e.Email
}

// GetEmailVerified returns the EmailVerified
func (e *User) GetEmailVerified() bool {
	return e.EmailVerified
}

// GetImage returns the Image
func (e *User) GetImage() *string {
	return e.Image
}

// GetName returns the Name
func (e *User) GetName() string {
	return e.Name
}

// Events returns the domain events
func (e *User) Events() []events.DomainEvent {
	return e.events
}

// ClearEvents clears the domain events
func (e *User) ClearEvents() {
	e.events = []events.DomainEvent{}
}

// addEvent adds a domain event
func (e *User) addEvent(event events.DomainEvent) {
	e.events = append(e.events, event)
}
