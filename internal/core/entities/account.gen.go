// Code generated by archesai-codegen. DO NOT EDIT.

package entities

import (
	"fmt"
	"time"

	"github.com/archesai/archesai/internal/core/events"
	"github.com/google/uuid"
)

// AccountProvider represents the enumeration of valid values for Provider
type AccountProvider string

// Valid Provider values
const (
	AccountProviderLocal     AccountProvider = "local"
	AccountProviderGoogle    AccountProvider = "google"
	AccountProviderGithub    AccountProvider = "github"
	AccountProviderMicrosoft AccountProvider = "microsoft"
	AccountProviderApple     AccountProvider = "apple"
)

// String returns the string representation
func (e AccountProvider) String() string {
	return string(e)
}

// IsValid checks if the value is valid
func (e AccountProvider) IsValid() bool {
	switch e {
	case AccountProviderLocal:
		return true
	case AccountProviderGoogle:
		return true
	case AccountProviderGithub:
		return true
	case AccountProviderMicrosoft:
		return true
	case AccountProviderApple:
		return true
	default:
		return false
	}
}

// ParseAccountProvider parses a string into the enum type
func ParseAccountProvider(s string) (AccountProvider, error) {
	v := AccountProvider(s)
	if !v.IsValid() {
		return "", fmt.Errorf("invalid Provider: %s", s)
	}
	return v, nil
}

// Account represents Schema for Account entity (authentication provider account)
type Account struct {

	// ID Unique identifier for the resource
	ID uuid.UUID `json:"id" yaml:"id"`

	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`

	// AccessToken The OAuth access token
	AccessToken *string `json:"accessToken" yaml:"accessToken"`

	// AccessTokenExpiresAt The access token expiration timestamp
	AccessTokenExpiresAt *time.Time `json:"accessTokenExpiresAt" yaml:"accessTokenExpiresAt"`

	// AccountIdentifier The unique identifier for the account from the provider
	AccountIdentifier string `json:"accountIdentifier" yaml:"accountIdentifier"`

	// IDToken The OpenID Connect ID token
	IDToken *string `json:"idToken" yaml:"idToken"`

	// Provider The authentication provider identifier
	Provider AccountProvider `json:"provider" yaml:"provider"`

	// RefreshToken The OAuth refresh token
	RefreshToken *string `json:"refreshToken" yaml:"refreshToken"`

	// RefreshTokenExpiresAt The refresh token expiration timestamp
	RefreshTokenExpiresAt *time.Time `json:"refreshTokenExpiresAt" yaml:"refreshTokenExpiresAt"`

	// Scope The OAuth scope granted
	Scope *string `json:"scope" yaml:"scope"`

	// UserID The user ID this account belongs to
	UserID uuid.UUID `json:"userID" yaml:"userID"`

	events []events.DomainEvent `json:"-" yaml:"-"`
}

// NewAccount creates a new Account entity.
// All required fields must be provided and valid.
func NewAccount(
	accessToken *string,
	accessTokenExpiresAt *time.Time,
	accountIdentifier string,
	idToken *string,
	provider AccountProvider,
	refreshToken *string,
	refreshTokenExpiresAt *time.Time,
	scope *string,
	userID uuid.UUID,
) (*Account, error) {
	// Validate required fields
	if accountIdentifier == "" {
		return nil, fmt.Errorf("AccountIdentifier cannot be empty")
	}
	if !provider.IsValid() {
		return nil, fmt.Errorf("invalid Provider: %s", provider)
	}
	now := time.Now().UTC()
	id := uuid.New()
	account := &Account{
		ID:                    id,
		CreatedAt:             now,
		UpdatedAt:             now,
		AccessToken:           accessToken,
		AccessTokenExpiresAt:  accessTokenExpiresAt,
		AccountIdentifier:     accountIdentifier,
		IDToken:               idToken,
		Provider:              provider,
		RefreshToken:          refreshToken,
		RefreshTokenExpiresAt: refreshTokenExpiresAt,
		Scope:                 scope,
		UserID:                userID,
		events:                []events.DomainEvent{},
	}
	account.addEvent(events.NewAccountCreatedEvent(id))

	return account, nil
}

// GetID returns the ID
func (e *Account) GetID() uuid.UUID {
	return e.ID
}

// GetCreatedAt returns the CreatedAt
func (e *Account) GetCreatedAt() time.Time {
	return e.CreatedAt
}

// GetUpdatedAt returns the UpdatedAt
func (e *Account) GetUpdatedAt() time.Time {
	return e.UpdatedAt
}

// GetAccessToken returns the AccessToken
func (e *Account) GetAccessToken() *string {
	return e.AccessToken
}

// GetAccessTokenExpiresAt returns the AccessTokenExpiresAt
func (e *Account) GetAccessTokenExpiresAt() *time.Time {
	return e.AccessTokenExpiresAt
}

// GetAccountIdentifier returns the AccountIdentifier
func (e *Account) GetAccountIdentifier() string {
	return e.AccountIdentifier
}

// GetIDToken returns the IDToken
func (e *Account) GetIDToken() *string {
	return e.IDToken
}

// GetProvider returns the Provider
func (e *Account) GetProvider() AccountProvider {
	return e.Provider
}

// GetRefreshToken returns the RefreshToken
func (e *Account) GetRefreshToken() *string {
	return e.RefreshToken
}

// GetRefreshTokenExpiresAt returns the RefreshTokenExpiresAt
func (e *Account) GetRefreshTokenExpiresAt() *time.Time {
	return e.RefreshTokenExpiresAt
}

// GetScope returns the Scope
func (e *Account) GetScope() *string {
	return e.Scope
}

// GetUserID returns the UserID
func (e *Account) GetUserID() uuid.UUID {
	return e.UserID
}

// Events returns the domain events
func (e *Account) Events() []events.DomainEvent {
	return e.events
}

// ClearEvents clears the domain events
func (e *Account) ClearEvents() {
	e.events = []events.DomainEvent{}
}

// addEvent adds a domain event
func (e *Account) addEvent(event events.DomainEvent) {
	e.events = append(e.events, event)
}
