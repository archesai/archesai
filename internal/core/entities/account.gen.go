// Code generated by archesai/codegen. DO NOT EDIT.

package entities

import (
	"fmt"
	"time"

	"github.com/archesai/archesai/internal/core/events"
	"github.com/google/uuid"
)

// AccountProvider represents the enumeration of valid values for Provider
type AccountProvider string

// Valid Provider values
const (
	AccountProviderLocal     AccountProvider = "local"
	AccountProviderGoogle    AccountProvider = "google"
	AccountProviderGithub    AccountProvider = "github"
	AccountProviderMicrosoft AccountProvider = "microsoft"
	AccountProviderApple     AccountProvider = "apple"
)

// String returns the string representation
func (e AccountProvider) String() string {
	return string(e)
}

// IsValid checks if the value is valid
func (e AccountProvider) IsValid() bool {
	switch e {
	case AccountProviderLocal:
		return true
	case AccountProviderGoogle:
		return true
	case AccountProviderGithub:
		return true
	case AccountProviderMicrosoft:
		return true
	case AccountProviderApple:
		return true
	default:
		return false
	}
}

// ParseAccountProvider parses a string into the enum type
func ParseAccountProvider(s string) (AccountProvider, error) {
	v := AccountProvider(s)
	if !v.IsValid() {
		return "", fmt.Errorf("invalid Provider: %s", s)
	}
	return v, nil
}

// Account represents Schema for Account entity (authentication provider account)
type Account struct {
	AccessToken           *string              `json:"accessToken,omitempty" yaml:"accessToken,omitempty"`                     // The OAuth access token
	AccessTokenExpiresAt  *time.Time           `json:"accessTokenExpiresAt,omitempty" yaml:"accessTokenExpiresAt,omitempty"`   // The access token expiration timestamp
	AccountIdentifier     string               `json:"accountIdentifier" yaml:"accountIdentifier"`                             // The unique identifier for the account from the provider
	CreatedAt             time.Time            `json:"createdAt" yaml:"createdAt"`                                             // The date and time when the resource was created
	ID                    uuid.UUID            `json:"id" yaml:"id"`                                                           // Unique identifier for the resource
	IdToken               *string              `json:"idToken,omitempty" yaml:"idToken,omitempty"`                             // The OpenID Connect ID token
	Provider              AccountProvider      `json:"provider" yaml:"provider"`                                               // The authentication provider identifier
	RefreshToken          *string              `json:"refreshToken,omitempty" yaml:"refreshToken,omitempty"`                   // The OAuth refresh token
	RefreshTokenExpiresAt *time.Time           `json:"refreshTokenExpiresAt,omitempty" yaml:"refreshTokenExpiresAt,omitempty"` // The refresh token expiration timestamp
	Scope                 *string              `json:"scope,omitempty" yaml:"scope,omitempty"`                                 // The OAuth scope granted
	UpdatedAt             time.Time            `json:"updatedAt" yaml:"updatedAt"`                                             // The date and time when the resource was last updated
	UserID                uuid.UUID            `json:"userID" yaml:"userID"`                                                   // The user ID this account belongs to
	events                []events.DomainEvent `json:"-" yaml:"-"`
}

// NewAccount creates a new Account entity with validation.
// All required fields must be provided and valid.
func NewAccount(
	accountIdentifier string,
	provider AccountProvider,
	userID uuid.UUID,
) (*Account, error) {
	// Validate required fields
	if accountIdentifier == "" {
		return nil, fmt.Errorf("AccountIdentifier cannot be empty")
	}
	if !provider.IsValid() {
		return nil, fmt.Errorf("invalid Provider: %s", provider)
	}

	now := time.Now().UTC()
	account := &Account{
		AccountIdentifier: accountIdentifier,
		CreatedAt:         now,
		ID:                uuid.New(),
		Provider:          provider,
		UpdatedAt:         now,
		UserID:            userID,
		events:            []events.DomainEvent{},
	}
	account.addEvent(events.NewAccountCreatedEvent(account.ID))

	return account, nil
}

// GetAccessToken returns the AccessToken
func (e *Account) GetAccessToken() *string {
	return e.AccessToken
}

// GetAccessTokenExpiresAt returns the AccessTokenExpiresAt
func (e *Account) GetAccessTokenExpiresAt() *time.Time {
	return e.AccessTokenExpiresAt
}

// GetAccountIdentifier returns the AccountIdentifier
func (e *Account) GetAccountIdentifier() string {
	return e.AccountIdentifier
}

// GetCreatedAt returns the CreatedAt
func (e *Account) GetCreatedAt() time.Time {
	return e.CreatedAt
}

// GetID returns the ID
func (e *Account) GetID() uuid.UUID {
	return e.ID
}

// GetIdToken returns the IdToken
func (e *Account) GetIdToken() *string {
	return e.IdToken
}

// GetProvider returns the Provider
func (e *Account) GetProvider() string {
	return string(e.Provider)
}

// GetRefreshToken returns the RefreshToken
func (e *Account) GetRefreshToken() *string {
	return e.RefreshToken
}

// GetRefreshTokenExpiresAt returns the RefreshTokenExpiresAt
func (e *Account) GetRefreshTokenExpiresAt() *time.Time {
	return e.RefreshTokenExpiresAt
}

// GetScope returns the Scope
func (e *Account) GetScope() *string {
	return e.Scope
}

// GetUpdatedAt returns the UpdatedAt
func (e *Account) GetUpdatedAt() time.Time {
	return e.UpdatedAt
}

// GetUserID returns the UserID
func (e *Account) GetUserID() uuid.UUID {
	return e.UserID
}

// Events returns the domain events
func (e *Account) Events() []events.DomainEvent {
	return e.events
}

// ClearEvents clears the domain events
func (e *Account) ClearEvents() {
	e.events = []events.DomainEvent{}
}

// addEvent adds a domain event
func (e *Account) addEvent(event events.DomainEvent) {
	e.events = append(e.events, event)
}

// ReconstructAccount reconstructs a Account from persistence
func ReconstructAccount(
	accessToken *string,
	accessTokenExpiresAt *time.Time,
	accountIdentifier string,
	createdAt time.Time,
	id uuid.UUID,
	idToken *string,
	provider string,
	refreshToken *string,
	refreshTokenExpiresAt *time.Time,
	scope *string,
	updatedAt time.Time,
	userID uuid.UUID,
) *Account {
	return &Account{
		AccessToken:           accessToken,
		AccessTokenExpiresAt:  accessTokenExpiresAt,
		AccountIdentifier:     accountIdentifier,
		CreatedAt:             createdAt,
		ID:                    id,
		IdToken:               idToken,
		Provider:              AccountProvider(provider),
		RefreshToken:          refreshToken,
		RefreshTokenExpiresAt: refreshTokenExpiresAt,
		Scope:                 scope,
		UpdatedAt:             updatedAt,
		UserID:                userID,
		events:                []events.DomainEvent{},
	}
}
