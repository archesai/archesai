// Code generated by archesai/codegen. DO NOT EDIT.

package entities

import (
	"fmt"
	"time"

	"github.com/archesai/archesai/internal/core/events"
	"github.com/google/uuid"
)

// Artifact represents Schema for Artifact entity
type Artifact struct {
	CreatedAt      time.Time            `json:"createdAt" yaml:"createdAt"`                           // The date and time when the resource was created
	Credits        int32                `json:"credits" yaml:"credits"`                               // The number of credits required to access this artifact. This is used for metering and billing purposes.
	Description    *string              `json:"description,omitempty" yaml:"description,omitempty"`   // The artifact's description
	ID             uuid.UUID            `json:"id" yaml:"id"`                                         // Unique identifier for the resource
	MimeType       string               `json:"mimeType" yaml:"mimeType"`                             // The MIME type of the artifact, e.g. image/png
	Name           *string              `json:"name,omitempty" yaml:"name,omitempty"`                 // The name of the artifact, used for display purposes
	OrganizationID uuid.UUID            `json:"organizationID" yaml:"organizationID"`                 // The organization that owns this artifact
	PreviewImage   *string              `json:"previewImage,omitempty" yaml:"previewImage,omitempty"` // The URL of the preview image for this artifact. This is used for displaying a thumbnail in the UI.
	ProducerID     *uuid.UUID           `json:"producerID,omitempty" yaml:"producerID,omitempty"`     // The ID of the entity that produced this artifact
	Text           *string              `json:"text,omitempty" yaml:"text,omitempty"`                 // The artifact text
	UpdatedAt      time.Time            `json:"updatedAt" yaml:"updatedAt"`                           // The date and time when the resource was last updated
	events         []events.DomainEvent `json:"-" yaml:"-"`
}

// NewArtifact creates a new Artifact entity
func NewArtifact(
	credits int32,
	mimeType string,
	organizationID uuid.UUID,
) (*Artifact, error) {
	if mimeType == "" {
		return nil, fmt.Errorf("MimeType cannot be empty")
	}
	id := uuid.New()
	now := time.Now().UTC()

	artifact := &Artifact{
		CreatedAt:      now,
		Credits:        credits,
		ID:             id,
		MimeType:       mimeType,
		OrganizationID: organizationID,
		UpdatedAt:      now,
		events:         []events.DomainEvent{},
	}
	artifact.addEvent(events.NewArtifactCreatedEvent(artifact.ID))

	return artifact, nil
}

// GetCreatedAt returns the CreatedAt
func (e *Artifact) GetCreatedAt() time.Time {
	return e.CreatedAt
}

// GetCredits returns the Credits
func (e *Artifact) GetCredits() int32 {
	return e.Credits
}

// GetDescription returns the Description
func (e *Artifact) GetDescription() *string {
	return e.Description
}

// GetID returns the ID
func (e *Artifact) GetID() uuid.UUID {
	return e.ID
}

// GetMimeType returns the MimeType
func (e *Artifact) GetMimeType() string {
	return e.MimeType
}

// GetName returns the Name
func (e *Artifact) GetName() *string {
	return e.Name
}

// GetOrganizationID returns the OrganizationID
func (e *Artifact) GetOrganizationID() uuid.UUID {
	return e.OrganizationID
}

// GetPreviewImage returns the PreviewImage
func (e *Artifact) GetPreviewImage() *string {
	return e.PreviewImage
}

// GetProducerID returns the ProducerID
func (e *Artifact) GetProducerID() *uuid.UUID {
	return e.ProducerID
}

// GetText returns the Text
func (e *Artifact) GetText() *string {
	return e.Text
}

// GetUpdatedAt returns the UpdatedAt
func (e *Artifact) GetUpdatedAt() time.Time {
	return e.UpdatedAt
}

// Events returns the domain events
func (e *Artifact) Events() []events.DomainEvent {
	return e.events
}

// ClearEvents clears the domain events
func (e *Artifact) ClearEvents() {
	e.events = []events.DomainEvent{}
}

// addEvent adds a domain event
func (e *Artifact) addEvent(event events.DomainEvent) {
	e.events = append(e.events, event)
}

// ReconstructArtifact reconstructs a Artifact from persistence
func ReconstructArtifact(
	createdAt time.Time,
	credits int32,
	description *string,
	id uuid.UUID,
	mimeType string,
	name *string,
	organizationID uuid.UUID,
	previewImage *string,
	producerID *uuid.UUID,
	text *string,
	updatedAt time.Time,
) *Artifact {
	return &Artifact{
		CreatedAt:      createdAt,
		Credits:        credits,
		Description:    description,
		ID:             id,
		MimeType:       mimeType,
		Name:           name,
		OrganizationID: organizationID,
		PreviewImage:   previewImage,
		ProducerID:     producerID,
		Text:           text,
		UpdatedAt:      updatedAt,
		events:         []events.DomainEvent{},
	}
}
