// Code generated by archesai-codegen. DO NOT EDIT.

package entities

import (
	"fmt"
	"time"

	"github.com/archesai/archesai/internal/core/events"
	"github.com/google/uuid"
)

// Artifact represents Schema for Artifact entity
type Artifact struct {

	// ID Unique identifier for the resource
	ID uuid.UUID `json:"id" yaml:"id"`

	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`

	// Credits The number of credits required to access this artifact. This is used for metering and billing purposes.
	Credits int32 `json:"credits" yaml:"credits"`

	// Description The artifact's description
	Description *string `json:"description" yaml:"description"`

	// MimeType The MIME type of the artifact, e.g. image/png
	MimeType string `json:"mimeType" yaml:"mimeType"`

	// Name The name of the artifact, used for display purposes
	Name *string `json:"name" yaml:"name"`

	// OrganizationID The organization that owns this artifact
	OrganizationID uuid.UUID `json:"organizationID" yaml:"organizationID"`

	// PreviewImage The URL of the preview image for this artifact. This is used for displaying a thumbnail in the UI.
	PreviewImage *string `json:"previewImage" yaml:"previewImage"`

	// ProducerID The ID of the entity that produced this artifact
	ProducerID *uuid.UUID `json:"producerID" yaml:"producerID"`

	// Text The artifact text
	Text *string `json:"text" yaml:"text"`

	// URL The URL of the artifact if it's stored externally
	URL *string `json:"url" yaml:"url"`

	events []events.DomainEvent `json:"-" yaml:"-"`
}

// NewArtifact creates a new Artifact entity.
// All required fields must be provided and valid.
func NewArtifact(
	credits int32,
	description *string,
	mimeType string,
	name *string,
	organizationID uuid.UUID,
	previewImage *string,
	producerID *uuid.UUID,
	text *string,
	url *string,
) (*Artifact, error) {
	// Validate required fields
	if mimeType == "" {
		return nil, fmt.Errorf("MimeType cannot be empty")
	}
	if organizationID == uuid.Nil {
		return nil, fmt.Errorf("OrganizationID cannot be nil UUID")
	}
	now := time.Now().UTC()
	id := uuid.New()
	artifact := &Artifact{
		ID:             id,
		CreatedAt:      now,
		UpdatedAt:      now,
		Credits:        credits,
		Description:    description,
		MimeType:       mimeType,
		Name:           name,
		OrganizationID: organizationID,
		PreviewImage:   previewImage,
		ProducerID:     producerID,
		Text:           text,
		URL:            url,
		events:         []events.DomainEvent{},
	}
	artifact.addEvent(events.NewArtifactCreatedEvent(id))

	return artifact, nil
}

// GetID returns the ID
func (e *Artifact) GetID() uuid.UUID {
	return e.ID
}

// GetCreatedAt returns the CreatedAt
func (e *Artifact) GetCreatedAt() time.Time {
	return e.CreatedAt
}

// GetUpdatedAt returns the UpdatedAt
func (e *Artifact) GetUpdatedAt() time.Time {
	return e.UpdatedAt
}

// GetCredits returns the Credits
func (e *Artifact) GetCredits() int32 {
	return e.Credits
}

// GetDescription returns the Description
func (e *Artifact) GetDescription() *string {
	return e.Description
}

// GetMimeType returns the MimeType
func (e *Artifact) GetMimeType() string {
	return e.MimeType
}

// GetName returns the Name
func (e *Artifact) GetName() *string {
	return e.Name
}

// GetOrganizationID returns the OrganizationID
func (e *Artifact) GetOrganizationID() uuid.UUID {
	return e.OrganizationID
}

// GetPreviewImage returns the PreviewImage
func (e *Artifact) GetPreviewImage() *string {
	return e.PreviewImage
}

// GetProducerID returns the ProducerID
func (e *Artifact) GetProducerID() *uuid.UUID {
	return e.ProducerID
}

// GetText returns the Text
func (e *Artifact) GetText() *string {
	return e.Text
}

// GetURL returns the URL
func (e *Artifact) GetURL() *string {
	return e.URL
}

// Events returns the domain events
func (e *Artifact) Events() []events.DomainEvent {
	return e.events
}

// ClearEvents clears the domain events
func (e *Artifact) ClearEvents() {
	e.events = []events.DomainEvent{}
}

// addEvent adds a domain event
func (e *Artifact) addEvent(event events.DomainEvent) {
	e.events = append(e.events, event)
}
