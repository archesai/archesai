// Code generated by archesai-codegen. DO NOT EDIT.

package entities

import (
	"fmt"
	"time"

	"github.com/archesai/archesai/internal/core/events"
	"github.com/google/uuid"
)

// InvitationRole represents the enumeration of valid values for Role
type InvitationRole string

// Valid Role values
const (
	InvitationRoleAdmin InvitationRole = "admin"
	InvitationRoleOwner InvitationRole = "owner"
	InvitationRoleBasic InvitationRole = "basic"
)

// String returns the string representation
func (e InvitationRole) String() string {
	return string(e)
}

// IsValid checks if the value is valid
func (e InvitationRole) IsValid() bool {
	switch e {
	case InvitationRoleAdmin:
		return true
	case InvitationRoleOwner:
		return true
	case InvitationRoleBasic:
		return true
	default:
		return false
	}
}

// ParseInvitationRole parses a string into the enum type
func ParseInvitationRole(s string) (InvitationRole, error) {
	v := InvitationRole(s)
	if !v.IsValid() {
		return "", fmt.Errorf("invalid Role: %s", s)
	}
	return v, nil
}

// InvitationStatus represents the enumeration of valid values for Status
type InvitationStatus string

// Valid Status values
const (
	InvitationStatusPending  InvitationStatus = "pending"
	InvitationStatusAccepted InvitationStatus = "accepted"
	InvitationStatusDeclined InvitationStatus = "declined"
	InvitationStatusExpired  InvitationStatus = "expired"
)

// String returns the string representation
func (e InvitationStatus) String() string {
	return string(e)
}

// IsValid checks if the value is valid
func (e InvitationStatus) IsValid() bool {
	switch e {
	case InvitationStatusPending:
		return true
	case InvitationStatusAccepted:
		return true
	case InvitationStatusDeclined:
		return true
	case InvitationStatusExpired:
		return true
	default:
		return false
	}
}

// ParseInvitationStatus parses a string into the enum type
func ParseInvitationStatus(s string) (InvitationStatus, error) {
	v := InvitationStatus(s)
	if !v.IsValid() {
		return "", fmt.Errorf("invalid Status: %s", s)
	}
	return v, nil
}

// Invitation represents Schema for Invitation entity
type Invitation struct {
	ID             uuid.UUID            `json:"id" yaml:"id"`                         // Unique identifier for the resource
	CreatedAt      time.Time            `json:"createdAt" yaml:"createdAt"`           // The date and time when the resource was created
	Email          string               `json:"email" yaml:"email"`                   // The email of the invitated user
	ExpiresAt      time.Time            `json:"expiresAt" yaml:"expiresAt"`           // The date and time when the invitation expires
	InviterID      uuid.UUID            `json:"inviterID" yaml:"inviterID"`           // The ID of the user who sent this invitation
	OrganizationID uuid.UUID            `json:"organizationID" yaml:"organizationID"` // The organization the user is being invited to join
	Role           InvitationRole       `json:"role" yaml:"role"`                     // The role of the invitation
	Status         InvitationStatus     `json:"status" yaml:"status"`                 // The status of the invitation, e.g., pending, accepted, declined
	UpdatedAt      time.Time            `json:"updatedAt" yaml:"updatedAt"`           // The date and time when the resource was last updated
	events         []events.DomainEvent `json:"-" yaml:"-"`
}

// NewInvitation creates a new Invitation entity.
// All required fields must be provided and valid.
func NewInvitation(
	email string,
	expiresAt time.Time,
	inviterID uuid.UUID,
	organizationID uuid.UUID,
	role InvitationRole,
	status InvitationStatus,
) (*Invitation, error) {
	// Validate required fields
	if email == "" {
		return nil, fmt.Errorf("Email cannot be empty")
	}
	if !role.IsValid() {
		return nil, fmt.Errorf("invalid Role: %s", role)
	}
	if !status.IsValid() {
		return nil, fmt.Errorf("invalid Status: %s", status)
	}
	now := time.Now().UTC()
	id := uuid.New()
	invitation := &Invitation{
		ID:             id,
		CreatedAt:      now,
		Email:          email,
		ExpiresAt:      expiresAt,
		InviterID:      inviterID,
		OrganizationID: organizationID,
		Role:           role,
		Status:         status,
		UpdatedAt:      now,
		events:         []events.DomainEvent{},
	}
	invitation.addEvent(events.NewInvitationCreatedEvent(id))

	return invitation, nil
}

// GetID returns the ID
func (e *Invitation) GetID() uuid.UUID {
	return e.ID
}

// GetCreatedAt returns the CreatedAt
func (e *Invitation) GetCreatedAt() time.Time {
	return e.CreatedAt
}

// GetEmail returns the Email
func (e *Invitation) GetEmail() string {
	return e.Email
}

// GetExpiresAt returns the ExpiresAt
func (e *Invitation) GetExpiresAt() time.Time {
	return e.ExpiresAt
}

// GetInviterID returns the InviterID
func (e *Invitation) GetInviterID() uuid.UUID {
	return e.InviterID
}

// GetOrganizationID returns the OrganizationID
func (e *Invitation) GetOrganizationID() uuid.UUID {
	return e.OrganizationID
}

// GetRole returns the Role
func (e *Invitation) GetRole() string {
	return string(e.Role)
}

// GetStatus returns the Status
func (e *Invitation) GetStatus() string {
	return string(e.Status)
}

// GetUpdatedAt returns the UpdatedAt
func (e *Invitation) GetUpdatedAt() time.Time {
	return e.UpdatedAt
}

// Events returns the domain events
func (e *Invitation) Events() []events.DomainEvent {
	return e.events
}

// ClearEvents clears the domain events
func (e *Invitation) ClearEvents() {
	e.events = []events.DomainEvent{}
}

// addEvent adds a domain event
func (e *Invitation) addEvent(event events.DomainEvent) {
	e.events = append(e.events, event)
}
