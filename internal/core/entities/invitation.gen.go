// Code generated by archesai/codegen. DO NOT EDIT.

package entities

import (
	"fmt"
	"time"

	"github.com/archesai/archesai/internal/core/events"
	"github.com/google/uuid"
)

// Invitation represents Schema for Invitation entity
type Invitation struct {
	CreatedAt      time.Time            `json:"createdAt" yaml:"createdAt"`           // The date and time when the resource was created
	Email          string               `json:"email" yaml:"email"`                   // The email of the invitated user
	ExpiresAt      time.Time            `json:"expiresAt" yaml:"expiresAt"`           // The date and time when the invitation expires
	ID             uuid.UUID            `json:"id" yaml:"id"`                         // Unique identifier for the resource
	InviterID      uuid.UUID            `json:"inviterID" yaml:"inviterID"`           // The ID of the user who sent this invitation
	OrganizationID uuid.UUID            `json:"organizationID" yaml:"organizationID"` // The organization the user is being invited to join
	Role           string               `json:"role" yaml:"role"`                     // The role of the invitation
	Status         string               `json:"status" yaml:"status"`                 // The status of the invitation, e.g., pending, accepted, declined
	UpdatedAt      time.Time            `json:"updatedAt" yaml:"updatedAt"`           // The date and time when the resource was last updated
	events         []events.DomainEvent `json:"-" yaml:"-"`
}

// NewInvitation creates a new Invitation entity
func NewInvitation(
	email string,
	expiresAt time.Time,
	inviterID uuid.UUID,
	organizationID uuid.UUID,
	role string,
	status string,
) (*Invitation, error) {
	if email == "" {
		return nil, fmt.Errorf("Email cannot be empty")
	}
	if role == "" {
		return nil, fmt.Errorf("Role cannot be empty")
	}
	if status == "" {
		return nil, fmt.Errorf("Status cannot be empty")
	}
	id := uuid.New()
	now := time.Now().UTC()

	invitation := &Invitation{
		CreatedAt:      now,
		Email:          email,
		ExpiresAt:      expiresAt,
		ID:             id,
		InviterID:      inviterID,
		OrganizationID: organizationID,
		Role:           role,
		Status:         status,
		UpdatedAt:      now,
		events:         []events.DomainEvent{},
	}
	invitation.addEvent(events.NewInvitationCreatedEvent(invitation.ID))

	return invitation, nil
}

// GetCreatedAt returns the CreatedAt
func (e *Invitation) GetCreatedAt() time.Time {
	return e.CreatedAt
}

// GetEmail returns the Email
func (e *Invitation) GetEmail() string {
	return e.Email
}

// GetExpiresAt returns the ExpiresAt
func (e *Invitation) GetExpiresAt() time.Time {
	return e.ExpiresAt
}

// GetID returns the ID
func (e *Invitation) GetID() uuid.UUID {
	return e.ID
}

// GetInviterID returns the InviterID
func (e *Invitation) GetInviterID() uuid.UUID {
	return e.InviterID
}

// GetOrganizationID returns the OrganizationID
func (e *Invitation) GetOrganizationID() uuid.UUID {
	return e.OrganizationID
}

// GetRole returns the Role
func (e *Invitation) GetRole() string {
	return e.Role
}

// GetStatus returns the Status
func (e *Invitation) GetStatus() string {
	return e.Status
}

// GetUpdatedAt returns the UpdatedAt
func (e *Invitation) GetUpdatedAt() time.Time {
	return e.UpdatedAt
}

// Events returns the domain events
func (e *Invitation) Events() []events.DomainEvent {
	return e.events
}

// ClearEvents clears the domain events
func (e *Invitation) ClearEvents() {
	e.events = []events.DomainEvent{}
}

// addEvent adds a domain event
func (e *Invitation) addEvent(event events.DomainEvent) {
	e.events = append(e.events, event)
}

// ReconstructInvitation reconstructs a Invitation from persistence
func ReconstructInvitation(
	createdAt time.Time,
	email string,
	expiresAt time.Time,
	id uuid.UUID,
	inviterID uuid.UUID,
	organizationID uuid.UUID,
	role string,
	status string,
	updatedAt time.Time,
) *Invitation {
	return &Invitation{
		CreatedAt:      createdAt,
		Email:          email,
		ExpiresAt:      expiresAt,
		ID:             id,
		InviterID:      inviterID,
		OrganizationID: organizationID,
		Role:           role,
		Status:         status,
		UpdatedAt:      updatedAt,
		events:         []events.DomainEvent{},
	}
}
