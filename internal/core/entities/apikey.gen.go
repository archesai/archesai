// Code generated by archesai-codegen. DO NOT EDIT.

package entities

import (
	"fmt"
	"time"

	"github.com/archesai/archesai/internal/core/events"
	"github.com/google/uuid"
)

// APIKey represents Schema for API Key entity
type APIKey struct {

	// ID Unique identifier for the resource
	ID uuid.UUID `json:"id" yaml:"id"`

	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`

	// ExpiresAt When this API key expires
	ExpiresAt *time.Time `json:"expiresAt" yaml:"expiresAt"`

	// KeyHash Hashed version of the API key for secure storage
	KeyHash string `json:"keyHash" yaml:"keyHash"`

	// LastUsedAt When this API key was last used
	LastUsedAt *time.Time `json:"lastUsedAt" yaml:"lastUsedAt"`
	Name       *string    `json:"name" yaml:"name"`

	// OrganizationID The organization this API key belongs to
	OrganizationID uuid.UUID `json:"organizationID" yaml:"organizationID"`
	Prefix         *string   `json:"prefix" yaml:"prefix"`

	// RateLimit Requests per minute allowed for this API key
	RateLimit int32    `json:"rateLimit" yaml:"rateLimit"`
	Scopes    []string `json:"scopes" yaml:"scopes"`

	// UserID The user who owns this API key
	UserID uuid.UUID `json:"userID" yaml:"userID"`

	events []events.DomainEvent `json:"-" yaml:"-"`
}

// NewAPIKey creates a new APIKey entity.
// All required fields must be provided and valid.
func NewAPIKey(
	expiresAt *time.Time,
	keyHash string,
	lastUsedAt *time.Time,
	name *string,
	organizationID uuid.UUID,
	prefix *string,
	rateLimit int32,
	scopes []string,
	userID uuid.UUID,
) (*APIKey, error) {
	// Validate required fields
	if keyHash == "" {
		return nil, fmt.Errorf("KeyHash cannot be empty")
	}
	if organizationID == uuid.Nil {
		return nil, fmt.Errorf("OrganizationID cannot be nil UUID")
	}
	if userID == uuid.Nil {
		return nil, fmt.Errorf("UserID cannot be nil UUID")
	}
	now := time.Now().UTC()
	id := uuid.New()
	apikey := &APIKey{
		ID:             id,
		CreatedAt:      now,
		UpdatedAt:      now,
		ExpiresAt:      expiresAt,
		KeyHash:        keyHash,
		LastUsedAt:     lastUsedAt,
		Name:           name,
		OrganizationID: organizationID,
		Prefix:         prefix,
		RateLimit:      rateLimit,
		Scopes:         scopes,
		UserID:         userID,
		events:         []events.DomainEvent{},
	}
	apikey.addEvent(events.NewAPIKeyCreatedEvent(id))

	return apikey, nil
}

// GetID returns the ID
func (e *APIKey) GetID() uuid.UUID {
	return e.ID
}

// GetCreatedAt returns the CreatedAt
func (e *APIKey) GetCreatedAt() time.Time {
	return e.CreatedAt
}

// GetUpdatedAt returns the UpdatedAt
func (e *APIKey) GetUpdatedAt() time.Time {
	return e.UpdatedAt
}

// GetExpiresAt returns the ExpiresAt
func (e *APIKey) GetExpiresAt() *time.Time {
	return e.ExpiresAt
}

// GetKeyHash returns the KeyHash
func (e *APIKey) GetKeyHash() string {
	return e.KeyHash
}

// GetLastUsedAt returns the LastUsedAt
func (e *APIKey) GetLastUsedAt() *time.Time {
	return e.LastUsedAt
}

// GetName returns the Name
func (e *APIKey) GetName() *string {
	return e.Name
}

// GetOrganizationID returns the OrganizationID
func (e *APIKey) GetOrganizationID() uuid.UUID {
	return e.OrganizationID
}

// GetPrefix returns the Prefix
func (e *APIKey) GetPrefix() *string {
	return e.Prefix
}

// GetRateLimit returns the RateLimit
func (e *APIKey) GetRateLimit() int32 {
	return e.RateLimit
}

// GetScopes returns the Scopes
func (e *APIKey) GetScopes() []string {
	return e.Scopes
}

// GetUserID returns the UserID
func (e *APIKey) GetUserID() uuid.UUID {
	return e.UserID
}

// Events returns the domain events
func (e *APIKey) Events() []events.DomainEvent {
	return e.events
}

// ClearEvents clears the domain events
func (e *APIKey) ClearEvents() {
	e.events = []events.DomainEvent{}
}

// addEvent adds a domain event
func (e *APIKey) addEvent(event events.DomainEvent) {
	e.events = append(e.events, event)
}
