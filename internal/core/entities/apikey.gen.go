// Code generated by archesai/codegen. DO NOT EDIT.

package entities

import (
	"fmt"
	"time"

	"github.com/archesai/archesai/internal/core/events"
	"github.com/google/uuid"
)

// APIKey represents Schema for API Key entity
type APIKey struct {
	CreatedAt      time.Time            `json:"createdAt" yaml:"createdAt"`                       // The date and time when the resource was created
	ExpiresAt      time.Time            `json:"expiresAt" yaml:"expiresAt"`                       // When this API key expires
	ID             uuid.UUID            `json:"id" yaml:"id"`                                     // Unique identifier for the resource
	KeyHash        *string              `json:"keyHash,omitempty" yaml:"keyHash,omitempty"`       // Hashed version of the API key for secure storage
	LastUsedAt     *time.Time           `json:"lastUsedAt,omitempty" yaml:"lastUsedAt,omitempty"` // When this API key was last used
	Name           string               `json:"name" yaml:"name"`
	OrganizationID *uuid.UUID           `json:"organizationID,omitempty" yaml:"organizationID,omitempty"` // The organization this API key belongs to
	Prefix         string               `json:"prefix" yaml:"prefix"`
	RateLimit      int                  `json:"rateLimit" yaml:"rateLimit"` // Requests per minute allowed for this API key
	Scopes         []string             `json:"scopes" yaml:"scopes"`
	UpdatedAt      time.Time            `json:"updatedAt" yaml:"updatedAt"`               // The date and time when the resource was last updated
	UserID         *uuid.UUID           `json:"userID,omitempty" yaml:"userID,omitempty"` // The user who owns this API key
	events         []events.DomainEvent `json:"-" yaml:"-"`
}

// NewAPIKey creates a new APIKey entity
func NewAPIKey(
	expiresAt time.Time,
	name string,
	prefix string,
	rateLimit int,
	scopes []string,
) (*APIKey, error) {
	if name == "" {
		return nil, fmt.Errorf("Name cannot be empty")
	}
	if prefix == "" {
		return nil, fmt.Errorf("Prefix cannot be empty")
	}

	apikey := &APIKey{
		CreatedAt: time.Now().UTC(),
		ExpiresAt: expiresAt,
		ID:        uuid.New(),
		Name:      name,
		Prefix:    prefix,
		RateLimit: rateLimit,
		Scopes:    scopes,
		UpdatedAt: time.Now().UTC(),
		events:    []events.DomainEvent{},
	}
	apikey.addEvent(events.NewAPIKeyCreatedEvent(apikey.ID))

	return apikey, nil
}

// GetCreatedAt returns the CreatedAt
func (e *APIKey) GetCreatedAt() time.Time {
	return e.CreatedAt
}

// GetExpiresAt returns the ExpiresAt
func (e *APIKey) GetExpiresAt() time.Time {
	return e.ExpiresAt
}

// GetID returns the ID
func (e *APIKey) GetID() uuid.UUID {
	return e.ID
}

// GetKeyHash returns the KeyHash
func (e *APIKey) GetKeyHash() *string {
	return e.KeyHash
}

// GetLastUsedAt returns the LastUsedAt
func (e *APIKey) GetLastUsedAt() *time.Time {
	return e.LastUsedAt
}

// GetName returns the Name
func (e *APIKey) GetName() string {
	return e.Name
}

// GetOrganizationID returns the OrganizationID
func (e *APIKey) GetOrganizationID() *uuid.UUID {
	return e.OrganizationID
}

// GetPrefix returns the Prefix
func (e *APIKey) GetPrefix() string {
	return e.Prefix
}

// GetRateLimit returns the RateLimit
func (e *APIKey) GetRateLimit() int {
	return e.RateLimit
}

// GetScopes returns the Scopes
func (e *APIKey) GetScopes() []string {
	return e.Scopes
}

// GetUpdatedAt returns the UpdatedAt
func (e *APIKey) GetUpdatedAt() time.Time {
	return e.UpdatedAt
}

// GetUserID returns the UserID
func (e *APIKey) GetUserID() *uuid.UUID {
	return e.UserID
}

// Events returns the domain events
func (e *APIKey) Events() []events.DomainEvent {
	return e.events
}

// ClearEvents clears the domain events
func (e *APIKey) ClearEvents() {
	e.events = []events.DomainEvent{}
}

// addEvent adds a domain event
func (e *APIKey) addEvent(event events.DomainEvent) {
	e.events = append(e.events, event)
}

// ReconstructAPIKey reconstructs a APIKey from persistence
func ReconstructAPIKey(
	createdAt time.Time,
	expiresAt time.Time,
	id uuid.UUID,
	keyHash *string,
	lastUsedAt *time.Time,
	name string,
	organizationID *uuid.UUID,
	prefix string,
	rateLimit int,
	scopes []string,
	updatedAt time.Time,
	userID *uuid.UUID,
) *APIKey {
	return &APIKey{
		CreatedAt:      createdAt,
		ExpiresAt:      expiresAt,
		ID:             id,
		KeyHash:        keyHash,
		LastUsedAt:     lastUsedAt,
		Name:           name,
		OrganizationID: organizationID,
		Prefix:         prefix,
		RateLimit:      rateLimit,
		Scopes:         scopes,
		UpdatedAt:      updatedAt,
		UserID:         userID,
		events:         []events.DomainEvent{},
	}
}
