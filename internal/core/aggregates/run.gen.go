// Code generated by archesai/codegen. DO NOT EDIT.

package aggregates

import (
	"fmt"
	"time"

	"github.com/archesai/archesai/internal/core/events"
	"github.com/google/uuid"
)

// Run represents Schema for Run entity
type Run struct {
	CompletedAt    *time.Time           `json:"completedAt,omitempty" yaml:"completedAt,omitempty"` // The timestamp when the run completed
	CreatedAt      time.Time            `json:"createdAt" yaml:"createdAt"`                         // The date and time when the resource was created
	Error          *string              `json:"error,omitempty" yaml:"error,omitempty"`             // The error message
	ID             uuid.UUID            `json:"id" yaml:"id"`                                       // Unique identifier for the resource
	OrganizationID uuid.UUID            `json:"organizationID" yaml:"organizationID"`               // The organization this run belongs to
	PipelineID     uuid.UUID            `json:"pipelineID" yaml:"pipelineID"`                       // The pipeline this run is executing
	Progress       float64              `json:"progress" yaml:"progress"`                           // The percent progress of the run
	StartedAt      *time.Time           `json:"startedAt,omitempty" yaml:"startedAt,omitempty"`     // The timestamp when the run started
	Status         string               `json:"status" yaml:"status"`
	ToolID         uuid.UUID            `json:"toolID" yaml:"toolID"`       // The tool being used in this run
	UpdatedAt      time.Time            `json:"updatedAt" yaml:"updatedAt"` // The date and time when the resource was last updated
	events         []events.DomainEvent `json:"-" yaml:"-"`
}

// NewRun creates a new Run aggregate
func NewRun(
	organizationID uuid.UUID,
	pipelineID uuid.UUID,
	progress float64,
	status string,
	toolID uuid.UUID,
) (*Run, error) {
	if status == "" {
		return nil, fmt.Errorf("Status cannot be empty")
	}
	id := uuid.New()
	now := time.Now().UTC()

	run := &Run{
		CreatedAt:      now,
		ID:             id,
		OrganizationID: organizationID,
		PipelineID:     pipelineID,
		Progress:       progress,
		Status:         status,
		ToolID:         toolID,
		UpdatedAt:      now,
		events:         []events.DomainEvent{},
	}
	run.addEvent(events.NewRunCreatedEvent(run.ID))

	return run, nil
}

// GetCompletedAt returns the CompletedAt
func (e *Run) GetCompletedAt() *time.Time {
	return e.CompletedAt
}

// GetCreatedAt returns the CreatedAt
func (e *Run) GetCreatedAt() time.Time {
	return e.CreatedAt
}

// GetError returns the Error
func (e *Run) GetError() *string {
	return e.Error
}

// GetID returns the ID
func (e *Run) GetID() uuid.UUID {
	return e.ID
}

// GetOrganizationID returns the OrganizationID
func (e *Run) GetOrganizationID() uuid.UUID {
	return e.OrganizationID
}

// GetPipelineID returns the PipelineID
func (e *Run) GetPipelineID() uuid.UUID {
	return e.PipelineID
}

// GetProgress returns the Progress
func (e *Run) GetProgress() float64 {
	return e.Progress
}

// GetStartedAt returns the StartedAt
func (e *Run) GetStartedAt() *time.Time {
	return e.StartedAt
}

// GetStatus returns the Status
func (e *Run) GetStatus() string {
	return e.Status
}

// GetToolID returns the ToolID
func (e *Run) GetToolID() uuid.UUID {
	return e.ToolID
}

// GetUpdatedAt returns the UpdatedAt
func (e *Run) GetUpdatedAt() time.Time {
	return e.UpdatedAt
}

// Events returns the domain events
func (e *Run) Events() []events.DomainEvent {
	return e.events
}

// ClearEvents clears the domain events
func (e *Run) ClearEvents() {
	e.events = []events.DomainEvent{}
}

// addEvent adds a domain event
func (e *Run) addEvent(event events.DomainEvent) {
	e.events = append(e.events, event)
}

// ReconstructRun reconstructs a Run from persistence
func ReconstructRun(
	completedAt *time.Time,
	createdAt time.Time,
	error *string,
	id uuid.UUID,
	organizationID uuid.UUID,
	pipelineID uuid.UUID,
	progress float64,
	startedAt *time.Time,
	status string,
	toolID uuid.UUID,
	updatedAt time.Time,
) *Run {
	return &Run{
		CompletedAt:    completedAt,
		CreatedAt:      createdAt,
		Error:          error,
		ID:             id,
		OrganizationID: organizationID,
		PipelineID:     pipelineID,
		Progress:       progress,
		StartedAt:      startedAt,
		Status:         status,
		ToolID:         toolID,
		UpdatedAt:      updatedAt,
		events:         []events.DomainEvent{},
	}
}
