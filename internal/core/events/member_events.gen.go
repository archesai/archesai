// Code generated by archesai. DO NOT EDIT.

package events

import (
	"github.com/google/uuid"
)

// Event type constants for Member.
const (
	EventMemberCreated = "member.created"
	EventMemberUpdated = "member.updated"
	EventMemberDeleted = "member.deleted"
)

// MemberCreatedEvent represents a created event for Member.
type MemberCreatedEvent struct {
	BaseEvent
	MemberID uuid.UUID `json:"member_id"`
}

// NewMemberCreatedEvent creates a new Member created event.
func NewMemberCreatedEvent(id uuid.UUID) *MemberCreatedEvent {
	return &MemberCreatedEvent{
		BaseEvent: NewBaseEvent("member", EventMemberCreated),
		MemberID:  id,
	}
}

// MemberUpdatedEvent represents an updated event for Member.
type MemberUpdatedEvent struct {
	BaseEvent
	MemberID uuid.UUID `json:"member_id"`
}

// NewMemberUpdatedEvent creates a new Member updated event.
func NewMemberUpdatedEvent(id uuid.UUID) *MemberUpdatedEvent {
	return &MemberUpdatedEvent{
		BaseEvent: NewBaseEvent("member", EventMemberUpdated),
		MemberID:  id,
	}
}

// MemberDeletedEvent represents a deleted event for Member.
type MemberDeletedEvent struct {
	BaseEvent
	MemberID uuid.UUID `json:"member_id"`
}

// NewMemberDeletedEvent creates a new Member deleted event.
func NewMemberDeletedEvent(id uuid.UUID) *MemberDeletedEvent {
	return &MemberDeletedEvent{
		BaseEvent: NewBaseEvent("member", EventMemberDeleted),
		MemberID:  id,
	}
}
