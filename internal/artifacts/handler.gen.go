// Package artifacts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package artifacts

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

const (
	BearerAuthScopes    = "bearerAuth.Scopes"
	SessionCookieScopes = "sessionCookie.Scopes"
)

// ProblemDetails represents an RFC 7807 problem details response.
type ProblemDetails struct {
	Type     string `json:"type"`
	Title    string `json:"title"`
	Status   int    `json:"status"`
	Detail   string `json:"detail,omitempty"`
	Instance string `json:"instance,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List artifacts
	// (GET /artifacts)
	ListArtifacts(ctx echo.Context, params ListArtifactsParams) error
	// Create a artifact
	// (POST /artifacts)
	CreateArtifact(ctx echo.Context) error
	// Delete an artifact
	// (DELETE /artifacts/{id})
	DeleteArtifact(ctx echo.Context, id uuid.UUID) error
	// Find an artifact
	// (GET /artifacts/{id})
	GetArtifact(ctx echo.Context, id uuid.UUID) error
	// Update an artifact
	// (PATCH /artifacts/{id})
	UpdateArtifact(ctx echo.Context, id uuid.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListArtifacts converts echo context to params.
func (w *ServerInterfaceWrapper) ListArtifacts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListArtifactsParams

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListArtifacts(ctx, params)
	return err
}

// CreateArtifact converts echo context to params.
func (w *ServerInterfaceWrapper) CreateArtifact(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateArtifact(ctx)
	return err
}

// DeleteArtifact converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteArtifact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id uuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteArtifact(ctx, id)
	return err
}

// GetArtifact converts echo context to params.
func (w *ServerInterfaceWrapper) GetArtifact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id uuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetArtifact(ctx, id)
	return err
}

// UpdateArtifact converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateArtifact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id uuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateArtifact(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}
	router.GET(baseURL+"/artifacts", wrapper.ListArtifacts)
	router.POST(baseURL+"/artifacts", wrapper.CreateArtifact)
	router.DELETE(baseURL+"/artifacts/:id", wrapper.DeleteArtifact)
	router.GET(baseURL+"/artifacts/:id", wrapper.GetArtifact)
	router.PATCH(baseURL+"/artifacts/:id", wrapper.UpdateArtifact)

}

type BadRequestResponse ProblemDetails

type NotFoundResponse ProblemDetails

type UnauthorizedResponse ProblemDetails

type ListArtifactsRequestObject struct {
	Params ListArtifactsParams
}

type ListArtifactsResponseObject interface {
	VisitListArtifactsResponse(w http.ResponseWriter) error
}

type ListArtifacts200JSONResponse struct {
	Data []Artifact `json:"data"`
	Meta struct {
		Total int64 `json:"total"`
	} `json:"meta"`
}

func (response ListArtifacts200JSONResponse) VisitListArtifactsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListArtifacts400Response = BadRequestResponse

func (response ListArtifacts400Response) VisitListArtifactsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListArtifacts401Response = UnauthorizedResponse

func (response ListArtifacts401Response) VisitListArtifactsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListArtifacts404Response = NotFoundResponse

func (response ListArtifacts404Response) VisitListArtifactsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateArtifactRequestObject struct {
	Body *CreateArtifactRequestBody
}

type CreateArtifactResponseObject interface {
	VisitCreateArtifactResponse(w http.ResponseWriter) error
}
type CreateArtifact201JSONResponse struct {
	// Data Schema for artifacts entity
	Data Artifact `json:"data"`
}

func (response CreateArtifact201JSONResponse) VisitCreateArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateArtifact400Response = BadRequestResponse

func (response CreateArtifact400Response) VisitCreateArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateArtifact401Response = UnauthorizedResponse

func (response CreateArtifact401Response) VisitCreateArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteArtifactRequestObject struct {
	ID uuid.UUID `json:"id"`
}

type DeleteArtifactResponseObject interface {
	VisitDeleteArtifactResponse(w http.ResponseWriter) error
}
type DeleteArtifact200JSONResponse struct {
	// Data Schema for artifacts entity
	Data Artifact `json:"data"`
}

func (response DeleteArtifact200JSONResponse) VisitDeleteArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteArtifact400Response = BadRequestResponse

func (response DeleteArtifact400Response) VisitDeleteArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteArtifact401Response = UnauthorizedResponse

func (response DeleteArtifact401Response) VisitDeleteArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteArtifact404Response = NotFoundResponse

func (response DeleteArtifact404Response) VisitDeleteArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetArtifactRequestObject struct {
	ID uuid.UUID `json:"id"`
}

type GetArtifactResponseObject interface {
	VisitGetArtifactResponse(w http.ResponseWriter) error
}

type GetArtifact200JSONResponse struct {
	Data []Artifact `json:"data"`
	Meta struct {
		Total int64 `json:"total"`
	} `json:"meta"`
}

func (response GetArtifact200JSONResponse) VisitGetArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArtifact400Response = BadRequestResponse

func (response GetArtifact400Response) VisitGetArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetArtifact401Response = UnauthorizedResponse

func (response GetArtifact401Response) VisitGetArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetArtifact404Response = NotFoundResponse

func (response GetArtifact404Response) VisitGetArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateArtifactRequestObject struct {
	ID   uuid.UUID `json:"id"`
	Body *UpdateArtifactRequestBody
}

type UpdateArtifactResponseObject interface {
	VisitUpdateArtifactResponse(w http.ResponseWriter) error
}
type UpdateArtifact200JSONResponse struct {
	// Data Schema for artifacts entity
	Data Artifact `json:"data"`
}

func (response UpdateArtifact200JSONResponse) VisitUpdateArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateArtifact400Response = BadRequestResponse

func (response UpdateArtifact400Response) VisitUpdateArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateArtifact401Response = UnauthorizedResponse

func (response UpdateArtifact401Response) VisitUpdateArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateArtifact404Response = NotFoundResponse

func (response UpdateArtifact404Response) VisitUpdateArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List artifacts
	// (GET /artifacts)
	ListArtifacts(ctx context.Context, request ListArtifactsRequestObject) (ListArtifactsResponseObject, error)
	// Create a artifact
	// (POST /artifacts)
	CreateArtifact(ctx context.Context, request CreateArtifactRequestObject) (CreateArtifactResponseObject, error)
	// Delete an artifact
	// (DELETE /artifacts/{id})
	DeleteArtifact(ctx context.Context, request DeleteArtifactRequestObject) (DeleteArtifactResponseObject, error)
	// Find an artifact
	// (GET /artifacts/{id})
	GetArtifact(ctx context.Context, request GetArtifactRequestObject) (GetArtifactResponseObject, error)
	// Update an artifact
	// (PATCH /artifacts/{id})
	UpdateArtifact(ctx context.Context, request UpdateArtifactRequestObject) (UpdateArtifactResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ListArtifacts operation middleware
func (sh *strictHandler) ListArtifacts(ctx echo.Context, params ListArtifactsParams) error {
	var request ListArtifactsRequestObject
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListArtifacts(ctx.Request().Context(), request.(ListArtifactsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListArtifacts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListArtifactsResponseObject); ok {
		return validResponse.VisitListArtifactsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateArtifact operation middleware
func (sh *strictHandler) CreateArtifact(ctx echo.Context) error {
	var request CreateArtifactRequestObject
	var body CreateArtifactRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateArtifact(ctx.Request().Context(), request.(CreateArtifactRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateArtifact")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateArtifactResponseObject); ok {
		return validResponse.VisitCreateArtifactResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteArtifact operation middleware
func (sh *strictHandler) DeleteArtifact(ctx echo.Context, id uuid.UUID) error {
	var request DeleteArtifactRequestObject
	request.ID = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteArtifact(ctx.Request().Context(), request.(DeleteArtifactRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteArtifact")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteArtifactResponseObject); ok {
		return validResponse.VisitDeleteArtifactResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetArtifact operation middleware
func (sh *strictHandler) GetArtifact(ctx echo.Context, id uuid.UUID) error {
	var request GetArtifactRequestObject
	request.ID = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetArtifact(ctx.Request().Context(), request.(GetArtifactRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetArtifact")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetArtifactResponseObject); ok {
		return validResponse.VisitGetArtifactResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateArtifact operation middleware
func (sh *strictHandler) UpdateArtifact(ctx echo.Context, id uuid.UUID) error {
	var request UpdateArtifactRequestObject
	request.ID = id
	var body UpdateArtifactRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateArtifact(ctx.Request().Context(), request.(UpdateArtifactRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateArtifact")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateArtifactResponseObject); ok {
		return validResponse.VisitUpdateArtifactResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
