// Code generated by codegen repository. DO NOT EDIT.
package artifacts

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/archesai/archesai/internal/database/postgresql"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgxpool"
)

// PostgresRepository implements Repository using PostgreSQL.
type PostgresRepository struct {
	queries *postgresql.Queries
}

// NewPostgresRepository creates a new PostgreSQL repository.
func NewPostgresRepository(db *pgxpool.Pool) Repository {
	return &PostgresRepository{
		queries: postgresql.New(db),
	}
}

// Artifact operations

// Create creates a new artifact
func (r *PostgresRepository) Create(ctx context.Context, entity *Artifact) (*Artifact, error) {
	params := postgresql.CreateArtifactParams{
		ID: entity.ID,

		Credits:        entity.Credits,
		Description:    entity.Description,
		MimeType:       entity.MimeType,
		Name:           entity.Name,
		OrganizationID: entity.OrganizationID,
		PreviewImage:   entity.PreviewImage,
		ProducerID:     entity.ProducerID,
		Text:           entity.Text,
	}

	result, err := r.queries.CreateArtifact(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to create artifact: %w", err)
	}

	return mapArtifactFromDB(&result), nil
}

// Get retrieves a artifact by ID
func (r *PostgresRepository) Get(ctx context.Context, id uuid.UUID) (*Artifact, error) {
	result, err := r.queries.GetArtifact(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrArtifactNotFound
		}
		return nil, fmt.Errorf("failed to get artifact: %w", err)
	}

	return mapArtifactFromDB(&result), nil
}

// Update updates an existing artifact
func (r *PostgresRepository) Update(ctx context.Context, id uuid.UUID, entity *Artifact) (*Artifact, error) {
	params := postgresql.UpdateArtifactParams{
		ID: id,

		Credits:      &entity.Credits,
		Description:  entity.Description,
		MimeType:     &entity.MimeType,
		Name:         entity.Name,
		PreviewImage: entity.PreviewImage,
		ProducerID:   entity.ProducerID,
		Text:         entity.Text,
	}

	result, err := r.queries.UpdateArtifact(ctx, params)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrArtifactNotFound
		}
		return nil, fmt.Errorf("failed to update artifact: %w", err)
	}

	return mapArtifactFromDB(&result), nil
}

// Delete removes a artifact
func (r *PostgresRepository) Delete(ctx context.Context, id uuid.UUID) error {
	err := r.queries.DeleteArtifact(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return ErrArtifactNotFound
		}
		return fmt.Errorf("failed to delete artifact: %w", err)
	}
	return nil
}

// List returns a paginated list of artifacts
func (r *PostgresRepository) List(ctx context.Context, params ListArtifactsParams) ([]*Artifact, int64, error) {
	// Calculate offset from page
	offset := int32(0)
	limit := int32(10) // default

	// Check if params has Page field with Number and Size
	if params.Page != nil && params.Page.Number > 0 && params.Page.Size > 0 {
		offset = int32((params.Page.Number - 1) * params.Page.Size)
		limit = int32(params.Page.Size)
	}

	listParams := postgresql.ListArtifactsParams{
		Limit:  limit,
		Offset: offset,
	}

	results, err := r.queries.ListArtifacts(ctx, listParams)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list artifacts: %w", err)
	}

	items := make([]*Artifact, len(results))
	for i, result := range results {
		items[i] = mapArtifactFromDB(&result)
	}

	// For now, return the count as the length of results
	// In production, you'd want a separate count query
	count := int64(len(results))

	return items, count, nil
}

// Additional methods

// ListByOrganization retrieves multiple artifacts by organizationID
func (r *PostgresRepository) ListByOrganization(ctx context.Context, organizationID uuid.UUID) ([]*Artifact, error) {

	// TODO: Implement ListByOrganization - fetch multiple artifacts
	return nil, fmt.Errorf("ListByOrganization not yet implemented")

}

// ListByProducer retrieves multiple artifacts by producerID
func (r *PostgresRepository) ListByProducer(ctx context.Context, producerID *uuid.UUID) ([]*Artifact, error) {

	// TODO: Implement ListByProducer - fetch multiple artifacts
	return nil, fmt.Errorf("ListByProducer not yet implemented")

}

// Mapper functions - Convert between domain types and database types

func mapArtifactFromDB(db *postgresql.Artifact) *Artifact {
	if db == nil {
		return nil
	}

	result := &Artifact{
		ID:        db.ID,
		CreatedAt: db.CreatedAt,
		UpdatedAt: db.UpdatedAt,

		Credits: db.Credits,

		Description: db.Description,

		MimeType: db.MimeType,

		Name: db.Name,

		OrganizationID: db.OrganizationID,

		PreviewImage: db.PreviewImage,

		ProducerID: db.ProducerID,

		Text: db.Text,
	}

	return result
}
