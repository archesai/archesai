// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package artifacts

import (
	"context"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockRepository
func (_mock *MockRepository) Create(ctx context.Context, entity *Artifact) (*Artifact, error) {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *Artifact
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Artifact) (*Artifact, error)); ok {
		return returnFunc(ctx, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Artifact) *Artifact); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Artifact)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *Artifact) error); ok {
		r1 = returnFunc(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *Artifact
func (_e *MockRepository_Expecter) Create(ctx interface{}, entity interface{}) *MockRepository_Create_Call {
	return &MockRepository_Create_Call{Call: _e.mock.On("Create", ctx, entity)}
}

func (_c *MockRepository_Create_Call) Run(run func(ctx context.Context, entity *Artifact)) *MockRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Artifact
		if args[1] != nil {
			arg1 = args[1].(*Artifact)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_Create_Call) Return(artifact *Artifact, err error) *MockRepository_Create_Call {
	_c.Call.Return(artifact, err)
	return _c
}

func (_c *MockRepository_Create_Call) RunAndReturn(run func(ctx context.Context, entity *Artifact) (*Artifact, error)) *MockRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockRepository
func (_mock *MockRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockRepository_Delete_Call {
	return &MockRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockRepository_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_Delete_Call) Return(err error) *MockRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockRepository
func (_mock *MockRepository) Get(ctx context.Context, id uuid.UUID) (*Artifact, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *Artifact
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Artifact, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Artifact); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Artifact)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepository_Expecter) Get(ctx interface{}, id interface{}) *MockRepository_Get_Call {
	return &MockRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockRepository_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_Get_Call) Return(artifact *Artifact, err error) *MockRepository_Get_Call {
	_c.Call.Return(artifact, err)
	return _c
}

func (_c *MockRepository_Get_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*Artifact, error)) *MockRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockRepository
func (_mock *MockRepository) List(ctx context.Context, params ListArtifactsParams) ([]*Artifact, int64, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*Artifact
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ListArtifactsParams) ([]*Artifact, int64, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ListArtifactsParams) []*Artifact); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Artifact)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ListArtifactsParams) int64); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, ListArtifactsParams) error); ok {
		r2 = returnFunc(ctx, params)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - params ListArtifactsParams
func (_e *MockRepository_Expecter) List(ctx interface{}, params interface{}) *MockRepository_List_Call {
	return &MockRepository_List_Call{Call: _e.mock.On("List", ctx, params)}
}

func (_c *MockRepository_List_Call) Run(run func(ctx context.Context, params ListArtifactsParams)) *MockRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ListArtifactsParams
		if args[1] != nil {
			arg1 = args[1].(ListArtifactsParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_List_Call) Return(artifacts []*Artifact, n int64, err error) *MockRepository_List_Call {
	_c.Call.Return(artifacts, n, err)
	return _c
}

func (_c *MockRepository_List_Call) RunAndReturn(run func(ctx context.Context, params ListArtifactsParams) ([]*Artifact, int64, error)) *MockRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByOrganization provides a mock function for the type MockRepository
func (_mock *MockRepository) ListByOrganization(ctx context.Context, organizationID uuid.UUID) ([]*Artifact, error) {
	ret := _mock.Called(ctx, organizationID)

	if len(ret) == 0 {
		panic("no return value specified for ListByOrganization")
	}

	var r0 []*Artifact
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*Artifact, error)); ok {
		return returnFunc(ctx, organizationID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*Artifact); ok {
		r0 = returnFunc(ctx, organizationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Artifact)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, organizationID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_ListByOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByOrganization'
type MockRepository_ListByOrganization_Call struct {
	*mock.Call
}

// ListByOrganization is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationID uuid.UUID
func (_e *MockRepository_Expecter) ListByOrganization(ctx interface{}, organizationID interface{}) *MockRepository_ListByOrganization_Call {
	return &MockRepository_ListByOrganization_Call{Call: _e.mock.On("ListByOrganization", ctx, organizationID)}
}

func (_c *MockRepository_ListByOrganization_Call) Run(run func(ctx context.Context, organizationID uuid.UUID)) *MockRepository_ListByOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_ListByOrganization_Call) Return(artifacts []*Artifact, err error) *MockRepository_ListByOrganization_Call {
	_c.Call.Return(artifacts, err)
	return _c
}

func (_c *MockRepository_ListByOrganization_Call) RunAndReturn(run func(ctx context.Context, organizationID uuid.UUID) ([]*Artifact, error)) *MockRepository_ListByOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// ListByProducer provides a mock function for the type MockRepository
func (_mock *MockRepository) ListByProducer(ctx context.Context, producerID string) ([]*Artifact, error) {
	ret := _mock.Called(ctx, producerID)

	if len(ret) == 0 {
		panic("no return value specified for ListByProducer")
	}

	var r0 []*Artifact
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]*Artifact, error)); ok {
		return returnFunc(ctx, producerID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []*Artifact); ok {
		r0 = returnFunc(ctx, producerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Artifact)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, producerID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_ListByProducer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByProducer'
type MockRepository_ListByProducer_Call struct {
	*mock.Call
}

// ListByProducer is a helper method to define mock.On call
//   - ctx context.Context
//   - producerID string
func (_e *MockRepository_Expecter) ListByProducer(ctx interface{}, producerID interface{}) *MockRepository_ListByProducer_Call {
	return &MockRepository_ListByProducer_Call{Call: _e.mock.On("ListByProducer", ctx, producerID)}
}

func (_c *MockRepository_ListByProducer_Call) Run(run func(ctx context.Context, producerID string)) *MockRepository_ListByProducer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_ListByProducer_Call) Return(artifacts []*Artifact, err error) *MockRepository_ListByProducer_Call {
	_c.Call.Return(artifacts, err)
	return _c
}

func (_c *MockRepository_ListByProducer_Call) RunAndReturn(run func(ctx context.Context, producerID string) ([]*Artifact, error)) *MockRepository_ListByProducer_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockRepository
func (_mock *MockRepository) Update(ctx context.Context, id uuid.UUID, entity *Artifact) (*Artifact, error) {
	ret := _mock.Called(ctx, id, entity)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *Artifact
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *Artifact) (*Artifact, error)); ok {
		return returnFunc(ctx, id, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *Artifact) *Artifact); ok {
		r0 = returnFunc(ctx, id, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Artifact)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *Artifact) error); ok {
		r1 = returnFunc(ctx, id, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - entity *Artifact
func (_e *MockRepository_Expecter) Update(ctx interface{}, id interface{}, entity interface{}) *MockRepository_Update_Call {
	return &MockRepository_Update_Call{Call: _e.mock.On("Update", ctx, id, entity)}
}

func (_c *MockRepository_Update_Call) Run(run func(ctx context.Context, id uuid.UUID, entity *Artifact)) *MockRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *Artifact
		if args[2] != nil {
			arg2 = args[2].(*Artifact)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepository_Update_Call) Return(artifact *Artifact, err error) *MockRepository_Update_Call {
	_c.Call.Return(artifact, err)
	return _c
}

func (_c *MockRepository_Update_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, entity *Artifact) (*Artifact, error)) *MockRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
