// Code generated by archesai/codegen. DO NOT EDIT.

package artifacts

import (
	"context"
	"log/slog"
)

// StrictServer implements StrictServerInterface by delegating to the service
type StrictServer struct {
	service ServiceInterface
	logger  *slog.Logger
}

// NewStrictServer creates a new strict server that implements StrictServerInterface
func NewStrictServer(service ServiceInterface, logger *slog.Logger) StrictServerInterface {
	return &StrictServer{
		service: service,
		logger:  logger,
	}
}

// CreateArtifact handles the create artifact endpoint
func (s *StrictServer) CreateArtifact(ctx context.Context, request CreateArtifactRequestObject) (CreateArtifactResponseObject, error) {
	return s.service.Create(ctx, request)
}

// GetArtifact handles the get artifact endpoint
func (s *StrictServer) GetArtifact(ctx context.Context, request GetArtifactRequestObject) (GetArtifactResponseObject, error) {
	return s.service.Get(ctx, request)
}

// UpdateArtifact handles the update artifact endpoint
func (s *StrictServer) UpdateArtifact(ctx context.Context, request UpdateArtifactRequestObject) (UpdateArtifactResponseObject, error) {
	return s.service.Update(ctx, request)
}

// DeleteArtifact handles the delete artifact endpoint
func (s *StrictServer) DeleteArtifact(ctx context.Context, request DeleteArtifactRequestObject) (DeleteArtifactResponseObject, error) {
	return s.service.Delete(ctx, request)
}

// ListArtifacts handles the list artifacts endpoint
func (s *StrictServer) ListArtifacts(ctx context.Context, request ListArtifactsRequestObject) (ListArtifactsResponseObject, error) {
	return s.service.List(ctx, request)
}
