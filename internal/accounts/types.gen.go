// Package accounts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package accounts

import (
	"encoding/json"
	"time"

	"github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes    = "bearerAuth.Scopes"
	SessionCookieScopes = "sessionCookie.Scopes"
)

// Defines values for AccountProviderID.
const (
	Apple     AccountProviderID = "apple"
	Github    AccountProviderID = "github"
	Google    AccountProviderID = "google"
	Local     AccountProviderID = "local"
	Microsoft AccountProviderID = "microsoft"
)

// Defines values for ListAccountsParamsSortField.
const (
	AccessToken           ListAccountsParamsSortField = "accessToken"
	AccessTokenExpiresAt  ListAccountsParamsSortField = "accessTokenExpiresAt"
	AccountID             ListAccountsParamsSortField = "accountID"
	CreatedAt             ListAccountsParamsSortField = "createdAt"
	ID                    ListAccountsParamsSortField = "id"
	IDToken               ListAccountsParamsSortField = "idToken"
	Password              ListAccountsParamsSortField = "password"
	ProviderID            ListAccountsParamsSortField = "providerID"
	RefreshToken          ListAccountsParamsSortField = "refreshToken"
	RefreshTokenExpiresAt ListAccountsParamsSortField = "refreshTokenExpiresAt"
	Scope                 ListAccountsParamsSortField = "scope"
	UpdatedAt             ListAccountsParamsSortField = "updatedAt"
	UserID                ListAccountsParamsSortField = "userID"
)

// Defines values for ListAccountsParamsSortOrder.
const (
	Asc  ListAccountsParamsSortOrder = "asc"
	Desc ListAccountsParamsSortOrder = "desc"
)

// Account defines model for Account.
type Account struct {
	// AccessToken The OAuth access token
	AccessToken string `json:"accessToken,omitempty,omitzero" yaml:"accessToken,omitempty"`

	// AccessTokenExpiresAt The access token expiration timestamp
	AccessTokenExpiresAt time.Time `json:"accessTokenExpiresAt,omitempty,omitzero" yaml:"accessTokenExpiresAt,omitempty"`

	// AccountID The unique identifier for the account from the provider
	AccountID string `json:"accountID" yaml:"accountID"`

	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// ID Universally Unique IDentifier
	ID UUID `json:"id" yaml:"id"`

	// IDToken The OpenID Connect ID token
	IDToken string `json:"idToken,omitempty,omitzero" yaml:"idToken,omitempty"`

	// Password The hashed password (only for local authentication)
	Password string `json:"password,omitempty,omitzero" yaml:"password,omitempty"`

	// ProviderID The authentication provider identifier
	ProviderID AccountProviderID `json:"providerID" yaml:"providerID"`

	// RefreshToken The OAuth refresh token
	RefreshToken string `json:"refreshToken,omitempty,omitzero" yaml:"refreshToken,omitempty"`

	// RefreshTokenExpiresAt The refresh token expiration timestamp
	RefreshTokenExpiresAt time.Time `json:"refreshTokenExpiresAt,omitempty,omitzero" yaml:"refreshTokenExpiresAt,omitempty"`

	// Scope The OAuth scope granted
	Scope string `json:"scope,omitempty,omitzero" yaml:"scope,omitempty"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`

	// UserID The user ID this account belongs to
	UserID UUID `json:"userID" yaml:"userID"`
}

// AccountProviderID The authentication provider identifier
type AccountProviderID string

// Base defines model for Base.
type Base struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// ID Universally Unique IDentifier
	ID UUID `json:"id" yaml:"id"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// FilterNode A recursive filter node that can be a condition or group
type FilterNode = interface{}

// Page Pagination (page number & size)
type Page struct {
	Number int `json:"number,omitempty,omitzero" yaml:"number,omitempty"`
	Size   int `json:"size,omitempty,omitzero" yaml:"size,omitempty"`
}

// Problem RFC 7807 (Problem Details) compliant error response
type Problem struct {
	// Detail Human-readable explanation specific to this occurrence
	Detail string `json:"detail" yaml:"detail"`

	// Errors Additional validation errors for specific fields
	Errors []ValidationError `json:"errors,omitempty,omitzero" yaml:"errors,omitempty"`

	// Instance URI identifying the specific occurrence
	Instance string `json:"instance,omitempty,omitzero" yaml:"instance,omitempty"`

	// Status HTTP status code
	Status int `json:"status" yaml:"status"`

	// Title Short, human-readable summary
	Title string `json:"title" yaml:"title"`

	// Type URI identifying the problem type
	Type string `json:"type" yaml:"type"`
}

// TokenResponse defines model for TokenResponse.
type TokenResponse struct {
	// AccessToken JWT access token for API authentication
	AccessToken string `json:"access_token" yaml:"access_token"`

	// ExpiresIn Access token expiration time in seconds
	ExpiresIn int64 `json:"expires_in" yaml:"expires_in"`

	// RefreshToken Refresh token for obtaining new access tokens
	RefreshToken string `json:"refresh_token" yaml:"refresh_token"`

	// TokenType Type of token (always "Bearer")
	TokenType string `json:"token_type" yaml:"token_type"`
}

// UUID Universally Unique IDentifier
type UUID = uuid.UUID

// ValidationError Individual field validation error
type ValidationError struct {
	// Field The field path that failed validation
	Field string `json:"field" yaml:"field"`

	// Message Human-readable error message
	Message string `json:"message" yaml:"message"`

	// Value The invalid value that was provided
	Value ValidationError_Value `json:"value,omitempty,omitzero" yaml:"value,omitempty"`
}

// ValidationErrorValue0 defines model for .
type ValidationErrorValue0 = string

// ValidationErrorValue1 defines model for .
type ValidationErrorValue1 = float32

// ValidationErrorValue2 defines model for .
type ValidationErrorValue2 = bool

// ValidationError_Value The invalid value that was provided
type ValidationError_Value struct {
	union json.RawMessage
}

// AccountsFilter A recursive filter node that can be a condition or group
type AccountsFilter = FilterNode

// AccountsSort defines model for AccountsSort.
type AccountsSort = []struct {
	Field string `json:"field" yaml:"field"`
	Order string `json:"order" yaml:"order"`
}

// PageQuery Pagination (page number & size)
type PageQuery = Page

// BadRequest RFC 7807 (Problem Details) compliant error response
type BadRequest = Problem

// NotFound RFC 7807 (Problem Details) compliant error response
type NotFound = Problem

// Unauthorized RFC 7807 (Problem Details) compliant error response
type Unauthorized = Problem

// ListAccountsParams defines parameters for ListAccounts.
type ListAccountsParams struct {
	// Filter Filter accounts by field values. Supported fields:
	// - createdAt, id, updatedAt, accessToken, accessTokenExpiresAt
	// - accountID, idToken, password, providerID, refreshToken
	// - refreshTokenExpiresAt, scope, userID
	Filter AccountsFilter `json:"filter,omitempty,omitzero" yaml:"filter,omitempty"`

	// Page The page parameter
	Page PageQuery `form:"page,omitempty" json:"page,omitempty,omitzero" yaml:"page,omitempty"`

	// Sort The sort parameter
	Sort AccountsSort `form:"sort,omitempty" json:"sort,omitempty,omitzero" yaml:"sort,omitempty"`
}

// ListAccountsParamsSortField defines parameters for ListAccounts.
type ListAccountsParamsSortField string

// ListAccountsParamsSortOrder defines parameters for ListAccounts.
type ListAccountsParamsSortOrder string

// CreateAccountJSONBody defines parameters for CreateAccount.
type CreateAccountJSONBody struct {
	// Email The email address associated with the account
	Email openapi_types.Email `json:"email" yaml:"email"`

	// Name The name of the user creating the account
	Name string `json:"name" yaml:"name"`

	// Password The password for the account
	Password string `json:"password" yaml:"password"`
}

// UpdateAccountJSONBody defines parameters for UpdateAccount.
type UpdateAccountJSONBody struct {
	// Provider The account provider
	Provider string `json:"provider,omitempty,omitzero" yaml:"provider,omitempty"`

	// ProviderAccountID The provider account ID
	ProviderAccountID string `json:"providerAccountID,omitempty,omitzero" yaml:"providerAccountID,omitempty"`

	// Type The account type
	Type string `json:"type,omitempty,omitzero" yaml:"type,omitempty"`
}

// CreateAccountJSONRequestBody defines body for CreateAccount for application/json ContentType.
type CreateAccountJSONRequestBody CreateAccountJSONBody

// UpdateAccountJSONRequestBody defines body for UpdateAccount for application/json ContentType.
type UpdateAccountJSONRequestBody UpdateAccountJSONBody

// AsValidationErrorValue0 returns the union data inside the ValidationError_Value as a ValidationErrorValue0
func (t ValidationError_Value) AsValidationErrorValue0() (ValidationErrorValue0, error) {
	var body ValidationErrorValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorValue0 overwrites any union data inside the ValidationError_Value as the provided ValidationErrorValue0
func (t *ValidationError_Value) FromValidationErrorValue0(v ValidationErrorValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorValue0 performs a merge with any union data inside the ValidationError_Value, using the provided ValidationErrorValue0
func (t *ValidationError_Value) MergeValidationErrorValue0(v ValidationErrorValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorValue1 returns the union data inside the ValidationError_Value as a ValidationErrorValue1
func (t ValidationError_Value) AsValidationErrorValue1() (ValidationErrorValue1, error) {
	var body ValidationErrorValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorValue1 overwrites any union data inside the ValidationError_Value as the provided ValidationErrorValue1
func (t *ValidationError_Value) FromValidationErrorValue1(v ValidationErrorValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorValue1 performs a merge with any union data inside the ValidationError_Value, using the provided ValidationErrorValue1
func (t *ValidationError_Value) MergeValidationErrorValue1(v ValidationErrorValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorValue2 returns the union data inside the ValidationError_Value as a ValidationErrorValue2
func (t ValidationError_Value) AsValidationErrorValue2() (ValidationErrorValue2, error) {
	var body ValidationErrorValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorValue2 overwrites any union data inside the ValidationError_Value as the provided ValidationErrorValue2
func (t *ValidationError_Value) FromValidationErrorValue2(v ValidationErrorValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorValue2 performs a merge with any union data inside the ValidationError_Value, using the provided ValidationErrorValue2
func (t *ValidationError_Value) MergeValidationErrorValue2(v ValidationErrorValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ValidationError_Value) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Value) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
