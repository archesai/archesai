// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package accounts

import (
	"context"
	"time"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache {
	mock := &MockCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCache is an autogenerated mock type for the Cache type
type MockCache struct {
	mock.Mock
}

type MockCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCache) EXPECT() *MockCache_Expecter {
	return &MockCache_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockCache
func (_mock *MockCache) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCache_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockCache_Expecter) Delete(ctx interface{}, id interface{}) *MockCache_Delete_Call {
	return &MockCache_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockCache_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockCache_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCache_Delete_Call) Return(err error) *MockCache_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockCache_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FlushAll provides a mock function for the type MockCache
func (_mock *MockCache) FlushAll(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FlushAll")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_FlushAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlushAll'
type MockCache_FlushAll_Call struct {
	*mock.Call
}

// FlushAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCache_Expecter) FlushAll(ctx interface{}) *MockCache_FlushAll_Call {
	return &MockCache_FlushAll_Call{Call: _e.mock.On("FlushAll", ctx)}
}

func (_c *MockCache_FlushAll_Call) Run(run func(ctx context.Context)) *MockCache_FlushAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCache_FlushAll_Call) Return(err error) *MockCache_FlushAll_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_FlushAll_Call) RunAndReturn(run func(ctx context.Context) error) *MockCache_FlushAll_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockCache
func (_mock *MockCache) Get(ctx context.Context, id uuid.UUID) (*Account, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Account, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Account); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockCache_Expecter) Get(ctx interface{}, id interface{}) *MockCache_Get_Call {
	return &MockCache_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockCache_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockCache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCache_Get_Call) Return(account *Account, err error) *MockCache_Get_Call {
	_c.Call.Return(account, err)
	return _c
}

func (_c *MockCache_Get_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*Account, error)) *MockCache_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByProviderId provides a mock function for the type MockCache
func (_mock *MockCache) GetByProviderId(ctx context.Context, provider string, providerAccountId string) (*Account, error) {
	ret := _mock.Called(ctx, provider, providerAccountId)

	if len(ret) == 0 {
		panic("no return value specified for GetByProviderId")
	}

	var r0 *Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*Account, error)); ok {
		return returnFunc(ctx, provider, providerAccountId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *Account); ok {
		r0 = returnFunc(ctx, provider, providerAccountId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, provider, providerAccountId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCache_GetByProviderId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByProviderId'
type MockCache_GetByProviderId_Call struct {
	*mock.Call
}

// GetByProviderId is a helper method to define mock.On call
//   - ctx context.Context
//   - provider string
//   - providerAccountId string
func (_e *MockCache_Expecter) GetByProviderId(ctx interface{}, provider interface{}, providerAccountId interface{}) *MockCache_GetByProviderId_Call {
	return &MockCache_GetByProviderId_Call{Call: _e.mock.On("GetByProviderId", ctx, provider, providerAccountId)}
}

func (_c *MockCache_GetByProviderId_Call) Run(run func(ctx context.Context, provider string, providerAccountId string)) *MockCache_GetByProviderId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCache_GetByProviderId_Call) Return(account *Account, err error) *MockCache_GetByProviderId_Call {
	_c.Call.Return(account, err)
	return _c
}

func (_c *MockCache_GetByProviderId_Call) RunAndReturn(run func(ctx context.Context, provider string, providerAccountId string) (*Account, error)) *MockCache_GetByProviderId_Call {
	_c.Call.Return(run)
	return _c
}

// ListByUserId provides a mock function for the type MockCache
func (_mock *MockCache) ListByUserId(ctx context.Context, userId uuid.UUID) ([]*Account, error) {
	ret := _mock.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for ListByUserId")
	}

	var r0 []*Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*Account, error)); ok {
		return returnFunc(ctx, userId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*Account); ok {
		r0 = returnFunc(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCache_ListByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByUserId'
type MockCache_ListByUserId_Call struct {
	*mock.Call
}

// ListByUserId is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uuid.UUID
func (_e *MockCache_Expecter) ListByUserId(ctx interface{}, userId interface{}) *MockCache_ListByUserId_Call {
	return &MockCache_ListByUserId_Call{Call: _e.mock.On("ListByUserId", ctx, userId)}
}

func (_c *MockCache_ListByUserId_Call) Run(run func(ctx context.Context, userId uuid.UUID)) *MockCache_ListByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCache_ListByUserId_Call) Return(accounts []*Account, err error) *MockCache_ListByUserId_Call {
	_c.Call.Return(accounts, err)
	return _c
}

func (_c *MockCache_ListByUserId_Call) RunAndReturn(run func(ctx context.Context, userId uuid.UUID) ([]*Account, error)) *MockCache_ListByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type MockCache
func (_mock *MockCache) Set(ctx context.Context, entity *Account, ttl time.Duration) error {
	ret := _mock.Called(ctx, entity, ttl)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Account, time.Duration) error); ok {
		r0 = returnFunc(ctx, entity, ttl)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockCache_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *Account
//   - ttl time.Duration
func (_e *MockCache_Expecter) Set(ctx interface{}, entity interface{}, ttl interface{}) *MockCache_Set_Call {
	return &MockCache_Set_Call{Call: _e.mock.On("Set", ctx, entity, ttl)}
}

func (_c *MockCache_Set_Call) Run(run func(ctx context.Context, entity *Account, ttl time.Duration)) *MockCache_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Account
		if args[1] != nil {
			arg1 = args[1].(*Account)
		}
		var arg2 time.Duration
		if args[2] != nil {
			arg2 = args[2].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCache_Set_Call) Return(err error) *MockCache_Set_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_Set_Call) RunAndReturn(run func(ctx context.Context, entity *Account, ttl time.Duration) error) *MockCache_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventPublisher creates a new instance of MockEventPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventPublisher {
	mock := &MockEventPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEventPublisher is an autogenerated mock type for the EventPublisher type
type MockEventPublisher struct {
	mock.Mock
}

type MockEventPublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventPublisher) EXPECT() *MockEventPublisher_Expecter {
	return &MockEventPublisher_Expecter{mock: &_m.Mock}
}

// PublishAccountCreated provides a mock function for the type MockEventPublisher
func (_mock *MockEventPublisher) PublishAccountCreated(ctx context.Context, entity *Account) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for PublishAccountCreated")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Account) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEventPublisher_PublishAccountCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishAccountCreated'
type MockEventPublisher_PublishAccountCreated_Call struct {
	*mock.Call
}

// PublishAccountCreated is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *Account
func (_e *MockEventPublisher_Expecter) PublishAccountCreated(ctx interface{}, entity interface{}) *MockEventPublisher_PublishAccountCreated_Call {
	return &MockEventPublisher_PublishAccountCreated_Call{Call: _e.mock.On("PublishAccountCreated", ctx, entity)}
}

func (_c *MockEventPublisher_PublishAccountCreated_Call) Run(run func(ctx context.Context, entity *Account)) *MockEventPublisher_PublishAccountCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Account
		if args[1] != nil {
			arg1 = args[1].(*Account)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventPublisher_PublishAccountCreated_Call) Return(err error) *MockEventPublisher_PublishAccountCreated_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEventPublisher_PublishAccountCreated_Call) RunAndReturn(run func(ctx context.Context, entity *Account) error) *MockEventPublisher_PublishAccountCreated_Call {
	_c.Call.Return(run)
	return _c
}

// PublishAccountDeleted provides a mock function for the type MockEventPublisher
func (_mock *MockEventPublisher) PublishAccountDeleted(ctx context.Context, entity *Account) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for PublishAccountDeleted")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Account) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEventPublisher_PublishAccountDeleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishAccountDeleted'
type MockEventPublisher_PublishAccountDeleted_Call struct {
	*mock.Call
}

// PublishAccountDeleted is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *Account
func (_e *MockEventPublisher_Expecter) PublishAccountDeleted(ctx interface{}, entity interface{}) *MockEventPublisher_PublishAccountDeleted_Call {
	return &MockEventPublisher_PublishAccountDeleted_Call{Call: _e.mock.On("PublishAccountDeleted", ctx, entity)}
}

func (_c *MockEventPublisher_PublishAccountDeleted_Call) Run(run func(ctx context.Context, entity *Account)) *MockEventPublisher_PublishAccountDeleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Account
		if args[1] != nil {
			arg1 = args[1].(*Account)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventPublisher_PublishAccountDeleted_Call) Return(err error) *MockEventPublisher_PublishAccountDeleted_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEventPublisher_PublishAccountDeleted_Call) RunAndReturn(run func(ctx context.Context, entity *Account) error) *MockEventPublisher_PublishAccountDeleted_Call {
	_c.Call.Return(run)
	return _c
}

// PublishAccountLinked provides a mock function for the type MockEventPublisher
func (_mock *MockEventPublisher) PublishAccountLinked(ctx context.Context, entity *Account) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for PublishAccountLinked")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Account) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEventPublisher_PublishAccountLinked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishAccountLinked'
type MockEventPublisher_PublishAccountLinked_Call struct {
	*mock.Call
}

// PublishAccountLinked is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *Account
func (_e *MockEventPublisher_Expecter) PublishAccountLinked(ctx interface{}, entity interface{}) *MockEventPublisher_PublishAccountLinked_Call {
	return &MockEventPublisher_PublishAccountLinked_Call{Call: _e.mock.On("PublishAccountLinked", ctx, entity)}
}

func (_c *MockEventPublisher_PublishAccountLinked_Call) Run(run func(ctx context.Context, entity *Account)) *MockEventPublisher_PublishAccountLinked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Account
		if args[1] != nil {
			arg1 = args[1].(*Account)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventPublisher_PublishAccountLinked_Call) Return(err error) *MockEventPublisher_PublishAccountLinked_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEventPublisher_PublishAccountLinked_Call) RunAndReturn(run func(ctx context.Context, entity *Account) error) *MockEventPublisher_PublishAccountLinked_Call {
	_c.Call.Return(run)
	return _c
}

// PublishAccountUnlinked provides a mock function for the type MockEventPublisher
func (_mock *MockEventPublisher) PublishAccountUnlinked(ctx context.Context, entity *Account) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for PublishAccountUnlinked")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Account) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEventPublisher_PublishAccountUnlinked_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishAccountUnlinked'
type MockEventPublisher_PublishAccountUnlinked_Call struct {
	*mock.Call
}

// PublishAccountUnlinked is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *Account
func (_e *MockEventPublisher_Expecter) PublishAccountUnlinked(ctx interface{}, entity interface{}) *MockEventPublisher_PublishAccountUnlinked_Call {
	return &MockEventPublisher_PublishAccountUnlinked_Call{Call: _e.mock.On("PublishAccountUnlinked", ctx, entity)}
}

func (_c *MockEventPublisher_PublishAccountUnlinked_Call) Run(run func(ctx context.Context, entity *Account)) *MockEventPublisher_PublishAccountUnlinked_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Account
		if args[1] != nil {
			arg1 = args[1].(*Account)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventPublisher_PublishAccountUnlinked_Call) Return(err error) *MockEventPublisher_PublishAccountUnlinked_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEventPublisher_PublishAccountUnlinked_Call) RunAndReturn(run func(ctx context.Context, entity *Account) error) *MockEventPublisher_PublishAccountUnlinked_Call {
	_c.Call.Return(run)
	return _c
}

// PublishAccountUpdated provides a mock function for the type MockEventPublisher
func (_mock *MockEventPublisher) PublishAccountUpdated(ctx context.Context, entity *Account) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for PublishAccountUpdated")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Account) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEventPublisher_PublishAccountUpdated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishAccountUpdated'
type MockEventPublisher_PublishAccountUpdated_Call struct {
	*mock.Call
}

// PublishAccountUpdated is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *Account
func (_e *MockEventPublisher_Expecter) PublishAccountUpdated(ctx interface{}, entity interface{}) *MockEventPublisher_PublishAccountUpdated_Call {
	return &MockEventPublisher_PublishAccountUpdated_Call{Call: _e.mock.On("PublishAccountUpdated", ctx, entity)}
}

func (_c *MockEventPublisher_PublishAccountUpdated_Call) Run(run func(ctx context.Context, entity *Account)) *MockEventPublisher_PublishAccountUpdated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Account
		if args[1] != nil {
			arg1 = args[1].(*Account)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventPublisher_PublishAccountUpdated_Call) Return(err error) *MockEventPublisher_PublishAccountUpdated_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEventPublisher_PublishAccountUpdated_Call) RunAndReturn(run func(ctx context.Context, entity *Account) error) *MockEventPublisher_PublishAccountUpdated_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockRepository
func (_mock *MockRepository) Create(ctx context.Context, entity *Account) (*Account, error) {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Account) (*Account, error)); ok {
		return returnFunc(ctx, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Account) *Account); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *Account) error); ok {
		r1 = returnFunc(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *Account
func (_e *MockRepository_Expecter) Create(ctx interface{}, entity interface{}) *MockRepository_Create_Call {
	return &MockRepository_Create_Call{Call: _e.mock.On("Create", ctx, entity)}
}

func (_c *MockRepository_Create_Call) Run(run func(ctx context.Context, entity *Account)) *MockRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Account
		if args[1] != nil {
			arg1 = args[1].(*Account)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_Create_Call) Return(account *Account, err error) *MockRepository_Create_Call {
	_c.Call.Return(account, err)
	return _c
}

func (_c *MockRepository_Create_Call) RunAndReturn(run func(ctx context.Context, entity *Account) (*Account, error)) *MockRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockRepository
func (_mock *MockRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockRepository_Delete_Call {
	return &MockRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockRepository_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_Delete_Call) Return(err error) *MockRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockRepository
func (_mock *MockRepository) Get(ctx context.Context, id uuid.UUID) (*Account, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Account, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Account); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepository_Expecter) Get(ctx interface{}, id interface{}) *MockRepository_Get_Call {
	return &MockRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockRepository_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_Get_Call) Return(account *Account, err error) *MockRepository_Get_Call {
	_c.Call.Return(account, err)
	return _c
}

func (_c *MockRepository_Get_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*Account, error)) *MockRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByProviderId provides a mock function for the type MockRepository
func (_mock *MockRepository) GetByProviderId(ctx context.Context, provider string, providerAccountId string) (*Account, error) {
	ret := _mock.Called(ctx, provider, providerAccountId)

	if len(ret) == 0 {
		panic("no return value specified for GetByProviderId")
	}

	var r0 *Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*Account, error)); ok {
		return returnFunc(ctx, provider, providerAccountId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *Account); ok {
		r0 = returnFunc(ctx, provider, providerAccountId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, provider, providerAccountId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetByProviderId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByProviderId'
type MockRepository_GetByProviderId_Call struct {
	*mock.Call
}

// GetByProviderId is a helper method to define mock.On call
//   - ctx context.Context
//   - provider string
//   - providerAccountId string
func (_e *MockRepository_Expecter) GetByProviderId(ctx interface{}, provider interface{}, providerAccountId interface{}) *MockRepository_GetByProviderId_Call {
	return &MockRepository_GetByProviderId_Call{Call: _e.mock.On("GetByProviderId", ctx, provider, providerAccountId)}
}

func (_c *MockRepository_GetByProviderId_Call) Run(run func(ctx context.Context, provider string, providerAccountId string)) *MockRepository_GetByProviderId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepository_GetByProviderId_Call) Return(account *Account, err error) *MockRepository_GetByProviderId_Call {
	_c.Call.Return(account, err)
	return _c
}

func (_c *MockRepository_GetByProviderId_Call) RunAndReturn(run func(ctx context.Context, provider string, providerAccountId string) (*Account, error)) *MockRepository_GetByProviderId_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockRepository
func (_mock *MockRepository) List(ctx context.Context, params ListAccountsParams) ([]*Account, int64, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*Account
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ListAccountsParams) ([]*Account, int64, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ListAccountsParams) []*Account); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ListAccountsParams) int64); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, ListAccountsParams) error); ok {
		r2 = returnFunc(ctx, params)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - params ListAccountsParams
func (_e *MockRepository_Expecter) List(ctx interface{}, params interface{}) *MockRepository_List_Call {
	return &MockRepository_List_Call{Call: _e.mock.On("List", ctx, params)}
}

func (_c *MockRepository_List_Call) Run(run func(ctx context.Context, params ListAccountsParams)) *MockRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ListAccountsParams
		if args[1] != nil {
			arg1 = args[1].(ListAccountsParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_List_Call) Return(accounts []*Account, n int64, err error) *MockRepository_List_Call {
	_c.Call.Return(accounts, n, err)
	return _c
}

func (_c *MockRepository_List_Call) RunAndReturn(run func(ctx context.Context, params ListAccountsParams) ([]*Account, int64, error)) *MockRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByUserId provides a mock function for the type MockRepository
func (_mock *MockRepository) ListByUserId(ctx context.Context, userId uuid.UUID) ([]*Account, error) {
	ret := _mock.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for ListByUserId")
	}

	var r0 []*Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*Account, error)); ok {
		return returnFunc(ctx, userId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*Account); ok {
		r0 = returnFunc(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_ListByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByUserId'
type MockRepository_ListByUserId_Call struct {
	*mock.Call
}

// ListByUserId is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uuid.UUID
func (_e *MockRepository_Expecter) ListByUserId(ctx interface{}, userId interface{}) *MockRepository_ListByUserId_Call {
	return &MockRepository_ListByUserId_Call{Call: _e.mock.On("ListByUserId", ctx, userId)}
}

func (_c *MockRepository_ListByUserId_Call) Run(run func(ctx context.Context, userId uuid.UUID)) *MockRepository_ListByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_ListByUserId_Call) Return(accounts []*Account, err error) *MockRepository_ListByUserId_Call {
	_c.Call.Return(accounts, err)
	return _c
}

func (_c *MockRepository_ListByUserId_Call) RunAndReturn(run func(ctx context.Context, userId uuid.UUID) ([]*Account, error)) *MockRepository_ListByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockRepository
func (_mock *MockRepository) Update(ctx context.Context, id uuid.UUID, entity *Account) (*Account, error) {
	ret := _mock.Called(ctx, id, entity)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *Account) (*Account, error)); ok {
		return returnFunc(ctx, id, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *Account) *Account); ok {
		r0 = returnFunc(ctx, id, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *Account) error); ok {
		r1 = returnFunc(ctx, id, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - entity *Account
func (_e *MockRepository_Expecter) Update(ctx interface{}, id interface{}, entity interface{}) *MockRepository_Update_Call {
	return &MockRepository_Update_Call{Call: _e.mock.On("Update", ctx, id, entity)}
}

func (_c *MockRepository_Update_Call) Run(run func(ctx context.Context, id uuid.UUID, entity *Account)) *MockRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *Account
		if args[2] != nil {
			arg2 = args[2].(*Account)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepository_Update_Call) Return(account *Account, err error) *MockRepository_Update_Call {
	_c.Call.Return(account, err)
	return _c
}

func (_c *MockRepository_Update_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, entity *Account) (*Account, error)) *MockRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
