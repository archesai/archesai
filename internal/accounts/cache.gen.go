// Code generated by codegen cache. DO NOT EDIT.
package accounts

import (
	"context"
	"time"

	genericcache "github.com/archesai/archesai/internal/cache"
	"github.com/google/uuid"
)

// ErrCacheMiss re-exported from generic cache package
var ErrCacheMiss = genericcache.ErrCacheMiss

// Cache provides caching operations for accounts domain.
type Cache interface {

	// Account caching
	Get(ctx context.Context, id uuid.UUID) (*Account, error)
	Set(ctx context.Context, entity *Account, ttl time.Duration) error
	Delete(ctx context.Context, id uuid.UUID) error
	GetByProviderId(ctx context.Context, provider string, providerAccountId string) (*Account, error)
	ListByUserId(ctx context.Context, userID uuid.UUID) ([]*Account, error)

	// Batch operations
	FlushAll(ctx context.Context) error
}

// NewNoOpCache creates a no-op cache using the generic NoOpCache with the adapter
func NewNoOpCache() Cache {
	return NewCacheAdapter(genericcache.NewNoOpCache[Account]())
}

// CacheAdapter adapts generic cache implementations to the domain Cache interface
type CacheAdapter struct {
	accountCache genericcache.Cache[Account]
}

// NewCacheAdapter creates a new cache adapter using generic caches
func NewCacheAdapter(accountCache genericcache.Cache[Account]) Cache {
	return &CacheAdapter{
		accountCache: accountCache,
	}
}

// Get retrieves account from cache by ID
func (a *CacheAdapter) Get(ctx context.Context, id uuid.UUID) (*Account, error) {
	entity, err := a.accountCache.Get(ctx, id.String())
	if err != nil {
		return nil, err
	}
	if entity == nil {
		return nil, ErrCacheMiss
	}
	return entity, nil
}

// Set stores account in cache with TTL
func (a *CacheAdapter) Set(ctx context.Context, entity *Account, ttl time.Duration) error {
	if entity == nil {
		return nil
	}
	return a.accountCache.Set(ctx, entity.ID.String(), entity, ttl)
}

// Delete removes account from cache
func (a *CacheAdapter) Delete(ctx context.Context, id uuid.UUID) error {
	return a.accountCache.Delete(ctx, id.String())
}

// GetByProviderId retrieves account from cache by providerproviderAccountId
func (a *CacheAdapter) GetByProviderId(ctx context.Context, provider string, providerAccountId string) (*Account, error) {
	key := "provider:" + provider
	entity, err := a.accountCache.Get(ctx, key)
	if err != nil {
		return nil, err
	}
	if entity == nil {
		return nil, ErrCacheMiss
	}
	return entity, nil
}

// ListByUserId retrieves multiple accounts from cache by userID
func (a *CacheAdapter) ListByUserId(ctx context.Context, userID uuid.UUID) ([]*Account, error) {
	// List operations typically aren't cached as they're dynamic
	// Return cache miss to fall back to database
	return nil, ErrCacheMiss
}

// FlushAll clears all cached data
func (a *CacheAdapter) FlushAll(ctx context.Context) error {
	if err := a.accountCache.Clear(ctx); err != nil {
		return err
	}
	return nil
}

// Ensure CacheAdapter implements Cache interface
var _ Cache = (*CacheAdapter)(nil)
