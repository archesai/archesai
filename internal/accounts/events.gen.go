// Code generated by codegen events. DO NOT EDIT.
package accounts

import (
	"context"
	"github.com/archesai/archesai/internal/events"
)

// Event type constants for accounts domain.
const (
	EventAccountCreated  = "account.created"
	EventAccountUpdated  = "account.updated"
	EventAccountDeleted  = "account.deleted"
	EventAccountLinked   = "account.linked"
	EventAccountUnlinked = "account.unlinked"
)

// AccountCreatedEvent represents a created event for Account.
type AccountCreatedEvent struct {
	events.BaseEvent
	Account *Account `json:"account"`
}

// NewAccountCreatedEvent creates a new Account created event.
func NewAccountCreatedEvent(entity *Account) *AccountCreatedEvent {
	return &AccountCreatedEvent{
		BaseEvent: events.NewBaseEvent("accounts", EventAccountCreated),
		Account:   entity,
	}
}

// EventType returns the event type string.
func (e *AccountCreatedEvent) EventType() string {
	return EventAccountCreated
}

// EventDomain returns the domain this event belongs to.
func (e *AccountCreatedEvent) EventDomain() string {
	return "accounts"
}

// EventData returns the actual event data.
func (e *AccountCreatedEvent) EventData() interface{} {
	return e.Account
}

// AccountUpdatedEvent represents a updated event for Account.
type AccountUpdatedEvent struct {
	events.BaseEvent
	Account *Account `json:"account"`
}

// NewAccountUpdatedEvent creates a new Account updated event.
func NewAccountUpdatedEvent(entity *Account) *AccountUpdatedEvent {
	return &AccountUpdatedEvent{
		BaseEvent: events.NewBaseEvent("accounts", EventAccountUpdated),
		Account:   entity,
	}
}

// EventType returns the event type string.
func (e *AccountUpdatedEvent) EventType() string {
	return EventAccountUpdated
}

// EventDomain returns the domain this event belongs to.
func (e *AccountUpdatedEvent) EventDomain() string {
	return "accounts"
}

// EventData returns the actual event data.
func (e *AccountUpdatedEvent) EventData() interface{} {
	return e.Account
}

// AccountDeletedEvent represents a deleted event for Account.
type AccountDeletedEvent struct {
	events.BaseEvent
	Account *Account `json:"account"`
}

// NewAccountDeletedEvent creates a new Account deleted event.
func NewAccountDeletedEvent(entity *Account) *AccountDeletedEvent {
	return &AccountDeletedEvent{
		BaseEvent: events.NewBaseEvent("accounts", EventAccountDeleted),
		Account:   entity,
	}
}

// EventType returns the event type string.
func (e *AccountDeletedEvent) EventType() string {
	return EventAccountDeleted
}

// EventDomain returns the domain this event belongs to.
func (e *AccountDeletedEvent) EventDomain() string {
	return "accounts"
}

// EventData returns the actual event data.
func (e *AccountDeletedEvent) EventData() interface{} {
	return e.Account
}

// AccountLinkedEvent represents a linked event for Account.
type AccountLinkedEvent struct {
	events.BaseEvent
	Account *Account `json:"account"`
}

// NewAccountLinkedEvent creates a new Account linked event.
func NewAccountLinkedEvent(entity *Account) *AccountLinkedEvent {
	return &AccountLinkedEvent{
		BaseEvent: events.NewBaseEvent("accounts", EventAccountLinked),
		Account:   entity,
	}
}

// EventType returns the event type string.
func (e *AccountLinkedEvent) EventType() string {
	return EventAccountLinked
}

// EventDomain returns the domain this event belongs to.
func (e *AccountLinkedEvent) EventDomain() string {
	return "accounts"
}

// EventData returns the actual event data.
func (e *AccountLinkedEvent) EventData() interface{} {
	return e.Account
}

// AccountUnlinkedEvent represents a unlinked event for Account.
type AccountUnlinkedEvent struct {
	events.BaseEvent
	Account *Account `json:"account"`
}

// NewAccountUnlinkedEvent creates a new Account unlinked event.
func NewAccountUnlinkedEvent(entity *Account) *AccountUnlinkedEvent {
	return &AccountUnlinkedEvent{
		BaseEvent: events.NewBaseEvent("accounts", EventAccountUnlinked),
		Account:   entity,
	}
}

// EventType returns the event type string.
func (e *AccountUnlinkedEvent) EventType() string {
	return EventAccountUnlinked
}

// EventDomain returns the domain this event belongs to.
func (e *AccountUnlinkedEvent) EventDomain() string {
	return "accounts"
}

// EventData returns the actual event data.
func (e *AccountUnlinkedEvent) EventData() interface{} {
	return e.Account
}

// EventPublisher publishes domain events for accounts.
type EventPublisher interface {
	PublishAccountCreated(ctx context.Context, entity *Account) error
	PublishAccountUpdated(ctx context.Context, entity *Account) error
	PublishAccountDeleted(ctx context.Context, entity *Account) error
	PublishAccountLinked(ctx context.Context, entity *Account) error
	PublishAccountUnlinked(ctx context.Context, entity *Account) error
}

// eventPublisher implements EventPublisher for accounts domain.
type eventPublisher struct {
	publisher events.Publisher
}

// NewEventPublisher creates a new event publisher for accounts domain.
func NewEventPublisher(publisher events.Publisher) EventPublisher {
	return &eventPublisher{
		publisher: publisher,
	}
}

// PublishAccountCreated publishes a created event for Account.
func (p *eventPublisher) PublishAccountCreated(ctx context.Context, entity *Account) error {
	event := NewAccountCreatedEvent(entity)
	return events.PublishDomainEvent(ctx, p.publisher, event)
}

// PublishAccountUpdated publishes a updated event for Account.
func (p *eventPublisher) PublishAccountUpdated(ctx context.Context, entity *Account) error {
	event := NewAccountUpdatedEvent(entity)
	return events.PublishDomainEvent(ctx, p.publisher, event)
}

// PublishAccountDeleted publishes a deleted event for Account.
func (p *eventPublisher) PublishAccountDeleted(ctx context.Context, entity *Account) error {
	event := NewAccountDeletedEvent(entity)
	return events.PublishDomainEvent(ctx, p.publisher, event)
}

// PublishAccountLinked publishes a linked event for Account.
func (p *eventPublisher) PublishAccountLinked(ctx context.Context, entity *Account) error {
	event := NewAccountLinkedEvent(entity)
	return events.PublishDomainEvent(ctx, p.publisher, event)
}

// PublishAccountUnlinked publishes a unlinked event for Account.
func (p *eventPublisher) PublishAccountUnlinked(ctx context.Context, entity *Account) error {
	event := NewAccountUnlinkedEvent(entity)
	return events.PublishDomainEvent(ctx, p.publisher, event)
}

// NewNoOpEventPublisher creates a new no-op event publisher for testing.
func NewNoOpEventPublisher() EventPublisher {
	return NewEventPublisher(events.NewNoOpPublisher())
}
