// Package accounts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package accounts

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Find many accounts
	// (GET /auth/accounts)
	AccountsFindMany(ctx echo.Context, params AccountsFindManyParams) error
	// Create account (Register)
	// (POST /auth/accounts)
	AccountsCreate(ctx echo.Context) error
	// Delete an account
	// (DELETE /auth/accounts/{id})
	AccountsDelete(ctx echo.Context, id openapi_types.UUID) error
	// Find an account
	// (GET /auth/accounts/{id})
	AccountsGetOne(ctx echo.Context, id openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountsFindMany converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsFindMany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountsFindManyParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountsFindMany(ctx, params)
	return err
}

// AccountsCreate converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(SessionCookieScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountsCreate(ctx)
	return err
}

// AccountsDelete converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountsDelete(ctx, id)
	return err
}

// AccountsGetOne converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsGetOne(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountsGetOne(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/auth/accounts", wrapper.AccountsFindMany)
	router.POST(baseURL+"/auth/accounts", wrapper.AccountsCreate)
	router.DELETE(baseURL+"/auth/accounts/:id", wrapper.AccountsDelete)
	router.GET(baseURL+"/auth/accounts/:id", wrapper.AccountsGetOne)

}

type BadRequestApplicationProblemPlusJSONResponse Problem

type NotFoundApplicationProblemPlusJSONResponse Problem

type UnauthorizedApplicationProblemPlusJSONResponse Problem

type AccountsFindManyRequestObject struct {
	Params AccountsFindManyParams
}

type AccountsFindManyResponseObject interface {
	VisitAccountsFindManyResponse(w http.ResponseWriter) error
}

type AccountsFindMany200JSONResponse struct {
	Data []Account `json:"data"`
	Meta struct {
		Total float32 `json:"total"`
	} `json:"meta"`
}

func (response AccountsFindMany200JSONResponse) VisitAccountsFindManyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccountsFindMany400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response AccountsFindMany400ApplicationProblemPlusJSONResponse) VisitAccountsFindManyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AccountsFindMany401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response AccountsFindMany401ApplicationProblemPlusJSONResponse) VisitAccountsFindManyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AccountsCreateRequestObject struct {
	Body *AccountsCreateJSONRequestBody
}

type AccountsCreateResponseObject interface {
	VisitAccountsCreateResponse(w http.ResponseWriter) error
}

type AccountsCreate201JSONResponse TokenResponse

func (response AccountsCreate201JSONResponse) VisitAccountsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type AccountsCreate400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response AccountsCreate400ApplicationProblemPlusJSONResponse) VisitAccountsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AccountsCreate409ApplicationProblemPlusJSONResponse Problem

func (response AccountsCreate409ApplicationProblemPlusJSONResponse) VisitAccountsCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type AccountsDeleteRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type AccountsDeleteResponseObject interface {
	VisitAccountsDeleteResponse(w http.ResponseWriter) error
}

type AccountsDelete200JSONResponse struct {
	// Data Schema for Account entity (authentication provider account)
	Data Account `json:"data"`
}

func (response AccountsDelete200JSONResponse) VisitAccountsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccountsDelete404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response AccountsDelete404ApplicationProblemPlusJSONResponse) VisitAccountsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AccountsGetOneRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type AccountsGetOneResponseObject interface {
	VisitAccountsGetOneResponse(w http.ResponseWriter) error
}

type AccountsGetOne200JSONResponse struct {
	// Data Schema for Account entity (authentication provider account)
	Data Account `json:"data"`
}

func (response AccountsGetOne200JSONResponse) VisitAccountsGetOneResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccountsGetOne404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response AccountsGetOne404ApplicationProblemPlusJSONResponse) VisitAccountsGetOneResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Find many accounts
	// (GET /auth/accounts)
	AccountsFindMany(ctx context.Context, request AccountsFindManyRequestObject) (AccountsFindManyResponseObject, error)
	// Create account (Register)
	// (POST /auth/accounts)
	AccountsCreate(ctx context.Context, request AccountsCreateRequestObject) (AccountsCreateResponseObject, error)
	// Delete an account
	// (DELETE /auth/accounts/{id})
	AccountsDelete(ctx context.Context, request AccountsDeleteRequestObject) (AccountsDeleteResponseObject, error)
	// Find an account
	// (GET /auth/accounts/{id})
	AccountsGetOne(ctx context.Context, request AccountsGetOneRequestObject) (AccountsGetOneResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// AccountsFindMany operation middleware
func (sh *strictHandler) AccountsFindMany(ctx echo.Context, params AccountsFindManyParams) error {
	var request AccountsFindManyRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountsFindMany(ctx.Request().Context(), request.(AccountsFindManyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountsFindMany")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountsFindManyResponseObject); ok {
		return validResponse.VisitAccountsFindManyResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AccountsCreate operation middleware
func (sh *strictHandler) AccountsCreate(ctx echo.Context) error {
	var request AccountsCreateRequestObject

	var body AccountsCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountsCreate(ctx.Request().Context(), request.(AccountsCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountsCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountsCreateResponseObject); ok {
		return validResponse.VisitAccountsCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AccountsDelete operation middleware
func (sh *strictHandler) AccountsDelete(ctx echo.Context, id openapi_types.UUID) error {
	var request AccountsDeleteRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountsDelete(ctx.Request().Context(), request.(AccountsDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountsDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountsDeleteResponseObject); ok {
		return validResponse.VisitAccountsDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AccountsGetOne operation middleware
func (sh *strictHandler) AccountsGetOne(ctx echo.Context, id openapi_types.UUID) error {
	var request AccountsGetOneRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountsGetOne(ctx.Request().Context(), request.(AccountsGetOneRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountsGetOne")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountsGetOneResponseObject); ok {
		return validResponse.VisitAccountsGetOneResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
