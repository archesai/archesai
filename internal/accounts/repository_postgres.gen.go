// Code generated by codegen repository. DO NOT EDIT.
package accounts

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/archesai/archesai/internal/database/postgresql"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgxpool"
)

// PostgresRepository implements Repository using PostgreSQL.
type PostgresRepository struct {
	queries *postgresql.Queries
}

// NewPostgresRepository creates a new PostgreSQL repository.
func NewPostgresRepository(db *pgxpool.Pool) Repository {
	return &PostgresRepository{
		queries: postgresql.New(db),
	}
}

// Account operations

// Create creates a new account
func (r *PostgresRepository) Create(ctx context.Context, entity *Account) (*Account, error) {
	params := postgresql.CreateAccountParams{
		ID: entity.ID,

		AccessToken:           entity.AccessToken,
		AccessTokenExpiresAt:  entity.AccessTokenExpiresAt,
		AccountID:             entity.AccountID,
		IDToken:               entity.IDToken,
		ProviderID:            string(entity.ProviderID),
		RefreshToken:          entity.RefreshToken,
		RefreshTokenExpiresAt: entity.RefreshTokenExpiresAt,
		Scope:                 entity.Scope,
		UserID:                entity.UserID,
	}

	result, err := r.queries.CreateAccount(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to create account: %w", err)
	}

	return mapAccountFromDB(&result), nil
}

// Get retrieves a account by ID
func (r *PostgresRepository) Get(ctx context.Context, id uuid.UUID) (*Account, error) {
	result, err := r.queries.GetAccount(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrAccountNotFound
		}
		return nil, fmt.Errorf("failed to get account: %w", err)
	}

	return mapAccountFromDB(&result), nil
}

// Update updates an existing account
func (r *PostgresRepository) Update(ctx context.Context, id uuid.UUID, entity *Account) (*Account, error) {
	params := postgresql.UpdateAccountParams{
		ID: id,

		AccessToken:           entity.AccessToken,
		AccessTokenExpiresAt:  entity.AccessTokenExpiresAt,
		IDToken:               entity.IDToken,
		RefreshToken:          entity.RefreshToken,
		RefreshTokenExpiresAt: entity.RefreshTokenExpiresAt,
		Scope:                 entity.Scope,
	}

	result, err := r.queries.UpdateAccount(ctx, params)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrAccountNotFound
		}
		return nil, fmt.Errorf("failed to update account: %w", err)
	}

	return mapAccountFromDB(&result), nil
}

// Delete removes a account
func (r *PostgresRepository) Delete(ctx context.Context, id uuid.UUID) error {
	err := r.queries.DeleteAccount(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return ErrAccountNotFound
		}
		return fmt.Errorf("failed to delete account: %w", err)
	}
	return nil
}

// List returns a paginated list of accounts
func (r *PostgresRepository) List(ctx context.Context, params ListAccountsParams) ([]*Account, int64, error) {
	// Calculate offset from page
	offset := int32(0)
	limit := int32(10) // default

	// Check if params has Page field with Number and Size
	if params.Page != nil && params.Page.Number > 0 && params.Page.Size > 0 {
		offset = int32((params.Page.Number - 1) * params.Page.Size)
		limit = int32(params.Page.Size)
	}

	listParams := postgresql.ListAccountsParams{
		Limit:  limit,
		Offset: offset,
	}

	results, err := r.queries.ListAccounts(ctx, listParams)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list accounts: %w", err)
	}

	items := make([]*Account, len(results))
	for i, result := range results {
		items[i] = mapAccountFromDB(&result)
	}

	// For now, return the count as the length of results
	// In production, you'd want a separate count query
	count := int64(len(results))

	return items, count, nil
}

// Additional methods

// GetByProviderID retrieves a single account by provider and providerAccountID
func (r *PostgresRepository) GetByProviderID(ctx context.Context, provider AccountProviderID, providerAccountID string) (*Account, error) {

	// TODO: Implement GetByProviderID - fetch single account
	return nil, fmt.Errorf("GetByProviderID not yet implemented")

}

// ListByUserID retrieves multiple accounts by userID
func (r *PostgresRepository) ListByUserID(ctx context.Context, userID uuid.UUID) ([]*Account, error) {

	// TODO: Implement ListByUserID - fetch multiple accounts
	return nil, fmt.Errorf("ListByUserID not yet implemented")

}

// Mapper functions - Convert between domain types and database types

func mapAccountFromDB(db *postgresql.Account) *Account {
	if db == nil {
		return nil
	}

	result := &Account{
		ID:        db.ID,
		CreatedAt: db.CreatedAt,
		UpdatedAt: db.UpdatedAt,

		AccessToken: db.AccessToken,

		AccessTokenExpiresAt: db.AccessTokenExpiresAt,

		AccountID: db.AccountID,

		IDToken: db.IDToken,

		ProviderID: AccountProviderID(db.ProviderID),

		RefreshToken: db.RefreshToken,

		RefreshTokenExpiresAt: db.RefreshTokenExpiresAt,

		Scope: db.Scope,

		UserID: db.UserID,
	}

	return result
}
