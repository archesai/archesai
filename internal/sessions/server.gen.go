// Code generated by archesai/codegen. DO NOT EDIT.

package sessions

import (
	"context"
	"log/slog"
)

// StrictServer implements StrictServerInterface by delegating to the service
type StrictServer struct {
	service ServiceInterface
	logger  *slog.Logger
}

// NewStrictServer creates a new strict server that implements StrictServerInterface
func NewStrictServer(service ServiceInterface, logger *slog.Logger) StrictServerInterface {
	return &StrictServer{
		service: service,
		logger:  logger,
	}
}

// CreateSession handles the create session endpoint
func (s *StrictServer) CreateSession(ctx context.Context, request CreateSessionRequestObject) (CreateSessionResponseObject, error) {
	return s.service.Create(ctx, request)
}

// GetSession handles the get session endpoint
func (s *StrictServer) GetSession(ctx context.Context, request GetSessionRequestObject) (GetSessionResponseObject, error) {
	return s.service.Get(ctx, request)
}

// UpdateSession handles the update session endpoint
func (s *StrictServer) UpdateSession(ctx context.Context, request UpdateSessionRequestObject) (UpdateSessionResponseObject, error) {
	return s.service.Update(ctx, request)
}

// DeleteSession handles the delete session endpoint
func (s *StrictServer) DeleteSession(ctx context.Context, request DeleteSessionRequestObject) (DeleteSessionResponseObject, error) {
	return s.service.Delete(ctx, request)
}

// ListSessions handles the list sessions endpoint
func (s *StrictServer) ListSessions(ctx context.Context, request ListSessionsRequestObject) (ListSessionsResponseObject, error) {
	return s.service.List(ctx, request)
}
