// Code generated by codegen cache. DO NOT EDIT.
package sessions

import (
	"context"
	"time"

	genericcache "github.com/archesai/archesai/internal/cache"
	"github.com/google/uuid"
)

// ErrCacheMiss re-exported from generic cache package
var ErrCacheMiss = genericcache.ErrCacheMiss

// Cache provides caching operations for sessions domain.
type Cache interface {

	// Session caching
	Get(ctx context.Context, id uuid.UUID) (*Session, error)
	Set(ctx context.Context, entity *Session, ttl time.Duration) error
	Delete(ctx context.Context, id uuid.UUID) error
	GetByToken(ctx context.Context, token string) (*Session, error)
	DeleteByToken(ctx context.Context, token string) error
	DeleteByUser(ctx context.Context, userId uuid.UUID) error
	DeleteExpired(ctx context.Context) error

	// Batch operations
	FlushAll(ctx context.Context) error
}

// NewNoOpCache creates a no-op cache using the generic NoOpCache with the adapter
func NewNoOpCache() Cache {
	return NewCacheAdapter(genericcache.NewNoOpCache[Session]())
}

// CacheAdapter adapts generic cache implementations to the domain Cache interface
type CacheAdapter struct {
	sessionCache genericcache.Cache[Session]
}

// NewCacheAdapter creates a new cache adapter using generic caches
func NewCacheAdapter(sessionCache genericcache.Cache[Session]) Cache {
	return &CacheAdapter{
		sessionCache: sessionCache,
	}
}

// Get retrieves session from cache by ID
func (a *CacheAdapter) Get(ctx context.Context, id uuid.UUID) (*Session, error) {
	entity, err := a.sessionCache.Get(ctx, id.String())
	if err != nil {
		return nil, err
	}
	if entity == nil {
		return nil, ErrCacheMiss
	}
	return entity, nil
}

// Set stores session in cache with TTL
func (a *CacheAdapter) Set(ctx context.Context, entity *Session, ttl time.Duration) error {
	if entity == nil {
		return nil
	}
	return a.sessionCache.Set(ctx, entity.Id.String(), entity, ttl)
}

// Delete removes session from cache
func (a *CacheAdapter) Delete(ctx context.Context, id uuid.UUID) error {
	return a.sessionCache.Delete(ctx, id.String())
}

// GetByToken retrieves session from cache by token
func (a *CacheAdapter) GetByToken(ctx context.Context, token string) (*Session, error) {
	key := "token:" + token
	entity, err := a.sessionCache.Get(ctx, key)
	if err != nil {
		return nil, err
	}
	if entity == nil {
		return nil, ErrCacheMiss
	}
	return entity, nil
}

// DeleteByToken removes cache entries by token
func (a *CacheAdapter) DeleteByToken(ctx context.Context, token string) error {
	key := "token:" + token
	return a.sessionCache.Delete(ctx, key)
}

// DeleteByUser removes cache entries by userId
func (a *CacheAdapter) DeleteByUser(ctx context.Context, userId uuid.UUID) error {
	key := "userId:" + userId.String()
	return a.sessionCache.Delete(ctx, key)
}

// DeleteExpired removes cache entries
func (a *CacheAdapter) DeleteExpired(ctx context.Context) error {
	// This would require a more complex implementation
	// For now, returning nil as it's best-effort cleanup
	return nil
}

// FlushAll clears all cached data
func (a *CacheAdapter) FlushAll(ctx context.Context) error {
	if err := a.sessionCache.Clear(ctx); err != nil {
		return err
	}
	return nil
}

// Ensure CacheAdapter implements Cache interface
var _ Cache = (*CacheAdapter)(nil)
