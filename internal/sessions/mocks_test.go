// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package sessions

import (
	"context"
	"time"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache {
	mock := &MockCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCache is an autogenerated mock type for the Cache type
type MockCache struct {
	mock.Mock
}

type MockCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCache) EXPECT() *MockCache_Expecter {
	return &MockCache_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockCache
func (_mock *MockCache) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCache_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockCache_Expecter) Delete(ctx interface{}, id interface{}) *MockCache_Delete_Call {
	return &MockCache_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockCache_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockCache_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCache_Delete_Call) Return(err error) *MockCache_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockCache_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByToken provides a mock function for the type MockCache
func (_mock *MockCache) DeleteByToken(ctx context.Context, token string) error {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_DeleteByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByToken'
type MockCache_DeleteByToken_Call struct {
	*mock.Call
}

// DeleteByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockCache_Expecter) DeleteByToken(ctx interface{}, token interface{}) *MockCache_DeleteByToken_Call {
	return &MockCache_DeleteByToken_Call{Call: _e.mock.On("DeleteByToken", ctx, token)}
}

func (_c *MockCache_DeleteByToken_Call) Run(run func(ctx context.Context, token string)) *MockCache_DeleteByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCache_DeleteByToken_Call) Return(err error) *MockCache_DeleteByToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_DeleteByToken_Call) RunAndReturn(run func(ctx context.Context, token string) error) *MockCache_DeleteByToken_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByUser provides a mock function for the type MockCache
func (_mock *MockCache) DeleteByUser(ctx context.Context, userId uuid.UUID) error {
	ret := _mock.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, userId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_DeleteByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByUser'
type MockCache_DeleteByUser_Call struct {
	*mock.Call
}

// DeleteByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uuid.UUID
func (_e *MockCache_Expecter) DeleteByUser(ctx interface{}, userId interface{}) *MockCache_DeleteByUser_Call {
	return &MockCache_DeleteByUser_Call{Call: _e.mock.On("DeleteByUser", ctx, userId)}
}

func (_c *MockCache_DeleteByUser_Call) Run(run func(ctx context.Context, userId uuid.UUID)) *MockCache_DeleteByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCache_DeleteByUser_Call) Return(err error) *MockCache_DeleteByUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_DeleteByUser_Call) RunAndReturn(run func(ctx context.Context, userId uuid.UUID) error) *MockCache_DeleteByUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteExpired provides a mock function for the type MockCache
func (_mock *MockCache) DeleteExpired(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExpired")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_DeleteExpired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExpired'
type MockCache_DeleteExpired_Call struct {
	*mock.Call
}

// DeleteExpired is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCache_Expecter) DeleteExpired(ctx interface{}) *MockCache_DeleteExpired_Call {
	return &MockCache_DeleteExpired_Call{Call: _e.mock.On("DeleteExpired", ctx)}
}

func (_c *MockCache_DeleteExpired_Call) Run(run func(ctx context.Context)) *MockCache_DeleteExpired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCache_DeleteExpired_Call) Return(err error) *MockCache_DeleteExpired_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_DeleteExpired_Call) RunAndReturn(run func(ctx context.Context) error) *MockCache_DeleteExpired_Call {
	_c.Call.Return(run)
	return _c
}

// FlushAll provides a mock function for the type MockCache
func (_mock *MockCache) FlushAll(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FlushAll")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_FlushAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlushAll'
type MockCache_FlushAll_Call struct {
	*mock.Call
}

// FlushAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCache_Expecter) FlushAll(ctx interface{}) *MockCache_FlushAll_Call {
	return &MockCache_FlushAll_Call{Call: _e.mock.On("FlushAll", ctx)}
}

func (_c *MockCache_FlushAll_Call) Run(run func(ctx context.Context)) *MockCache_FlushAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCache_FlushAll_Call) Return(err error) *MockCache_FlushAll_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_FlushAll_Call) RunAndReturn(run func(ctx context.Context) error) *MockCache_FlushAll_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockCache
func (_mock *MockCache) Get(ctx context.Context, id uuid.UUID) (*Session, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Session, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Session); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockCache_Expecter) Get(ctx interface{}, id interface{}) *MockCache_Get_Call {
	return &MockCache_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockCache_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockCache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCache_Get_Call) Return(session *Session, err error) *MockCache_Get_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockCache_Get_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*Session, error)) *MockCache_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByToken provides a mock function for the type MockCache
func (_mock *MockCache) GetByToken(ctx context.Context, token string) (*Session, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetByToken")
	}

	var r0 *Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*Session, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *Session); ok {
		r0 = returnFunc(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCache_GetByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByToken'
type MockCache_GetByToken_Call struct {
	*mock.Call
}

// GetByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockCache_Expecter) GetByToken(ctx interface{}, token interface{}) *MockCache_GetByToken_Call {
	return &MockCache_GetByToken_Call{Call: _e.mock.On("GetByToken", ctx, token)}
}

func (_c *MockCache_GetByToken_Call) Run(run func(ctx context.Context, token string)) *MockCache_GetByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCache_GetByToken_Call) Return(session *Session, err error) *MockCache_GetByToken_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockCache_GetByToken_Call) RunAndReturn(run func(ctx context.Context, token string) (*Session, error)) *MockCache_GetByToken_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type MockCache
func (_mock *MockCache) Set(ctx context.Context, entity *Session, ttl time.Duration) error {
	ret := _mock.Called(ctx, entity, ttl)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Session, time.Duration) error); ok {
		r0 = returnFunc(ctx, entity, ttl)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockCache_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *Session
//   - ttl time.Duration
func (_e *MockCache_Expecter) Set(ctx interface{}, entity interface{}, ttl interface{}) *MockCache_Set_Call {
	return &MockCache_Set_Call{Call: _e.mock.On("Set", ctx, entity, ttl)}
}

func (_c *MockCache_Set_Call) Run(run func(ctx context.Context, entity *Session, ttl time.Duration)) *MockCache_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Session
		if args[1] != nil {
			arg1 = args[1].(*Session)
		}
		var arg2 time.Duration
		if args[2] != nil {
			arg2 = args[2].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCache_Set_Call) Return(err error) *MockCache_Set_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_Set_Call) RunAndReturn(run func(ctx context.Context, entity *Session, ttl time.Duration) error) *MockCache_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventPublisher creates a new instance of MockEventPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventPublisher {
	mock := &MockEventPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEventPublisher is an autogenerated mock type for the EventPublisher type
type MockEventPublisher struct {
	mock.Mock
}

type MockEventPublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventPublisher) EXPECT() *MockEventPublisher_Expecter {
	return &MockEventPublisher_Expecter{mock: &_m.Mock}
}

// PublishSessionCreated provides a mock function for the type MockEventPublisher
func (_mock *MockEventPublisher) PublishSessionCreated(ctx context.Context, entity *Session) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for PublishSessionCreated")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Session) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEventPublisher_PublishSessionCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishSessionCreated'
type MockEventPublisher_PublishSessionCreated_Call struct {
	*mock.Call
}

// PublishSessionCreated is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *Session
func (_e *MockEventPublisher_Expecter) PublishSessionCreated(ctx interface{}, entity interface{}) *MockEventPublisher_PublishSessionCreated_Call {
	return &MockEventPublisher_PublishSessionCreated_Call{Call: _e.mock.On("PublishSessionCreated", ctx, entity)}
}

func (_c *MockEventPublisher_PublishSessionCreated_Call) Run(run func(ctx context.Context, entity *Session)) *MockEventPublisher_PublishSessionCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Session
		if args[1] != nil {
			arg1 = args[1].(*Session)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventPublisher_PublishSessionCreated_Call) Return(err error) *MockEventPublisher_PublishSessionCreated_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEventPublisher_PublishSessionCreated_Call) RunAndReturn(run func(ctx context.Context, entity *Session) error) *MockEventPublisher_PublishSessionCreated_Call {
	_c.Call.Return(run)
	return _c
}

// PublishSessionDeleted provides a mock function for the type MockEventPublisher
func (_mock *MockEventPublisher) PublishSessionDeleted(ctx context.Context, entity *Session) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for PublishSessionDeleted")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Session) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEventPublisher_PublishSessionDeleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishSessionDeleted'
type MockEventPublisher_PublishSessionDeleted_Call struct {
	*mock.Call
}

// PublishSessionDeleted is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *Session
func (_e *MockEventPublisher_Expecter) PublishSessionDeleted(ctx interface{}, entity interface{}) *MockEventPublisher_PublishSessionDeleted_Call {
	return &MockEventPublisher_PublishSessionDeleted_Call{Call: _e.mock.On("PublishSessionDeleted", ctx, entity)}
}

func (_c *MockEventPublisher_PublishSessionDeleted_Call) Run(run func(ctx context.Context, entity *Session)) *MockEventPublisher_PublishSessionDeleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Session
		if args[1] != nil {
			arg1 = args[1].(*Session)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventPublisher_PublishSessionDeleted_Call) Return(err error) *MockEventPublisher_PublishSessionDeleted_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEventPublisher_PublishSessionDeleted_Call) RunAndReturn(run func(ctx context.Context, entity *Session) error) *MockEventPublisher_PublishSessionDeleted_Call {
	_c.Call.Return(run)
	return _c
}

// PublishSessionExpired provides a mock function for the type MockEventPublisher
func (_mock *MockEventPublisher) PublishSessionExpired(ctx context.Context, entity *Session) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for PublishSessionExpired")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Session) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEventPublisher_PublishSessionExpired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishSessionExpired'
type MockEventPublisher_PublishSessionExpired_Call struct {
	*mock.Call
}

// PublishSessionExpired is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *Session
func (_e *MockEventPublisher_Expecter) PublishSessionExpired(ctx interface{}, entity interface{}) *MockEventPublisher_PublishSessionExpired_Call {
	return &MockEventPublisher_PublishSessionExpired_Call{Call: _e.mock.On("PublishSessionExpired", ctx, entity)}
}

func (_c *MockEventPublisher_PublishSessionExpired_Call) Run(run func(ctx context.Context, entity *Session)) *MockEventPublisher_PublishSessionExpired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Session
		if args[1] != nil {
			arg1 = args[1].(*Session)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventPublisher_PublishSessionExpired_Call) Return(err error) *MockEventPublisher_PublishSessionExpired_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEventPublisher_PublishSessionExpired_Call) RunAndReturn(run func(ctx context.Context, entity *Session) error) *MockEventPublisher_PublishSessionExpired_Call {
	_c.Call.Return(run)
	return _c
}

// PublishSessionRefreshed provides a mock function for the type MockEventPublisher
func (_mock *MockEventPublisher) PublishSessionRefreshed(ctx context.Context, entity *Session) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for PublishSessionRefreshed")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Session) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEventPublisher_PublishSessionRefreshed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishSessionRefreshed'
type MockEventPublisher_PublishSessionRefreshed_Call struct {
	*mock.Call
}

// PublishSessionRefreshed is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *Session
func (_e *MockEventPublisher_Expecter) PublishSessionRefreshed(ctx interface{}, entity interface{}) *MockEventPublisher_PublishSessionRefreshed_Call {
	return &MockEventPublisher_PublishSessionRefreshed_Call{Call: _e.mock.On("PublishSessionRefreshed", ctx, entity)}
}

func (_c *MockEventPublisher_PublishSessionRefreshed_Call) Run(run func(ctx context.Context, entity *Session)) *MockEventPublisher_PublishSessionRefreshed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Session
		if args[1] != nil {
			arg1 = args[1].(*Session)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventPublisher_PublishSessionRefreshed_Call) Return(err error) *MockEventPublisher_PublishSessionRefreshed_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEventPublisher_PublishSessionRefreshed_Call) RunAndReturn(run func(ctx context.Context, entity *Session) error) *MockEventPublisher_PublishSessionRefreshed_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockRepository
func (_mock *MockRepository) Create(ctx context.Context, entity *Session) (*Session, error) {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Session) (*Session, error)); ok {
		return returnFunc(ctx, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Session) *Session); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *Session) error); ok {
		r1 = returnFunc(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *Session
func (_e *MockRepository_Expecter) Create(ctx interface{}, entity interface{}) *MockRepository_Create_Call {
	return &MockRepository_Create_Call{Call: _e.mock.On("Create", ctx, entity)}
}

func (_c *MockRepository_Create_Call) Run(run func(ctx context.Context, entity *Session)) *MockRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Session
		if args[1] != nil {
			arg1 = args[1].(*Session)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_Create_Call) Return(session *Session, err error) *MockRepository_Create_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockRepository_Create_Call) RunAndReturn(run func(ctx context.Context, entity *Session) (*Session, error)) *MockRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockRepository
func (_mock *MockRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockRepository_Delete_Call {
	return &MockRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockRepository_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_Delete_Call) Return(err error) *MockRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByToken provides a mock function for the type MockRepository
func (_mock *MockRepository) DeleteByToken(ctx context.Context, token string) error {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_DeleteByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByToken'
type MockRepository_DeleteByToken_Call struct {
	*mock.Call
}

// DeleteByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockRepository_Expecter) DeleteByToken(ctx interface{}, token interface{}) *MockRepository_DeleteByToken_Call {
	return &MockRepository_DeleteByToken_Call{Call: _e.mock.On("DeleteByToken", ctx, token)}
}

func (_c *MockRepository_DeleteByToken_Call) Run(run func(ctx context.Context, token string)) *MockRepository_DeleteByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_DeleteByToken_Call) Return(err error) *MockRepository_DeleteByToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_DeleteByToken_Call) RunAndReturn(run func(ctx context.Context, token string) error) *MockRepository_DeleteByToken_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByUser provides a mock function for the type MockRepository
func (_mock *MockRepository) DeleteByUser(ctx context.Context, userId uuid.UUID) error {
	ret := _mock.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, userId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_DeleteByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByUser'
type MockRepository_DeleteByUser_Call struct {
	*mock.Call
}

// DeleteByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uuid.UUID
func (_e *MockRepository_Expecter) DeleteByUser(ctx interface{}, userId interface{}) *MockRepository_DeleteByUser_Call {
	return &MockRepository_DeleteByUser_Call{Call: _e.mock.On("DeleteByUser", ctx, userId)}
}

func (_c *MockRepository_DeleteByUser_Call) Run(run func(ctx context.Context, userId uuid.UUID)) *MockRepository_DeleteByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_DeleteByUser_Call) Return(err error) *MockRepository_DeleteByUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_DeleteByUser_Call) RunAndReturn(run func(ctx context.Context, userId uuid.UUID) error) *MockRepository_DeleteByUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteExpired provides a mock function for the type MockRepository
func (_mock *MockRepository) DeleteExpired(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExpired")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_DeleteExpired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExpired'
type MockRepository_DeleteExpired_Call struct {
	*mock.Call
}

// DeleteExpired is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepository_Expecter) DeleteExpired(ctx interface{}) *MockRepository_DeleteExpired_Call {
	return &MockRepository_DeleteExpired_Call{Call: _e.mock.On("DeleteExpired", ctx)}
}

func (_c *MockRepository_DeleteExpired_Call) Run(run func(ctx context.Context)) *MockRepository_DeleteExpired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockRepository_DeleteExpired_Call) Return(err error) *MockRepository_DeleteExpired_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_DeleteExpired_Call) RunAndReturn(run func(ctx context.Context) error) *MockRepository_DeleteExpired_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockRepository
func (_mock *MockRepository) Get(ctx context.Context, id uuid.UUID) (*Session, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Session, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Session); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepository_Expecter) Get(ctx interface{}, id interface{}) *MockRepository_Get_Call {
	return &MockRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockRepository_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_Get_Call) Return(session *Session, err error) *MockRepository_Get_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockRepository_Get_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*Session, error)) *MockRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByToken provides a mock function for the type MockRepository
func (_mock *MockRepository) GetByToken(ctx context.Context, token string) (*Session, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetByToken")
	}

	var r0 *Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*Session, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *Session); ok {
		r0 = returnFunc(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByToken'
type MockRepository_GetByToken_Call struct {
	*mock.Call
}

// GetByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockRepository_Expecter) GetByToken(ctx interface{}, token interface{}) *MockRepository_GetByToken_Call {
	return &MockRepository_GetByToken_Call{Call: _e.mock.On("GetByToken", ctx, token)}
}

func (_c *MockRepository_GetByToken_Call) Run(run func(ctx context.Context, token string)) *MockRepository_GetByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetByToken_Call) Return(session *Session, err error) *MockRepository_GetByToken_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockRepository_GetByToken_Call) RunAndReturn(run func(ctx context.Context, token string) (*Session, error)) *MockRepository_GetByToken_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockRepository
func (_mock *MockRepository) List(ctx context.Context, params ListSessionsParams) ([]*Session, int64, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*Session
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ListSessionsParams) ([]*Session, int64, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ListSessionsParams) []*Session); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ListSessionsParams) int64); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, ListSessionsParams) error); ok {
		r2 = returnFunc(ctx, params)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - params ListSessionsParams
func (_e *MockRepository_Expecter) List(ctx interface{}, params interface{}) *MockRepository_List_Call {
	return &MockRepository_List_Call{Call: _e.mock.On("List", ctx, params)}
}

func (_c *MockRepository_List_Call) Run(run func(ctx context.Context, params ListSessionsParams)) *MockRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ListSessionsParams
		if args[1] != nil {
			arg1 = args[1].(ListSessionsParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_List_Call) Return(sessions []*Session, n int64, err error) *MockRepository_List_Call {
	_c.Call.Return(sessions, n, err)
	return _c
}

func (_c *MockRepository_List_Call) RunAndReturn(run func(ctx context.Context, params ListSessionsParams) ([]*Session, int64, error)) *MockRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockRepository
func (_mock *MockRepository) Update(ctx context.Context, id uuid.UUID, entity *Session) (*Session, error) {
	ret := _mock.Called(ctx, id, entity)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *Session) (*Session, error)); ok {
		return returnFunc(ctx, id, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *Session) *Session); ok {
		r0 = returnFunc(ctx, id, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *Session) error); ok {
		r1 = returnFunc(ctx, id, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - entity *Session
func (_e *MockRepository_Expecter) Update(ctx interface{}, id interface{}, entity interface{}) *MockRepository_Update_Call {
	return &MockRepository_Update_Call{Call: _e.mock.On("Update", ctx, id, entity)}
}

func (_c *MockRepository_Update_Call) Run(run func(ctx context.Context, id uuid.UUID, entity *Session)) *MockRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *Session
		if args[2] != nil {
			arg2 = args[2].(*Session)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepository_Update_Call) Return(session *Session, err error) *MockRepository_Update_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockRepository_Update_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, entity *Session) (*Session, error)) *MockRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
