// Code generated by codegen events. DO NOT EDIT.
package sessions

import (
	"context"
	"github.com/archesai/archesai/internal/events"
)

// Event type constants for sessions domain.
const (
	EventSessionCreated   = "session.created"
	EventSessionRefreshed = "session.refreshed"
	EventSessionExpired   = "session.expired"
	EventSessionDeleted   = "session.deleted"
)

// SessionCreatedEvent represents a created event for Session.
type SessionCreatedEvent struct {
	events.BaseEvent
	Session *Session `json:"session"`
}

// NewSessionCreatedEvent creates a new Session created event.
func NewSessionCreatedEvent(entity *Session) *SessionCreatedEvent {
	return &SessionCreatedEvent{
		BaseEvent: events.NewBaseEvent("sessions", EventSessionCreated),
		Session:   entity,
	}
}

// EventType returns the event type string.
func (e *SessionCreatedEvent) EventType() string {
	return EventSessionCreated
}

// EventDomain returns the domain this event belongs to.
func (e *SessionCreatedEvent) EventDomain() string {
	return "sessions"
}

// EventData returns the actual event data.
func (e *SessionCreatedEvent) EventData() interface{} {
	return e.Session
}

// SessionRefreshedEvent represents a refreshed event for Session.
type SessionRefreshedEvent struct {
	events.BaseEvent
	Session *Session `json:"session"`
}

// NewSessionRefreshedEvent creates a new Session refreshed event.
func NewSessionRefreshedEvent(entity *Session) *SessionRefreshedEvent {
	return &SessionRefreshedEvent{
		BaseEvent: events.NewBaseEvent("sessions", EventSessionRefreshed),
		Session:   entity,
	}
}

// EventType returns the event type string.
func (e *SessionRefreshedEvent) EventType() string {
	return EventSessionRefreshed
}

// EventDomain returns the domain this event belongs to.
func (e *SessionRefreshedEvent) EventDomain() string {
	return "sessions"
}

// EventData returns the actual event data.
func (e *SessionRefreshedEvent) EventData() interface{} {
	return e.Session
}

// SessionExpiredEvent represents a expired event for Session.
type SessionExpiredEvent struct {
	events.BaseEvent
	Session *Session `json:"session"`
}

// NewSessionExpiredEvent creates a new Session expired event.
func NewSessionExpiredEvent(entity *Session) *SessionExpiredEvent {
	return &SessionExpiredEvent{
		BaseEvent: events.NewBaseEvent("sessions", EventSessionExpired),
		Session:   entity,
	}
}

// EventType returns the event type string.
func (e *SessionExpiredEvent) EventType() string {
	return EventSessionExpired
}

// EventDomain returns the domain this event belongs to.
func (e *SessionExpiredEvent) EventDomain() string {
	return "sessions"
}

// EventData returns the actual event data.
func (e *SessionExpiredEvent) EventData() interface{} {
	return e.Session
}

// SessionDeletedEvent represents a deleted event for Session.
type SessionDeletedEvent struct {
	events.BaseEvent
	Session *Session `json:"session"`
}

// NewSessionDeletedEvent creates a new Session deleted event.
func NewSessionDeletedEvent(entity *Session) *SessionDeletedEvent {
	return &SessionDeletedEvent{
		BaseEvent: events.NewBaseEvent("sessions", EventSessionDeleted),
		Session:   entity,
	}
}

// EventType returns the event type string.
func (e *SessionDeletedEvent) EventType() string {
	return EventSessionDeleted
}

// EventDomain returns the domain this event belongs to.
func (e *SessionDeletedEvent) EventDomain() string {
	return "sessions"
}

// EventData returns the actual event data.
func (e *SessionDeletedEvent) EventData() interface{} {
	return e.Session
}

// EventPublisher publishes domain events for sessions.
type EventPublisher interface {
	PublishSessionCreated(ctx context.Context, entity *Session) error
	PublishSessionRefreshed(ctx context.Context, entity *Session) error
	PublishSessionExpired(ctx context.Context, entity *Session) error
	PublishSessionDeleted(ctx context.Context, entity *Session) error
}

// eventPublisher implements EventPublisher for sessions domain.
type eventPublisher struct {
	publisher events.Publisher
}

// NewEventPublisher creates a new event publisher for sessions domain.
func NewEventPublisher(publisher events.Publisher) EventPublisher {
	return &eventPublisher{
		publisher: publisher,
	}
}

// PublishSessionCreated publishes a created event for Session.
func (p *eventPublisher) PublishSessionCreated(ctx context.Context, entity *Session) error {
	event := NewSessionCreatedEvent(entity)
	return events.PublishDomainEvent(ctx, p.publisher, event)
}

// PublishSessionRefreshed publishes a refreshed event for Session.
func (p *eventPublisher) PublishSessionRefreshed(ctx context.Context, entity *Session) error {
	event := NewSessionRefreshedEvent(entity)
	return events.PublishDomainEvent(ctx, p.publisher, event)
}

// PublishSessionExpired publishes a expired event for Session.
func (p *eventPublisher) PublishSessionExpired(ctx context.Context, entity *Session) error {
	event := NewSessionExpiredEvent(entity)
	return events.PublishDomainEvent(ctx, p.publisher, event)
}

// PublishSessionDeleted publishes a deleted event for Session.
func (p *eventPublisher) PublishSessionDeleted(ctx context.Context, entity *Session) error {
	event := NewSessionDeletedEvent(entity)
	return events.PublishDomainEvent(ctx, p.publisher, event)
}

// NewNoOpEventPublisher creates a new no-op event publisher for testing.
func NewNoOpEventPublisher() EventPublisher {
	return NewEventPublisher(events.NewNoOpPublisher())
}
