// Package oauth provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package oauth

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Start OAuth authorization flow
	// (GET /auth/oauth/{provider}/authorize)
	OauthAuthorize(ctx echo.Context, provider OauthAuthorizeParamsProvider, params OauthAuthorizeParams) error
	// Handle OAuth callback
	// (GET /auth/oauth/{provider}/callback)
	OauthCallback(ctx echo.Context, provider OauthCallbackParamsProvider, params OauthCallbackParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// OauthAuthorize converts echo context to params.
func (w *ServerInterfaceWrapper) OauthAuthorize(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "provider" -------------
	var provider OauthAuthorizeParamsProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", ctx.Param("provider"), &provider, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter provider: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(SessionCookieScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params OauthAuthorizeParams
	// ------------- Optional query parameter "redirect_uri" -------------

	err = runtime.BindQueryParameter("form", true, false, "redirect_uri", ctx.QueryParams(), &params.RedirectUri)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter redirect_uri: %s", err))
	}

	// ------------- Optional query parameter "scope" -------------

	err = runtime.BindQueryParameter("form", true, false, "scope", ctx.QueryParams(), &params.Scope)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scope: %s", err))
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OauthAuthorize(ctx, provider, params)
	return err
}

// OauthCallback converts echo context to params.
func (w *ServerInterfaceWrapper) OauthCallback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "provider" -------------
	var provider OauthCallbackParamsProvider

	err = runtime.BindStyledParameterWithOptions("simple", "provider", ctx.Param("provider"), &provider, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter provider: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(SessionCookieScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params OauthCallbackParams
	// ------------- Optional query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, false, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// ------------- Optional query parameter "error" -------------

	err = runtime.BindQueryParameter("form", true, false, "error", ctx.QueryParams(), &params.Error)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter error: %s", err))
	}

	// ------------- Optional query parameter "error_description" -------------

	err = runtime.BindQueryParameter("form", true, false, "error_description", ctx.QueryParams(), &params.ErrorDescription)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter error_description: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OauthCallback(ctx, provider, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/auth/oauth/:provider/authorize", wrapper.OauthAuthorize)
	router.GET(baseURL+"/auth/oauth/:provider/callback", wrapper.OauthCallback)

}

type BadRequestApplicationProblemPlusJSONResponse Problem

type UnauthorizedApplicationProblemPlusJSONResponse Problem

type OauthAuthorizeRequestObject struct {
	Provider OauthAuthorizeParamsProvider `json:"provider"`
	Params   OauthAuthorizeParams
}

type OauthAuthorizeResponseObject interface {
	VisitOauthAuthorizeResponse(w http.ResponseWriter) error
}

type OauthAuthorize200JSONResponse struct {
	// AuthorizationUrl URL to redirect user for OAuth authorization
	AuthorizationUrl string `json:"authorization_url"`
}

func (response OauthAuthorize200JSONResponse) VisitOauthAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OauthAuthorize302ResponseHeaders struct {
	Location string
}

type OauthAuthorize302Response struct {
	Headers OauthAuthorize302ResponseHeaders
}

func (response OauthAuthorize302Response) VisitOauthAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type OauthAuthorize400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response OauthAuthorize400ApplicationProblemPlusJSONResponse) VisitOauthAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type OauthAuthorize404ApplicationProblemPlusJSONResponse Problem

func (response OauthAuthorize404ApplicationProblemPlusJSONResponse) VisitOauthAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type OauthCallbackRequestObject struct {
	Provider OauthCallbackParamsProvider `json:"provider"`
	Params   OauthCallbackParams
}

type OauthCallbackResponseObject interface {
	VisitOauthCallbackResponse(w http.ResponseWriter) error
}

type OauthCallback200JSONResponse TokenResponse

func (response OauthCallback200JSONResponse) VisitOauthCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OauthCallback302ResponseHeaders struct {
	Location string
}

type OauthCallback302Response struct {
	Headers OauthCallback302ResponseHeaders
}

func (response OauthCallback302Response) VisitOauthCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(302)
	return nil
}

type OauthCallback400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response OauthCallback400ApplicationProblemPlusJSONResponse) VisitOauthCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type OauthCallback401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response OauthCallback401ApplicationProblemPlusJSONResponse) VisitOauthCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type OauthCallback404ApplicationProblemPlusJSONResponse Problem

func (response OauthCallback404ApplicationProblemPlusJSONResponse) VisitOauthCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Start OAuth authorization flow
	// (GET /auth/oauth/{provider}/authorize)
	OauthAuthorize(ctx context.Context, request OauthAuthorizeRequestObject) (OauthAuthorizeResponseObject, error)
	// Handle OAuth callback
	// (GET /auth/oauth/{provider}/callback)
	OauthCallback(ctx context.Context, request OauthCallbackRequestObject) (OauthCallbackResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// OauthAuthorize operation middleware
func (sh *strictHandler) OauthAuthorize(ctx echo.Context, provider OauthAuthorizeParamsProvider, params OauthAuthorizeParams) error {
	var request OauthAuthorizeRequestObject

	request.Provider = provider
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OauthAuthorize(ctx.Request().Context(), request.(OauthAuthorizeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OauthAuthorize")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(OauthAuthorizeResponseObject); ok {
		return validResponse.VisitOauthAuthorizeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// OauthCallback operation middleware
func (sh *strictHandler) OauthCallback(ctx echo.Context, provider OauthCallbackParamsProvider, params OauthCallbackParams) error {
	var request OauthCallbackRequestObject

	request.Provider = provider
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.OauthCallback(ctx.Request().Context(), request.(OauthCallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "OauthCallback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(OauthCallbackResponseObject); ok {
		return validResponse.VisitOauthCallbackResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
