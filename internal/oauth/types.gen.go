// Package oauth provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package oauth

import (
	"encoding/json"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes    = "bearerAuth.Scopes"
	SessionCookieScopes = "sessionCookie.Scopes"
)

// Defines values for OauthAuthorizeParamsProvider.
const (
	OauthAuthorizeParamsProviderGithub    OauthAuthorizeParamsProvider = "github"
	OauthAuthorizeParamsProviderGoogle    OauthAuthorizeParamsProvider = "google"
	OauthAuthorizeParamsProviderMicrosoft OauthAuthorizeParamsProvider = "microsoft"
)

// Defines values for OauthCallbackParamsProvider.
const (
	OauthCallbackParamsProviderGithub    OauthCallbackParamsProvider = "github"
	OauthCallbackParamsProviderGoogle    OauthCallbackParamsProvider = "google"
	OauthCallbackParamsProviderMicrosoft OauthCallbackParamsProvider = "microsoft"
)

// Problem RFC 7807 (Problem Details) compliant error response
type Problem struct {
	// Detail Human-readable explanation specific to this occurrence
	Detail string `json:"detail" yaml:"detail"`

	// Errors Additional validation errors for specific fields
	Errors []ValidationError `json:"errors,omitempty,omitzero" yaml:"errors,omitempty"`

	// Instance URI identifying the specific occurrence
	Instance string `json:"instance,omitempty,omitzero" yaml:"instance,omitempty"`

	// Status HTTP status code
	Status int `json:"status" yaml:"status"`

	// Title Short, human-readable summary
	Title string `json:"title" yaml:"title"`

	// Type URI identifying the problem type
	Type string `json:"type" yaml:"type"`
}

// TokenResponse defines model for TokenResponse.
type TokenResponse struct {
	// AccessToken JWT access token for API authentication
	AccessToken string `json:"access_token" yaml:"access_token"`

	// ExpiresIn Access token expiration time in seconds
	ExpiresIn int64 `json:"expires_in" yaml:"expires_in"`

	// RefreshToken Refresh token for obtaining new access tokens
	RefreshToken string `json:"refresh_token" yaml:"refresh_token"`

	// TokenType Type of token (always "Bearer")
	TokenType string `json:"token_type" yaml:"token_type"`
}

// ValidationError Individual field validation error
type ValidationError struct {
	// Field The field path that failed validation
	Field string `json:"field" yaml:"field"`

	// Message Human-readable error message
	Message string `json:"message" yaml:"message"`

	// Value The invalid value that was provided
	Value ValidationError_Value `json:"value,omitempty,omitzero" yaml:"value,omitempty"`
}

// ValidationErrorValue0 defines model for .
type ValidationErrorValue0 = string

// ValidationErrorValue1 defines model for .
type ValidationErrorValue1 = float32

// ValidationErrorValue2 defines model for .
type ValidationErrorValue2 = bool

// ValidationError_Value The invalid value that was provided
type ValidationError_Value struct {
	union json.RawMessage
}

// BadRequest RFC 7807 (Problem Details) compliant error response
type BadRequest = Problem

// Unauthorized RFC 7807 (Problem Details) compliant error response
type Unauthorized = Problem

// OauthAuthorizeParams defines parameters for OauthAuthorize.
type OauthAuthorizeParams struct {
	// RedirectUri Where to redirect after authorization (optional, uses default if not provided)
	RedirectUri string `form:"redirect_uri,omitempty" json:"redirect_uri,omitempty,omitzero" yaml:"redirect_uri,omitempty"`

	// Scope OAuth scopes to request (optional, uses default if not provided)
	Scope string `form:"scope,omitempty" json:"scope,omitempty,omitzero" yaml:"scope,omitempty"`

	// State State parameter for CSRF protection
	State string `form:"state,omitempty" json:"state,omitempty,omitzero" yaml:"state,omitempty"`
}

// OauthAuthorizeParamsProvider defines parameters for OauthAuthorize.
type OauthAuthorizeParamsProvider string

// OauthCallbackParams defines parameters for OauthCallback.
type OauthCallbackParams struct {
	// Code Authorization code from OAuth provider
	Code string `form:"code,omitempty" json:"code,omitempty,omitzero" yaml:"code,omitempty"`

	// State State parameter for CSRF protection
	State string `form:"state,omitempty" json:"state,omitempty,omitzero" yaml:"state,omitempty"`

	// Error Error code if authorization failed
	Error string `form:"error,omitempty" json:"error,omitempty,omitzero" yaml:"error,omitempty"`

	// ErrorDescription Human-readable error description
	ErrorDescription string `form:"error_description,omitempty" json:"error_description,omitempty,omitzero" yaml:"error_description,omitempty"`
}

// OauthCallbackParamsProvider defines parameters for OauthCallback.
type OauthCallbackParamsProvider string

// AsValidationErrorValue0 returns the union data inside the ValidationError_Value as a ValidationErrorValue0
func (t ValidationError_Value) AsValidationErrorValue0() (ValidationErrorValue0, error) {
	var body ValidationErrorValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorValue0 overwrites any union data inside the ValidationError_Value as the provided ValidationErrorValue0
func (t *ValidationError_Value) FromValidationErrorValue0(v ValidationErrorValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorValue0 performs a merge with any union data inside the ValidationError_Value, using the provided ValidationErrorValue0
func (t *ValidationError_Value) MergeValidationErrorValue0(v ValidationErrorValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorValue1 returns the union data inside the ValidationError_Value as a ValidationErrorValue1
func (t ValidationError_Value) AsValidationErrorValue1() (ValidationErrorValue1, error) {
	var body ValidationErrorValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorValue1 overwrites any union data inside the ValidationError_Value as the provided ValidationErrorValue1
func (t *ValidationError_Value) FromValidationErrorValue1(v ValidationErrorValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorValue1 performs a merge with any union data inside the ValidationError_Value, using the provided ValidationErrorValue1
func (t *ValidationError_Value) MergeValidationErrorValue1(v ValidationErrorValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorValue2 returns the union data inside the ValidationError_Value as a ValidationErrorValue2
func (t ValidationError_Value) AsValidationErrorValue2() (ValidationErrorValue2, error) {
	var body ValidationErrorValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorValue2 overwrites any union data inside the ValidationError_Value as the provided ValidationErrorValue2
func (t *ValidationError_Value) FromValidationErrorValue2(v ValidationErrorValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorValue2 performs a merge with any union data inside the ValidationError_Value, using the provided ValidationErrorValue2
func (t *ValidationError_Value) MergeValidationErrorValue2(v ValidationErrorValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ValidationError_Value) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Value) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
