// Package auth provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package auth

import (
	"time"

	"github.com/google/uuid"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// APIKey defines model for ApiKey.
type APIKey struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// ExpiresAt When this API key expires
	ExpiresAt time.Time `json:"expiresAt" yaml:"expiresAt"`

	// ID Universally Unique IDentifier
	ID UUID `json:"id" yaml:"id"`

	// KeyHash Hashed version of the API key for secure storage
	KeyHash string `json:"keyHash,omitempty,omitzero" yaml:"keyHash,omitempty"`

	// LastUsedAt When this API key was last used
	LastUsedAt     time.Time `json:"lastUsedAt,omitempty,omitzero" yaml:"lastUsedAt,omitempty"`
	Name           string    `json:"name" yaml:"name"`
	OrganizationID UUID      `json:"organizationID,omitempty,omitzero" yaml:"organizationID,omitempty"`
	Prefix         string    `json:"prefix" yaml:"prefix"`

	// RateLimit Requests per minute allowed for this API key
	RateLimit int      `json:"rateLimit" yaml:"rateLimit"`
	Scopes    []string `json:"scopes" yaml:"scopes"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
	UserID    UUID      `json:"userID,omitempty,omitzero" yaml:"userID,omitempty"`
}

// APIKeyResponse defines model for ApiKeyResponse.
type APIKeyResponse struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// ExpiresAt When this API key expires
	ExpiresAt time.Time `json:"expiresAt" yaml:"expiresAt"`

	// ID Universally Unique IDentifier
	ID UUID `json:"id" yaml:"id"`

	// Key The actual API key (only returned once on creation)
	Key    string `json:"key" yaml:"key"`
	Name   string `json:"name" yaml:"name"`
	Prefix string `json:"prefix" yaml:"prefix"`

	// RateLimit Requests per minute allowed for this API key
	RateLimit int      `json:"rateLimit" yaml:"rateLimit"`
	Scopes    []string `json:"scopes" yaml:"scopes"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// Base defines model for Base.
type Base struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// ID Universally Unique IDentifier
	ID UUID `json:"id" yaml:"id"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// Problem RFC 7807 (Problem Details) compliant error response
type Problem struct {
	// Detail Human-readable explanation specific to this occurrence
	Detail string `json:"detail,omitempty,omitzero" yaml:"detail,omitempty"`

	// Instance URI identifying the specific occurrence
	Instance string `json:"instance,omitempty,omitzero" yaml:"instance,omitempty"`

	// Status HTTP status code
	Status int `json:"status" yaml:"status"`

	// Title Short, human-readable summary
	Title string `json:"title" yaml:"title"`

	// Type URI identifying the problem type
	Type string `json:"type,omitempty,omitzero" yaml:"type,omitempty"`
}

// UUID Universally Unique IDentifier
type UUID = uuid.UUID

// BadRequest RFC 7807 (Problem Details) compliant error response
type BadRequest = Problem

// NotFound RFC 7807 (Problem Details) compliant error response
type NotFound = Problem

// Unauthorized RFC 7807 (Problem Details) compliant error response
type Unauthorized = Problem

// ListTokensParams defines parameters for ListTokens.
type ListTokensParams struct {
	// Limit Maximum number of items to return
	Limit int `form:"limit,omitempty" json:"limit,omitempty,omitzero" yaml:"limit,omitempty"`

	// Offset Number of items to skip
	Offset int `form:"offset,omitempty" json:"offset,omitempty,omitzero" yaml:"offset,omitempty"`
}

// CreateTokenJSONBody defines parameters for CreateToken.
type CreateTokenJSONBody struct {
	// ExpiresAt When the API key expires (optional, no expiry if omitted)
	ExpiresAt time.Time `json:"expiresAt,omitempty,omitzero" yaml:"expiresAt,omitempty"`

	// Name Human-readable name for the API key
	Name string `json:"name" yaml:"name"`

	// RateLimit Requests per minute limit (default 60)
	RateLimit int `json:"rateLimit,omitempty,omitzero" yaml:"rateLimit,omitempty"`

	// Scopes List of scopes/permissions for this API key
	Scopes []string `json:"scopes" yaml:"scopes"`
}

// ApikeysUpdateJSONBody defines parameters for ApikeysUpdate.
type ApikeysUpdateJSONBody struct {
	// Name Human-readable name for the API key
	Name string `json:"name,omitempty,omitzero" yaml:"name,omitempty"`

	// RateLimit Requests per minute allowed for this API key
	RateLimit int `json:"rateLimit,omitempty,omitzero" yaml:"rateLimit,omitempty"`

	// Scopes Array of permission scopes
	Scopes []string `json:"scopes,omitempty,omitzero" yaml:"scopes,omitempty"`
}

// CreateTokenJSONRequestBody defines body for CreateToken for application/json ContentType.
type CreateTokenJSONRequestBody CreateTokenJSONBody

// ApikeysUpdateJSONRequestBody defines body for ApikeysUpdate for application/json ContentType.
type ApikeysUpdateJSONRequestBody ApikeysUpdateJSONBody
