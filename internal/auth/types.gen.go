// Code generated by archesai codegen. DO NOT EDIT.
package auth

import (
	"time"

	"github.com/google/uuid"
)

// Defines values for ListSessionsParamsSortField.
const (
	SessionsAuthMethod     ListSessionsParamsSortField = "authMethod"
	SessionsAuthProvider   ListSessionsParamsSortField = "authProvider"
	SessionsCreatedAt      ListSessionsParamsSortField = "createdAt"
	SessionsExpiresAt      ListSessionsParamsSortField = "expiresAt"
	SessionsID             ListSessionsParamsSortField = "id"
	SessionsIpAddress      ListSessionsParamsSortField = "ipAddress"
	SessionsOrganizationID ListSessionsParamsSortField = "organizationID"
	SessionsToken          ListSessionsParamsSortField = "token"
	SessionsUpdatedAt      ListSessionsParamsSortField = "updatedAt"
	SessionsUserAgent      ListSessionsParamsSortField = "userAgent"
	SessionsUserID         ListSessionsParamsSortField = "userID"
)

// Defines values for ListSessionsParamsSortOrder.
const (
	SessionsAsc  ListSessionsParamsSortOrder = "asc"
	SessionsDesc ListSessionsParamsSortOrder = "desc"
)

// ListSessionsParamsSortField represents the type for ListSessionsParamsSortField enum values.
type ListSessionsParamsSortField string

// ListSessionsParamsSortOrder represents the type for ListSessionsParamsSortOrder enum values.
type ListSessionsParamsSortOrder string

// CreateSessionResponse
type CreateSessionResponse = Session

// UpdateSessionResponse
type UpdateSessionResponse = Session

// GetSessionResponse
type GetSessionResponse = Session

// APIKey Schema for API Key entity
type APIKey struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`
	// ExpiresAt When this API key expires
	ExpiresAt time.Time `json:"expiresAt" yaml:"expiresAt"`
	// ID Unique identifier for the resource
	ID uuid.UUID `json:"id" yaml:"id"`
	// KeyHash Hashed version of the API key for secure storage
	KeyHash *string `json:"keyHash,omitempty" yaml:"keyHash,omitempty"`
	// LastUsedAt When this API key was last used
	LastUsedAt *time.Time `json:"lastUsedAt,omitempty" yaml:"lastUsedAt,omitempty"`
	Name       string     `json:"name" yaml:"name"`
	// OrganizationID The organization this API key belongs to
	OrganizationID *uuid.UUID `json:"organizationID,omitempty" yaml:"organizationID,omitempty"`
	Prefix         string     `json:"prefix" yaml:"prefix"`
	// RateLimit Requests per minute allowed for this API key
	RateLimit int      `json:"rateLimit" yaml:"rateLimit"`
	Scopes    []string `json:"scopes" yaml:"scopes"`
	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
	// UserID The user who owns this API key
	UserID *uuid.UUID `json:"userID,omitempty" yaml:"userID,omitempty"`
}

// Session Schema for Session entity
type Session struct {
	// AuthMethod The authentication method used (magic_link, oauth_google, oauth_github, etc.)
	AuthMethod *string `json:"authMethod,omitempty" yaml:"authMethod,omitempty"`
	// AuthProvider The authentication provider (google, github, microsoft, local)
	AuthProvider *string `json:"authProvider,omitempty" yaml:"authProvider,omitempty"`
	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`
	// ExpiresAt The expiration date of the session
	ExpiresAt time.Time `json:"expiresAt" yaml:"expiresAt"`
	// ID Unique identifier for the resource
	ID uuid.UUID `json:"id" yaml:"id"`
	// IpAddress The IP address of the session
	IpAddress string `json:"ipAddress" yaml:"ipAddress"`
	// OrganizationID The organization ID for this session (nullable for users without org)
	OrganizationID *uuid.UUID `json:"organizationID,omitempty" yaml:"organizationID,omitempty"`
	// Token The session token
	Token string `json:"token" yaml:"token"`
	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
	// UserAgent The user agent of the session
	UserAgent string `json:"userAgent" yaml:"userAgent"`
	// UserID The user who owns this session
	UserID uuid.UUID `json:"userID" yaml:"userID"`
}

// ConfirmEmailVerificationRequestBody Request body for confirmEmailVerification
type ConfirmEmailVerificationRequestBody struct {
}

// RequestPasswordResetRequestBody Request body for requestPasswordReset
type RequestPasswordResetRequestBody struct {
}

// ConfirmPasswordResetRequestBody Request body for confirmPasswordReset
type ConfirmPasswordResetRequestBody struct {
}

// RequestEmailChangeRequestBody Request body for requestEmailChange
type RequestEmailChangeRequestBody struct {
}

// ConfirmEmailChangeRequestBody Request body for confirmEmailChange
type ConfirmEmailChangeRequestBody struct {
}

// CreateSessionRequestBody Request body for createSession
type CreateSessionRequestBody struct {
	// Description The auth description
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name The auth name
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`
}

// UpdateSessionRequestBody Request body for updateSession
type UpdateSessionRequestBody struct {
	// Description The auth description
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name The auth name
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`
}

// RequestMagicLinkRequestBody Request body for requestMagicLink
type RequestMagicLinkRequestBody struct {
}

// VerifyMagicLinkRequestBody Request body for verifyMagicLink
type VerifyMagicLinkRequestBody struct {
}

// CreateAPIKeyRequestBody Request body for createAPIKey
type CreateAPIKeyRequestBody struct {
	// Description The auth description
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name The auth name
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`
}

// UpdateAPIKeyRequestBody Request body for updateAPIKey
type UpdateAPIKeyRequestBody struct {
	// Description The auth description
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name The auth name
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`
}

// OauthAuthorizeParams Parameters for oauthAuthorize operation
type OauthAuthorizeParams struct {
	// RedirectUri Where to redirect after authorization (optional, uses default if not provided)
	RedirectUri *string `json:"redirect_uri,omitempty" yaml:"redirect_uri,omitempty"`
	// Scope OAuth scopes to request (optional, uses default if not provided)
	Scope *string `json:"scope,omitempty" yaml:"scope,omitempty"`
	// State State parameter for CSRF protection
	State *string `json:"state,omitempty" yaml:"state,omitempty"`
}

// OauthCallbackParams Parameters for oauthCallback operation
type OauthCallbackParams struct {
	// Code Authorization code from OAuth provider
	Code *string `json:"code,omitempty" yaml:"code,omitempty"`
	// State State parameter for CSRF protection
	State *string `json:"state,omitempty" yaml:"state,omitempty"`
	// Error Error code if authorization failed
	Error *string `json:"error,omitempty" yaml:"error,omitempty"`
	// ErrorDescription Human-readable error description
	ErrorDescription *string `json:"error_description,omitempty" yaml:"error_description,omitempty"`
}

// ListAPIKeysParams Parameters for listAPIKeys operation
type ListAPIKeysParams struct {
	// Filter Filter API keys by field values. Supported fields: - createdAt, id, updatedAt, userID, organizationID - keyHash, name, prefix, rateLimit, lastUsedAt, expiresAt
	Filter *interface{} `json:"filter,omitempty" yaml:"filter,omitempty"`
	// Page The page parameter
	Page *interface{} `json:"page,omitempty" yaml:"page,omitempty"`
	// Sort The sort parameter
	Sort *interface{} `json:"sort,omitempty" yaml:"sort,omitempty"`
}

// ListSessionsParams Parameters for listing sessions
type ListSessionsParams struct {
	// Filter Filter parameters
	Filter *ListSessionsParamsFilter `json:"filter,omitempty" yaml:"filter,omitempty"`
	// Page Pagination parameters
	Page *ListSessionsParamsPage `json:"page,omitempty" yaml:"page,omitempty"`
	// Sort Sort parameters
	Sort *ListSessionsParamsSort `json:"sort,omitempty" yaml:"sort,omitempty"`
}

// ListSessionsParamsFilter Filter sessions by field values
type ListSessionsParamsFilter struct {
	// Filter A recursive filter node that can be a condition or group
	Filter interface{} `json:"filter" yaml:"filter"`
}

// ListSessionsParamsPage Pagination parameters for listing sessions
type ListSessionsParamsPage struct {
	// Number Page number (1-indexed)
	Number int `json:"number" yaml:"number"`
	// Size Page size (items per page)
	Size int `json:"size" yaml:"size"`
}

// ListSessionsParamsSort Sort sessions by field and order
type ListSessionsParamsSort struct {
	// Field Field to sort by
	Field ListSessionsParamsSortField `json:"field" yaml:"field"`
	// Order Sort order (asc or desc)
	Order ListSessionsParamsSortOrder `json:"order" yaml:"order"`
}

// ListMetadata Metadata for list responses
type ListMetadata struct {
	// Total Total number of items
	Total int64 `json:"total" yaml:"total"`
}

// DeleteSessionResponse Response for deleting a session
type DeleteSessionResponse struct {
}

// ListSessionsResponse Response for listing sessions
type ListSessionsResponse struct {
	// Data List of sessions
	Data []*Session `json:"data" yaml:"data"`
	// Meta Metadata about the list response
	Meta ListMetadata `json:"meta" yaml:"meta"`
}
