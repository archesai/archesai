// Code generated by codegen events. DO NOT EDIT.
package auth

import (
	"context"
	"github.com/google/uuid"
	"time"
)

// EventType represents the type of event.
type EventType string

// Event types for auth domain.
const (
	EventUserCreated            EventType = "user-created"
	EventUserUpdated            EventType = "user-updated"
	EventUserDeleted            EventType = "user-deleted"
	EventUserEmailVerified      EventType = "user-email-verified"
	EventUserPasswordChanged    EventType = "user-password-changed"
	EventSessionCreated         EventType = "session-created"
	EventSessionDeleted         EventType = "session-deleted"
	EventSessionExpired         EventType = "session-expired"
	EventAccountLinked          EventType = "account-linked"
	EventAccountUnlinked        EventType = "account-unlinked"
	EventAccountTokensRefreshed EventType = "account-tokens-refreshed"
)

// Event represents a domain event.
type Event struct {
	ID        string            `json:"id"`
	Type      EventType         `json:"type"`
	Timestamp time.Time         `json:"timestamp"`
	Source    string            `json:"source"`
	Data      interface{}       `json:"data"`
	Metadata  map[string]string `json:"metadata,omitempty"`
}

// EventPublisher publishes domain events.
type EventPublisher interface {
	// PublishUserCreated publishes a User was created event.
	PublishUserCreated(ctx context.Context, entity *UserEntity) error
	// PublishUserUpdated publishes a User was updated event.
	PublishUserUpdated(ctx context.Context, entity *UserEntity) error
	// PublishUserDeleted publishes a User was deleted event.
	PublishUserDeleted(ctx context.Context, entity *UserEntity) error
	// PublishUserEmailVerified publishes a User email was verified event.
	PublishUserEmailVerified(ctx context.Context, entity *UserEntity) error
	// PublishUserPasswordChanged publishes a User password was changed event.
	PublishUserPasswordChanged(ctx context.Context, entity *UserEntity) error
	// PublishSessionCreated publishes a Session was created event.
	PublishSessionCreated(ctx context.Context, entity *SessionEntity) error
	// PublishSessionDeleted publishes a Session was deleted event.
	PublishSessionDeleted(ctx context.Context, entity *SessionEntity) error
	// PublishSessionExpired publishes a Session expired event.
	PublishSessionExpired(ctx context.Context, entity *SessionEntity) error
	// PublishAccountLinked publishes a Account was linked event.
	PublishAccountLinked(ctx context.Context, entity *AccountEntity) error
	// PublishAccountUnlinked publishes a Account was unlinked event.
	PublishAccountUnlinked(ctx context.Context, entity *AccountEntity) error
	// PublishAccountTokensRefreshed publishes a Account tokens were refreshed event.
	PublishAccountTokensRefreshed(ctx context.Context, entity *AccountEntity) error

	// PublishRaw publishes a raw event.
	PublishRaw(ctx context.Context, event *Event) error
}

// NoOpEventPublisher is a no-op event publisher implementation.
type NoOpEventPublisher struct{}

// NewNoOpEventPublisher creates a new no-op event publisher.
func NewNoOpEventPublisher() EventPublisher {
	return &NoOpEventPublisher{}
}

// PublishUserCreated does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishUserCreated(ctx context.Context, entity *UserEntity) error {
	return nil
}

// PublishUserUpdated does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishUserUpdated(ctx context.Context, entity *UserEntity) error {
	return nil
}

// PublishUserDeleted does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishUserDeleted(ctx context.Context, entity *UserEntity) error {
	return nil
}

// PublishUserEmailVerified does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishUserEmailVerified(ctx context.Context, entity *UserEntity) error {
	return nil
}

// PublishUserPasswordChanged does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishUserPasswordChanged(ctx context.Context, entity *UserEntity) error {
	return nil
}

// PublishSessionCreated does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishSessionCreated(ctx context.Context, entity *SessionEntity) error {
	return nil
}

// PublishSessionDeleted does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishSessionDeleted(ctx context.Context, entity *SessionEntity) error {
	return nil
}

// PublishSessionExpired does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishSessionExpired(ctx context.Context, entity *SessionEntity) error {
	return nil
}

// PublishAccountLinked does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishAccountLinked(ctx context.Context, entity *AccountEntity) error {
	return nil
}

// PublishAccountUnlinked does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishAccountUnlinked(ctx context.Context, entity *AccountEntity) error {
	return nil
}

// PublishAccountTokensRefreshed does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishAccountTokensRefreshed(ctx context.Context, entity *AccountEntity) error {
	return nil
}

// PublishRaw does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishRaw(ctx context.Context, event *Event) error {
	return nil
}

// UserCreatedEvent represents a User was created event.
type UserCreatedEvent struct {
	Event
	Entity *UserEntity `json:"entity"`
}

// NewUserCreatedEvent creates a new UserCreated event.
func NewUserCreatedEvent(entity *UserEntity) *UserCreatedEvent {
	return &UserCreatedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventUserCreated,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// UserUpdatedEvent represents a User was updated event.
type UserUpdatedEvent struct {
	Event
	Entity *UserEntity `json:"entity"`
}

// NewUserUpdatedEvent creates a new UserUpdated event.
func NewUserUpdatedEvent(entity *UserEntity) *UserUpdatedEvent {
	return &UserUpdatedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventUserUpdated,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// UserDeletedEvent represents a User was deleted event.
type UserDeletedEvent struct {
	Event
	Entity *UserEntity `json:"entity"`
}

// NewUserDeletedEvent creates a new UserDeleted event.
func NewUserDeletedEvent(entity *UserEntity) *UserDeletedEvent {
	return &UserDeletedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventUserDeleted,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// UserEmailVerifiedEvent represents a User email was verified event.
type UserEmailVerifiedEvent struct {
	Event
	Entity *UserEntity `json:"entity"`
}

// NewUserEmailVerifiedEvent creates a new UserEmailVerified event.
func NewUserEmailVerifiedEvent(entity *UserEntity) *UserEmailVerifiedEvent {
	return &UserEmailVerifiedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventUserEmailVerified,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// UserPasswordChangedEvent represents a User password was changed event.
type UserPasswordChangedEvent struct {
	Event
	Entity *UserEntity `json:"entity"`
}

// NewUserPasswordChangedEvent creates a new UserPasswordChanged event.
func NewUserPasswordChangedEvent(entity *UserEntity) *UserPasswordChangedEvent {
	return &UserPasswordChangedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventUserPasswordChanged,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// SessionCreatedEvent represents a Session was created event.
type SessionCreatedEvent struct {
	Event
	Entity *SessionEntity `json:"entity"`
}

// NewSessionCreatedEvent creates a new SessionCreated event.
func NewSessionCreatedEvent(entity *SessionEntity) *SessionCreatedEvent {
	return &SessionCreatedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventSessionCreated,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// SessionDeletedEvent represents a Session was deleted event.
type SessionDeletedEvent struct {
	Event
	Entity *SessionEntity `json:"entity"`
}

// NewSessionDeletedEvent creates a new SessionDeleted event.
func NewSessionDeletedEvent(entity *SessionEntity) *SessionDeletedEvent {
	return &SessionDeletedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventSessionDeleted,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// SessionExpiredEvent represents a Session expired event.
type SessionExpiredEvent struct {
	Event
	Entity *SessionEntity `json:"entity"`
}

// NewSessionExpiredEvent creates a new SessionExpired event.
func NewSessionExpiredEvent(entity *SessionEntity) *SessionExpiredEvent {
	return &SessionExpiredEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventSessionExpired,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// AccountLinkedEvent represents a Account was linked event.
type AccountLinkedEvent struct {
	Event
	Entity *AccountEntity `json:"entity"`
}

// NewAccountLinkedEvent creates a new AccountLinked event.
func NewAccountLinkedEvent(entity *AccountEntity) *AccountLinkedEvent {
	return &AccountLinkedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventAccountLinked,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// AccountUnlinkedEvent represents a Account was unlinked event.
type AccountUnlinkedEvent struct {
	Event
	Entity *AccountEntity `json:"entity"`
}

// NewAccountUnlinkedEvent creates a new AccountUnlinked event.
func NewAccountUnlinkedEvent(entity *AccountEntity) *AccountUnlinkedEvent {
	return &AccountUnlinkedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventAccountUnlinked,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// AccountTokensRefreshedEvent represents a Account tokens were refreshed event.
type AccountTokensRefreshedEvent struct {
	Event
	Entity *AccountEntity `json:"entity"`
}

// NewAccountTokensRefreshedEvent creates a new AccountTokensRefreshed event.
func NewAccountTokensRefreshedEvent(entity *AccountEntity) *AccountTokensRefreshedEvent {
	return &AccountTokensRefreshedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventAccountTokensRefreshed,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}
