// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package auth

import (
	"context"
	"time"

	"github.com/archesai/archesai/internal/accounts"
	"github.com/archesai/archesai/internal/sessions"
	"github.com/archesai/archesai/internal/users"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAccountsRepository creates a new instance of MockAccountsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountsRepository {
	mock := &MockAccountsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAccountsRepository is an autogenerated mock type for the AccountsRepository type
type MockAccountsRepository struct {
	mock.Mock
}

type MockAccountsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountsRepository) EXPECT() *MockAccountsRepository_Expecter {
	return &MockAccountsRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockAccountsRepository
func (_mock *MockAccountsRepository) Create(ctx context.Context, entity *accounts.Account) (*accounts.Account, error) {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *accounts.Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *accounts.Account) (*accounts.Account, error)); ok {
		return returnFunc(ctx, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *accounts.Account) *accounts.Account); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounts.Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *accounts.Account) error); ok {
		r1 = returnFunc(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountsRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockAccountsRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *accounts.Account
func (_e *MockAccountsRepository_Expecter) Create(ctx interface{}, entity interface{}) *MockAccountsRepository_Create_Call {
	return &MockAccountsRepository_Create_Call{Call: _e.mock.On("Create", ctx, entity)}
}

func (_c *MockAccountsRepository_Create_Call) Run(run func(ctx context.Context, entity *accounts.Account)) *MockAccountsRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *accounts.Account
		if args[1] != nil {
			arg1 = args[1].(*accounts.Account)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountsRepository_Create_Call) Return(account *accounts.Account, err error) *MockAccountsRepository_Create_Call {
	_c.Call.Return(account, err)
	return _c
}

func (_c *MockAccountsRepository_Create_Call) RunAndReturn(run func(ctx context.Context, entity *accounts.Account) (*accounts.Account, error)) *MockAccountsRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockAccountsRepository
func (_mock *MockAccountsRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAccountsRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockAccountsRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockAccountsRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockAccountsRepository_Delete_Call {
	return &MockAccountsRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockAccountsRepository_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockAccountsRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountsRepository_Delete_Call) Return(err error) *MockAccountsRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAccountsRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockAccountsRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockAccountsRepository
func (_mock *MockAccountsRepository) Get(ctx context.Context, id uuid.UUID) (*accounts.Account, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *accounts.Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*accounts.Account, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *accounts.Account); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounts.Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountsRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockAccountsRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockAccountsRepository_Expecter) Get(ctx interface{}, id interface{}) *MockAccountsRepository_Get_Call {
	return &MockAccountsRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockAccountsRepository_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockAccountsRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountsRepository_Get_Call) Return(account *accounts.Account, err error) *MockAccountsRepository_Get_Call {
	_c.Call.Return(account, err)
	return _c
}

func (_c *MockAccountsRepository_Get_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*accounts.Account, error)) *MockAccountsRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByProviderId provides a mock function for the type MockAccountsRepository
func (_mock *MockAccountsRepository) GetByProviderId(ctx context.Context, provider string, providerAccountId string) (*accounts.Account, error) {
	ret := _mock.Called(ctx, provider, providerAccountId)

	if len(ret) == 0 {
		panic("no return value specified for GetByProviderId")
	}

	var r0 *accounts.Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (*accounts.Account, error)); ok {
		return returnFunc(ctx, provider, providerAccountId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) *accounts.Account); ok {
		r0 = returnFunc(ctx, provider, providerAccountId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounts.Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, provider, providerAccountId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountsRepository_GetByProviderId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByProviderId'
type MockAccountsRepository_GetByProviderId_Call struct {
	*mock.Call
}

// GetByProviderId is a helper method to define mock.On call
//   - ctx context.Context
//   - provider string
//   - providerAccountId string
func (_e *MockAccountsRepository_Expecter) GetByProviderId(ctx interface{}, provider interface{}, providerAccountId interface{}) *MockAccountsRepository_GetByProviderId_Call {
	return &MockAccountsRepository_GetByProviderId_Call{Call: _e.mock.On("GetByProviderId", ctx, provider, providerAccountId)}
}

func (_c *MockAccountsRepository_GetByProviderId_Call) Run(run func(ctx context.Context, provider string, providerAccountId string)) *MockAccountsRepository_GetByProviderId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAccountsRepository_GetByProviderId_Call) Return(account *accounts.Account, err error) *MockAccountsRepository_GetByProviderId_Call {
	_c.Call.Return(account, err)
	return _c
}

func (_c *MockAccountsRepository_GetByProviderId_Call) RunAndReturn(run func(ctx context.Context, provider string, providerAccountId string) (*accounts.Account, error)) *MockAccountsRepository_GetByProviderId_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockAccountsRepository
func (_mock *MockAccountsRepository) List(ctx context.Context, params accounts.ListAccountsParams) ([]*accounts.Account, int64, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*accounts.Account
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, accounts.ListAccountsParams) ([]*accounts.Account, int64, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, accounts.ListAccountsParams) []*accounts.Account); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*accounts.Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, accounts.ListAccountsParams) int64); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, accounts.ListAccountsParams) error); ok {
		r2 = returnFunc(ctx, params)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockAccountsRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockAccountsRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - params accounts.ListAccountsParams
func (_e *MockAccountsRepository_Expecter) List(ctx interface{}, params interface{}) *MockAccountsRepository_List_Call {
	return &MockAccountsRepository_List_Call{Call: _e.mock.On("List", ctx, params)}
}

func (_c *MockAccountsRepository_List_Call) Run(run func(ctx context.Context, params accounts.ListAccountsParams)) *MockAccountsRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 accounts.ListAccountsParams
		if args[1] != nil {
			arg1 = args[1].(accounts.ListAccountsParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountsRepository_List_Call) Return(accounts1 []*accounts.Account, n int64, err error) *MockAccountsRepository_List_Call {
	_c.Call.Return(accounts1, n, err)
	return _c
}

func (_c *MockAccountsRepository_List_Call) RunAndReturn(run func(ctx context.Context, params accounts.ListAccountsParams) ([]*accounts.Account, int64, error)) *MockAccountsRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByUserId provides a mock function for the type MockAccountsRepository
func (_mock *MockAccountsRepository) ListByUserId(ctx context.Context, userId uuid.UUID) ([]*accounts.Account, error) {
	ret := _mock.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for ListByUserId")
	}

	var r0 []*accounts.Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*accounts.Account, error)); ok {
		return returnFunc(ctx, userId)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*accounts.Account); ok {
		r0 = returnFunc(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*accounts.Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountsRepository_ListByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByUserId'
type MockAccountsRepository_ListByUserId_Call struct {
	*mock.Call
}

// ListByUserId is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uuid.UUID
func (_e *MockAccountsRepository_Expecter) ListByUserId(ctx interface{}, userId interface{}) *MockAccountsRepository_ListByUserId_Call {
	return &MockAccountsRepository_ListByUserId_Call{Call: _e.mock.On("ListByUserId", ctx, userId)}
}

func (_c *MockAccountsRepository_ListByUserId_Call) Run(run func(ctx context.Context, userId uuid.UUID)) *MockAccountsRepository_ListByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockAccountsRepository_ListByUserId_Call) Return(accounts1 []*accounts.Account, err error) *MockAccountsRepository_ListByUserId_Call {
	_c.Call.Return(accounts1, err)
	return _c
}

func (_c *MockAccountsRepository_ListByUserId_Call) RunAndReturn(run func(ctx context.Context, userId uuid.UUID) ([]*accounts.Account, error)) *MockAccountsRepository_ListByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockAccountsRepository
func (_mock *MockAccountsRepository) Update(ctx context.Context, id uuid.UUID, entity *accounts.Account) (*accounts.Account, error) {
	ret := _mock.Called(ctx, id, entity)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *accounts.Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *accounts.Account) (*accounts.Account, error)); ok {
		return returnFunc(ctx, id, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *accounts.Account) *accounts.Account); ok {
		r0 = returnFunc(ctx, id, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounts.Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *accounts.Account) error); ok {
		r1 = returnFunc(ctx, id, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountsRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockAccountsRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - entity *accounts.Account
func (_e *MockAccountsRepository_Expecter) Update(ctx interface{}, id interface{}, entity interface{}) *MockAccountsRepository_Update_Call {
	return &MockAccountsRepository_Update_Call{Call: _e.mock.On("Update", ctx, id, entity)}
}

func (_c *MockAccountsRepository_Update_Call) Run(run func(ctx context.Context, id uuid.UUID, entity *accounts.Account)) *MockAccountsRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *accounts.Account
		if args[2] != nil {
			arg2 = args[2].(*accounts.Account)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockAccountsRepository_Update_Call) Return(account *accounts.Account, err error) *MockAccountsRepository_Update_Call {
	_c.Call.Return(account, err)
	return _c
}

func (_c *MockAccountsRepository_Update_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, entity *accounts.Account) (*accounts.Account, error)) *MockAccountsRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSessionsRepository creates a new instance of MockSessionsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionsRepository {
	mock := &MockSessionsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSessionsRepository is an autogenerated mock type for the SessionsRepository type
type MockSessionsRepository struct {
	mock.Mock
}

type MockSessionsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionsRepository) EXPECT() *MockSessionsRepository_Expecter {
	return &MockSessionsRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockSessionsRepository
func (_mock *MockSessionsRepository) Create(ctx context.Context, entity *sessions.Session) (*sessions.Session, error) {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *sessions.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sessions.Session) (*sessions.Session, error)); ok {
		return returnFunc(ctx, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sessions.Session) *sessions.Session); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sessions.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *sessions.Session) error); ok {
		r1 = returnFunc(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionsRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSessionsRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *sessions.Session
func (_e *MockSessionsRepository_Expecter) Create(ctx interface{}, entity interface{}) *MockSessionsRepository_Create_Call {
	return &MockSessionsRepository_Create_Call{Call: _e.mock.On("Create", ctx, entity)}
}

func (_c *MockSessionsRepository_Create_Call) Run(run func(ctx context.Context, entity *sessions.Session)) *MockSessionsRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *sessions.Session
		if args[1] != nil {
			arg1 = args[1].(*sessions.Session)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionsRepository_Create_Call) Return(session *sessions.Session, err error) *MockSessionsRepository_Create_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockSessionsRepository_Create_Call) RunAndReturn(run func(ctx context.Context, entity *sessions.Session) (*sessions.Session, error)) *MockSessionsRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockSessionsRepository
func (_mock *MockSessionsRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionsRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSessionsRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockSessionsRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockSessionsRepository_Delete_Call {
	return &MockSessionsRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockSessionsRepository_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockSessionsRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionsRepository_Delete_Call) Return(err error) *MockSessionsRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionsRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockSessionsRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByToken provides a mock function for the type MockSessionsRepository
func (_mock *MockSessionsRepository) DeleteByToken(ctx context.Context, token string) error {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionsRepository_DeleteByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByToken'
type MockSessionsRepository_DeleteByToken_Call struct {
	*mock.Call
}

// DeleteByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockSessionsRepository_Expecter) DeleteByToken(ctx interface{}, token interface{}) *MockSessionsRepository_DeleteByToken_Call {
	return &MockSessionsRepository_DeleteByToken_Call{Call: _e.mock.On("DeleteByToken", ctx, token)}
}

func (_c *MockSessionsRepository_DeleteByToken_Call) Run(run func(ctx context.Context, token string)) *MockSessionsRepository_DeleteByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionsRepository_DeleteByToken_Call) Return(err error) *MockSessionsRepository_DeleteByToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionsRepository_DeleteByToken_Call) RunAndReturn(run func(ctx context.Context, token string) error) *MockSessionsRepository_DeleteByToken_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByUser provides a mock function for the type MockSessionsRepository
func (_mock *MockSessionsRepository) DeleteByUser(ctx context.Context, userId uuid.UUID) error {
	ret := _mock.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, userId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionsRepository_DeleteByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByUser'
type MockSessionsRepository_DeleteByUser_Call struct {
	*mock.Call
}

// DeleteByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uuid.UUID
func (_e *MockSessionsRepository_Expecter) DeleteByUser(ctx interface{}, userId interface{}) *MockSessionsRepository_DeleteByUser_Call {
	return &MockSessionsRepository_DeleteByUser_Call{Call: _e.mock.On("DeleteByUser", ctx, userId)}
}

func (_c *MockSessionsRepository_DeleteByUser_Call) Run(run func(ctx context.Context, userId uuid.UUID)) *MockSessionsRepository_DeleteByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionsRepository_DeleteByUser_Call) Return(err error) *MockSessionsRepository_DeleteByUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionsRepository_DeleteByUser_Call) RunAndReturn(run func(ctx context.Context, userId uuid.UUID) error) *MockSessionsRepository_DeleteByUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteExpired provides a mock function for the type MockSessionsRepository
func (_mock *MockSessionsRepository) DeleteExpired(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExpired")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionsRepository_DeleteExpired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExpired'
type MockSessionsRepository_DeleteExpired_Call struct {
	*mock.Call
}

// DeleteExpired is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSessionsRepository_Expecter) DeleteExpired(ctx interface{}) *MockSessionsRepository_DeleteExpired_Call {
	return &MockSessionsRepository_DeleteExpired_Call{Call: _e.mock.On("DeleteExpired", ctx)}
}

func (_c *MockSessionsRepository_DeleteExpired_Call) Run(run func(ctx context.Context)) *MockSessionsRepository_DeleteExpired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSessionsRepository_DeleteExpired_Call) Return(err error) *MockSessionsRepository_DeleteExpired_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionsRepository_DeleteExpired_Call) RunAndReturn(run func(ctx context.Context) error) *MockSessionsRepository_DeleteExpired_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockSessionsRepository
func (_mock *MockSessionsRepository) Get(ctx context.Context, id uuid.UUID) (*sessions.Session, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *sessions.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*sessions.Session, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *sessions.Session); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sessions.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionsRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockSessionsRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockSessionsRepository_Expecter) Get(ctx interface{}, id interface{}) *MockSessionsRepository_Get_Call {
	return &MockSessionsRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockSessionsRepository_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockSessionsRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionsRepository_Get_Call) Return(session *sessions.Session, err error) *MockSessionsRepository_Get_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockSessionsRepository_Get_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*sessions.Session, error)) *MockSessionsRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByToken provides a mock function for the type MockSessionsRepository
func (_mock *MockSessionsRepository) GetByToken(ctx context.Context, token string) (*sessions.Session, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetByToken")
	}

	var r0 *sessions.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*sessions.Session, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *sessions.Session); ok {
		r0 = returnFunc(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sessions.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionsRepository_GetByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByToken'
type MockSessionsRepository_GetByToken_Call struct {
	*mock.Call
}

// GetByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockSessionsRepository_Expecter) GetByToken(ctx interface{}, token interface{}) *MockSessionsRepository_GetByToken_Call {
	return &MockSessionsRepository_GetByToken_Call{Call: _e.mock.On("GetByToken", ctx, token)}
}

func (_c *MockSessionsRepository_GetByToken_Call) Run(run func(ctx context.Context, token string)) *MockSessionsRepository_GetByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionsRepository_GetByToken_Call) Return(session *sessions.Session, err error) *MockSessionsRepository_GetByToken_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockSessionsRepository_GetByToken_Call) RunAndReturn(run func(ctx context.Context, token string) (*sessions.Session, error)) *MockSessionsRepository_GetByToken_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockSessionsRepository
func (_mock *MockSessionsRepository) List(ctx context.Context, params sessions.ListSessionsParams) ([]*sessions.Session, int64, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*sessions.Session
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, sessions.ListSessionsParams) ([]*sessions.Session, int64, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, sessions.ListSessionsParams) []*sessions.Session); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*sessions.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, sessions.ListSessionsParams) int64); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, sessions.ListSessionsParams) error); ok {
		r2 = returnFunc(ctx, params)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockSessionsRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockSessionsRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - params sessions.ListSessionsParams
func (_e *MockSessionsRepository_Expecter) List(ctx interface{}, params interface{}) *MockSessionsRepository_List_Call {
	return &MockSessionsRepository_List_Call{Call: _e.mock.On("List", ctx, params)}
}

func (_c *MockSessionsRepository_List_Call) Run(run func(ctx context.Context, params sessions.ListSessionsParams)) *MockSessionsRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 sessions.ListSessionsParams
		if args[1] != nil {
			arg1 = args[1].(sessions.ListSessionsParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionsRepository_List_Call) Return(sessions1 []*sessions.Session, n int64, err error) *MockSessionsRepository_List_Call {
	_c.Call.Return(sessions1, n, err)
	return _c
}

func (_c *MockSessionsRepository_List_Call) RunAndReturn(run func(ctx context.Context, params sessions.ListSessionsParams) ([]*sessions.Session, int64, error)) *MockSessionsRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockSessionsRepository
func (_mock *MockSessionsRepository) Update(ctx context.Context, id uuid.UUID, entity *sessions.Session) (*sessions.Session, error) {
	ret := _mock.Called(ctx, id, entity)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *sessions.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *sessions.Session) (*sessions.Session, error)); ok {
		return returnFunc(ctx, id, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *sessions.Session) *sessions.Session); ok {
		r0 = returnFunc(ctx, id, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sessions.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *sessions.Session) error); ok {
		r1 = returnFunc(ctx, id, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionsRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockSessionsRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - entity *sessions.Session
func (_e *MockSessionsRepository_Expecter) Update(ctx interface{}, id interface{}, entity interface{}) *MockSessionsRepository_Update_Call {
	return &MockSessionsRepository_Update_Call{Call: _e.mock.On("Update", ctx, id, entity)}
}

func (_c *MockSessionsRepository_Update_Call) Run(run func(ctx context.Context, id uuid.UUID, entity *sessions.Session)) *MockSessionsRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *sessions.Session
		if args[2] != nil {
			arg2 = args[2].(*sessions.Session)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSessionsRepository_Update_Call) Return(session *sessions.Session, err error) *MockSessionsRepository_Update_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockSessionsRepository_Update_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, entity *sessions.Session) (*sessions.Session, error)) *MockSessionsRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSessionsCache creates a new instance of MockSessionsCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionsCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionsCache {
	mock := &MockSessionsCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSessionsCache is an autogenerated mock type for the SessionsCache type
type MockSessionsCache struct {
	mock.Mock
}

type MockSessionsCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionsCache) EXPECT() *MockSessionsCache_Expecter {
	return &MockSessionsCache_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type MockSessionsCache
func (_mock *MockSessionsCache) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionsCache_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSessionsCache_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockSessionsCache_Expecter) Delete(ctx interface{}, id interface{}) *MockSessionsCache_Delete_Call {
	return &MockSessionsCache_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockSessionsCache_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockSessionsCache_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionsCache_Delete_Call) Return(err error) *MockSessionsCache_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionsCache_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockSessionsCache_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByToken provides a mock function for the type MockSessionsCache
func (_mock *MockSessionsCache) DeleteByToken(ctx context.Context, token string) error {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionsCache_DeleteByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByToken'
type MockSessionsCache_DeleteByToken_Call struct {
	*mock.Call
}

// DeleteByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockSessionsCache_Expecter) DeleteByToken(ctx interface{}, token interface{}) *MockSessionsCache_DeleteByToken_Call {
	return &MockSessionsCache_DeleteByToken_Call{Call: _e.mock.On("DeleteByToken", ctx, token)}
}

func (_c *MockSessionsCache_DeleteByToken_Call) Run(run func(ctx context.Context, token string)) *MockSessionsCache_DeleteByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionsCache_DeleteByToken_Call) Return(err error) *MockSessionsCache_DeleteByToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionsCache_DeleteByToken_Call) RunAndReturn(run func(ctx context.Context, token string) error) *MockSessionsCache_DeleteByToken_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByUser provides a mock function for the type MockSessionsCache
func (_mock *MockSessionsCache) DeleteByUser(ctx context.Context, userId uuid.UUID) error {
	ret := _mock.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, userId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionsCache_DeleteByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByUser'
type MockSessionsCache_DeleteByUser_Call struct {
	*mock.Call
}

// DeleteByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userId uuid.UUID
func (_e *MockSessionsCache_Expecter) DeleteByUser(ctx interface{}, userId interface{}) *MockSessionsCache_DeleteByUser_Call {
	return &MockSessionsCache_DeleteByUser_Call{Call: _e.mock.On("DeleteByUser", ctx, userId)}
}

func (_c *MockSessionsCache_DeleteByUser_Call) Run(run func(ctx context.Context, userId uuid.UUID)) *MockSessionsCache_DeleteByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionsCache_DeleteByUser_Call) Return(err error) *MockSessionsCache_DeleteByUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionsCache_DeleteByUser_Call) RunAndReturn(run func(ctx context.Context, userId uuid.UUID) error) *MockSessionsCache_DeleteByUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteExpired provides a mock function for the type MockSessionsCache
func (_mock *MockSessionsCache) DeleteExpired(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExpired")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionsCache_DeleteExpired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExpired'
type MockSessionsCache_DeleteExpired_Call struct {
	*mock.Call
}

// DeleteExpired is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSessionsCache_Expecter) DeleteExpired(ctx interface{}) *MockSessionsCache_DeleteExpired_Call {
	return &MockSessionsCache_DeleteExpired_Call{Call: _e.mock.On("DeleteExpired", ctx)}
}

func (_c *MockSessionsCache_DeleteExpired_Call) Run(run func(ctx context.Context)) *MockSessionsCache_DeleteExpired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSessionsCache_DeleteExpired_Call) Return(err error) *MockSessionsCache_DeleteExpired_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionsCache_DeleteExpired_Call) RunAndReturn(run func(ctx context.Context) error) *MockSessionsCache_DeleteExpired_Call {
	_c.Call.Return(run)
	return _c
}

// FlushAll provides a mock function for the type MockSessionsCache
func (_mock *MockSessionsCache) FlushAll(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FlushAll")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionsCache_FlushAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlushAll'
type MockSessionsCache_FlushAll_Call struct {
	*mock.Call
}

// FlushAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSessionsCache_Expecter) FlushAll(ctx interface{}) *MockSessionsCache_FlushAll_Call {
	return &MockSessionsCache_FlushAll_Call{Call: _e.mock.On("FlushAll", ctx)}
}

func (_c *MockSessionsCache_FlushAll_Call) Run(run func(ctx context.Context)) *MockSessionsCache_FlushAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSessionsCache_FlushAll_Call) Return(err error) *MockSessionsCache_FlushAll_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionsCache_FlushAll_Call) RunAndReturn(run func(ctx context.Context) error) *MockSessionsCache_FlushAll_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockSessionsCache
func (_mock *MockSessionsCache) Get(ctx context.Context, id uuid.UUID) (*sessions.Session, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *sessions.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*sessions.Session, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *sessions.Session); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sessions.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionsCache_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockSessionsCache_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockSessionsCache_Expecter) Get(ctx interface{}, id interface{}) *MockSessionsCache_Get_Call {
	return &MockSessionsCache_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockSessionsCache_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockSessionsCache_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionsCache_Get_Call) Return(session *sessions.Session, err error) *MockSessionsCache_Get_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockSessionsCache_Get_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*sessions.Session, error)) *MockSessionsCache_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByToken provides a mock function for the type MockSessionsCache
func (_mock *MockSessionsCache) GetByToken(ctx context.Context, token string) (*sessions.Session, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetByToken")
	}

	var r0 *sessions.Session
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*sessions.Session, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *sessions.Session); ok {
		r0 = returnFunc(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sessions.Session)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionsCache_GetByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByToken'
type MockSessionsCache_GetByToken_Call struct {
	*mock.Call
}

// GetByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockSessionsCache_Expecter) GetByToken(ctx interface{}, token interface{}) *MockSessionsCache_GetByToken_Call {
	return &MockSessionsCache_GetByToken_Call{Call: _e.mock.On("GetByToken", ctx, token)}
}

func (_c *MockSessionsCache_GetByToken_Call) Run(run func(ctx context.Context, token string)) *MockSessionsCache_GetByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionsCache_GetByToken_Call) Return(session *sessions.Session, err error) *MockSessionsCache_GetByToken_Call {
	_c.Call.Return(session, err)
	return _c
}

func (_c *MockSessionsCache_GetByToken_Call) RunAndReturn(run func(ctx context.Context, token string) (*sessions.Session, error)) *MockSessionsCache_GetByToken_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type MockSessionsCache
func (_mock *MockSessionsCache) Set(ctx context.Context, entity *sessions.Session, ttl time.Duration) error {
	ret := _mock.Called(ctx, entity, ttl)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *sessions.Session, time.Duration) error); ok {
		r0 = returnFunc(ctx, entity, ttl)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionsCache_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockSessionsCache_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *sessions.Session
//   - ttl time.Duration
func (_e *MockSessionsCache_Expecter) Set(ctx interface{}, entity interface{}, ttl interface{}) *MockSessionsCache_Set_Call {
	return &MockSessionsCache_Set_Call{Call: _e.mock.On("Set", ctx, entity, ttl)}
}

func (_c *MockSessionsCache_Set_Call) Run(run func(ctx context.Context, entity *sessions.Session, ttl time.Duration)) *MockSessionsCache_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *sessions.Session
		if args[1] != nil {
			arg1 = args[1].(*sessions.Session)
		}
		var arg2 time.Duration
		if args[2] != nil {
			arg2 = args[2].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSessionsCache_Set_Call) Return(err error) *MockSessionsCache_Set_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionsCache_Set_Call) RunAndReturn(run func(ctx context.Context, entity *sessions.Session, ttl time.Duration) error) *MockSessionsCache_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUsersRepository creates a new instance of MockUsersRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsersRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsersRepository {
	mock := &MockUsersRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUsersRepository is an autogenerated mock type for the UsersRepository type
type MockUsersRepository struct {
	mock.Mock
}

type MockUsersRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsersRepository) EXPECT() *MockUsersRepository_Expecter {
	return &MockUsersRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockUsersRepository
func (_mock *MockUsersRepository) Create(ctx context.Context, entity *users.User) (*users.User, error) {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *users.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *users.User) (*users.User, error)); ok {
		return returnFunc(ctx, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *users.User) *users.User); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *users.User) error); ok {
		r1 = returnFunc(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsersRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUsersRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *users.User
func (_e *MockUsersRepository_Expecter) Create(ctx interface{}, entity interface{}) *MockUsersRepository_Create_Call {
	return &MockUsersRepository_Create_Call{Call: _e.mock.On("Create", ctx, entity)}
}

func (_c *MockUsersRepository_Create_Call) Run(run func(ctx context.Context, entity *users.User)) *MockUsersRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *users.User
		if args[1] != nil {
			arg1 = args[1].(*users.User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsersRepository_Create_Call) Return(user *users.User, err error) *MockUsersRepository_Create_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUsersRepository_Create_Call) RunAndReturn(run func(ctx context.Context, entity *users.User) (*users.User, error)) *MockUsersRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockUsersRepository
func (_mock *MockUsersRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUsersRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUsersRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockUsersRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockUsersRepository_Delete_Call {
	return &MockUsersRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockUsersRepository_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockUsersRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsersRepository_Delete_Call) Return(err error) *MockUsersRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUsersRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockUsersRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockUsersRepository
func (_mock *MockUsersRepository) Get(ctx context.Context, id uuid.UUID) (*users.User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *users.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*users.User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *users.User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsersRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockUsersRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockUsersRepository_Expecter) Get(ctx interface{}, id interface{}) *MockUsersRepository_Get_Call {
	return &MockUsersRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockUsersRepository_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockUsersRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsersRepository_Get_Call) Return(user *users.User, err error) *MockUsersRepository_Get_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUsersRepository_Get_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*users.User, error)) *MockUsersRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByEmail provides a mock function for the type MockUsersRepository
func (_mock *MockUsersRepository) GetByEmail(ctx context.Context, email string) (*users.User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetByEmail")
	}

	var r0 *users.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*users.User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *users.User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsersRepository_GetByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByEmail'
type MockUsersRepository_GetByEmail_Call struct {
	*mock.Call
}

// GetByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockUsersRepository_Expecter) GetByEmail(ctx interface{}, email interface{}) *MockUsersRepository_GetByEmail_Call {
	return &MockUsersRepository_GetByEmail_Call{Call: _e.mock.On("GetByEmail", ctx, email)}
}

func (_c *MockUsersRepository_GetByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUsersRepository_GetByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsersRepository_GetByEmail_Call) Return(user *users.User, err error) *MockUsersRepository_GetByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUsersRepository_GetByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*users.User, error)) *MockUsersRepository_GetByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockUsersRepository
func (_mock *MockUsersRepository) List(ctx context.Context, params users.ListUsersParams) ([]*users.User, int64, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*users.User
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, users.ListUsersParams) ([]*users.User, int64, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, users.ListUsersParams) []*users.User); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*users.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, users.ListUsersParams) int64); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, users.ListUsersParams) error); ok {
		r2 = returnFunc(ctx, params)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockUsersRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockUsersRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - params users.ListUsersParams
func (_e *MockUsersRepository_Expecter) List(ctx interface{}, params interface{}) *MockUsersRepository_List_Call {
	return &MockUsersRepository_List_Call{Call: _e.mock.On("List", ctx, params)}
}

func (_c *MockUsersRepository_List_Call) Run(run func(ctx context.Context, params users.ListUsersParams)) *MockUsersRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 users.ListUsersParams
		if args[1] != nil {
			arg1 = args[1].(users.ListUsersParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUsersRepository_List_Call) Return(users1 []*users.User, n int64, err error) *MockUsersRepository_List_Call {
	_c.Call.Return(users1, n, err)
	return _c
}

func (_c *MockUsersRepository_List_Call) RunAndReturn(run func(ctx context.Context, params users.ListUsersParams) ([]*users.User, int64, error)) *MockUsersRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockUsersRepository
func (_mock *MockUsersRepository) Update(ctx context.Context, id uuid.UUID, entity *users.User) (*users.User, error) {
	ret := _mock.Called(ctx, id, entity)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *users.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *users.User) (*users.User, error)); ok {
		return returnFunc(ctx, id, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *users.User) *users.User); ok {
		r0 = returnFunc(ctx, id, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *users.User) error); ok {
		r1 = returnFunc(ctx, id, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUsersRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUsersRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - entity *users.User
func (_e *MockUsersRepository_Expecter) Update(ctx interface{}, id interface{}, entity interface{}) *MockUsersRepository_Update_Call {
	return &MockUsersRepository_Update_Call{Call: _e.mock.On("Update", ctx, id, entity)}
}

func (_c *MockUsersRepository_Update_Call) Run(run func(ctx context.Context, id uuid.UUID, entity *users.User)) *MockUsersRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *users.User
		if args[2] != nil {
			arg2 = args[2].(*users.User)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockUsersRepository_Update_Call) Return(user *users.User, err error) *MockUsersRepository_Update_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUsersRepository_Update_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, entity *users.User) (*users.User, error)) *MockUsersRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
