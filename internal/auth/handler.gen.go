// Package auth provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package auth

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List tokens
	// (GET /tokens)
	ListTokens(ctx echo.Context, params ListTokensParams) error
	// Create a token
	// (POST /tokens)
	CreateToken(ctx echo.Context) error
	// Delete API key
	// (DELETE /tokens/{id})
	ApikeysDelete(ctx echo.Context, id UUID) error
	// Get API key details
	// (GET /tokens/{id})
	ApikeysFindByID(ctx echo.Context, id UUID) error
	// Update API key
	// (PATCH /tokens/{id})
	ApikeysUpdate(ctx echo.Context, id UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListTokens converts echo context to params.
func (w *ServerInterfaceWrapper) ListTokens(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTokensParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListTokens(ctx, params)
	return err
}

// CreateToken converts echo context to params.
func (w *ServerInterfaceWrapper) CreateToken(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateToken(ctx)
	return err
}

// ApikeysDelete converts echo context to params.
func (w *ServerInterfaceWrapper) ApikeysDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApikeysDelete(ctx, id)
	return err
}

// ApikeysFindByID converts echo context to params.
func (w *ServerInterfaceWrapper) ApikeysFindByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApikeysFindByID(ctx, id)
	return err
}

// ApikeysUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ApikeysUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApikeysUpdate(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/tokens", wrapper.ListTokens)
	router.POST(baseURL+"/tokens", wrapper.CreateToken)
	router.DELETE(baseURL+"/tokens/:id", wrapper.ApikeysDelete)
	router.GET(baseURL+"/tokens/:id", wrapper.ApikeysFindByID)
	router.PATCH(baseURL+"/tokens/:id", wrapper.ApikeysUpdate)

}

type BadRequestApplicationProblemPlusJSONResponse Problem

type NotFoundApplicationProblemPlusJSONResponse Problem

type UnauthorizedApplicationProblemPlusJSONResponse Problem

type ListTokensRequestObject struct {
	Params ListTokensParams
}

type ListTokensResponseObject interface {
	VisitListTokensResponse(w http.ResponseWriter) error
}

type ListTokens200JSONResponse struct {
	Data []APIKey `json:"data"`
	Meta struct {
		Total float32 `json:"total"`
	} `json:"meta"`
}

func (response ListTokens200JSONResponse) VisitListTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTokens401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response ListTokens401ApplicationProblemPlusJSONResponse) VisitListTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateTokenRequestObject struct {
	Body *CreateTokenJSONRequestBody
}

type CreateTokenResponseObject interface {
	VisitCreateTokenResponse(w http.ResponseWriter) error
}

type CreateToken201JSONResponse APIKeyResponse

func (response CreateToken201JSONResponse) VisitCreateTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateToken400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response CreateToken400ApplicationProblemPlusJSONResponse) VisitCreateTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateToken401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response CreateToken401ApplicationProblemPlusJSONResponse) VisitCreateTokenResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ApikeysDeleteRequestObject struct {
	ID UUID `json:"id"`
}

type ApikeysDeleteResponseObject interface {
	VisitApikeysDeleteResponse(w http.ResponseWriter) error
}

type ApikeysDelete204Response struct {
}

func (response ApikeysDelete204Response) VisitApikeysDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ApikeysDelete400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response ApikeysDelete400ApplicationProblemPlusJSONResponse) VisitApikeysDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ApikeysDelete401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response ApikeysDelete401ApplicationProblemPlusJSONResponse) VisitApikeysDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ApikeysDelete404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response ApikeysDelete404ApplicationProblemPlusJSONResponse) VisitApikeysDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ApikeysFindByIDRequestObject struct {
	ID UUID `json:"id"`
}

type ApikeysFindByIDResponseObject interface {
	VisitApikeysFindByIDResponse(w http.ResponseWriter) error
}

type ApikeysFindByID200JSONResponse APIKey

func (response ApikeysFindByID200JSONResponse) VisitApikeysFindByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ApikeysFindByID400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response ApikeysFindByID400ApplicationProblemPlusJSONResponse) VisitApikeysFindByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ApikeysFindByID401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response ApikeysFindByID401ApplicationProblemPlusJSONResponse) VisitApikeysFindByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ApikeysFindByID404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response ApikeysFindByID404ApplicationProblemPlusJSONResponse) VisitApikeysFindByIDResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ApikeysUpdateRequestObject struct {
	ID   UUID `json:"id"`
	Body *ApikeysUpdateJSONRequestBody
}

type ApikeysUpdateResponseObject interface {
	VisitApikeysUpdateResponse(w http.ResponseWriter) error
}

type ApikeysUpdate200JSONResponse APIKey

func (response ApikeysUpdate200JSONResponse) VisitApikeysUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ApikeysUpdate400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response ApikeysUpdate400ApplicationProblemPlusJSONResponse) VisitApikeysUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ApikeysUpdate401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response ApikeysUpdate401ApplicationProblemPlusJSONResponse) VisitApikeysUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ApikeysUpdate404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response ApikeysUpdate404ApplicationProblemPlusJSONResponse) VisitApikeysUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List tokens
	// (GET /tokens)
	ListTokens(ctx context.Context, request ListTokensRequestObject) (ListTokensResponseObject, error)
	// Create a token
	// (POST /tokens)
	CreateToken(ctx context.Context, request CreateTokenRequestObject) (CreateTokenResponseObject, error)
	// Delete API key
	// (DELETE /tokens/{id})
	ApikeysDelete(ctx context.Context, request ApikeysDeleteRequestObject) (ApikeysDeleteResponseObject, error)
	// Get API key details
	// (GET /tokens/{id})
	ApikeysFindByID(ctx context.Context, request ApikeysFindByIDRequestObject) (ApikeysFindByIDResponseObject, error)
	// Update API key
	// (PATCH /tokens/{id})
	ApikeysUpdate(ctx context.Context, request ApikeysUpdateRequestObject) (ApikeysUpdateResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ListTokens operation middleware
func (sh *strictHandler) ListTokens(ctx echo.Context, params ListTokensParams) error {
	var request ListTokensRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListTokens(ctx.Request().Context(), request.(ListTokensRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTokens")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListTokensResponseObject); ok {
		return validResponse.VisitListTokensResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateToken operation middleware
func (sh *strictHandler) CreateToken(ctx echo.Context) error {
	var request CreateTokenRequestObject

	var body CreateTokenJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateToken(ctx.Request().Context(), request.(CreateTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateTokenResponseObject); ok {
		return validResponse.VisitCreateTokenResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ApikeysDelete operation middleware
func (sh *strictHandler) ApikeysDelete(ctx echo.Context, id UUID) error {
	var request ApikeysDeleteRequestObject

	request.ID = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ApikeysDelete(ctx.Request().Context(), request.(ApikeysDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ApikeysDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ApikeysDeleteResponseObject); ok {
		return validResponse.VisitApikeysDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ApikeysFindByID operation middleware
func (sh *strictHandler) ApikeysFindByID(ctx echo.Context, id UUID) error {
	var request ApikeysFindByIDRequestObject

	request.ID = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ApikeysFindByID(ctx.Request().Context(), request.(ApikeysFindByIDRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ApikeysFindByID")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ApikeysFindByIDResponseObject); ok {
		return validResponse.VisitApikeysFindByIDResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ApikeysUpdate operation middleware
func (sh *strictHandler) ApikeysUpdate(ctx echo.Context, id UUID) error {
	var request ApikeysUpdateRequestObject

	request.ID = id

	var body ApikeysUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ApikeysUpdate(ctx.Request().Context(), request.(ApikeysUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ApikeysUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ApikeysUpdateResponseObject); ok {
		return validResponse.VisitApikeysUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
