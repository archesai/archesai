// Code generated by codegen events. DO NOT EDIT.
package auth

import (
	"context"
	"github.com/google/uuid"
	"time"
)

// EventType represents the type of event.
type EventType string

// Event types for auth domain.
const (
	Eventaccountcreated    EventType = "accountcreated"
	Eventaccountupdated    EventType = "accountupdated"
	Eventaccountdeleted    EventType = "accountdeleted"
	Eventaccountlinked     EventType = "accountlinked"
	Eventaccountunlinked   EventType = "accountunlinked"
	Eventsessioncreated    EventType = "sessioncreated"
	Eventsessionrefreshed  EventType = "sessionrefreshed"
	Eventsessionexpired    EventType = "sessionexpired"
	Eventsessiondeleted    EventType = "sessiondeleted"
	Eventusercreated       EventType = "usercreated"
	Eventuserupdated       EventType = "userupdated"
	Eventuserdeleted       EventType = "userdeleted"
	EventuseremailVerified EventType = "useremail-verified"
)

// Event represents a domain event.
type Event struct {
	ID        string            `json:"id"`
	Type      EventType         `json:"type"`
	Timestamp time.Time         `json:"timestamp"`
	Source    string            `json:"source"`
	Data      interface{}       `json:"data"`
	Metadata  map[string]string `json:"metadata,omitempty"`
}

// EventPublisher publishes domain events.
type EventPublisher interface {
	// Publishaccountcreated publishes a Account created event event.
	Publishaccountcreated(ctx context.Context, entity *Account) error
	// Publishaccountupdated publishes a Account updated event event.
	Publishaccountupdated(ctx context.Context, entity *Account) error
	// Publishaccountdeleted publishes a Account deleted event event.
	Publishaccountdeleted(ctx context.Context, entity *Account) error
	// Publishaccountlinked publishes a Account linked event event.
	Publishaccountlinked(ctx context.Context, entity *Account) error
	// Publishaccountunlinked publishes a Account unlinked event event.
	Publishaccountunlinked(ctx context.Context, entity *Account) error
	// Publishsessioncreated publishes a Session created event event.
	Publishsessioncreated(ctx context.Context, entity *Session) error
	// Publishsessionrefreshed publishes a Session refreshed event event.
	Publishsessionrefreshed(ctx context.Context, entity *Session) error
	// Publishsessionexpired publishes a Session expired event event.
	Publishsessionexpired(ctx context.Context, entity *Session) error
	// Publishsessiondeleted publishes a Session deleted event event.
	Publishsessiondeleted(ctx context.Context, entity *Session) error
	// Publishusercreated publishes a User created event event.
	Publishusercreated(ctx context.Context, entity *User) error
	// Publishuserupdated publishes a User updated event event.
	Publishuserupdated(ctx context.Context, entity *User) error
	// Publishuserdeleted publishes a User deleted event event.
	Publishuserdeleted(ctx context.Context, entity *User) error
	// PublishuseremailVerified publishes a User email_verified event event.
	PublishuseremailVerified(ctx context.Context, entity *User) error

	// PublishRaw publishes a raw event.
	PublishRaw(ctx context.Context, event *Event) error
}

// NoOpEventPublisher is a no-op event publisher implementation.
type NoOpEventPublisher struct{}

// NewNoOpEventPublisher creates a new no-op event publisher.
func NewNoOpEventPublisher() EventPublisher {
	return &NoOpEventPublisher{}
}

// Publishaccountcreated does nothing in no-op implementation.
func (p *NoOpEventPublisher) Publishaccountcreated(ctx context.Context, entity *Account) error {
	return nil
}

// Publishaccountupdated does nothing in no-op implementation.
func (p *NoOpEventPublisher) Publishaccountupdated(ctx context.Context, entity *Account) error {
	return nil
}

// Publishaccountdeleted does nothing in no-op implementation.
func (p *NoOpEventPublisher) Publishaccountdeleted(ctx context.Context, entity *Account) error {
	return nil
}

// Publishaccountlinked does nothing in no-op implementation.
func (p *NoOpEventPublisher) Publishaccountlinked(ctx context.Context, entity *Account) error {
	return nil
}

// Publishaccountunlinked does nothing in no-op implementation.
func (p *NoOpEventPublisher) Publishaccountunlinked(ctx context.Context, entity *Account) error {
	return nil
}

// Publishsessioncreated does nothing in no-op implementation.
func (p *NoOpEventPublisher) Publishsessioncreated(ctx context.Context, entity *Session) error {
	return nil
}

// Publishsessionrefreshed does nothing in no-op implementation.
func (p *NoOpEventPublisher) Publishsessionrefreshed(ctx context.Context, entity *Session) error {
	return nil
}

// Publishsessionexpired does nothing in no-op implementation.
func (p *NoOpEventPublisher) Publishsessionexpired(ctx context.Context, entity *Session) error {
	return nil
}

// Publishsessiondeleted does nothing in no-op implementation.
func (p *NoOpEventPublisher) Publishsessiondeleted(ctx context.Context, entity *Session) error {
	return nil
}

// Publishusercreated does nothing in no-op implementation.
func (p *NoOpEventPublisher) Publishusercreated(ctx context.Context, entity *User) error {
	return nil
}

// Publishuserupdated does nothing in no-op implementation.
func (p *NoOpEventPublisher) Publishuserupdated(ctx context.Context, entity *User) error {
	return nil
}

// Publishuserdeleted does nothing in no-op implementation.
func (p *NoOpEventPublisher) Publishuserdeleted(ctx context.Context, entity *User) error {
	return nil
}

// PublishuseremailVerified does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishuseremailVerified(ctx context.Context, entity *User) error {
	return nil
}

// PublishRaw does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishRaw(ctx context.Context, event *Event) error {
	return nil
}

// accountcreatedEvent represents a Account created event event.
type accountcreatedEvent struct {
	Event
	Entity *Account `json:"entity"`
}

// NewaccountcreatedEvent creates a new accountcreated event.
func NewaccountcreatedEvent(entity *Account) *accountcreatedEvent {
	return &accountcreatedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      Eventaccountcreated,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// accountupdatedEvent represents a Account updated event event.
type accountupdatedEvent struct {
	Event
	Entity *Account `json:"entity"`
}

// NewaccountupdatedEvent creates a new accountupdated event.
func NewaccountupdatedEvent(entity *Account) *accountupdatedEvent {
	return &accountupdatedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      Eventaccountupdated,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// accountdeletedEvent represents a Account deleted event event.
type accountdeletedEvent struct {
	Event
	Entity *Account `json:"entity"`
}

// NewaccountdeletedEvent creates a new accountdeleted event.
func NewaccountdeletedEvent(entity *Account) *accountdeletedEvent {
	return &accountdeletedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      Eventaccountdeleted,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// accountlinkedEvent represents a Account linked event event.
type accountlinkedEvent struct {
	Event
	Entity *Account `json:"entity"`
}

// NewaccountlinkedEvent creates a new accountlinked event.
func NewaccountlinkedEvent(entity *Account) *accountlinkedEvent {
	return &accountlinkedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      Eventaccountlinked,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// accountunlinkedEvent represents a Account unlinked event event.
type accountunlinkedEvent struct {
	Event
	Entity *Account `json:"entity"`
}

// NewaccountunlinkedEvent creates a new accountunlinked event.
func NewaccountunlinkedEvent(entity *Account) *accountunlinkedEvent {
	return &accountunlinkedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      Eventaccountunlinked,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// sessioncreatedEvent represents a Session created event event.
type sessioncreatedEvent struct {
	Event
	Entity *Session `json:"entity"`
}

// NewsessioncreatedEvent creates a new sessioncreated event.
func NewsessioncreatedEvent(entity *Session) *sessioncreatedEvent {
	return &sessioncreatedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      Eventsessioncreated,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// sessionrefreshedEvent represents a Session refreshed event event.
type sessionrefreshedEvent struct {
	Event
	Entity *Session `json:"entity"`
}

// NewsessionrefreshedEvent creates a new sessionrefreshed event.
func NewsessionrefreshedEvent(entity *Session) *sessionrefreshedEvent {
	return &sessionrefreshedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      Eventsessionrefreshed,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// sessionexpiredEvent represents a Session expired event event.
type sessionexpiredEvent struct {
	Event
	Entity *Session `json:"entity"`
}

// NewsessionexpiredEvent creates a new sessionexpired event.
func NewsessionexpiredEvent(entity *Session) *sessionexpiredEvent {
	return &sessionexpiredEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      Eventsessionexpired,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// sessiondeletedEvent represents a Session deleted event event.
type sessiondeletedEvent struct {
	Event
	Entity *Session `json:"entity"`
}

// NewsessiondeletedEvent creates a new sessiondeleted event.
func NewsessiondeletedEvent(entity *Session) *sessiondeletedEvent {
	return &sessiondeletedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      Eventsessiondeleted,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// usercreatedEvent represents a User created event event.
type usercreatedEvent struct {
	Event
	Entity *User `json:"entity"`
}

// NewusercreatedEvent creates a new usercreated event.
func NewusercreatedEvent(entity *User) *usercreatedEvent {
	return &usercreatedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      Eventusercreated,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// userupdatedEvent represents a User updated event event.
type userupdatedEvent struct {
	Event
	Entity *User `json:"entity"`
}

// NewuserupdatedEvent creates a new userupdated event.
func NewuserupdatedEvent(entity *User) *userupdatedEvent {
	return &userupdatedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      Eventuserupdated,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// userdeletedEvent represents a User deleted event event.
type userdeletedEvent struct {
	Event
	Entity *User `json:"entity"`
}

// NewuserdeletedEvent creates a new userdeleted event.
func NewuserdeletedEvent(entity *User) *userdeletedEvent {
	return &userdeletedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      Eventuserdeleted,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// useremailVerifiedEvent represents a User email_verified event event.
type useremailVerifiedEvent struct {
	Event
	Entity *User `json:"entity"`
}

// NewuseremailVerifiedEvent creates a new useremailVerified event.
func NewuseremailVerifiedEvent(entity *User) *useremailVerifiedEvent {
	return &useremailVerifiedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventuseremailVerified,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}
