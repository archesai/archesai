// Code generated by codegen events. DO NOT EDIT.
package auth

import (
	"context"
	"github.com/google/uuid"
	"time"
)

// EventType represents the type of event.
type EventType string

// Event types for auth domain.
const (
	EventAccountCreated   EventType = "account.created"
	EventAccountUpdated   EventType = "account.updated"
	EventAccountDeleted   EventType = "account.deleted"
	EventAccountLinked    EventType = "account.linked"
	EventAccountUnlinked  EventType = "account.unlinked"
	EventSessionCreated   EventType = "session.created"
	EventSessionRefreshed EventType = "session.refreshed"
	EventSessionExpired   EventType = "session.expired"
	EventSessionDeleted   EventType = "session.deleted"
)

// Event represents a domain event.
type Event struct {
	ID        string            `json:"id"`
	Type      EventType         `json:"type"`
	Timestamp time.Time         `json:"timestamp"`
	Source    string            `json:"source"`
	Data      interface{}       `json:"data"`
	Metadata  map[string]string `json:"metadata,omitempty"`
}

// EventPublisher publishes domain events.
type EventPublisher interface {
	// PublishAccountCreated publishes a created event event for Account.
	PublishAccountCreated(ctx context.Context, entity *Account) error
	// PublishAccountUpdated publishes a updated event event for Account.
	PublishAccountUpdated(ctx context.Context, entity *Account) error
	// PublishAccountDeleted publishes a deleted event event for Account.
	PublishAccountDeleted(ctx context.Context, entity *Account) error
	// PublishAccountLinked publishes a linked event event for Account.
	PublishAccountLinked(ctx context.Context, entity *Account) error
	// PublishAccountUnlinked publishes a unlinked event event for Account.
	PublishAccountUnlinked(ctx context.Context, entity *Account) error
	// PublishSessionCreated publishes a created event event for Session.
	PublishSessionCreated(ctx context.Context, entity *Session) error
	// PublishSessionRefreshed publishes a refreshed event event for Session.
	PublishSessionRefreshed(ctx context.Context, entity *Session) error
	// PublishSessionExpired publishes a expired event event for Session.
	PublishSessionExpired(ctx context.Context, entity *Session) error
	// PublishSessionDeleted publishes a deleted event event for Session.
	PublishSessionDeleted(ctx context.Context, entity *Session) error

	// PublishRaw publishes a raw event.
	PublishRaw(ctx context.Context, event *Event) error
}

// NoOpEventPublisher is a no-op event publisher implementation.
type NoOpEventPublisher struct{}

// NewNoOpEventPublisher creates a new no-op event publisher.
func NewNoOpEventPublisher() EventPublisher {
	return &NoOpEventPublisher{}
}

// PublishAccountCreated does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishAccountCreated(ctx context.Context, entity *Account) error {
	return nil
}

// PublishAccountUpdated does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishAccountUpdated(ctx context.Context, entity *Account) error {
	return nil
}

// PublishAccountDeleted does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishAccountDeleted(ctx context.Context, entity *Account) error {
	return nil
}

// PublishAccountLinked does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishAccountLinked(ctx context.Context, entity *Account) error {
	return nil
}

// PublishAccountUnlinked does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishAccountUnlinked(ctx context.Context, entity *Account) error {
	return nil
}

// PublishSessionCreated does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishSessionCreated(ctx context.Context, entity *Session) error {
	return nil
}

// PublishSessionRefreshed does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishSessionRefreshed(ctx context.Context, entity *Session) error {
	return nil
}

// PublishSessionExpired does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishSessionExpired(ctx context.Context, entity *Session) error {
	return nil
}

// PublishSessionDeleted does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishSessionDeleted(ctx context.Context, entity *Session) error {
	return nil
}

// PublishRaw does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishRaw(ctx context.Context, event *Event) error {
	return nil
}

// AccountCreatedEvent represents a created event event for Account.
type AccountCreatedEvent struct {
	Event
	Entity *Account `json:"entity"`
}

// NewAccountCreatedEvent creates a new Account created event.
func NewAccountCreatedEvent(entity *Account) *AccountCreatedEvent {
	return &AccountCreatedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventAccountCreated,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// AccountUpdatedEvent represents a updated event event for Account.
type AccountUpdatedEvent struct {
	Event
	Entity *Account `json:"entity"`
}

// NewAccountUpdatedEvent creates a new Account updated event.
func NewAccountUpdatedEvent(entity *Account) *AccountUpdatedEvent {
	return &AccountUpdatedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventAccountUpdated,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// AccountDeletedEvent represents a deleted event event for Account.
type AccountDeletedEvent struct {
	Event
	Entity *Account `json:"entity"`
}

// NewAccountDeletedEvent creates a new Account deleted event.
func NewAccountDeletedEvent(entity *Account) *AccountDeletedEvent {
	return &AccountDeletedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventAccountDeleted,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// AccountLinkedEvent represents a linked event event for Account.
type AccountLinkedEvent struct {
	Event
	Entity *Account `json:"entity"`
}

// NewAccountLinkedEvent creates a new Account linked event.
func NewAccountLinkedEvent(entity *Account) *AccountLinkedEvent {
	return &AccountLinkedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventAccountLinked,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// AccountUnlinkedEvent represents a unlinked event event for Account.
type AccountUnlinkedEvent struct {
	Event
	Entity *Account `json:"entity"`
}

// NewAccountUnlinkedEvent creates a new Account unlinked event.
func NewAccountUnlinkedEvent(entity *Account) *AccountUnlinkedEvent {
	return &AccountUnlinkedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventAccountUnlinked,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// SessionCreatedEvent represents a created event event for Session.
type SessionCreatedEvent struct {
	Event
	Entity *Session `json:"entity"`
}

// NewSessionCreatedEvent creates a new Session created event.
func NewSessionCreatedEvent(entity *Session) *SessionCreatedEvent {
	return &SessionCreatedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventSessionCreated,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// SessionRefreshedEvent represents a refreshed event event for Session.
type SessionRefreshedEvent struct {
	Event
	Entity *Session `json:"entity"`
}

// NewSessionRefreshedEvent creates a new Session refreshed event.
func NewSessionRefreshedEvent(entity *Session) *SessionRefreshedEvent {
	return &SessionRefreshedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventSessionRefreshed,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// SessionExpiredEvent represents a expired event event for Session.
type SessionExpiredEvent struct {
	Event
	Entity *Session `json:"entity"`
}

// NewSessionExpiredEvent creates a new Session expired event.
func NewSessionExpiredEvent(entity *Session) *SessionExpiredEvent {
	return &SessionExpiredEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventSessionExpired,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}

// SessionDeletedEvent represents a deleted event event for Session.
type SessionDeletedEvent struct {
	Event
	Entity *Session `json:"entity"`
}

// NewSessionDeletedEvent creates a new Session deleted event.
func NewSessionDeletedEvent(entity *Session) *SessionDeletedEvent {
	return &SessionDeletedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventSessionDeleted,
			Timestamp: time.Now().UTC(),
			Source:    "auth",
			Data:      entity,
		},
		Entity: entity,
	}
}
