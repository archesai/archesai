// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package auth

import (
	"context"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSessionsRepository creates a new instance of MockSessionsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSessionsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSessionsRepository {
	mock := &MockSessionsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSessionsRepository is an autogenerated mock type for the SessionsRepository type
type MockSessionsRepository struct {
	mock.Mock
}

type MockSessionsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSessionsRepository) EXPECT() *MockSessionsRepository_Expecter {
	return &MockSessionsRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockSessionsRepository
func (_mock *MockSessionsRepository) Create(ctx context.Context, entity *SessionEntity) (*SessionEntity, error) {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *SessionEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *SessionEntity) (*SessionEntity, error)); ok {
		return returnFunc(ctx, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *SessionEntity) *SessionEntity); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SessionEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *SessionEntity) error); ok {
		r1 = returnFunc(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionsRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockSessionsRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *SessionEntity
func (_e *MockSessionsRepository_Expecter) Create(ctx interface{}, entity interface{}) *MockSessionsRepository_Create_Call {
	return &MockSessionsRepository_Create_Call{Call: _e.mock.On("Create", ctx, entity)}
}

func (_c *MockSessionsRepository_Create_Call) Run(run func(ctx context.Context, entity *SessionEntity)) *MockSessionsRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *SessionEntity
		if args[1] != nil {
			arg1 = args[1].(*SessionEntity)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionsRepository_Create_Call) Return(sessionEntity *SessionEntity, err error) *MockSessionsRepository_Create_Call {
	_c.Call.Return(sessionEntity, err)
	return _c
}

func (_c *MockSessionsRepository_Create_Call) RunAndReturn(run func(ctx context.Context, entity *SessionEntity) (*SessionEntity, error)) *MockSessionsRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockSessionsRepository
func (_mock *MockSessionsRepository) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionsRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockSessionsRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockSessionsRepository_Expecter) Delete(ctx interface{}, id interface{}) *MockSessionsRepository_Delete_Call {
	return &MockSessionsRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *MockSessionsRepository_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockSessionsRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionsRepository_Delete_Call) Return(err error) *MockSessionsRepository_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionsRepository_Delete_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockSessionsRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByToken provides a mock function for the type MockSessionsRepository
func (_mock *MockSessionsRepository) DeleteByToken(ctx context.Context, token string) error {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionsRepository_DeleteByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByToken'
type MockSessionsRepository_DeleteByToken_Call struct {
	*mock.Call
}

// DeleteByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockSessionsRepository_Expecter) DeleteByToken(ctx interface{}, token interface{}) *MockSessionsRepository_DeleteByToken_Call {
	return &MockSessionsRepository_DeleteByToken_Call{Call: _e.mock.On("DeleteByToken", ctx, token)}
}

func (_c *MockSessionsRepository_DeleteByToken_Call) Run(run func(ctx context.Context, token string)) *MockSessionsRepository_DeleteByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionsRepository_DeleteByToken_Call) Return(err error) *MockSessionsRepository_DeleteByToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionsRepository_DeleteByToken_Call) RunAndReturn(run func(ctx context.Context, token string) error) *MockSessionsRepository_DeleteByToken_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByUser provides a mock function for the type MockSessionsRepository
func (_mock *MockSessionsRepository) DeleteByUser(ctx context.Context, userID uuid.UUID) error {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionsRepository_DeleteByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByUser'
type MockSessionsRepository_DeleteByUser_Call struct {
	*mock.Call
}

// DeleteByUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uuid.UUID
func (_e *MockSessionsRepository_Expecter) DeleteByUser(ctx interface{}, userID interface{}) *MockSessionsRepository_DeleteByUser_Call {
	return &MockSessionsRepository_DeleteByUser_Call{Call: _e.mock.On("DeleteByUser", ctx, userID)}
}

func (_c *MockSessionsRepository_DeleteByUser_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *MockSessionsRepository_DeleteByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionsRepository_DeleteByUser_Call) Return(err error) *MockSessionsRepository_DeleteByUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionsRepository_DeleteByUser_Call) RunAndReturn(run func(ctx context.Context, userID uuid.UUID) error) *MockSessionsRepository_DeleteByUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteExpired provides a mock function for the type MockSessionsRepository
func (_mock *MockSessionsRepository) DeleteExpired(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExpired")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSessionsRepository_DeleteExpired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteExpired'
type MockSessionsRepository_DeleteExpired_Call struct {
	*mock.Call
}

// DeleteExpired is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSessionsRepository_Expecter) DeleteExpired(ctx interface{}) *MockSessionsRepository_DeleteExpired_Call {
	return &MockSessionsRepository_DeleteExpired_Call{Call: _e.mock.On("DeleteExpired", ctx)}
}

func (_c *MockSessionsRepository_DeleteExpired_Call) Run(run func(ctx context.Context)) *MockSessionsRepository_DeleteExpired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSessionsRepository_DeleteExpired_Call) Return(err error) *MockSessionsRepository_DeleteExpired_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSessionsRepository_DeleteExpired_Call) RunAndReturn(run func(ctx context.Context) error) *MockSessionsRepository_DeleteExpired_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockSessionsRepository
func (_mock *MockSessionsRepository) Get(ctx context.Context, id uuid.UUID) (*SessionEntity, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *SessionEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*SessionEntity, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *SessionEntity); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SessionEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionsRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockSessionsRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockSessionsRepository_Expecter) Get(ctx interface{}, id interface{}) *MockSessionsRepository_Get_Call {
	return &MockSessionsRepository_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockSessionsRepository_Get_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockSessionsRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionsRepository_Get_Call) Return(sessionEntity *SessionEntity, err error) *MockSessionsRepository_Get_Call {
	_c.Call.Return(sessionEntity, err)
	return _c
}

func (_c *MockSessionsRepository_Get_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*SessionEntity, error)) *MockSessionsRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetByToken provides a mock function for the type MockSessionsRepository
func (_mock *MockSessionsRepository) GetByToken(ctx context.Context, token string) (*SessionEntity, error) {
	ret := _mock.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetByToken")
	}

	var r0 *SessionEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*SessionEntity, error)); ok {
		return returnFunc(ctx, token)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *SessionEntity); ok {
		r0 = returnFunc(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SessionEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionsRepository_GetByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByToken'
type MockSessionsRepository_GetByToken_Call struct {
	*mock.Call
}

// GetByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *MockSessionsRepository_Expecter) GetByToken(ctx interface{}, token interface{}) *MockSessionsRepository_GetByToken_Call {
	return &MockSessionsRepository_GetByToken_Call{Call: _e.mock.On("GetByToken", ctx, token)}
}

func (_c *MockSessionsRepository_GetByToken_Call) Run(run func(ctx context.Context, token string)) *MockSessionsRepository_GetByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionsRepository_GetByToken_Call) Return(sessionEntity *SessionEntity, err error) *MockSessionsRepository_GetByToken_Call {
	_c.Call.Return(sessionEntity, err)
	return _c
}

func (_c *MockSessionsRepository_GetByToken_Call) RunAndReturn(run func(ctx context.Context, token string) (*SessionEntity, error)) *MockSessionsRepository_GetByToken_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockSessionsRepository
func (_mock *MockSessionsRepository) List(ctx context.Context, params ListSessionsParams) ([]*SessionEntity, int64, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*SessionEntity
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ListSessionsParams) ([]*SessionEntity, int64, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ListSessionsParams) []*SessionEntity); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*SessionEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ListSessionsParams) int64); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, ListSessionsParams) error); ok {
		r2 = returnFunc(ctx, params)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockSessionsRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockSessionsRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - params ListSessionsParams
func (_e *MockSessionsRepository_Expecter) List(ctx interface{}, params interface{}) *MockSessionsRepository_List_Call {
	return &MockSessionsRepository_List_Call{Call: _e.mock.On("List", ctx, params)}
}

func (_c *MockSessionsRepository_List_Call) Run(run func(ctx context.Context, params ListSessionsParams)) *MockSessionsRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ListSessionsParams
		if args[1] != nil {
			arg1 = args[1].(ListSessionsParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockSessionsRepository_List_Call) Return(sessionEntitys []*SessionEntity, n int64, err error) *MockSessionsRepository_List_Call {
	_c.Call.Return(sessionEntitys, n, err)
	return _c
}

func (_c *MockSessionsRepository_List_Call) RunAndReturn(run func(ctx context.Context, params ListSessionsParams) ([]*SessionEntity, int64, error)) *MockSessionsRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockSessionsRepository
func (_mock *MockSessionsRepository) Update(ctx context.Context, id uuid.UUID, entity *SessionEntity) (*SessionEntity, error) {
	ret := _mock.Called(ctx, id, entity)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *SessionEntity
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *SessionEntity) (*SessionEntity, error)); ok {
		return returnFunc(ctx, id, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *SessionEntity) *SessionEntity); ok {
		r0 = returnFunc(ctx, id, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*SessionEntity)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *SessionEntity) error); ok {
		r1 = returnFunc(ctx, id, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSessionsRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockSessionsRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - entity *SessionEntity
func (_e *MockSessionsRepository_Expecter) Update(ctx interface{}, id interface{}, entity interface{}) *MockSessionsRepository_Update_Call {
	return &MockSessionsRepository_Update_Call{Call: _e.mock.On("Update", ctx, id, entity)}
}

func (_c *MockSessionsRepository_Update_Call) Run(run func(ctx context.Context, id uuid.UUID, entity *SessionEntity)) *MockSessionsRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *SessionEntity
		if args[2] != nil {
			arg2 = args[2].(*SessionEntity)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSessionsRepository_Update_Call) Return(sessionEntity *SessionEntity, err error) *MockSessionsRepository_Update_Call {
	_c.Call.Return(sessionEntity, err)
	return _c
}

func (_c *MockSessionsRepository_Update_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, entity *SessionEntity) (*SessionEntity, error)) *MockSessionsRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
