# yaml-language-server: $schema=https://raw.githubusercontent.com/oapi-codegen/oapi-codegen/HEAD/configuration-schema.json
package: auth
output: handler_http.gen.go
generate:
  echo-server: true
  strict-server: true
output-options:
  include-tags:
    - Auth
    - Users
    - Sessions
    - Accounts
# // // Code generated by codegen repository. DO NOT EDIT.
# // package auth

# // import (
# // 	"context"
# // 	"fmt"
# // 	"github.com/google/uuid"
# // )

# // // Repository provides data access operations for auth domain.
# // type Repository interface {

# // 	// User operations
# // 	CreateUser(ctx context.Context, entity *UserEntity) (*UserEntity, error)
# // 	GetUserByID(ctx context.Context, id uuid.UUID) (*UserEntity, error)
# // 	UpdateUser(ctx context.Context, id uuid.UUID, entity *UserEntity) (*UserEntity, error)
# // 	DeleteUser(ctx context.Context, id uuid.UUID) error
# // 	ListUsers(ctx context.Context, params ListUsersParams) ([]*UserEntity, int64, error)

# // 	// Additional User operations
# // 	GetUserByEmail(ctx context.Context, email string) (*UserEntity, error)

# // 	// Session operations
# // 	CreateSession(ctx context.Context, entity *SessionEntity) (*SessionEntity, error)
# // 	GetSessionByID(ctx context.Context, id uuid.UUID) (*SessionEntity, error)
# // 	UpdateSession(ctx context.Context, id uuid.UUID, entity *SessionEntity) (*SessionEntity, error)
# // 	DeleteSession(ctx context.Context, id uuid.UUID) error
# // 	ListSessions(ctx context.Context, params ListSessionsParams) ([]*SessionEntity, int64, error)

# // 	// Additional Session operations
# // 	GetSessionByToken(ctx context.Context, token string) (*SessionEntity, error)
# // 	DeleteSessionByToken(ctx context.Context, token string) error
# // 	DeleteUserSessions(ctx context.Context, userID uuid.UUID) error
# // 	DeleteExpiredSessions(ctx context.Context) error

# // 	// Account operations
# // 	CreateAccount(ctx context.Context, entity *AccountEntity) (*AccountEntity, error)
# // 	GetAccountByID(ctx context.Context, id uuid.UUID) (*AccountEntity, error)
# // 	UpdateAccount(ctx context.Context, id uuid.UUID, entity *AccountEntity) (*AccountEntity, error)
# // 	DeleteAccount(ctx context.Context, id uuid.UUID) error
# // 	ListAccounts(ctx context.Context, params ListAccountsParams) ([]*AccountEntity, int64, error)

# // 	// Additional Account operations
# // 	GetAccountByProviderID(ctx context.Context, provider, providerID string) (*AccountEntity, error)
# // 	ListUserAccounts(ctx context.Context, userID uuid.UUID) ([]*AccountEntity, error)
# // }

# // // ListUsersParams represents parameters for listing users.
# // type ListUsersParams struct {
# // 	Limit  int
# // 	Offset int
# // 	Email  *string
# // 	Name   *string
# // }

# // // ListSessionsParams represents parameters for listing sessions.
# // type ListSessionsParams struct {
# // 	Limit  int
# // 	Offset int

# // 	UserID *string
# // }

# // // ListAccountsParams represents parameters for listing accounts.
# // type ListAccountsParams struct {
# // 	Limit  int
# // 	Offset int

# // 	UserID     *uuid.UUID
# // 	ProviderID *string
# // }

# // // RepositoryError represents a repository error.
# // type RepositoryError struct {
# // 	Operation string
# // 	Err       error
# // }

# // func (e *RepositoryError) Error() string {
# // 	return fmt.Sprintf("repository %s: %v", e.Operation, e.Err)
# // }

# // func (e *RepositoryError) Unwrap() error {
# // 	return e.Err
# // }

# // // NewRepositoryError creates a new repository error.
# // func NewRepositoryError(operation string, err error) *RepositoryError {
# // 	return &RepositoryError{
# // 		Operation: operation,
# // 		Err:       err,
# // 	}
# // }
