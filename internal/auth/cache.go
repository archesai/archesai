// Code generated by codegen cache. DO NOT EDIT.
package auth

import (
	"context"
	"errors"
	"github.com/google/uuid"
	"time"
)

// Common cache errors
var (
	ErrCacheMiss = errors.New("cache miss")
	ErrCacheSet  = errors.New("cache set failed")
)

// Cache provides caching operations for auth domain.
type Cache interface {

	// User caching
	GetUser(ctx context.Context, id uuid.UUID) (*UserEntity, error)
	SetUser(ctx context.Context, entity *UserEntity, ttl time.Duration) error
	DeleteUser(ctx context.Context, id uuid.UUID) error
	GetUserByEmail(ctx context.Context, email string) (*UserEntity, error)
	SetUserByEmail(ctx context.Context, email string, entity *UserEntity, ttl time.Duration) error
	DeleteUserByEmail(ctx context.Context, email string) error

	// Session caching
	GetSession(ctx context.Context, id uuid.UUID) (*SessionEntity, error)
	SetSession(ctx context.Context, entity *SessionEntity, ttl time.Duration) error
	DeleteSession(ctx context.Context, id uuid.UUID) error

	GetSessionByToken(ctx context.Context, token string) (*SessionEntity, error)
	SetSessionByToken(ctx context.Context, token string, entity *SessionEntity, ttl time.Duration) error
	DeleteSessionByToken(ctx context.Context, token string) error
	DeleteUserSessions(ctx context.Context, userID uuid.UUID) error

	// Account caching
	GetAccount(ctx context.Context, id uuid.UUID) (*AccountEntity, error)
	SetAccount(ctx context.Context, entity *AccountEntity, ttl time.Duration) error
	DeleteAccount(ctx context.Context, id uuid.UUID) error

	// Batch operations
	FlushAll(ctx context.Context) error
}

// NoOpCache is a no-op cache implementation that always returns cache misses.
type NoOpCache struct{}

// NewNoOpCache creates a new no-op cache.
func NewNoOpCache() Cache {
	return &NoOpCache{}
}

// User no-op operations
func (c *NoOpCache) GetUser(ctx context.Context, id uuid.UUID) (*UserEntity, error) {
	return nil, ErrCacheMiss
}

func (c *NoOpCache) SetUser(ctx context.Context, entity *UserEntity, ttl time.Duration) error {
	return nil
}

func (c *NoOpCache) DeleteUser(ctx context.Context, id uuid.UUID) error {
	return nil
}

func (c *NoOpCache) GetUserByEmail(ctx context.Context, email string) (*UserEntity, error) {
	return nil, ErrCacheMiss
}

func (c *NoOpCache) SetUserByEmail(ctx context.Context, email string, entity *UserEntity, ttl time.Duration) error {
	return nil
}

func (c *NoOpCache) DeleteUserByEmail(ctx context.Context, email string) error {
	return nil
}

// Session no-op operations
func (c *NoOpCache) GetSession(ctx context.Context, id uuid.UUID) (*SessionEntity, error) {
	return nil, ErrCacheMiss
}

func (c *NoOpCache) SetSession(ctx context.Context, entity *SessionEntity, ttl time.Duration) error {
	return nil
}

func (c *NoOpCache) DeleteSession(ctx context.Context, id uuid.UUID) error {
	return nil
}

func (c *NoOpCache) GetSessionByToken(ctx context.Context, token string) (*SessionEntity, error) {
	return nil, ErrCacheMiss
}

func (c *NoOpCache) SetSessionByToken(ctx context.Context, token string, entity *SessionEntity, ttl time.Duration) error {
	return nil
}

func (c *NoOpCache) DeleteSessionByToken(ctx context.Context, token string) error {
	return nil
}

func (c *NoOpCache) DeleteUserSessions(ctx context.Context, userID uuid.UUID) error {
	return nil
}

// Account no-op operations
func (c *NoOpCache) GetAccount(ctx context.Context, id uuid.UUID) (*AccountEntity, error) {
	return nil, ErrCacheMiss
}

func (c *NoOpCache) SetAccount(ctx context.Context, entity *AccountEntity, ttl time.Duration) error {
	return nil
}

func (c *NoOpCache) DeleteAccount(ctx context.Context, id uuid.UUID) error {
	return nil
}

func (c *NoOpCache) FlushAll(ctx context.Context) error {
	return nil
}
