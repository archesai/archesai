// Code generated by codegen repository. DO NOT EDIT.
package auth

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/archesai/archesai/internal/database/postgresql"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgxpool"
)

// PostgresRepository implements Repository using PostgreSQL.
type PostgresRepository struct {
	queries *postgresql.Queries
}

// NewPostgresRepository creates a new PostgreSQL repository.
func NewPostgresRepository(db *pgxpool.Pool) Repository {
	return &PostgresRepository{
		queries: postgresql.New(db),
	}
}

// Session operations

// Create creates a new session
func (r *PostgresRepository) Create(ctx context.Context, entity *Session) (*Session, error) {
	params := postgresql.CreateSessionParams{
		ID: entity.ID,

		AuthMethod:     entity.AuthMethod,
		AuthProvider:   entity.AuthProvider,
		ExpiresAt:      entity.ExpiresAt,
		IpAddress:      entity.IpAddress,
		OrganizationID: entity.OrganizationID,
		Token:          entity.Token,
		UserAgent:      entity.UserAgent,
		UserID:         entity.UserID,
	}

	result, err := r.queries.CreateSession(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to create session: %w", err)
	}

	return mapSessionFromDB(&result), nil
}

// Get retrieves a session by ID
func (r *PostgresRepository) Get(ctx context.Context, id uuid.UUID) (*Session, error) {
	result, err := r.queries.GetSession(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrSessionNotFound
		}
		return nil, fmt.Errorf("failed to get session: %w", err)
	}

	return mapSessionFromDB(&result), nil
}

// Update updates an existing session
func (r *PostgresRepository) Update(ctx context.Context, id uuid.UUID, entity *Session) (*Session, error) {
	params := postgresql.UpdateSessionParams{
		ID: id,

		AuthMethod:   entity.AuthMethod,
		AuthProvider: entity.AuthProvider,
		ExpiresAt:    &entity.ExpiresAt,
		IpAddress:    &entity.IpAddress,
		Token:        &entity.Token,
		UserAgent:    &entity.UserAgent,
	}

	result, err := r.queries.UpdateSession(ctx, params)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrSessionNotFound
		}
		return nil, fmt.Errorf("failed to update session: %w", err)
	}

	return mapSessionFromDB(&result), nil
}

// Delete removes a session
func (r *PostgresRepository) Delete(ctx context.Context, id uuid.UUID) error {
	err := r.queries.DeleteSession(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return ErrSessionNotFound
		}
		return fmt.Errorf("failed to delete session: %w", err)
	}
	return nil
}

// List returns a paginated list of sessions
func (r *PostgresRepository) List(ctx context.Context, params ListSessionsParams) ([]*Session, int64, error) {
	// Calculate offset from page
	offset := int32(0)
	limit := int32(10) // default

	// Check if params has Page field with Number and Size
	if params.Page != nil && params.Page.Number > 0 && params.Page.Size > 0 {
		offset = int32((params.Page.Number - 1) * params.Page.Size)
		limit = int32(params.Page.Size)
	}

	listParams := postgresql.ListSessionsParams{
		Limit:  limit,
		Offset: offset,
	}

	results, err := r.queries.ListSessions(ctx, listParams)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list sessions: %w", err)
	}

	items := make([]*Session, len(results))
	for i, result := range results {
		items[i] = mapSessionFromDB(&result)
	}

	// For now, return the count as the length of results
	// In production, you'd want a separate count query
	count := int64(len(results))

	return items, count, nil
}

// Additional methods

// Mapper functions - Convert between domain types and database types

func mapSessionFromDB(db *postgresql.Session) *Session {
	if db == nil {
		return nil
	}

	result := &Session{
		ID:        db.ID,
		CreatedAt: db.CreatedAt,
		UpdatedAt: db.UpdatedAt,

		AuthMethod: db.AuthMethod,

		AuthProvider: db.AuthProvider,

		ExpiresAt: db.ExpiresAt,

		IpAddress: db.IpAddress,

		OrganizationID: db.OrganizationID,

		Token: db.Token,

		UserAgent: db.UserAgent,

		UserID: db.UserID,
	}

	return result
}
