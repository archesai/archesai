// Code generated by codegen repository. DO NOT EDIT.
package auth

import (
	"context"
	"fmt"
	"github.com/google/uuid"
)

// Repository provides data access operations for auth domain.
type Repository interface {

	// Account operations
	CreateAccount(ctx context.Context, entity *Account) (*Account, error)
	GetAccountByID(ctx context.Context, id uuid.UUID) (*Account, error)
	UpdateAccount(ctx context.Context, id uuid.UUID, entity *Account) (*Account, error)
	DeleteAccount(ctx context.Context, id uuid.UUID) error
	ListAccounts(ctx context.Context, params ListAccountsParams) ([]*Account, int64, error)

	// Session operations
	CreateSession(ctx context.Context, entity *Session) (*Session, error)
	GetSessionByID(ctx context.Context, id uuid.UUID) (*Session, error)
	UpdateSession(ctx context.Context, id uuid.UUID, entity *Session) (*Session, error)
	DeleteSession(ctx context.Context, id uuid.UUID) error
	ListSessions(ctx context.Context, params ListSessionsParams) ([]*Session, int64, error)

	// User operations
	CreateUser(ctx context.Context, entity *User) (*User, error)
	GetUserByID(ctx context.Context, id uuid.UUID) (*User, error)
	UpdateUser(ctx context.Context, id uuid.UUID, entity *User) (*User, error)
	DeleteUser(ctx context.Context, id uuid.UUID) error
	ListUsers(ctx context.Context, params ListUsersParams) ([]*User, int64, error)
}

// ListAccountsParams represents parameters for listing accounts.
type ListAccountsParams struct {
	Limit  int
	Offset int

	UserID     *uuid.UUID
	ProviderID *string
}

// ListSessionsParams represents parameters for listing sessions.
type ListSessionsParams struct {
	Limit  int
	Offset int

	UserID *string
}

// ListUsersParams represents parameters for listing users.
type ListUsersParams struct {
	Limit  int
	Offset int
	Email  *string
	Name   *string
}

// RepositoryError represents a repository error.
type RepositoryError struct {
	Operation string
	Err       error
}

func (e *RepositoryError) Error() string {
	return fmt.Sprintf("repository %s: %v", e.Operation, e.Err)
}

func (e *RepositoryError) Unwrap() error {
	return e.Err
}

// NewRepositoryError creates a new repository error.
func NewRepositoryError(operation string, err error) *RepositoryError {
	return &RepositoryError{
		Operation: operation,
		Err:       err,
	}
}
