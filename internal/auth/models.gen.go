// Package auth provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package auth

import (
	"encoding/json"
	"time"

	"github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes    = "bearerAuth.Scopes"
	SessionCookieScopes = "sessionCookie.Scopes"
)

// Defines values for AccountEntityProviderId.
const (
	Apple     AccountEntityProviderId = "apple"
	Github    AccountEntityProviderId = "github"
	Google    AccountEntityProviderId = "google"
	Local     AccountEntityProviderId = "local"
	Microsoft AccountEntityProviderId = "microsoft"
)

// Defines values for AccountsFindManyParamsSortField.
const (
	AccountsFindManyParamsSortFieldAccessToken           AccountsFindManyParamsSortField = "accessToken"
	AccountsFindManyParamsSortFieldAccessTokenExpiresAt  AccountsFindManyParamsSortField = "accessTokenExpiresAt"
	AccountsFindManyParamsSortFieldAccountId             AccountsFindManyParamsSortField = "accountId"
	AccountsFindManyParamsSortFieldCreatedAt             AccountsFindManyParamsSortField = "createdAt"
	AccountsFindManyParamsSortFieldId                    AccountsFindManyParamsSortField = "id"
	AccountsFindManyParamsSortFieldIdToken               AccountsFindManyParamsSortField = "idToken"
	AccountsFindManyParamsSortFieldPassword              AccountsFindManyParamsSortField = "password"
	AccountsFindManyParamsSortFieldProviderId            AccountsFindManyParamsSortField = "providerId"
	AccountsFindManyParamsSortFieldRefreshToken          AccountsFindManyParamsSortField = "refreshToken"
	AccountsFindManyParamsSortFieldRefreshTokenExpiresAt AccountsFindManyParamsSortField = "refreshTokenExpiresAt"
	AccountsFindManyParamsSortFieldScope                 AccountsFindManyParamsSortField = "scope"
	AccountsFindManyParamsSortFieldUpdatedAt             AccountsFindManyParamsSortField = "updatedAt"
	AccountsFindManyParamsSortFieldUserId                AccountsFindManyParamsSortField = "userId"
)

// Defines values for AccountsFindManyParamsSortOrder.
const (
	AccountsFindManyParamsSortOrderAsc  AccountsFindManyParamsSortOrder = "asc"
	AccountsFindManyParamsSortOrderDesc AccountsFindManyParamsSortOrder = "desc"
)

// Defines values for FindManySessionsParamsSortField.
const (
	FindManySessionsParamsSortFieldActiveOrganizationId FindManySessionsParamsSortField = "activeOrganizationId"
	FindManySessionsParamsSortFieldCreatedAt            FindManySessionsParamsSortField = "createdAt"
	FindManySessionsParamsSortFieldExpiresAt            FindManySessionsParamsSortField = "expiresAt"
	FindManySessionsParamsSortFieldId                   FindManySessionsParamsSortField = "id"
	FindManySessionsParamsSortFieldIpAddress            FindManySessionsParamsSortField = "ipAddress"
	FindManySessionsParamsSortFieldToken                FindManySessionsParamsSortField = "token"
	FindManySessionsParamsSortFieldUpdatedAt            FindManySessionsParamsSortField = "updatedAt"
	FindManySessionsParamsSortFieldUserAgent            FindManySessionsParamsSortField = "userAgent"
	FindManySessionsParamsSortFieldUserId               FindManySessionsParamsSortField = "userId"
)

// Defines values for FindManySessionsParamsSortOrder.
const (
	FindManySessionsParamsSortOrderAsc  FindManySessionsParamsSortOrder = "asc"
	FindManySessionsParamsSortOrderDesc FindManySessionsParamsSortOrder = "desc"
)

// Defines values for FindManyUsersParamsSortField.
const (
	FindManyUsersParamsSortFieldCreatedAt     FindManyUsersParamsSortField = "createdAt"
	FindManyUsersParamsSortFieldEmail         FindManyUsersParamsSortField = "email"
	FindManyUsersParamsSortFieldEmailVerified FindManyUsersParamsSortField = "emailVerified"
	FindManyUsersParamsSortFieldId            FindManyUsersParamsSortField = "id"
	FindManyUsersParamsSortFieldImage         FindManyUsersParamsSortField = "image"
	FindManyUsersParamsSortFieldName          FindManyUsersParamsSortField = "name"
	FindManyUsersParamsSortFieldUpdatedAt     FindManyUsersParamsSortField = "updatedAt"
)

// Defines values for FindManyUsersParamsSortOrder.
const (
	Asc  FindManyUsersParamsSortOrder = "asc"
	Desc FindManyUsersParamsSortOrder = "desc"
)

// AccountEntity defines model for AccountEntity.
type AccountEntity struct {
	// AccessToken The OAuth access token
	AccessToken string `json:"accessToken,omitempty,omitzero" yaml:"accessToken,omitempty"`

	// AccessTokenExpiresAt The access token expiration timestamp
	AccessTokenExpiresAt time.Time `json:"accessTokenExpiresAt,omitempty,omitzero" yaml:"accessTokenExpiresAt,omitempty"`

	// AccountId The unique identifier for the account from the provider
	AccountId string `json:"accountId" yaml:"accountId"`

	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// Id Universally Unique Identifier
	Id UUID `json:"id" yaml:"id"`

	// IdToken The OpenID Connect ID token
	IdToken string `json:"idToken,omitempty,omitzero" yaml:"idToken,omitempty"`

	// Password The hashed password (only for local authentication)
	Password string `json:"password,omitempty,omitzero" yaml:"password,omitempty"`

	// ProviderId The authentication provider identifier
	ProviderId AccountEntityProviderId `json:"providerId" yaml:"providerId"`

	// RefreshToken The OAuth refresh token
	RefreshToken string `json:"refreshToken,omitempty,omitzero" yaml:"refreshToken,omitempty"`

	// RefreshTokenExpiresAt The refresh token expiration timestamp
	RefreshTokenExpiresAt time.Time `json:"refreshTokenExpiresAt,omitempty,omitzero" yaml:"refreshTokenExpiresAt,omitempty"`

	// Scope The OAuth scope granted
	Scope string `json:"scope,omitempty,omitzero" yaml:"scope,omitempty"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`

	// UserId The user ID this account belongs to
	UserId UUID `json:"userId" yaml:"userId"`
}

// AccountEntityProviderId The authentication provider identifier
type AccountEntityProviderId string

// BaseEntity defines model for BaseEntity.
type BaseEntity struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// Id Universally Unique Identifier
	Id UUID `json:"id" yaml:"id"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// Email defines model for Email.
type Email = openapi_types.Email

// FilterNode A recursive filter node that can be a condition or group
type FilterNode = interface{}

// Page Pagination (page number & size)
type Page struct {
	Number int `json:"number,omitempty,omitzero" yaml:"number,omitempty"`
	Size   int `json:"size,omitempty,omitzero" yaml:"size,omitempty"`
}

// Problem RFC 7807 (Problem Details) compliant error response
type Problem struct {
	// Detail Human-readable explanation specific to this occurrence
	Detail string `json:"detail" yaml:"detail"`

	// Errors Additional validation errors for specific fields
	Errors []ValidationError `json:"errors,omitempty,omitzero" yaml:"errors,omitempty"`

	// Instance URI identifying the specific occurrence
	Instance string `json:"instance,omitempty,omitzero" yaml:"instance,omitempty"`

	// Status HTTP status code
	Status int `json:"status" yaml:"status"`

	// Title Short, human-readable summary
	Title string `json:"title" yaml:"title"`

	// Type URI identifying the problem type
	Type string `json:"type" yaml:"type"`
}

// SessionEntity Schema for Session entity
type SessionEntity struct {
	// ActiveOrganizationId The active organization ID
	ActiveOrganizationId string `json:"activeOrganizationId" yaml:"activeOrganizationId"`

	// CreatedAt The date this item was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// ExpiresAt The expiration date of the session
	ExpiresAt string `json:"expiresAt" yaml:"expiresAt"`

	// Id The ID of the item
	Id openapi_types.UUID `json:"id" yaml:"id"`

	// IpAddress The IP address of the session
	IpAddress string `json:"ipAddress" yaml:"ipAddress"`

	// Token The session token
	Token string `json:"token" yaml:"token"`

	// UpdatedAt The date this item was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`

	// UserAgent The user agent of the session
	UserAgent string `json:"userAgent" yaml:"userAgent"`

	// UserId The ID of the user associated with the session
	UserId string `json:"userId" yaml:"userId"`
}

// UUID Universally Unique Identifier
type UUID = uuid.UUID

// UserEntity defines model for UserEntity.
type UserEntity struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// Email The user's email address
	Email Email `json:"email" yaml:"email"`

	// EmailVerified Whether the user's email has been verified
	EmailVerified bool `json:"emailVerified" yaml:"emailVerified"`

	// Id Universally Unique Identifier
	Id UUID `json:"id" yaml:"id"`

	// Image The user's avatar image URL
	Image string `json:"image,omitempty,omitzero" yaml:"image,omitempty"`

	// Name The user's display name
	Name string `json:"name" yaml:"name"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// ValidationError Individual field validation error
type ValidationError struct {
	// Field The field path that failed validation
	Field string `json:"field" yaml:"field"`

	// Message Human-readable error message
	Message string `json:"message" yaml:"message"`

	// Value The invalid value that was provided
	Value ValidationError_Value `json:"value,omitempty,omitzero" yaml:"value,omitempty"`
}

// ValidationErrorValue0 defines model for .
type ValidationErrorValue0 = string

// ValidationErrorValue1 defines model for .
type ValidationErrorValue1 = float32

// ValidationErrorValue2 defines model for .
type ValidationErrorValue2 = bool

// ValidationError_Value The invalid value that was provided
type ValidationError_Value struct {
	union json.RawMessage
}

// AccountsFilter A recursive filter node that can be a condition or group
type AccountsFilter = FilterNode

// AccountsSort defines model for AccountsSort.
type AccountsSort = []struct {
	Field string `json:"field" yaml:"field"`
	Order string `json:"order" yaml:"order"`
}

// PageQuery Pagination (page number & size)
type PageQuery = Page

// SessionsFilter A recursive filter node that can be a condition or group
type SessionsFilter = FilterNode

// SessionsSort defines model for SessionsSort.
type SessionsSort = []struct {
	Field string `json:"field" yaml:"field"`
	Order string `json:"order" yaml:"order"`
}

// UsersFilter A recursive filter node that can be a condition or group
type UsersFilter = FilterNode

// UsersSort defines model for UsersSort.
type UsersSort = []struct {
	Field string `json:"field" yaml:"field"`
	Order string `json:"order" yaml:"order"`
}

// BadRequest RFC 7807 (Problem Details) compliant error response
type BadRequest = Problem

// NotFound RFC 7807 (Problem Details) compliant error response
type NotFound = Problem

// Unauthorized RFC 7807 (Problem Details) compliant error response
type Unauthorized = Problem

// AccountsFindManyParams defines parameters for AccountsFindMany.
type AccountsFindManyParams struct {
	// Filter Filter accounts by field values. Supported fields:
	// - createdAt, id, updatedAt, accessToken, accessTokenExpiresAt
	// - accountId, idToken, password, providerId, refreshToken
	// - refreshTokenExpiresAt, scope, userId
	Filter AccountsFilter `json:"filter,omitempty,omitzero" yaml:"filter,omitempty"`

	// Page The page parameter
	Page PageQuery `form:"page,omitempty" json:"page,omitempty,omitzero" yaml:"page,omitempty"`

	// Sort The sort parameter
	Sort AccountsSort `form:"sort,omitempty" json:"sort,omitempty,omitzero" yaml:"sort,omitempty"`
}

// AccountsFindManyParamsSortField defines parameters for AccountsFindMany.
type AccountsFindManyParamsSortField string

// AccountsFindManyParamsSortOrder defines parameters for AccountsFindMany.
type AccountsFindManyParamsSortOrder string

// RequestEmailChangeJSONBody defines parameters for RequestEmailChange.
type RequestEmailChangeJSONBody struct {
	// NewEmail The e-mail to send the confirmation token to
	NewEmail openapi_types.Email `json:"newEmail" yaml:"newEmail"`

	// UserId The user ID of the user requesting the email change
	UserId openapi_types.UUID `json:"userId" yaml:"userId"`
}

// ConfirmEmailChangeJSONBody defines parameters for ConfirmEmailChange.
type ConfirmEmailChangeJSONBody struct {
	// NewEmail The e-mail to send the confirmation token to
	NewEmail openapi_types.Email `json:"newEmail" yaml:"newEmail"`

	// Token The password reset token
	Token string `json:"token" yaml:"token"`

	// UserId The user ID of the user requesting the email change
	UserId openapi_types.UUID `json:"userId" yaml:"userId"`
}

// ConfirmEmailVerificationJSONBody defines parameters for ConfirmEmailVerification.
type ConfirmEmailVerificationJSONBody struct {
	// Token The password reset token
	Token string `json:"token" yaml:"token"`
}

// LoginJSONBody defines parameters for Login.
type LoginJSONBody struct {
	// Email The email address associated with the account
	Email openapi_types.Email `json:"email" yaml:"email"`

	// Password The password for the account
	Password string `json:"password" yaml:"password"`
}

// RequestPasswordResetJSONBody defines parameters for RequestPasswordReset.
type RequestPasswordResetJSONBody struct {
	// Email The e-mail to send the password reset token to
	Email string `json:"email" yaml:"email"`
}

// ConfirmPasswordResetJSONBody defines parameters for ConfirmPasswordReset.
type ConfirmPasswordResetJSONBody struct {
	// NewPassword The new password
	NewPassword string `json:"newPassword" yaml:"newPassword"`

	// Token The password reset token
	Token string `json:"token" yaml:"token"`
}

// RegisterJSONBody defines parameters for Register.
type RegisterJSONBody struct {
	// Email The email address associated with the account
	Email openapi_types.Email `json:"email" yaml:"email"`

	// Name The name of the user creating the account
	Name string `json:"name" yaml:"name"`

	// Password The password for the account
	Password string `json:"password" yaml:"password"`
}

// FindManySessionsParams defines parameters for FindManySessions.
type FindManySessionsParams struct {
	// Filter Filter sessions by field values. Supported fields:
	// - createdAt, id, updatedAt, activeOrganizationId, expiresAt
	// - ipAddress, token, userAgent, userId
	Filter SessionsFilter `json:"filter,omitempty,omitzero" yaml:"filter,omitempty"`

	// Page The page parameter
	Page PageQuery `form:"page,omitempty" json:"page,omitempty,omitzero" yaml:"page,omitempty"`

	// Sort The sort parameter
	Sort SessionsSort `form:"sort,omitempty" json:"sort,omitempty,omitzero" yaml:"sort,omitempty"`
}

// FindManySessionsParamsSortField defines parameters for FindManySessions.
type FindManySessionsParamsSortField string

// FindManySessionsParamsSortOrder defines parameters for FindManySessions.
type FindManySessionsParamsSortOrder string

// UpdateSessionJSONBody defines parameters for UpdateSession.
type UpdateSessionJSONBody struct {
	// ActiveOrganizationId The active organization ID
	ActiveOrganizationId string `json:"activeOrganizationId" yaml:"activeOrganizationId"`
}

// FindManyUsersParams defines parameters for FindManyUsers.
type FindManyUsersParams struct {
	// Filter Filter users by field values. Supported fields:
	// - createdAt, id, updatedAt, email, emailVerified, image, name
	Filter UsersFilter `json:"filter,omitempty,omitzero" yaml:"filter,omitempty"`

	// Page The page parameter
	Page PageQuery `form:"page,omitempty" json:"page,omitempty,omitzero" yaml:"page,omitempty"`

	// Sort The sort parameter
	Sort UsersSort `form:"sort,omitempty" json:"sort,omitempty,omitzero" yaml:"sort,omitempty"`
}

// FindManyUsersParamsSortField defines parameters for FindManyUsers.
type FindManyUsersParamsSortField string

// FindManyUsersParamsSortOrder defines parameters for FindManyUsers.
type FindManyUsersParamsSortOrder string

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody struct {
	// Email The user's e-mail
	Email string `json:"email,omitempty,omitzero" yaml:"email,omitempty"`

	// Image The user's avatar image URL
	Image string `json:"image,omitempty,omitzero" yaml:"image,omitempty"`
}

// RequestEmailChangeJSONRequestBody defines body for RequestEmailChange for application/json ContentType.
type RequestEmailChangeJSONRequestBody RequestEmailChangeJSONBody

// ConfirmEmailChangeJSONRequestBody defines body for ConfirmEmailChange for application/json ContentType.
type ConfirmEmailChangeJSONRequestBody ConfirmEmailChangeJSONBody

// ConfirmEmailVerificationJSONRequestBody defines body for ConfirmEmailVerification for application/json ContentType.
type ConfirmEmailVerificationJSONRequestBody ConfirmEmailVerificationJSONBody

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody LoginJSONBody

// RequestPasswordResetJSONRequestBody defines body for RequestPasswordReset for application/json ContentType.
type RequestPasswordResetJSONRequestBody RequestPasswordResetJSONBody

// ConfirmPasswordResetJSONRequestBody defines body for ConfirmPasswordReset for application/json ContentType.
type ConfirmPasswordResetJSONRequestBody ConfirmPasswordResetJSONBody

// RegisterJSONRequestBody defines body for Register for application/json ContentType.
type RegisterJSONRequestBody RegisterJSONBody

// UpdateSessionJSONRequestBody defines body for UpdateSession for application/json ContentType.
type UpdateSessionJSONRequestBody UpdateSessionJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UpdateUserJSONBody

// AsValidationErrorValue0 returns the union data inside the ValidationError_Value as a ValidationErrorValue0
func (t ValidationError_Value) AsValidationErrorValue0() (ValidationErrorValue0, error) {
	var body ValidationErrorValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorValue0 overwrites any union data inside the ValidationError_Value as the provided ValidationErrorValue0
func (t *ValidationError_Value) FromValidationErrorValue0(v ValidationErrorValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorValue0 performs a merge with any union data inside the ValidationError_Value, using the provided ValidationErrorValue0
func (t *ValidationError_Value) MergeValidationErrorValue0(v ValidationErrorValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorValue1 returns the union data inside the ValidationError_Value as a ValidationErrorValue1
func (t ValidationError_Value) AsValidationErrorValue1() (ValidationErrorValue1, error) {
	var body ValidationErrorValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorValue1 overwrites any union data inside the ValidationError_Value as the provided ValidationErrorValue1
func (t *ValidationError_Value) FromValidationErrorValue1(v ValidationErrorValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorValue1 performs a merge with any union data inside the ValidationError_Value, using the provided ValidationErrorValue1
func (t *ValidationError_Value) MergeValidationErrorValue1(v ValidationErrorValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorValue2 returns the union data inside the ValidationError_Value as a ValidationErrorValue2
func (t ValidationError_Value) AsValidationErrorValue2() (ValidationErrorValue2, error) {
	var body ValidationErrorValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorValue2 overwrites any union data inside the ValidationError_Value as the provided ValidationErrorValue2
func (t *ValidationError_Value) FromValidationErrorValue2(v ValidationErrorValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorValue2 performs a merge with any union data inside the ValidationError_Value, using the provided ValidationErrorValue2
func (t *ValidationError_Value) MergeValidationErrorValue2(v ValidationErrorValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ValidationError_Value) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Value) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
