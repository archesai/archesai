// Code generated by codegen cache. DO NOT EDIT.
package cache

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"time"

	"github.com/archesai/archesai/internal/auth"
	"github.com/google/uuid"
	"github.com/redis/go-redis/v9"
)

// RedisCache implements Cache using Redis.
type RedisCache struct {
	client *redis.Client
	prefix string
	ttl    time.Duration
}

// NewRedisCache creates a new Redis cache.
func NewRedisCache(client *redis.Client) auth.Cache {
	prefix := "auth:"
	ttl := 5 * time.Minute

	return &RedisCache{
		client: client,
		prefix: prefix,
		ttl:    ttl,
	}
}

// NewRedisCacheWithOptions creates a new Redis cache with custom options.
func NewRedisCacheWithOptions(client *redis.Client, prefix string, ttl time.Duration) auth.Cache {
	return &RedisCache{
		client: client,
		prefix: prefix,
		ttl:    ttl,
	}
}

// Account caching operations

func (c *RedisCache) GetAccount(ctx context.Context, id uuid.UUID) (*auth.Account, error) {
	key := fmt.Sprintf("%saccount:%s", c.prefix, id.String())

	data, err := c.client.Get(ctx, key).Bytes()
	if err != nil {
		if errors.Is(err, redis.Nil) {
			return nil, auth.ErrCacheMiss
		}
		return nil, fmt.Errorf("redis get: %w", err)
	}

	var entity auth.Account
	if err := json.Unmarshal(data, &entity); err != nil {
		return nil, fmt.Errorf("unmarshal account: %w", err)
	}

	return &entity, nil
}

func (c *RedisCache) SetAccount(ctx context.Context, entity *auth.Account, ttl time.Duration) error {
	if entity == nil {
		return nil
	}

	key := fmt.Sprintf("%saccount:%s", c.prefix, entity.Id.String())

	data, err := json.Marshal(entity)
	if err != nil {
		return fmt.Errorf("marshal account: %w", err)
	}

	if ttl == 0 {
		ttl = c.ttl
	}

	if err := c.client.Set(ctx, key, data, ttl).Err(); err != nil {
		return fmt.Errorf("redis set: %w", err)
	}

	return nil
}

func (c *RedisCache) DeleteAccount(ctx context.Context, id uuid.UUID) error {
	key := fmt.Sprintf("%saccount:%s", c.prefix, id.String())

	if err := c.client.Del(ctx, key).Err(); err != nil {
		return fmt.Errorf("redis del: %w", err)
	}

	return nil
}

// Session caching operations

func (c *RedisCache) GetSession(ctx context.Context, id uuid.UUID) (*auth.Session, error) {
	key := fmt.Sprintf("%ssession:%s", c.prefix, id.String())

	data, err := c.client.Get(ctx, key).Bytes()
	if err != nil {
		if errors.Is(err, redis.Nil) {
			return nil, auth.ErrCacheMiss
		}
		return nil, fmt.Errorf("redis get: %w", err)
	}

	var entity auth.Session
	if err := json.Unmarshal(data, &entity); err != nil {
		return nil, fmt.Errorf("unmarshal session: %w", err)
	}

	return &entity, nil
}

func (c *RedisCache) SetSession(ctx context.Context, entity *auth.Session, ttl time.Duration) error {
	if entity == nil {
		return nil
	}

	key := fmt.Sprintf("%ssession:%s", c.prefix, entity.Id.String())

	data, err := json.Marshal(entity)
	if err != nil {
		return fmt.Errorf("marshal session: %w", err)
	}

	if ttl == 0 {
		ttl = c.ttl
	}

	if err := c.client.Set(ctx, key, data, ttl).Err(); err != nil {
		return fmt.Errorf("redis set: %w", err)
	}

	return nil
}

func (c *RedisCache) DeleteSession(ctx context.Context, id uuid.UUID) error {
	key := fmt.Sprintf("%ssession:%s", c.prefix, id.String())

	if err := c.client.Del(ctx, key).Err(); err != nil {
		return fmt.Errorf("redis del: %w", err)
	}

	return nil
}

// Additional Session cache operations
func (c *RedisCache) GetSessionByToken(ctx context.Context, token string) (*auth.Session, error) {
	key := fmt.Sprintf("%ssession:token:%s", c.prefix, token)

	data, err := c.client.Get(ctx, key).Bytes()
	if err != nil {
		if errors.Is(err, redis.Nil) {
			return nil, auth.ErrCacheMiss
		}
		return nil, fmt.Errorf("redis get: %w", err)
	}

	var entity auth.Session
	if err := json.Unmarshal(data, &entity); err != nil {
		return nil, fmt.Errorf("unmarshal session: %w", err)
	}

	return &entity, nil
}

func (c *RedisCache) SetSessionByToken(ctx context.Context, token string, entity *auth.Session, ttl time.Duration) error {
	if entity == nil {
		return nil
	}

	key := fmt.Sprintf("%ssession:token:%s", c.prefix, token)

	data, err := json.Marshal(entity)
	if err != nil {
		return fmt.Errorf("marshal session: %w", err)
	}

	if ttl == 0 {
		ttl = c.ttl
	}

	if err := c.client.Set(ctx, key, data, ttl).Err(); err != nil {
		return fmt.Errorf("redis set: %w", err)
	}

	// Also set by ID for consistency
	return c.SetSession(ctx, entity, ttl)
}

func (c *RedisCache) DeleteSessionByToken(ctx context.Context, token string) error {
	key := fmt.Sprintf("%ssession:token:%s", c.prefix, token)

	if err := c.client.Del(ctx, key).Err(); err != nil {
		return fmt.Errorf("redis del: %w", err)
	}

	return nil
}

func (c *RedisCache) DeleteUserSessions(ctx context.Context, userID uuid.UUID) error {
	// Use pattern to find all user sessions
	pattern := fmt.Sprintf("%ssession:user:%s:*", c.prefix, userID.String())

	// Use SCAN to find keys (more efficient than KEYS for production)
	iter := c.client.Scan(ctx, 0, pattern, 0).Iterator()
	var keys []string

	for iter.Next(ctx) {
		keys = append(keys, iter.Val())
	}

	if err := iter.Err(); err != nil {
		return fmt.Errorf("redis scan: %w", err)
	}

	if len(keys) > 0 {
		if err := c.client.Del(ctx, keys...).Err(); err != nil {
			return fmt.Errorf("redis del batch: %w", err)
		}
	}

	return nil
}

// FlushAll removes all cached items for this domain.
func (c *RedisCache) FlushAll(ctx context.Context) error {
	pattern := fmt.Sprintf("%s*", c.prefix)

	// Use SCAN to find all keys with our prefix
	iter := c.client.Scan(ctx, 0, pattern, 0).Iterator()
	var keys []string

	for iter.Next(ctx) {
		keys = append(keys, iter.Val())
	}

	if err := iter.Err(); err != nil {
		return fmt.Errorf("redis scan: %w", err)
	}

	if len(keys) > 0 {
		if err := c.client.Del(ctx, keys...).Err(); err != nil {
			return fmt.Errorf("redis del batch: %w", err)
		}
	}

	return nil
}
