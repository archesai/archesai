// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package http

import (
	"fmt"
	"net/http"

	. "github.com/archesai/archesai/internal/auth/domain"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Find many accounts
	// (GET /auth/accounts)
	AccountsFindMany(ctx echo.Context, params AccountsFindManyParams) error
	// Delete an account
	// (DELETE /auth/accounts/{id})
	AccountsDelete(ctx echo.Context, id openapi_types.UUID) error
	// Find an account
	// (GET /auth/accounts/{id})
	AccountsGetOne(ctx echo.Context, id openapi_types.UUID) error
	// Request e-mail change
	// (POST /auth/email-change/request)
	RequestEmailChange(ctx echo.Context) error
	// Verify e-mail change
	// (POST /auth/email-change/verify)
	ConfirmEmailChange(ctx echo.Context) error
	// Request e-mail verification
	// (POST /auth/email-verification/request)
	RequestEmailVerification(ctx echo.Context) error
	// Confirm e-mail verification
	// (POST /auth/email-verification/verify)
	ConfirmEmailVerification(ctx echo.Context) error
	// Request password reset
	// (POST /auth/password-reset/request)
	RequestPasswordReset(ctx echo.Context) error
	// Verify password reset
	// (POST /auth/password-reset/verify)
	ConfirmPasswordReset(ctx echo.Context) error
	// Find many sessions
	// (GET /auth/sessions)
	FindManySessions(ctx echo.Context, params FindManySessionsParams) error
	// Delete a session
	// (DELETE /auth/sessions/{id})
	DeleteSession(ctx echo.Context, id openapi_types.UUID) error
	// Find a session
	// (GET /auth/sessions/{id})
	GetOneSession(ctx echo.Context, id openapi_types.UUID) error
	// Update Session
	// (PATCH /auth/sessions/{id})
	UpdateSession(ctx echo.Context, id openapi_types.UUID) error
	// Login
	// (POST /auth/sign-in)
	Login(ctx echo.Context) error
	// Logout
	// (POST /auth/sign-out)
	Logout(ctx echo.Context) error
	// Register
	// (POST /auth/sign-up)
	Register(ctx echo.Context) error
	// Find many users
	// (GET /auth/users)
	FindManyUsers(ctx echo.Context, params FindManyUsersParams) error
	// Delete an user
	// (DELETE /auth/users/{id})
	DeleteUser(ctx echo.Context, id openapi_types.UUID) error
	// Find an user
	// (GET /auth/users/{id})
	GetOneUser(ctx echo.Context, id openapi_types.UUID) error
	// Update an user
	// (PATCH /auth/users/{id})
	UpdateUser(ctx echo.Context, id openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountsFindMany converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsFindMany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountsFindManyParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountsFindMany(ctx, params)
	return err
}

// AccountsDelete converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountsDelete(ctx, id)
	return err
}

// AccountsGetOne converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsGetOne(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountsGetOne(ctx, id)
	return err
}

// RequestEmailChange converts echo context to params.
func (w *ServerInterfaceWrapper) RequestEmailChange(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(SessionCookieScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RequestEmailChange(ctx)
	return err
}

// ConfirmEmailChange converts echo context to params.
func (w *ServerInterfaceWrapper) ConfirmEmailChange(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(SessionCookieScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConfirmEmailChange(ctx)
	return err
}

// RequestEmailVerification converts echo context to params.
func (w *ServerInterfaceWrapper) RequestEmailVerification(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RequestEmailVerification(ctx)
	return err
}

// ConfirmEmailVerification converts echo context to params.
func (w *ServerInterfaceWrapper) ConfirmEmailVerification(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(SessionCookieScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConfirmEmailVerification(ctx)
	return err
}

// RequestPasswordReset converts echo context to params.
func (w *ServerInterfaceWrapper) RequestPasswordReset(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(SessionCookieScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RequestPasswordReset(ctx)
	return err
}

// ConfirmPasswordReset converts echo context to params.
func (w *ServerInterfaceWrapper) ConfirmPasswordReset(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(SessionCookieScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConfirmPasswordReset(ctx)
	return err
}

// FindManySessions converts echo context to params.
func (w *ServerInterfaceWrapper) FindManySessions(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindManySessionsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindManySessions(ctx, params)
	return err
}

// DeleteSession converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSession(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSession(ctx, id)
	return err
}

// GetOneSession converts echo context to params.
func (w *ServerInterfaceWrapper) GetOneSession(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOneSession(ctx, id)
	return err
}

// UpdateSession converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSession(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(SessionCookieScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateSession(ctx, id)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(SessionCookieScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// Logout converts echo context to params.
func (w *ServerInterfaceWrapper) Logout(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(SessionCookieScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Logout(ctx)
	return err
}

// Register converts echo context to params.
func (w *ServerInterfaceWrapper) Register(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(SessionCookieScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Register(ctx)
	return err
}

// FindManyUsers converts echo context to params.
func (w *ServerInterfaceWrapper) FindManyUsers(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindManyUsersParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindManyUsers(ctx, params)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUser(ctx, id)
	return err
}

// GetOneUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetOneUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOneUser(ctx, id)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUser(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/auth/accounts", wrapper.AccountsFindMany)
	router.DELETE(baseURL+"/auth/accounts/:id", wrapper.AccountsDelete)
	router.GET(baseURL+"/auth/accounts/:id", wrapper.AccountsGetOne)
	router.POST(baseURL+"/auth/email-change/request", wrapper.RequestEmailChange)
	router.POST(baseURL+"/auth/email-change/verify", wrapper.ConfirmEmailChange)
	router.POST(baseURL+"/auth/email-verification/request", wrapper.RequestEmailVerification)
	router.POST(baseURL+"/auth/email-verification/verify", wrapper.ConfirmEmailVerification)
	router.POST(baseURL+"/auth/password-reset/request", wrapper.RequestPasswordReset)
	router.POST(baseURL+"/auth/password-reset/verify", wrapper.ConfirmPasswordReset)
	router.GET(baseURL+"/auth/sessions", wrapper.FindManySessions)
	router.DELETE(baseURL+"/auth/sessions/:id", wrapper.DeleteSession)
	router.GET(baseURL+"/auth/sessions/:id", wrapper.GetOneSession)
	router.PATCH(baseURL+"/auth/sessions/:id", wrapper.UpdateSession)
	router.POST(baseURL+"/auth/sign-in", wrapper.Login)
	router.POST(baseURL+"/auth/sign-out", wrapper.Logout)
	router.POST(baseURL+"/auth/sign-up", wrapper.Register)
	router.GET(baseURL+"/auth/users", wrapper.FindManyUsers)
	router.DELETE(baseURL+"/auth/users/:id", wrapper.DeleteUser)
	router.GET(baseURL+"/auth/users/:id", wrapper.GetOneUser)
	router.PATCH(baseURL+"/auth/users/:id", wrapper.UpdateUser)

}
