// Code generated by codegen repository. DO NOT EDIT.
package repository

import (
	"context"
	"errors"

	"time"

	"github.com/archesai/archesai/internal/auth"
	"github.com/archesai/archesai/internal/database/postgresql"
	"github.com/google/uuid"

	"github.com/jackc/pgx/v5"

	"github.com/jackc/pgx/v5/pgxpool"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

// PostgresRepository implements Repository using PostgreSQL.
type PostgresRepository struct {
	db      *pgxpool.Pool
	queries *postgresql.Queries
}

// NewPostgresRepository creates a new PostgreSQL repository.
func NewPostgresRepository(db *pgxpool.Pool) auth.Repository {
	return &PostgresRepository{
		db:      db,
		queries: postgresql.New(db),
	}
}

// Account operations

func (r *PostgresRepository) CreateAccount(ctx context.Context, entity *auth.Account) (*auth.Account, error) {
	// Check if SQLC has the CreateAccount method
	// For now, we'll generate a stub but with proper error handling
	// TODO: Parse SQLC to detect available queries

	// Example of what it should look like when SQLC query exists:
	// params := postgresql.CreateAccountParams{
	//     Id: entity.Id,
	//     // ... map other fields
	// }
	// dbAccount, err := r.queries.CreateAccount(ctx, params)
	// if err != nil {
	//     return nil, auth.NewRepositoryError("create", err)
	// }
	// return mapAccountToDomain(&dbAccount), nil

	return nil, auth.NewRepositoryError("create", errors.New("not implemented - SQLC query not found"))
}

func (r *PostgresRepository) GetAccount(ctx context.Context, id uuid.UUID) (*auth.Account, error) {
	// Try to call SQLC GetAccount if it exists
	// For User, Session, Account entities, SQLC usually has these queries

	dbAccount, err := r.queries.GetAccount(ctx, id)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) {
			return nil, auth.NewRepositoryError("get", auth.ErrAccountNotFound)
		}
		return nil, auth.NewRepositoryError("get", err)
	}
	return mapAccountToDomain(&dbAccount), nil

}

func (r *PostgresRepository) UpdateAccount(ctx context.Context, id uuid.UUID, entity *auth.Account) (*auth.Account, error) {
	// Update operations are often custom and may not have SQLC queries
	return nil, auth.NewRepositoryError("update", errors.New("not implemented - SQLC query not found"))
}

func (r *PostgresRepository) DeleteAccount(ctx context.Context, id uuid.UUID) error {

	err := r.queries.DeleteAccount(ctx, id)
	if err != nil {
		return auth.NewRepositoryError("delete", err)
	}
	return nil

}

func (r *PostgresRepository) ListAccounts(ctx context.Context, params auth.ListAccountsParams) ([]*auth.Account, int64, error) {
	// List operations need both List and Count queries from SQLC
	return nil, 0, auth.NewRepositoryError("list", errors.New("not implemented - SQLC query not found"))
}

// GetAccountByProviderAndProviderID retrieves an account by provider and provider account ID
func (r *PostgresRepository) GetAccountByProviderAndProviderID(ctx context.Context, provider, providerID string) (*auth.Account, error) {
	// This query might not exist in SQLC yet
	return nil, auth.NewRepositoryError("get_by_provider", errors.New("not implemented - SQLC query not found"))
}

// ListUserAccounts lists all accounts for a user
func (r *PostgresRepository) ListUserAccounts(ctx context.Context, userID uuid.UUID) ([]*auth.Account, error) {
	// This query might not exist in SQLC yet
	return nil, auth.NewRepositoryError("list_by_user", errors.New("not implemented - SQLC query not found"))
}

// Session operations

func (r *PostgresRepository) CreateSession(ctx context.Context, entity *auth.Session) (*auth.Session, error) {
	// Check if SQLC has the CreateSession method
	// For now, we'll generate a stub but with proper error handling
	// TODO: Parse SQLC to detect available queries

	// Example of what it should look like when SQLC query exists:
	// params := postgresql.CreateSessionParams{
	//     Id: entity.Id,
	//     // ... map other fields
	// }
	// dbSession, err := r.queries.CreateSession(ctx, params)
	// if err != nil {
	//     return nil, auth.NewRepositoryError("create", err)
	// }
	// return mapSessionToDomain(&dbSession), nil

	return nil, auth.NewRepositoryError("create", errors.New("not implemented - SQLC query not found"))
}

func (r *PostgresRepository) GetSession(ctx context.Context, id uuid.UUID) (*auth.Session, error) {
	// Try to call SQLC GetSession if it exists
	// For User, Session, Account entities, SQLC usually has these queries

	dbSession, err := r.queries.GetSession(ctx, id)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) {
			return nil, auth.NewRepositoryError("get", auth.ErrSessionNotFound)
		}
		return nil, auth.NewRepositoryError("get", err)
	}
	return mapSessionToDomain(&dbSession), nil

}

func (r *PostgresRepository) UpdateSession(ctx context.Context, id uuid.UUID, entity *auth.Session) (*auth.Session, error) {
	// Update operations are often custom and may not have SQLC queries
	return nil, auth.NewRepositoryError("update", errors.New("not implemented - SQLC query not found"))
}

func (r *PostgresRepository) DeleteSession(ctx context.Context, id uuid.UUID) error {

	err := r.queries.DeleteSession(ctx, id)
	if err != nil {
		return auth.NewRepositoryError("delete", err)
	}
	return nil

}

func (r *PostgresRepository) ListSessions(ctx context.Context, params auth.ListSessionsParams) ([]*auth.Session, int64, error) {
	// List operations need both List and Count queries from SQLC
	return nil, 0, auth.NewRepositoryError("list", errors.New("not implemented - SQLC query not found"))
}

// GetSessionByToken retrieves a session by token
func (r *PostgresRepository) GetSessionByToken(ctx context.Context, token string) (*auth.Session, error) {
	dbSession, err := r.queries.GetSessionByToken(ctx, token)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) {
			return nil, auth.NewRepositoryError("get_by_token", auth.ErrSessionNotFound)
		}
		return nil, auth.NewRepositoryError("get_by_token", err)
	}
	return mapSessionToDomain(&dbSession), nil
}

// DeleteSessionByToken deletes a session by token
func (r *PostgresRepository) DeleteSessionByToken(ctx context.Context, token string) error {
	// This query might not exist in SQLC yet
	return auth.NewRepositoryError("delete_by_token", errors.New("not implemented - SQLC query not found"))
}

// DeleteUserSessions deletes all sessions for a user
func (r *PostgresRepository) DeleteUserSessions(ctx context.Context, userID uuid.UUID) error {
	err := r.queries.DeleteSessionsByUser(ctx, userID)
	if err != nil {
		return auth.NewRepositoryError("delete_by_user", err)
	}
	return nil
}

// DeleteExpiredSessions deletes all expired sessions
func (r *PostgresRepository) DeleteExpiredSessions(ctx context.Context) error {
	// This query might not exist in SQLC yet
	return auth.NewRepositoryError("delete_expired", errors.New("not implemented - SQLC query not found"))
}

// Mapper functions - Convert between domain types and database types
// These need to be customized based on the actual field mappings

func mapAccountToDomain(db *postgresql.Account) *auth.Account {
	if db == nil {
		return nil
	}

	// This is a basic mapping - needs to be customized based on actual types
	// The challenge is that OpenAPI types and database types don't always match
	// For example:
	// - OpenAPI might use string, database uses *string
	// - OpenAPI might use custom UUID type, database uses uuid.UUID
	// - Field names might differ (Id vs ID)

	result := &auth.Account{
		// TODO: Map fields properly based on actual type definitions
		// This requires parsing both OpenAPI types and SQLC types
	}

	// Basic field mapping for common entities

	// Account has OAuth fields
	result.Id = uuid.UUID(db.Id)
	result.UserId = uuid.UUID(db.UserId)
	result.AccountId = db.AccountId
	result.ProviderId = auth.AccountProviderId(db.ProviderId)
	if db.AccessToken != nil {
		result.AccessToken = *db.AccessToken
	}
	if db.AccessTokenExpiresAt != nil {
		result.AccessTokenExpiresAt = *db.AccessTokenExpiresAt
	}
	if db.RefreshToken != nil {
		result.RefreshToken = *db.RefreshToken
	}
	if db.RefreshTokenExpiresAt != nil {
		result.RefreshTokenExpiresAt = *db.RefreshTokenExpiresAt
	}
	if db.Scope != nil {
		result.Scope = *db.Scope
	}
	if db.IdToken != nil {
		result.IdToken = *db.IdToken
	}
	if db.Password != nil {
		result.Password = *db.Password
	}
	result.CreatedAt = db.CreatedAt
	result.UpdatedAt = db.UpdatedAt

	return result
}

func mapSessionToDomain(db *postgresql.Session) *auth.Session {
	if db == nil {
		return nil
	}

	// This is a basic mapping - needs to be customized based on actual types
	// The challenge is that OpenAPI types and database types don't always match
	// For example:
	// - OpenAPI might use string, database uses *string
	// - OpenAPI might use custom UUID type, database uses uuid.UUID
	// - Field names might differ (Id vs ID)

	result := &auth.Session{
		// TODO: Map fields properly based on actual type definitions
		// This requires parsing both OpenAPI types and SQLC types
	}

	// Basic field mapping for common entities

	// Session typically has: Id, UserId, Token, ExpiresAt, etc.
	result.Id = openapi_types.UUID(db.Id)
	result.UserId = openapi_types.UUID(db.UserId)
	result.Token = db.Token
	result.ExpiresAt = db.ExpiresAt.Format(time.RFC3339)
	if db.ActiveOrganizationId != nil {
		result.ActiveOrganizationId = openapi_types.UUID(*db.ActiveOrganizationId)
	}
	if db.IpAddress != nil {
		result.IpAddress = *db.IpAddress
	}
	if db.UserAgent != nil {
		result.UserAgent = *db.UserAgent
	}
	result.CreatedAt = db.CreatedAt
	result.UpdatedAt = db.UpdatedAt

	return result
}
