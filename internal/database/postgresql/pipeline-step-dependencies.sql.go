// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: pipeline-step-dependencies.sql

package postgresql

import (
	"context"

	"github.com/google/uuid"
)

const checkDirectCircularDependency = `-- name: CheckDirectCircularDependency :one
SELECT
  EXISTS (
    SELECT
      1
    FROM
      pipeline_step_to_dependency
    WHERE
      pipeline_step_id = $2
      AND prerequisite_id = $1
  ) as would_create_cycle
`

type CheckDirectCircularDependencyParams struct {
	PrerequisiteId uuid.UUID
	PipelineStepId uuid.UUID
}

// Check if adding this dependency would create a direct cycle
func (q *Queries) CheckDirectCircularDependency(ctx context.Context, arg CheckDirectCircularDependencyParams) (bool, error) {
	row := q.db.QueryRow(ctx, checkDirectCircularDependency, arg.PrerequisiteId, arg.PipelineStepId)
	var would_create_cycle bool
	err := row.Scan(&would_create_cycle)
	return would_create_cycle, err
}

const createPipelineStepDependency = `-- name: CreatePipelineStepDependency :exec
INSERT INTO
  pipeline_step_to_dependency (pipeline_step_id, prerequisite_id)
VALUES
  ($1, $2)
`

type CreatePipelineStepDependencyParams struct {
	PipelineStepId uuid.UUID
	PrerequisiteId uuid.UUID
}

func (q *Queries) CreatePipelineStepDependency(ctx context.Context, arg CreatePipelineStepDependencyParams) error {
	_, err := q.db.Exec(ctx, createPipelineStepDependency, arg.PipelineStepId, arg.PrerequisiteId)
	return err
}

const deleteAllStepDependencies = `-- name: DeleteAllStepDependencies :exec
DELETE FROM pipeline_step_to_dependency
WHERE
  pipeline_step_id = $1
  OR prerequisite_id = $1
`

func (q *Queries) DeleteAllStepDependencies(ctx context.Context, pipelineStepID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAllStepDependencies, pipelineStepID)
	return err
}

const deletePipelineStepDependency = `-- name: DeletePipelineStepDependency :exec
DELETE FROM pipeline_step_to_dependency
WHERE
  pipeline_step_id = $1
  AND prerequisite_id = $2
`

type DeletePipelineStepDependencyParams struct {
	PipelineStepId uuid.UUID
	PrerequisiteId uuid.UUID
}

func (q *Queries) DeletePipelineStepDependency(ctx context.Context, arg DeletePipelineStepDependencyParams) error {
	_, err := q.db.Exec(ctx, deletePipelineStepDependency, arg.PipelineStepId, arg.PrerequisiteId)
	return err
}

const getPipelineStepDependencies = `-- name: GetPipelineStepDependencies :many
SELECT
  psd.pipeline_step_id,
  psd.prerequisite_id,
  ps.pipeline_id
FROM
  pipeline_step_to_dependency psd
  JOIN pipeline_step ps ON ps.id = psd.pipeline_step_id
WHERE
  ps.pipeline_id = $1
`

type GetPipelineStepDependenciesRow struct {
	PipelineStepId uuid.UUID
	PrerequisiteId uuid.UUID
	PipelineId     uuid.UUID
}

func (q *Queries) GetPipelineStepDependencies(ctx context.Context, pipelineID uuid.UUID) ([]GetPipelineStepDependenciesRow, error) {
	rows, err := q.db.Query(ctx, getPipelineStepDependencies, pipelineID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPipelineStepDependenciesRow
	for rows.Next() {
		var i GetPipelineStepDependenciesRow
		if err := rows.Scan(&i.PipelineStepId, &i.PrerequisiteId, &i.PipelineId); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStepDependencies = `-- name: GetStepDependencies :many
SELECT
  prerequisite_id
FROM
  pipeline_step_to_dependency
WHERE
  pipeline_step_id = $1
`

func (q *Queries) GetStepDependencies(ctx context.Context, pipelineStepID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, getStepDependencies, pipelineStepID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var prerequisite_id uuid.UUID
		if err := rows.Scan(&prerequisite_id); err != nil {
			return nil, err
		}
		items = append(items, prerequisite_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStepDependents = `-- name: GetStepDependents :many
SELECT
  pipeline_step_id
FROM
  pipeline_step_to_dependency
WHERE
  prerequisite_id = $1
`

func (q *Queries) GetStepDependents(ctx context.Context, prerequisiteID uuid.UUID) ([]uuid.UUID, error) {
	rows, err := q.db.Query(ctx, getStepDependents, prerequisiteID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []uuid.UUID
	for rows.Next() {
		var pipeline_step_id uuid.UUID
		if err := rows.Scan(&pipeline_step_id); err != nil {
			return nil, err
		}
		items = append(items, pipeline_step_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
