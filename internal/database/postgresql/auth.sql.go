// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: auth.sql

package postgresql

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO session (
    id,
    user_id,
    token,
    expires_at,
    active_organization_id,
    ip_address,
    user_agent
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, created_at, updated_at, active_organization_id, expires_at, ip_address, token, user_agent, user_id
`

type CreateSessionParams struct {
	Id                   uuid.UUID
	UserId               uuid.UUID
	Token                string
	ExpiresAt            time.Time
	ActiveOrganizationId *uuid.UUID
	IpAddress            *string
	UserAgent            *string
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.Id,
		arg.UserId,
		arg.Token,
		arg.ExpiresAt,
		arg.ActiveOrganizationId,
		arg.IpAddress,
		arg.UserAgent,
	)
	var i Session
	err := row.Scan(
		&i.Id,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ActiveOrganizationId,
		&i.ExpiresAt,
		&i.IpAddress,
		&i.Token,
		&i.UserAgent,
		&i.UserId,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM session
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const deleteSessionsByUser = `-- name: DeleteSessionsByUser :exec
DELETE FROM session
WHERE user_id = $1
`

func (q *Queries) DeleteSessionsByUser(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteSessionsByUser, userID)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, created_at, updated_at, active_organization_id, expires_at, ip_address, token, user_agent, user_id FROM session
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.Id,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ActiveOrganizationId,
		&i.ExpiresAt,
		&i.IpAddress,
		&i.Token,
		&i.UserAgent,
		&i.UserId,
	)
	return i, err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT id, created_at, updated_at, active_organization_id, expires_at, ip_address, token, user_agent, user_id FROM session
WHERE token = $1 LIMIT 1
`

func (q *Queries) GetSessionByToken(ctx context.Context, token string) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionByToken, token)
	var i Session
	err := row.Scan(
		&i.Id,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ActiveOrganizationId,
		&i.ExpiresAt,
		&i.IpAddress,
		&i.Token,
		&i.UserAgent,
		&i.UserId,
	)
	return i, err
}

const listSessions = `-- name: ListSessions :many
SELECT id, created_at, updated_at, active_organization_id, expires_at, ip_address, token, user_agent, user_id FROM session
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListSessionsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListSessions(ctx context.Context, arg ListSessionsParams) ([]Session, error) {
	rows, err := q.db.Query(ctx, listSessions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.Id,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ActiveOrganizationId,
			&i.ExpiresAt,
			&i.IpAddress,
			&i.Token,
			&i.UserAgent,
			&i.UserId,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSessionsByUser = `-- name: ListSessionsByUser :many
SELECT id, created_at, updated_at, active_organization_id, expires_at, ip_address, token, user_agent, user_id FROM session
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListSessionsByUserParams struct {
	UserId uuid.UUID
	Limit  int32
	Offset int32
}

func (q *Queries) ListSessionsByUser(ctx context.Context, arg ListSessionsByUserParams) ([]Session, error) {
	rows, err := q.db.Query(ctx, listSessionsByUser, arg.UserId, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.Id,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ActiveOrganizationId,
			&i.ExpiresAt,
			&i.IpAddress,
			&i.Token,
			&i.UserAgent,
			&i.UserId,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSession = `-- name: UpdateSession :one
UPDATE session
SET 
    expires_at = COALESCE($2, expires_at),
    active_organization_id = COALESCE($3, active_organization_id)
WHERE id = $1
RETURNING id, created_at, updated_at, active_organization_id, expires_at, ip_address, token, user_agent, user_id
`

type UpdateSessionParams struct {
	Id                   uuid.UUID
	ExpiresAt            *time.Time
	ActiveOrganizationId *uuid.UUID
}

func (q *Queries) UpdateSession(ctx context.Context, arg UpdateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, updateSession, arg.Id, arg.ExpiresAt, arg.ActiveOrganizationId)
	var i Session
	err := row.Scan(
		&i.Id,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ActiveOrganizationId,
		&i.ExpiresAt,
		&i.IpAddress,
		&i.Token,
		&i.UserAgent,
		&i.UserId,
	)
	return i, err
}
