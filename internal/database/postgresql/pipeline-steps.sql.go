// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: pipeline-steps.sql

package postgresql

import (
	"context"

	"github.com/google/uuid"
)

const createPipelineStep = `-- name: CreatePipelineStep :one
INSERT INTO pipeline_step (
    id,
    pipeline_id,
    tool_id
) VALUES (
    $1, $2, $3
)
RETURNING id, created_at, updated_at, pipeline_id, tool_id
`

type CreatePipelineStepParams struct {
	Id         uuid.UUID
	PipelineId uuid.UUID
	ToolId     uuid.UUID
}

func (q *Queries) CreatePipelineStep(ctx context.Context, arg CreatePipelineStepParams) (PipelineStep, error) {
	row := q.db.QueryRow(ctx, createPipelineStep, arg.Id, arg.PipelineId, arg.ToolId)
	var i PipelineStep
	err := row.Scan(
		&i.Id,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PipelineId,
		&i.ToolId,
	)
	return i, err
}

const deletePipelineStep = `-- name: DeletePipelineStep :exec
DELETE FROM pipeline_step
WHERE id = $1
`

func (q *Queries) DeletePipelineStep(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePipelineStep, id)
	return err
}

const deletePipelineStepsByPipeline = `-- name: DeletePipelineStepsByPipeline :exec
DELETE FROM pipeline_step
WHERE pipeline_id = $1
`

func (q *Queries) DeletePipelineStepsByPipeline(ctx context.Context, pipelineID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePipelineStepsByPipeline, pipelineID)
	return err
}

const getPipelineStep = `-- name: GetPipelineStep :one
SELECT id, created_at, updated_at, pipeline_id, tool_id FROM pipeline_step
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPipelineStep(ctx context.Context, id uuid.UUID) (PipelineStep, error) {
	row := q.db.QueryRow(ctx, getPipelineStep, id)
	var i PipelineStep
	err := row.Scan(
		&i.Id,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PipelineId,
		&i.ToolId,
	)
	return i, err
}

const listPipelineSteps = `-- name: ListPipelineSteps :many
SELECT id, created_at, updated_at, pipeline_id, tool_id FROM pipeline_step
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListPipelineStepsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListPipelineSteps(ctx context.Context, arg ListPipelineStepsParams) ([]PipelineStep, error) {
	rows, err := q.db.Query(ctx, listPipelineSteps, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PipelineStep
	for rows.Next() {
		var i PipelineStep
		if err := rows.Scan(
			&i.Id,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PipelineId,
			&i.ToolId,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPipelineStepsByPipeline = `-- name: ListPipelineStepsByPipeline :many
SELECT id, created_at, updated_at, pipeline_id, tool_id FROM pipeline_step
WHERE pipeline_id = $1
ORDER BY created_at ASC
LIMIT $2 OFFSET $3
`

type ListPipelineStepsByPipelineParams struct {
	PipelineId uuid.UUID
	Limit      int32
	Offset     int32
}

func (q *Queries) ListPipelineStepsByPipeline(ctx context.Context, arg ListPipelineStepsByPipelineParams) ([]PipelineStep, error) {
	rows, err := q.db.Query(ctx, listPipelineStepsByPipeline, arg.PipelineId, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PipelineStep
	for rows.Next() {
		var i PipelineStep
		if err := rows.Scan(
			&i.Id,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PipelineId,
			&i.ToolId,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPipelineStepsByTool = `-- name: ListPipelineStepsByTool :many
SELECT id, created_at, updated_at, pipeline_id, tool_id FROM pipeline_step
WHERE tool_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListPipelineStepsByToolParams struct {
	ToolId uuid.UUID
	Limit  int32
	Offset int32
}

func (q *Queries) ListPipelineStepsByTool(ctx context.Context, arg ListPipelineStepsByToolParams) ([]PipelineStep, error) {
	rows, err := q.db.Query(ctx, listPipelineStepsByTool, arg.ToolId, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PipelineStep
	for rows.Next() {
		var i PipelineStep
		if err := rows.Scan(
			&i.Id,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PipelineId,
			&i.ToolId,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePipelineStep = `-- name: UpdatePipelineStep :one
UPDATE pipeline_step
SET 
    tool_id = COALESCE($2, tool_id)
WHERE id = $1
RETURNING id, created_at, updated_at, pipeline_id, tool_id
`

type UpdatePipelineStepParams struct {
	Id     uuid.UUID
	ToolId *uuid.UUID
}

func (q *Queries) UpdatePipelineStep(ctx context.Context, arg UpdatePipelineStepParams) (PipelineStep, error) {
	row := q.db.QueryRow(ctx, updatePipelineStep, arg.Id, arg.ToolId)
	var i PipelineStep
	err := row.Scan(
		&i.Id,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PipelineId,
		&i.ToolId,
	)
	return i, err
}
