// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: api-tokens.sql

package postgresql

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createApiToken = `-- name: CreateApiToken :one
INSERT INTO
  api_token (
    id,
    user_id,
    organization_id,
    name,
    key_hash,
    prefix,
    scopes,
    rate_limit,
    expires_at
  )
VALUES
  ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING
  id, created_at, updated_at, expires_at, key_hash, name, prefix, user_id, organization_id, scopes, rate_limit, last_used_at
`

type CreateApiTokenParams struct {
	ID             uuid.UUID
	UserID         uuid.UUID
	OrganizationID uuid.UUID
	Name           *string
	KeyHash        string
	Prefix         *string
	Scopes         []string
	RateLimit      int32
	ExpiresAt      *time.Time
}

func (q *Queries) CreateApiToken(ctx context.Context, arg CreateApiTokenParams) (ApiToken, error) {
	row := q.db.QueryRow(ctx, createApiToken,
		arg.ID,
		arg.UserID,
		arg.OrganizationID,
		arg.Name,
		arg.KeyHash,
		arg.Prefix,
		arg.Scopes,
		arg.RateLimit,
		arg.ExpiresAt,
	)
	var i ApiToken
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.KeyHash,
		&i.Name,
		&i.Prefix,
		&i.UserID,
		&i.OrganizationID,
		&i.Scopes,
		&i.RateLimit,
		&i.LastUsedAt,
	)
	return i, err
}

const deleteApiToken = `-- name: DeleteApiToken :exec
DELETE FROM api_token
WHERE
  id = $1
`

func (q *Queries) DeleteApiToken(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteApiToken, id)
	return err
}

const deleteApiTokensByUser = `-- name: DeleteApiTokensByUser :exec
DELETE FROM api_token
WHERE
  user_id = $1
`

func (q *Queries) DeleteApiTokensByUser(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteApiTokensByUser, userID)
	return err
}

const deleteExpiredApiTokens = `-- name: DeleteExpiredApiTokens :exec
DELETE FROM api_token
WHERE
  expires_at IS NOT NULL
  AND expires_at < CURRENT_TIMESTAMP
`

func (q *Queries) DeleteExpiredApiTokens(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredApiTokens)
	return err
}

const getApiToken = `-- name: GetApiToken :one
SELECT
  id, created_at, updated_at, expires_at, key_hash, name, prefix, user_id, organization_id, scopes, rate_limit, last_used_at
FROM
  api_token
WHERE
  id = $1
LIMIT
  1
`

func (q *Queries) GetApiToken(ctx context.Context, id uuid.UUID) (ApiToken, error) {
	row := q.db.QueryRow(ctx, getApiToken, id)
	var i ApiToken
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.KeyHash,
		&i.Name,
		&i.Prefix,
		&i.UserID,
		&i.OrganizationID,
		&i.Scopes,
		&i.RateLimit,
		&i.LastUsedAt,
	)
	return i, err
}

const getApiTokenByKeyHash = `-- name: GetApiTokenByKeyHash :one
SELECT
  id, created_at, updated_at, expires_at, key_hash, name, prefix, user_id, organization_id, scopes, rate_limit, last_used_at
FROM
  api_token
WHERE
  key_hash = $1
LIMIT
  1
`

func (q *Queries) GetApiTokenByKeyHash(ctx context.Context, keyHash string) (ApiToken, error) {
	row := q.db.QueryRow(ctx, getApiTokenByKeyHash, keyHash)
	var i ApiToken
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.KeyHash,
		&i.Name,
		&i.Prefix,
		&i.UserID,
		&i.OrganizationID,
		&i.Scopes,
		&i.RateLimit,
		&i.LastUsedAt,
	)
	return i, err
}

const listApiTokens = `-- name: ListApiTokens :many
SELECT
  id, created_at, updated_at, expires_at, key_hash, name, prefix, user_id, organization_id, scopes, rate_limit, last_used_at
FROM
  api_token
ORDER BY
  created_at DESC
LIMIT
  $1
OFFSET
  $2
`

type ListApiTokensParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListApiTokens(ctx context.Context, arg ListApiTokensParams) ([]ApiToken, error) {
	rows, err := q.db.Query(ctx, listApiTokens, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApiToken
	for rows.Next() {
		var i ApiToken
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiresAt,
			&i.KeyHash,
			&i.Name,
			&i.Prefix,
			&i.UserID,
			&i.OrganizationID,
			&i.Scopes,
			&i.RateLimit,
			&i.LastUsedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listApiTokensByOrganization = `-- name: ListApiTokensByOrganization :many
SELECT
  id, created_at, updated_at, expires_at, key_hash, name, prefix, user_id, organization_id, scopes, rate_limit, last_used_at
FROM
  api_token
WHERE
  organization_id = $1
ORDER BY
  created_at DESC
LIMIT
  $2
OFFSET
  $3
`

type ListApiTokensByOrganizationParams struct {
	OrganizationID uuid.UUID
	Limit          int32
	Offset         int32
}

func (q *Queries) ListApiTokensByOrganization(ctx context.Context, arg ListApiTokensByOrganizationParams) ([]ApiToken, error) {
	rows, err := q.db.Query(ctx, listApiTokensByOrganization, arg.OrganizationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApiToken
	for rows.Next() {
		var i ApiToken
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiresAt,
			&i.KeyHash,
			&i.Name,
			&i.Prefix,
			&i.UserID,
			&i.OrganizationID,
			&i.Scopes,
			&i.RateLimit,
			&i.LastUsedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listApiTokensByUser = `-- name: ListApiTokensByUser :many
SELECT
  id, created_at, updated_at, expires_at, key_hash, name, prefix, user_id, organization_id, scopes, rate_limit, last_used_at
FROM
  api_token
WHERE
  user_id = $1
ORDER BY
  created_at DESC
LIMIT
  $2
OFFSET
  $3
`

type ListApiTokensByUserParams struct {
	UserID uuid.UUID
	Limit  int32
	Offset int32
}

func (q *Queries) ListApiTokensByUser(ctx context.Context, arg ListApiTokensByUserParams) ([]ApiToken, error) {
	rows, err := q.db.Query(ctx, listApiTokensByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ApiToken
	for rows.Next() {
		var i ApiToken
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiresAt,
			&i.KeyHash,
			&i.Name,
			&i.Prefix,
			&i.UserID,
			&i.OrganizationID,
			&i.Scopes,
			&i.RateLimit,
			&i.LastUsedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateApiToken = `-- name: UpdateApiToken :one
UPDATE api_token
SET
  name = COALESCE($1, name),
  scopes = COALESCE($2, scopes),
  rate_limit = COALESCE($3, rate_limit),
  expires_at = COALESCE($4, expires_at),
  updated_at = CURRENT_TIMESTAMP
WHERE
  id = $5
RETURNING
  id, created_at, updated_at, expires_at, key_hash, name, prefix, user_id, organization_id, scopes, rate_limit, last_used_at
`

type UpdateApiTokenParams struct {
	Name      *string
	Scopes    []string
	RateLimit *int32
	ExpiresAt *time.Time
	ID        uuid.UUID
}

func (q *Queries) UpdateApiToken(ctx context.Context, arg UpdateApiTokenParams) (ApiToken, error) {
	row := q.db.QueryRow(ctx, updateApiToken,
		arg.Name,
		arg.Scopes,
		arg.RateLimit,
		arg.ExpiresAt,
		arg.ID,
	)
	var i ApiToken
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.KeyHash,
		&i.Name,
		&i.Prefix,
		&i.UserID,
		&i.OrganizationID,
		&i.Scopes,
		&i.RateLimit,
		&i.LastUsedAt,
	)
	return i, err
}

const updateApiTokenLastUsed = `-- name: UpdateApiTokenLastUsed :exec
UPDATE api_token
SET
  last_used_at = CURRENT_TIMESTAMP
WHERE
  id = $1
`

func (q *Queries) UpdateApiTokenLastUsed(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateApiTokenLastUsed, id)
	return err
}
