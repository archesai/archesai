// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: members.sql

package postgresql

import (
	"context"

	"github.com/google/uuid"
)

const createMember = `-- name: CreateMember :one
INSERT INTO member (
    id,
    user_id,
    organization_id,
    role
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, created_at, updated_at, organization_id, role, user_id
`

type CreateMemberParams struct {
	Id             uuid.UUID
	UserId         uuid.UUID
	OrganizationId uuid.UUID
	Role           string
}

func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) (Member, error) {
	row := q.db.QueryRow(ctx, createMember,
		arg.Id,
		arg.UserId,
		arg.OrganizationId,
		arg.Role,
	)
	var i Member
	err := row.Scan(
		&i.Id,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OrganizationId,
		&i.Role,
		&i.UserId,
	)
	return i, err
}

const deleteMember = `-- name: DeleteMember :exec
DELETE FROM member
WHERE id = $1
`

func (q *Queries) DeleteMember(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteMember, id)
	return err
}

const deleteMembersByOrganization = `-- name: DeleteMembersByOrganization :exec
DELETE FROM member
WHERE organization_id = $1
`

func (q *Queries) DeleteMembersByOrganization(ctx context.Context, organizationID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteMembersByOrganization, organizationID)
	return err
}

const getMember = `-- name: GetMember :one
SELECT id, created_at, updated_at, organization_id, role, user_id FROM member
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMember(ctx context.Context, id uuid.UUID) (Member, error) {
	row := q.db.QueryRow(ctx, getMember, id)
	var i Member
	err := row.Scan(
		&i.Id,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OrganizationId,
		&i.Role,
		&i.UserId,
	)
	return i, err
}

const getMemberByUserAndOrg = `-- name: GetMemberByUserAndOrg :one
SELECT id, created_at, updated_at, organization_id, role, user_id FROM member
WHERE user_id = $1 AND organization_id = $2 LIMIT 1
`

type GetMemberByUserAndOrgParams struct {
	UserId         uuid.UUID
	OrganizationId uuid.UUID
}

func (q *Queries) GetMemberByUserAndOrg(ctx context.Context, arg GetMemberByUserAndOrgParams) (Member, error) {
	row := q.db.QueryRow(ctx, getMemberByUserAndOrg, arg.UserId, arg.OrganizationId)
	var i Member
	err := row.Scan(
		&i.Id,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OrganizationId,
		&i.Role,
		&i.UserId,
	)
	return i, err
}

const listMembers = `-- name: ListMembers :many
SELECT id, created_at, updated_at, organization_id, role, user_id FROM member
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListMembersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListMembers(ctx context.Context, arg ListMembersParams) ([]Member, error) {
	rows, err := q.db.Query(ctx, listMembers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Member
	for rows.Next() {
		var i Member
		if err := rows.Scan(
			&i.Id,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OrganizationId,
			&i.Role,
			&i.UserId,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMembersByOrganization = `-- name: ListMembersByOrganization :many
SELECT id, created_at, updated_at, organization_id, role, user_id FROM member
WHERE organization_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListMembersByOrganizationParams struct {
	OrganizationId uuid.UUID
	Limit          int32
	Offset         int32
}

func (q *Queries) ListMembersByOrganization(ctx context.Context, arg ListMembersByOrganizationParams) ([]Member, error) {
	rows, err := q.db.Query(ctx, listMembersByOrganization, arg.OrganizationId, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Member
	for rows.Next() {
		var i Member
		if err := rows.Scan(
			&i.Id,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OrganizationId,
			&i.Role,
			&i.UserId,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMembersByUser = `-- name: ListMembersByUser :many
SELECT id, created_at, updated_at, organization_id, role, user_id FROM member
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListMembersByUserParams struct {
	UserId uuid.UUID
	Limit  int32
	Offset int32
}

func (q *Queries) ListMembersByUser(ctx context.Context, arg ListMembersByUserParams) ([]Member, error) {
	rows, err := q.db.Query(ctx, listMembersByUser, arg.UserId, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Member
	for rows.Next() {
		var i Member
		if err := rows.Scan(
			&i.Id,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OrganizationId,
			&i.Role,
			&i.UserId,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMember = `-- name: UpdateMember :one
UPDATE member
SET 
    role = COALESCE($2, role),
    updated_at = NOW()
WHERE id = $1
RETURNING id, created_at, updated_at, organization_id, role, user_id
`

type UpdateMemberParams struct {
	Id   uuid.UUID
	Role *string
}

func (q *Queries) UpdateMember(ctx context.Context, arg UpdateMemberParams) (Member, error) {
	row := q.db.QueryRow(ctx, updateMember, arg.Id, arg.Role)
	var i Member
	err := row.Scan(
		&i.Id,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OrganizationId,
		&i.Role,
		&i.UserId,
	)
	return i, err
}
