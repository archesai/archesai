// Code generated by codegen adapters. DO NOT EDIT.
package organizations

import (
	"encoding/json"
	"github.com/archesai/archesai/internal/database/postgresql"
	"github.com/google/uuid"
	openapi_types "github.com/oapi-codegen/runtime/types"
	"time"
)

// Helper functions

func handleNullableString(s *string) string {
	if s == nil {
		return ""
	}
	return *s
}

func handleNullableMetadata(j *string) map[string]interface{} {
	if j == nil {
		return nil
	}
	var metadata map[string]interface{}
	if err := json.Unmarshal([]byte(*j), &metadata); err != nil {
		return nil
	}
	return metadata
}

// OrganizationDBToAPI converts postgresql.Organization to OrganizationEntity
func OrganizationDBToAPI(from *postgresql.Organization) OrganizationEntity {
	return OrganizationEntity{
		BillingEmail:     openapi_types.Email(handleNullableString(from.BillingEmail)),
		Credits:          float32(from.Credits),
		Id:               uuid.MustParse(from.Id),
		Metadata:         handleNullableMetadata(from.Metadata),
		Name:             from.Name,
		Plan:             OrganizationEntityPlan(from.Plan),
		StripeCustomerId: handleNullableString(from.StripeCustomerId),
	}
}

// MemberDBToAPI converts postgresql.Member to MemberEntity
func MemberDBToAPI(from *postgresql.Member) MemberEntity {
	return MemberEntity{
		Id:             uuid.MustParse(from.Id),
		OrganizationId: from.OrganizationId,
		Role:           MemberEntityRole(from.Role),
		UserId:         from.UserId,
	}
}

// InvitationDBToAPI converts postgresql.Invitation to InvitationEntity
func InvitationDBToAPI(from *postgresql.Invitation) InvitationEntity {
	return InvitationEntity{
		Email:          from.Email,
		ExpiresAt:      from.ExpiresAt.Format(time.RFC3339),
		Id:             uuid.MustParse(from.Id),
		InviterId:      from.InviterId,
		OrganizationId: from.OrganizationId,
		Role:           InvitationEntityRole(from.Role),
	}
}
