// Package organizations provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package organizations

import (
	"encoding/json"
	"time"

	"github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for InvitationEntityRole.
const (
	InvitationEntityRoleAdmin  InvitationEntityRole = "admin"
	InvitationEntityRoleMember InvitationEntityRole = "member"
	InvitationEntityRoleOwner  InvitationEntityRole = "owner"
)

// Defines values for MemberEntityRole.
const (
	MemberEntityRoleAdmin  MemberEntityRole = "admin"
	MemberEntityRoleMember MemberEntityRole = "member"
	MemberEntityRoleOwner  MemberEntityRole = "owner"
)

// Defines values for OrganizationEntityPlan.
const (
	BASIC     OrganizationEntityPlan = "BASIC"
	FREE      OrganizationEntityPlan = "FREE"
	PREMIUM   OrganizationEntityPlan = "PREMIUM"
	STANDARD  OrganizationEntityPlan = "STANDARD"
	UNLIMITED OrganizationEntityPlan = "UNLIMITED"
)

// Defines values for FindManyOrganizationsParamsSortField.
const (
	FindManyOrganizationsParamsSortFieldBillingEmail     FindManyOrganizationsParamsSortField = "billingEmail"
	FindManyOrganizationsParamsSortFieldCreatedAt        FindManyOrganizationsParamsSortField = "createdAt"
	FindManyOrganizationsParamsSortFieldCredits          FindManyOrganizationsParamsSortField = "credits"
	FindManyOrganizationsParamsSortFieldId               FindManyOrganizationsParamsSortField = "id"
	FindManyOrganizationsParamsSortFieldLogo             FindManyOrganizationsParamsSortField = "logo"
	FindManyOrganizationsParamsSortFieldMetadata         FindManyOrganizationsParamsSortField = "metadata"
	FindManyOrganizationsParamsSortFieldName             FindManyOrganizationsParamsSortField = "name"
	FindManyOrganizationsParamsSortFieldPlan             FindManyOrganizationsParamsSortField = "plan"
	FindManyOrganizationsParamsSortFieldSlug             FindManyOrganizationsParamsSortField = "slug"
	FindManyOrganizationsParamsSortFieldStripeCustomerId FindManyOrganizationsParamsSortField = "stripeCustomerId"
	FindManyOrganizationsParamsSortFieldUpdatedAt        FindManyOrganizationsParamsSortField = "updatedAt"
)

// Defines values for FindManyOrganizationsParamsSortOrder.
const (
	FindManyOrganizationsParamsSortOrderAsc  FindManyOrganizationsParamsSortOrder = "asc"
	FindManyOrganizationsParamsSortOrderDesc FindManyOrganizationsParamsSortOrder = "desc"
)

// Defines values for FindManyInvitationsParamsSortField.
const (
	FindManyInvitationsParamsSortFieldCreatedAt      FindManyInvitationsParamsSortField = "createdAt"
	FindManyInvitationsParamsSortFieldEmail          FindManyInvitationsParamsSortField = "email"
	FindManyInvitationsParamsSortFieldExpiresAt      FindManyInvitationsParamsSortField = "expiresAt"
	FindManyInvitationsParamsSortFieldId             FindManyInvitationsParamsSortField = "id"
	FindManyInvitationsParamsSortFieldInviterId      FindManyInvitationsParamsSortField = "inviterId"
	FindManyInvitationsParamsSortFieldOrganizationId FindManyInvitationsParamsSortField = "organizationId"
	FindManyInvitationsParamsSortFieldRole           FindManyInvitationsParamsSortField = "role"
	FindManyInvitationsParamsSortFieldStatus         FindManyInvitationsParamsSortField = "status"
	FindManyInvitationsParamsSortFieldUpdatedAt      FindManyInvitationsParamsSortField = "updatedAt"
)

// Defines values for FindManyInvitationsParamsSortOrder.
const (
	FindManyInvitationsParamsSortOrderAsc  FindManyInvitationsParamsSortOrder = "asc"
	FindManyInvitationsParamsSortOrderDesc FindManyInvitationsParamsSortOrder = "desc"
)

// Defines values for CreateInvitationJSONBodyRole.
const (
	CreateInvitationJSONBodyRoleAdmin  CreateInvitationJSONBodyRole = "admin"
	CreateInvitationJSONBodyRoleMember CreateInvitationJSONBodyRole = "member"
	CreateInvitationJSONBodyRoleOwner  CreateInvitationJSONBodyRole = "owner"
)

// Defines values for UpdateInvitationJSONBodyRole.
const (
	UpdateInvitationJSONBodyRoleAdmin  UpdateInvitationJSONBodyRole = "admin"
	UpdateInvitationJSONBodyRoleMember UpdateInvitationJSONBodyRole = "member"
	UpdateInvitationJSONBodyRoleOwner  UpdateInvitationJSONBodyRole = "owner"
)

// Defines values for FindManyMembersParamsSortField.
const (
	CreatedAt      FindManyMembersParamsSortField = "createdAt"
	Id             FindManyMembersParamsSortField = "id"
	OrganizationId FindManyMembersParamsSortField = "organizationId"
	Role           FindManyMembersParamsSortField = "role"
	UpdatedAt      FindManyMembersParamsSortField = "updatedAt"
	UserId         FindManyMembersParamsSortField = "userId"
)

// Defines values for FindManyMembersParamsSortOrder.
const (
	Asc  FindManyMembersParamsSortOrder = "asc"
	Desc FindManyMembersParamsSortOrder = "desc"
)

// Defines values for CreateMemberJSONBodyRole.
const (
	CreateMemberJSONBodyRoleAdmin  CreateMemberJSONBodyRole = "admin"
	CreateMemberJSONBodyRoleMember CreateMemberJSONBodyRole = "member"
	CreateMemberJSONBodyRoleOwner  CreateMemberJSONBodyRole = "owner"
)

// Defines values for UpdateMemberJSONBodyRole.
const (
	UpdateMemberJSONBodyRoleAdmin  UpdateMemberJSONBodyRole = "admin"
	UpdateMemberJSONBodyRoleMember UpdateMemberJSONBodyRole = "member"
	UpdateMemberJSONBodyRoleOwner  UpdateMemberJSONBodyRole = "owner"
)

// BaseEntity defines model for BaseEntity.
type BaseEntity struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// Id Universally Unique Identifier
	Id UUID `json:"id" yaml:"id"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// FilterNode A recursive filter node that can be a condition or group
type FilterNode = interface{}

// InvitationEntity Schema for Invitation entity
type InvitationEntity struct {
	// CreatedAt The date this item was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// Email The email of the invitated user
	Email string `json:"email" yaml:"email"`

	// ExpiresAt The date and time when the invitation expires
	ExpiresAt string `json:"expiresAt" yaml:"expiresAt"`

	// Id The ID of the item
	Id openapi_types.UUID `json:"id" yaml:"id"`

	// InviterId The user id of the inviter
	InviterId string `json:"inviterId" yaml:"inviterId"`

	// OrganizationId The name of the organization the token belongs to
	OrganizationId string `json:"organizationId" yaml:"organizationId"`

	// Role The role of the invitation
	Role InvitationEntityRole `json:"role" yaml:"role"`

	// Status The status of the invitation, e.g., pending, accepted, declined
	Status string `json:"status" yaml:"status"`

	// UpdatedAt The date this item was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// InvitationEntityRole The role of the invitation
type InvitationEntityRole string

// MemberEntity Schema for Member entity
type MemberEntity struct {
	// CreatedAt The date this item was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// Id The ID of the item
	Id openapi_types.UUID `json:"id" yaml:"id"`

	// OrganizationId The organization name
	OrganizationId string `json:"organizationId" yaml:"organizationId"`

	// Role The role of the member
	Role MemberEntityRole `json:"role" yaml:"role"`

	// UpdatedAt The date this item was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`

	// UserId The user id
	UserId string `json:"userId" yaml:"userId"`
}

// MemberEntityRole The role of the member
type MemberEntityRole string

// OrganizationEntity defines model for OrganizationEntity.
type OrganizationEntity struct {
	// BillingEmail Email address for billing communications
	BillingEmail openapi_types.Email `json:"billingEmail,omitempty,omitzero" yaml:"billingEmail,omitempty"`

	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// Credits Available credits for this organization
	Credits float32 `json:"credits" yaml:"credits"`

	// Id Universally Unique Identifier
	Id UUID `json:"id" yaml:"id"`

	// Logo The organization's logo URL
	Logo string `json:"logo,omitempty,omitzero" yaml:"logo,omitempty"`

	// Metadata Custom metadata in JSON format
	Metadata map[string]interface{} `json:"metadata" yaml:"metadata"`

	// Name The organization's display name
	Name string `json:"name" yaml:"name"`

	// Plan The current subscription plan
	Plan OrganizationEntityPlan `json:"plan" yaml:"plan"`

	// Slug URL-friendly unique identifier for the organization
	Slug string `json:"slug" yaml:"slug"`

	// StripeCustomerId Stripe customer identifier
	StripeCustomerId string `json:"stripeCustomerId,omitempty,omitzero" yaml:"stripeCustomerId,omitempty"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// OrganizationEntityPlan The current subscription plan
type OrganizationEntityPlan string

// Page Pagination (page number & size)
type Page struct {
	Number int `json:"number,omitempty,omitzero" yaml:"number,omitempty"`
	Size   int `json:"size,omitempty,omitzero" yaml:"size,omitempty"`
}

// Problem RFC 7807 (Problem Details) compliant error response
type Problem struct {
	// Detail Human-readable explanation specific to this occurrence
	Detail string `json:"detail" yaml:"detail"`

	// Errors Additional validation errors for specific fields
	Errors []ValidationError `json:"errors,omitempty,omitzero" yaml:"errors,omitempty"`

	// Instance URI identifying the specific occurrence
	Instance string `json:"instance,omitempty,omitzero" yaml:"instance,omitempty"`

	// Status HTTP status code
	Status int `json:"status" yaml:"status"`

	// Title Short, human-readable summary
	Title string `json:"title" yaml:"title"`

	// Type URI identifying the problem type
	Type string `json:"type" yaml:"type"`
}

// UUID Universally Unique Identifier
type UUID = uuid.UUID

// ValidationError Individual field validation error
type ValidationError struct {
	// Field The field path that failed validation
	Field string `json:"field" yaml:"field"`

	// Message Human-readable error message
	Message string `json:"message" yaml:"message"`

	// Value The invalid value that was provided
	Value ValidationError_Value `json:"value,omitempty,omitzero" yaml:"value,omitempty"`
}

// ValidationErrorValue0 defines model for .
type ValidationErrorValue0 = string

// ValidationErrorValue1 defines model for .
type ValidationErrorValue1 = float32

// ValidationErrorValue2 defines model for .
type ValidationErrorValue2 = bool

// ValidationError_Value The invalid value that was provided
type ValidationError_Value struct {
	union json.RawMessage
}

// InvitationsFilter A recursive filter node that can be a condition or group
type InvitationsFilter = FilterNode

// InvitationsSort defines model for InvitationsSort.
type InvitationsSort = []struct {
	Field string `json:"field" yaml:"field"`
	Order string `json:"order" yaml:"order"`
}

// MembersFilter A recursive filter node that can be a condition or group
type MembersFilter = FilterNode

// MembersSort defines model for MembersSort.
type MembersSort = []struct {
	Field string `json:"field" yaml:"field"`
	Order string `json:"order" yaml:"order"`
}

// OrganizationsFilter A recursive filter node that can be a condition or group
type OrganizationsFilter = FilterNode

// OrganizationsSort defines model for OrganizationsSort.
type OrganizationsSort = []struct {
	Field string `json:"field" yaml:"field"`
	Order string `json:"order" yaml:"order"`
}

// PageQuery Pagination (page number & size)
type PageQuery = Page

// BadRequest RFC 7807 (Problem Details) compliant error response
type BadRequest = Problem

// NotFound RFC 7807 (Problem Details) compliant error response
type NotFound = Problem

// Unauthorized RFC 7807 (Problem Details) compliant error response
type Unauthorized = Problem

// FindManyOrganizationsParams defines parameters for FindManyOrganizations.
type FindManyOrganizationsParams struct {
	// Filter Filter organizations by field values. Supported fields:
	// - createdAt, id, updatedAt, billingEmail, credits, logo
	// - metadata, name, plan, slug, stripeCustomerId
	Filter OrganizationsFilter `json:"filter,omitempty,omitzero" yaml:"filter,omitempty"`

	// Page The page parameter
	Page PageQuery `form:"page,omitempty" json:"page,omitempty,omitzero" yaml:"page,omitempty"`

	// Sort The sort parameter
	Sort OrganizationsSort `form:"sort,omitempty" json:"sort,omitempty,omitzero" yaml:"sort,omitempty"`
}

// FindManyOrganizationsParamsSortField defines parameters for FindManyOrganizations.
type FindManyOrganizationsParamsSortField string

// FindManyOrganizationsParamsSortOrder defines parameters for FindManyOrganizations.
type FindManyOrganizationsParamsSortOrder string

// CreateOrganizationJSONBody defines parameters for CreateOrganization.
type CreateOrganizationJSONBody struct {
	// BillingEmail The billing email to use for the organization
	BillingEmail string `json:"billingEmail" yaml:"billingEmail"`

	// OrganizationId The ID of the item
	OrganizationId openapi_types.UUID `json:"organizationId" yaml:"organizationId"`
}

// UpdateOrganizationJSONBody defines parameters for UpdateOrganization.
type UpdateOrganizationJSONBody struct {
	// BillingEmail The billing email to use for the organization
	BillingEmail string `json:"billingEmail,omitempty,omitzero" yaml:"billingEmail,omitempty"`

	// OrganizationId The ID of the item
	OrganizationId openapi_types.UUID `json:"organizationId,omitempty,omitzero" yaml:"organizationId,omitempty"`
}

// FindManyInvitationsParams defines parameters for FindManyInvitations.
type FindManyInvitationsParams struct {
	// Filter Filter invitations by field values. Supported fields:
	// - createdAt, id, updatedAt, email, expiresAt
	// - inviterId, organizationId, role, status
	Filter InvitationsFilter `json:"filter,omitempty,omitzero" yaml:"filter,omitempty"`

	// Page The page parameter
	Page PageQuery `form:"page,omitempty" json:"page,omitempty,omitzero" yaml:"page,omitempty"`

	// Sort The sort parameter
	Sort InvitationsSort `form:"sort,omitempty" json:"sort,omitempty,omitzero" yaml:"sort,omitempty"`
}

// FindManyInvitationsParamsSortField defines parameters for FindManyInvitations.
type FindManyInvitationsParamsSortField string

// FindManyInvitationsParamsSortOrder defines parameters for FindManyInvitations.
type FindManyInvitationsParamsSortOrder string

// CreateInvitationJSONBody defines parameters for CreateInvitation.
type CreateInvitationJSONBody struct {
	// Email The email of the invitated user
	Email string `json:"email" yaml:"email"`

	// Role The role of the invitation
	Role CreateInvitationJSONBodyRole `json:"role" yaml:"role"`
}

// CreateInvitationJSONBodyRole defines parameters for CreateInvitation.
type CreateInvitationJSONBodyRole string

// UpdateInvitationJSONBody defines parameters for UpdateInvitation.
type UpdateInvitationJSONBody struct {
	// Email The email of the invitated user
	Email string `json:"email,omitempty,omitzero" yaml:"email,omitempty"`

	// Role The role of the invitation
	Role UpdateInvitationJSONBodyRole `json:"role,omitempty,omitzero" yaml:"role,omitempty"`
}

// UpdateInvitationJSONBodyRole defines parameters for UpdateInvitation.
type UpdateInvitationJSONBodyRole string

// FindManyMembersParams defines parameters for FindManyMembers.
type FindManyMembersParams struct {
	// Filter Filter members by field values. Supported fields:
	// - createdAt, id, updatedAt, organizationId, role, userId
	Filter MembersFilter `json:"filter,omitempty,omitzero" yaml:"filter,omitempty"`

	// Page The page parameter
	Page PageQuery `form:"page,omitempty" json:"page,omitempty,omitzero" yaml:"page,omitempty"`

	// Sort The sort parameter
	Sort MembersSort `form:"sort,omitempty" json:"sort,omitempty,omitzero" yaml:"sort,omitempty"`
}

// FindManyMembersParamsSortField defines parameters for FindManyMembers.
type FindManyMembersParamsSortField string

// FindManyMembersParamsSortOrder defines parameters for FindManyMembers.
type FindManyMembersParamsSortOrder string

// CreateMemberJSONBody defines parameters for CreateMember.
type CreateMemberJSONBody struct {
	// Role The role of the member
	Role CreateMemberJSONBodyRole `json:"role" yaml:"role"`
}

// CreateMemberJSONBodyRole defines parameters for CreateMember.
type CreateMemberJSONBodyRole string

// UpdateMemberJSONBody defines parameters for UpdateMember.
type UpdateMemberJSONBody struct {
	// Role The role of the member
	Role UpdateMemberJSONBodyRole `json:"role,omitempty,omitzero" yaml:"role,omitempty"`
}

// UpdateMemberJSONBodyRole defines parameters for UpdateMember.
type UpdateMemberJSONBodyRole string

// CreateOrganizationJSONRequestBody defines body for CreateOrganization for application/json ContentType.
type CreateOrganizationJSONRequestBody CreateOrganizationJSONBody

// UpdateOrganizationJSONRequestBody defines body for UpdateOrganization for application/json ContentType.
type UpdateOrganizationJSONRequestBody UpdateOrganizationJSONBody

// CreateInvitationJSONRequestBody defines body for CreateInvitation for application/json ContentType.
type CreateInvitationJSONRequestBody CreateInvitationJSONBody

// UpdateInvitationJSONRequestBody defines body for UpdateInvitation for application/json ContentType.
type UpdateInvitationJSONRequestBody UpdateInvitationJSONBody

// CreateMemberJSONRequestBody defines body for CreateMember for application/json ContentType.
type CreateMemberJSONRequestBody CreateMemberJSONBody

// UpdateMemberJSONRequestBody defines body for UpdateMember for application/json ContentType.
type UpdateMemberJSONRequestBody UpdateMemberJSONBody

// AsValidationErrorValue0 returns the union data inside the ValidationError_Value as a ValidationErrorValue0
func (t ValidationError_Value) AsValidationErrorValue0() (ValidationErrorValue0, error) {
	var body ValidationErrorValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorValue0 overwrites any union data inside the ValidationError_Value as the provided ValidationErrorValue0
func (t *ValidationError_Value) FromValidationErrorValue0(v ValidationErrorValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorValue0 performs a merge with any union data inside the ValidationError_Value, using the provided ValidationErrorValue0
func (t *ValidationError_Value) MergeValidationErrorValue0(v ValidationErrorValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorValue1 returns the union data inside the ValidationError_Value as a ValidationErrorValue1
func (t ValidationError_Value) AsValidationErrorValue1() (ValidationErrorValue1, error) {
	var body ValidationErrorValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorValue1 overwrites any union data inside the ValidationError_Value as the provided ValidationErrorValue1
func (t *ValidationError_Value) FromValidationErrorValue1(v ValidationErrorValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorValue1 performs a merge with any union data inside the ValidationError_Value, using the provided ValidationErrorValue1
func (t *ValidationError_Value) MergeValidationErrorValue1(v ValidationErrorValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorValue2 returns the union data inside the ValidationError_Value as a ValidationErrorValue2
func (t ValidationError_Value) AsValidationErrorValue2() (ValidationErrorValue2, error) {
	var body ValidationErrorValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorValue2 overwrites any union data inside the ValidationError_Value as the provided ValidationErrorValue2
func (t *ValidationError_Value) FromValidationErrorValue2(v ValidationErrorValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorValue2 performs a merge with any union data inside the ValidationError_Value, using the provided ValidationErrorValue2
func (t *ValidationError_Value) MergeValidationErrorValue2(v ValidationErrorValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ValidationError_Value) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Value) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
