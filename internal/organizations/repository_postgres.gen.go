// Code generated by codegen repository. DO NOT EDIT.
package organizations

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/archesai/archesai/internal/database/postgresql"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgxpool"
)

// PostgresRepository implements Repository using PostgreSQL.
type PostgresRepository struct {
	queries *postgresql.Queries
}

// NewPostgresRepository creates a new PostgreSQL repository.
func NewPostgresRepository(db *pgxpool.Pool) Repository {
	return &PostgresRepository{
		queries: postgresql.New(db),
	}
}

// Organization operations

// Create creates a new organization
func (r *PostgresRepository) Create(ctx context.Context, entity *Organization) (*Organization, error) {
	params := postgresql.CreateOrganizationParams{
		ID: entity.ID,

		BillingEmail:     entity.BillingEmail,
		Credits:          entity.Credits,
		Logo:             entity.Logo,
		Name:             entity.Name,
		Plan:             string(entity.Plan),
		Slug:             entity.Slug,
		StripeCustomerID: entity.StripeCustomerID,
	}

	result, err := r.queries.CreateOrganization(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to create organization: %w", err)
	}

	return mapOrganizationFromDB(&result), nil
}

// Get retrieves a organization by ID
func (r *PostgresRepository) Get(ctx context.Context, id uuid.UUID) (*Organization, error) {
	result, err := r.queries.GetOrganization(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrOrganizationNotFound
		}
		return nil, fmt.Errorf("failed to get organization: %w", err)
	}

	return mapOrganizationFromDB(&result), nil
}

// Update updates an existing organization
func (r *PostgresRepository) Update(ctx context.Context, id uuid.UUID, entity *Organization) (*Organization, error) {
	params := postgresql.UpdateOrganizationParams{
		ID: id,

		BillingEmail:     entity.BillingEmail,
		Credits:          &entity.Credits,
		Logo:             entity.Logo,
		Name:             &entity.Name,
		Plan:             func() *string { s := string(entity.Plan); return &s }(),
		Slug:             &entity.Slug,
		StripeCustomerID: entity.StripeCustomerID,
	}

	result, err := r.queries.UpdateOrganization(ctx, params)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrOrganizationNotFound
		}
		return nil, fmt.Errorf("failed to update organization: %w", err)
	}

	return mapOrganizationFromDB(&result), nil
}

// Delete removes a organization
func (r *PostgresRepository) Delete(ctx context.Context, id uuid.UUID) error {
	err := r.queries.DeleteOrganization(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return ErrOrganizationNotFound
		}
		return fmt.Errorf("failed to delete organization: %w", err)
	}
	return nil
}

// List returns a paginated list of organizations
func (r *PostgresRepository) List(ctx context.Context, params ListOrganizationsParams) ([]*Organization, int64, error) {
	// Calculate offset from page
	offset := int32(0)
	limit := int32(10) // default

	// Check if params has Page field with Number and Size
	if params.Page != nil && params.Page.Number > 0 && params.Page.Size > 0 {
		offset = int32((params.Page.Number - 1) * params.Page.Size)
		limit = int32(params.Page.Size)
	}

	listParams := postgresql.ListOrganizationsParams{
		Limit:  limit,
		Offset: offset,
	}

	results, err := r.queries.ListOrganizations(ctx, listParams)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list organizations: %w", err)
	}

	items := make([]*Organization, len(results))
	for i, result := range results {
		items[i] = mapOrganizationFromDB(&result)
	}

	// For now, return the count as the length of results
	// In production, you'd want a separate count query
	count := int64(len(results))

	return items, count, nil
}

// Additional methods

// GetBySlug retrieves a single organization by slug
func (r *PostgresRepository) GetBySlug(ctx context.Context, slug string) (*Organization, error) {

	// TODO: Implement GetBySlug - fetch single organization
	return nil, fmt.Errorf("GetBySlug not yet implemented")

}

// GetByStripeCustomerID retrieves a single organization by stripeCustomerID
func (r *PostgresRepository) GetByStripeCustomerID(ctx context.Context, stripeCustomerID *string) (*Organization, error) {

	// TODO: Implement GetByStripeCustomerID - fetch single organization
	return nil, fmt.Errorf("GetByStripeCustomerID not yet implemented")

}

// Mapper functions - Convert between domain types and database types

func mapOrganizationFromDB(db *postgresql.Organization) *Organization {
	if db == nil {
		return nil
	}

	result := &Organization{
		ID:        db.ID,
		CreatedAt: db.CreatedAt,
		UpdatedAt: db.UpdatedAt,

		BillingEmail: db.BillingEmail,

		Credits: db.Credits,

		Logo: db.Logo,

		Name: db.Name,

		Plan: OrganizationPlan(db.Plan),

		Slug: db.Slug,

		StripeCustomerID: db.StripeCustomerID,
	}

	return result
}
