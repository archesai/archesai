// Code generated by codegen events. DO NOT EDIT.
package organizations

import (
	"context"
	"github.com/google/uuid"
	"time"
)

// EventType represents the type of event.
type EventType string

// Event types for organizations domain.
const (
	Eventorganizationcreated        EventType = "organizationcreated"
	Eventorganizationupdated        EventType = "organizationupdated"
	Eventorganizationdeleted        EventType = "organizationdeleted"
	EventorganizationplanChanged    EventType = "organizationplan-changed"
	EventorganizationcreditsUpdated EventType = "organizationcredits-updated"
)

// Event represents a domain event.
type Event struct {
	ID        string            `json:"id"`
	Type      EventType         `json:"type"`
	Timestamp time.Time         `json:"timestamp"`
	Source    string            `json:"source"`
	Data      interface{}       `json:"data"`
	Metadata  map[string]string `json:"metadata,omitempty"`
}

// EventPublisher publishes domain events.
type EventPublisher interface {
	// Publishorganizationcreated publishes a Organization created event event.
	Publishorganizationcreated(ctx context.Context, entity *Organization) error
	// Publishorganizationupdated publishes a Organization updated event event.
	Publishorganizationupdated(ctx context.Context, entity *Organization) error
	// Publishorganizationdeleted publishes a Organization deleted event event.
	Publishorganizationdeleted(ctx context.Context, entity *Organization) error
	// PublishorganizationplanChanged publishes a Organization plan_changed event event.
	PublishorganizationplanChanged(ctx context.Context, entity *Organization) error
	// PublishorganizationcreditsUpdated publishes a Organization credits_updated event event.
	PublishorganizationcreditsUpdated(ctx context.Context, entity *Organization) error

	// PublishRaw publishes a raw event.
	PublishRaw(ctx context.Context, event *Event) error
}

// NoOpEventPublisher is a no-op event publisher implementation.
type NoOpEventPublisher struct{}

// NewNoOpEventPublisher creates a new no-op event publisher.
func NewNoOpEventPublisher() EventPublisher {
	return &NoOpEventPublisher{}
}

// Publishorganizationcreated does nothing in no-op implementation.
func (p *NoOpEventPublisher) Publishorganizationcreated(ctx context.Context, entity *Organization) error {
	return nil
}

// Publishorganizationupdated does nothing in no-op implementation.
func (p *NoOpEventPublisher) Publishorganizationupdated(ctx context.Context, entity *Organization) error {
	return nil
}

// Publishorganizationdeleted does nothing in no-op implementation.
func (p *NoOpEventPublisher) Publishorganizationdeleted(ctx context.Context, entity *Organization) error {
	return nil
}

// PublishorganizationplanChanged does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishorganizationplanChanged(ctx context.Context, entity *Organization) error {
	return nil
}

// PublishorganizationcreditsUpdated does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishorganizationcreditsUpdated(ctx context.Context, entity *Organization) error {
	return nil
}

// PublishRaw does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishRaw(ctx context.Context, event *Event) error {
	return nil
}

// organizationcreatedEvent represents a Organization created event event.
type organizationcreatedEvent struct {
	Event
	Entity *Organization `json:"entity"`
}

// NeworganizationcreatedEvent creates a new organizationcreated event.
func NeworganizationcreatedEvent(entity *Organization) *organizationcreatedEvent {
	return &organizationcreatedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      Eventorganizationcreated,
			Timestamp: time.Now().UTC(),
			Source:    "organizations",
			Data:      entity,
		},
		Entity: entity,
	}
}

// organizationupdatedEvent represents a Organization updated event event.
type organizationupdatedEvent struct {
	Event
	Entity *Organization `json:"entity"`
}

// NeworganizationupdatedEvent creates a new organizationupdated event.
func NeworganizationupdatedEvent(entity *Organization) *organizationupdatedEvent {
	return &organizationupdatedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      Eventorganizationupdated,
			Timestamp: time.Now().UTC(),
			Source:    "organizations",
			Data:      entity,
		},
		Entity: entity,
	}
}

// organizationdeletedEvent represents a Organization deleted event event.
type organizationdeletedEvent struct {
	Event
	Entity *Organization `json:"entity"`
}

// NeworganizationdeletedEvent creates a new organizationdeleted event.
func NeworganizationdeletedEvent(entity *Organization) *organizationdeletedEvent {
	return &organizationdeletedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      Eventorganizationdeleted,
			Timestamp: time.Now().UTC(),
			Source:    "organizations",
			Data:      entity,
		},
		Entity: entity,
	}
}

// organizationplanChangedEvent represents a Organization plan_changed event event.
type organizationplanChangedEvent struct {
	Event
	Entity *Organization `json:"entity"`
}

// NeworganizationplanChangedEvent creates a new organizationplanChanged event.
func NeworganizationplanChangedEvent(entity *Organization) *organizationplanChangedEvent {
	return &organizationplanChangedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventorganizationplanChanged,
			Timestamp: time.Now().UTC(),
			Source:    "organizations",
			Data:      entity,
		},
		Entity: entity,
	}
}

// organizationcreditsUpdatedEvent represents a Organization credits_updated event event.
type organizationcreditsUpdatedEvent struct {
	Event
	Entity *Organization `json:"entity"`
}

// NeworganizationcreditsUpdatedEvent creates a new organizationcreditsUpdated event.
func NeworganizationcreditsUpdatedEvent(entity *Organization) *organizationcreditsUpdatedEvent {
	return &organizationcreditsUpdatedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventorganizationcreditsUpdated,
			Timestamp: time.Now().UTC(),
			Source:    "organizations",
			Data:      entity,
		},
		Entity: entity,
	}
}
