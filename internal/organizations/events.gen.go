// Code generated by codegen events. DO NOT EDIT.
package organizations

import (
	"context"
	"github.com/google/uuid"
	"time"
)

// EventType represents the type of event.
type EventType string

// Event types for organizations domain.
const (
	EventOrganizationCreated         EventType = "organization.created"
	EventOrganizationUpdated         EventType = "organization.updated"
	EventOrganizationDeleted         EventType = "organization.deleted"
	EventOrganizationPlan_changed    EventType = "organization.plan-changed"
	EventOrganizationCredits_updated EventType = "organization.credits-updated"
)

// Event represents a domain event.
type Event struct {
	ID        string            `json:"id"`
	Type      EventType         `json:"type"`
	Timestamp time.Time         `json:"timestamp"`
	Source    string            `json:"source"`
	Data      interface{}       `json:"data"`
	Metadata  map[string]string `json:"metadata,omitempty"`
}

// EventPublisher publishes domain events.
type EventPublisher interface {
	// PublishOrganizationCreated publishes a created event event for Organization.
	PublishOrganizationCreated(ctx context.Context, entity *Organization) error
	// PublishOrganizationUpdated publishes a updated event event for Organization.
	PublishOrganizationUpdated(ctx context.Context, entity *Organization) error
	// PublishOrganizationDeleted publishes a deleted event event for Organization.
	PublishOrganizationDeleted(ctx context.Context, entity *Organization) error
	// PublishOrganizationPlan_changed publishes a plan_changed event event for Organization.
	PublishOrganizationPlan_changed(ctx context.Context, entity *Organization) error
	// PublishOrganizationCredits_updated publishes a credits_updated event event for Organization.
	PublishOrganizationCredits_updated(ctx context.Context, entity *Organization) error

	// PublishRaw publishes a raw event.
	PublishRaw(ctx context.Context, event *Event) error
}

// NoOpEventPublisher is a no-op event publisher implementation.
type NoOpEventPublisher struct{}

// NewNoOpEventPublisher creates a new no-op event publisher.
func NewNoOpEventPublisher() EventPublisher {
	return &NoOpEventPublisher{}
}

// PublishOrganizationCreated does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishOrganizationCreated(ctx context.Context, entity *Organization) error {
	return nil
}

// PublishOrganizationUpdated does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishOrganizationUpdated(ctx context.Context, entity *Organization) error {
	return nil
}

// PublishOrganizationDeleted does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishOrganizationDeleted(ctx context.Context, entity *Organization) error {
	return nil
}

// PublishOrganizationPlan_changed does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishOrganizationPlan_changed(ctx context.Context, entity *Organization) error {
	return nil
}

// PublishOrganizationCredits_updated does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishOrganizationCredits_updated(ctx context.Context, entity *Organization) error {
	return nil
}

// PublishRaw does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishRaw(ctx context.Context, event *Event) error {
	return nil
}

// OrganizationCreatedEvent represents a created event event for Organization.
type OrganizationCreatedEvent struct {
	Event
	Entity *Organization `json:"entity"`
}

// NewOrganizationCreatedEvent creates a new Organization created event.
func NewOrganizationCreatedEvent(entity *Organization) *OrganizationCreatedEvent {
	return &OrganizationCreatedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventOrganizationCreated,
			Timestamp: time.Now().UTC(),
			Source:    "organizations",
			Data:      entity,
		},
		Entity: entity,
	}
}

// OrganizationUpdatedEvent represents a updated event event for Organization.
type OrganizationUpdatedEvent struct {
	Event
	Entity *Organization `json:"entity"`
}

// NewOrganizationUpdatedEvent creates a new Organization updated event.
func NewOrganizationUpdatedEvent(entity *Organization) *OrganizationUpdatedEvent {
	return &OrganizationUpdatedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventOrganizationUpdated,
			Timestamp: time.Now().UTC(),
			Source:    "organizations",
			Data:      entity,
		},
		Entity: entity,
	}
}

// OrganizationDeletedEvent represents a deleted event event for Organization.
type OrganizationDeletedEvent struct {
	Event
	Entity *Organization `json:"entity"`
}

// NewOrganizationDeletedEvent creates a new Organization deleted event.
func NewOrganizationDeletedEvent(entity *Organization) *OrganizationDeletedEvent {
	return &OrganizationDeletedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventOrganizationDeleted,
			Timestamp: time.Now().UTC(),
			Source:    "organizations",
			Data:      entity,
		},
		Entity: entity,
	}
}

// OrganizationPlan_changedEvent represents a plan_changed event event for Organization.
type OrganizationPlan_changedEvent struct {
	Event
	Entity *Organization `json:"entity"`
}

// NewOrganizationPlan_changedEvent creates a new Organization plan_changed event.
func NewOrganizationPlan_changedEvent(entity *Organization) *OrganizationPlan_changedEvent {
	return &OrganizationPlan_changedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventOrganizationPlan_changed,
			Timestamp: time.Now().UTC(),
			Source:    "organizations",
			Data:      entity,
		},
		Entity: entity,
	}
}

// OrganizationCredits_updatedEvent represents a credits_updated event event for Organization.
type OrganizationCredits_updatedEvent struct {
	Event
	Entity *Organization `json:"entity"`
}

// NewOrganizationCredits_updatedEvent creates a new Organization credits_updated event.
func NewOrganizationCredits_updatedEvent(entity *Organization) *OrganizationCredits_updatedEvent {
	return &OrganizationCredits_updatedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventOrganizationCredits_updated,
			Timestamp: time.Now().UTC(),
			Source:    "organizations",
			Data:      entity,
		},
		Entity: entity,
	}
}
