// Code generated by codegen events. DO NOT EDIT.
package organizations

import (
	"context"
	"github.com/archesai/archesai/internal/events"
)

// Event type constants for organizations domain.
const (
	EventOrganizationCreated         = "organization.created"
	EventOrganizationUpdated         = "organization.updated"
	EventOrganizationDeleted         = "organization.deleted"
	EventOrganizationPlan_changed    = "organization.plan-changed"
	EventOrganizationCredits_updated = "organization.credits-updated"
)

// OrganizationCreatedEvent represents a created event event for Organization.
type OrganizationCreatedEvent struct {
	events.BaseEvent
	Organization *Organization `json:"organization"`
}

// NewOrganizationCreatedEvent creates a new Organization created event.
func NewOrganizationCreatedEvent(entity *Organization) *OrganizationCreatedEvent {
	return &OrganizationCreatedEvent{
		BaseEvent:    events.NewBaseEvent("organizations", EventOrganizationCreated),
		Organization: entity,
	}
}

// EventType returns the event type string.
func (e *OrganizationCreatedEvent) EventType() string {
	return EventOrganizationCreated
}

// EventDomain returns the domain this event belongs to.
func (e *OrganizationCreatedEvent) EventDomain() string {
	return "organizations"
}

// EventData returns the actual event data.
func (e *OrganizationCreatedEvent) EventData() interface{} {
	return e.Organization
}

// OrganizationUpdatedEvent represents a updated event event for Organization.
type OrganizationUpdatedEvent struct {
	events.BaseEvent
	Organization *Organization `json:"organization"`
}

// NewOrganizationUpdatedEvent creates a new Organization updated event.
func NewOrganizationUpdatedEvent(entity *Organization) *OrganizationUpdatedEvent {
	return &OrganizationUpdatedEvent{
		BaseEvent:    events.NewBaseEvent("organizations", EventOrganizationUpdated),
		Organization: entity,
	}
}

// EventType returns the event type string.
func (e *OrganizationUpdatedEvent) EventType() string {
	return EventOrganizationUpdated
}

// EventDomain returns the domain this event belongs to.
func (e *OrganizationUpdatedEvent) EventDomain() string {
	return "organizations"
}

// EventData returns the actual event data.
func (e *OrganizationUpdatedEvent) EventData() interface{} {
	return e.Organization
}

// OrganizationDeletedEvent represents a deleted event event for Organization.
type OrganizationDeletedEvent struct {
	events.BaseEvent
	Organization *Organization `json:"organization"`
}

// NewOrganizationDeletedEvent creates a new Organization deleted event.
func NewOrganizationDeletedEvent(entity *Organization) *OrganizationDeletedEvent {
	return &OrganizationDeletedEvent{
		BaseEvent:    events.NewBaseEvent("organizations", EventOrganizationDeleted),
		Organization: entity,
	}
}

// EventType returns the event type string.
func (e *OrganizationDeletedEvent) EventType() string {
	return EventOrganizationDeleted
}

// EventDomain returns the domain this event belongs to.
func (e *OrganizationDeletedEvent) EventDomain() string {
	return "organizations"
}

// EventData returns the actual event data.
func (e *OrganizationDeletedEvent) EventData() interface{} {
	return e.Organization
}

// OrganizationPlan_changedEvent represents a plan_changed event event for Organization.
type OrganizationPlan_changedEvent struct {
	events.BaseEvent
	Organization *Organization `json:"organization"`
}

// NewOrganizationPlan_changedEvent creates a new Organization plan_changed event.
func NewOrganizationPlan_changedEvent(entity *Organization) *OrganizationPlan_changedEvent {
	return &OrganizationPlan_changedEvent{
		BaseEvent:    events.NewBaseEvent("organizations", EventOrganizationPlan_changed),
		Organization: entity,
	}
}

// EventType returns the event type string.
func (e *OrganizationPlan_changedEvent) EventType() string {
	return EventOrganizationPlan_changed
}

// EventDomain returns the domain this event belongs to.
func (e *OrganizationPlan_changedEvent) EventDomain() string {
	return "organizations"
}

// EventData returns the actual event data.
func (e *OrganizationPlan_changedEvent) EventData() interface{} {
	return e.Organization
}

// OrganizationCredits_updatedEvent represents a credits_updated event event for Organization.
type OrganizationCredits_updatedEvent struct {
	events.BaseEvent
	Organization *Organization `json:"organization"`
}

// NewOrganizationCredits_updatedEvent creates a new Organization credits_updated event.
func NewOrganizationCredits_updatedEvent(entity *Organization) *OrganizationCredits_updatedEvent {
	return &OrganizationCredits_updatedEvent{
		BaseEvent:    events.NewBaseEvent("organizations", EventOrganizationCredits_updated),
		Organization: entity,
	}
}

// EventType returns the event type string.
func (e *OrganizationCredits_updatedEvent) EventType() string {
	return EventOrganizationCredits_updated
}

// EventDomain returns the domain this event belongs to.
func (e *OrganizationCredits_updatedEvent) EventDomain() string {
	return "organizations"
}

// EventData returns the actual event data.
func (e *OrganizationCredits_updatedEvent) EventData() interface{} {
	return e.Organization
}

// EventPublisher publishes domain events for organizations.
type EventPublisher interface {
	PublishOrganizationCreated(ctx context.Context, entity *Organization) error
	PublishOrganizationUpdated(ctx context.Context, entity *Organization) error
	PublishOrganizationDeleted(ctx context.Context, entity *Organization) error
	PublishOrganizationPlan_changed(ctx context.Context, entity *Organization) error
	PublishOrganizationCredits_updated(ctx context.Context, entity *Organization) error
}

// eventPublisher implements EventPublisher for organizations domain.
type eventPublisher struct {
	publisher events.Publisher
}

// NewEventPublisher creates a new event publisher for organizations domain.
func NewEventPublisher(publisher events.Publisher) EventPublisher {
	return &eventPublisher{
		publisher: publisher,
	}
}

// PublishOrganizationCreated publishes a created event event for Organization.
func (p *eventPublisher) PublishOrganizationCreated(ctx context.Context, entity *Organization) error {
	event := NewOrganizationCreatedEvent(entity)
	return events.PublishDomainEvent(ctx, p.publisher, event)
}

// PublishOrganizationUpdated publishes a updated event event for Organization.
func (p *eventPublisher) PublishOrganizationUpdated(ctx context.Context, entity *Organization) error {
	event := NewOrganizationUpdatedEvent(entity)
	return events.PublishDomainEvent(ctx, p.publisher, event)
}

// PublishOrganizationDeleted publishes a deleted event event for Organization.
func (p *eventPublisher) PublishOrganizationDeleted(ctx context.Context, entity *Organization) error {
	event := NewOrganizationDeletedEvent(entity)
	return events.PublishDomainEvent(ctx, p.publisher, event)
}

// PublishOrganizationPlan_changed publishes a plan_changed event event for Organization.
func (p *eventPublisher) PublishOrganizationPlan_changed(ctx context.Context, entity *Organization) error {
	event := NewOrganizationPlan_changedEvent(entity)
	return events.PublishDomainEvent(ctx, p.publisher, event)
}

// PublishOrganizationCredits_updated publishes a credits_updated event event for Organization.
func (p *eventPublisher) PublishOrganizationCredits_updated(ctx context.Context, entity *Organization) error {
	event := NewOrganizationCredits_updatedEvent(entity)
	return events.PublishDomainEvent(ctx, p.publisher, event)
}

// NewNoOpEventPublisher creates a new no-op event publisher for testing.
func NewNoOpEventPublisher() EventPublisher {
	return NewEventPublisher(events.NewNoOpPublisher())
}
