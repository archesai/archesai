// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package organizations

import (
	"context"
	"time"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache {
	mock := &MockCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCache is an autogenerated mock type for the Cache type
type MockCache struct {
	mock.Mock
}

type MockCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCache) EXPECT() *MockCache_Expecter {
	return &MockCache_Expecter{mock: &_m.Mock}
}

// DeleteOrganization provides a mock function for the type MockCache
func (_mock *MockCache) DeleteOrganization(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganization")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_DeleteOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrganization'
type MockCache_DeleteOrganization_Call struct {
	*mock.Call
}

// DeleteOrganization is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockCache_Expecter) DeleteOrganization(ctx interface{}, id interface{}) *MockCache_DeleteOrganization_Call {
	return &MockCache_DeleteOrganization_Call{Call: _e.mock.On("DeleteOrganization", ctx, id)}
}

func (_c *MockCache_DeleteOrganization_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockCache_DeleteOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCache_DeleteOrganization_Call) Return(err error) *MockCache_DeleteOrganization_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_DeleteOrganization_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockCache_DeleteOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// FlushAll provides a mock function for the type MockCache
func (_mock *MockCache) FlushAll(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FlushAll")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_FlushAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlushAll'
type MockCache_FlushAll_Call struct {
	*mock.Call
}

// FlushAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCache_Expecter) FlushAll(ctx interface{}) *MockCache_FlushAll_Call {
	return &MockCache_FlushAll_Call{Call: _e.mock.On("FlushAll", ctx)}
}

func (_c *MockCache_FlushAll_Call) Run(run func(ctx context.Context)) *MockCache_FlushAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCache_FlushAll_Call) Return(err error) *MockCache_FlushAll_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_FlushAll_Call) RunAndReturn(run func(ctx context.Context) error) *MockCache_FlushAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganization provides a mock function for the type MockCache
func (_mock *MockCache) GetOrganization(ctx context.Context, id uuid.UUID) (*Organization, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganization")
	}

	var r0 *Organization
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Organization, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Organization); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Organization)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCache_GetOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganization'
type MockCache_GetOrganization_Call struct {
	*mock.Call
}

// GetOrganization is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockCache_Expecter) GetOrganization(ctx interface{}, id interface{}) *MockCache_GetOrganization_Call {
	return &MockCache_GetOrganization_Call{Call: _e.mock.On("GetOrganization", ctx, id)}
}

func (_c *MockCache_GetOrganization_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockCache_GetOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCache_GetOrganization_Call) Return(organization *Organization, err error) *MockCache_GetOrganization_Call {
	_c.Call.Return(organization, err)
	return _c
}

func (_c *MockCache_GetOrganization_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*Organization, error)) *MockCache_GetOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// SetOrganization provides a mock function for the type MockCache
func (_mock *MockCache) SetOrganization(ctx context.Context, entity *Organization, ttl time.Duration) error {
	ret := _mock.Called(ctx, entity, ttl)

	if len(ret) == 0 {
		panic("no return value specified for SetOrganization")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Organization, time.Duration) error); ok {
		r0 = returnFunc(ctx, entity, ttl)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_SetOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOrganization'
type MockCache_SetOrganization_Call struct {
	*mock.Call
}

// SetOrganization is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *Organization
//   - ttl time.Duration
func (_e *MockCache_Expecter) SetOrganization(ctx interface{}, entity interface{}, ttl interface{}) *MockCache_SetOrganization_Call {
	return &MockCache_SetOrganization_Call{Call: _e.mock.On("SetOrganization", ctx, entity, ttl)}
}

func (_c *MockCache_SetOrganization_Call) Run(run func(ctx context.Context, entity *Organization, ttl time.Duration)) *MockCache_SetOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Organization
		if args[1] != nil {
			arg1 = args[1].(*Organization)
		}
		var arg2 time.Duration
		if args[2] != nil {
			arg2 = args[2].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCache_SetOrganization_Call) Return(err error) *MockCache_SetOrganization_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_SetOrganization_Call) RunAndReturn(run func(ctx context.Context, entity *Organization, ttl time.Duration) error) *MockCache_SetOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventPublisher creates a new instance of MockEventPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventPublisher {
	mock := &MockEventPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEventPublisher is an autogenerated mock type for the EventPublisher type
type MockEventPublisher struct {
	mock.Mock
}

type MockEventPublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventPublisher) EXPECT() *MockEventPublisher_Expecter {
	return &MockEventPublisher_Expecter{mock: &_m.Mock}
}

// PublishOrganizationCreated provides a mock function for the type MockEventPublisher
func (_mock *MockEventPublisher) PublishOrganizationCreated(ctx context.Context, entity *Organization) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for PublishOrganizationCreated")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Organization) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEventPublisher_PublishOrganizationCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishOrganizationCreated'
type MockEventPublisher_PublishOrganizationCreated_Call struct {
	*mock.Call
}

// PublishOrganizationCreated is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *Organization
func (_e *MockEventPublisher_Expecter) PublishOrganizationCreated(ctx interface{}, entity interface{}) *MockEventPublisher_PublishOrganizationCreated_Call {
	return &MockEventPublisher_PublishOrganizationCreated_Call{Call: _e.mock.On("PublishOrganizationCreated", ctx, entity)}
}

func (_c *MockEventPublisher_PublishOrganizationCreated_Call) Run(run func(ctx context.Context, entity *Organization)) *MockEventPublisher_PublishOrganizationCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Organization
		if args[1] != nil {
			arg1 = args[1].(*Organization)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventPublisher_PublishOrganizationCreated_Call) Return(err error) *MockEventPublisher_PublishOrganizationCreated_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEventPublisher_PublishOrganizationCreated_Call) RunAndReturn(run func(ctx context.Context, entity *Organization) error) *MockEventPublisher_PublishOrganizationCreated_Call {
	_c.Call.Return(run)
	return _c
}

// PublishOrganizationCredits_updated provides a mock function for the type MockEventPublisher
func (_mock *MockEventPublisher) PublishOrganizationCredits_updated(ctx context.Context, entity *Organization) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for PublishOrganizationCredits_updated")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Organization) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEventPublisher_PublishOrganizationCredits_updated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishOrganizationCredits_updated'
type MockEventPublisher_PublishOrganizationCredits_updated_Call struct {
	*mock.Call
}

// PublishOrganizationCredits_updated is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *Organization
func (_e *MockEventPublisher_Expecter) PublishOrganizationCredits_updated(ctx interface{}, entity interface{}) *MockEventPublisher_PublishOrganizationCredits_updated_Call {
	return &MockEventPublisher_PublishOrganizationCredits_updated_Call{Call: _e.mock.On("PublishOrganizationCredits_updated", ctx, entity)}
}

func (_c *MockEventPublisher_PublishOrganizationCredits_updated_Call) Run(run func(ctx context.Context, entity *Organization)) *MockEventPublisher_PublishOrganizationCredits_updated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Organization
		if args[1] != nil {
			arg1 = args[1].(*Organization)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventPublisher_PublishOrganizationCredits_updated_Call) Return(err error) *MockEventPublisher_PublishOrganizationCredits_updated_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEventPublisher_PublishOrganizationCredits_updated_Call) RunAndReturn(run func(ctx context.Context, entity *Organization) error) *MockEventPublisher_PublishOrganizationCredits_updated_Call {
	_c.Call.Return(run)
	return _c
}

// PublishOrganizationDeleted provides a mock function for the type MockEventPublisher
func (_mock *MockEventPublisher) PublishOrganizationDeleted(ctx context.Context, entity *Organization) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for PublishOrganizationDeleted")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Organization) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEventPublisher_PublishOrganizationDeleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishOrganizationDeleted'
type MockEventPublisher_PublishOrganizationDeleted_Call struct {
	*mock.Call
}

// PublishOrganizationDeleted is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *Organization
func (_e *MockEventPublisher_Expecter) PublishOrganizationDeleted(ctx interface{}, entity interface{}) *MockEventPublisher_PublishOrganizationDeleted_Call {
	return &MockEventPublisher_PublishOrganizationDeleted_Call{Call: _e.mock.On("PublishOrganizationDeleted", ctx, entity)}
}

func (_c *MockEventPublisher_PublishOrganizationDeleted_Call) Run(run func(ctx context.Context, entity *Organization)) *MockEventPublisher_PublishOrganizationDeleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Organization
		if args[1] != nil {
			arg1 = args[1].(*Organization)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventPublisher_PublishOrganizationDeleted_Call) Return(err error) *MockEventPublisher_PublishOrganizationDeleted_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEventPublisher_PublishOrganizationDeleted_Call) RunAndReturn(run func(ctx context.Context, entity *Organization) error) *MockEventPublisher_PublishOrganizationDeleted_Call {
	_c.Call.Return(run)
	return _c
}

// PublishOrganizationPlan_changed provides a mock function for the type MockEventPublisher
func (_mock *MockEventPublisher) PublishOrganizationPlan_changed(ctx context.Context, entity *Organization) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for PublishOrganizationPlan_changed")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Organization) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEventPublisher_PublishOrganizationPlan_changed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishOrganizationPlan_changed'
type MockEventPublisher_PublishOrganizationPlan_changed_Call struct {
	*mock.Call
}

// PublishOrganizationPlan_changed is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *Organization
func (_e *MockEventPublisher_Expecter) PublishOrganizationPlan_changed(ctx interface{}, entity interface{}) *MockEventPublisher_PublishOrganizationPlan_changed_Call {
	return &MockEventPublisher_PublishOrganizationPlan_changed_Call{Call: _e.mock.On("PublishOrganizationPlan_changed", ctx, entity)}
}

func (_c *MockEventPublisher_PublishOrganizationPlan_changed_Call) Run(run func(ctx context.Context, entity *Organization)) *MockEventPublisher_PublishOrganizationPlan_changed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Organization
		if args[1] != nil {
			arg1 = args[1].(*Organization)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventPublisher_PublishOrganizationPlan_changed_Call) Return(err error) *MockEventPublisher_PublishOrganizationPlan_changed_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEventPublisher_PublishOrganizationPlan_changed_Call) RunAndReturn(run func(ctx context.Context, entity *Organization) error) *MockEventPublisher_PublishOrganizationPlan_changed_Call {
	_c.Call.Return(run)
	return _c
}

// PublishOrganizationUpdated provides a mock function for the type MockEventPublisher
func (_mock *MockEventPublisher) PublishOrganizationUpdated(ctx context.Context, entity *Organization) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for PublishOrganizationUpdated")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Organization) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEventPublisher_PublishOrganizationUpdated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishOrganizationUpdated'
type MockEventPublisher_PublishOrganizationUpdated_Call struct {
	*mock.Call
}

// PublishOrganizationUpdated is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *Organization
func (_e *MockEventPublisher_Expecter) PublishOrganizationUpdated(ctx interface{}, entity interface{}) *MockEventPublisher_PublishOrganizationUpdated_Call {
	return &MockEventPublisher_PublishOrganizationUpdated_Call{Call: _e.mock.On("PublishOrganizationUpdated", ctx, entity)}
}

func (_c *MockEventPublisher_PublishOrganizationUpdated_Call) Run(run func(ctx context.Context, entity *Organization)) *MockEventPublisher_PublishOrganizationUpdated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Organization
		if args[1] != nil {
			arg1 = args[1].(*Organization)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventPublisher_PublishOrganizationUpdated_Call) Return(err error) *MockEventPublisher_PublishOrganizationUpdated_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEventPublisher_PublishOrganizationUpdated_Call) RunAndReturn(run func(ctx context.Context, entity *Organization) error) *MockEventPublisher_PublishOrganizationUpdated_Call {
	_c.Call.Return(run)
	return _c
}

// PublishRaw provides a mock function for the type MockEventPublisher
func (_mock *MockEventPublisher) PublishRaw(ctx context.Context, event *Event) error {
	ret := _mock.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for PublishRaw")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Event) error); ok {
		r0 = returnFunc(ctx, event)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEventPublisher_PublishRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishRaw'
type MockEventPublisher_PublishRaw_Call struct {
	*mock.Call
}

// PublishRaw is a helper method to define mock.On call
//   - ctx context.Context
//   - event *Event
func (_e *MockEventPublisher_Expecter) PublishRaw(ctx interface{}, event interface{}) *MockEventPublisher_PublishRaw_Call {
	return &MockEventPublisher_PublishRaw_Call{Call: _e.mock.On("PublishRaw", ctx, event)}
}

func (_c *MockEventPublisher_PublishRaw_Call) Run(run func(ctx context.Context, event *Event)) *MockEventPublisher_PublishRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Event
		if args[1] != nil {
			arg1 = args[1].(*Event)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventPublisher_PublishRaw_Call) Return(err error) *MockEventPublisher_PublishRaw_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEventPublisher_PublishRaw_Call) RunAndReturn(run func(ctx context.Context, event *Event) error) *MockEventPublisher_PublishRaw_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// CreateInvitation provides a mock function for the type MockRepository
func (_mock *MockRepository) CreateInvitation(ctx context.Context, entity *Invitation) (*Invitation, error) {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for CreateInvitation")
	}

	var r0 *Invitation
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Invitation) (*Invitation, error)); ok {
		return returnFunc(ctx, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Invitation) *Invitation); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Invitation)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *Invitation) error); ok {
		r1 = returnFunc(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_CreateInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateInvitation'
type MockRepository_CreateInvitation_Call struct {
	*mock.Call
}

// CreateInvitation is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *Invitation
func (_e *MockRepository_Expecter) CreateInvitation(ctx interface{}, entity interface{}) *MockRepository_CreateInvitation_Call {
	return &MockRepository_CreateInvitation_Call{Call: _e.mock.On("CreateInvitation", ctx, entity)}
}

func (_c *MockRepository_CreateInvitation_Call) Run(run func(ctx context.Context, entity *Invitation)) *MockRepository_CreateInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Invitation
		if args[1] != nil {
			arg1 = args[1].(*Invitation)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_CreateInvitation_Call) Return(invitation *Invitation, err error) *MockRepository_CreateInvitation_Call {
	_c.Call.Return(invitation, err)
	return _c
}

func (_c *MockRepository_CreateInvitation_Call) RunAndReturn(run func(ctx context.Context, entity *Invitation) (*Invitation, error)) *MockRepository_CreateInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMember provides a mock function for the type MockRepository
func (_mock *MockRepository) CreateMember(ctx context.Context, entity *Member) (*Member, error) {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for CreateMember")
	}

	var r0 *Member
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Member) (*Member, error)); ok {
		return returnFunc(ctx, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Member) *Member); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Member)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *Member) error); ok {
		r1 = returnFunc(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_CreateMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMember'
type MockRepository_CreateMember_Call struct {
	*mock.Call
}

// CreateMember is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *Member
func (_e *MockRepository_Expecter) CreateMember(ctx interface{}, entity interface{}) *MockRepository_CreateMember_Call {
	return &MockRepository_CreateMember_Call{Call: _e.mock.On("CreateMember", ctx, entity)}
}

func (_c *MockRepository_CreateMember_Call) Run(run func(ctx context.Context, entity *Member)) *MockRepository_CreateMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Member
		if args[1] != nil {
			arg1 = args[1].(*Member)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_CreateMember_Call) Return(member *Member, err error) *MockRepository_CreateMember_Call {
	_c.Call.Return(member, err)
	return _c
}

func (_c *MockRepository_CreateMember_Call) RunAndReturn(run func(ctx context.Context, entity *Member) (*Member, error)) *MockRepository_CreateMember_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganization provides a mock function for the type MockRepository
func (_mock *MockRepository) CreateOrganization(ctx context.Context, entity *Organization) (*Organization, error) {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganization")
	}

	var r0 *Organization
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Organization) (*Organization, error)); ok {
		return returnFunc(ctx, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Organization) *Organization); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Organization)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *Organization) error); ok {
		r1 = returnFunc(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_CreateOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganization'
type MockRepository_CreateOrganization_Call struct {
	*mock.Call
}

// CreateOrganization is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *Organization
func (_e *MockRepository_Expecter) CreateOrganization(ctx interface{}, entity interface{}) *MockRepository_CreateOrganization_Call {
	return &MockRepository_CreateOrganization_Call{Call: _e.mock.On("CreateOrganization", ctx, entity)}
}

func (_c *MockRepository_CreateOrganization_Call) Run(run func(ctx context.Context, entity *Organization)) *MockRepository_CreateOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Organization
		if args[1] != nil {
			arg1 = args[1].(*Organization)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_CreateOrganization_Call) Return(organization *Organization, err error) *MockRepository_CreateOrganization_Call {
	_c.Call.Return(organization, err)
	return _c
}

func (_c *MockRepository_CreateOrganization_Call) RunAndReturn(run func(ctx context.Context, entity *Organization) (*Organization, error)) *MockRepository_CreateOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteInvitation provides a mock function for the type MockRepository
func (_mock *MockRepository) DeleteInvitation(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInvitation")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_DeleteInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteInvitation'
type MockRepository_DeleteInvitation_Call struct {
	*mock.Call
}

// DeleteInvitation is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepository_Expecter) DeleteInvitation(ctx interface{}, id interface{}) *MockRepository_DeleteInvitation_Call {
	return &MockRepository_DeleteInvitation_Call{Call: _e.mock.On("DeleteInvitation", ctx, id)}
}

func (_c *MockRepository_DeleteInvitation_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_DeleteInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_DeleteInvitation_Call) Return(err error) *MockRepository_DeleteInvitation_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_DeleteInvitation_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockRepository_DeleteInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMember provides a mock function for the type MockRepository
func (_mock *MockRepository) DeleteMember(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMember")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_DeleteMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMember'
type MockRepository_DeleteMember_Call struct {
	*mock.Call
}

// DeleteMember is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepository_Expecter) DeleteMember(ctx interface{}, id interface{}) *MockRepository_DeleteMember_Call {
	return &MockRepository_DeleteMember_Call{Call: _e.mock.On("DeleteMember", ctx, id)}
}

func (_c *MockRepository_DeleteMember_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_DeleteMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_DeleteMember_Call) Return(err error) *MockRepository_DeleteMember_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_DeleteMember_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockRepository_DeleteMember_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrganization provides a mock function for the type MockRepository
func (_mock *MockRepository) DeleteOrganization(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganization")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_DeleteOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrganization'
type MockRepository_DeleteOrganization_Call struct {
	*mock.Call
}

// DeleteOrganization is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepository_Expecter) DeleteOrganization(ctx interface{}, id interface{}) *MockRepository_DeleteOrganization_Call {
	return &MockRepository_DeleteOrganization_Call{Call: _e.mock.On("DeleteOrganization", ctx, id)}
}

func (_c *MockRepository_DeleteOrganization_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_DeleteOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_DeleteOrganization_Call) Return(err error) *MockRepository_DeleteOrganization_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_DeleteOrganization_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockRepository_DeleteOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// GetInvitation provides a mock function for the type MockRepository
func (_mock *MockRepository) GetInvitation(ctx context.Context, id uuid.UUID) (*Invitation, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetInvitation")
	}

	var r0 *Invitation
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Invitation, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Invitation); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Invitation)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInvitation'
type MockRepository_GetInvitation_Call struct {
	*mock.Call
}

// GetInvitation is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepository_Expecter) GetInvitation(ctx interface{}, id interface{}) *MockRepository_GetInvitation_Call {
	return &MockRepository_GetInvitation_Call{Call: _e.mock.On("GetInvitation", ctx, id)}
}

func (_c *MockRepository_GetInvitation_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_GetInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetInvitation_Call) Return(invitation *Invitation, err error) *MockRepository_GetInvitation_Call {
	_c.Call.Return(invitation, err)
	return _c
}

func (_c *MockRepository_GetInvitation_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*Invitation, error)) *MockRepository_GetInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// GetMember provides a mock function for the type MockRepository
func (_mock *MockRepository) GetMember(ctx context.Context, id uuid.UUID) (*Member, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetMember")
	}

	var r0 *Member
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Member, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Member); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Member)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMember'
type MockRepository_GetMember_Call struct {
	*mock.Call
}

// GetMember is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepository_Expecter) GetMember(ctx interface{}, id interface{}) *MockRepository_GetMember_Call {
	return &MockRepository_GetMember_Call{Call: _e.mock.On("GetMember", ctx, id)}
}

func (_c *MockRepository_GetMember_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_GetMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetMember_Call) Return(member *Member, err error) *MockRepository_GetMember_Call {
	_c.Call.Return(member, err)
	return _c
}

func (_c *MockRepository_GetMember_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*Member, error)) *MockRepository_GetMember_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganization provides a mock function for the type MockRepository
func (_mock *MockRepository) GetOrganization(ctx context.Context, id uuid.UUID) (*Organization, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganization")
	}

	var r0 *Organization
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Organization, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Organization); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Organization)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganization'
type MockRepository_GetOrganization_Call struct {
	*mock.Call
}

// GetOrganization is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepository_Expecter) GetOrganization(ctx interface{}, id interface{}) *MockRepository_GetOrganization_Call {
	return &MockRepository_GetOrganization_Call{Call: _e.mock.On("GetOrganization", ctx, id)}
}

func (_c *MockRepository_GetOrganization_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_GetOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetOrganization_Call) Return(organization *Organization, err error) *MockRepository_GetOrganization_Call {
	_c.Call.Return(organization, err)
	return _c
}

func (_c *MockRepository_GetOrganization_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*Organization, error)) *MockRepository_GetOrganization_Call {
	_c.Call.Return(run)
	return _c
}

// ListInvitations provides a mock function for the type MockRepository
func (_mock *MockRepository) ListInvitations(ctx context.Context, params ListInvitationsParams) ([]*Invitation, int64, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListInvitations")
	}

	var r0 []*Invitation
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ListInvitationsParams) ([]*Invitation, int64, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ListInvitationsParams) []*Invitation); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Invitation)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ListInvitationsParams) int64); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, ListInvitationsParams) error); ok {
		r2 = returnFunc(ctx, params)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRepository_ListInvitations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListInvitations'
type MockRepository_ListInvitations_Call struct {
	*mock.Call
}

// ListInvitations is a helper method to define mock.On call
//   - ctx context.Context
//   - params ListInvitationsParams
func (_e *MockRepository_Expecter) ListInvitations(ctx interface{}, params interface{}) *MockRepository_ListInvitations_Call {
	return &MockRepository_ListInvitations_Call{Call: _e.mock.On("ListInvitations", ctx, params)}
}

func (_c *MockRepository_ListInvitations_Call) Run(run func(ctx context.Context, params ListInvitationsParams)) *MockRepository_ListInvitations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ListInvitationsParams
		if args[1] != nil {
			arg1 = args[1].(ListInvitationsParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_ListInvitations_Call) Return(invitations []*Invitation, n int64, err error) *MockRepository_ListInvitations_Call {
	_c.Call.Return(invitations, n, err)
	return _c
}

func (_c *MockRepository_ListInvitations_Call) RunAndReturn(run func(ctx context.Context, params ListInvitationsParams) ([]*Invitation, int64, error)) *MockRepository_ListInvitations_Call {
	_c.Call.Return(run)
	return _c
}

// ListMembers provides a mock function for the type MockRepository
func (_mock *MockRepository) ListMembers(ctx context.Context, params ListMembersParams) ([]*Member, int64, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListMembers")
	}

	var r0 []*Member
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ListMembersParams) ([]*Member, int64, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ListMembersParams) []*Member); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Member)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ListMembersParams) int64); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, ListMembersParams) error); ok {
		r2 = returnFunc(ctx, params)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRepository_ListMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListMembers'
type MockRepository_ListMembers_Call struct {
	*mock.Call
}

// ListMembers is a helper method to define mock.On call
//   - ctx context.Context
//   - params ListMembersParams
func (_e *MockRepository_Expecter) ListMembers(ctx interface{}, params interface{}) *MockRepository_ListMembers_Call {
	return &MockRepository_ListMembers_Call{Call: _e.mock.On("ListMembers", ctx, params)}
}

func (_c *MockRepository_ListMembers_Call) Run(run func(ctx context.Context, params ListMembersParams)) *MockRepository_ListMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ListMembersParams
		if args[1] != nil {
			arg1 = args[1].(ListMembersParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_ListMembers_Call) Return(members []*Member, n int64, err error) *MockRepository_ListMembers_Call {
	_c.Call.Return(members, n, err)
	return _c
}

func (_c *MockRepository_ListMembers_Call) RunAndReturn(run func(ctx context.Context, params ListMembersParams) ([]*Member, int64, error)) *MockRepository_ListMembers_Call {
	_c.Call.Return(run)
	return _c
}

// ListOrganizations provides a mock function for the type MockRepository
func (_mock *MockRepository) ListOrganizations(ctx context.Context, params ListOrganizationsParams) ([]*Organization, int64, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizations")
	}

	var r0 []*Organization
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ListOrganizationsParams) ([]*Organization, int64, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ListOrganizationsParams) []*Organization); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Organization)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ListOrganizationsParams) int64); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, ListOrganizationsParams) error); ok {
		r2 = returnFunc(ctx, params)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRepository_ListOrganizations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOrganizations'
type MockRepository_ListOrganizations_Call struct {
	*mock.Call
}

// ListOrganizations is a helper method to define mock.On call
//   - ctx context.Context
//   - params ListOrganizationsParams
func (_e *MockRepository_Expecter) ListOrganizations(ctx interface{}, params interface{}) *MockRepository_ListOrganizations_Call {
	return &MockRepository_ListOrganizations_Call{Call: _e.mock.On("ListOrganizations", ctx, params)}
}

func (_c *MockRepository_ListOrganizations_Call) Run(run func(ctx context.Context, params ListOrganizationsParams)) *MockRepository_ListOrganizations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ListOrganizationsParams
		if args[1] != nil {
			arg1 = args[1].(ListOrganizationsParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_ListOrganizations_Call) Return(organizations []*Organization, n int64, err error) *MockRepository_ListOrganizations_Call {
	_c.Call.Return(organizations, n, err)
	return _c
}

func (_c *MockRepository_ListOrganizations_Call) RunAndReturn(run func(ctx context.Context, params ListOrganizationsParams) ([]*Organization, int64, error)) *MockRepository_ListOrganizations_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateInvitation provides a mock function for the type MockRepository
func (_mock *MockRepository) UpdateInvitation(ctx context.Context, id uuid.UUID, entity *Invitation) (*Invitation, error) {
	ret := _mock.Called(ctx, id, entity)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInvitation")
	}

	var r0 *Invitation
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *Invitation) (*Invitation, error)); ok {
		return returnFunc(ctx, id, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *Invitation) *Invitation); ok {
		r0 = returnFunc(ctx, id, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Invitation)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *Invitation) error); ok {
		r1 = returnFunc(ctx, id, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_UpdateInvitation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateInvitation'
type MockRepository_UpdateInvitation_Call struct {
	*mock.Call
}

// UpdateInvitation is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - entity *Invitation
func (_e *MockRepository_Expecter) UpdateInvitation(ctx interface{}, id interface{}, entity interface{}) *MockRepository_UpdateInvitation_Call {
	return &MockRepository_UpdateInvitation_Call{Call: _e.mock.On("UpdateInvitation", ctx, id, entity)}
}

func (_c *MockRepository_UpdateInvitation_Call) Run(run func(ctx context.Context, id uuid.UUID, entity *Invitation)) *MockRepository_UpdateInvitation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *Invitation
		if args[2] != nil {
			arg2 = args[2].(*Invitation)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepository_UpdateInvitation_Call) Return(invitation *Invitation, err error) *MockRepository_UpdateInvitation_Call {
	_c.Call.Return(invitation, err)
	return _c
}

func (_c *MockRepository_UpdateInvitation_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, entity *Invitation) (*Invitation, error)) *MockRepository_UpdateInvitation_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMember provides a mock function for the type MockRepository
func (_mock *MockRepository) UpdateMember(ctx context.Context, id uuid.UUID, entity *Member) (*Member, error) {
	ret := _mock.Called(ctx, id, entity)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMember")
	}

	var r0 *Member
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *Member) (*Member, error)); ok {
		return returnFunc(ctx, id, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *Member) *Member); ok {
		r0 = returnFunc(ctx, id, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Member)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *Member) error); ok {
		r1 = returnFunc(ctx, id, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_UpdateMember_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMember'
type MockRepository_UpdateMember_Call struct {
	*mock.Call
}

// UpdateMember is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - entity *Member
func (_e *MockRepository_Expecter) UpdateMember(ctx interface{}, id interface{}, entity interface{}) *MockRepository_UpdateMember_Call {
	return &MockRepository_UpdateMember_Call{Call: _e.mock.On("UpdateMember", ctx, id, entity)}
}

func (_c *MockRepository_UpdateMember_Call) Run(run func(ctx context.Context, id uuid.UUID, entity *Member)) *MockRepository_UpdateMember_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *Member
		if args[2] != nil {
			arg2 = args[2].(*Member)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepository_UpdateMember_Call) Return(member *Member, err error) *MockRepository_UpdateMember_Call {
	_c.Call.Return(member, err)
	return _c
}

func (_c *MockRepository_UpdateMember_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, entity *Member) (*Member, error)) *MockRepository_UpdateMember_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganization provides a mock function for the type MockRepository
func (_mock *MockRepository) UpdateOrganization(ctx context.Context, id uuid.UUID, entity *Organization) (*Organization, error) {
	ret := _mock.Called(ctx, id, entity)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganization")
	}

	var r0 *Organization
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *Organization) (*Organization, error)); ok {
		return returnFunc(ctx, id, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *Organization) *Organization); ok {
		r0 = returnFunc(ctx, id, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Organization)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *Organization) error); ok {
		r1 = returnFunc(ctx, id, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_UpdateOrganization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganization'
type MockRepository_UpdateOrganization_Call struct {
	*mock.Call
}

// UpdateOrganization is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - entity *Organization
func (_e *MockRepository_Expecter) UpdateOrganization(ctx interface{}, id interface{}, entity interface{}) *MockRepository_UpdateOrganization_Call {
	return &MockRepository_UpdateOrganization_Call{Call: _e.mock.On("UpdateOrganization", ctx, id, entity)}
}

func (_c *MockRepository_UpdateOrganization_Call) Run(run func(ctx context.Context, id uuid.UUID, entity *Organization)) *MockRepository_UpdateOrganization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *Organization
		if args[2] != nil {
			arg2 = args[2].(*Organization)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepository_UpdateOrganization_Call) Return(organization *Organization, err error) *MockRepository_UpdateOrganization_Call {
	_c.Call.Return(organization, err)
	return _c
}

func (_c *MockRepository_UpdateOrganization_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, entity *Organization) (*Organization, error)) *MockRepository_UpdateOrganization_Call {
	_c.Call.Return(run)
	return _c
}
