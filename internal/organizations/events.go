// Code generated by codegen events. DO NOT EDIT.
package organizations

import (
	"context"
	"github.com/google/uuid"
	"time"
)

// EventType represents the type of event.
type EventType string

// Event types for organizations domain.
const (
	EventOrganizationCreated       EventType = "organization-created"
	EventOrganizationUpdated       EventType = "organization-updated"
	EventOrganizationDeleted       EventType = "organization-deleted"
	EventOrganizationMemberAdded   EventType = "organization-member-added"
	EventOrganizationMemberRemoved EventType = "organization-member-removed"
)

// Event represents a domain event.
type Event struct {
	ID        string            `json:"id"`
	Type      EventType         `json:"type"`
	Timestamp time.Time         `json:"timestamp"`
	Source    string            `json:"source"`
	Data      interface{}       `json:"data"`
	Metadata  map[string]string `json:"metadata,omitempty"`
}

// EventPublisher publishes domain events.
type EventPublisher interface {
	// PublishOrganizationCreated publishes a Organization was created event.
	PublishOrganizationCreated(ctx context.Context, entity *OrganizationEntity) error
	// PublishOrganizationUpdated publishes a Organization was updated event.
	PublishOrganizationUpdated(ctx context.Context, entity *OrganizationEntity) error
	// PublishOrganizationDeleted publishes a Organization was deleted event.
	PublishOrganizationDeleted(ctx context.Context, entity *OrganizationEntity) error
	// PublishOrganizationMemberAdded publishes a Member was added to organization event.
	PublishOrganizationMemberAdded(ctx context.Context, entity *OrganizationEntity) error
	// PublishOrganizationMemberRemoved publishes a Member was removed from organization event.
	PublishOrganizationMemberRemoved(ctx context.Context, entity *OrganizationEntity) error

	// PublishRaw publishes a raw event.
	PublishRaw(ctx context.Context, event *Event) error
}

// NoOpEventPublisher is a no-op event publisher implementation.
type NoOpEventPublisher struct{}

// NewNoOpEventPublisher creates a new no-op event publisher.
func NewNoOpEventPublisher() EventPublisher {
	return &NoOpEventPublisher{}
}

// PublishOrganizationCreated does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishOrganizationCreated(ctx context.Context, entity *OrganizationEntity) error {
	return nil
}

// PublishOrganizationUpdated does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishOrganizationUpdated(ctx context.Context, entity *OrganizationEntity) error {
	return nil
}

// PublishOrganizationDeleted does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishOrganizationDeleted(ctx context.Context, entity *OrganizationEntity) error {
	return nil
}

// PublishOrganizationMemberAdded does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishOrganizationMemberAdded(ctx context.Context, entity *OrganizationEntity) error {
	return nil
}

// PublishOrganizationMemberRemoved does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishOrganizationMemberRemoved(ctx context.Context, entity *OrganizationEntity) error {
	return nil
}

// PublishRaw does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishRaw(ctx context.Context, event *Event) error {
	return nil
}

// OrganizationCreatedEvent represents a Organization was created event.
type OrganizationCreatedEvent struct {
	Event
	Entity *OrganizationEntity `json:"entity"`
}

// NewOrganizationCreatedEvent creates a new OrganizationCreated event.
func NewOrganizationCreatedEvent(entity *OrganizationEntity) *OrganizationCreatedEvent {
	return &OrganizationCreatedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventOrganizationCreated,
			Timestamp: time.Now().UTC(),
			Source:    "organizations",
			Data:      entity,
		},
		Entity: entity,
	}
}

// OrganizationUpdatedEvent represents a Organization was updated event.
type OrganizationUpdatedEvent struct {
	Event
	Entity *OrganizationEntity `json:"entity"`
}

// NewOrganizationUpdatedEvent creates a new OrganizationUpdated event.
func NewOrganizationUpdatedEvent(entity *OrganizationEntity) *OrganizationUpdatedEvent {
	return &OrganizationUpdatedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventOrganizationUpdated,
			Timestamp: time.Now().UTC(),
			Source:    "organizations",
			Data:      entity,
		},
		Entity: entity,
	}
}

// OrganizationDeletedEvent represents a Organization was deleted event.
type OrganizationDeletedEvent struct {
	Event
	Entity *OrganizationEntity `json:"entity"`
}

// NewOrganizationDeletedEvent creates a new OrganizationDeleted event.
func NewOrganizationDeletedEvent(entity *OrganizationEntity) *OrganizationDeletedEvent {
	return &OrganizationDeletedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventOrganizationDeleted,
			Timestamp: time.Now().UTC(),
			Source:    "organizations",
			Data:      entity,
		},
		Entity: entity,
	}
}

// OrganizationMemberAddedEvent represents a Member was added to organization event.
type OrganizationMemberAddedEvent struct {
	Event
	Entity *OrganizationEntity `json:"entity"`
}

// NewOrganizationMemberAddedEvent creates a new OrganizationMemberAdded event.
func NewOrganizationMemberAddedEvent(entity *OrganizationEntity) *OrganizationMemberAddedEvent {
	return &OrganizationMemberAddedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventOrganizationMemberAdded,
			Timestamp: time.Now().UTC(),
			Source:    "organizations",
			Data:      entity,
		},
		Entity: entity,
	}
}

// OrganizationMemberRemovedEvent represents a Member was removed from organization event.
type OrganizationMemberRemovedEvent struct {
	Event
	Entity *OrganizationEntity `json:"entity"`
}

// NewOrganizationMemberRemovedEvent creates a new OrganizationMemberRemoved event.
func NewOrganizationMemberRemovedEvent(entity *OrganizationEntity) *OrganizationMemberRemovedEvent {
	return &OrganizationMemberRemovedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventOrganizationMemberRemoved,
			Timestamp: time.Now().UTC(),
			Source:    "organizations",
			Data:      entity,
		},
		Entity: entity,
	}
}
