// Package organizations provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package organizations

import (
	"time"

	"github.com/google/uuid"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for OrganizationPlan.
const (
	BASIC     OrganizationPlan = "BASIC"
	FREE      OrganizationPlan = "FREE"
	PREMIUM   OrganizationPlan = "PREMIUM"
	STANDARD  OrganizationPlan = "STANDARD"
	UNLIMITED OrganizationPlan = "UNLIMITED"
)

// Defines values for ListOrganizationsParamsSortField.
const (
	BillingEmail     ListOrganizationsParamsSortField = "billingEmail"
	CreatedAt        ListOrganizationsParamsSortField = "createdAt"
	Credits          ListOrganizationsParamsSortField = "credits"
	ID               ListOrganizationsParamsSortField = "id"
	Logo             ListOrganizationsParamsSortField = "logo"
	Metadata         ListOrganizationsParamsSortField = "metadata"
	Name             ListOrganizationsParamsSortField = "name"
	Plan             ListOrganizationsParamsSortField = "plan"
	Slug             ListOrganizationsParamsSortField = "slug"
	StripeCustomerID ListOrganizationsParamsSortField = "stripeCustomerID"
	UpdatedAt        ListOrganizationsParamsSortField = "updatedAt"
)

// Defines values for ListOrganizationsParamsSortOrder.
const (
	Asc  ListOrganizationsParamsSortOrder = "asc"
	Desc ListOrganizationsParamsSortOrder = "desc"
)

// Base defines model for Base.
type Base struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// ID Universally Unique IDentifier
	ID UUID `json:"id" yaml:"id"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// FilterNode A recursive filter node that can be a condition or group
type FilterNode = interface{}

// Organization defines model for Organization.
type Organization struct {
	// BillingEmail Email address for billing communications
	BillingEmail openapi_types.Email `json:"billingEmail,omitempty,omitzero" yaml:"billingEmail,omitempty"`

	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// Credits Available credits for this organization
	Credits float32 `json:"credits" yaml:"credits"`

	// ID Universally Unique IDentifier
	ID UUID `json:"id" yaml:"id"`

	// Logo The organization's logo URL
	Logo string `json:"logo,omitempty,omitzero" yaml:"logo,omitempty"`

	// Metadata Custom metadata in JSON format
	Metadata map[string]interface{} `json:"metadata" yaml:"metadata"`

	// Name The organization's display name
	Name string `json:"name" yaml:"name"`

	// Plan The current subscription plan
	Plan OrganizationPlan `json:"plan" yaml:"plan"`

	// Slug URL-friendly unique identifier for the organization
	Slug string `json:"slug" yaml:"slug"`

	// StripeCustomerID Stripe customer identifier
	StripeCustomerID string `json:"stripeCustomerID,omitempty,omitzero" yaml:"stripeCustomerID,omitempty"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// OrganizationPlan The current subscription plan
type OrganizationPlan string

// Page Pagination (page number & size)
type Page struct {
	Number int `json:"number,omitempty,omitzero" yaml:"number,omitempty"`
	Size   int `json:"size,omitempty,omitzero" yaml:"size,omitempty"`
}

// Problem RFC 7807 (Problem Details) compliant error response
type Problem struct {
	// Detail Human-readable explanation specific to this occurrence
	Detail string `json:"detail,omitempty,omitzero" yaml:"detail,omitempty"`

	// Instance URI identifying the specific occurrence
	Instance string `json:"instance,omitempty,omitzero" yaml:"instance,omitempty"`

	// Status HTTP status code
	Status int `json:"status" yaml:"status"`

	// Title Short, human-readable summary
	Title string `json:"title" yaml:"title"`

	// Type URI identifying the problem type
	Type string `json:"type,omitempty,omitzero" yaml:"type,omitempty"`
}

// UUID Universally Unique IDentifier
type UUID = uuid.UUID

// OrganizationsFilter A recursive filter node that can be a condition or group
type OrganizationsFilter = FilterNode

// OrganizationsSort defines model for OrganizationsSort.
type OrganizationsSort = []struct {
	Field string `json:"field" yaml:"field"`
	Order string `json:"order" yaml:"order"`
}

// PageQuery Pagination (page number & size)
type PageQuery = Page

// BadRequest RFC 7807 (Problem Details) compliant error response
type BadRequest = Problem

// NotFound RFC 7807 (Problem Details) compliant error response
type NotFound = Problem

// Unauthorized RFC 7807 (Problem Details) compliant error response
type Unauthorized = Problem

// ListOrganizationsParams defines parameters for ListOrganizations.
type ListOrganizationsParams struct {
	// Filter Filter organizations by field values. Supported fields:
	// - createdAt, id, updatedAt, billingEmail, credits, logo
	// - metadata, name, plan, slug, stripeCustomerID
	Filter OrganizationsFilter `json:"filter,omitempty,omitzero" yaml:"filter,omitempty"`

	// Page The page parameter
	Page PageQuery `form:"page,omitempty" json:"page,omitempty,omitzero" yaml:"page,omitempty"`

	// Sort The sort parameter
	Sort OrganizationsSort `form:"sort,omitempty" json:"sort,omitempty,omitzero" yaml:"sort,omitempty"`
}

// ListOrganizationsParamsSortField defines parameters for ListOrganizations.
type ListOrganizationsParamsSortField string

// ListOrganizationsParamsSortOrder defines parameters for ListOrganizations.
type ListOrganizationsParamsSortOrder string

// CreateOrganizationJSONBody defines parameters for CreateOrganization.
type CreateOrganizationJSONBody struct {
	// BillingEmail The billing email to use for the organization
	BillingEmail   openapi_types.Email `json:"billingEmail" yaml:"billingEmail"`
	OrganizationID UUID                `json:"organizationID" yaml:"organizationID"`
}

// UpdateOrganizationJSONBody defines parameters for UpdateOrganization.
type UpdateOrganizationJSONBody struct {
	// BillingEmail The billing email to use for the organization
	BillingEmail   openapi_types.Email `json:"billingEmail,omitempty,omitzero" yaml:"billingEmail,omitempty"`
	OrganizationID UUID                `json:"organizationID,omitempty,omitzero" yaml:"organizationID,omitempty"`
}

// CreateOrganizationJSONRequestBody defines body for CreateOrganization for application/json ContentType.
type CreateOrganizationJSONRequestBody CreateOrganizationJSONBody

// UpdateOrganizationJSONRequestBody defines body for UpdateOrganization for application/json ContentType.
type UpdateOrganizationJSONRequestBody UpdateOrganizationJSONBody
