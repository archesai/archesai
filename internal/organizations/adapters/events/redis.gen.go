// Code generated by codegen events. DO NOT EDIT.
package events

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/archesai/archesai/internal/organizations"
	"github.com/google/uuid"
	"github.com/redis/go-redis/v9"
)

// RedisEventPublisher implements EventPublisher using Redis pub/sub.
type RedisEventPublisher struct {
	client  *redis.Client
	channel string
}

// NewRedisEventPublisher creates a new Redis event publisher.
func NewRedisEventPublisher(client *redis.Client) organizations.EventPublisher {
	channel := "organizations-events"

	return &RedisEventPublisher{
		client:  client,
		channel: channel,
	}
}

// NewRedisEventPublisherWithChannel creates a new Redis event publisher with custom channel.
func NewRedisEventPublisherWithChannel(client *redis.Client, channel string) organizations.EventPublisher {
	return &RedisEventPublisher{
		client:  client,
		channel: channel,
	}
}

// PublishOrganizationCreated publishes a created event event for Organization.
func (p *RedisEventPublisher) PublishOrganizationCreated(ctx context.Context, entity *organizations.Organization) error {
	if entity == nil {
		return fmt.Errorf("entity cannot be nil")
	}

	event := &organizations.Event{
		ID:        uuid.New().String(),
		Type:      organizations.EventOrganizationCreated,
		Timestamp: time.Now().UTC(),
		Source:    "organizations",
		Data:      entity,
		Metadata: map[string]string{
			"entity_id":   entity.Id.String(),
			"entity_type": "Organization",
		},
	}

	return p.PublishRaw(ctx, event)
}

// PublishOrganizationUpdated publishes a updated event event for Organization.
func (p *RedisEventPublisher) PublishOrganizationUpdated(ctx context.Context, entity *organizations.Organization) error {
	if entity == nil {
		return fmt.Errorf("entity cannot be nil")
	}

	event := &organizations.Event{
		ID:        uuid.New().String(),
		Type:      organizations.EventOrganizationUpdated,
		Timestamp: time.Now().UTC(),
		Source:    "organizations",
		Data:      entity,
		Metadata: map[string]string{
			"entity_id":   entity.Id.String(),
			"entity_type": "Organization",
		},
	}

	return p.PublishRaw(ctx, event)
}

// PublishOrganizationDeleted publishes a deleted event event for Organization.
func (p *RedisEventPublisher) PublishOrganizationDeleted(ctx context.Context, entity *organizations.Organization) error {
	if entity == nil {
		return fmt.Errorf("entity cannot be nil")
	}

	event := &organizations.Event{
		ID:        uuid.New().String(),
		Type:      organizations.EventOrganizationDeleted,
		Timestamp: time.Now().UTC(),
		Source:    "organizations",
		Data:      entity,
		Metadata: map[string]string{
			"entity_id":   entity.Id.String(),
			"entity_type": "Organization",
		},
	}

	return p.PublishRaw(ctx, event)
}

// PublishOrganizationPlan_changed publishes a plan_changed event event for Organization.
func (p *RedisEventPublisher) PublishOrganizationPlan_changed(ctx context.Context, entity *organizations.Organization) error {
	if entity == nil {
		return fmt.Errorf("entity cannot be nil")
	}

	event := &organizations.Event{
		ID:        uuid.New().String(),
		Type:      organizations.EventOrganizationPlan_changed,
		Timestamp: time.Now().UTC(),
		Source:    "organizations",
		Data:      entity,
		Metadata: map[string]string{
			"entity_id":   entity.Id.String(),
			"entity_type": "Organization",
		},
	}

	return p.PublishRaw(ctx, event)
}

// PublishOrganizationCredits_updated publishes a credits_updated event event for Organization.
func (p *RedisEventPublisher) PublishOrganizationCredits_updated(ctx context.Context, entity *organizations.Organization) error {
	if entity == nil {
		return fmt.Errorf("entity cannot be nil")
	}

	event := &organizations.Event{
		ID:        uuid.New().String(),
		Type:      organizations.EventOrganizationCredits_updated,
		Timestamp: time.Now().UTC(),
		Source:    "organizations",
		Data:      entity,
		Metadata: map[string]string{
			"entity_id":   entity.Id.String(),
			"entity_type": "Organization",
		},
	}

	return p.PublishRaw(ctx, event)
}

// PublishRaw publishes a raw event to Redis.
func (p *RedisEventPublisher) PublishRaw(ctx context.Context, event *organizations.Event) error {
	if event == nil {
		return fmt.Errorf("event cannot be nil")
	}

	// Ensure event has required fields
	if event.ID == "" {
		event.ID = uuid.New().String()
	}
	if event.Timestamp.IsZero() {
		event.Timestamp = time.Now().UTC()
	}
	if event.Source == "" {
		event.Source = "organizations"
	}

	// Marshal event to JSON
	data, err := json.Marshal(event)
	if err != nil {
		return fmt.Errorf("failed to marshal event: %w", err)
	}

	// Publish to Redis channel
	if err := p.client.Publish(ctx, p.channel, data).Err(); err != nil {
		return fmt.Errorf("failed to publish event to Redis: %w", err)
	}

	// Also publish to type-specific channel for selective subscription
	typeChannel := fmt.Sprintf("%s:%s", p.channel, string(event.Type))
	if err := p.client.Publish(ctx, typeChannel, data).Err(); err != nil {
		// Log error but don't fail - type-specific channel is optional
		// In production, you'd use proper logging here
		_ = err
	}

	return nil
}

// Subscribe subscribes to domain events.
func (p *RedisEventPublisher) Subscribe(ctx context.Context, handler func(event *organizations.Event) error) error {
	// Create subscription
	pubsub := p.client.Subscribe(ctx, p.channel)
	defer pubsub.Close()

	// Wait for subscription confirmation
	_, err := pubsub.Receive(ctx)
	if err != nil {
		return fmt.Errorf("failed to subscribe to channel: %w", err)
	}

	// Get channel for messages
	ch := pubsub.Channel()

	// Process messages
	for {
		select {
		case <-ctx.Done():
			return ctx.Err()
		case msg := <-ch:
			if msg == nil {
				continue
			}

			// Unmarshal event
			var event organizations.Event
			if err := json.Unmarshal([]byte(msg.Payload), &event); err != nil {
				// Log error but continue processing
				// In production, you'd use proper logging here
				continue
			}

			// Handle event
			if err := handler(&event); err != nil {
				// Log error but continue processing
				// In production, you'd use proper logging here
				continue
			}
		}
	}
}

// SubscribeToType subscribes to specific event types.
func (p *RedisEventPublisher) SubscribeToType(ctx context.Context, eventType organizations.EventType, handler func(event *organizations.Event) error) error {
	// Subscribe to type-specific channel
	typeChannel := fmt.Sprintf("%s:%s", p.channel, string(eventType))

	// Create subscription
	pubsub := p.client.Subscribe(ctx, typeChannel)
	defer pubsub.Close()

	// Wait for subscription confirmation
	_, err := pubsub.Receive(ctx)
	if err != nil {
		return fmt.Errorf("failed to subscribe to type channel: %w", err)
	}

	// Get channel for messages
	ch := pubsub.Channel()

	// Process messages
	for {
		select {
		case <-ctx.Done():
			return ctx.Err()
		case msg := <-ch:
			if msg == nil {
				continue
			}

			// Unmarshal event
			var event organizations.Event
			if err := json.Unmarshal([]byte(msg.Payload), &event); err != nil {
				// Log error but continue processing
				continue
			}

			// Handle event
			if err := handler(&event); err != nil {
				// Log error but continue processing
				continue
			}
		}
	}
}
