// Code generated by codegen cache. DO NOT EDIT.
package organizations

import (
	"context"
	"errors"
	"github.com/google/uuid"
	"time"
)

// Common cache errors
var (
	ErrCacheMiss = errors.New("cache miss")
	ErrCacheSet  = errors.New("cache set failed")
)

// Cache provides caching operations for organizations domain.
type Cache interface {

	// Organization caching
	GetOrganization(ctx context.Context, id uuid.UUID) (*Organization, error)
	SetOrganization(ctx context.Context, entity *Organization, ttl time.Duration) error
	DeleteOrganization(ctx context.Context, id uuid.UUID) error

	// Batch operations
	FlushAll(ctx context.Context) error
}

// NoOpCache is a no-op cache implementation that always returns cache misses.
type NoOpCache struct{}

// NewNoOpCache creates a new no-op cache.
func NewNoOpCache() Cache {
	return &NoOpCache{}
}

// Organization no-op operations
func (c *NoOpCache) GetOrganization(ctx context.Context, id uuid.UUID) (*Organization, error) {
	return nil, ErrCacheMiss
}

func (c *NoOpCache) SetOrganization(ctx context.Context, entity *Organization, ttl time.Duration) error {
	return nil
}

func (c *NoOpCache) DeleteOrganization(ctx context.Context, id uuid.UUID) error {
	return nil
}

func (c *NoOpCache) FlushAll(ctx context.Context) error {
	return nil
}
