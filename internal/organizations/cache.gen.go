// Code generated by codegen cache. DO NOT EDIT.
package organizations

import (
	"context"
	"time"

	genericcache "github.com/archesai/archesai/internal/cache"
	"github.com/google/uuid"
)

// ErrCacheMiss re-exported from generic cache package
var ErrCacheMiss = genericcache.ErrCacheMiss

// Cache provides caching operations for organizations domain.
type Cache interface {

	// Organization caching
	GetOrganization(ctx context.Context, id uuid.UUID) (*Organization, error)
	SetOrganization(ctx context.Context, entity *Organization, ttl time.Duration) error
	DeleteOrganization(ctx context.Context, id uuid.UUID) error

	// Batch operations
	FlushAll(ctx context.Context) error
}

// NewNoOpCache creates a no-op cache using the generic NoOpCache with the adapter
func NewNoOpCache() Cache {
	return NewCacheAdapter(genericcache.NewNoOpCache[Organization]())
}

// CacheAdapter adapts generic cache implementations to the domain Cache interface
type CacheAdapter struct {
	organizationCache genericcache.Cache[Organization]
}

// NewCacheAdapter creates a new cache adapter using generic caches
func NewCacheAdapter(organizationCache genericcache.Cache[Organization]) Cache {
	return &CacheAdapter{
		organizationCache: organizationCache,
	}
}

// GetOrganization retrieves organization from cache by ID
func (a *CacheAdapter) GetOrganization(ctx context.Context, id uuid.UUID) (*Organization, error) {
	entity, err := a.organizationCache.Get(ctx, id.String())
	if err != nil {
		return nil, err
	}
	if entity == nil {
		return nil, ErrCacheMiss
	}
	return entity, nil
}

// SetOrganization stores organization in cache with TTL
func (a *CacheAdapter) SetOrganization(ctx context.Context, entity *Organization, ttl time.Duration) error {
	if entity == nil {
		return nil
	}
	return a.organizationCache.Set(ctx, entity.Id.String(), entity, ttl)
}

// DeleteOrganization removes organization from cache
func (a *CacheAdapter) DeleteOrganization(ctx context.Context, id uuid.UUID) error {
	return a.organizationCache.Delete(ctx, id.String())
}

// FlushAll clears all cached data
func (a *CacheAdapter) FlushAll(ctx context.Context) error {
	if err := a.organizationCache.Clear(ctx); err != nil {
		return err
	}
	return nil
}

// Ensure CacheAdapter implements Cache interface
var _ Cache = (*CacheAdapter)(nil)
