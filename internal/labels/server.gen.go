// Code generated by archesai/codegen. DO NOT EDIT.

package labels

import (
	"context"
	"log/slog"
)

// StrictServer implements StrictServerInterface by delegating to the service
type StrictServer struct {
	service ServiceInterface
	logger  *slog.Logger
}

// NewStrictServer creates a new strict server that implements StrictServerInterface
func NewStrictServer(service ServiceInterface, logger *slog.Logger) StrictServerInterface {
	return &StrictServer{
		service: service,
		logger:  logger,
	}
}

// CreateLabel handles the create label endpoint
func (s *StrictServer) CreateLabel(ctx context.Context, request CreateLabelRequestObject) (CreateLabelResponseObject, error) {
	return s.service.Create(ctx, request)
}

// GetLabel handles the get label endpoint
func (s *StrictServer) GetLabel(ctx context.Context, request GetLabelRequestObject) (GetLabelResponseObject, error) {
	return s.service.Get(ctx, request)
}

// UpdateLabel handles the update label endpoint
func (s *StrictServer) UpdateLabel(ctx context.Context, request UpdateLabelRequestObject) (UpdateLabelResponseObject, error) {
	return s.service.Update(ctx, request)
}

// DeleteLabel handles the delete label endpoint
func (s *StrictServer) DeleteLabel(ctx context.Context, request DeleteLabelRequestObject) (DeleteLabelResponseObject, error) {
	return s.service.Delete(ctx, request)
}

// ListLabels handles the list labels endpoint
func (s *StrictServer) ListLabels(ctx context.Context, request ListLabelsRequestObject) (ListLabelsResponseObject, error) {
	return s.service.List(ctx, request)
}
