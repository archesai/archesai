// Package labels provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package labels

import (
	"time"

	"github.com/google/uuid"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ListLabelsParamsSortField.
const (
	CreatedAt      ListLabelsParamsSortField = "createdAt"
	ID             ListLabelsParamsSortField = "id"
	Name           ListLabelsParamsSortField = "name"
	OrganizationID ListLabelsParamsSortField = "organizationID"
	UpdatedAt      ListLabelsParamsSortField = "updatedAt"
)

// Defines values for ListLabelsParamsSortOrder.
const (
	Asc  ListLabelsParamsSortOrder = "asc"
	Desc ListLabelsParamsSortOrder = "desc"
)

// Base defines model for Base.
type Base struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// ID Universally Unique IDentifier
	ID UUID `json:"id" yaml:"id"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// FilterNode A recursive filter node that can be a condition or group
type FilterNode = interface{}

// Label defines model for Label.
type Label struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// ID Universally Unique IDentifier
	ID UUID `json:"id" yaml:"id"`

	// Name The name of the label
	Name           string `json:"name" yaml:"name"`
	OrganizationID UUID   `json:"organizationID" yaml:"organizationID"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// Page Pagination (page number & size)
type Page struct {
	Number int `json:"number,omitempty,omitzero" yaml:"number,omitempty"`
	Size   int `json:"size,omitempty,omitzero" yaml:"size,omitempty"`
}

// Problem RFC 7807 (Problem Details) compliant error response
type Problem struct {
	// Detail Human-readable explanation specific to this occurrence
	Detail string `json:"detail,omitempty,omitzero" yaml:"detail,omitempty"`

	// Instance URI identifying the specific occurrence
	Instance string `json:"instance,omitempty,omitzero" yaml:"instance,omitempty"`

	// Status HTTP status code
	Status int `json:"status" yaml:"status"`

	// Title Short, human-readable summary
	Title string `json:"title" yaml:"title"`

	// Type URI identifying the problem type
	Type string `json:"type,omitempty,omitzero" yaml:"type,omitempty"`
}

// UUID Universally Unique IDentifier
type UUID = uuid.UUID

// LabelsFilter A recursive filter node that can be a condition or group
type LabelsFilter = FilterNode

// LabelsSort defines model for LabelsSort.
type LabelsSort = []struct {
	Field string `json:"field" yaml:"field"`
	Order string `json:"order" yaml:"order"`
}

// PageQuery Pagination (page number & size)
type PageQuery = Page

// BadRequest RFC 7807 (Problem Details) compliant error response
type BadRequest = Problem

// NotFound RFC 7807 (Problem Details) compliant error response
type NotFound = Problem

// Unauthorized RFC 7807 (Problem Details) compliant error response
type Unauthorized = Problem

// ListLabelsParams defines parameters for ListLabels.
type ListLabelsParams struct {
	// Filter Filter labels by field values. Supported fields:
	// - createdAt, id, updatedAt, name, organizationID
	Filter LabelsFilter `json:"filter,omitempty,omitzero" yaml:"filter,omitempty"`

	// Page The page parameter
	Page PageQuery `form:"page,omitempty" json:"page,omitempty,omitzero" yaml:"page,omitempty"`

	// Sort The sort parameter
	Sort LabelsSort `form:"sort,omitempty" json:"sort,omitempty,omitzero" yaml:"sort,omitempty"`
}

// ListLabelsParamsSortField defines parameters for ListLabels.
type ListLabelsParamsSortField string

// ListLabelsParamsSortOrder defines parameters for ListLabels.
type ListLabelsParamsSortOrder string

// CreateLabelJSONBody defines parameters for CreateLabel.
type CreateLabelJSONBody struct {
	// Name The name of the label
	Name string `json:"name" yaml:"name"`
}

// UpdateLabelJSONBody defines parameters for UpdateLabel.
type UpdateLabelJSONBody struct {
	// Name The name of the label
	Name string `json:"name,omitempty,omitzero" yaml:"name,omitempty"`
}

// CreateLabelJSONRequestBody defines body for CreateLabel for application/json ContentType.
type CreateLabelJSONRequestBody CreateLabelJSONBody

// UpdateLabelJSONRequestBody defines body for UpdateLabel for application/json ContentType.
type UpdateLabelJSONRequestBody UpdateLabelJSONBody
