{{- /*
Template: service.tmpl
Expects: codegen.ServiceTemplateInput
Generates: Service layer implementations
*/ -}}
{{- $package := .Package -}}
{{- range .Entities -}}
{{- $entity := . -}}
{{- $entityName := .Name -}}
{{- $entityNameLower := .NameLower -}}
{{- $entityNamePlural := .NamePlural -}}
{{- $entityNamePluralLower := .NamePluralLower -}}
// Code generated by archesai/codegen. DO NOT EDIT.

package {{ $package }}

import (
	"context"
	"errors"
{{- $hasCreate := false -}}
{{- $hasUpdate := false -}}
{{- $needsUUID := false -}}
{{- range .CodegenExtension.Repository.Operations -}}
{{- if eq . "create" -}}
{{- $hasCreate = true -}}
{{- $needsUUID = true -}}
{{- end -}}
{{- if eq . "update" -}}
{{- $hasUpdate = true -}}
{{- $needsUUID = true -}}
{{- end -}}
{{- if or (eq . "get") (eq . "read") -}}
{{- $needsUUID = true -}}
{{- end -}}
{{- if eq . "delete" -}}
{{- $needsUUID = true -}}
{{- end -}}
{{- end }}
	"log/slog"
{{- if or $hasCreate $hasUpdate }}
	"time"
{{- end }}

	"github.com/archesai/archesai/internal/database/postgresql"
{{- if $needsUUID }}
	"github.com/google/uuid"
{{- end }}
)

// Service implements the business logic
type Service struct {
	repo   Repository
	db     *postgresql.Queries
	logger *slog.Logger
}

// NewService creates a new service implementation
func NewService(repo Repository, db *postgresql.Queries, logger *slog.Logger) *Service {
	return &Service{
		repo:   repo,
		db:     db,
		logger: logger,
	}
}

{{- range .CodegenExtension.Repository.Operations }}
{{- if eq . "list" }}

// List{{ $entityNamePlural }} lists all {{ $entityNamePluralLower }}
func (s *Service) List{{ $entityNamePlural }}(ctx context.Context, filter *List{{ $entityNamePlural }}ParamsFilter, page *List{{ $entityNamePlural }}ParamsPage, sort *List{{ $entityNamePlural }}ParamsSort) ([]*{{ $entityName }}, int64, error) {
	params := List{{ $entityNamePlural }}Params{
		Filter: filter,
		Page:   page,
		Sort:   sort,
	}
	entities, total, err := s.repo.List(ctx, params)
	if err != nil {
		s.logger.Error("Failed to list {{ $entityNamePluralLower }}", "error", err)
		return nil, 0, err
	}

	return entities, total, nil
}
{{- end }}

{{- if eq . "create" }}

// Create{{ $entityName }} creates a new {{ $entityNameLower }}
func (s *Service) Create{{ $entityName }}(ctx context.Context, entity *{{ $entityName }}) (*{{ $entityName }}, error) {
	if entity == nil {
		return nil, errors.New("entity is required")
	}

	// Set timestamps if not already set
	if entity.CreatedAt.IsZero() {
		entity.CreatedAt = time.Now()
	}
	if entity.UpdatedAt.IsZero() {
		entity.UpdatedAt = time.Now()
	}

	created, err := s.repo.Create(ctx, entity)
	if err != nil {
		s.logger.Error("Failed to create {{ $entityNameLower }}", "error", err)
		return nil, err
	}

	return created, nil
}
{{- end }}

{{- if or (eq . "get") (eq . "read") }}

// Get{{ $entityName }} gets a {{ $entityNameLower }} by ID
func (s *Service) Get{{ $entityName }}(ctx context.Context, id uuid.UUID) (*{{ $entityName }}, error) {
	entity, err := s.repo.Get(ctx, id)
	if err != nil {
		if errors.Is(err, Err{{ $entityName }}NotFound) {
			return nil, err
		}
		s.logger.Error("Failed to get {{ $entityNameLower }}", "error", err, "id", id)
		return nil, err
	}

	return entity, nil
}
{{- end }}

{{- if eq . "update" }}

// Update{{ $entityName }} updates a {{ $entityNameLower }}
func (s *Service) Update{{ $entityName }}(ctx context.Context, id uuid.UUID, entity *{{ $entityName }}) (*{{ $entityName }}, error) {
	if entity == nil {
		return nil, errors.New("entity is required")
	}

	// Set updated timestamp
	entity.UpdatedAt = time.Now()

	updated, err := s.repo.Update(ctx, id, entity)
	if err != nil {
		s.logger.Error("Failed to update {{ $entityNameLower }}", "error", err, "id", id)
		return nil, err
	}

	return updated, nil
}
{{- end }}

{{- if eq . "delete" }}

// Delete{{ $entityName }} deletes a {{ $entityNameLower }}
func (s *Service) Delete{{ $entityName }}(ctx context.Context, id uuid.UUID) error {
	// Check if entity exists first
	_, err := s.repo.Get(ctx, id)
	if err != nil {
		if errors.Is(err, Err{{ $entityName }}NotFound) {
			return err
		}
		s.logger.Error("Failed to get {{ $entityNameLower }} for deletion", "error", err, "id", id)
		return err
	}

	err = s.repo.Delete(ctx, id)
	if err != nil {
		s.logger.Error("Failed to delete {{ $entityNameLower }}", "error", err, "id", id)
		return err
	}

	return nil
}
{{- end }}
{{- end }}
{{- end }}