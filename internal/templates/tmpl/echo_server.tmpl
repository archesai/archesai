{{- /*
Template: echo_server.tmpl
Expects: codegen.HandlerTemplateInput
Generates: oapi-codegen style Echo framework HTTP handlers

Expected structure:
- Package: string (package name)
- Domain: string (domain name)
- Operations: []OperationData
  - Name: string (operation ID)
  - GoName: string (PascalCase operation name)
  - Method: string (GET, POST, etc.)
  - Path: string (URL path)
  - HasRequestBody: bool
  - HasBearerAuth: bool
  - HasCookieAuth: bool
  - RequestBodySchema: string (type name)
  - ResponseType: string (response type name)
  - PathParams: []ParamData
  - QueryParams: []ParamData
    - Name: string
    - Type: string (Go type)
    - Required: bool
*/ -}}
// Package {{ .Package }} provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package {{ .Package }}

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

const (
	BearerAuthScopes    = "bearerAuth.Scopes"
	SessionCookieScopes = "sessionCookie.Scopes"
)

// ProblemDetails represents an RFC 7807 problem details response.
type ProblemDetails struct {
	Type     string `json:"type"`
	Title    string `json:"title"`
	Status   int    `json:"status"`
	Detail   string `json:"detail,omitempty"`
	Instance string `json:"instance,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
{{- range .Operations }}
	// {{ .Description }}
	// ({{ .Method }} {{ .Path }})
	{{ .GoName }}(ctx echo.Context{{- range .PathParams }}, {{ .Name }} {{ .Type }}{{- end }}{{- if .QueryParams }}, params {{ .GoName }}Params{{- end }}) error
{{- end }}
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

{{- range .Operations }}

// {{ .GoName }} converts echo context to params.
func (w *ServerInterfaceWrapper) {{ .GoName }}(ctx echo.Context) error {
	var err error
	
	{{- if .PathParams }}
	{{- range .PathParams }}
	// ------------- Path parameter "{{ .Name }}" -------------
	var {{ .Name }} {{ .Type }}

	err = runtime.BindStyledParameterWithOptions("simple", "{{ .Name }}", ctx.Param("{{ .Name }}"), &{{ .Name }}, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter {{ .Name }}: %s", err))
	}
	{{- end }}
	{{- end }}
	{{- if .QueryParams }}

	// Parameter object where we will unmarshal all parameters from the context
	var params {{ .GoName }}Params
	{{- range .QueryParams }}

	// ------------- {{ if .Required }}Required{{ else }}Optional{{ end }} query parameter "{{ .Name }}" -------------
	{{- if eq .Name "filter" }}

	err = runtime.BindQueryParameter("deepObject", true, {{ .Required }}, "{{ .Name }}", ctx.QueryParams(), &params.{{ .Name | title }})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter {{ .Name }}: %s", err))
	}
	{{- else }}

	err = runtime.BindQueryParameter("form", true, {{ .Required }}, "{{ .Name }}", ctx.QueryParams(), &params.{{ .Name | title }})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter {{ .Name }}: %s", err))
	}
	{{- end }}
	{{- end }}

	{{- end }}
	{{- if .HasBearerAuth }}

	ctx.Set(BearerAuthScopes, []string{})
	{{- end }}
	{{- if .HasCookieAuth }}

	ctx.Set(SessionCookieScopes, []string{})
	{{- end }}
	
	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.{{ .GoName }}(ctx{{- range .PathParams }}, {{ .Name }}{{- end }}{{- if .QueryParams }}, params{{- end }})
	return err
}
{{- end }}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

{{- range .Operations }}
	router.{{ .Method | upper }}(baseURL+"{{ .Path | echoPath }}", wrapper.{{ .GoName }})
{{- end }}

}

type BadRequestResponse ProblemDetails

type NotFoundResponse ProblemDetails

type UnauthorizedResponse ProblemDetails

{{- range .Operations }}

type {{ .GoName }}RequestObject struct {
	{{- if .PathParams }}
	{{- range .PathParams }}
	{{ .Name | title }} {{ .Type }} `json:"{{ .Name }}"`
	{{- end }}
	{{- end }}
	{{- if .QueryParams }}
	Params {{ .GoName }}Params
	{{- end }}
	{{- if .HasRequestBody }}
	Body *{{ .RequestBodySchema }}
	{{- end }}
}

type {{ .GoName }}ResponseObject interface {
	Visit{{ .GoName }}Response(w http.ResponseWriter) error
}

{{- if eq .Method "GET" }}

type {{ .GoName }}200JSONResponse struct {
	{{- if .ResponseType }}
	Data {{ .ResponseType }} `json:"data"`
	{{- else }}
	Data []{{ $.Domain | title | singularize }} `json:"data"`
	Meta struct {
		Total int64 `json:"total"`
	} `json:"meta"`
	{{- end }}
}

func (response {{ .GoName }}200JSONResponse) Visit{{ .GoName }}Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}
{{- else if eq .Method "POST" }}
type {{ .GoName }}201JSONResponse struct {
	// Data Schema for {{ .ResponseType | default $.Domain }} entity
	Data {{ .ResponseType | default ($.Domain | title | singularize) }} `json:"data"`
}

func (response {{ .GoName }}201JSONResponse) Visit{{ .GoName }}Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}
{{- else if eq .Method "DELETE" }}
type {{ .GoName }}200JSONResponse struct {
	// Data Schema for {{ .ResponseType | default $.Domain }} entity
	Data {{ .ResponseType | default ($.Domain | title | singularize) }} `json:"data"`
}

func (response {{ .GoName }}200JSONResponse) Visit{{ .GoName }}Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}
{{- else }}
type {{ .GoName }}200JSONResponse struct {
	// Data Schema for {{ .ResponseType | default $.Domain }} entity
	Data {{ .ResponseType | default ($.Domain | title | singularize) }} `json:"data"`
}

func (response {{ .GoName }}200JSONResponse) Visit{{ .GoName }}Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}
{{- end }}

type {{ .GoName }}400Response = BadRequestResponse

func (response {{ .GoName }}400Response) Visit{{ .GoName }}Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type {{ .GoName }}401Response = UnauthorizedResponse

func (response {{ .GoName }}401Response) Visit{{ .GoName }}Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

{{- if ne .Method "POST" }}
type {{ .GoName }}404Response = NotFoundResponse

func (response {{ .GoName }}404Response) Visit{{ .GoName }}Response(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}
{{- end }}
{{- end }}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
{{- range .Operations }}
	// {{ .Description }}
	// ({{ .Method }} {{ .Path }})
	{{ .GoName }}(ctx context.Context, request {{ .GoName }}RequestObject) ({{ .GoName }}ResponseObject, error)
{{- end }}
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

{{- range .Operations }}

// {{ .GoName }} operation middleware
func (sh *strictHandler) {{ .GoName }}(ctx echo.Context{{- range .PathParams }}, {{ .Name }} {{ .Type }}{{- end }}{{- if .QueryParams }}, params {{ .GoName }}Params{{- end }}) error {
	var request {{ .GoName }}RequestObject

	{{- if .PathParams }}
	{{- range .PathParams }}
	request.{{ .Name | title }} = {{ .Name }}
	{{- end }}
	{{- end }}
	{{- if .QueryParams }}
	request.Params = params
	{{- end }}

	{{- if .HasRequestBody }}
	var body {{ .RequestBodySchema }}
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body
	{{- end }}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.{{ .GoName }}(ctx.Request().Context(), request.({{ .GoName }}RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "{{ .GoName }}")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.({{ .GoName }}ResponseObject); ok {
		return validResponse.Visit{{ .GoName }}Response(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
{{- end }}