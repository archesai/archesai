{{- /*
Template: types.tmpl
Expects: codegen.TypesTemplateInput
Generates: Type definitions from OpenAPI schemas

Expected structure:
- Package: string (package name)
- Domain: string (domain name)
- Imports: []string (required imports)
- Schemas: []SchemaData
  - Name: string (schema name)
  - Description: string (schema description)
  - Fields: []FieldData
    - FieldName: string (Go field name, PascalCase)
    - GoType: string (Go type)
    - JSONTag: string (JSON tag value)
    - YAMLTag: string (YAML tag value)
    - Description: string (field description)
    - DefaultValue: string (optional default)
- Constants: []ConstantDef
  - Name: string (constant type name)
  - Values: []string (enum values)
*/ -}}
// Code generated by archesai codegen. DO NOT EDIT.
package {{ .Package }}

{{- if .Imports }}
import (
	{{- range .Imports }}
	"{{ . }}"
	{{- end }}
)
{{- end }}

{{- /* Generate all constant definitions first (just the const blocks) */ -}}
{{- range .Constants }}
{{- if .Values }}

// Defines values for {{ .Name }}.
const (
	{{- $constType := .Name }}
	{{- $prefix := .ConstantPrefix }}
	{{- range .Values }}
	{{- if $prefix }}
	{{ $prefix }}{{ ToConstantCase . }} {{ $constType }} = "{{ . }}"
	{{- else }}
	{{ ToConstantCase . }} {{ $constType }} = "{{ . }}"
	{{- end }}
	{{- end }}
)
{{- end }}
{{- end }}

{{- /* Then generate all enum type definitions */ -}}
{{- range .Constants }}
{{- if .Values }}

// {{ .Name }} represents the type for {{ .Name }} enum values.
type {{ .Name }} string
{{- end }}
{{- end }}

{{- /* Then generate all type aliases */ -}}
{{- range .Schemas }}
{{- if .IsTypeAlias }}

// {{ .Name }}{{ if .Description }} {{ .Description }}{{ end }}
type {{ .Name }} {{ .TypeAlias }}
{{- end }}
{{- end }}

{{- /* Generate core entity types (main business objects, excluding utility types) */ -}}
{{- range .Schemas }}
{{- if and (not (strContains .Name "Response")) (not (strContains .Name "Request")) (not (strContains .Name "Body")) (not (strContains .Name "Params")) (not .IsTypeAlias) (ne .Name "ListMetadata") }}

// {{ .Name }}{{ if .Description }} {{ .Description }}{{ end }}
type {{ .Name }} struct {
{{- range .Fields }}
	{{- if .Description }}
	// {{ .FieldName }} {{ .Description }}
	{{- end }}
	{{ .FieldName }} {{ .GoType }} `json:"{{ .JSONTag }}{{- if strContains .JSONTag ",omitempty" }}{{ else if strContains .JSONTag ",omitzero" }}{{ end }}" yaml:"{{ .YAMLTag }}{{- if and (strContains .JSONTag ",omitempty") (not (strContains .YAMLTag ",omitempty")) }},omitempty{{ else if and (strContains .JSONTag ",omitzero") (not (strContains .YAMLTag ",omitzero")) }},omitzero{{ end }}"{{ if .DefaultValue }} default:"{{ .DefaultValue }}"{{ end }}`
{{- end }}
}
{{- end }}
{{- end }}

{{- /* Second pass: Generate request types */ -}}
{{- range .Schemas }}
{{- if or (strContains .Name "Request") (strContains .Name "Body") }}

// {{ .Name }}{{ if .Description }} {{ .Description }}{{ end }}
type {{ .Name }} struct {
{{- range .Fields }}
	{{- if .Description }}
	// {{ .FieldName }} {{ .Description }}
	{{- end }}
	{{ .FieldName }} {{ .GoType }} `json:"{{ .JSONTag }}{{- if strContains .JSONTag ",omitempty" }}{{ else if strContains .JSONTag ",omitzero" }}{{ end }}" yaml:"{{ .YAMLTag }}{{- if and (strContains .JSONTag ",omitempty") (not (strContains .YAMLTag ",omitempty")) }},omitempty{{ else if and (strContains .JSONTag ",omitzero") (not (strContains .YAMLTag ",omitzero")) }},omitzero{{ end }}"{{ if .DefaultValue }} default:"{{ .DefaultValue }}"{{ end }}`
{{- end }}
}
{{- end }}
{{- end }}

{{- /* Third pass: Generate parameter types */ -}}
{{- range .Schemas }}
{{- if and (strContains .Name "Params") (not .IsTypeAlias) }}

// {{ .Name }}{{ if .Description }} {{ .Description }}{{ end }}
type {{ .Name }} struct {
{{- range .Fields }}
	{{- if .Description }}
	// {{ .FieldName }} {{ .Description }}
	{{- end }}
	{{ .FieldName }} {{ .GoType }} `json:"{{ .JSONTag }}{{- if strContains .JSONTag ",omitempty" }}{{ else if strContains .JSONTag ",omitzero" }}{{ end }}" yaml:"{{ .YAMLTag }}{{- if and (strContains .JSONTag ",omitempty") (not (strContains .YAMLTag ",omitempty")) }},omitempty{{ else if and (strContains .JSONTag ",omitzero") (not (strContains .YAMLTag ",omitzero")) }},omitzero{{ end }}"{{ if .DefaultValue }} default:"{{ .DefaultValue }}"{{ end }}`
{{- end }}
}
{{- end }}
{{- end }}

{{- /* Fourth pass: Generate utility/metadata types */ -}}
{{- range .Schemas }}
{{- if and (not (strContains .Name "Response")) (not (strContains .Name "Request")) (not (strContains .Name "Body")) (not (strContains .Name "Params")) (not .IsTypeAlias) (eq .Name "ListMetadata") }}

// {{ .Name }}{{ if .Description }} {{ .Description }}{{ end }}
type {{ .Name }} struct {
{{- range .Fields }}
	{{- if .Description }}
	// {{ .FieldName }} {{ .Description }}
	{{- end }}
	{{ .FieldName }} {{ .GoType }} `json:"{{ .JSONTag }}{{- if strContains .JSONTag ",omitempty" }}{{ else if strContains .JSONTag ",omitzero" }}{{ end }}" yaml:"{{ .YAMLTag }}{{- if and (strContains .JSONTag ",omitempty") (not (strContains .YAMLTag ",omitempty")) }},omitempty{{ else if and (strContains .JSONTag ",omitzero") (not (strContains .YAMLTag ",omitzero")) }},omitzero{{ end }}"{{ if .DefaultValue }} default:"{{ .DefaultValue }}"{{ end }}`
{{- end }}
}
{{- end }}
{{- end }}

{{- /* Fifth pass: Generate complex response struct types (non-alias response types) */ -}}
{{- range .Schemas }}
{{- if and (strContains .Name "Response") (not .IsTypeAlias) }}

// {{ .Name }}{{ if .Description }} {{ .Description }}{{ end }}
type {{ .Name }} struct {
{{- range .Fields }}
	{{- if .Description }}
	// {{ .FieldName }} {{ .Description }}
	{{- end }}
	{{ .FieldName }} {{ .GoType }} `json:"{{ .JSONTag }}{{- if strContains .JSONTag ",omitempty" }}{{ else if strContains .JSONTag ",omitzero" }}{{ end }}" yaml:"{{ .YAMLTag }}{{- if and (strContains .JSONTag ",omitempty") (not (strContains .YAMLTag ",omitempty")) }},omitempty{{ else if and (strContains .JSONTag ",omitzero") (not (strContains .YAMLTag ",omitzero")) }},omitzero{{ end }}"{{ if .DefaultValue }} default:"{{ .DefaultValue }}"{{ end }}`
{{- end }}
}
{{- end }}
{{- end }}

