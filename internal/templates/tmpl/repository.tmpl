{{- /*
Template: repository.tmpl
Expects: codegen.RepositoryTemplateInput
Generates: Repository interfaces

Expected structure:
- Package: string (package name)
- Domain: string (domain name)
- Entities: []EntityData
  - Name: string (entity name)
  - Type: string (entity type)
  - AdditionalMethods: []MethodData
    - Name: string (method name)
    - Parameters: []ParamData
      - Name: string
      - Type: string
    - Returns: []string (return types)
*/ -}}
// Code generated by codegen repository. DO NOT EDIT.
package {{.Package}}

import (
	"context"

	"github.com/google/uuid"
)

{{range .Entities}}{{$entity := .}}
{{- $repoName := .RepositoryName }}
{{- if not $repoName }}
	{{- $repoName = "Repository" }}
{{- end }}
// {{$repoName}} handles {{lower .Name}} persistence
type {{$repoName}} interface {
	// Basic CRUD operations (always included)
	Create(ctx context.Context, entity *{{.Type}}) (*{{.Type}}, error)
	Get(ctx context.Context, id uuid.UUID) (*{{.Type}}, error)
	Update(ctx context.Context, id uuid.UUID, entity *{{.Type}}) (*{{.Type}}, error)
	Delete(ctx context.Context, id uuid.UUID) error
	List(ctx context.Context, params List{{.Name}}sParams) ([]*{{.Type}}, int64, error)
{{if .AdditionalMethods}}
	// Additional operations
{{range .AdditionalMethods}}	// {{.Name}} retrieves {{if hasPrefix .Name "List"}}multiple {{$entity.Type | singularize | lower}}s{{else}}a single {{$entity.Type | singularize | lower}}{{end}}{{if .Parameters}} by {{range $i, $p := .Parameters}}{{if $i}} and {{end}}{{$p.Name}}{{end}}{{end}}
	{{.Name}}(ctx context.Context{{range $i, $param := .Parameters}}, {{$param.Name}} {{$param.Type}}{{end}}) ({{range $i, $ret := .Returns}}{{if $i}}, {{end}}{{$ret}}{{end}})
{{end}}{{end}}
}
{{end}}

