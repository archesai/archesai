// Code generated by archesai/codegen. DO NOT EDIT.

package invitations

import (
	"context"
	"log/slog"
)

// StrictServer implements StrictServerInterface by delegating to the service
type StrictServer struct {
	service ServiceInterface
	logger  *slog.Logger
}

// NewStrictServer creates a new strict server that implements StrictServerInterface
func NewStrictServer(service ServiceInterface, logger *slog.Logger) StrictServerInterface {
	return &StrictServer{
		service: service,
		logger:  logger,
	}
}

// CreateInvitation handles the create invitation endpoint
func (s *StrictServer) CreateInvitation(ctx context.Context, request CreateInvitationRequestObject) (CreateInvitationResponseObject, error) {
	return s.service.Create(ctx, request)
}

// GetInvitation handles the get invitation endpoint
func (s *StrictServer) GetInvitation(ctx context.Context, request GetInvitationRequestObject) (GetInvitationResponseObject, error) {
	return s.service.Get(ctx, request)
}

// UpdateInvitation handles the update invitation endpoint
func (s *StrictServer) UpdateInvitation(ctx context.Context, request UpdateInvitationRequestObject) (UpdateInvitationResponseObject, error) {
	return s.service.Update(ctx, request)
}

// DeleteInvitation handles the delete invitation endpoint
func (s *StrictServer) DeleteInvitation(ctx context.Context, request DeleteInvitationRequestObject) (DeleteInvitationResponseObject, error) {
	return s.service.Delete(ctx, request)
}

// ListInvitations handles the list invitations endpoint
func (s *StrictServer) ListInvitations(ctx context.Context, request ListInvitationsRequestObject) (ListInvitationsResponseObject, error) {
	return s.service.List(ctx, request)
}
