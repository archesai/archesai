// Code generated by codegen repository. DO NOT EDIT.
package invitations

import (
	"context"
	"fmt"
	"github.com/google/uuid"
)

// Repository handles invitation persistence
type Repository interface {
	Create(ctx context.Context, entity *Invitation) (*Invitation, error)
	Get(ctx context.Context, id uuid.UUID) (*Invitation, error)
	Update(ctx context.Context, id uuid.UUID, entity *Invitation) (*Invitation, error)
	Delete(ctx context.Context, id uuid.UUID) error
	List(ctx context.Context, params ListInvitationsParams) ([]*Invitation, int64, error)

	// Additional operations
	ListByOrganization(ctx context.Context, organizationId string) ([]*Invitation, error)
	GetByEmail(ctx context.Context, email string, organizationId string) (*Invitation, error)
	ListByInviter(ctx context.Context, inviterId string) ([]*Invitation, error)
}

// RepositoryError represents a repository error.
type RepositoryError struct {
	Operation string
	Err       error
}

func (e *RepositoryError) Error() string {
	return fmt.Sprintf("repository %s: %v", e.Operation, e.Err)
}

func (e *RepositoryError) Unwrap() error {
	return e.Err
}

// NewRepositoryError creates a new repository error.
func NewRepositoryError(operation string, err error) *RepositoryError {
	return &RepositoryError{
		Operation: operation,
		Err:       err,
	}
}
