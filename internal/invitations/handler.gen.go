// Package invitations provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package invitations

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

const (
	BearerAuthScopes    = "bearerAuth.Scopes"
	SessionCookieScopes = "sessionCookie.Scopes"
)

// ProblemDetails represents an RFC 7807 problem details response.
type ProblemDetails struct {
	Type     string `json:"type"`
	Title    string `json:"title"`
	Status   int    `json:"status"`
	Detail   string `json:"detail,omitempty"`
	Instance string `json:"instance,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List invitations
	// (GET /organizations/{id}/invitations)
	ListInvitations(ctx echo.Context, id uuid.UUID, params ListInvitationsParams) error
	// Create an invitation
	// (POST /organizations/{id}/invitations)
	CreateInvitation(ctx echo.Context, id uuid.UUID) error
	// Delete an invitation
	// (DELETE /organizations/{id}/invitations/{invitationID})
	DeleteInvitation(ctx echo.Context, id uuid.UUID, invitationID uuid.UUID) error
	// Get an invitation
	// (GET /organizations/{id}/invitations/{invitationID})
	GetInvitation(ctx echo.Context, id uuid.UUID, invitationID uuid.UUID) error
	// Update an invitation
	// (PATCH /organizations/{id}/invitations/{invitationID})
	UpdateInvitation(ctx echo.Context, id uuid.UUID, invitationID uuid.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListInvitations converts echo context to params.
func (w *ServerInterfaceWrapper) ListInvitations(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id uuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListInvitationsParams

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListInvitations(ctx, id, params)
	return err
}

// CreateInvitation converts echo context to params.
func (w *ServerInterfaceWrapper) CreateInvitation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id uuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateInvitation(ctx, id)
	return err
}

// DeleteInvitation converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteInvitation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id uuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	// ------------- Path parameter "invitationID" -------------
	var invitationID uuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "invitationID", ctx.Param("invitationID"), &invitationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invitationID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteInvitation(ctx, id, invitationID)
	return err
}

// GetInvitation converts echo context to params.
func (w *ServerInterfaceWrapper) GetInvitation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id uuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	// ------------- Path parameter "invitationID" -------------
	var invitationID uuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "invitationID", ctx.Param("invitationID"), &invitationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invitationID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInvitation(ctx, id, invitationID)
	return err
}

// UpdateInvitation converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInvitation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id uuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	// ------------- Path parameter "invitationID" -------------
	var invitationID uuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "invitationID", ctx.Param("invitationID"), &invitationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invitationID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateInvitation(ctx, id, invitationID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}
	router.GET(baseURL+"/organizations/:id/invitations", wrapper.ListInvitations)
	router.POST(baseURL+"/organizations/:id/invitations", wrapper.CreateInvitation)
	router.DELETE(baseURL+"/organizations/:id/invitations/:invitationID", wrapper.DeleteInvitation)
	router.GET(baseURL+"/organizations/:id/invitations/:invitationID", wrapper.GetInvitation)
	router.PATCH(baseURL+"/organizations/:id/invitations/:invitationID", wrapper.UpdateInvitation)

}

type BadRequestResponse ProblemDetails

type NotFoundResponse ProblemDetails

type UnauthorizedResponse ProblemDetails

type ListInvitationsRequestObject struct {
	ID     uuid.UUID `json:"id"`
	Params ListInvitationsParams
}

type ListInvitationsResponseObject interface {
	VisitListInvitationsResponse(w http.ResponseWriter) error
}

type ListInvitations200JSONResponse struct {
	Data []Invitation `json:"data"`
	Meta struct {
		Total int64 `json:"total"`
	} `json:"meta"`
}

func (response ListInvitations200JSONResponse) VisitListInvitationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListInvitations400Response = BadRequestResponse

func (response ListInvitations400Response) VisitListInvitationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListInvitations401Response = UnauthorizedResponse

func (response ListInvitations401Response) VisitListInvitationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListInvitations404Response = NotFoundResponse

func (response ListInvitations404Response) VisitListInvitationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateInvitationRequestObject struct {
	ID   uuid.UUID `json:"id"`
	Body *CreateInvitationRequestBody
}

type CreateInvitationResponseObject interface {
	VisitCreateInvitationResponse(w http.ResponseWriter) error
}
type CreateInvitation201JSONResponse struct {
	// Data Schema for invitations entity
	Data Invitation `json:"data"`
}

func (response CreateInvitation201JSONResponse) VisitCreateInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateInvitation400Response = BadRequestResponse

func (response CreateInvitation400Response) VisitCreateInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateInvitation401Response = UnauthorizedResponse

func (response CreateInvitation401Response) VisitCreateInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteInvitationRequestObject struct {
	ID           uuid.UUID `json:"id"`
	InvitationID uuid.UUID `json:"invitationID"`
}

type DeleteInvitationResponseObject interface {
	VisitDeleteInvitationResponse(w http.ResponseWriter) error
}
type DeleteInvitation200JSONResponse struct {
	// Data Schema for invitations entity
	Data Invitation `json:"data"`
}

func (response DeleteInvitation200JSONResponse) VisitDeleteInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteInvitation400Response = BadRequestResponse

func (response DeleteInvitation400Response) VisitDeleteInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteInvitation401Response = UnauthorizedResponse

func (response DeleteInvitation401Response) VisitDeleteInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteInvitation404Response = NotFoundResponse

func (response DeleteInvitation404Response) VisitDeleteInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetInvitationRequestObject struct {
	ID           uuid.UUID `json:"id"`
	InvitationID uuid.UUID `json:"invitationID"`
}

type GetInvitationResponseObject interface {
	VisitGetInvitationResponse(w http.ResponseWriter) error
}

type GetInvitation200JSONResponse struct {
	Data []Invitation `json:"data"`
	Meta struct {
		Total int64 `json:"total"`
	} `json:"meta"`
}

func (response GetInvitation200JSONResponse) VisitGetInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetInvitation400Response = BadRequestResponse

func (response GetInvitation400Response) VisitGetInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetInvitation401Response = UnauthorizedResponse

func (response GetInvitation401Response) VisitGetInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetInvitation404Response = NotFoundResponse

func (response GetInvitation404Response) VisitGetInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateInvitationRequestObject struct {
	ID           uuid.UUID `json:"id"`
	InvitationID uuid.UUID `json:"invitationID"`
	Body         *UpdateInvitationRequestBody
}

type UpdateInvitationResponseObject interface {
	VisitUpdateInvitationResponse(w http.ResponseWriter) error
}
type UpdateInvitation200JSONResponse struct {
	// Data Schema for invitations entity
	Data Invitation `json:"data"`
}

func (response UpdateInvitation200JSONResponse) VisitUpdateInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateInvitation400Response = BadRequestResponse

func (response UpdateInvitation400Response) VisitUpdateInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateInvitation401Response = UnauthorizedResponse

func (response UpdateInvitation401Response) VisitUpdateInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateInvitation404Response = NotFoundResponse

func (response UpdateInvitation404Response) VisitUpdateInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List invitations
	// (GET /organizations/{id}/invitations)
	ListInvitations(ctx context.Context, request ListInvitationsRequestObject) (ListInvitationsResponseObject, error)
	// Create an invitation
	// (POST /organizations/{id}/invitations)
	CreateInvitation(ctx context.Context, request CreateInvitationRequestObject) (CreateInvitationResponseObject, error)
	// Delete an invitation
	// (DELETE /organizations/{id}/invitations/{invitationID})
	DeleteInvitation(ctx context.Context, request DeleteInvitationRequestObject) (DeleteInvitationResponseObject, error)
	// Get an invitation
	// (GET /organizations/{id}/invitations/{invitationID})
	GetInvitation(ctx context.Context, request GetInvitationRequestObject) (GetInvitationResponseObject, error)
	// Update an invitation
	// (PATCH /organizations/{id}/invitations/{invitationID})
	UpdateInvitation(ctx context.Context, request UpdateInvitationRequestObject) (UpdateInvitationResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ListInvitations operation middleware
func (sh *strictHandler) ListInvitations(ctx echo.Context, id uuid.UUID, params ListInvitationsParams) error {
	var request ListInvitationsRequestObject
	request.ID = id
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListInvitations(ctx.Request().Context(), request.(ListInvitationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListInvitations")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListInvitationsResponseObject); ok {
		return validResponse.VisitListInvitationsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateInvitation operation middleware
func (sh *strictHandler) CreateInvitation(ctx echo.Context, id uuid.UUID) error {
	var request CreateInvitationRequestObject
	request.ID = id
	var body CreateInvitationRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateInvitation(ctx.Request().Context(), request.(CreateInvitationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateInvitation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateInvitationResponseObject); ok {
		return validResponse.VisitCreateInvitationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteInvitation operation middleware
func (sh *strictHandler) DeleteInvitation(ctx echo.Context, id uuid.UUID, invitationID uuid.UUID) error {
	var request DeleteInvitationRequestObject
	request.ID = id
	request.InvitationID = invitationID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteInvitation(ctx.Request().Context(), request.(DeleteInvitationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteInvitation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteInvitationResponseObject); ok {
		return validResponse.VisitDeleteInvitationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetInvitation operation middleware
func (sh *strictHandler) GetInvitation(ctx echo.Context, id uuid.UUID, invitationID uuid.UUID) error {
	var request GetInvitationRequestObject
	request.ID = id
	request.InvitationID = invitationID

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetInvitation(ctx.Request().Context(), request.(GetInvitationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetInvitation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetInvitationResponseObject); ok {
		return validResponse.VisitGetInvitationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateInvitation operation middleware
func (sh *strictHandler) UpdateInvitation(ctx echo.Context, id uuid.UUID, invitationID uuid.UUID) error {
	var request UpdateInvitationRequestObject
	request.ID = id
	request.InvitationID = invitationID
	var body UpdateInvitationRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateInvitation(ctx.Request().Context(), request.(UpdateInvitationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateInvitation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateInvitationResponseObject); ok {
		return validResponse.VisitUpdateInvitationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
