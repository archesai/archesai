// Package invitations provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package invitations

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Find many invitations
	// (GET /organizations/{id}/invitations)
	FindManyInvitations(ctx echo.Context, id openapi_types.UUID, params FindManyInvitationsParams) error
	// Create a new invitation
	// (POST /organizations/{id}/invitations)
	CreateInvitation(ctx echo.Context, id openapi_types.UUID) error
	// Delete an invitation
	// (DELETE /organizations/{id}/invitations/{invitationId})
	DeleteInvitation(ctx echo.Context, id openapi_types.UUID, invitationId openapi_types.UUID) error
	// Find an invitation
	// (GET /organizations/{id}/invitations/{invitationId})
	GetOneInvitation(ctx echo.Context, id openapi_types.UUID, invitationId openapi_types.UUID) error
	// Update an invitation
	// (PATCH /organizations/{id}/invitations/{invitationId})
	UpdateInvitation(ctx echo.Context, id openapi_types.UUID, invitationId openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindManyInvitations converts echo context to params.
func (w *ServerInterfaceWrapper) FindManyInvitations(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindManyInvitationsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindManyInvitations(ctx, id, params)
	return err
}

// CreateInvitation converts echo context to params.
func (w *ServerInterfaceWrapper) CreateInvitation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateInvitation(ctx, id)
	return err
}

// DeleteInvitation converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteInvitation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "invitationId" -------------
	var invitationId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "invitationId", ctx.Param("invitationId"), &invitationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invitationId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteInvitation(ctx, id, invitationId)
	return err
}

// GetOneInvitation converts echo context to params.
func (w *ServerInterfaceWrapper) GetOneInvitation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "invitationId" -------------
	var invitationId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "invitationId", ctx.Param("invitationId"), &invitationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invitationId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOneInvitation(ctx, id, invitationId)
	return err
}

// UpdateInvitation converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInvitation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "invitationId" -------------
	var invitationId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "invitationId", ctx.Param("invitationId"), &invitationId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invitationId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateInvitation(ctx, id, invitationId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/organizations/:id/invitations", wrapper.FindManyInvitations)
	router.POST(baseURL+"/organizations/:id/invitations", wrapper.CreateInvitation)
	router.DELETE(baseURL+"/organizations/:id/invitations/:invitationId", wrapper.DeleteInvitation)
	router.GET(baseURL+"/organizations/:id/invitations/:invitationId", wrapper.GetOneInvitation)
	router.PATCH(baseURL+"/organizations/:id/invitations/:invitationId", wrapper.UpdateInvitation)

}

type BadRequestApplicationProblemPlusJSONResponse Problem

type NotFoundApplicationProblemPlusJSONResponse Problem

type UnauthorizedApplicationProblemPlusJSONResponse Problem

type FindManyInvitationsRequestObject struct {
	Id     openapi_types.UUID `json:"id"`
	Params FindManyInvitationsParams
}

type FindManyInvitationsResponseObject interface {
	VisitFindManyInvitationsResponse(w http.ResponseWriter) error
}

type FindManyInvitations200JSONResponse struct {
	Data []Invitation `json:"data"`
	Meta struct {
		// Total Total number of items in the collection
		Total float32 `json:"total"`
	} `json:"meta"`
}

func (response FindManyInvitations200JSONResponse) VisitFindManyInvitationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FindManyInvitations400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response FindManyInvitations400ApplicationProblemPlusJSONResponse) VisitFindManyInvitationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type FindManyInvitations401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response FindManyInvitations401ApplicationProblemPlusJSONResponse) VisitFindManyInvitationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateInvitationRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *CreateInvitationJSONRequestBody
}

type CreateInvitationResponseObject interface {
	VisitCreateInvitationResponse(w http.ResponseWriter) error
}

type CreateInvitation201JSONResponse struct {
	// Data Schema for Invitation entity
	Data Invitation `json:"data"`
}

func (response CreateInvitation201JSONResponse) VisitCreateInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateInvitation400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response CreateInvitation400ApplicationProblemPlusJSONResponse) VisitCreateInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateInvitation401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response CreateInvitation401ApplicationProblemPlusJSONResponse) VisitCreateInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteInvitationRequestObject struct {
	Id           openapi_types.UUID `json:"id"`
	InvitationId openapi_types.UUID `json:"invitationId"`
}

type DeleteInvitationResponseObject interface {
	VisitDeleteInvitationResponse(w http.ResponseWriter) error
}

type DeleteInvitation200JSONResponse struct {
	// Data Schema for Invitation entity
	Data Invitation `json:"data"`
}

func (response DeleteInvitation200JSONResponse) VisitDeleteInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteInvitation404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response DeleteInvitation404ApplicationProblemPlusJSONResponse) VisitDeleteInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetOneInvitationRequestObject struct {
	Id           openapi_types.UUID `json:"id"`
	InvitationId openapi_types.UUID `json:"invitationId"`
}

type GetOneInvitationResponseObject interface {
	VisitGetOneInvitationResponse(w http.ResponseWriter) error
}

type GetOneInvitation200JSONResponse struct {
	// Data Schema for Invitation entity
	Data Invitation `json:"data"`
}

func (response GetOneInvitation200JSONResponse) VisitGetOneInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOneInvitation404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response GetOneInvitation404ApplicationProblemPlusJSONResponse) VisitGetOneInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateInvitationRequestObject struct {
	Id           openapi_types.UUID `json:"id"`
	InvitationId openapi_types.UUID `json:"invitationId"`
	Body         *UpdateInvitationJSONRequestBody
}

type UpdateInvitationResponseObject interface {
	VisitUpdateInvitationResponse(w http.ResponseWriter) error
}

type UpdateInvitation200JSONResponse struct {
	// Data Schema for Invitation entity
	Data Invitation `json:"data"`
}

func (response UpdateInvitation200JSONResponse) VisitUpdateInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateInvitation404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response UpdateInvitation404ApplicationProblemPlusJSONResponse) VisitUpdateInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Find many invitations
	// (GET /organizations/{id}/invitations)
	FindManyInvitations(ctx context.Context, request FindManyInvitationsRequestObject) (FindManyInvitationsResponseObject, error)
	// Create a new invitation
	// (POST /organizations/{id}/invitations)
	CreateInvitation(ctx context.Context, request CreateInvitationRequestObject) (CreateInvitationResponseObject, error)
	// Delete an invitation
	// (DELETE /organizations/{id}/invitations/{invitationId})
	DeleteInvitation(ctx context.Context, request DeleteInvitationRequestObject) (DeleteInvitationResponseObject, error)
	// Find an invitation
	// (GET /organizations/{id}/invitations/{invitationId})
	GetOneInvitation(ctx context.Context, request GetOneInvitationRequestObject) (GetOneInvitationResponseObject, error)
	// Update an invitation
	// (PATCH /organizations/{id}/invitations/{invitationId})
	UpdateInvitation(ctx context.Context, request UpdateInvitationRequestObject) (UpdateInvitationResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// FindManyInvitations operation middleware
func (sh *strictHandler) FindManyInvitations(ctx echo.Context, id openapi_types.UUID, params FindManyInvitationsParams) error {
	var request FindManyInvitationsRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FindManyInvitations(ctx.Request().Context(), request.(FindManyInvitationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindManyInvitations")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FindManyInvitationsResponseObject); ok {
		return validResponse.VisitFindManyInvitationsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateInvitation operation middleware
func (sh *strictHandler) CreateInvitation(ctx echo.Context, id openapi_types.UUID) error {
	var request CreateInvitationRequestObject

	request.Id = id

	var body CreateInvitationJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateInvitation(ctx.Request().Context(), request.(CreateInvitationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateInvitation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateInvitationResponseObject); ok {
		return validResponse.VisitCreateInvitationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteInvitation operation middleware
func (sh *strictHandler) DeleteInvitation(ctx echo.Context, id openapi_types.UUID, invitationId openapi_types.UUID) error {
	var request DeleteInvitationRequestObject

	request.Id = id
	request.InvitationId = invitationId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteInvitation(ctx.Request().Context(), request.(DeleteInvitationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteInvitation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteInvitationResponseObject); ok {
		return validResponse.VisitDeleteInvitationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetOneInvitation operation middleware
func (sh *strictHandler) GetOneInvitation(ctx echo.Context, id openapi_types.UUID, invitationId openapi_types.UUID) error {
	var request GetOneInvitationRequestObject

	request.Id = id
	request.InvitationId = invitationId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOneInvitation(ctx.Request().Context(), request.(GetOneInvitationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOneInvitation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetOneInvitationResponseObject); ok {
		return validResponse.VisitGetOneInvitationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateInvitation operation middleware
func (sh *strictHandler) UpdateInvitation(ctx echo.Context, id openapi_types.UUID, invitationId openapi_types.UUID) error {
	var request UpdateInvitationRequestObject

	request.Id = id
	request.InvitationId = invitationId

	var body UpdateInvitationJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateInvitation(ctx.Request().Context(), request.(UpdateInvitationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateInvitation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateInvitationResponseObject); ok {
		return validResponse.VisitUpdateInvitationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
