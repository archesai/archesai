// Code generated by codegen repository. DO NOT EDIT.
package {{.Domain}}

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"time"

	"github.com/archesai/archesai/internal/database/postgresql"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgxpool"{{if .HasEmailField}}
	"github.com/oapi-codegen/runtime/types"{{end}}
)

// PostgresRepository implements Repository using PostgreSQL.
type PostgresRepository struct {
	db      *pgxpool.Pool
	queries *postgresql.Queries
}

// NewPostgresRepository creates a new PostgreSQL repository.
func NewPostgresRepository(db *pgxpool.Pool) Repository {
	return &PostgresRepository{
		db:      db,
		queries: postgresql.New(db),
	}
}

{{range .Entities}}{{$entity := .}}
// {{.Name}} operations

// Create creates a new {{lower .Name}}
func (r *PostgresRepository) Create(ctx context.Context, entity *{{.Type}}) (*{{.Type}}, error) {
	params := postgresql.Create{{.Name}}Params{
		ID: entity.ID,
		{{range .Fields}}{{if ne .Name "id"}}{{if ne .Name "createdAt"}}{{if ne .Name "updatedAt"}}{{if ne .Name "completedAt"}}{{if ne .Name "startedAt"}}{{if ne .Name "error"}}{{if .SQLCType}}
		{{.SQLCFieldName}}: {{generateCreateTypeConversion .GoType .SQLCType "entity" .FieldName}},{{end}}{{end}}{{end}}{{end}}{{end}}{{end}}{{end}}{{end}}
	}

	result, err := r.queries.Create{{.Name}}(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to create {{lower .Name}}: %w", err)
	}

	return map{{.Name}}FromDB(&result), nil
}

// Get retrieves a {{lower .Name}} by ID
func (r *PostgresRepository) Get(ctx context.Context, id uuid.UUID) (*{{.Type}}, error) {
	result, err := r.queries.Get{{.Name}}(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, Err{{.Name}}NotFound
		}
		return nil, fmt.Errorf("failed to get {{lower .Name}}: %w", err)
	}

	return map{{.Name}}FromDB(&result), nil
}

// Update updates an existing {{lower .Name}}
func (r *PostgresRepository) Update(ctx context.Context, id uuid.UUID, entity *{{.Type}}) (*{{.Type}}, error) {
	params := postgresql.Update{{.Name}}Params{
		ID: id,
		{{range .Fields}}{{if not (isUpdateExcluded .Name $entity.UpdateExclude)}}{{if ne .Name "id"}}{{if ne .Name "createdAt"}}{{if ne .Name "updatedAt"}}{{if ne .Name "organizationID"}}{{if ne .Name "producerID"}}{{if ne .Name "inviterID"}}{{if ne .Name "userID"}}{{if ne .Name "accountID"}}{{if ne .Name "providerID"}}{{if .SQLCType}}
		{{.SQLCFieldName}}: {{generateUpdateTypeConversion .GoType .SQLCType "entity" .FieldName}},{{end}}{{end}}{{end}}{{end}}{{end}}{{end}}{{end}}{{end}}{{end}}{{end}}{{end}}{{end}}
	}

	result, err := r.queries.Update{{.Name}}(ctx, params)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, Err{{.Name}}NotFound
		}
		return nil, fmt.Errorf("failed to update {{lower .Name}}: %w", err)
	}

	return map{{.Name}}FromDB(&result), nil
}

// Delete removes a {{lower .Name}}
func (r *PostgresRepository) Delete(ctx context.Context, id uuid.UUID) error {
	err := r.queries.Delete{{.Name}}(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return Err{{.Name}}NotFound
		}
		return fmt.Errorf("failed to delete {{lower .Name}}: %w", err)
	}
	return nil
}

// List returns a paginated list of {{lower .Name}}s
func (r *PostgresRepository) List(ctx context.Context, params List{{.Name}}sParams) ([]*{{.Type}}, int64, error) {
	// Calculate offset from page
	offset := int32(0)
	limit := int32(10) // default

	// Check if params has Page field with Number and Size
	if params.Page.Number > 0 && params.Page.Size > 0 {
		offset = int32((params.Page.Number - 1) * params.Page.Size)
		limit = int32(params.Page.Size)
	}

	listParams := postgresql.List{{.Name}}sParams{
		Limit:  limit,
		Offset: offset,
	}

	results, err := r.queries.List{{.Name}}s(ctx, listParams)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list {{lower .Name}}s: %w", err)
	}

	items := make([]*{{.Type}}, len(results))
	for i, result := range results {
		items[i] = map{{.Name}}FromDB(&result)
	}

	// For now, return the count as the length of results
	// In production, you'd want a separate count query
	count := int64(len(results))

	return items, count, nil
}

{{/* Generate additional methods dynamically */}}
{{if .AdditionalMethods}}{{range .AdditionalMethods}}
// {{.Name}} {{if eq .Returns "single"}}retrieves {{$entity.Name | lower}} by {{range .Params}}{{.}}{{end}}{{else if eq .Returns "multiple"}}retrieves multiple {{$entity.Name | lower}}s by {{range .Params}}{{.}}{{end}}{{else if eq .Returns "void"}}performs {{.Name}} operation{{else}}performs {{.Name}} operation{{end}}
func (r *PostgresRepository) {{.Name}}(ctx context.Context{{range $i, $param := .Params}}, {{$param}} {{paramType $param}}{{end}}) {{if eq .Returns "single"}}(*{{$entity.Type}}, error){{else if eq .Returns "multiple"}}([]*{{$entity.Type}}, error){{else if eq .Returns "void"}}error{{else}}error{{end}} {
	// TODO: Implement {{.Name}} - this needs a custom SQLC query
	// The implementation depends on the specific query available in SQLC
	{{if eq .Returns "single"}}
	return nil, fmt.Errorf("{{.Name}} not implemented - add SQLC query")
	{{else if eq .Returns "multiple"}}
	return nil, fmt.Errorf("{{.Name}} not implemented - add SQLC query")
	{{else if eq .Returns "void"}}
	return fmt.Errorf("{{.Name}} not implemented - add SQLC query")
	{{else}}
	return fmt.Errorf("{{.Name}} not implemented - add SQLC query")
	{{end}}
}
{{end}}{{end}}
{{end}}

// Mapper functions - Convert between domain types and database types
{{range .Entities}}{{$entity := .}}
func map{{.Name}}FromDB(db *postgresql.{{.Name}}) *{{.Type}} {
	if db == nil {
		return nil
	}

	result := &{{.Type}}{
		ID:        db.ID,
		CreatedAt: db.CreatedAt,
		UpdatedAt: db.UpdatedAt,
		{{range .Fields}}{{if ne .Name "id"}}{{if ne .Name "createdAt"}}{{if ne .Name "updatedAt"}}{{if .SQLCType}}
		{{.FieldName}}: {{generateTypeConversion .GoType .SQLCType "db" .FieldName}},
		{{end}}{{end}}{{end}}{{end}}{{end}}
	}

	return result
}
{{end}}

// Helper functions for conversions
func stringPtr(s string) *string {
	if s == "" {
		return nil
	}
	return &s
}

func nilIfEmpty(s string) *string {
	if s == "" {
		return nil
	}
	return &s
}

func stringFromPtr(s *string) string {
	if s == nil {
		return ""
	}
	return *s
}

func boolPtr(b bool) *bool {
	return &b
}

func int32Ptr(i int32) *int32 {
	return &i
}

func float32Ptr(f float32) *float32 {
	return &f
}

func float64Ptr(f float64) *float64 {
	return &f
}

func marshalJSON(v interface{}) *string {
	if v == nil {
		return nil
	}
	data, err := json.Marshal(v)
	if err != nil {
		return nil
	}
	s := string(data)
	return &s
}

func unmarshalJSON(s *string) map[string]interface{} {
	if s == nil {
		return nil
	}
	var result map[string]interface{}
	if err := json.Unmarshal([]byte(*s), &result); err != nil {
		return nil
	}
	return result
}

func uuidFromPtr(u *uuid.UUID) uuid.UUID {
	if u == nil {
		return uuid.Nil
	}
	return *u
}

func timeFromPtr(t *time.Time) time.Time {
	if t == nil {
		return time.Time{}
	}
	return *t
}