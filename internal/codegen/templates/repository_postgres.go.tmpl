// Code generated by codegen repository. DO NOT EDIT.
package {{.Domain}}

import (
	"context"
	"errors"

	"github.com/archesai/archesai/internal/database/postgresql"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgxpool"
{{range .Imports}}	"{{.}}"
{{end}}
)

// PostgresRepository implements Repository using PostgreSQL.
type PostgresRepository struct {
	db      *pgxpool.Pool
	queries *postgresql.Queries
}

// NewPostgresRepository creates a new PostgreSQL repository.
func NewPostgresRepository(db *pgxpool.Pool) Repository {
	return &PostgresRepository{
		db:      db,
		queries: postgresql.New(db),
	}
}

{{range .Entities}}{{$entity := .}}
// {{.Name}} operations

{{if contains .Operations "create"}}
func (r *PostgresRepository) Create(ctx context.Context, entity *{{.Type}}) (*{{.Type}}, error) {
	// Check if SQLC has the Create{{.Name}} method
	// For now, we'll generate a stub but with proper error handling
	// TODO: Parse SQLC to detect available queries

	// Example of what it should look like when SQLC query exists:
	// params := postgresql.Create{{.Name}}Params{
	//     Id: entity.Id,
	//     // ... map other fields
	// }
	// db{{.Name}}, err := r.queries.Create{{.Name}}(ctx, params)
	// if err != nil {
	//     return nil, err
	// }
	// return map{{.Name}}ToDomain(&db{{.Name}}), nil

	return nil, errors.New("not implemented - SQLC query not found")
}
{{end}}

{{if contains .Operations "read"}}
func (r *PostgresRepository) Get(ctx context.Context, id uuid.UUID) (*{{.Type}}, error) {
	// Try to call SQLC Get{{.Name}} if it exists
	// For now, return not implemented
	return nil, errors.New("not implemented - SQLC query not found")
}
{{end}}

{{if contains .Operations "update"}}
func (r *PostgresRepository) Update(ctx context.Context, id uuid.UUID, entity *{{.Type}}) (*{{.Type}}, error) {
	// Update operations are often custom and may not have SQLC queries
	return nil, errors.New("not implemented - SQLC query not found")
}
{{end}}

{{if contains .Operations "delete"}}
func (r *PostgresRepository) Delete(ctx context.Context, id uuid.UUID) error {
	// Try to call SQLC Delete{{.Name}} if it exists
	// For now, return not implemented
	return errors.New("not implemented - SQLC query not found")
}
{{end}}

{{if contains .Operations "list"}}
func (r *PostgresRepository) List(ctx context.Context, params List{{.Name}}sParams) ([]*{{.Type}}, int64, error) {
	// List operations need both List and Count queries from SQLC
	return nil, 0, errors.New("not implemented - SQLC query not found")
}
{{end}}

{{/* Generate additional methods dynamically */}}
{{if .AdditionalMethods}}{{range .AdditionalMethods}}
// {{.Name}} {{if eq .Returns "single"}}retrieves {{$entity.Name | lower}} by {{range .Params}}{{.}}{{end}}{{else if eq .Returns "multiple"}}retrieves multiple {{$entity.Name | lower}}s by {{range .Params}}{{.}}{{end}}{{else if eq .Returns "void"}}deletes {{$entity.Name | lower}} by {{range .Params}}{{.}}{{end}}{{else}}performs {{.Name}} operation{{end}}
func (r *PostgresRepository) {{.Name}}(ctx context.Context{{range $i, $param := .Params}}, {{$param}} {{paramType $param}}{{end}}) {{if eq .Returns "single"}}(*{{$entity.Type}}, error){{else if eq .Returns "multiple"}}([]*{{$entity.Type}}, error){{else if eq .Returns "void"}}error{{else}}error{{end}} {
	{{if eq .Returns "single"}}
	// Try to call SQLC {{.Name}} if it exists
	// For now, return not implemented
	return nil, errors.New("not implemented - SQLC query not found")
	{{else if eq .Returns "multiple"}}
	// Try to call SQLC {{.Name}} if it exists
	// For now, return not implemented
	return nil, errors.New("not implemented - SQLC query not found")
	{{else if eq .Returns "void"}}
	// Try to call SQLC {{.Name}} if it exists
	// For now, return not implemented
	return errors.New("not implemented - SQLC query not found")
	{{else}}
	// Unknown return type
	return errors.New("not implemented - unknown return type")
	{{end}}
}
{{end}}{{end}}
{{end}}

// Mapper functions - Convert between domain types and database types
// These need to be customized based on the actual field mappings

{{range .Entities}}
func map{{.Name}}ToDomain(db *postgresql.{{.Name}}) *{{.Type}} {
	if db == nil {
		return nil
	}

	// This is a basic mapping - needs to be customized based on actual types
	// The challenge is that OpenAPI types and database types don't always match
	// For example:
	// - OpenAPI might use string, database uses *string
	// - OpenAPI might use custom UUID type, database uses uuid.UUID
	// - Field names might differ (Id vs ID)

	result := &{{.Type}}{
		// TODO: Map fields properly based on actual type definitions
		// This requires parsing both OpenAPI types and SQLC types
	}

	// Basic field mapping - customize based on your entity structure
	// result.Id = db.Id
	// result.CreatedAt = db.CreatedAt
	// result.UpdatedAt = db.UpdatedAt
	// Add specific field mappings as needed

	return result
}
{{end}}