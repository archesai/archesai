// Code generated by codegen repository. DO NOT EDIT.
package repository

import (
	"context"
	"errors"
	{{if eq .Domain "auth"}}
	"time"
	{{end}}

	"github.com/archesai/archesai/internal/{{.Domain}}"
	"github.com/archesai/archesai/internal/database/postgresql"
	"github.com/google/uuid"
	{{if or (eq .Domain "auth") (eq .Domain "users")}}
	"github.com/jackc/pgx/v5"
	{{end}}
	"github.com/jackc/pgx/v5/pgxpool"
	{{if or (eq .Domain "auth") (eq .Domain "users")}}
	openapi_types "github.com/oapi-codegen/runtime/types"
	{{end}}
)

// PostgresRepository implements Repository using PostgreSQL.
type PostgresRepository struct {
	db      *pgxpool.Pool
	queries *postgresql.Queries
}

// NewPostgresRepository creates a new PostgreSQL repository.
func NewPostgresRepository(db *pgxpool.Pool) {{.Domain}}.Repository {
	return &PostgresRepository{
		db:      db,
		queries: postgresql.New(db),
	}
}

{{range .Entities}}
// {{.Name}} operations

{{if contains .Operations "create"}}
func (r *PostgresRepository) Create{{.Name}}(ctx context.Context, entity *{{$.Domain}}.{{.Type}}) (*{{$.Domain}}.{{.Type}}, error) {
	// Check if SQLC has the Create{{.Name}} method
	// For now, we'll generate a stub but with proper error handling
	// TODO: Parse SQLC to detect available queries

	// Example of what it should look like when SQLC query exists:
	// params := postgresql.Create{{.Name}}Params{
	//     Id: entity.Id,
	//     // ... map other fields
	// }
	// db{{.Name}}, err := r.queries.Create{{.Name}}(ctx, params)
	// if err != nil {
	//     return nil, {{$.Domain}}.NewRepositoryError("create", err)
	// }
	// return map{{.Name}}ToDomain(&db{{.Name}}), nil

	return nil, {{$.Domain}}.NewRepositoryError("create", errors.New("not implemented - SQLC query not found"))
}
{{end}}

{{if contains .Operations "read"}}
func (r *PostgresRepository) Get{{.Name}}(ctx context.Context, id uuid.UUID) (*{{$.Domain}}.{{.Type}}, error) {
	// Try to call SQLC Get{{.Name}} if it exists
	// For User, Session, Account entities, SQLC usually has these queries
	{{if or (eq .Name "User") (eq .Name "Session") (eq .Name "Account")}}
	db{{.Name}}, err := r.queries.Get{{.Name}}(ctx, id)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) {
			return nil, {{$.Domain}}.NewRepositoryError("get", {{$.Domain}}.Err{{.Name}}NotFound)
		}
		return nil, {{$.Domain}}.NewRepositoryError("get", err)
	}
	return map{{.Name}}ToDomain(&db{{.Name}}), nil
	{{else}}
	// SQLC query might not exist for this entity
	return nil, {{$.Domain}}.NewRepositoryError("get", errors.New("not implemented - SQLC query not found"))
	{{end}}
}
{{end}}

{{if contains .Operations "update"}}
func (r *PostgresRepository) Update{{.Name}}(ctx context.Context, id uuid.UUID, entity *{{$.Domain}}.{{.Type}}) (*{{$.Domain}}.{{.Type}}, error) {
	// Update operations are often custom and may not have SQLC queries
	return nil, {{$.Domain}}.NewRepositoryError("update", errors.New("not implemented - SQLC query not found"))
}
{{end}}

{{if contains .Operations "delete"}}
func (r *PostgresRepository) Delete{{.Name}}(ctx context.Context, id uuid.UUID) error {
	{{if or (eq .Name "User") (eq .Name "Session") (eq .Name "Account")}}
	err := r.queries.Delete{{.Name}}(ctx, id)
	if err != nil {
		return {{$.Domain}}.NewRepositoryError("delete", err)
	}
	return nil
	{{else}}
	return {{$.Domain}}.NewRepositoryError("delete", errors.New("not implemented - SQLC query not found"))
	{{end}}
}
{{end}}

{{if contains .Operations "list"}}
func (r *PostgresRepository) List{{.Name}}s(ctx context.Context, params {{$.Domain}}.List{{.Name}}sParams) ([]*{{$.Domain}}.{{.Type}}, int64, error) {
	// List operations need both List and Count queries from SQLC
	return nil, 0, {{$.Domain}}.NewRepositoryError("list", errors.New("not implemented - SQLC query not found"))
}
{{end}}

{{/* Handle domain-specific additional methods */}}
{{if eq .Name "User"}}
// GetUserByEmail retrieves a user by email address
func (r *PostgresRepository) GetUserByEmail(ctx context.Context, email string) (*{{$.Domain}}.User, error) {
	dbUser, err := r.queries.GetUserByEmail(ctx, email)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) {
			return nil, {{$.Domain}}.NewRepositoryError("get_by_email", {{$.Domain}}.ErrUserNotFound)
		}
		return nil, {{$.Domain}}.NewRepositoryError("get_by_email", err)
	}
	return mapUserToDomain(&dbUser), nil
}
{{else if eq .Name "Session"}}
// GetSessionByToken retrieves a session by token
func (r *PostgresRepository) GetSessionByToken(ctx context.Context, token string) (*{{$.Domain}}.Session, error) {
	dbSession, err := r.queries.GetSessionByToken(ctx, token)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) {
			return nil, {{$.Domain}}.NewRepositoryError("get_by_token", {{$.Domain}}.ErrSessionNotFound)
		}
		return nil, {{$.Domain}}.NewRepositoryError("get_by_token", err)
	}
	return mapSessionToDomain(&dbSession), nil
}

// DeleteSessionByToken deletes a session by token
func (r *PostgresRepository) DeleteSessionByToken(ctx context.Context, token string) error {
	// This query might not exist in SQLC yet
	return {{$.Domain}}.NewRepositoryError("delete_by_token", errors.New("not implemented - SQLC query not found"))
}

// DeleteUserSessions deletes all sessions for a user
func (r *PostgresRepository) DeleteUserSessions(ctx context.Context, userID uuid.UUID) error {
	err := r.queries.DeleteSessionsByUser(ctx, userID)
	if err != nil {
		return {{$.Domain}}.NewRepositoryError("delete_by_user", err)
	}
	return nil
}

// DeleteExpiredSessions deletes all expired sessions
func (r *PostgresRepository) DeleteExpiredSessions(ctx context.Context) error {
	// This query might not exist in SQLC yet
	return {{$.Domain}}.NewRepositoryError("delete_expired", errors.New("not implemented - SQLC query not found"))
}
{{else if eq .Name "Account"}}
// GetAccountByProviderAndProviderID retrieves an account by provider and provider account ID
func (r *PostgresRepository) GetAccountByProviderAndProviderID(ctx context.Context, provider, providerID string) (*{{$.Domain}}.Account, error) {
	// This query might not exist in SQLC yet
	return nil, {{$.Domain}}.NewRepositoryError("get_by_provider", errors.New("not implemented - SQLC query not found"))
}

// ListUserAccounts lists all accounts for a user
func (r *PostgresRepository) ListUserAccounts(ctx context.Context, userID uuid.UUID) ([]*{{$.Domain}}.Account, error) {
	// This query might not exist in SQLC yet
	return nil, {{$.Domain}}.NewRepositoryError("list_by_user", errors.New("not implemented - SQLC query not found"))
}
{{end}}
{{end}}

// Mapper functions - Convert between domain types and database types
// These need to be customized based on the actual field mappings

{{range .Entities}}
func map{{.Name}}ToDomain(db *postgresql.{{.Name}}) *{{$.Domain}}.{{.Type}} {
	if db == nil {
		return nil
	}

	// This is a basic mapping - needs to be customized based on actual types
	// The challenge is that OpenAPI types and database types don't always match
	// For example:
	// - OpenAPI might use string, database uses *string
	// - OpenAPI might use custom UUID type, database uses uuid.UUID
	// - Field names might differ (Id vs ID)

	result := &{{$.Domain}}.{{.Type}}{
		// TODO: Map fields properly based on actual type definitions
		// This requires parsing both OpenAPI types and SQLC types
	}

	// Basic field mapping for common entities
	{{if eq .Name "User"}}
	// User typically has: Id, Email, Name, EmailVerified, CreatedAt, UpdatedAt
	result.Id = uuid.UUID(db.Id)
	result.Email = openapi_types.Email(db.Email)
	result.Name = db.Name
	result.EmailVerified = db.EmailVerified
	if db.Image != nil {
		result.Image = *db.Image
	}
	result.CreatedAt = db.CreatedAt
	result.UpdatedAt = db.UpdatedAt
	{{else if eq .Name "Session"}}
	// Session typically has: Id, UserId, Token, ExpiresAt, etc.
	result.Id = openapi_types.UUID(db.Id)
	result.UserId = openapi_types.UUID(db.UserId)
	result.Token = db.Token
	result.ExpiresAt = db.ExpiresAt.Format(time.RFC3339)
	if db.ActiveOrganizationId != nil {
		result.ActiveOrganizationId = openapi_types.UUID(*db.ActiveOrganizationId)
	}
	if db.IpAddress != nil {
		result.IpAddress = *db.IpAddress
	}
	if db.UserAgent != nil {
		result.UserAgent = *db.UserAgent
	}
	result.CreatedAt = db.CreatedAt
	result.UpdatedAt = db.UpdatedAt
	{{else if eq .Name "Account"}}
	// Account has OAuth fields
	result.Id = uuid.UUID(db.Id)
	result.UserId = uuid.UUID(db.UserId)
	result.AccountId = db.AccountId
	result.ProviderId = {{$.Domain}}.AccountProviderId(db.ProviderId)
	if db.AccessToken != nil {
		result.AccessToken = *db.AccessToken
	}
	if db.AccessTokenExpiresAt != nil {
		result.AccessTokenExpiresAt = *db.AccessTokenExpiresAt
	}
	if db.RefreshToken != nil {
		result.RefreshToken = *db.RefreshToken
	}
	if db.RefreshTokenExpiresAt != nil {
		result.RefreshTokenExpiresAt = *db.RefreshTokenExpiresAt
	}
	if db.Scope != nil {
		result.Scope = *db.Scope
	}
	if db.IdToken != nil {
		result.IdToken = *db.IdToken
	}
	if db.Password != nil {
		result.Password = *db.Password
	}
	result.CreatedAt = db.CreatedAt
	result.UpdatedAt = db.UpdatedAt
	{{end}}

	return result
}
{{end}}