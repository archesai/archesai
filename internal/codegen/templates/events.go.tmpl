// Code generated by codegen events. DO NOT EDIT.
package {{.Package}}

import (
	"context"
	"github.com/archesai/archesai/internal/events"
)

// Event type constants for {{.Domain}} domain.
const (
{{range $entity := .Entities}}{{range .Events}}	Event{{$entity.Name}}{{title .Type}} = "{{lower $entity.Name}}.{{kebabCase .Type}}"
{{end}}{{end}})

{{range $entity := .Entities}}{{range $event := .Events}}
// {{$entity.Name}}{{title $event.Type}}Event represents a {{$event.Description}} event for {{$entity.Name}}.
type {{$entity.Name}}{{title $event.Type}}Event struct {
	events.BaseEvent
	{{$entity.Name}} *{{$entity.Type}} `json:"{{lower $entity.Name}}"`
}

// New{{$entity.Name}}{{title $event.Type}}Event creates a new {{$entity.Name}} {{$event.Type}} event.
func New{{$entity.Name}}{{title $event.Type}}Event(entity *{{$entity.Type}}) *{{$entity.Name}}{{title $event.Type}}Event {
	return &{{$entity.Name}}{{title $event.Type}}Event{
		BaseEvent: events.NewBaseEvent("{{lower $.Domain}}", Event{{$entity.Name}}{{title $event.Type}}),
		{{$entity.Name}}: entity,
	}
}

// EventType returns the event type string.
func (e *{{$entity.Name}}{{title $event.Type}}Event) EventType() string {
	return Event{{$entity.Name}}{{title $event.Type}}
}

// EventDomain returns the domain this event belongs to.
func (e *{{$entity.Name}}{{title $event.Type}}Event) EventDomain() string {
	return "{{lower $.Domain}}"
}

// EventData returns the actual event data.
func (e *{{$entity.Name}}{{title $event.Type}}Event) EventData() interface{} {
	return e.{{$entity.Name}}
}
{{end}}{{end}}

// EventPublisher publishes domain events for {{.Domain}}.
type EventPublisher interface {
{{range $entity := .Entities}}{{range .Events}}	Publish{{$entity.Name}}{{title .Type}}(ctx context.Context, entity *{{$entity.Type}}) error
{{end}}{{end}}}

// eventPublisher implements EventPublisher for {{.Domain}} domain.
type eventPublisher struct {
	publisher events.Publisher
}

// NewEventPublisher creates a new event publisher for {{.Domain}} domain.
func NewEventPublisher(publisher events.Publisher) EventPublisher {
	return &eventPublisher{
		publisher: publisher,
	}
}

{{range $entity := .Entities}}{{range .Events}}
// Publish{{$entity.Name}}{{title .Type}} publishes a {{.Description}} event for {{$entity.Name}}.
func (p *eventPublisher) Publish{{$entity.Name}}{{title .Type}}(ctx context.Context, entity *{{$entity.Type}}) error {
	event := New{{$entity.Name}}{{title .Type}}Event(entity)
	return events.PublishDomainEvent(ctx, p.publisher, event)
}
{{end}}{{end}}

// NewNoOpEventPublisher creates a new no-op event publisher for testing.
func NewNoOpEventPublisher() EventPublisher {
	return NewEventPublisher(events.NewNoOpPublisher())
}