// Code generated by codegen cache. DO NOT EDIT.
package {{.Package}}

import (
	"context"
	"errors"
	"time"
{{range .Imports}}	"{{.}}"
{{end}}
)

// Common cache errors
var (
	ErrCacheMiss = errors.New("cache miss")
	ErrCacheSet  = errors.New("cache set failed")
)

// Cache provides caching operations for {{.Domain}} domain.
type Cache interface {
{{range .Schemas}}{{if .XCodegen.Cache}}
	// {{.Name}} caching
	Get{{.Name}}(ctx context.Context, id uuid.UUID) (*{{.Name}}, error)
	Set{{.Name}}(ctx context.Context, entity *{{.Name}}, ttl time.Duration) error
	Delete{{.Name}}(ctx context.Context, id uuid.UUID) error
	{{if eq .Name "User"}}Get{{.Name}}ByEmail(ctx context.Context, email string) (*{{.Name}}, error)
	Set{{.Name}}ByEmail(ctx context.Context, email string, entity *{{.Name}}, ttl time.Duration) error
	Delete{{.Name}}ByEmail(ctx context.Context, email string) error{{end}}
	{{if eq .Name "Session"}}Get{{.Name}}ByToken(ctx context.Context, token string) (*{{.Name}}, error)
	Set{{.Name}}ByToken(ctx context.Context, token string, entity *{{.Name}}, ttl time.Duration) error
	Delete{{.Name}}ByToken(ctx context.Context, token string) error
	DeleteUser{{.Name}}s(ctx context.Context, userID uuid.UUID) error{{end}}
{{end}}{{end}}
	
	// Batch operations
	FlushAll(ctx context.Context) error
}

// NoOpCache is a no-op cache implementation that always returns cache misses.
type NoOpCache struct{}

// NewNoOpCache creates a new no-op cache.
func NewNoOpCache() Cache {
	return &NoOpCache{}
}

{{range .Schemas}}{{if .XCodegen.Cache}}
// {{.Name}} no-op operations
func (c *NoOpCache) Get{{.Name}}(ctx context.Context, id uuid.UUID) (*{{.Name}}, error) {
	return nil, ErrCacheMiss
}

func (c *NoOpCache) Set{{.Name}}(ctx context.Context, entity *{{.Name}}, ttl time.Duration) error {
	return nil
}

func (c *NoOpCache) Delete{{.Name}}(ctx context.Context, id uuid.UUID) error {
	return nil
}

{{if eq .Name "User"}}func (c *NoOpCache) Get{{.Name}}ByEmail(ctx context.Context, email string) (*{{.Name}}, error) {
	return nil, ErrCacheMiss
}

func (c *NoOpCache) Set{{.Name}}ByEmail(ctx context.Context, email string, entity *{{.Name}}, ttl time.Duration) error {
	return nil
}

func (c *NoOpCache) Delete{{.Name}}ByEmail(ctx context.Context, email string) error {
	return nil
}{{end}}

{{if eq .Name "Session"}}func (c *NoOpCache) Get{{.Name}}ByToken(ctx context.Context, token string) (*{{.Name}}, error) {
	return nil, ErrCacheMiss
}

func (c *NoOpCache) Set{{.Name}}ByToken(ctx context.Context, token string, entity *{{.Name}}, ttl time.Duration) error {
	return nil
}

func (c *NoOpCache) Delete{{.Name}}ByToken(ctx context.Context, token string) error {
	return nil
}

func (c *NoOpCache) DeleteUser{{.Name}}s(ctx context.Context, userID uuid.UUID) error {
	return nil
}{{end}}
{{end}}{{end}}

func (c *NoOpCache) FlushAll(ctx context.Context) error {
	return nil
}