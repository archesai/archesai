// Code generated by codegen. DO NOT EDIT.
package {{.Package}}

import (
	"context"
	"errors"
{{range .Imports}}	"{{.}}"
{{end}}
)

// Common errors
var (
{{range .Entities}}	// Err{{.Name}}NotFound is returned when a {{lower .Name}} is not found
	Err{{.Name}}NotFound = errors.New("{{lower .Name}} not found")
	// Err{{.Name}}Exists is returned when a {{lower .Name}} already exists  
	Err{{.Name}}Exists = errors.New("{{lower .Name}} already exists")
{{end}})
{{range .Entities}}
// {{.Name}}Repository provides data access operations for {{.Name}} entities.
type {{.Name}}Repository interface {
	{{if contains .Operations "create"}}// Create{{.Name}} creates a new {{lower .Name}}.
	Create{{.Name}}(ctx context.Context, entity *{{.Type}}) (*{{.Type}}, error)
	{{end}}{{if contains .Operations "read"}}// Get{{.Name}} retrieves a {{lower .Name}} by ID.
	Get{{.Name}}(ctx context.Context, id uuid.UUID) (*{{.Type}}, error)
	{{end}}{{if contains .Operations "update"}}// Update{{.Name}} updates an existing {{lower .Name}}.
	Update{{.Name}}(ctx context.Context, id uuid.UUID, entity *{{.Type}}) (*{{.Type}}, error)
	{{end}}{{if contains .Operations "delete"}}// Delete{{.Name}} removes a {{lower .Name}}.
	Delete{{.Name}}(ctx context.Context, id uuid.UUID) error
	{{end}}{{if contains .Operations "list"}}// List{{.Name}}s retrieves a paginated list of {{lower .Name}}s.
	List{{.Name}}s(ctx context.Context, params List{{.Name}}sParams) ([]*{{.Type}}, int64, error)
	{{end}}{{range .AdditionalMethods}}
	// {{.Name}} {{.Description}}
	{{.Signature}}{{end}}
}

// List{{.Name}}sParams represents parameters for listing {{lower .Name}}s.
type List{{.Name}}sParams struct {
	Limit  int
	Offset int
	{{range .ListFilters}}{{.Name}} {{.Type}}
	{{end}}
}
{{end}}