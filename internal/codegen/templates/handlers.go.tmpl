{{- /*gotype: github.com/archesai/archesai/internal/codegen.TemplateData*/ -}}
// Code generated by codegen handlers. DO NOT EDIT.
package {{ .Package }}

import (
	"context"
	"net/http"
	
	"github.com/labstack/echo/v4"
	"github.com/google/uuid"
)

// Handler handles HTTP requests for {{ .Domain }} domain.
type Handler struct {
	service *Service
}

// NewHandler creates a new handler instance.
func NewHandler(service *Service) *Handler {
	return &Handler{
		service: service,
	}
}

{{ range .Entities }}
// Create{{ .Name }} handles POST /{{ tolower .Name }}s
func (h *Handler) Create{{ .Name }}(c echo.Context) error {
	ctx := c.Request().Context()
	
	var req Create{{ .Name }}Request
	if err := c.Bind(&req); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, "Invalid request body")
	}
	
	if err := c.Validate(req); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}
	
	result, err := h.service.Create{{ .Name }}(ctx, &req)
	if err != nil {
		return handleError(err)
	}
	
	return c.JSON(http.StatusCreated, result)
}

// Get{{ .Name }} handles GET /{{ tolower .Name }}s/:id
func (h *Handler) Get{{ .Name }}(c echo.Context, id uuid.UUID) error {
	ctx := c.Request().Context()
	
	result, err := h.service.Get{{ .Name }}(ctx, id)
	if err != nil {
		return handleError(err)
	}
	
	return c.JSON(http.StatusOK, result)
}

// Update{{ .Name }} handles PUT /{{ tolower .Name }}s/:id
func (h *Handler) Update{{ .Name }}(c echo.Context, id uuid.UUID) error {
	ctx := c.Request().Context()
	
	var req Update{{ .Name }}Request
	if err := c.Bind(&req); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, "Invalid request body")
	}
	
	if err := c.Validate(req); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}
	
	result, err := h.service.Update{{ .Name }}(ctx, id, &req)
	if err != nil {
		return handleError(err)
	}
	
	return c.JSON(http.StatusOK, result)
}

// Delete{{ .Name }} handles DELETE /{{ tolower .Name }}s/:id
func (h *Handler) Delete{{ .Name }}(c echo.Context, id uuid.UUID) error {
	ctx := c.Request().Context()
	
	if err := h.service.Delete{{ .Name }}(ctx, id); err != nil {
		return handleError(err)
	}
	
	return c.NoContent(http.StatusNoContent)
}

// List{{ .Name }}s handles GET /{{ tolower .Name }}s
func (h *Handler) List{{ .Name }}s(c echo.Context) error {
	ctx := c.Request().Context()
	
	params := List{{ .Name }}sParams{
		Limit:  getIntParam(c, "limit", 20),
		Offset: getIntParam(c, "offset", 0),
	}
	
	results, total, err := h.service.List{{ .Name }}s(ctx, params)
	if err != nil {
		return handleError(err)
	}
	
	return c.JSON(http.StatusOK, map[string]interface{}{
		"items": results,
		"total": total,
	})
}
{{ end }}

// handleError converts service errors to HTTP errors
func handleError(err error) error {
	switch err {
	case ErrNotFound:
		return echo.NewHTTPError(http.StatusNotFound, "Resource not found")
	case ErrUnauthorized:
		return echo.NewHTTPError(http.StatusUnauthorized, "Unauthorized")
	case ErrForbidden:
		return echo.NewHTTPError(http.StatusForbidden, "Forbidden")
	default:
		return echo.NewHTTPError(http.StatusInternalServerError, "Internal server error")
	}
}

// getIntParam gets an integer parameter from the request
func getIntParam(c echo.Context, name string, defaultValue int) int {
	value := c.QueryParam(name)
	if value == "" {
		return defaultValue
	}
	// Parse int value
	return defaultValue
}