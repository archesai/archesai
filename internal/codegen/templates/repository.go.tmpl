// Code generated by codegen repository. DO NOT EDIT.
package {{.Package}}

import (
	"context"
	"fmt"
{{range .Imports}}	"{{.}}"
{{end}}
)

// Repository provides data access operations for {{.Domain}} domain.
type Repository interface {
{{range .Entities}}
	// {{.Name}} operations
	{{if contains .Operations "create"}}Create{{.Name}}(ctx context.Context, entity *{{.Type}}) (*{{.Type}}, error){{end}}
	{{if contains .Operations "read"}}Get{{.Name}}(ctx context.Context, id uuid.UUID) (*{{.Type}}, error){{end}}
	{{if contains .Operations "update"}}Update{{.Name}}(ctx context.Context, id uuid.UUID, entity *{{.Type}}) (*{{.Type}}, error){{end}}
	{{if contains .Operations "delete"}}Delete{{.Name}}(ctx context.Context, id uuid.UUID) error{{end}}
	{{if contains .Operations "list"}}List{{.Name}}s(ctx context.Context, params List{{.Name}}sParams) ([]*{{.Type}}, int64, error){{end}}
	
	{{/* Handle hardcoded additional methods for now */}}
	{{if eq .Name "User"}}// Additional User operations
	GetUserByEmail(ctx context.Context, email string) (*User, error){{end}}
	{{if eq .Name "Session"}}// Additional Session operations
	GetSessionByToken(ctx context.Context, token string) (*Session, error)
	DeleteSessionByToken(ctx context.Context, token string) error
	DeleteUserSessions(ctx context.Context, userID uuid.UUID) error
	DeleteExpiredSessions(ctx context.Context) error{{end}}
	{{if eq .Name "Account"}}// Additional Account operations
	GetAccountByProviderAndProviderID(ctx context.Context, provider, providerID string) (*Account, error)
	ListUserAccounts(ctx context.Context, userID uuid.UUID) ([]*Account, error){{end}}
{{end}}}

{{range .Entities}}
// List{{.Name}}sParams represents parameters for listing {{lower .Name}}s.
type List{{.Name}}sParams struct {
	Limit  int
	Offset int
	{{if eq .Name "User"}}Email  *string
	Name   *string{{end}}
	{{if eq .Name "Session"}}UserID *string{{end}}
	{{if eq .Name "Account"}}UserID     *uuid.UUID
	ProviderID *string{{end}}
}
{{end}}

// RepositoryError represents a repository error.
type RepositoryError struct {
	Operation string
	Err       error
}

func (e *RepositoryError) Error() string {
	return fmt.Sprintf("repository %s: %v", e.Operation, e.Err)
}

func (e *RepositoryError) Unwrap() error {
	return e.Err
}

// NewRepositoryError creates a new repository error.
func NewRepositoryError(operation string, err error) *RepositoryError {
	return &RepositoryError{
		Operation: operation,
		Err:       err,
	}
}