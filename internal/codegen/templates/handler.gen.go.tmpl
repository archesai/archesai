{{- $package := .Package -}}
{{- $entityName := .Name -}}
{{- $entityNameLower := .NameLower -}}
{{- $entityNamePlural := .NamePlural -}}
{{- $entityNamePluralLower := .NamePluralLower -}}
// Code generated by archesai/codegen. DO NOT EDIT.

package {{ $package }}

import (
	"context"
	"log/slog"
)

// Handler implements StrictServerInterface by delegating to the service
type Handler struct {
	service ServiceInterface
	logger  *slog.Logger
}

// NewHandler creates a new strict server
func NewHandler(service ServiceInterface, logger *slog.Logger) *Handler {
	return &Handler{
		service: service,
		logger:  logger,
	}
}

{{- range .XCodegen.Repository.Operations }}
{{- if eq . "list" }}

// List{{ $entityNamePlural }} handles the list {{ $entityNamePluralLower }} endpoint
func (s *Handler) List{{ $entityNamePlural }}(ctx context.Context, request List{{ $entityNamePlural }}RequestObject) (List{{ $entityNamePlural }}ResponseObject, error) {
	return s.service.List(ctx, request)
}
{{- end }}

{{- if eq . "create" }}

// Create{{ $entityName }} handles the create {{ $entityNameLower }} endpoint
func (s *Handler) Create{{ $entityName }}(ctx context.Context, request Create{{ $entityName }}RequestObject) (Create{{ $entityName }}ResponseObject, error) {
	return s.service.Create(ctx, request)
}
{{- end }}

{{- if or (eq . "get") (eq . "read") }}

// Get{{ $entityName }} handles the get {{ $entityNameLower }} endpoint
func (s *Handler) Get{{ $entityName }}(ctx context.Context, request Get{{ $entityName }}RequestObject) (Get{{ $entityName }}ResponseObject, error) {
	return s.service.Get(ctx, request)
}
{{- end }}

{{- if eq . "update" }}

// Update{{ $entityName }} handles the update {{ $entityNameLower }} endpoint
func (s *Handler) Update{{ $entityName }}(ctx context.Context, request Update{{ $entityName }}RequestObject) (Update{{ $entityName }}ResponseObject, error) {
	return s.service.Update(ctx, request)
}
{{- end }}

{{- if eq . "delete" }}

// Delete{{ $entityName }} handles the delete {{ $entityNameLower }} endpoint
func (s *Handler) Delete{{ $entityName }}(ctx context.Context, request Delete{{ $entityName }}RequestObject) (Delete{{ $entityName }}ResponseObject, error) {
	return s.service.Delete(ctx, request)
}
{{- end }}
{{- end }}

{{- if .XCodegen.Service.CustomOperations }}
{{- range .XCodegen.Service.CustomOperations }}

// {{ .Name }} handles the {{ .Name | lower }} endpoint
func (s *Handler) {{ .Name }}(ctx context.Context, request {{ .Name }}RequestObject) ({{ .Name }}ResponseObject, error) {
	return s.service.{{ .Name }}(ctx, request)
}
{{- end }}
{{- end }}


