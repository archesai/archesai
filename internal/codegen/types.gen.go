// Code generated by archesai codegen. DO NOT EDIT.
package codegen

// CodegenConfig Schema for codegen.yaml configuration file
type CodegenConfig struct {
	// Generators Generator configuration with output paths
	Generators *struct {
		Cache *struct {
			Interface *string `json:"interface,omitempty" yaml:"interface,omitempty"` // Path for cache interface
			Memory    *string `json:"memory,omitempty" yaml:"memory,omitempty"`       // Path for in-memory cache implementation
			Redis     *string `json:"redis,omitempty" yaml:"redis,omitempty"`         // Path for Redis cache implementation
		} `json:"cache,omitempty" yaml:"cache,omitempty"` // Cache generation paths
		EchoServer *string `json:"echo_server,omitempty" yaml:"echo_server,omitempty"` // Path for Echo server handlers
		Events     *struct {
			Interface *string `json:"interface,omitempty" yaml:"interface,omitempty"` // Path for event definitions and interface
			Nats      *string `json:"nats,omitempty" yaml:"nats,omitempty"`           // Path for NATS event publisher
			Redis     *string `json:"redis,omitempty" yaml:"redis,omitempty"`         // Path for Redis event publisher
		} `json:"events,omitempty" yaml:"events,omitempty"` // Event system generation paths
		Repository *struct {
			Interface *string `json:"interface,omitempty" yaml:"interface,omitempty"` // Path for repository interfaces (ports)
			Postgres  *string `json:"postgres,omitempty" yaml:"postgres,omitempty"`   // Path for PostgreSQL repository implementation
			Sqlite    *string `json:"sqlite,omitempty" yaml:"sqlite,omitempty"`       // Path for SQLite repository implementation
		} `json:"repository,omitempty" yaml:"repository,omitempty"` // Repository generation configuration
		SQL *struct {
			Dialect   *string `json:"dialect,omitempty" yaml:"dialect,omitempty"`       // SQL dialect to use
			QueryDir  *string `json:"query_dir,omitempty" yaml:"query_dir,omitempty"`   // Directory for SQL query files
			SchemaDir *string `json:"schema_dir,omitempty" yaml:"schema_dir,omitempty"` // Directory for SQL schema files
		} `json:"sql,omitempty" yaml:"sql,omitempty"` // SQL generation configuration
		Service *string `json:"service,omitempty" yaml:"service,omitempty"` // Path for service layer generation
		Types   *string `json:"types,omitempty" yaml:"types,omitempty"`     // Path for OpenAPI type definitions
	} `json:"generators,omitempty" yaml:"generators,omitempty"`
	// Openapi Path to the OpenAPI specification file
	Openapi string `json:"openapi" yaml:"openapi" default:"api/openapi.bundled.yaml"`
	// Output Output directory for generated files
	Output *string `json:"output,omitempty" yaml:"output,omitempty" default:"internal"`
}

// CodegenExtension Configuration for code generation from OpenAPI schemas
type CodegenExtension struct {
	// Adapter Type adapter generation configuration
	Adapter *struct {
		CustomMappings  map[string]string `json:"custom_mappings,omitempty" yaml:"custom_mappings,omitempty"`   // Custom field mappings
		DeepCopy        *bool             `json:"deep_copy,omitempty" yaml:"deep_copy,omitempty"`               // Generate deep copy methods
		GenerateMappers *bool             `json:"generate_mappers,omitempty" yaml:"generate_mappers,omitempty"` // Generate type mappers between layers
		IgnoreFields    []string          `json:"ignore_fields,omitempty" yaml:"ignore_fields,omitempty"`       // Fields to ignore in mapping
	} `json:"adapter,omitempty" yaml:"adapter,omitempty"`
	// Cache Cache layer generation configuration
	Cache *struct {
		Enabled      *bool    `json:"enabled,omitempty" yaml:"enabled,omitempty"`             // Enable caching for this entity
		InvalidateOn []string `json:"invalidate_on,omitempty" yaml:"invalidate_on,omitempty"` // Operations that invalidate cache
		KeyPattern   *string  `json:"key_pattern,omitempty" yaml:"key_pattern,omitempty"`     // Redis key pattern (e.g., "user:{id}")
		Redis        *struct {
			Database *int    `json:"database,omitempty" yaml:"database,omitempty"` // Redis database number
			Prefix   *string `json:"prefix,omitempty" yaml:"prefix,omitempty"`     // Key prefix for namespacing
		} `json:"redis,omitempty" yaml:"redis,omitempty"` // Redis-specific configuration
		Ttl           *int  `json:"ttl,omitempty" yaml:"ttl,omitempty"`                         // Time-to-live in seconds
		WarmOnStartup *bool `json:"warm_on_startup,omitempty" yaml:"warm_on_startup,omitempty"` // Pre-warm cache on application startup
	} `json:"cache,omitempty" yaml:"cache,omitempty"`
	// Database Database configuration
	Database *struct {
		Indices []struct {
			Fields []string `json:"fields" yaml:"fields"`                     // Fields to index
			Method *string  `json:"method,omitempty" yaml:"method,omitempty"` // Index method (btree, hash, gin, gist)
			Name   *string  `json:"name,omitempty" yaml:"name,omitempty"`     // Index name (optional, will be generated if not provided)
			Unique *bool    `json:"unique,omitempty" yaml:"unique,omitempty"` // Whether this is a unique index
			Where  *string  `json:"where,omitempty" yaml:"where,omitempty"`   // Partial index condition (PostgreSQL)
		} `json:"indices,omitempty" yaml:"indices,omitempty"` // Database indices to create
		Queries []struct {
			Description *string `json:"description,omitempty" yaml:"description,omitempty"` // Description of what the query does
			Name        string  `json:"name" yaml:"name"`                                   // Query name for SQLC
			SQL         string  `json:"sql" yaml:"sql"`                                     // SQL query
			Type        string  `json:"type" yaml:"type"`                                   // Query type for SQLC
		} `json:"queries,omitempty" yaml:"queries,omitempty"` // Custom SQL queries for SQLC
		Relations []struct {
			Field      string  `json:"field" yaml:"field"`                           // Field name in this table
			OnDelete   *string `json:"onDelete,omitempty" yaml:"onDelete,omitempty"` // ON DELETE action
			OnUpdate   *string `json:"onUpdate,omitempty" yaml:"onUpdate,omitempty"` // ON UPDATE action
			References string  `json:"references" yaml:"references"`                 // Reference in format "table.column"
		} `json:"relations,omitempty" yaml:"relations,omitempty"` // Foreign key relationships
		SoftDelete *bool   `json:"softDelete,omitempty" yaml:"softDelete,omitempty"` // Whether to add deleted_at column for soft deletes
		Table      *string `json:"table,omitempty" yaml:"table,omitempty"`           // Database table name
		Timestamps *bool   `json:"timestamps,omitempty" yaml:"timestamps,omitempty"` // Whether to add created_at and updated_at columns
	} `json:"database,omitempty" yaml:"database,omitempty"`
	// Domain Domain categorization for the schema
	Domain *string `json:"domain,omitempty" yaml:"domain,omitempty"`
	// Events List of domain events to generate
	Events []string `json:"events,omitempty" yaml:"events,omitempty"`
	// Handler HTTP handler generation configuration
	Handler *struct {
		Generate   *bool    `json:"generate,omitempty" yaml:"generate,omitempty"`     // Whether to generate handler
		Middleware []string `json:"middleware,omitempty" yaml:"middleware,omitempty"` // Middleware to apply
		Pagination *struct {
			DefaultLimit *int `json:"default_limit,omitempty" yaml:"default_limit,omitempty"`
			MaxLimit     *int `json:"max_limit,omitempty" yaml:"max_limit,omitempty"`
		} `json:"pagination,omitempty" yaml:"pagination,omitempty"` // Pagination configuration for list endpoints
		PathPrefix      *string `json:"path_prefix,omitempty" yaml:"path_prefix,omitempty"`           // URL path prefix
		ResponseWrapper *bool   `json:"response_wrapper,omitempty" yaml:"response_wrapper,omitempty"` // Wrap responses in standard envelope
		Validation      *struct {
			CustomValidators []string `json:"custom_validators,omitempty" yaml:"custom_validators,omitempty"` // Custom validator functions
			Strict           *bool    `json:"strict,omitempty" yaml:"strict,omitempty"`                       // Use strict validation
		} `json:"validation,omitempty" yaml:"validation,omitempty"` // Request validation configuration
	} `json:"handler,omitempty" yaml:"handler,omitempty"`
	// Repository Repository generation configuration
	Repository *struct {
		AdditionalMethods []struct {
			Cache   *bool    `json:"cache,omitempty" yaml:"cache,omitempty"` // Cache this method's results
			Name    string   `json:"name" yaml:"name"`                       // Method name (e.g., GetUserByEmail)
			Params  []string `json:"params" yaml:"params"`                   // Method parameters
			Query   *string  `json:"query,omitempty" yaml:"query,omitempty"` // Custom SQL query (optional)
			Returns string   `json:"returns" yaml:"returns"`                 // Return type
		} `json:"additional_methods,omitempty" yaml:"additional_methods,omitempty"` // Custom repository methods to generate
		Indices    []string `json:"indices,omitempty" yaml:"indices,omitempty"`       // Fields to create indices on
		Name       *string  `json:"name,omitempty" yaml:"name,omitempty"`             // Custom name for the repository interface (e.g., SessionRepository)
		Operations []string `json:"operations,omitempty" yaml:"operations,omitempty"` // CRUD operations to generate for service/handler layers (repository always gets all)
		Postgres   *struct {
			Schema    *string `json:"schema,omitempty" yaml:"schema,omitempty"`         // Database schema name
			TableName *string `json:"table_name,omitempty" yaml:"table_name,omitempty"` // Override default table name
		} `json:"postgres,omitempty" yaml:"postgres,omitempty"` // PostgreSQL-specific configuration
		SoftDelete *bool `json:"soft_delete,omitempty" yaml:"soft_delete,omitempty"` // Enable soft delete functionality
		Sqlite     *struct {
			TableName *string `json:"table_name,omitempty" yaml:"table_name,omitempty"` // Override default table name
		} `json:"sqlite,omitempty" yaml:"sqlite,omitempty"` // SQLite-specific configuration
		Timestamps        *bool      `json:"timestamps,omitempty" yaml:"timestamps,omitempty"`                 // Automatically manage created_at and updated_at
		UniqueConstraints [][]string `json:"unique_constraints,omitempty" yaml:"unique_constraints,omitempty"` // Unique constraints across multiple fields
		UpdateExclude     []string   `json:"update_exclude,omitempty" yaml:"update_exclude,omitempty"`         // Fields to exclude from update operations (readonly after creation)
	} `json:"repository,omitempty" yaml:"repository,omitempty"`
	// Service Service layer generation configuration
	Service *struct {
		BusinessMethods  []string `json:"business_methods,omitempty" yaml:"business_methods,omitempty"` // Business logic methods
		CustomOperations []struct {
			Method      string `json:"method" yaml:"method"`             // HTTP method
			Name        string `json:"name" yaml:"name"`                 // Operation name (e.g., Register, Login)
			OperationID string `json:"operation_id" yaml:"operation_id"` // OpenAPI operation ID
		} `json:"custom_operations,omitempty" yaml:"custom_operations,omitempty"` // Custom operations beyond standard CRUD
		ErrorHandling *string `json:"error_handling,omitempty" yaml:"error_handling,omitempty"` // Error handling strategy
		Generate      *bool   `json:"generate,omitempty" yaml:"generate,omitempty"`             // Generate service layer
		Logging       *struct {
			Level      *string `json:"level,omitempty" yaml:"level,omitempty"`
			Structured *bool   `json:"structured,omitempty" yaml:"structured,omitempty"`
		} `json:"logging,omitempty" yaml:"logging,omitempty"` // Logging configuration
		Metrics            *bool `json:"metrics,omitempty" yaml:"metrics,omitempty"`                         // Generate metrics collection
		Tracing            *bool `json:"tracing,omitempty" yaml:"tracing,omitempty"`                         // Generate distributed tracing
		TransactionSupport *bool `json:"transaction_support,omitempty" yaml:"transaction_support,omitempty"` // Generate transaction support
	} `json:"service,omitempty" yaml:"service,omitempty"`
}
