package {{.Package}}

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/archesai/archesai/internal/infrastructure/database/generated/postgresql"
)

// Compile-time check that PostgresRepository implements Repository.
var _ Repository = (*PostgresRepository)(nil)

// PostgresRepository is the PostgreSQL implementation of Repository.
type PostgresRepository struct {
	q postgresql.Querier
}

// NewPostgresRepository creates a new PostgreSQL repository.
func NewPostgresRepository(q postgresql.Querier) *PostgresRepository {
	return &PostgresRepository{
		q: q,
	}
}

{{range .Tables}}
// Get{{title .}} retrieves a {{.}} by ID from the database.
func (r *PostgresRepository) Get{{title .}}(ctx context.Context, id string) (*{{title .}}, error) {
	// TODO: Implement using sqlc-generated query
	// Example:
	// db{{title .}}, err := r.q.Get{{title .}}(ctx, id)
	// if err != nil {
	//     if errors.Is(err, sql.ErrNoRows) {
	//         return nil, ErrNotFound
	//     }
	//     return nil, err
	// }
	// return convert{{title .}}FromDB(db{{title .}}), nil
	
	return nil, fmt.Errorf("not implemented")
}

// List{{title .}}s retrieves a list of {{.}}s from the database.
func (r *PostgresRepository) List{{title .}}s(ctx context.Context, limit, offset int) ([]*{{title .}}, error) {
	// TODO: Implement using sqlc-generated query
	return nil, fmt.Errorf("not implemented")
}

// Create{{title .}} creates a new {{.}} in the database.
func (r *PostgresRepository) Create{{title .}}(ctx context.Context, {{lower .}} *{{title .}}) error {
	// TODO: Implement using sqlc-generated query
	return fmt.Errorf("not implemented")
}

// Update{{title .}} updates an existing {{.}} in the database.
func (r *PostgresRepository) Update{{title .}}(ctx context.Context, {{lower .}} *{{title .}}) error {
	// TODO: Implement using sqlc-generated query
	return fmt.Errorf("not implemented")
}

// Delete{{title .}} deletes a {{.}} from the database.
func (r *PostgresRepository) Delete{{title .}}(ctx context.Context, id string) error {
	// TODO: Implement using sqlc-generated query
	return fmt.Errorf("not implemented")
}
{{end}}

// Helper functions for converting between database and domain types
// These will be replaced by generated converters once configured

{{range .Tables}}
func convert{{title .}}FromDB(db *postgresql.{{title .}}) *{{title .}} {
	// TODO: Implement conversion
	return nil
}

func convert{{title .}}ToDB({{lower .}} *{{title .}}) *postgresql.{{title .}} {
	// TODO: Implement conversion
	return nil
}
{{end}}