package {{.Package}}

import (
	"context"
	"time"
)

// EventType represents the type of domain event.
type EventType string

const (
	{{range .Tables}}
	Event{{title .}}Created EventType = "{{$.Package}}.{{lower .}}.created"
	Event{{title .}}Updated EventType = "{{$.Package}}.{{lower .}}.updated"
	Event{{title .}}Deleted EventType = "{{$.Package}}.{{lower .}}.deleted"
	{{end}}
)

// Event represents a domain event.
type Event struct {
	ID         string                 `json:"id"`
	Type       EventType              `json:"type"`
	AggregateID string                `json:"aggregate_id"`
	Timestamp  time.Time              `json:"timestamp"`
	Data       map[string]interface{} `json:"data"`
	UserID     string                 `json:"user_id,omitempty"`
}

// EventHandler handles domain events.
type EventHandler interface {
	Handle(ctx context.Context, event Event) error
}

// EventPublisher publishes domain events.
type EventPublisher interface {
	Publish(ctx context.Context, event Event) error
}

// Add specific event types with strongly-typed data

{{range .Tables}}
// {{title .}}CreatedEvent is emitted when a {{.}} is created.
type {{title .}}CreatedEvent struct {
	Event
	{{title .}} *{{title .}} `json:"{{lower .}}"`
}

// {{title .}}UpdatedEvent is emitted when a {{.}} is updated.
type {{title .}}UpdatedEvent struct {
	Event
	{{title .}}   *{{title .}} `json:"{{lower .}}"`
	ChangedFields []string       `json:"changed_fields"`
}

// {{title .}}DeletedEvent is emitted when a {{.}} is deleted.
type {{title .}}DeletedEvent struct {
	Event
	{{title .}}ID string `json:"{{lower .}}_id"`
}
{{end}}