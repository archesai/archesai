// Code generated by codegen events. DO NOT EDIT.
package {{.Package}}

import (
	"context"
	"time"
{{range .Imports}}	"{{.}}"
{{end}}
)

// EventType represents the type of event.
type EventType string

// Event types for {{.Domain}} domain.
const (
{{range .Entities}}{{range .Events}}	Event{{.Type}} EventType = "{{kebabCase .Type}}"
{{end}}{{end}})

// Event represents a domain event.
type Event struct {
	ID        string      `json:"id"`
	Type      EventType   `json:"type"`
	Timestamp time.Time   `json:"timestamp"`
	Source    string      `json:"source"`
	Data      interface{} `json:"data"`
	Metadata  map[string]string `json:"metadata,omitempty"`
}

// EventPublisher publishes domain events.
type EventPublisher interface {
{{range $entity := .Entities}}{{range .Events}}	// Publish{{.Type}} publishes a {{.Description}} event.
	Publish{{.Type}}(ctx context.Context, entity *{{$entity.Type}}) error
{{end}}{{end}}
	// PublishRaw publishes a raw event.
	PublishRaw(ctx context.Context, event *Event) error
}

// NoOpEventPublisher is a no-op event publisher implementation.
type NoOpEventPublisher struct{}

// NewNoOpEventPublisher creates a new no-op event publisher.
func NewNoOpEventPublisher() EventPublisher {
	return &NoOpEventPublisher{}
}

{{range $entity := .Entities}}{{range .Events}}
// Publish{{.Type}} does nothing in no-op implementation.
func (p *NoOpEventPublisher) Publish{{.Type}}(ctx context.Context, entity *{{$entity.Type}}) error {
	return nil
}
{{end}}{{end}}

// PublishRaw does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishRaw(ctx context.Context, event *Event) error {
	return nil
}

{{range $entity := .Entities}}{{range $event := .Events}}
// {{$event.Type}}Event represents a {{$event.Description}} event.
type {{$event.Type}}Event struct {
	Event
	Entity *{{$entity.Type}} `json:"entity"`
}

// New{{$event.Type}}Event creates a new {{$event.Type}} event.
func New{{$event.Type}}Event(entity *{{$entity.Type}}) *{{$event.Type}}Event {
	return &{{$event.Type}}Event{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      Event{{$event.Type}},
			Timestamp: time.Now().UTC(),
			Source:    "{{lower $.Domain}}",
			Data:      entity,
		},
		Entity: entity,
	}
}
{{end}}{{end}}