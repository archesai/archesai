// Code generated by codegen events. DO NOT EDIT.
package {{.Package}}

import (
	"context"

	"github.com/google/uuid"
)

// Event type constants for {{.Domain}} domain.
const (
{{range $entity := .Entities}}	Event{{$entity.Name}}Created = "{{lower $entity.Name}}.created"
	Event{{$entity.Name}}Updated = "{{lower $entity.Name}}.updated"
	Event{{$entity.Name}}Deleted = "{{lower $entity.Name}}.deleted"
{{end}})

{{range $entity := .Entities}}
// {{$entity.Name}}CreatedEvent represents a created event for {{$entity.Name}}.
type {{$entity.Name}}CreatedEvent struct {
	BaseEvent
	{{$entity.Name}}ID uuid.UUID `json:"{{lower $entity.Name}}_id"`
}

// New{{$entity.Name}}CreatedEvent creates a new {{$entity.Name}} created event.
func New{{$entity.Name}}CreatedEvent(id uuid.UUID) *{{$entity.Name}}CreatedEvent {
	return &{{$entity.Name}}CreatedEvent{
		BaseEvent: NewBaseEvent("{{lower $.Domain}}", Event{{$entity.Name}}Created),
		{{$entity.Name}}ID: id,
	}
}

// {{$entity.Name}}UpdatedEvent represents an updated event for {{$entity.Name}}.
type {{$entity.Name}}UpdatedEvent struct {
	BaseEvent
	{{$entity.Name}}ID uuid.UUID `json:"{{lower $entity.Name}}_id"`
}

// New{{$entity.Name}}UpdatedEvent creates a new {{$entity.Name}} updated event.
func New{{$entity.Name}}UpdatedEvent(id uuid.UUID) *{{$entity.Name}}UpdatedEvent {
	return &{{$entity.Name}}UpdatedEvent{
		BaseEvent: NewBaseEvent("{{lower $.Domain}}", Event{{$entity.Name}}Updated),
		{{$entity.Name}}ID: id,
	}
}

// {{$entity.Name}}DeletedEvent represents a deleted event for {{$entity.Name}}.
type {{$entity.Name}}DeletedEvent struct {
	BaseEvent
	{{$entity.Name}}ID uuid.UUID `json:"{{lower $entity.Name}}_id"`
}

// New{{$entity.Name}}DeletedEvent creates a new {{$entity.Name}} deleted event.
func New{{$entity.Name}}DeletedEvent(id uuid.UUID) *{{$entity.Name}}DeletedEvent {
	return &{{$entity.Name}}DeletedEvent{
		BaseEvent: NewBaseEvent("{{lower $.Domain}}", Event{{$entity.Name}}Deleted),
		{{$entity.Name}}ID: id,
	}
}
{{end}}

