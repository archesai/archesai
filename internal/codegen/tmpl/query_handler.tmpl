{{- /*
Template: query_handler.tmpl
Generates: A single query handler implementation
Expected data: CQRSTemplateData
*/ -}}
// Code generated by archesai. DO NOT EDIT.

package {{ lower .Operation.Tag }}

import (
	"context"
	"fmt"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/repositories"
)

// {{ .Operation.ID }}Query represents a query to {{ lower .Operation.Method }} {{ lower .Operation.Tag }}{{ if eq .Operation.Method "List" }}s{{ end }}.
type {{ .Operation.ID }}Query struct {
{{- if or .Operation.HasBearerAuth .Operation.HasCookieAuth }}
	SessionID uuid.UUID
{{- end }}
{{- range .Operation.GetPathParams }}
{{- $param := . }}
	{{ pascalCase $param.Name }} {{ $param.GoType }}
{{- end }}
}

// New{{ .Operation.ID }}Query creates a new {{ lower .Operation.Method }} {{ lower .Operation.Tag }}{{ if eq .Operation.Method "List" }}s{{ end }} query.
func New{{ .Operation.ID }}Query(
{{- if or .Operation.HasBearerAuth .Operation.HasCookieAuth }}
	SessionID uuid.UUID,
{{- end }}
{{- range .Operation.GetPathParams }}
	{{ .Name }} {{ .GoType }},
{{- end }}
) *{{ .Operation.ID }}Query {
	return &{{ .Operation.ID }}Query{
{{- if or .Operation.HasBearerAuth .Operation.HasCookieAuth }}
		SessionID: SessionID,
{{- end }}
{{- range .Operation.GetPathParams }}
		{{ pascalCase .Name }}: {{ .Name }},
{{- end }}
	}
}
{{- if not .Operation.XCodegenCustomHandler }}

// {{ .Operation.ID }}QueryHandler handles the {{ lower .Operation.Method }} {{ lower .Operation.Tag }}{{ if eq .Operation.Method "List" }}s{{ end }} query.
type {{ .Operation.ID }}QueryHandler struct {
	repo repositories.{{ if .Operation.XCodegenRepository }}{{ .Operation.XCodegenRepository }}{{ else }}{{ .Operation.Tag }}{{ end }}Repository
}

// New{{ .Operation.ID }}QueryHandler creates a new {{ lower .Operation.Method }} {{ lower .Operation.Tag }}{{ if eq .Operation.Method "List" }}s{{ end }} query handler.
func New{{ .Operation.ID }}QueryHandler(repo repositories.{{ if .Operation.XCodegenRepository }}{{ .Operation.XCodegenRepository }}{{ else }}{{ .Operation.Tag }}{{ end }}Repository) *{{ .Operation.ID }}QueryHandler {
	return &{{ .Operation.ID }}QueryHandler{
		repo: repo,
	}
}

{{- if not (hasPrefix .Operation.ID "List") }}

// Handle executes the get {{ lower .Operation.Tag }} query.
func (h *{{ .Operation.ID }}QueryHandler) Handle(ctx context.Context, query *{{ .Operation.ID }}Query) (*entities.{{ if .Operation.XCodegenRepository }}{{ .Operation.XCodegenRepository }}{{ else }}{{ .Operation.Tag }}{{ end }}, error) {
{{- if .Operation.GetPathParams }}
	{{- range .Operation.GetPathParams }}
	{{- if eq (lower .Name) "id" }}
	result, err := h.repo.Get(ctx, query.{{ pascalCase .Name }})
	{{- end }}
	{{- end }}
{{- else }}
	// TODO: Implement query logic
	result, err := h.repo.Get(ctx, uuid.Nil)
{{- end }}
	if err != nil {
		return nil, fmt.Errorf("failed to get {{ lower .Operation.Tag }}: %w", err)
	}
	return result, nil
}

{{- else }}

// Handle executes the list {{ lower .Operation.Tag }}s query.
func (h *{{ .Operation.ID }}QueryHandler) Handle(ctx context.Context, query *{{ .Operation.ID }}Query) ([]*entities.{{ if .Operation.XCodegenRepository }}{{ .Operation.XCodegenRepository }}{{ else }}{{ .Operation.Tag }}{{ end }}, int64, error) {
	// TODO: Apply filters based on query parameters
	results, total, err := h.repo.List(ctx, 100, 0) 
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list {{ lower .Operation.Tag }}s: %w", err)
	}

	return results, total, nil
}

{{- end }}
{{- end }}