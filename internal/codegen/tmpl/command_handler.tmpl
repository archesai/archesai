{{- /*
Template: command_handler.tmpl
Generates: A single command handler implementation
Expected data: CQRSTemplateData
*/ -}}
// Code generated by archesai. DO NOT EDIT.

package {{ lower .Operation.Tag }}

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
)

// {{ .Operation.ID }}Command represents the command to {{ lower .Operation.Method }} a {{ lower .Operation.Tag }}.
type {{ .Operation.ID }}Command struct {
{{- if or .Operation.HasBearerAuth .Operation.HasCookieAuth }}
	SessionID uuid.UUID
{{- end }}
{{- range .Operation.GetPathParams }}
	{{ pascalCase .Name }} {{ .GoType }}
{{- end }}
{{- range .Operation.GetHeaderParams }}
	{{ pascalCase .Name }} {{ .GoType }}
{{- end }}
{{- if .Operation.RequestBody }}
{{- range .Operation.RequestBody.GetSortedProperties }}{{- $prop := . }}
{{- $isOptional := stringContains .JSONTag ",omitempty" }}
	{{ .Name }} {{ if and $isOptional (not (hasPrefix .GoType "*")) (not (hasPrefix .GoType "[]")) (not (hasPrefix .GoType "map")) }}*{{ end }}{{ .GoType }}
{{- end }}
{{- end }}
}

// New{{ .Operation.ID }}Command creates a new {{ .Operation.ID }} command.
func New{{ .Operation.ID }}Command(
{{- if or .Operation.HasBearerAuth .Operation.HasCookieAuth }}
	SessionID uuid.UUID,
{{- end }}
{{- range .Operation.GetPathParams }}
	{{ .Name }} {{ .GoType }},
{{- end }}
{{- range .Operation.GetHeaderParams }}
	{{ .Name }} {{ .GoType }},
{{- end }}
{{- if .Operation.RequestBody }}
{{- range .Operation.RequestBody.GetSortedProperties }}{{- $prop := . }}
{{- $isOptional := stringContains .JSONTag ",omitempty" }}
	{{ .Name }} {{ if and $isOptional (not (hasPrefix .GoType "*")) (not (hasPrefix .GoType "[]")) (not (hasPrefix .GoType "map")) }}*{{ end }}{{ .GoType }},
{{- end }}
{{- end }}
) *{{ .Operation.ID }}Command {
	return &{{ .Operation.ID }}Command{
{{- if or .Operation.HasBearerAuth .Operation.HasCookieAuth }}
		SessionID: SessionID,
{{- end }}
{{- range .Operation.GetPathParams }}
		{{ pascalCase .Name }}: {{ .Name }},
{{- end }}
{{- range .Operation.GetHeaderParams }}
		{{ pascalCase .Name }}: {{ .Name }},
{{- end }}
{{- if .Operation.RequestBody }}
{{- range .Operation.RequestBody.GetSortedProperties }}
		{{ .Name }}: {{ .Name }},
{{- end }}
{{- end }}
	}
}
{{- if not .Operation.XCodegenCustomHandler }}

{{- if eq .Operation.Method "POST" }}

// {{ .Operation.ID }}CommandHandler handles the create {{ lower .Operation.Tag }} command.
type {{ .Operation.ID }}CommandHandler struct {
	repo      repositories.{{ if .Operation.XCodegenRepository }}{{ .Operation.XCodegenRepository }}{{ else }}{{ .Operation.Tag }}{{ end }}Repository
	publisher events.Publisher
}

// New{{ .Operation.ID }}CommandHandler creates a new create {{ lower .Operation.Tag }} command handler.
func New{{ .Operation.ID }}CommandHandler(
	repo repositories.{{ if .Operation.XCodegenRepository }}{{ .Operation.XCodegenRepository }}{{ else }}{{ .Operation.Tag }}{{ end }}Repository,
	publisher events.Publisher,
) *{{ .Operation.ID }}CommandHandler {
	return &{{ .Operation.ID }}CommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the create {{ lower .Operation.Tag }} command.
func (h *{{ .Operation.ID }}CommandHandler) Handle(ctx context.Context, cmd *{{ .Operation.ID }}Command) (*entities.{{ if .Operation.XCodegenRepository }}{{ .Operation.XCodegenRepository }}{{ else }}{{ .Operation.Tag }}{{ end }}, error) {
	// Create the {{ lower .Operation.Tag }} entity
	entity := &entities.{{ if .Operation.XCodegenRepository }}{{ .Operation.XCodegenRepository }}{{ else }}{{ .Operation.Tag }}{{ end }}{
		ID:        uuid.New(),
		CreatedAt: time.Now().UTC(),
		UpdatedAt: time.Now().UTC(),
		// TODO: Map command fields to entity
	}

	// Save to repository
	created, err := h.repo.Create(ctx, entity)
	if err != nil {
		return nil, fmt.Errorf("failed to create {{ lower .Operation.Tag }}: %w", err)
	}

	// Publish domain event
	event := events.New{{ if .Operation.XCodegenRepository }}{{ .Operation.XCodegenRepository }}{{ else }}{{ .Operation.Tag }}{{ end }}CreatedEvent(created.ID)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return created, nil
}
{{- else if eq .Operation.Method "PATCH" }}

// {{ .Operation.ID }}CommandHandler handles the update {{ lower .Operation.Tag }} command.
type {{ .Operation.ID }}CommandHandler struct {
	repo      repositories.{{ if .Operation.XCodegenRepository }}{{ .Operation.XCodegenRepository }}{{ else }}{{ .Operation.Tag }}{{ end }}Repository
	publisher events.Publisher
}

// New{{ .Operation.ID }}CommandHandler creates a new update {{ lower .Operation.Tag }} command handler.
func New{{ .Operation.ID }}CommandHandler(
	repo repositories.{{ if .Operation.XCodegenRepository }}{{ .Operation.XCodegenRepository }}{{ else }}{{ .Operation.Tag }}{{ end }}Repository,
	publisher events.Publisher,
) *{{ .Operation.ID }}CommandHandler {
	return &{{ .Operation.ID }}CommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the update {{ lower .Operation.Tag }} command.
func (h *{{ .Operation.ID }}CommandHandler) Handle(ctx context.Context, cmd *{{ .Operation.ID }}Command) (*entities.{{ if .Operation.XCodegenRepository }}{{ .Operation.XCodegenRepository }}{{ else }}{{ .Operation.Tag }}{{ end }}, error) {
	// Fetch existing {{ lower .Operation.Tag }}
	existing, err := h.repo.Get(ctx, cmd.ID)
	if err != nil {
		return nil, fmt.Errorf("failed to get {{ lower .Operation.Tag }}: %w", err)
	}

	// Update fields
	// TODO: Map command fields to entity
	existing.UpdatedAt = time.Now().UTC()

	// Save to repository
	updated, err := h.repo.Update(ctx, cmd.ID, existing)
	if err != nil {
		return nil, fmt.Errorf("failed to update {{ lower .Operation.Tag }}: %w", err)
	}

	// Publish domain event
	event := events.New{{ if .Operation.XCodegenRepository }}{{ .Operation.XCodegenRepository }}{{ else }}{{ .Operation.Tag }}{{ end }}UpdatedEvent(updated.ID)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return updated, nil
}
{{- else if eq .Operation.Method "DELETE" }}

// {{ .Operation.ID }}CommandHandler handles the delete {{ lower .Operation.Tag }} command.
type {{ .Operation.ID }}CommandHandler struct {
	repo      repositories.{{ if .Operation.XCodegenRepository }}{{ .Operation.XCodegenRepository }}{{ else }}{{ .Operation.Tag }}{{ end }}Repository
	publisher events.Publisher
}

// New{{ .Operation.ID }}CommandHandler creates a new delete {{ lower .Operation.Tag }} command handler.
func New{{ .Operation.ID }}CommandHandler(
	repo repositories.{{ if .Operation.XCodegenRepository }}{{ .Operation.XCodegenRepository }}{{ else }}{{ .Operation.Tag }}{{ end }}Repository,
	publisher events.Publisher,
) *{{ .Operation.ID }}CommandHandler {
	return &{{ .Operation.ID }}CommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the delete {{ lower .Operation.Tag }} command.
func (h *{{ .Operation.ID }}CommandHandler) Handle(ctx context.Context, cmd *{{ .Operation.ID }}Command) error {
	// Delete from repository
	if err := h.repo.Delete(ctx, cmd.ID); err != nil {
		return fmt.Errorf("failed to delete {{ lower .Operation.Tag }}: %w", err)
	}

	// Publish domain event
	event := events.New{{ if .Operation.XCodegenRepository }}{{ .Operation.XCodegenRepository }}{{ else }}{{ .Operation.Tag }}{{ end }}DeletedEvent(cmd.ID)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return nil
}
{{- end }}
{{- end }}