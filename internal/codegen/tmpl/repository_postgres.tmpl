// Code generated by codegen repository. DO NOT EDIT.
package {{.Package}}

import (
	"context"
	"database/sql"
	"errors"
	"fmt"

	"github.com/archesai/archesai/internal/core/entities"
	corerrors "github.com/archesai/archesai/internal/core/errors"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
)

{{range .Entities}}{{$entity := .}}
// Postgres{{.Name}}Repository implements {{.Name}}Repository using PostgreSQL.
type Postgres{{.Name}}Repository struct {
	queries *Queries
}

// NewPostgres{{.Name}}Repository creates a new PostgreSQL repository.
func NewPostgres{{.Name}}Repository(db *pgxpool.Pool) *Postgres{{.Name}}Repository {
	return &Postgres{{.Name}}Repository{
		queries: New(db),
	}
}

// {{.Name}} operations

// Create creates a new {{lower .Name}}
func (r *Postgres{{.Name}}Repository) Create(ctx context.Context, entity *entities.{{.Type}}) (*entities.{{.Type}}, error) {
	// Map entity fields to Create{{.Name}}Params based on SQL INSERT statement
	// See: internal/infrastructure/persistence/postgres/queries/{{kebabCase .Name}}.sql
	params := Create{{.Name}}Params{
		ID: entity.ID,{{range .Fields}}{{if and (ne .FieldName "ID") (ne .FieldName "CreatedAt") (ne .FieldName "UpdatedAt")}}{{if not (contains $entity.ExcludeFromCreate .FieldName)}}
		{{ToConstantCase .FieldName}}: {{if .IsEnumType}}string(entity.{{.FieldName}}){{else}}entity.{{.FieldName}}{{end}},{{end}}{{end}}{{end}}
	}

	result, err := r.queries.Create{{.Name}}(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to create {{lower .Name}}: %w", err)
	}

	return map{{.Name}}FromDB(&result), nil
}

// Get retrieves a {{lower .Name}} by ID
func (r *Postgres{{.Name}}Repository) Get(ctx context.Context, id uuid.UUID) (*entities.{{.Type}}, error) {
	result, err := r.queries.Get{{.Name}}(ctx, id)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.Err{{.Name}}NotFound
		}
		return nil, fmt.Errorf("failed to get {{lower .Name}}: %w", err)
	}

	return map{{.Name}}FromDB(&result), nil
}

// Update updates an existing {{lower .Name}}
func (r *Postgres{{.Name}}Repository) Update(ctx context.Context, id uuid.UUID, entity *entities.{{.Type}}) (*entities.{{.Type}}, error) {
	// Map entity fields to Update{{.Name}}Params based on SQL UPDATE statement
	// See: internal/infrastructure/persistence/postgres/queries/{{kebabCase .Name}}.sql{{range .Fields}}{{if and (ne .FieldName "ID") (ne .FieldName "CreatedAt") (ne .FieldName "UpdatedAt")}}{{if not (contains $entity.ExcludeFromUpdate .FieldName)}}{{if and .IsEnumType (not (isPointerType .GoType))}}
	{{camelCase .FieldName}}Str := string(entity.{{.FieldName}}){{end}}{{end}}{{end}}{{end}}
	params := Update{{.Name}}Params{
		ID: id,{{range .Fields}}{{if and (ne .FieldName "ID") (ne .FieldName "CreatedAt") (ne .FieldName "UpdatedAt")}}{{if not (contains $entity.ExcludeFromUpdate .FieldName)}}
		{{ToConstantCase .FieldName}}: {{if .IsEnumType}}{{if not (isPointerType .GoType)}}&{{camelCase .FieldName}}Str{{else}}string(entity.{{.FieldName}}){{end}}{{else if or (isPointerType .GoType) (isSliceType .GoType)}}entity.{{.FieldName}}{{else}}&entity.{{.FieldName}}{{end}},{{end}}{{end}}{{end}}
	}

	result, err := r.queries.Update{{.Name}}(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.Err{{.Name}}NotFound
		}
		return nil, fmt.Errorf("failed to update {{lower .Name}}: %w", err)
	}

	return map{{.Name}}FromDB(&result), nil
}

// Delete removes a {{lower .Name}}
func (r *Postgres{{.Name}}Repository) Delete(ctx context.Context, id uuid.UUID) error {
	err := r.queries.Delete{{.Name}}(ctx, id)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return corerrors.Err{{.Name}}NotFound
		}
		return fmt.Errorf("failed to delete {{lower .Name}}: %w", err)
	}
	return nil
}

// List returns a paginated list of {{lower .Name}}s
func (r *Postgres{{.Name}}Repository) List(ctx context.Context, limit, offset int32) ([]*entities.{{.Type}}, int64, error) {
	listParams := List{{.Name}}sParams{
		Limit:  limit,
		Offset: offset,
	}

	results, err := r.queries.List{{.Name}}s(ctx, listParams)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list {{lower .Name}}s: %w", err)
	}

	items := make([]*entities.{{.Type}}, len(results))
	for i, result := range results {
		items[i] = map{{.Name}}FromDB(&result)
	}

	// For now, return the count as the length of results
	// In production, you'd want a separate count query
	count := int64(len(results))

	return items, count, nil
}

{{if .AdditionalMethods}}
// Additional methods
{{range .AdditionalMethods}}
// {{.Name}} retrieves {{if hasPrefix .Name "List"}}multiple {{$entity.Type | singularize | lower}}s{{else}}a single {{$entity.Type | singularize | lower}}{{end}}{{if .Parameters}} by {{range $i, $p := .Parameters}}{{if $i}} and {{end}}{{$p.Name}}{{end}}{{end}}
func (r *Postgres{{$entity.Name}}Repository) {{.Name}}(ctx context.Context{{range .Parameters}}, {{.Name}} {{.Type}}{{end}}) ({{range $i, $ret := .Returns}}{{if $i}}, {{end}}{{if eq $ret (print "*" $entity.Type)}}*entities.{{$entity.Type}}{{else if eq $ret (print "[]*" $entity.Type)}}[]*entities.{{$entity.Type}}{{else}}{{$ret}}{{end}}{{end}}) {
{{if eq (len .Returns) 2}}{{if hasPrefix .Name "List"}}	// TODO: Implement {{.Name}} - fetch multiple {{$entity.Type | singularize | lower}}s
	return nil, fmt.Errorf("{{.Name}} not yet implemented"){{else}}{{if gt (len .Parameters) 1}}	params := {{.Name}}Params{
		{{range .Parameters}}{{title .Name}}: {{if and (eq .Type "string") (hasSuffix .Name "ID")}}uuid.MustParse({{.Name}}){{else}}{{.Name}}{{end}},
		{{end}}
	}

	result, err := r.queries.{{.Name}}(ctx, params){{else}}	result, err := r.queries.{{.Name}}(ctx{{range .Parameters}}{{if and (eq .Type "string") (or (eq .Name "sessionID") (eq .Name "SessionID") (hasSuffix .Name "ID"))}}, uuid.MustParse({{.Name}}){{else}}, {{.Name}}{{end}}{{end}}){{end}}
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.Err{{$entity.Name}}NotFound
		}
		return nil, fmt.Errorf("failed to {{.Name}}: %w", err)
	}

	return map{{$entity.Name}}FromDB(&result), nil{{end}}
{{else if eq (len .Returns) 1}}	// TODO: Implement {{.Name}}
	return fmt.Errorf("{{.Name}} not yet implemented")
{{else}}	// TODO: Implement {{.Name}}
	return fmt.Errorf("{{.Name}} not yet implemented with {{len .Returns}} returns")
{{end}}}
{{end}}{{end}}

{{$entity := .}}func map{{.Name}}FromDB(db *{{.Name}}) *entities.{{.Type}} {
	if db == nil {
		return nil
	}

	result := &entities.{{.Type}}{
		ID:        db.ID,
		CreatedAt: db.CreatedAt,
		UpdatedAt: db.UpdatedAt,{{range .Fields}}{{if ne .Name "ID"}}{{if ne .Name "CreatedAt"}}{{if ne .Name "UpdatedAt"}}
		{{.FieldName}}: {{if .IsEnumType}}entities.{{$entity.Type}}{{.FieldName}}(db.{{ToConstantCase .FieldName}}){{else}}db.{{ToConstantCase .FieldName}}{{end}},{{end}}{{end}}{{end}}{{end}}
	}

	return result
}
{{end}} {{/* end range .Entities */}}
