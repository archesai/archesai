{{- /*
Template: repository_postgres.tmpl
Generates: A repository for PostgreSQL with basic CRUD implementations and stubs for additional methods
Expected data: RepositoriesTemplateData
*/ -}}
// Code generated by archesai. DO NOT EDIT.

package repositories

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"time"

	"github.com/archesai/archesai/internal/core/entities"
	corerrors "github.com/archesai/archesai/internal/core/errors"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgxpool"
)

{{ $entity := .Entity }}
// Postgres{{ $entity.Name }}Repository implements {{ $entity.Name }}Repository using PostgreSQL.
type Postgres{{ $entity.Name }}Repository struct {
	queries *Queries
}

// NewPostgres{{ $entity.Name }}Repository creates a new PostgreSQL repository.
func NewPostgres{{ $entity.Name }}Repository(db *pgxpool.Pool) *Postgres{{ $entity.Name }}Repository {
	return &Postgres{{ $entity.Name }}Repository{
		queries: New(db),
	}
}

// {{ $entity.Name }} operations

// Create creates a new {{ lower $entity.Name }}
func (r *Postgres{{ $entity.Name }}Repository) Create(ctx context.Context, entity *entities.{{ $entity.Name }}) (*entities.{{ $entity.Name }}, error) {
	params := Create{{ $entity.Name }}Params{
		ID: entity.ID,{{ range $entity.GetSortedProperties }}{{ $field := . }}{{ if not $field.IsSpecialField }}{{- $excluded := false }}{{- if and $entity.XCodegen $entity.XCodegen.Repository }}{{- $repo := $entity.XCodegen.Repository }}{{- if $repo.ExcludeFromCreate }}{{- range $repo.ExcludeFromCreate }}{{- if or (eq . $field.Name) (eq . (pascalCase $field.Name)) }}{{- $excluded = true }}{{- end }}{{- end }}{{- end }}{{- end }}{{- if not $excluded }}
		{{ $field.Name }}: {{ $field.GetCreateParamValue "entity" $entity }},{{ end }}{{ end }}{{ end }}
	}

	result, err := r.queries.Create{{ $entity.Name }}(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to create {{	lower $entity.Name}}: %w", err)
	}

	return map{{ $entity.Name }}FromDB(&result), nil
}

// Get retrieves a {{ lower $entity.Name }} by ID
func (r *Postgres{{ $entity.Name }}Repository) Get(ctx context.Context, id uuid.UUID) (*entities.{{ $entity.Name }}, error) {
	params := Get{{ $entity.Name }}Params{
		ID: id,
	}
	
	result, err := r.queries.Get{{ $entity.Name }}(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.Err{{ $entity.Name }}NotFound
		}
		return nil, fmt.Errorf("failed to get {{ lower $entity.Name }}: %w", err)
	}

	return map{{ $entity.Name }}FromDB(&result), nil
}

// Update updates an existing {{ lower $entity.Name }}
func (r *Postgres{{ $entity.Name }}Repository) Update(ctx context.Context, id uuid.UUID, entity *entities.{{ $entity.Name }}) (*entities.{{ $entity.Name }}, error) {
{{ range $entity.GetSortedProperties }}{{- $field := . }}
{{- if not $field.IsSpecialField }}
{{- $excluded := false }}
{{- if and $entity.XCodegen $entity.XCodegen.Repository }}
{{- $repo := $entity.XCodegen.Repository }}
{{- if $repo.ExcludeFromUpdate }}
{{- range $repo.ExcludeFromUpdate }}
{{- if or (eq . $field.Name) (eq . (pascalCase $field.Name)) }}
{{- $excluded = true }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- if and (not $excluded) $field.NeedsUpdateVarDeclaration }}
	{{ $field.GetUpdateVarDeclaration "entity" }}
{{- end }}
{{- end }}
{{- end }}
	params := Update{{ $entity.Name }}Params{
		ID: id,{{ range $entity.GetSortedProperties }}{{- $field := . }}{{ if not $field.IsSpecialField }}{{- $excluded := false }}{{- if and $entity.XCodegen $entity.XCodegen.Repository }}{{- $repo := $entity.XCodegen.Repository }}{{- if $repo.ExcludeFromUpdate }}{{- range $repo.ExcludeFromUpdate }}{{- if or (eq . $field.Name) (eq . (pascalCase $field.Name)) }}{{- $excluded = true }}{{- end }}{{- end }}{{- end }}{{- end }}{{- if not $excluded }}
		{{ pascalCase $field.Name }}: {{ $field.GetUpdateParamValue "entity" $entity }},{{ end }}{{ end }}{{ end }}
	}

	result, err := r.queries.Update{{ $entity.Name }}(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.Err{{ $entity.Name }}NotFound
		}
		return nil, fmt.Errorf("failed to update {{ lower $entity.Name }}: %w", err)
	}

	return map{{ $entity.Name }}FromDB(&result), nil
}

// Delete removes a {{ lower $entity.Name }}
func (r *Postgres{{ $entity.Name }}Repository) Delete(ctx context.Context, id uuid.UUID) error {
	params := Delete{{ $entity.Name }}Params{
		ID: id,
	}

	err := r.queries.Delete{{ $entity.Name }}(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return corerrors.Err{{ $entity.Name }}NotFound
		}
		return fmt.Errorf("failed to delete {{ lower $entity.Name }}: %w", err)
	}
	return nil
}

// List returns a paginated list of {{ lower $entity.Name }}s
func (r *Postgres{{ $entity.Name }}Repository) List(ctx context.Context, limit, offset int32) ([]*entities.{{ $entity.Name }}, int64, error) {
	listParams := List{{ $entity.Name }}sParams{
		Limit:  limit,
		Offset: offset,
	}

	results, err := r.queries.List{{ $entity.Name }}s(ctx, listParams)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list {{ lower $entity.Name }}s: %w", err)
	}

	items := make([]*entities.{{ $entity.Name }}, len(results))
	for i, result := range results {
		items[i] = map{{ $entity.Name }}FromDB(&result)
	}

	// For now, return the count as the length of results
	// In production, you'd want a separate count query
	count := int64(len(results))

	return items, count, nil
}

{{if and $entity.XCodegen $entity.XCodegen.Repository }}{{- $repo := $entity.XCodegen.Repository }}{{if $repo.AdditionalMethods}}
{{range $repo.AdditionalMethods}}
{{- $additionalMethod := . }}
// {{ $additionalMethod.Name }} retrieves {{if eq $additionalMethod.Returns "multiple" }}multiple {{ $entity.Name }}s{{ else }}a single {{ $entity.Name }}{{ end }}{{ if $additionalMethod.Params }} by {{ range $i, $param := $additionalMethod.Params }}{{ if $i }} and {{ end }}{{ $param.Name }}{{ end }}{{ end }}
func (r *Postgres{{ $entity.Name }}Repository) {{ $additionalMethod.Name }}(ctx context.Context{{ if $additionalMethod.Params }}{{ range $i, $param := $additionalMethod.Params }}, {{ $param.Name }} {{ $param.Type }}{{ end }}{{ end }}) ({{ if eq $additionalMethod.Returns "single" }}*entities.{{ $entity.Name }}{{ else if eq $additionalMethod.Returns "multiple" }}[]*entities.{{ $entity.Name }}{{ end }}, error) {
	{{- /* For nullable fields, we need to handle them carefully.
	       The sqlc generates pointer types for nullable fields.
	       We need to check if this field is nullable in the entity. */ -}}
	params := {{ $additionalMethod.Name }}Params{
		{{- if $additionalMethod.Params }}
		{{- range $additionalMethod.Params }}
		{{- $paramName := pascalCase .Name }}
		{{- $isNullable := false }}
		{{- /* Check if the corresponding field in the entity is nullable */ -}}
		{{- range $entity.GetSortedProperties }}
			{{- if eq (pascalCase .Name) $paramName }}
				{{- if .Nullable }}
					{{- $isNullable = true }}
				{{- else if isPointer .GoType }}
					{{- $isNullable = true }}
				{{- end }}
			{{- end }}
		{{- end }}
		{{- if .Format }}
			{{- $fmt := deref .Format }}
			{{- if eq $fmt "uuid" }}
				{{- if $isNullable }}
		{{ $paramName }}: func() *uuid.UUID {
			if {{ .Name }} == "" {
				return nil
			}
			id := uuid.MustParse({{ .Name }})
			return &id
		}(),
				{{- else }}
		{{ $paramName }}: uuid.MustParse({{ .Name }}),
				{{- end }}
			{{- end }}
		{{- else if $isNullable }}
		{{ $paramName }}: func() *{{ .Type }} {
			v := {{ .Type }}({{ .Name }})
			return &v
		}(),
		{{- else }}
		{{ $paramName }}: {{ .Name }},
		{{- end }}
		{{- end }}
		{{- end }}
	}

	result, err := r.queries.{{ $additionalMethod.Name }}(ctx, params)
	if err != nil {
		if errors.Is(err, pgx.ErrNoRows) || err == sql.ErrNoRows {
			return nil, corerrors.Err{{$entity.Name}}NotFound
		}
		return nil, fmt.Errorf("failed to {{ $additionalMethod.Name }}: %w", err)
	}
	{{ if eq $additionalMethod.Returns "multiple" }}items := make([]*entities.{{ $entity.Name }}, len(result))
	for i, res := range result {
		items[i] = map{{ $entity.Name }}FromDB(&res)
	}
	return items, nil
	{{ else if eq $additionalMethod.Returns "single" }}
	return map{{ $entity.Name }}FromDB(&result), nil
	{{ end }}
}
{{ end }}
{{ end }}
{{ end }}

func map{{ $entity.Name }}FromDB(db *{{ $entity.Name }}) *entities.{{ $entity.Name }} {
	if db == nil {
		return nil
	}

	result := &entities.{{ $entity.Name }}{
		ID:        db.ID,
		CreatedAt: db.CreatedAt,
		UpdatedAt: db.UpdatedAt,{{ range $entity.GetSortedProperties }}{{- $field := . }}{{if not $field.IsSpecialField }}
		{{ $field.Name }}: {{ $field.GetDBMapValue "db" $entity }},{{ end }}{{ end }}
	}

	return result
}
