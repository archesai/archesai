// Code generated by codegen repository. DO NOT EDIT.
package {{.Package}}

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/archesai/archesai/internal/application/dto"
{{- range .Entities }}
{{- if eq .EntityPackage "aggregates" }}
	"github.com/archesai/archesai/internal/core/aggregates"
{{- else if eq .EntityPackage "valueobjects" }}
	"github.com/archesai/archesai/internal/core/valueobjects"
{{- else }}
	"github.com/archesai/archesai/internal/core/entities"
{{- end }}
{{- end }}
	"github.com/archesai/archesai/internal/core/errors"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgxpool"
)

{{range .Entities}}{{$entity := .}}{{$pkg := .EntityPackage}}
// Postgres{{.Name}}Repository implements {{.Name}}Repository using PostgreSQL.
type Postgres{{.Name}}Repository struct {
	queries *Queries
}

// NewPostgres{{.Name}}Repository creates a new PostgreSQL repository.
func NewPostgres{{.Name}}Repository(db *pgxpool.Pool) *Postgres{{.Name}}Repository {
	return &Postgres{{.Name}}Repository{
		queries: New(db),
	}
}

// {{.Name}} operations

// Create creates a new {{lower .Name}}
func (r *Postgres{{.Name}}Repository) Create(ctx context.Context, entity *{{$pkg}}.{{.Type}}) (*{{$pkg}}.{{.Type}}, error) {
	params := Create{{.Name}}Params{
		ID: entity.ID,
		{{range .Fields}}{{if ne .Name "ID"}}{{if ne .Name "CreatedAt"}}{{if ne .Name "UpdatedAt"}}{{if ne .Name "CompletedAt"}}{{if ne .Name "StartedAt"}}{{if ne .Name "Error"}}{{if .SQLCType}}
		{{.FieldName}}: {{if .IsEnumType}}string(entity.{{.FieldName}}){{else}}entity.{{.FieldName}}{{end}},{{end}}{{end}}{{end}}{{end}}{{end}}{{end}}{{end}}{{end}}
	}

	result, err := r.queries.Create{{.Name}}(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to create {{lower .Name}}: %w", err)
	}

	return map{{.Name}}FromDB(&result), nil
}

// Get retrieves a {{lower .Name}} by ID
func (r *Postgres{{.Name}}Repository) Get(ctx context.Context, id uuid.UUID) (*{{$pkg}}.{{.Type}}, error) {
	result, err := r.queries.Get{{.Name}}(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, errors.Err{{.Name}}NotFound
		}
		return nil, fmt.Errorf("failed to get {{lower .Name}}: %w", err)
	}

	return map{{.Name}}FromDB(&result), nil
}

// Update updates an existing {{lower .Name}}
func (r *Postgres{{.Name}}Repository) Update(ctx context.Context, id uuid.UUID, entity *{{$pkg}}.{{.Type}}) (*{{$pkg}}.{{.Type}}, error) {
	params := Update{{.Name}}Params{
		ID: id,
		{{range .Fields}}{{if not (isUpdateExcluded .Name $entity.UpdateExclude)}}{{if ne .Name "ID"}}{{if ne .Name "CreatedAt"}}{{if ne .Name "UpdatedAt"}}{{if ne .Name "OrganizationID"}}{{if ne .Name "UserID"}}{{if ne .Name "AccountID"}}{{if ne .Name "ProviderID"}}{{if ne .Name "PipelineID"}}{{if ne .Name "ToolID"}}{{if ne .Name "InviterID"}}{{if .SQLCType}}
		{{.FieldName}}: {{if .IsEnumType}}func() *string { s := string(entity.{{.FieldName}}); return &s }(){{else}}{{if and (hasPrefix .GoType "*")}}entity.{{.FieldName}}{{else}}&entity.{{.FieldName}}{{end}}{{end}},{{end}}{{end}}{{end}}{{end}}{{end}}{{end}}{{end}}{{end}}{{end}}{{end}}{{end}}{{end}}{{end}}
	}

	result, err := r.queries.Update{{.Name}}(ctx, params)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, errors.Err{{.Name}}NotFound
		}
		return nil, fmt.Errorf("failed to update {{lower .Name}}: %w", err)
	}

	return map{{.Name}}FromDB(&result), nil
}

// Delete removes a {{lower .Name}}
func (r *Postgres{{.Name}}Repository) Delete(ctx context.Context, id uuid.UUID) error {
	err := r.queries.Delete{{.Name}}(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return errors.Err{{.Name}}NotFound
		}
		return fmt.Errorf("failed to delete {{lower .Name}}: %w", err)
	}
	return nil
}

// List returns a paginated list of {{lower .Name}}s
func (r *Postgres{{.Name}}Repository) List(ctx context.Context, params dto.List{{.Name}}sParams) ([]*{{$pkg}}.{{.Type}}, int64, error) {
	// Calculate offset from page
	offset := int32(0)
	limit := int32(10) // default

	// Check if params has Page field with Limit and Offset
	if params.Page != nil {
		if params.Page.Offset != nil && *params.Page.Offset >= 0 {
			offset = int32(*params.Page.Offset)
		}
		if params.Page.Limit != nil && *params.Page.Limit > 0 {
			limit = int32(*params.Page.Limit)
		}
	}

	listParams := List{{.Name}}sParams{
		Limit:  limit,
		Offset: offset,
	}

	results, err := r.queries.List{{.Name}}s(ctx, listParams)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list {{lower .Name}}s: %w", err)
	}

	items := make([]*{{$pkg}}.{{.Type}}, len(results))
	for i, result := range results {
		items[i] = map{{.Name}}FromDB(&result)
	}

	// For now, return the count as the length of results
	// In production, you'd want a separate count query
	count := int64(len(results))

	return items, count, nil
}

{{if .AdditionalMethods}}
// Additional methods
{{range .AdditionalMethods}}
// {{.Name}} retrieves {{if hasPrefix .Name "List"}}multiple {{$entity.Type | singularize | lower}}s{{else}}a single {{$entity.Type | singularize | lower}}{{end}}{{if .Parameters}} by {{range $i, $p := .Parameters}}{{if $i}} and {{end}}{{$p.Name}}{{end}}{{end}}
func (r *Postgres{{$entity.Name}}Repository) {{.Name}}(ctx context.Context{{range .Parameters}}, {{.Name}} {{.Type}}{{end}}) ({{range $i, $ret := .Returns}}{{if $i}}, {{end}}{{if eq $ret (print "*" $entity.Type)}}*{{$pkg}}.{{$entity.Type}}{{else if eq $ret (print "[]*" $entity.Type)}}[]*{{$pkg}}.{{$entity.Type}}{{else}}{{$ret}}{{end}}{{end}}) {
	{{if eq (len .Returns) 2}}
	{{if hasPrefix .Name "List"}}
	// TODO: Implement {{.Name}} - fetch multiple {{$entity.Type | singularize | lower}}s
	return nil, fmt.Errorf("{{.Name}} not yet implemented")
	{{else}}
	// TODO: Implement {{.Name}} - fetch single {{$entity.Type | singularize | lower}}
	return nil, fmt.Errorf("{{.Name}} not yet implemented")
	{{end}}
	{{else if eq (len .Returns) 1}}
	// TODO: Implement {{.Name}}
	return fmt.Errorf("{{.Name}} not yet implemented")
	{{else}}
	// TODO: Implement {{.Name}}
	return fmt.Errorf("{{.Name}} not yet implemented with {{len .Returns}} returns")
	{{end}}
}
{{end}}{{end}}

func map{{.Name}}FromDB(db *{{.Name}}) *{{$pkg}}.{{.Type}} {
	if db == nil {
		return nil
	}

	result := &{{$pkg}}.{{.Type}}{
		ID:        db.ID,
		CreatedAt: db.CreatedAt,
		UpdatedAt: db.UpdatedAt,
		{{range .Fields}}{{if ne .Name "ID"}}{{if ne .Name "CreatedAt"}}{{if ne .Name "UpdatedAt"}}{{if .SQLCType}}
		{{.FieldName}}: {{if .IsEnumType}}{{.GoType}}(db.{{.FieldName}}){{else}}db.{{.FieldName}}{{end}},
		{{end}}{{end}}{{end}}{{end}}{{end}}
	}

	return result
}
{{end}} {{/* end range .Entities */}}
