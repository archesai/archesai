{{- /*
Template: schema_hcl.tmpl
Generates: HCL database schema from OpenAPI specifications
Expected data: HCLTemplateData with Schemas
*/ -}}{{- range .Schemas }}{{- $schema := . -}}
table "{{ snakeCase .Name }}" {
  schema = schema.public
{{- range .GetSortedProperties }}{{- $field := . }}
{{- $defaultValue := "" }}
{{- if .DefaultValue }}{{- $defaultValue = formatHCLDefault . }}{{- end }}
{{- if and (eq $defaultValue "") (eq .Name "ID") }}{{- $defaultValue = "sql(\"gen_random_uuid()\")" }}{{- end }}
{{- if and (eq $defaultValue "") (eq .Name "CreatedAt") }}{{- $defaultValue = "sql(\"CURRENT_TIMESTAMP\")" }}{{- end }}
{{- if and (eq $defaultValue "") (eq .Name "UpdatedAt") }}{{- $defaultValue = "sql(\"CURRENT_TIMESTAMP\")" }}{{- end }}
{{- $hasDefault := ne $defaultValue "" }}
  column "{{ snakeCase .Name }}" {
{{- if $hasDefault }}
    null    = {{ if .Nullable }}true{{ else }}false{{ end }}
    type    = {{ mapToHCLType . }}
    default = {{ $defaultValue }}
{{- else }}
    null = {{ if .Nullable }}true{{ else }}false{{ end }}
    type = {{ mapToHCLType . }}
{{- end }}
  }
{{- end }}
  primary_key {
    columns = [column.id]
  }
{{- if and .XCodegen .XCodegen.Repository }}
{{- $repo := .XCodegen.Repository }}
{{- if $repo.Relations }}
{{- range $repo.Relations }}
  foreign_key "{{ snakeCase $schema.Name }}_{{ snakeCase .Field }}_fkey" {
    columns     = [column.{{ snakeCase .Field }}]
    ref_columns = [table.{{ .References }}.column.{{ if .ReferencesField }}{{ .ReferencesField }}{{ else }}id{{ end }}]
    on_update   = {{ if .OnUpdate }}{{ .OnUpdate }}{{ else }}NO_ACTION{{ end }}
    on_delete   = {{ if .OnDelete }}{{ .OnDelete }}{{ else }}CASCADE{{ end }}
  }
{{- end }}
{{- end }}
{{- if $repo.Indices }}
{{- range $repo.Indices }}
{{- if eq . "slug" }}
  index "idx_{{ snakeCase $schema.Name }}_{{ snakeCase . }}" {
    unique  = true
    columns = [column.{{ snakeCase . }}]
  }
{{- else if and (ne . "stripeCustomerIdentifier") (ne . "email") (ne . "token") }}
  index "idx_{{ snakeCase $schema.Name }}_{{ snakeCase . }}" {
    columns = [column.{{ snakeCase . }}]
  }
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- range .GetSortedProperties }}{{- if .Enum }}
  check "{{ snakeCase $schema.Name }}_{{ snakeCase .Name }}_check" {
    expr = "({{ snakeCase .Name }} = ANY (ARRAY[{{ range $i, $v := .Enum }}{{ if $i }}, {{ end }}'{{ $v }}'::text{{ end }}]))"
  }
{{- end }}{{- end }}
{{- if eq .Name "Organization" }}
  check "organization_slug_format" {
    expr = "((slug)::text ~ '^[a-z0-9]+(?:-[a-z0-9]+)*$'::text)"
  }
{{- end }}
{{- if and .XCodegen .XCodegen.Repository }}
{{- $repo := .XCodegen.Repository }}
{{- if $repo.Indices }}
{{- range $repo.Indices }}
{{- if eq . "stripeCustomerIdentifier" }}
  unique "{{ snakeCase $schema.Name }}_stripe_customer_identifier_key" {
    columns = [column.stripe_customer_identifier]
  }
{{- else if eq . "email" }}
  unique "{{ snakeCase $schema.Name }}_email_key" {
    columns = [column.email]
  }
{{- else if eq . "token" }}
  unique "{{ snakeCase $schema.Name }}_token_key" {
    columns = [column.token]
  }
{{- end }}
{{- end }}
{{- end }}
{{- end }}
}

{{ end }}
schema "public" {
  comment = "standard public schema"
}