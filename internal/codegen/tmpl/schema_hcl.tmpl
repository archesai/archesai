{{- /*
Template: schema_hcl.tmpl
Generates: HCL database schema from OpenAPI specifications
Expected data: HCLTemplateData with Schemas and DatabaseType
*/ -}}{{- $dbType := .DatabaseType -}}
{{- $isPostgres := eq $dbType "postgresql" -}}
{{- $isSQLite := eq $dbType "sqlite" -}}
{{- range .Schemas }}{{- $schema := . -}}
table "{{ snakeCase .Name }}" {
{{- if $isPostgres }}
  schema = schema.public
{{- else if $isSQLite }}
  schema = schema.main
{{- end }}
{{- range .GetSortedProperties }}{{- $field := . }}
{{- $defaultValue := "" }}
{{- if .DefaultValue }}
  {{- if $isSQLite }}
    {{- $defaultValue = formatSQLiteHCLDefault . }}
  {{- else }}
    {{- $defaultValue = formatHCLDefault . }}
  {{- end }}
{{- end }}
{{- if and (eq $defaultValue "") (eq .Name "ID") }}
  {{- if $isSQLite }}
    {{- $defaultValue = "sql(\"lower(hex(randomblob(16)))\")" }}
  {{- else }}
    {{- $defaultValue = "sql(\"gen_random_uuid()\")" }}
  {{- end }}
{{- end }}
{{- if and (eq $defaultValue "") (eq .Name "CreatedAt") }}{{- $defaultValue = "sql(\"CURRENT_TIMESTAMP\")" }}{{- end }}
{{- if and (eq $defaultValue "") (eq .Name "UpdatedAt") }}{{- $defaultValue = "sql(\"CURRENT_TIMESTAMP\")" }}{{- end }}
{{- $hasDefault := ne $defaultValue "" }}
  column "{{ snakeCase .Name }}" {
{{- if $hasDefault }}
    null    = {{ if .Nullable }}true{{ else }}false{{ end }}
    {{- if $isSQLite }}
    type    = {{ mapToSQLiteHCLType . }}
    {{- else }}
    type    = {{ mapToHCLType . }}
    {{- end }}
    default = {{ $defaultValue }}
{{- else }}
    null = {{ if .Nullable }}true{{ else }}false{{ end }}
    {{- if $isSQLite }}
    type = {{ mapToSQLiteHCLType . }}
    {{- else }}
    type = {{ mapToHCLType . }}
    {{- end }}
{{- end }}
  }
{{- end }}
  primary_key {
    columns = [column.id]
  }
{{- if and .XCodegen .XCodegen.Repository }}
{{- $repo := .XCodegen.Repository }}
{{- if $repo.Relations }}
{{- range $repo.Relations }}
  foreign_key "{{ snakeCase $schema.Name }}_{{ snakeCase .Field }}_fkey" {
    columns     = [column.{{ snakeCase .Field }}]
    ref_columns = [table.{{ .References }}.column.{{ if .ReferencesField }}{{ .ReferencesField }}{{ else }}id{{ end }}]
    on_update   = "{{ if .OnUpdate }}{{ .OnUpdate }}{{ else }}NO_ACTION{{ end }}"
    on_delete   = "{{ if .OnDelete }}{{ .OnDelete }}{{ else }}CASCADE{{ end }}"
  }
{{- end }}
{{- end }}
{{- if $repo.Indices }}
{{- range $repo.Indices }}
{{- if eq . "slug" }}
  index "idx_{{ snakeCase $schema.Name }}_{{ snakeCase . }}" {
    unique  = true
    columns = [column.{{ snakeCase . }}]
  }
{{- else if and (ne . "stripeCustomerIdentifier") (ne . "email") (ne . "token") }}
  index "idx_{{ snakeCase $schema.Name }}_{{ snakeCase . }}" {
    columns = [column.{{ snakeCase . }}]
  }
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- if $isPostgres }}
{{- range .GetSortedProperties }}{{- if .Enum }}
  check "{{ snakeCase $schema.Name }}_{{ snakeCase .Name }}_check" {
    expr = "({{ snakeCase .Name }} = ANY (ARRAY[{{ range $i, $v := .Enum }}{{ if $i }}, {{ end }}'{{ $v }}'::text{{ end }}]))"
  }
{{- end }}{{- end }}
{{- end }}
}

{{ end }}
{{- if $isPostgres }}
schema "public" {
  comment = "standard public schema"
}
{{- else if $isSQLite }}
schema "main" {
}
{{- end }}