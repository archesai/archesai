{{- /*
Template: single_query_handler.tmpl
Generates: A single query handler implementation
Expected data:
- Package: string (package name, e.g., "labels")
- QueryType: string (e.g., "Get", "List", "Search")
- EntityName: string (e.g., "Label")
- EntityNameLower: string (e.g., "label")
- EntityNamePlural: string (e.g., "Labels")
- PathParams: []ParamDef
- QueryParams: []ParamDef
*/ -}}
// Code generated by archesai/codegen. DO NOT EDIT.

package {{ .Package }}

import (
	"context"
	"fmt"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/repositories"
)

// {{ .QueryType }}{{ if eq .QueryType "List" }}{{ .QueryEntityNamePlural }}{{ else }}{{ .QueryEntityName }}{{ end }}Query represents a query to {{ lower .QueryType }} {{ .EntityNameLower }}{{ if eq .QueryType "List" }}s{{ end }}.
type {{ .QueryType }}{{ if eq .QueryType "List" }}{{ .QueryEntityNamePlural }}{{ else }}{{ .QueryEntityName }}{{ end }}Query struct {
{{- if .RequiresAuth }}
	SessionID uuid.UUID
{{- end }}
{{- if .PathParams }}
{{- range .PathParams }}
	{{ pascalCase .Name }} {{ .Type }}
{{- end }}
{{- end }}
{{- if eq .QueryType "List" }}
	Limit          int32
	Offset         int32
	OrderBy        string
	OrderDirection string
{{- end }}
}

// New{{ .QueryType }}{{ if eq .QueryType "List" }}{{ .QueryEntityNamePlural }}{{ else }}{{ .QueryEntityName }}{{ end }}Query creates a new {{ lower .QueryType }} {{ .EntityNameLower }}{{ if eq .QueryType "List" }}s{{ end }} query.
func New{{ .QueryType }}{{ if eq .QueryType "List" }}{{ .QueryEntityNamePlural }}{{ else }}{{ .QueryEntityName }}{{ end }}Query(
{{- if .RequiresAuth }}
	SessionID uuid.UUID,
{{- end }}
{{- range .PathParams }}
	{{ .Name }} {{ .Type }},
{{- end }}
) *{{ .QueryType }}{{ if eq .QueryType "List" }}{{ .QueryEntityNamePlural }}{{ else }}{{ .QueryEntityName }}{{ end }}Query {
	return &{{ .QueryType }}{{ if eq .QueryType "List" }}{{ .QueryEntityNamePlural }}{{ else }}{{ .QueryEntityName }}{{ end }}Query{
{{- if .RequiresAuth }}
		SessionID: SessionID,
{{- end }}
{{- range .PathParams }}
		{{ pascalCase .Name }}: {{ .Name }},
{{- end }}
{{- if eq .QueryType "List" }}
		Limit:  100,
		Offset: 0,
{{- end }}
	}
}
{{- if not .CustomHandler }}

// {{ .QueryType }}{{ if eq .QueryType "List" }}{{ .QueryEntityNamePlural }}{{ else }}{{ .QueryEntityName }}{{ end }}QueryHandler handles the {{ lower .QueryType }} {{ .EntityNameLower }}{{ if eq .QueryType "List" }}s{{ end }} query.
type {{ .QueryType }}{{ if eq .QueryType "List" }}{{ .QueryEntityNamePlural }}{{ else }}{{ .QueryEntityName }}{{ end }}QueryHandler struct {
	repo repositories.{{ .EntityName }}Repository
}

// New{{ .QueryType }}{{ if eq .QueryType "List" }}{{ .QueryEntityNamePlural }}{{ else }}{{ .QueryEntityName }}{{ end }}QueryHandler creates a new {{ lower .QueryType }} {{ .EntityNameLower }}{{ if eq .QueryType "List" }}s{{ end }} query handler.
func New{{ .QueryType }}{{ if eq .QueryType "List" }}{{ .QueryEntityNamePlural }}{{ else }}{{ .QueryEntityName }}{{ end }}QueryHandler(repo repositories.{{ .EntityName }}Repository) *{{ .QueryType }}{{ if eq .QueryType "List" }}{{ .QueryEntityNamePlural }}{{ else }}{{ .QueryEntityName }}{{ end }}QueryHandler {
	return &{{ .QueryType }}{{ if eq .QueryType "List" }}{{ .QueryEntityNamePlural }}{{ else }}{{ .QueryEntityName }}{{ end }}QueryHandler{
		repo: repo,
	}
}

{{- if eq .QueryType "Get" }}

// Handle executes the get {{ .EntityNameLower }} query.
func (h *{{ .QueryType }}{{ .QueryEntityName }}QueryHandler) Handle(ctx context.Context, query *{{ .QueryType }}{{ .QueryEntityName }}Query) (*entities.{{ .EntityName }}, error) {
{{- if .PathParams }}
	// Use path parameters to get the entity
	{{- range .PathParams }}
	{{- if eq (lower .Name) "id" }}
	result, err := h.repo.Get(ctx, query.{{ pascalCase .Name }})
	{{- end }}
	{{- end }}
{{- else }}
	// TODO: Implement query logic
	result, err := h.repo.Get(ctx, uuid.Nil)
{{- end }}
	if err != nil {
		return nil, fmt.Errorf("failed to get {{ .EntityNameLower }}: %w", err)
	}
	return result, nil
}

{{- else if eq .QueryType "List" }}

// Handle executes the list {{ .EntityNameLower }}s query.
func (h *{{ .QueryType }}{{ .QueryEntityNamePlural }}QueryHandler) Handle(ctx context.Context, query *{{ .QueryType }}{{ .QueryEntityNamePlural }}Query) ([]*entities.{{ .EntityName }}, int64, error) {
	// TODO: Apply filters based on query parameters
	results, total, err := h.repo.List(ctx, query.Limit, query.Offset)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list {{ .EntityNameLower }}s: %w", err)
	}

	return results, total, nil
}

{{- else }}

// Handle executes the {{ lower .QueryType }} {{ .EntityNameLower }} query.
func (h *{{ .QueryType }}{{ .QueryEntityName }}QueryHandler) Handle(ctx context.Context, query *{{ .QueryType }}{{ .QueryEntityName }}Query) (*entities.{{ .EntityName }}, error) {
	// TODO: Implement query logic for non-standard operation
	return nil, fmt.Errorf("not implemented")
}

{{- end }}
{{- end }}