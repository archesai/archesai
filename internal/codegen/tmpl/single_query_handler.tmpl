{{- /*
Template: single_query_handler.tmpl
Generates: A single query handler implementation
Expected data:
- Package: string (package name, e.g., "labels")
- QueryType: string (e.g., "Get", "List", "Search")
- EntityName: string (e.g., "Label")
- EntityNameLower: string (e.g., "label")
- EntityNamePlural: string (e.g., "Labels")
*/ -}}
// Code generated by archesai/codegen. DO NOT EDIT.

package {{ .Package }}

import (
	"context"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/errors"
	"github.com/archesai/archesai/internal/core/repositories"
	"github.com/archesai/archesai/internal/core/valueobjects"
)

{{- if eq .QueryType "Get" }}
// Get{{ .EntityName }}Query represents a query to get a {{ .EntityNameLower }}.
type Get{{ .EntityName }}Query struct {
	ID valueobjects.{{ .EntityName }}ID
}

// NewGet{{ .EntityName }}Query creates a new get {{ .EntityNameLower }} query.
func NewGet{{ .EntityName }}Query(id valueobjects.{{ .EntityName }}ID) *Get{{ .EntityName }}Query {
	return &Get{{ .EntityName }}Query{
		ID: id,
	}
}

// {{ .QueryType }}{{ .EntityName }}QueryHandler handles the get {{ .EntityNameLower }} query.
type {{ .QueryType }}{{ .EntityName }}QueryHandler struct {
	repo repositories.{{ .EntityName }}Repository
}

// New{{ .QueryType }}{{ .EntityName }}QueryHandler creates a new get {{ .EntityNameLower }} query handler.
func New{{ .QueryType }}{{ .EntityName }}QueryHandler(repo repositories.{{ .EntityName }}Repository) *{{ .QueryType }}{{ .EntityName }}QueryHandler {
	return &{{ .QueryType }}{{ .EntityName }}QueryHandler{
		repo: repo,
	}
}

// Handle executes the get {{ .EntityNameLower }} query.
func (h *{{ .QueryType }}{{ .EntityName }}QueryHandler) Handle(ctx context.Context, query *{{ .QueryType }}{{ .EntityName }}Query) (*entities.{{ .EntityName }}, error) {
	result, err := h.repo.Get(ctx, query.ID)
	if err != nil {
		return nil, errors.Wrap(err, "failed to get {{ .EntityNameLower }}")
	}
	return result, nil
}
{{- else if eq .QueryType "List" }}
// List{{ .EntityNamePlural }}Query represents a query to list {{ .EntityNameLower }}s.
type List{{ .EntityNamePlural }}Query struct {
	Limit          int
	Offset         int
	OrderBy        string
	OrderDirection string
}

// NewList{{ .EntityNamePlural }}Query creates a new list {{ .EntityNameLower }}s query.
func NewList{{ .EntityNamePlural }}Query() *List{{ .EntityNamePlural }}Query {
	return &List{{ .EntityNamePlural }}Query{
		Limit:  100,
		Offset: 0,
	}
}

// {{ .QueryType }}{{ .EntityNamePlural }}QueryHandler handles the list {{ .EntityNameLower }}s query.
type {{ .QueryType }}{{ .EntityNamePlural }}QueryHandler struct {
	repo repositories.{{ .EntityName }}Repository
}

// New{{ .QueryType }}{{ .EntityNamePlural }}QueryHandler creates a new list {{ .EntityNameLower }}s query handler.
func New{{ .QueryType }}{{ .EntityNamePlural }}QueryHandler(repo repositories.{{ .EntityName }}Repository) *{{ .QueryType }}{{ .EntityNamePlural }}QueryHandler {
	return &{{ .QueryType }}{{ .EntityNamePlural }}QueryHandler{
		repo: repo,
	}
}

// Handle executes the list {{ .EntityNameLower }}s query.
func (h *{{ .QueryType }}{{ .EntityNamePlural }}QueryHandler) Handle(ctx context.Context, query *{{ .QueryType }}{{ .EntityNamePlural }}Query) ([]*entities.{{ .EntityName }}, int64, error) {
	// Apply filters
	filters := make(map[string]interface{})
	if query.OrganizationID != "" {
		filters["organization_id"] = query.OrganizationID
	}
	if query.Filter != nil {
		// TODO: Apply advanced filters
	}

	// Execute query with pagination
	results, err := h.repo.List(ctx, filters, query.Limit, query.Offset)
	if err != nil {
		return nil, 0, errors.Wrap(err, "failed to list {{ .EntityNameLower }}s")
	}

	// Get total count
	total, err := h.repo.Count(ctx, filters)
	if err != nil {
		return nil, 0, errors.Wrap(err, "failed to count {{ .EntityNameLower }}s")
	}

	return results, total, nil
}
{{- else if eq .QueryType "Search" }}
// {{ .QueryType }}{{ .EntityNamePlural }}QueryHandler handles the search {{ .EntityNameLower }}s query.
type {{ .QueryType }}{{ .EntityNamePlural }}QueryHandler struct {
	repo repositories.{{ .EntityName }}Repository
}

// New{{ .QueryType }}{{ .EntityNamePlural }}QueryHandler creates a new search {{ .EntityNameLower }}s query handler.
func New{{ .QueryType }}{{ .EntityNamePlural }}QueryHandler(repo repositories.{{ .EntityName }}Repository) *{{ .QueryType }}{{ .EntityNamePlural }}QueryHandler {
	return &{{ .QueryType }}{{ .EntityNamePlural }}QueryHandler{
		repo: repo,
	}
}

// Handle executes the search {{ .EntityNameLower }}s query.
func (h *{{ .QueryType }}{{ .EntityNamePlural }}QueryHandler) Handle(ctx context.Context, query *{{ .QueryType }}{{ .EntityNamePlural }}Query) ([]*entities.{{ .EntityName }}, error) {
	results, err := h.repo.Search(ctx, query.SearchTerm, query.Limit)
	if err != nil {
		return nil, errors.Wrap(err, "failed to search {{ .EntityNameLower }}s")
	}
	return results, nil
}
{{- end }}