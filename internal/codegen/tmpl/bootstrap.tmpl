{{- /*
Template: bootstrap.tmpl
Generates: Main application wiring and dependency injection
Expects:
- Domains: []DomainData
  - Name: string 
  - HasController: bool
  - HasRepository: bool
  - HasCommands: bool
  - HasQueries: bool
  - Commands: []string (e.g., ["Create", "Update", "Delete"])
  - Queries: []string (e.g., ["Get", "List"])
*/ -}}
// Code generated by archesai. DO NOT EDIT.

package bootstrap

import (
	"context"
	"fmt"
	"log/slog"
	"net/http"
	"time"

	"golang.org/x/sync/errgroup"

	"github.com/archesai/archesai/internal/adapters/http/controllers"
	"github.com/archesai/archesai/internal/adapters/http/server"
{{- range .Domains }}
{{- if .HasCommands }}
	{{ lower .Name }}Commands "github.com/archesai/archesai/internal/application/commands/{{ lower .Name }}"
{{- end }}
{{- if .HasQueries }}
	{{ lower .Name }}Queries "github.com/archesai/archesai/internal/application/queries/{{ lower .Name }}"
{{- end }}
{{- end }}
	authCommands "github.com/archesai/archesai/internal/application/commands/auth"
	authQueries "github.com/archesai/archesai/internal/application/queries/auth"
	configQueries "github.com/archesai/archesai/internal/application/queries/config"
	healthQueries "github.com/archesai/archesai/internal/application/queries/health"
	"github.com/archesai/archesai/internal/infrastructure/auth"
	"github.com/archesai/archesai/internal/infrastructure/cache"
	"github.com/archesai/archesai/internal/infrastructure/config"
	"github.com/archesai/archesai/internal/infrastructure/notifications"
	database "github.com/archesai/archesai/internal/infrastructure/persistence"
)

// App holds all application dependencies.
type App struct {
	// Core infrastructure
	infra *Infrastructure

	// Public infrastructure access
	Logger *slog.Logger
	Config *config.Config
	Server *server.Server

	// HTTP Controllers
	AuthController *controllers.AuthController
{{- range .Domains }}
{{- if .HasController }}
	{{ pascalCase .Name }}Controller *controllers.{{ pascalCase .Name }}Controller
{{- end }}
{{- end }}
}

// NewApp creates and initializes all application dependencies.
func NewApp(cfg *config.Config) (*App, error) {
	// Initialize infrastructure
	infra, err := NewInfrastructure(cfg)
	if err != nil {
		return nil, fmt.Errorf("failed to initialize infrastructure: %w", err)
	}

	log := infra.Logger

	// Run migrations if enabled
	if cfg.Database.RunMigrations {
		log.Info("running database migrations")
		if err := database.RunMigrations(infra.Database.SQLDB(), infra.Database.TypeString(), log); err != nil {
			log.Error("failed to run migrations", "error", err)
			isProduction := cfg.API.Environment == "production"
			if isProduction {
				return nil, fmt.Errorf("failed to run migrations: %w", err)
			}
		}
		log.Info("database migrations completed")
	}

	// Create repositories
	log.Info("creating repositories")
	repos, err := NewRepositories(infra)
	if err != nil {
		return nil, fmt.Errorf("failed to create repositories: %w", err)
	}

	// Initialize auth service after repositories are available
	log.Info("initializing auth service")
	var stringCache cache.Cache[string]
	if infra.redisClient != nil {
		stringCache = cache.NewRedisCache[string](infra.redisClient.GetRedisClient(), "auth:tokens")
	} else {
		stringCache = cache.NewMemoryCache[string]()
	}

	// Initialize notification deliverers
	magicLinkDeliverer := notifications.NewConsoleDeliverer(log)
	otpDeliverer := notifications.NewOTPDeliverer(log)

	infra.AuthService = auth.NewService(cfg, repos.Sessions, repos.Users, repos.Accounts, stringCache, magicLinkDeliverer, otpDeliverer, log)
	log.Info("auth service ready")

	// Create app instance to populate
	app := &App{
		// Infrastructure
		infra:  infra,
		Logger: log,
		Config: cfg,
	}

	// Initialize all domain handlers in parallel where possible
	g, _ := errgroup.WithContext(context.Background())

	// Initialize config domain (infrastructure query - needs special handling)
	log.Info("initializing config domain")
	getConfigHandler := configQueries.NewGetConfigQueryHandler(cfg)
	app.ConfigController = controllers.NewConfigController(getConfigHandler)
	log.Info("config domain ready")

	// Initialize health domain (infrastructure query - needs special handling)
	log.Info("initializing health domain")
	getHealthHandler := healthQueries.NewGetHealthQueryHandler()
	app.HealthController = controllers.NewHealthController(getHealthHandler)
	log.Info("health domain ready")

	// Initialize auth domain (cross-cutting concern spanning multiple entities)
	g.Go(func() error {
		log.Info("initializing auth domain")

		// Create command handlers (in REST operation order matching controller signature)
		confirmEmailChangeHandler := authCommands.NewConfirmEmailChangeCommandHandler(infra.AuthService)
		confirmEmailVerificationHandler := authCommands.NewConfirmEmailVerificationCommandHandler(infra.AuthService)
		confirmPasswordResetHandler := authCommands.NewConfirmPasswordResetCommandHandler(infra.AuthService)
		linkAccountHandler := authCommands.NewLinkAccountCommandHandler(infra.AuthService)
		loginHandler := authCommands.NewLoginCommandHandler(infra.AuthService)
		logoutHandler := authCommands.NewLogoutCommandHandler(infra.AuthService)
		logoutAllHandler := authCommands.NewLogoutAllCommandHandler(infra.AuthService)
		registerHandler := authCommands.NewRegisterCommandHandler(infra.AuthService, repos.Users, repos.Accounts)
		requestEmailChangeHandler := authCommands.NewRequestEmailChangeCommandHandler(infra.AuthService)
		requestEmailVerificationHandler := authCommands.NewRequestEmailVerificationCommandHandler(infra.AuthService)
		requestMagicLinkHandler := authCommands.NewRequestMagicLinkCommandHandler(infra.AuthService)
		requestPasswordResetHandler := authCommands.NewRequestPasswordResetCommandHandler(infra.AuthService)
		verifyMagicLinkHandler := authCommands.NewVerifyMagicLinkCommandHandler(infra.AuthService)
		updateAccountHandler := authCommands.NewUpdateAccountCommandHandler(infra.AuthService)
		updateSessionHandler := authCommands.NewUpdateSessionCommandHandler(repos.Sessions)
		deleteAccountHandler := authCommands.NewDeleteAccountCommandHandler(infra.AuthService)
		deleteSessionHandler := authCommands.NewDeleteSessionCommandHandler(repos.Sessions)

		// Create query handlers (in REST operation order matching controller signature)
		getAccountHandler := authQueries.NewGetAccountQueryHandler(repos.Accounts)
		getSessionHandler := authQueries.NewGetSessionQueryHandler(repos.Sessions)
		oauthAuthorizeHandler := authQueries.NewOAuthAuthorizeQueryHandler(infra.AuthService)
		oauthCallbackHandler := authQueries.NewOAuthCallbackQueryHandler(infra.AuthService, infra.EventPublisher)
		listAccountsHandler := authQueries.NewListAccountsQueryHandler(repos.Accounts)
		listSessionsHandler := authQueries.NewListSessionsQueryHandler(repos.Sessions)

		// Create controller with handlers in order matching NewAuthController signature
		app.AuthController = controllers.NewAuthController(
			confirmEmailChangeHandler,
			confirmEmailVerificationHandler,
			confirmPasswordResetHandler,
			linkAccountHandler,
			loginHandler,
			logoutHandler,
			logoutAllHandler,
			registerHandler,
			requestEmailChangeHandler,
			requestEmailVerificationHandler,
			requestMagicLinkHandler,
			requestPasswordResetHandler,
			verifyMagicLinkHandler,
			updateAccountHandler,
			updateSessionHandler,
			deleteAccountHandler,
			deleteSessionHandler,
			getAccountHandler,
			getSessionHandler,
			oauthAuthorizeHandler,
			oauthCallbackHandler,
			listAccountsHandler,
			listSessionsHandler,
		)

		log.Info("auth domain ready")
		return nil
	})

{{- range .Domains }}
{{- if and .HasController (ne .Name "Config") (ne .Name "Health") }}

	// Initialize {{ lower .Name }} domain
	g.Go(func() error {
		log.Info("initializing {{ lower .Name }} domain")

		{{- if or .HasCommands .HasQueries }}
		// Create command and query handlers
		{{- end }}
		{{- $domain := . }}
		{{- range .Commands }}
		{{ camelCase . }}Handler := {{ lower $domain.Name }}Commands.New{{ pascalCase . }}CommandHandler(
			repos.{{ pluralize $domain.Name }},
			infra.EventPublisher,
		)
		{{- end }}
		{{- range .Queries }}
		{{ camelCase . }}Handler := {{ lower $domain.Name }}Queries.New{{ pascalCase . }}QueryHandler(
			repos.{{ pluralize $domain.Name }},
		)
		{{- end }}

		// Create controller with handlers
		app.{{ pascalCase .Name }}Controller = controllers.New{{ pascalCase .Name }}Controller(
			{{- range .Commands }}
			{{ camelCase . }}Handler,
			{{- end }}
			{{- range .Queries }}
			{{ camelCase . }}Handler,
			{{- end }}
		)

		log.Info("{{ lower .Name }} domain ready")
		return nil
	})
{{- end }}
{{- end }}

	// Wait for all parallel initializations to complete
	if err := g.Wait(); err != nil {
		return nil, fmt.Errorf("failed to initialize domains: %w", err)
	}

	// Create the HTTP server
	log.Info("creating HTTP server")
	app.Server = server.NewServer(cfg.API, log)

	// Register all application routes
	app.registerRoutes()

	log.Info("application initialized successfully")
	return app, nil
}

// Close cleans up all resources.
func (a *App) Close() error {
	a.Logger.Info("shutting down application")
	if a.infra != nil {
		return a.infra.Close()
	}
	return nil
}

// registerRoutes registers all application routes with the server.
func (a *App) registerRoutes() {
	// Get the mux from the server
	mux := a.Server.Mux()

	// Register all application routes
	a.RegisterRoutes(mux)
	a.Logger.Info("routes registered")
}

// RegisterRoutes registers all application routes with the http.ServeMux.
func (a *App) RegisterRoutes(mux *http.ServeMux) {
	a.Logger.Info("registering API routes...")

	// ========================================
	// API ROUTES
	// ========================================
	// Auth routes
	a.Logger.Info("registering auth routes")
	controllers.RegisterAuthRoutes(mux, a.AuthController)
{{- range .Domains }}
{{- if .HasController }}
	// {{ lower .Name }} routes
	a.Logger.Info("registering {{ lower .Name }} routes")
	controllers.Register{{ .Name }}Routes(mux, a.{{ .Name }}Controller)
{{- end }}
{{- end }}

	a.Logger.Info("all routes registered successfully")
}