// Code generated by codegen repository. DO NOT EDIT.
package {{.Package}}

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/google/uuid"
)

{{range .Entities}}{{$entity := .}}
// SQLite{{.Name}}Repository implements {{.Name}}Repository using SQLite.
type SQLite{{.Name}}Repository struct {
	queries *Queries
}

// NewSQLite{{.Name}}Repository creates a new SQLite repository.
func NewSQLite{{.Name}}Repository(db *sql.DB) *SQLite{{.Name}}Repository {
	return &SQLite{{.Name}}Repository{
		queries: New(db),
	}
}

// {{.Name}} operations

// Create creates a new {{lower .Name}}
func (r *SQLite{{.Name}}Repository) Create(ctx context.Context, entity *entities.{{.Type}}) (*entities.{{.Type}}, error) {
	// For now, return a basic implementation
	// Actual implementation would need to be customized per entity
	return nil, fmt.Errorf("Create{{.Name}} not yet implemented - requires custom mapping")
}

// Get retrieves a {{lower .Name}} by ID
func (r *SQLite{{.Name}}Repository) Get(ctx context.Context, id uuid.UUID) (*entities.{{.Type}}, error) {
	// For now, return a basic implementation
	// Actual implementation would need to be customized per entity
	return nil, fmt.Errorf("Get{{.Name}} not yet implemented - requires custom mapping")
}

// Update updates an existing {{lower .Name}}
func (r *SQLite{{.Name}}Repository) Update(ctx context.Context, id uuid.UUID, entity *entities.{{.Type}}) (*entities.{{.Type}}, error) {
	// For now, return a basic implementation
	// Actual implementation would need to be customized per entity
	return nil, fmt.Errorf("Update{{.Name}} not yet implemented - requires custom mapping")
}

// Delete removes a {{lower .Name}}
func (r *SQLite{{.Name}}Repository) Delete(ctx context.Context, id uuid.UUID) error {
	// For now, return a basic implementation
	// Actual implementation would need to be customized per entity
	return fmt.Errorf("Delete{{.Name}} not yet implemented - requires custom mapping")
}

// List returns a paginated list of {{lower .Name}}s
func (r *SQLite{{.Name}}Repository) List(ctx context.Context, limit, offset int32) ([]*entities.{{.Type}}, int64, error) {
	// For now, return a basic implementation
	// Actual implementation would need to be customized per entity
	return nil, 0, fmt.Errorf("List{{.Name}}s not yet implemented - requires custom mapping")
}

{{if .AdditionalMethods}}
// Additional methods
{{range .AdditionalMethods}}
// {{.Name}} retrieves {{if hasPrefix .Name "List"}}multiple {{$entity.Type | singularize | lower}}s{{else}}a single {{$entity.Type | singularize | lower}}{{end}}{{if .Parameters}} by {{range $i, $p := .Parameters}}{{if $i}} and {{end}}{{$p.Name}}{{end}}{{end}}
func (r *SQLite{{$entity.Name}}Repository) {{.Name}}(ctx context.Context{{range $i, $param := .Parameters}}, {{$param.Name}} {{$param.Type}}{{end}}) ({{range $i, $ret := .Returns}}{{if $i}}, {{end}}{{if eq $ret (print "*" $entity.Type)}}*entities.{{$entity.Type}}{{else if eq $ret (print "[]*" $entity.Type)}}[]*entities.{{$entity.Type}}{{else}}{{$ret}}{{end}}{{end}}) {
	{{if eq (len .Returns) 2}}
	{{if hasPrefix .Name "List"}}
	// TODO: Implement {{.Name}} - fetch multiple records
	return nil, fmt.Errorf("{{.Name}} not yet implemented - requires custom mapping")
	{{else}}
	// TODO: Implement {{.Name}} - fetch single record
	return nil, fmt.Errorf("{{.Name}} not yet implemented - requires custom mapping")
	{{end}}
	{{else if eq (len .Returns) 1}}
	// TODO: Implement {{.Name}}
	return fmt.Errorf("{{.Name}} not yet implemented - requires custom mapping")
	{{else}}
	// TODO: Implement {{.Name}}
	return fmt.Errorf("{{.Name}} not yet implemented - requires custom mapping")
	{{end}}
}
{{end}}
{{end}}
{{end}} {{/* end range .Entities */}}