{{- /*
Template: schema.tmpl
Generates: A single schema definition (entity or value object)
Expected data: SchemasTemplateData
*/ -}}
package {{ .Package }}

import (
	"fmt"
	"strings"
	"time"
	"github.com/google/uuid"
	"github.com/archesai/archesai/internal/core/errors"
	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/valueobjects"
)

{{- $schema := .Schema }}
{{- $isEntity := eq $schema.GetSchemaType "entity" }}
{{- $isValueObject := eq $schema.GetSchemaType "valueobject" }}


{{- if $schema.IsEnum }}

// {{ $schema.Name }} represents the {{ $schema.Description }} enumeration
type {{ $schema.Name }} string

// {{ $schema.Name }} values
const (
{{- range $schema.Values }}
	{{ .Name }}{{ .Value }} {{ $schema.Name }} = "{{ .RawValue }}"
{{- end }}
)

// String returns the string representation of {{ $schema.Name }}
func (e {{ $schema.Name }}) String() string {
	return string(e)
}

// IsValid checks if the {{ $schema.Name }} value is valid
func (e {{ $schema.Name }}) IsValid() bool {
	switch e {
{{- range $schema.Values }}
	case {{ .Name }}{{ .Value }}:
{{- end }}
		return true
	default:
		return false
	}
}

// Parse{{ $schema.Name }} parses a string into a {{ $schema.Name }}
func Parse{{ $schema.Name }}(s string) ({{ $schema.Name }}, error) {
	v := {{ $schema.Name }}(s)
	if !v.IsValid() {
		return "", fmt.Errorf("invalid {{ $schema.Name }}: %s", s)
	}
	return v, nil
}

{{- else }}

{{- /* Generate nested types first */ -}}
{{- range $schema.CollectNestedTypes }}
// {{ .GoType }} represents {{ if .Description }}{{ .Description }}{{ else }}a nested type for {{ $schema.Name }}{{ end }}
type {{ .GoType }} struct {
{{- range .GetSortedProperties }}{{- $prop := . }}{{- $isOptional := stringContains .JSONTag ",omitempty" }}
{{- if .Description }}

	// {{ .Name }} {{ .Description }}
{{- else }}

{{- end }}
	{{ .Name }} {{ if $isOptional }}*{{ .GoType }}{{ else }}{{ if .Nullable }}*{{ end }}{{ .GoType }}{{ end }}{{ if or .JSONTag .YAMLTag }} `{{ if .JSONTag }}json:"{{ .JSONTag }}"{{ end }}{{ if and .JSONTag .YAMLTag }} {{ end }}{{ if .YAMLTag }}yaml:"{{ .YAMLTag }}"{{ end }}`{{ end }}
{{- end }}
}
{{- end }}

{{- range .Schema.GetSortedProperties }}{{- $field := . }}
{{- if $field.Enum }}
{{- $fieldType := print $schema.Name $field.Name }}

// {{ $fieldType }} represents the enumeration of valid values for {{ $field.Name }}
type {{ $fieldType }} string

// Valid {{ $field.Name }} values
const (
{{- range .Enum }}{{- $enum := . }}
	{{ $schema.Name }}{{ $field.Name }}{{ pascalCase $enum }} {{ $fieldType }} = "{{ $enum }}"
{{- end }}
)

// String returns the string representation
func (e {{ $fieldType }}) String() string {
	return string(e)
}

// IsValid checks if the value is valid
func (e {{ $fieldType }}) IsValid() bool {
	switch e {
{{- range $field.Enum }}{{- $enum := . }}
	case {{ $schema.Name }}{{ $field.Name }}{{ pascalCase $enum }}:
		return true
{{- end }}
	default:
		return false
	}
}

// Parse{{ $schema.Name }}{{ $field.Name }} parses a string into the enum type
func Parse{{ $schema.Name }}{{ $field.Name }}(s string) ({{ $fieldType }}, error) {
	v := {{ $fieldType }}(s)
	if !v.IsValid() {
		return "", fmt.Errorf("invalid {{ $field.Name }}: %s", s)
	}
	return v, nil
}
{{- end }}
{{- end }}

// {{ $schema.Name }} represents {{ if $schema.Description }}{{ $schema.Description }}{{ else }}a {{ $schema.Name }}{{ end }}
type {{ $schema.Name }} struct {
{{- range $schema.GetSortedProperties }}{{- $prop := . }}{{- $isOptional := stringContains .JSONTag ",omitempty" }}{{- $baseType := .GoType }}{{- if .Enum }}{{- $baseType = print $schema.Name .Name }}{{- end }}
{{- if .Description }}

	// {{ .Name }} {{ .Description }}
{{- else }}

{{- end }}
	{{ .Name }} {{ if $isOptional }}*{{ $baseType }}{{ else }}{{ if .Nullable }}*{{ end }}{{ $baseType }}{{ end }}{{ if or .JSONTag .YAMLTag }} `{{ if .JSONTag }}json:"{{ .JSONTag }}"{{ end }}{{ if and .JSONTag .YAMLTag }} {{ end }}{{ if .YAMLTag }}yaml:"{{ .YAMLTag }}"{{ end }}`{{ end }}
{{- end }}
{{- if and $isEntity $schema.HasDomainEvents }}

	events []events.DomainEvent `json:"-" yaml:"-"`
{{- end }}
}

{{- /* Constructor - Unified for both entities and value objects */ -}}
{{- if or $isEntity $isValueObject }}

// New{{ $schema.Name }} creates a new {{ if $isEntity }}{{ $schema.Name }} entity{{ else }}immutable {{ $schema.Name }} value object{{ end }}.
{{- if $isEntity }}
// All required fields must be provided and valid.
{{- else }}
// Value objects are immutable and validated upon creation.
{{- end }}
func New{{ $schema.Name }}(
{{- if $isEntity }}
{{- range $schema.GetSortedProperties }}{{- $isOptional := stringContains .JSONTag ",omitempty" }}{{- $baseType := .GoType }}{{- if .Enum }}{{- $baseType = print $schema.Name .Name }}{{- end }}
{{- if and ($schema.IsPropertyRequired .JSONTag) (not $isOptional) (not (or (eq .Name "ID") (eq .Name "CreatedAt") (eq .Name "UpdatedAt"))) }}
	{{ camelCase .Name }} {{ if .Nullable }}*{{ end }}{{ $baseType }},
{{- end }}
{{- end }}
) (*{{ $schema.Name }}, error) {
{{- else }}
{{- range $schema.GetSortedProperties }}{{- $isOptional := stringContains .JSONTag ",omitempty" }}{{- $baseType := .GoType }}{{- if .Enum }}{{- $baseType = print $schema.Name .Name }}{{- end }}
	{{ camelCase .Name }} {{ if $isOptional }}*{{ $baseType }}{{ else }}{{ if .Nullable }}*{{ end }}{{ $baseType }}{{ end }},
{{- end }}
) ({{ $schema.Name }}, error) {
{{- end }}
	// Validate required fields
{{- range $schema.GetSortedProperties }}{{- $field := . }}{{- $isOptional := stringContains $field.JSONTag ",omitempty" }}{{- $baseType := .GoType }}{{- if .Enum }}{{- $baseType = print $schema.Name .Name }}{{- end }}
{{- if and $isEntity ($schema.IsPropertyRequired $field.JSONTag) (not $isOptional) }}
{{- if .Enum }}
	if !{{ camelCase .Name }}.IsValid() {
		return {{ if $isEntity }}nil{{ else }}{{ $schema.Name }}{}{{ end }}, fmt.Errorf("invalid {{ .Name }}: %s", {{ camelCase .Name }})
	}
{{- else if and (eq .GoType "string") (not (or (eq .Name "CreatedAt") (eq .Name "UpdatedAt") (eq .Name "ID"))) (not .Nullable) }}
	if {{ camelCase .Name }} == "" {
		return {{ if $isEntity }}nil{{ else }}{{ $schema.Name }}{}{{ end }}, fmt.Errorf("{{ .Name }} cannot be empty")
	}
{{- else if and (eq .GoType "int") (not .Nullable) }}
	if {{ camelCase .Name }} < 0 {
		return {{ if $isEntity }}nil{{ else }}{{ $schema.Name }}{}{{ end }}, fmt.Errorf("{{ .Name }} cannot be negative")
	}
{{- else if and (eq .GoType "float64") (not .Nullable) }}
	if {{ camelCase .Name }} < 0 {
		return {{ if $isEntity }}nil{{ else }}{{ $schema.Name }}{}{{ end }}, fmt.Errorf("{{ .Name }} cannot be negative")
	}
{{- end }}
{{- else if and $isValueObject (not $isOptional) }}
{{- if and .Enum .Nullable }}
	// Nullable enum - validate only if present
	if {{ camelCase .Name }} != nil && !(*{{ camelCase .Name }}).IsValid() {
		return {{ $schema.Name }}{}, fmt.Errorf("invalid {{ .Name }}: %s", *{{ camelCase .Name }})
	}
{{- else if .Enum }}
	if !{{ camelCase .Name }}.IsValid() {
		return {{ $schema.Name }}{}, fmt.Errorf("invalid {{ .Name }}: %s", {{ camelCase .Name }})
	}
{{- else if and .Required (eq .GoType "string") (not .Nullable) }}
	if {{ camelCase .Name }} == "" {
		return {{ $schema.Name }}{}, fmt.Errorf("{{ .Name }} cannot be empty")
	}
{{- else if and .Required (eq .GoType "int") (not .Nullable) }}
	if {{ camelCase .Name }} < 0 {
		return {{ $schema.Name }}{}, fmt.Errorf("{{ .Name }} cannot be negative")
	}
{{- else if and .Required (eq .GoType "float64") (not .Nullable) }}
	if {{ camelCase .Name }} < 0 {
		return {{ $schema.Name }}{}, fmt.Errorf("{{ .Name }} cannot be negative")
	}
{{- else if and (eq .GoType "uuid.UUID") (not .Nullable) (not $isOptional) }}
	if {{ camelCase .Name }} == uuid.Nil {
		return {{ $schema.Name }}{}, fmt.Errorf("{{ .Name }} cannot be nil UUID")
	}
{{- end }}
{{- end }}
{{- end }}

{{- if $isEntity }}
	now := time.Now().UTC()
	id := uuid.New()
	{{ lower $schema.Name }} := &{{ $schema.Name }}{
{{- range $schema.GetSortedProperties }}{{- $isOptional := stringContains .JSONTag ",omitempty" }}
{{- if eq .Name "ID" }}
		{{ .Name }}: id,
{{- else if eq .Name "CreatedAt" }}
		{{ .Name }}: now,
{{- else if eq .Name "UpdatedAt" }}
		{{ .Name }}: now,
{{- else if and ($schema.IsPropertyRequired .JSONTag) (not $isOptional) }}
		{{ .Name }}: {{ camelCase .Name }},
{{- end }}
{{- end }}
{{- if $schema.HasDomainEvents }}
		events: []events.DomainEvent{},
{{- end }}
	}

{{- if $schema.HasDomainEvents }}
	{{ lower $schema.Name }}.addEvent(events.New{{ $schema.Name }}CreatedEvent(id))
{{- end }}

	return {{ lower $schema.Name }}, nil
{{- else }}
	return {{ $schema.Name }}{
{{- range $schema.GetSortedProperties }}
		{{ .Name }}: {{ camelCase .Name }},
{{- end }}
	}, nil
{{- end }}
}

{{- if $isValueObject }}
// Zero{{ $schema.Name }} returns the zero value for {{ $schema.Name }}.
// This is useful for comparisons and as a default value.
func Zero{{ $schema.Name }}() {{ $schema.Name }} {
	return {{ $schema.Name }}{}
}
{{- end }}

{{- end }}

{{- /* Getters */ -}}
{{- range $schema.GetSortedProperties }}{{- $isOptional := stringContains .JSONTag ",omitempty" }}{{- $baseType := .GoType }}{{- if .Enum }}{{- $baseType = print $schema.Name .Name }}{{- end }}

{{- if $isEntity }}
// Get{{ .Name }} returns the {{ .Name }}
func (e *{{ $schema.Name }}) Get{{ .Name }}() {{ if $isOptional }}*{{ $baseType }}{{ else }}{{ if .Nullable }}*{{ end }}{{ $baseType }}{{ end }} {
	return e.{{ .Name }}
}
{{- else if $isValueObject }}
// Get{{ .Name }} returns the {{ .Name }} value.
// Value objects are immutable, so this returns a copy of the value.
func (v {{ $schema.Name }}) Get{{ .Name }}() {{ if $isOptional }}*{{ $baseType }}{{ else }}{{ if .Nullable }}*{{ end }}{{ $baseType }}{{ end }} {
{{- if $isOptional }}
	return v.{{ .Name }}
{{- else if or (hasPrefix .GoType "[]") (hasPrefix .GoType "map") }}
{{- if not .Nullable }}
	// Return a copy for slices and maps to maintain immutability
	{{- if hasPrefix .GoType "[]" }}
	result := make({{ .GoType }}, len(v.{{ .Name }}))
	copy(result, v.{{ .Name }})
	return result
	{{- else }}
	result := make({{ .GoType }})
	for k, val := range v.{{ .Name }} {
		result[k] = val
	}
	return result
	{{- end }}
{{- else }}
	return v.{{ .Name }}
{{- end }}
{{- else }}
	return v.{{ .Name }}
{{- end }}
}
{{- end }}
{{- end }}

{{- /* Value object specific methods */ -}}
{{- if $isValueObject }}

// Validate validates the {{ $schema.Name }} value object.
// Returns an error if any field fails validation.
func (v {{ $schema.Name }}) Validate() error {
{{- range $schema.GetSortedProperties }}{{- $field := . }}{{- $isOptional := stringContains .JSONTag ",omitempty" }}
{{- if and .Enum $isOptional }}
	// Optional enum - validate only if present
	if v.{{ .Name }} != nil {
		if !v.{{ .Name }}.IsValid() {
			return fmt.Errorf("invalid {{ .Name }}: %s", v.{{ .Name }})
		}
	}
{{- else if and .Enum .Nullable }}
	// Nullable enum - validate only if present
	if v.{{ .Name }} != nil && !(*v.{{ .Name }}).IsValid() {
		return fmt.Errorf("invalid {{ .Name }}: %s", *v.{{ .Name }})
	}
{{- else if .Enum }}
	if !v.{{ .Name }}.IsValid() {
		return fmt.Errorf("invalid {{ .Name }}: %s", v.{{ .Name }})
	}
{{- else if and .Required (eq .GoType "string") (not .Nullable) (not $isOptional) }}
	if v.{{ .Name }} == "" {
		return fmt.Errorf("{{ .Name }} cannot be empty")
	}
{{- else if and .Required (eq .GoType "int") (not .Nullable) (not $isOptional) }}
	if v.{{ .Name }} < 0 {
		return fmt.Errorf("{{ .Name }} cannot be negative")
	}
{{- else if and .Required (eq .GoType "float64") (not .Nullable) (not $isOptional) }}
	if v.{{ .Name }} < 0 {
		return fmt.Errorf("{{ .Name }} cannot be negative")
	}
{{- else if and (eq .GoType "uuid.UUID") (not .Nullable) (not $isOptional) }}
	if v.{{ .Name }} == uuid.Nil {
		return fmt.Errorf("{{ .Name }} cannot be nil UUID")
	}
{{- end }}
{{- end }}
	return nil
}

// IsZero returns true if this is the zero value.
func (v {{ $schema.Name }}) IsZero() bool {
	zero := Zero{{ $schema.Name }}()
	// Compare using string representation as a simple equality check
	return v.String() == zero.String()
}

// String returns a string representation of {{ $schema.Name }}
func (v {{ $schema.Name }}) String() string {
	var fields []string
{{- range $schema.GetSortedProperties }}
	fields = append(fields, fmt.Sprintf("{{ .Name }}: %v", v.{{ .Name }}))
{{- end }}
	return fmt.Sprintf("{{ $schema.Name }}{%s}", strings.Join(fields, ", "))
}
{{- end }}

{{- /* Domain Events methods for entities */ -}}
{{- if and $isEntity $schema.HasDomainEvents }}

// Events returns the domain events
func (e *{{ $schema.Name }}) Events() []events.DomainEvent {
	return e.events
}

// ClearEvents clears the domain events
func (e *{{ $schema.Name }}) ClearEvents() {
	e.events = []events.DomainEvent{}
}

// addEvent adds a domain event
func (e *{{ $schema.Name }}) addEvent(event events.DomainEvent) {
	e.events = append(e.events, event)
}
{{- end }}

{{- end }}
