{{- /*
Unified Schema Template
Handles: Entities, Value Objects, DTOs, Enums, and Constants
*/ -}}
{{template "header.tmpl" .}}
{{- /* Import block */ -}}
{{- if or .Imports .IsEntity .IsAggregate .IsEnum .IsValueObject }}
import (
	"fmt"
	"strings"
	"time"
	"github.com/google/uuid"
{{- if and (or .IsEntity .IsAggregate) (ne .Package "core") }}
	"github.com/archesai/archesai/internal/core/errors"
	"github.com/archesai/archesai/internal/core/events"
{{- end }}
{{- if and (or .IsEntity .IsAggregate) (ne .Package "valueobjects") }}
	"github.com/archesai/archesai/internal/core/valueobjects"
{{- end }}
{{- range .Imports }}
	"{{ . }}"
{{- end }}
)
{{- end }}
{{- /* Handle Enums */ -}}
{{- if .IsEnum }}
// {{ .Name }} represents the {{ .Description }} enumeration
type {{ .Name }} string

// {{ .Name }} values
const (
{{- range .Values }}
	{{ .Name }}{{ .Value }} {{ $.Name }} = "{{ .RawValue }}"
{{- end }}
)

// String returns the string representation of {{ .Name }}
func (e {{ .Name }}) String() string {
	return string(e)
}

// IsValid checks if the {{ .Name }} value is valid
func (e {{ .Name }}) IsValid() bool {
	switch e {
{{- range .Values }}
	case {{ .Name }}{{ .Value }}:
{{- end }}
		return true
	default:
		return false
	}
}

// Parse{{ .Name }} parses a string into a {{ .Name }}
func Parse{{ .Name }}(s string) ({{ .Name }}, error) {
	v := {{ .Name }}(s)
	if !v.IsValid() {
		return "", fmt.Errorf("invalid {{ .Name }}: %s", s)
	}
	return v, nil
}

{{- /* Handle Constants */ -}}
{{- else if .IsConstant }}
// {{ .Name }} constants
const (
{{- range .Constants }}
	{{ .Name }} = {{ .Value }}{{ if .Comment }} // {{ .Comment }}{{ end }}
{{- end }}
)
{{- /* Handle Structs (Entity, Aggregate, ValueObject, DTO) */ -}}
{{- else }}
{{- /* Handle multiple types if provided */ -}}
{{- if .Types }}
{{- range .Types }}
// {{ .Name }} represents {{ if .Description }}{{ .Description }}{{ else }}a {{ .Name }}{{ end }}
{{- if $.MakeUnexported }}
// The struct is unexported to enforce creation through constructor functions.
type {{ lower .Name }} struct {
{{- else }}
type {{ .Name }} struct {
{{- end }}
{{- range .Fields }}
	{{ camelCase .FieldName }} {{ .GoType }}{{ if or .JSONTag .YAMLTag }} `{{ if .JSONTag }}json:"{{ .JSONTag }}"{{ end }}{{ if and .JSONTag .YAMLTag }} {{ end }}{{ if .YAMLTag }}yaml:"{{ .YAMLTag }}"{{ end }}`{{ end }}{{ if .Description }} // {{ .Description }}{{ end }}
{{- end }}
}

{{- end }}
{{- else }}
{{- /* Generate enum types for fields with enum values */ -}}
{{- range .Fields }}
{{- if .Enum }}
{{- $fieldName := .FieldName }}
{{- $fieldType := print $.Name .FieldName }}

// {{ $fieldType }} represents the enumeration of valid values for {{ .FieldName }}
type {{ $fieldType }} string

// Valid {{ .FieldName }} values
const (
{{- range .Enum }}
	{{ $.Name }}{{ $fieldName }}{{ . | ToConstantCase }} {{ $fieldType }} = "{{ . }}"
{{- end }}
)

// String returns the string representation
func (e {{ $fieldType }}) String() string {
	return string(e)
}

// IsValid checks if the value is valid
func (e {{ $fieldType }}) IsValid() bool {
	switch e {
{{- range .Enum }}
	case {{ $.Name }}{{ $fieldName }}{{ . | ToConstantCase }}:
		return true
{{- end }}
	default:
		return false
	}
}

// Parse{{ $.Name }}{{ $fieldName }} parses a string into the enum type
func Parse{{ $.Name }}{{ $fieldName }}(s string) ({{ $fieldType }}, error) {
	v := {{ $fieldType }}(s)
	if !v.IsValid() {
		return "", fmt.Errorf("invalid {{ $fieldName }}: %s", s)
	}
	return v, nil
}
{{- end }}
{{- end }}

// {{ .Name }} represents {{ if .Description }}{{ .Description }}{{ else }}a {{ .Name }}{{ end }}
{{- if and .IsEntity .MakeUnexported }}
// The struct is unexported to enforce creation through constructor functions.
type {{ lower .Name }} struct {
{{- else }}
type {{ .Name }} struct {
{{- end }}
{{- range .Fields }}
{{- if and $.IsEntity $.MakeUnexported }}
	{{ camelCase .FieldName }} {{ if .Enum }}{{ $.Name }}{{ .FieldName }}{{ else }}{{ .GoType }}{{ end }}{{ if or .JSONTag .YAMLTag }} `{{ if .JSONTag }}json:"{{ .JSONTag }}"{{ end }}{{ if and .JSONTag .YAMLTag }} {{ end }}{{ if .YAMLTag }}yaml:"{{ .YAMLTag }}"{{ end }}`{{ end }}{{ if .Description }} // {{ .Description }}{{ end }}
{{- else }}
	{{ .FieldName }} {{ if .Enum }}{{ $.Name }}{{ .FieldName }}{{ else }}{{ .GoType }}{{ end }}{{ if or .JSONTag .YAMLTag }} `{{ if .JSONTag }}json:"{{ .JSONTag }}"{{ end }}{{ if and .JSONTag .YAMLTag }} {{ end }}{{ if .YAMLTag }}yaml:"{{ .YAMLTag }}"{{ end }}`{{ end }}{{ if .Description }} // {{ .Description }}{{ end }}
{{- end }}
{{- end }}
{{- if and .IsEntity .HasDomainEvents }}
	events []events.DomainEvent `json:"-" yaml:"-"`
{{- end }}
}

{{- /* Constructor for Entities */ -}}
{{- if .IsEntity }}

// New{{ .Name }} creates a new {{ .Name }} entity with validation.
// All required fields must be provided and valid.
func New{{ .Name }}(
{{- range .RequiredFields }}
{{- if not (or (strContains .FieldName "CreatedAt") (strContains .FieldName "UpdatedAt") (eq .FieldName "ID")) }}
	{{ camelCase .FieldName }} {{ if .Enum }}{{ $.Name }}{{ .FieldName }}{{ else }}{{ .GoType }}{{ end }},
{{- end }}
{{- end }}
) (*{{ .Name }}, error) {
	// Validate required fields
{{- range .RequiredFields }}
{{- if .Enum }}
	if !{{ camelCase .FieldName }}.IsValid() {
		return nil, fmt.Errorf("invalid {{ .FieldName }}: %s", {{ camelCase .FieldName }})
	}
{{- else if and (eq .GoType "string") (not (or (strContains .FieldName "CreatedAt") (strContains .FieldName "UpdatedAt") (eq .FieldName "ID"))) }}
	if {{ camelCase .FieldName }} == "" {
		return nil, fmt.Errorf("{{ .FieldName }} cannot be empty")
	}
{{- else if eq .GoType "int" }}
	if {{ camelCase .FieldName }} < 0 {
		return nil, fmt.Errorf("{{ .FieldName }} cannot be negative")
	}
{{- else if eq .GoType "float64" }}
	if {{ camelCase .FieldName }} < 0 {
		return nil, fmt.Errorf("{{ .FieldName }} cannot be negative")
	}
{{- end }}
{{- end }}

	now := time.Now().UTC()
	{{ .NameLower }} := &{{ .Name }}{
{{- range .Fields }}
{{- if eq .FieldName "ID" }}
		{{ if $.MakeUnexported }}{{ camelCase .FieldName }}{{ else }}{{ .FieldName }}{{ end }}: uuid.New(),
{{- else if strContains .FieldName "CreatedAt" }}
		{{ if $.MakeUnexported }}{{ camelCase .FieldName }}{{ else }}{{ .FieldName }}{{ end }}: now,
{{- else if strContains .FieldName "UpdatedAt" }}
		{{ if $.MakeUnexported }}{{ camelCase .FieldName }}{{ else }}{{ .FieldName }}{{ end }}: now,
{{- else if .Required }}
		{{ if $.MakeUnexported }}{{ camelCase .FieldName }}{{ else }}{{ .FieldName }}{{ end }}: {{ camelCase .FieldName }},
{{- end }}
{{- end }}
{{- if .HasDomainEvents }}
		events: []events.DomainEvent{},
{{- end }}
	}

{{- if .HasDomainEvents }}
	{{ .NameLower }}.addEvent(events.New{{ .Name }}CreatedEvent({{ .NameLower }}.{{ if $.MakeUnexported }}id{{ else }}ID{{ end }}))
{{- end }}

	return {{ .NameLower }}, nil
}

{{- /* Getters for Entities */ -}}
{{- range .Fields }}

// Get{{ .FieldName }} returns the {{ .FieldName }}
func (e *{{ $.Name }}) Get{{ .FieldName }}() {{ if .Enum }}string{{ else }}{{ .GoType }}{{ end }} {
{{- if .Enum }}
	return string(e.{{ .FieldName }})
{{- else }}
	return e.{{ .FieldName }}
{{- end }}
}
{{- end }}

{{- /* Domain Events methods */ -}}
{{- if .HasDomainEvents }}

// Events returns the domain events
func (e *{{ .Name }}) Events() []events.DomainEvent {
	return e.events
}

// ClearEvents clears the domain events
func (e *{{ .Name }}) ClearEvents() {
	e.events = []events.DomainEvent{}
}

// addEvent adds a domain event
func (e *{{ .Name }}) addEvent(event events.DomainEvent) {
	e.events = append(e.events, event)
}
{{- end }}

// Reconstruct{{ .Name }} reconstructs a {{ .Name }} from persistence
func Reconstruct{{ .Name }}(
{{- range .Fields }}
	{{ camelCase .FieldName }} {{ if .Enum }}string{{ else }}{{ .GoType }}{{ end }},
{{- end }}
) *{{ .Name }} {
	return &{{ .Name }}{
{{- range .Fields }}
{{- if .Enum }}
		{{ if $.MakeUnexported }}{{ camelCase .FieldName }}{{ else }}{{ .FieldName }}{{ end }}: {{ $.Name }}{{ .FieldName }}({{ camelCase .FieldName }}),
{{- else }}
		{{ if $.MakeUnexported }}{{ camelCase .FieldName }}{{ else }}{{ .FieldName }}{{ end }}: {{ camelCase .FieldName }},
{{- end }}
{{- end }}
{{- if .HasDomainEvents }}
		events: []events.DomainEvent{},
{{- end }}
	}
}

{{- /* Constructor for Value Objects */ -}}
{{- else if .IsValueObject }}

// New{{ .Name }} creates a new immutable {{ .Name }} value object.
// Value objects are immutable and validated upon creation.
func New{{ .Name }}({{ range $i, $f := .Fields }}{{ if $i }}, {{ end }}{{ camelCase .FieldName }} {{ if .Enum }}string{{ else }}{{ .GoType }}{{ end }}{{ end }}) ({{ .Name }}, error) {
	// Validate all fields
{{- range .Fields }}
{{- if .Enum }}
	{{ camelCase .FieldName }}Enum := {{ $.Name }}{{ .FieldName }}({{ camelCase .FieldName }})
	if !{{ camelCase .FieldName }}Enum.IsValid() {
		return {{ $.Name }}{}, fmt.Errorf("invalid {{ .FieldName }}: %s", {{ camelCase .FieldName }})
	}
{{- else if and .Required (eq .GoType "string") }}
	if {{ camelCase .FieldName }} == "" {
		return {{ $.Name }}{}, fmt.Errorf("{{ .FieldName }} cannot be empty")
	}
{{- else if and .Required (eq .GoType "int") }}
	if {{ camelCase .FieldName }} < 0 {
		return {{ $.Name }}{}, fmt.Errorf("{{ .FieldName }} cannot be negative")
	}
{{- else if and .Required (eq .GoType "float64") }}
	if {{ camelCase .FieldName }} < 0 {
		return {{ $.Name }}{}, fmt.Errorf("{{ .FieldName }} cannot be negative")
	}
{{- else if eq .GoType "uuid.UUID" }}
	if {{ camelCase .FieldName }} == uuid.Nil {
		return {{ $.Name }}{}, fmt.Errorf("{{ .FieldName }} cannot be nil UUID")
	}
{{- end }}
{{- end }}

	return {{ .Name }}{
{{- range .Fields }}
{{- if .Enum }}
		{{ .FieldName }}: {{ camelCase .FieldName }}Enum,
{{- else }}
		{{ .FieldName }}: {{ camelCase .FieldName }},
{{- end }}
{{- end }}
	}, nil
}

// Must{{ .Name }} creates a new {{ .Name }} value object and panics on validation error.
// Use this only when you are certain the values are valid (e.g., in tests or with hardcoded values).
func Must{{ .Name }}({{ range $i, $f := .Fields }}{{ if $i }}, {{ end }}{{ camelCase .FieldName }} {{ if .Enum }}string{{ else }}{{ .GoType }}{{ end }}{{ end }}) {{ .Name }} {
	v, err := New{{ .Name }}({{ range $i, $f := .Fields }}{{ if $i }}, {{ end }}{{ camelCase .FieldName }}{{ end }})
	if err != nil {
		panic(fmt.Sprintf("failed to create {{ .Name }}: %v", err))
	}
	return v
}

// Zero{{ .Name }} returns the zero value for {{ .Name }}.
// This is useful for comparisons and as a default value.
func Zero{{ .Name }}() {{ .Name }} {
	return {{ .Name }}{}
}

{{- /* Getters for Value Objects - return by value for immutability */ -}}
{{- range .Fields }}

// Get{{ .FieldName }} returns the {{ .FieldName }} value.
// Value objects are immutable, so this returns a copy of the value.
func (v {{ $.Name }}) Get{{ .FieldName }}() {{ if .Enum }}string{{ else }}{{ .GoType }}{{ end }} {
{{- if .Enum }}
	return string(v.{{ .FieldName }})
{{- else if or (hasPrefix .GoType "[]") (hasPrefix .GoType "map") }}
	// Return a copy for slices and maps to maintain immutability
	{{- if hasPrefix .GoType "[]" }}
	result := make({{ .GoType }}, len(v.{{ .FieldName }}))
	copy(result, v.{{ .FieldName }})
	return result
	{{- else }}
	result := make({{ .GoType }})
	for k, val := range v.{{ .FieldName }} {
		result[k] = val
	}
	return result
	{{- end }}
{{- else }}
	return v.{{ .FieldName }}
{{- end }}
}
{{- end }}

// IsZero returns true if this is the zero value.
func (v {{ .Name }}) IsZero() bool {
	zero := Zero{{ .Name }}()
	// Compare using string representation as a simple equality check
	return v.String() == zero.String()
}

{{- /* Skip Validate method if there's a field named Validate */ -}}
{{- $hasValidateField := false }}
{{- range .Fields }}
{{- if eq .FieldName "Validate" }}
{{- $hasValidateField = true }}
{{- end }}
{{- end }}

{{- if not $hasValidateField }}
// Validate checks if the value object is valid.
// This is automatically called during construction but can be used for explicit validation.
func (v {{ .Name }}) Validate() error {
{{- range .Fields }}
{{- if and .Required (eq .GoType "string") }}
	if v.{{ .FieldName }} == "" {
		return fmt.Errorf("{{ .FieldName }} cannot be empty")
	}
{{- else if eq .GoType "uuid.UUID" }}
	if v.{{ .FieldName }} == uuid.Nil {
		return fmt.Errorf("{{ .FieldName }} cannot be nil UUID")
	}
{{- end }}
{{- end }}
	return nil
}
{{- end }}

// String returns a string representation of {{ .Name }}
func (v {{ .Name }}) String() string {
	var fields []string
{{- range .Fields }}
{{- if and (not .Enum) (isPointer .GoType) }}
	if v.{{ .FieldName }} != nil {
		fields = append(fields, fmt.Sprintf("{{ .FieldName }}: %v", *v.{{ .FieldName }}))
	} else {
		fields = append(fields, "{{ .FieldName }}: <nil>")
	}
{{- else }}
	fields = append(fields, fmt.Sprintf("{{ .FieldName }}: %v", v.{{ .FieldName }}))
{{- end }}
{{- end }}
	return fmt.Sprintf("{{ .Name }}{%s}", strings.Join(fields, ", "))
}

{{- end }}
{{- end }}
{{- /* End of struct types */ -}}
{{- end }}