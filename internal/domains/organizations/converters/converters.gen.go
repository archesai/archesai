// Code generated by generate-converters. DO NOT EDIT.
package converters

import (
	"encoding/json"
	"time"

	"github.com/archesai/archesai/internal/generated/api"
	"github.com/archesai/archesai/internal/generated/database/postgresql"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Helper functions
func handleNullableString(s *string) string {
	if s == nil {
		return ""
	}
	return *s
}

func handleNullableTime(t *time.Time) string {
	if t == nil {
		return ""
	}
	return t.Format(time.RFC3339)
}

func handleNullableTimestamp(ts pgtype.Timestamptz) time.Time {
	if !ts.Valid {
		return time.Time{}
	}
	return ts.Time
}

func handleNullableJSON(j *string) *json.RawMessage {
	if j == nil {
		return nil
	}
	raw := json.RawMessage(*j)
	return &raw
}

// OrganizationDBToAPI converts postgresql.Organization to api.OrganizationEntity
func OrganizationDBToAPI(from *postgresql.Organization) api.OrganizationEntity {
	return api.OrganizationEntity{
		BillingEmail:     openapi_types.Email(handleNullableString(from.BillingEmail)),
		CreatedAt:        from.CreatedAt,
		Credits:          float64(from.Credits),
		Id:               openapi_types.UUID(uuid.MustParse(from.Id)),
		Logo:             handleNullableString(from.Logo),
		Metadata:         handleNullableJSON(from.Metadata),
		Name:             from.Name,
		Plan:             api.OrganizationEntityPlan(from.Plan),
		StripeCustomerId: handleNullableString(from.StripeCustomerId),
		UpdatedAt:        from.UpdatedAt,
	}
}

// MemberDBToAPI converts postgresql.Member to api.MemberEntity
func MemberDBToAPI(from *postgresql.Member) api.MemberEntity {
	return api.MemberEntity{
		CreatedAt:      from.CreatedAt,
		Id:             openapi_types.UUID(uuid.MustParse(from.Id)),
		OrganizationId: from.OrganizationId,
		Role:           api.MemberEntityRole(from.Role),
		UpdatedAt:      from.UpdatedAt,
		UserId:         from.UserId,
	}
}

// InvitationDBToAPI converts postgresql.Invitation to api.InvitationEntity
func InvitationDBToAPI(from *postgresql.Invitation) api.InvitationEntity {
	return api.InvitationEntity{
		CreatedAt:      from.CreatedAt,
		Email:          from.Email,
		ExpiresAt:      from.ExpiresAt.Format(time.RFC3339),
		Id:             openapi_types.UUID(uuid.MustParse(from.Id)),
		InviterId:      from.InviterId,
		OrganizationId: from.OrganizationId,
		Role:           api.InvitationEntityRole(from.Role),
		Status:         from.Status,
		UpdatedAt:      from.UpdatedAt,
	}
}
