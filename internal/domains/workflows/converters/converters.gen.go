// Code generated by generate-converters. DO NOT EDIT.
package converters

import (
	"encoding/json"
	"time"

	"github.com/archesai/archesai/internal/generated/api"
	"github.com/archesai/archesai/internal/generated/database/postgresql"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Helper functions
func handleNullableString(s *string) string {
	if s == nil {
		return ""
	}
	return *s
}

func handleNullableTime(t *time.Time) string {
	if t == nil {
		return ""
	}
	return t.Format(time.RFC3339)
}

func handleNullableTimestamp(ts pgtype.Timestamptz) time.Time {
	if !ts.Valid {
		return time.Time{}
	}
	return ts.Time
}

func handleNullableJSON(j *string) *json.RawMessage {
	if j == nil {
		return nil
	}
	raw := json.RawMessage(*j)
	return &raw
}

// PipelineDBToAPI converts postgresql.Pipeline to api.PipelineEntity
func PipelineDBToAPI(from *postgresql.Pipeline) api.PipelineEntity {
	return api.PipelineEntity{
		CreatedAt:      from.CreatedAt,
		Description:    handleNullableString(from.Description),
		Id:             openapi_types.UUID(uuid.MustParse(from.Id)),
		Name:           handleNullableString(from.Name),
		OrganizationId: openapi_types.UUID(uuid.MustParse(from.OrganizationId)),
		UpdatedAt:      from.UpdatedAt,
	}
}

// RunDBToAPI converts postgresql.Run to api.RunEntity
func RunDBToAPI(from *postgresql.Run) api.RunEntity {
	return api.RunEntity{
		CompletedAt:    handleNullableTimestamp(from.CompletedAt),
		CreatedAt:      from.CreatedAt,
		Error:          handleNullableString(from.Error),
		Id:             openapi_types.UUID(uuid.MustParse(from.Id)),
		OrganizationId: from.OrganizationId,
		PipelineId:     handleNullableString(from.PipelineId),
		Progress:       float32(from.Progress),
		StartedAt:      handleNullableTimestamp(from.StartedAt),
		Status:         api.RunEntityStatus(from.Status),
		ToolId:         from.ToolId,
		UpdatedAt:      from.UpdatedAt,
	}
}

// ToolDBToAPI converts postgresql.Tool to api.ToolEntity
func ToolDBToAPI(from *postgresql.Tool) api.ToolEntity {
	return api.ToolEntity{
		CreatedAt:      from.CreatedAt,
		Description:    from.Description,
		Id:             openapi_types.UUID(uuid.MustParse(from.Id)),
		InputMimeType:  from.InputMimeType,
		Name:           from.Name,
		OrganizationId: from.OrganizationId,
		OutputMimeType: from.OutputMimeType,
		UpdatedAt:      from.UpdatedAt,
	}
}
