// Code generated by generate-converters. DO NOT EDIT.
package converters

import (
	"encoding/json"
	"time"

	"github.com/archesai/archesai/internal/generated/api"
	"github.com/archesai/archesai/internal/generated/database/postgresql"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Helper functions
func handleNullableString(s *string) string {
	if s == nil {
		return ""
	}
	return *s
}

func handleNullableTime(t *time.Time) string {
	if t == nil {
		return ""
	}
	return t.Format(time.RFC3339)
}

func handleNullableTimestamp(ts pgtype.Timestamptz) time.Time {
	if !ts.Valid {
		return time.Time{}
	}
	return ts.Time
}

func handleNullableJSON(j *string) *json.RawMessage {
	if j == nil {
		return nil
	}
	raw := json.RawMessage(*j)
	return &raw
}

// AuthUserDBToAPI converts postgresql.User to api.UserEntity
func AuthUserDBToAPI(from *postgresql.User) api.UserEntity {
	return api.UserEntity{
		CreatedAt:     from.CreatedAt,
		Email:         openapi_types.Email(from.Email),
		EmailVerified: from.EmailVerified,
		Id:            openapi_types.UUID(uuid.MustParse(from.Id)),
		Image:         handleNullableString(from.Image),
		Name:          from.Name,
		UpdatedAt:     from.UpdatedAt,
	}
}

// AuthSessionDBToAPI converts postgresql.Session to api.SessionEntity
func AuthSessionDBToAPI(from *postgresql.Session) api.SessionEntity {
	return api.SessionEntity{
		ActiveOrganizationId: handleNullableString(from.ActiveOrganizationId),
		CreatedAt:            from.CreatedAt,
		ExpiresAt:            from.ExpiresAt.Format(time.RFC3339),
		Id:                   openapi_types.UUID(uuid.MustParse(from.Id)),
		IpAddress:            handleNullableString(from.IpAddress),
		Token:                from.Token,
		UpdatedAt:            from.UpdatedAt,
		UserAgent:            handleNullableString(from.UserAgent),
		UserId:               from.UserId,
	}
}

// AuthAccountDBToAPI converts postgresql.Account to api.AccountEntity
func AuthAccountDBToAPI(from *postgresql.Account) api.AccountEntity {
	return api.AccountEntity{
		AccessToken:           handleNullableString(from.AccessToken),
		AccessTokenExpiresAt:  handleNullableTimestamp(from.AccessTokenExpiresAt),
		AccountId:             from.AccountId,
		CreatedAt:             from.CreatedAt,
		Id:                    openapi_types.UUID(uuid.MustParse(from.Id)),
		IdToken:               handleNullableString(from.IdToken),
		Password:              handleNullableString(from.Password),
		ProviderId:            api.AccountEntityProviderId(from.ProviderId),
		RefreshToken:          handleNullableString(from.RefreshToken),
		RefreshTokenExpiresAt: handleNullableTimestamp(from.RefreshTokenExpiresAt),
		Scope:                 handleNullableString(from.Scope),
		UpdatedAt:             from.UpdatedAt,
		UserId:                openapi_types.UUID(uuid.MustParse(from.UserId)),
	}
}
