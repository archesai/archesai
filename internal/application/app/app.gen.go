// Code generated by archesai codegen. DO NOT EDIT.
package app

import (
	"context"
	"fmt"
	"log/slog"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"golang.org/x/sync/errgroup"

	"github.com/archesai/archesai/internal/adapters/http/controllers"
	"github.com/archesai/archesai/internal/adapters/http/server"
	apikeyCommands "github.com/archesai/archesai/internal/application/commands/apikeys"
	artifactCommands "github.com/archesai/archesai/internal/application/commands/artifacts"
	authCommands "github.com/archesai/archesai/internal/application/commands/auth"
	invitationCommands "github.com/archesai/archesai/internal/application/commands/invitations"
	labelCommands "github.com/archesai/archesai/internal/application/commands/labels"
	memberCommands "github.com/archesai/archesai/internal/application/commands/members"
	organizationCommands "github.com/archesai/archesai/internal/application/commands/organizations"
	pipelineCommands "github.com/archesai/archesai/internal/application/commands/pipelines"
	runCommands "github.com/archesai/archesai/internal/application/commands/runs"
	toolCommands "github.com/archesai/archesai/internal/application/commands/tools"
	userCommands "github.com/archesai/archesai/internal/application/commands/users"
	apikeyQueries "github.com/archesai/archesai/internal/application/queries/apikeys"
	artifactQueries "github.com/archesai/archesai/internal/application/queries/artifacts"
	authQueries "github.com/archesai/archesai/internal/application/queries/auth"
	configQueries "github.com/archesai/archesai/internal/application/queries/config"
	healthQueries "github.com/archesai/archesai/internal/application/queries/health"
	invitationQueries "github.com/archesai/archesai/internal/application/queries/invitations"
	labelQueries "github.com/archesai/archesai/internal/application/queries/labels"
	memberQueries "github.com/archesai/archesai/internal/application/queries/members"
	organizationQueries "github.com/archesai/archesai/internal/application/queries/organizations"
	pipelineQueries "github.com/archesai/archesai/internal/application/queries/pipelines"
	runQueries "github.com/archesai/archesai/internal/application/queries/runs"
	toolQueries "github.com/archesai/archesai/internal/application/queries/tools"
	userQueries "github.com/archesai/archesai/internal/application/queries/users"
	"github.com/archesai/archesai/internal/infrastructure/auth"
	"github.com/archesai/archesai/internal/infrastructure/cache"
	"github.com/archesai/archesai/internal/infrastructure/config"
	"github.com/archesai/archesai/internal/infrastructure/notifications"
	database "github.com/archesai/archesai/internal/infrastructure/persistence"
)

// App holds all application dependencies.
type App struct {
	// Core infrastructure
	infra *Infrastructure

	// Public infrastructure access
	Logger *slog.Logger
	Config *config.Config
	Server *server.Server

	// HTTP Controllers
	AuthController          *controllers.AuthController
	APIKeysController       *controllers.APIKeysController
	ArtifactsController     *controllers.ArtifactsController
	ConfigController        *controllers.ConfigController
	HealthController        *controllers.HealthController
	InvitationsController   *controllers.InvitationsController
	LabelsController        *controllers.LabelsController
	MembersController       *controllers.MembersController
	OrganizationsController *controllers.OrganizationsController
	PipelinesController     *controllers.PipelinesController
	RunsController          *controllers.RunsController
	ToolsController         *controllers.ToolsController
	UsersController         *controllers.UsersController
}

// NewApp creates and initializes all application dependencies.
func NewApp(cfg *config.Config) (*App, error) {
	// Initialize infrastructure
	infra, err := NewInfrastructure(cfg)
	if err != nil {
		return nil, fmt.Errorf("failed to initialize infrastructure: %w", err)
	}

	log := infra.Logger

	// Run migrations if enabled
	if cfg.Database.RunMigrations {
		log.Info("running database migrations")
		if err := database.RunMigrations(infra.Database.SQLDB(), infra.Database.TypeString(), log); err != nil {
			log.Error("failed to run migrations", "error", err)
			isProduction := cfg.API.Environment == "production"
			if isProduction {
				return nil, fmt.Errorf("failed to run migrations: %w", err)
			}
		}
		log.Info("database migrations completed")
	}

	// Create repositories
	log.Info("creating repositories")
	repos, err := NewRepositories(infra)
	if err != nil {
		return nil, fmt.Errorf("failed to create repositories: %w", err)
	}

	// Initialize auth service after repositories are available
	log.Info("initializing auth service")
	var stringCache cache.Cache[string]
	if infra.redisClient != nil {
		stringCache = cache.NewRedisCache[string](infra.redisClient.GetRedisClient(), "auth:tokens")
	} else {
		stringCache = cache.NewMemoryCache[string]()
	}

	// Initialize notification deliverers
	magicLinkDeliverer := notifications.NewConsoleDeliverer(log)
	otpDeliverer := notifications.NewOTPDeliverer(log)

	infra.AuthService = auth.NewService(cfg, repos.Sessions, repos.Users, repos.Accounts, stringCache, magicLinkDeliverer, otpDeliverer, log)
	log.Info("auth service ready")

	// Create app instance to populate
	app := &App{
		// Infrastructure
		infra:  infra,
		Logger: log,
		Config: cfg,
	}

	// Initialize all domain handlers in parallel where possible
	g, _ := errgroup.WithContext(context.Background())

	// Initialize config domain (infrastructure query - needs special handling)
	log.Info("initializing config domain")
	getConfigHandler := configQueries.NewGetConfigQueryHandler(cfg)
	app.ConfigController = controllers.NewConfigController(getConfigHandler)
	log.Info("config domain ready")

	// Initialize health domain (infrastructure query - needs special handling)
	log.Info("initializing health domain")
	getHealthHandler := healthQueries.NewGetHealthQueryHandler()
	app.HealthController = controllers.NewHealthController(getHealthHandler)
	log.Info("health domain ready")

	// Initialize auth domain (cross-cutting concern spanning multiple entities)
	g.Go(func() error {
		log.Info("initializing auth domain")

		// Create command handlers - all use auth.Service
		confirmEmailChangeHandler := authCommands.NewConfirmEmailChangeCommandHandler(infra.AuthService)
		confirmEmailVerificationHandler := authCommands.NewConfirmEmailVerificationCommandHandler(infra.AuthService)
		confirmPasswordResetHandler := authCommands.NewConfirmPasswordResetCommandHandler(infra.AuthService)
		deleteAccountHandler := authCommands.NewDeleteAccountCommandHandler(infra.AuthService)
		deleteSessionHandler := authCommands.NewDeleteSessionCommandHandler(repos.Sessions)
		linkAccountHandler := authCommands.NewLinkAccountCommandHandler(infra.AuthService)
		loginHandler := authCommands.NewLoginCommandHandler(infra.AuthService)
		logoutHandler := authCommands.NewLogoutCommandHandler(infra.AuthService)
		logoutAllHandler := authCommands.NewLogoutAllCommandHandler(infra.AuthService)
		registerHandler := authCommands.NewRegisterCommandHandler(infra.AuthService, repos.Users, repos.Accounts)
		requestEmailChangeHandler := authCommands.NewRequestEmailChangeCommandHandler(infra.AuthService)
		requestEmailVerificationHandler := authCommands.NewRequestEmailVerificationCommandHandler(infra.AuthService)
		requestMagicLinkHandler := authCommands.NewRequestMagicLinkCommandHandler(infra.AuthService)
		requestPasswordResetHandler := authCommands.NewRequestPasswordResetCommandHandler(infra.AuthService)
		updateAccountHandler := authCommands.NewUpdateAccountCommandHandler(infra.AuthService)
		updateSessionHandler := authCommands.NewUpdateSessionCommandHandler(repos.Sessions)
		verifyMagicLinkHandler := authCommands.NewVerifyMagicLinkCommandHandler(infra.AuthService)

		// Create query handlers
		getAccountHandler := authQueries.NewGetAccountQueryHandler(repos.Accounts)
		getSessionHandler := authQueries.NewGetSessionQueryHandler(repos.Sessions)
		listAccountsHandler := authQueries.NewListAccountsQueryHandler(repos.Accounts)
		listSessionsHandler := authQueries.NewListSessionsQueryHandler(repos.Sessions)
		oauthAuthorizeHandler := authQueries.NewOAuthAuthorizeQueryHandler(infra.AuthService)
		oauthCallbackHandler := authQueries.NewOAuthCallbackQueryHandler(infra.AuthService, infra.EventPublisher)

		// Create controller with handlers
		app.AuthController = controllers.NewAuthController(
			confirmEmailChangeHandler,
			confirmEmailVerificationHandler,
			confirmPasswordResetHandler,
			deleteAccountHandler,
			deleteSessionHandler,
			linkAccountHandler,
			loginHandler,
			logoutHandler,
			logoutAllHandler,
			registerHandler,
			requestEmailChangeHandler,
			requestEmailVerificationHandler,
			requestMagicLinkHandler,
			requestPasswordResetHandler,
			updateAccountHandler,
			updateSessionHandler,
			verifyMagicLinkHandler,
			getAccountHandler,
			getSessionHandler,
			listAccountsHandler,
			listSessionsHandler,
			oauthAuthorizeHandler,
			oauthCallbackHandler,
		)

		log.Info("auth domain ready")
		return nil
	})

	// Initialize apikeys domain
	g.Go(func() error {
		log.Info("initializing apikeys domain")
		// Create command and query handlers
		createAPIKeyHandler := apikeyCommands.NewCreateAPIKeyCommandHandler(
			repos.APIKeys,
			infra.EventPublisher,
		)
		deleteAPIKeyHandler := apikeyCommands.NewDeleteAPIKeyCommandHandler(
			repos.APIKeys,
			infra.EventPublisher,
		)
		updateAPIKeyHandler := apikeyCommands.NewUpdateAPIKeyCommandHandler(
			repos.APIKeys,
			infra.EventPublisher,
		)
		getAPIKeyHandler := apikeyQueries.NewGetAPIKeyQueryHandler(
			repos.APIKeys,
		)
		listAPIKeysHandler := apikeyQueries.NewListAPIKeysQueryHandler(
			repos.APIKeys,
		)

		// Create controller with handlers
		app.APIKeysController = controllers.NewAPIKeysController(
			createAPIKeyHandler,
			deleteAPIKeyHandler,
			updateAPIKeyHandler,
			getAPIKeyHandler,
			listAPIKeysHandler,
		)

		log.Info("apikeys domain ready")
		return nil
	})

	// Initialize artifacts domain
	g.Go(func() error {
		log.Info("initializing artifacts domain")
		// Create command and query handlers
		createArtifactHandler := artifactCommands.NewCreateArtifactCommandHandler(
			repos.Artifacts,
			infra.EventPublisher,
		)
		deleteArtifactHandler := artifactCommands.NewDeleteArtifactCommandHandler(
			repos.Artifacts,
			infra.EventPublisher,
		)
		updateArtifactHandler := artifactCommands.NewUpdateArtifactCommandHandler(
			repos.Artifacts,
			infra.EventPublisher,
		)
		getArtifactHandler := artifactQueries.NewGetArtifactQueryHandler(
			repos.Artifacts,
		)
		listArtifactsHandler := artifactQueries.NewListArtifactsQueryHandler(
			repos.Artifacts,
		)

		// Create controller with handlers
		app.ArtifactsController = controllers.NewArtifactsController(
			createArtifactHandler,
			deleteArtifactHandler,
			updateArtifactHandler,
			getArtifactHandler,
			listArtifactsHandler,
		)

		log.Info("artifacts domain ready")
		return nil
	})

	// Initialize invitations domain
	g.Go(func() error {
		log.Info("initializing invitations domain")
		// Create command and query handlers
		createInvitationHandler := invitationCommands.NewCreateInvitationCommandHandler(
			repos.Invitations,
			infra.EventPublisher,
		)
		deleteInvitationHandler := invitationCommands.NewDeleteInvitationCommandHandler(
			repos.Invitations,
			infra.EventPublisher,
		)
		updateInvitationHandler := invitationCommands.NewUpdateInvitationCommandHandler(
			repos.Invitations,
			infra.EventPublisher,
		)
		getInvitationHandler := invitationQueries.NewGetInvitationQueryHandler(
			repos.Invitations,
		)
		listInvitationsHandler := invitationQueries.NewListInvitationsQueryHandler(
			repos.Invitations,
		)

		// Create controller with handlers
		app.InvitationsController = controllers.NewInvitationsController(
			createInvitationHandler,
			deleteInvitationHandler,
			updateInvitationHandler,
			getInvitationHandler,
			listInvitationsHandler,
		)

		log.Info("invitations domain ready")
		return nil
	})

	// Initialize labels domain
	g.Go(func() error {
		log.Info("initializing labels domain")
		// Create command and query handlers
		createLabelHandler := labelCommands.NewCreateLabelCommandHandler(
			repos.Labels,
			infra.EventPublisher,
		)
		deleteLabelHandler := labelCommands.NewDeleteLabelCommandHandler(
			repos.Labels,
			infra.EventPublisher,
		)
		updateLabelHandler := labelCommands.NewUpdateLabelCommandHandler(
			repos.Labels,
			infra.EventPublisher,
		)
		getLabelHandler := labelQueries.NewGetLabelQueryHandler(
			repos.Labels,
		)
		listLabelsHandler := labelQueries.NewListLabelsQueryHandler(
			repos.Labels,
		)

		// Create controller with handlers
		app.LabelsController = controllers.NewLabelsController(
			createLabelHandler,
			deleteLabelHandler,
			updateLabelHandler,
			getLabelHandler,
			listLabelsHandler,
		)

		log.Info("labels domain ready")
		return nil
	})

	// Initialize members domain
	g.Go(func() error {
		log.Info("initializing members domain")
		// Create command and query handlers
		createMemberHandler := memberCommands.NewCreateMemberCommandHandler(
			repos.Members,
			infra.EventPublisher,
		)
		deleteMemberHandler := memberCommands.NewDeleteMemberCommandHandler(
			repos.Members,
			infra.EventPublisher,
		)
		updateMemberHandler := memberCommands.NewUpdateMemberCommandHandler(
			repos.Members,
			infra.EventPublisher,
		)
		getMemberHandler := memberQueries.NewGetMemberQueryHandler(
			repos.Members,
		)
		listMembersHandler := memberQueries.NewListMembersQueryHandler(
			repos.Members,
		)

		// Create controller with handlers
		app.MembersController = controllers.NewMembersController(
			createMemberHandler,
			deleteMemberHandler,
			updateMemberHandler,
			getMemberHandler,
			listMembersHandler,
		)

		log.Info("members domain ready")
		return nil
	})

	// Initialize organizations domain
	g.Go(func() error {
		log.Info("initializing organizations domain")
		// Create command and query handlers
		createOrganizationHandler := organizationCommands.NewCreateOrganizationCommandHandler(
			repos.Organizations,
			infra.EventPublisher,
		)
		deleteOrganizationHandler := organizationCommands.NewDeleteOrganizationCommandHandler(
			repos.Organizations,
			infra.EventPublisher,
		)
		updateOrganizationHandler := organizationCommands.NewUpdateOrganizationCommandHandler(
			repos.Organizations,
			infra.EventPublisher,
		)
		getOrganizationHandler := organizationQueries.NewGetOrganizationQueryHandler(
			repos.Organizations,
		)
		listOrganizationsHandler := organizationQueries.NewListOrganizationsQueryHandler(
			repos.Organizations,
		)

		// Create controller with handlers
		app.OrganizationsController = controllers.NewOrganizationsController(
			createOrganizationHandler,
			deleteOrganizationHandler,
			updateOrganizationHandler,
			getOrganizationHandler,
			listOrganizationsHandler,
		)

		log.Info("organizations domain ready")
		return nil
	})

	// Initialize pipelines domain
	g.Go(func() error {
		log.Info("initializing pipelines domain")
		// Create command and query handlers
		createPipelineHandler := pipelineCommands.NewCreatePipelineCommandHandler(
			repos.Pipelines,
			infra.EventPublisher,
		)
		createPipelineStepHandler := pipelineCommands.NewCreatePipelineStepCommandHandler(
			repos.Pipelines,
			infra.EventPublisher,
		)
		deletePipelineHandler := pipelineCommands.NewDeletePipelineCommandHandler(
			repos.Pipelines,
			infra.EventPublisher,
		)
		updatePipelineHandler := pipelineCommands.NewUpdatePipelineCommandHandler(
			repos.Pipelines,
			infra.EventPublisher,
		)
		validatePipelineExecutionPlanHandler := pipelineCommands.NewValidatePipelineExecutionPlanCommandHandler(
			repos.Pipelines,
			infra.EventPublisher,
		)
		getPipelineHandler := pipelineQueries.NewGetPipelineQueryHandler(
			repos.Pipelines,
		)
		getPipelineExecutionPlanHandler := pipelineQueries.NewGetPipelineExecutionPlanQueryHandler(
			repos.Pipelines,
		)
		getPipelineStepsHandler := pipelineQueries.NewGetPipelineStepsQueryHandler(
			repos.Pipelines,
		)
		listPipelinesHandler := pipelineQueries.NewListPipelinesQueryHandler(
			repos.Pipelines,
		)

		// Create controller with handlers
		app.PipelinesController = controllers.NewPipelinesController(
			createPipelineHandler,
			createPipelineStepHandler,
			deletePipelineHandler,
			updatePipelineHandler,
			validatePipelineExecutionPlanHandler,
			getPipelineHandler,
			getPipelineExecutionPlanHandler,
			getPipelineStepsHandler,
			listPipelinesHandler,
		)

		log.Info("pipelines domain ready")
		return nil
	})

	// Initialize runs domain
	g.Go(func() error {
		log.Info("initializing runs domain")
		// Create command and query handlers
		createRunHandler := runCommands.NewCreateRunCommandHandler(
			repos.Runs,
			infra.EventPublisher,
		)
		deleteRunHandler := runCommands.NewDeleteRunCommandHandler(
			repos.Runs,
			infra.EventPublisher,
		)
		updateRunHandler := runCommands.NewUpdateRunCommandHandler(
			repos.Runs,
			infra.EventPublisher,
		)
		getRunHandler := runQueries.NewGetRunQueryHandler(
			repos.Runs,
		)
		listRunsHandler := runQueries.NewListRunsQueryHandler(
			repos.Runs,
		)

		// Create controller with handlers
		app.RunsController = controllers.NewRunsController(
			createRunHandler,
			deleteRunHandler,
			updateRunHandler,
			getRunHandler,
			listRunsHandler,
		)

		log.Info("runs domain ready")
		return nil
	})

	// Initialize tools domain
	g.Go(func() error {
		log.Info("initializing tools domain")
		// Create command and query handlers
		createToolHandler := toolCommands.NewCreateToolCommandHandler(
			repos.Tools,
			infra.EventPublisher,
		)
		deleteToolHandler := toolCommands.NewDeleteToolCommandHandler(
			repos.Tools,
			infra.EventPublisher,
		)
		updateToolHandler := toolCommands.NewUpdateToolCommandHandler(
			repos.Tools,
			infra.EventPublisher,
		)
		getToolHandler := toolQueries.NewGetToolQueryHandler(
			repos.Tools,
		)
		listToolsHandler := toolQueries.NewListToolsQueryHandler(
			repos.Tools,
		)

		// Create controller with handlers
		app.ToolsController = controllers.NewToolsController(
			createToolHandler,
			deleteToolHandler,
			updateToolHandler,
			getToolHandler,
			listToolsHandler,
		)

		log.Info("tools domain ready")
		return nil
	})

	// Initialize users domain
	g.Go(func() error {
		log.Info("initializing users domain")
		// Create command and query handlers
		deleteCurrentUserHandler := userCommands.NewDeleteCurrentUserCommandHandler(
			repos.Users,
			infra.EventPublisher,
		)
		deleteUserHandler := userCommands.NewDeleteUserCommandHandler(
			repos.Users,
			infra.EventPublisher,
		)
		updateCurrentUserHandler := userCommands.NewUpdateCurrentUserCommandHandler(
			repos.Users,
			infra.EventPublisher,
		)
		updateUserHandler := userCommands.NewUpdateUserCommandHandler(
			repos.Users,
			infra.EventPublisher,
		)
		getCurrentUserHandler := userQueries.NewGetCurrentUserQueryHandler(
			repos.Users,
		)
		getUserHandler := userQueries.NewGetUserQueryHandler(
			repos.Users,
		)
		listUsersHandler := userQueries.NewListUsersQueryHandler(
			repos.Users,
		)

		// Create controller with handlers
		app.UsersController = controllers.NewUsersController(
			deleteCurrentUserHandler,
			deleteUserHandler,
			updateCurrentUserHandler,
			updateUserHandler,
			getCurrentUserHandler,
			getUserHandler,
			listUsersHandler,
		)

		log.Info("users domain ready")
		return nil
	})

	// Wait for all parallel initializations to complete
	if err := g.Wait(); err != nil {
		return nil, fmt.Errorf("failed to initialize domains: %w", err)
	}

	// Create the HTTP server
	log.Info("creating HTTP server")
	app.Server = server.NewServer(cfg.API, log)

	// Register all application routes
	app.registerRoutes()

	log.Info("application initialized successfully")
	return app, nil
}

// Close cleans up all resources.
func (a *App) Close() error {
	a.Logger.Info("shutting down application")
	if a.infra != nil {
		return a.infra.Close()
	}
	return nil
}

// registerRoutes registers all application routes with the server.
func (a *App) registerRoutes() {
	// Get the echo instance from the server
	e := a.Server.Echo()

	// Register readiness check that can access the database
	a.Server.SetReadinessCheck(a.readinessCheck)

	// Setup API documentation if enabled
	if a.Config.API.Docs {
		a.Logger.Info("enabling API documentation")
		if err := a.Server.SetupDocs(); err != nil {
			a.Logger.Error("failed to setup API docs", "error", err)
		}
	}

	// Register all application routes
	a.RegisterRoutes(e)
	a.Logger.Info("routes registered")
}

// readinessCheck checks if the service is ready to handle requests.
func (a *App) readinessCheck(ctx echo.Context) error {
	// Check database connection
	if err := a.infra.Database.SQLDB().PingContext(ctx.Request().Context()); err != nil {
		a.Logger.Error("database health check failed", "error", err)
		return ctx.JSON(http.StatusServiceUnavailable, map[string]interface{}{
			"status": "unhealthy",
			"error":  "database connection failed",
		})
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"status":    "ready",
		"timestamp": time.Now().Unix(),
	})
}

// RegisterRoutes registers all application routes with the Echo server.
func (a *App) RegisterRoutes(e *echo.Echo) {
	a.Logger.Info("registering API routes...")

	// API v1 group
	v1 := e.Group("/api/v1")

	// ========================================
	// API ROUTES
	// ========================================
	// Auth routes
	a.Logger.Info("registering auth routes")
	controllers.RegisterAuthRoutes(v1, a.AuthController)
	// APIKeys routes
	a.Logger.Info("registering apikeys routes")
	controllers.RegisterAPIKeysRoutes(v1, a.APIKeysController)
	// Artifacts routes
	a.Logger.Info("registering artifacts routes")
	controllers.RegisterArtifactsRoutes(v1, a.ArtifactsController)
	// Config routes
	a.Logger.Info("registering config routes")
	controllers.RegisterConfigRoutes(v1, a.ConfigController)
	// Health routes
	a.Logger.Info("registering health routes")
	controllers.RegisterHealthRoutes(v1, a.HealthController)
	// Invitations routes
	a.Logger.Info("registering invitations routes")
	controllers.RegisterInvitationsRoutes(v1, a.InvitationsController)
	// Labels routes
	a.Logger.Info("registering labels routes")
	controllers.RegisterLabelsRoutes(v1, a.LabelsController)
	// Members routes
	a.Logger.Info("registering members routes")
	controllers.RegisterMembersRoutes(v1, a.MembersController)
	// Organizations routes
	a.Logger.Info("registering organizations routes")
	controllers.RegisterOrganizationsRoutes(v1, a.OrganizationsController)
	// Pipelines routes
	a.Logger.Info("registering pipelines routes")
	controllers.RegisterPipelinesRoutes(v1, a.PipelinesController)
	// Runs routes
	a.Logger.Info("registering runs routes")
	controllers.RegisterRunsRoutes(v1, a.RunsController)
	// Tools routes
	a.Logger.Info("registering tools routes")
	controllers.RegisterToolsRoutes(v1, a.ToolsController)
	// Users routes
	a.Logger.Info("registering users routes")
	controllers.RegisterUsersRoutes(v1, a.UsersController)

	a.Logger.Info("all routes registered successfully")
}
