// Code generated by archesai/codegen. DO NOT EDIT.

package users

import (
	"context"
	"fmt"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/repositories"
)

// ListUsersQuery represents a query to list users.
type ListUsersQuery struct {
	Limit          int
	Offset         int
	OrderBy        string
	OrderDirection string
}

// NewListUsersQuery creates a new list users query.
func NewListUsersQuery() *ListUsersQuery {
	return &ListUsersQuery{
		Limit:  100,
		Offset: 0,
	}
}

// ListUsersQueryHandler handles the list users query.
type ListUsersQueryHandler struct {
	repo repositories.UserRepository
}

// NewListUsersQueryHandler creates a new list users query handler.
func NewListUsersQueryHandler(repo repositories.UserRepository) *ListUsersQueryHandler {
	return &ListUsersQueryHandler{
		repo: repo,
	}
}

// Handle executes the list users query.
func (h *ListUsersQueryHandler) Handle(ctx context.Context, query *ListUsersQuery) ([]*entities.User, int64, error) {
	// Convert to int32 for repository
	limit := int32(query.Limit)
	offset := int32(query.Offset)

	// Execute query with pagination
	results, total, err := h.repo.List(ctx, limit, offset)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list users: %w", err)
	}

	return results, total, nil
}
