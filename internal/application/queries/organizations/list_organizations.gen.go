// Code generated by archesai/codegen. DO NOT EDIT.

package organizations

import (
	"context"
	"fmt"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/repositories"
)

// ListOrganizationsQuery represents a query to list organizations.
type ListOrganizationsQuery struct {
	Limit          int
	Offset         int
	OrderBy        string
	OrderDirection string
}

// NewListOrganizationsQuery creates a new list organizations query.
func NewListOrganizationsQuery() *ListOrganizationsQuery {
	return &ListOrganizationsQuery{
		Limit:  100,
		Offset: 0,
	}
}

// ListOrganizationsQueryHandler handles the list organizations query.
type ListOrganizationsQueryHandler struct {
	repo repositories.OrganizationRepository
}

// NewListOrganizationsQueryHandler creates a new list organizations query handler.
func NewListOrganizationsQueryHandler(repo repositories.OrganizationRepository) *ListOrganizationsQueryHandler {
	return &ListOrganizationsQueryHandler{
		repo: repo,
	}
}

// Handle executes the list organizations query.
func (h *ListOrganizationsQueryHandler) Handle(ctx context.Context, query *ListOrganizationsQuery) ([]*entities.Organization, int64, error) {
	// Convert to int32 for repository
	limit := int32(query.Limit)
	offset := int32(query.Offset)

	// Execute query with pagination
	results, total, err := h.repo.List(ctx, limit, offset)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list organizations: %w", err)
	}

	return results, total, nil
}
