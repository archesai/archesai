// Code generated by archesai. DO NOT EDIT.

package apikey

import (
	"context"
	"fmt"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/repositories"
)

// ListAPIKeysQuery represents a query to get apikey.
type ListAPIKeysQuery struct {
	SessionID uuid.UUID
}

// NewListAPIKeysQuery creates a new get apikey query.
func NewListAPIKeysQuery(
	SessionID uuid.UUID,
) *ListAPIKeysQuery {
	return &ListAPIKeysQuery{
		SessionID: SessionID,
	}
}

// ListAPIKeysQueryHandler handles the get apikey query.
type ListAPIKeysQueryHandler struct {
	repo repositories.APIKeyRepository
}

// NewListAPIKeysQueryHandler creates a new get apikey query handler.
func NewListAPIKeysQueryHandler(repo repositories.APIKeyRepository) *ListAPIKeysQueryHandler {
	return &ListAPIKeysQueryHandler{
		repo: repo,
	}
}

// Handle executes the list apikeys query.
func (h *ListAPIKeysQueryHandler) Handle(ctx context.Context, query *ListAPIKeysQuery) ([]*entities.APIKey, int64, error) {
	// TODO: Apply filters based on query parameters
	results, total, err := h.repo.List(ctx, 100, 0)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list apikeys: %w", err)
	}

	return results, total, nil
}
