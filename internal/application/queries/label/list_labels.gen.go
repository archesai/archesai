// Code generated by archesai. DO NOT EDIT.

package label

import (
	"context"
	"fmt"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/repositories"
)

// ListLabelsQuery represents a query to get label.
type ListLabelsQuery struct {
	SessionID uuid.UUID
}

// NewListLabelsQuery creates a new get label query.
func NewListLabelsQuery(
	SessionID uuid.UUID,
) *ListLabelsQuery {
	return &ListLabelsQuery{
		SessionID: SessionID,
	}
}

// ListLabelsQueryHandler handles the get label query.
type ListLabelsQueryHandler struct {
	repo repositories.LabelRepository
}

// NewListLabelsQueryHandler creates a new get label query handler.
func NewListLabelsQueryHandler(repo repositories.LabelRepository) *ListLabelsQueryHandler {
	return &ListLabelsQueryHandler{
		repo: repo,
	}
}

// Handle executes the list labels query.
func (h *ListLabelsQueryHandler) Handle(ctx context.Context, query *ListLabelsQuery) ([]*entities.Label, int64, error) {
	// TODO: Apply filters based on query parameters
	results, total, err := h.repo.List(ctx, 100, 0)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list labels: %w", err)
	}

	return results, total, nil
}
