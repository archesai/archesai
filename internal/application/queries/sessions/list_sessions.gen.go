// Code generated by archesai/codegen. DO NOT EDIT.

package sessions

import (
	"context"
	"fmt"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/repositories"
)

// ListSessionsQuery represents a query to list sessions.
type ListSessionsQuery struct {
	Limit          int
	Offset         int
	OrderBy        string
	OrderDirection string
}

// NewListSessionsQuery creates a new list sessions query.
func NewListSessionsQuery() *ListSessionsQuery {
	return &ListSessionsQuery{
		Limit:  100,
		Offset: 0,
	}
}

// ListSessionsQueryHandler handles the list sessions query.
type ListSessionsQueryHandler struct {
	repo repositories.SessionRepository
}

// NewListSessionsQueryHandler creates a new list sessions query handler.
func NewListSessionsQueryHandler(repo repositories.SessionRepository) *ListSessionsQueryHandler {
	return &ListSessionsQueryHandler{
		repo: repo,
	}
}

// Handle executes the list sessions query.
func (h *ListSessionsQueryHandler) Handle(ctx context.Context, query *ListSessionsQuery) ([]*entities.Session, int64, error) {
	// Convert to int32 for repository
	limit := int32(query.Limit)
	offset := int32(query.Offset)

	// Execute query with pagination
	results, total, err := h.repo.List(ctx, limit, offset)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list sessions: %w", err)
	}

	return results, total, nil
}
