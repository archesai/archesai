// Code generated by archesai. DO NOT EDIT.

package pipeline

import (
	"context"
	"fmt"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/repositories"
)

// ListPipelinesQuery represents a query to get pipeline.
type ListPipelinesQuery struct {
	SessionID uuid.UUID
}

// NewListPipelinesQuery creates a new get pipeline query.
func NewListPipelinesQuery(
	SessionID uuid.UUID,
) *ListPipelinesQuery {
	return &ListPipelinesQuery{
		SessionID: SessionID,
	}
}

// ListPipelinesQueryHandler handles the get pipeline query.
type ListPipelinesQueryHandler struct {
	repo repositories.PipelineRepository
}

// NewListPipelinesQueryHandler creates a new get pipeline query handler.
func NewListPipelinesQueryHandler(repo repositories.PipelineRepository) *ListPipelinesQueryHandler {
	return &ListPipelinesQueryHandler{
		repo: repo,
	}
}

// Handle executes the list pipelines query.
func (h *ListPipelinesQueryHandler) Handle(ctx context.Context, query *ListPipelinesQuery) ([]*entities.Pipeline, int64, error) {
	// TODO: Apply filters based on query parameters
	results, total, err := h.repo.List(ctx, 100, 0)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list pipelines: %w", err)
	}

	return results, total, nil
}
