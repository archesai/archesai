// Code generated by archesai/codegen. DO NOT EDIT.

package tools

import (
	"context"
	"fmt"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/repositories"
)

// ListToolsQuery represents a query to list tools.
type ListToolsQuery struct {
	Limit          int
	Offset         int
	OrderBy        string
	OrderDirection string
}

// NewListToolsQuery creates a new list tools query.
func NewListToolsQuery() *ListToolsQuery {
	return &ListToolsQuery{
		Limit:  100,
		Offset: 0,
	}
}

// ListToolsQueryHandler handles the list tools query.
type ListToolsQueryHandler struct {
	repo repositories.ToolRepository
}

// NewListToolsQueryHandler creates a new list tools query handler.
func NewListToolsQueryHandler(repo repositories.ToolRepository) *ListToolsQueryHandler {
	return &ListToolsQueryHandler{
		repo: repo,
	}
}

// Handle executes the list tools query.
func (h *ListToolsQueryHandler) Handle(ctx context.Context, query *ListToolsQuery) ([]*entities.Tool, int64, error) {
	// Convert to int32 for repository
	limit := int32(query.Limit)
	offset := int32(query.Offset)

	// Execute query with pagination
	results, total, err := h.repo.List(ctx, limit, offset)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list tools: %w", err)
	}

	return results, total, nil
}
