// Code generated by archesai/codegen. DO NOT EDIT.

package labels

import (
	"context"
	"fmt"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/repositories"
)

// ListLabelsQuery represents a query to list labels.
type ListLabelsQuery struct {
	SessionID      uuid.UUID
	Limit          int32
	Offset         int32
	OrderBy        string
	OrderDirection string
}

// NewListLabelsQuery creates a new list labels query.
func NewListLabelsQuery(
	SessionID uuid.UUID,
) *ListLabelsQuery {
	return &ListLabelsQuery{
		SessionID: SessionID,
		Limit:     100,
		Offset:    0,
	}
}

// ListLabelsQueryHandler handles the list labels query.
type ListLabelsQueryHandler struct {
	repo repositories.LabelRepository
}

// NewListLabelsQueryHandler creates a new list labels query handler.
func NewListLabelsQueryHandler(repo repositories.LabelRepository) *ListLabelsQueryHandler {
	return &ListLabelsQueryHandler{
		repo: repo,
	}
}

// Handle executes the list labels query.
func (h *ListLabelsQueryHandler) Handle(ctx context.Context, query *ListLabelsQuery) ([]*entities.Label, int64, error) {
	// TODO: Apply filters based on query parameters
	results, total, err := h.repo.List(ctx, query.Limit, query.Offset)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list labels: %w", err)
	}

	return results, total, nil
}
