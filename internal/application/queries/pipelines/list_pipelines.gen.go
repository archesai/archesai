// Code generated by archesai/codegen. DO NOT EDIT.

package pipelines

import (
	"context"
	"fmt"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/repositories"
)

// ListPipelinesQuery represents a query to list pipelines.
type ListPipelinesQuery struct {
	Limit          int
	Offset         int
	OrderBy        string
	OrderDirection string
}

// NewListPipelinesQuery creates a new list pipelines query.
func NewListPipelinesQuery() *ListPipelinesQuery {
	return &ListPipelinesQuery{
		Limit:  100,
		Offset: 0,
	}
}

// ListPipelinesQueryHandler handles the list pipelines query.
type ListPipelinesQueryHandler struct {
	repo repositories.PipelineRepository
}

// NewListPipelinesQueryHandler creates a new list pipelines query handler.
func NewListPipelinesQueryHandler(repo repositories.PipelineRepository) *ListPipelinesQueryHandler {
	return &ListPipelinesQueryHandler{
		repo: repo,
	}
}

// Handle executes the list pipelines query.
func (h *ListPipelinesQueryHandler) Handle(ctx context.Context, query *ListPipelinesQuery) ([]*entities.Pipeline, int64, error) {
	// Convert to int32 for repository
	limit := int32(query.Limit)
	offset := int32(query.Offset)

	// Execute query with pagination
	results, total, err := h.repo.List(ctx, limit, offset)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list pipelines: %w", err)
	}

	return results, total, nil
}
