// Code generated by archesai. DO NOT EDIT.

package organization

import (
	"context"
	"fmt"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/repositories"
)

// ListOrganizationsQuery represents a query to get organization.
type ListOrganizationsQuery struct {
	SessionID uuid.UUID
}

// NewListOrganizationsQuery creates a new get organization query.
func NewListOrganizationsQuery(
	SessionID uuid.UUID,
) *ListOrganizationsQuery {
	return &ListOrganizationsQuery{
		SessionID: SessionID,
	}
}

// ListOrganizationsQueryHandler handles the get organization query.
type ListOrganizationsQueryHandler struct {
	repo repositories.OrganizationRepository
}

// NewListOrganizationsQueryHandler creates a new get organization query handler.
func NewListOrganizationsQueryHandler(repo repositories.OrganizationRepository) *ListOrganizationsQueryHandler {
	return &ListOrganizationsQueryHandler{
		repo: repo,
	}
}

// Handle executes the list organizations query.
func (h *ListOrganizationsQueryHandler) Handle(ctx context.Context, query *ListOrganizationsQuery) ([]*entities.Organization, int64, error) {
	// TODO: Apply filters based on query parameters
	results, total, err := h.repo.List(ctx, 100, 0)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list organizations: %w", err)
	}

	return results, total, nil
}
