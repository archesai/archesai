// Code generated by archesai/codegen. DO NOT EDIT.

package artifacts

import (
	"context"
	"fmt"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/repositories"
)

// ListArtifactsQuery represents a query to list artifacts.
type ListArtifactsQuery struct {
	Limit          int
	Offset         int
	OrderBy        string
	OrderDirection string
}

// NewListArtifactsQuery creates a new list artifacts query.
func NewListArtifactsQuery() *ListArtifactsQuery {
	return &ListArtifactsQuery{
		Limit:  100,
		Offset: 0,
	}
}

// ListArtifactsQueryHandler handles the list artifacts query.
type ListArtifactsQueryHandler struct {
	repo repositories.ArtifactRepository
}

// NewListArtifactsQueryHandler creates a new list artifacts query handler.
func NewListArtifactsQueryHandler(repo repositories.ArtifactRepository) *ListArtifactsQueryHandler {
	return &ListArtifactsQueryHandler{
		repo: repo,
	}
}

// Handle executes the list artifacts query.
func (h *ListArtifactsQueryHandler) Handle(ctx context.Context, query *ListArtifactsQuery) ([]*entities.Artifact, int64, error) {
	// Convert to int32 for repository
	limit := int32(query.Limit)
	offset := int32(query.Offset)

	// Execute query with pagination
	results, total, err := h.repo.List(ctx, limit, offset)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list artifacts: %w", err)
	}

	return results, total, nil
}
