// Code generated by archesai/codegen. DO NOT EDIT.

package artifacts

import (
	"context"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/errors"
	"github.com/archesai/archesai/internal/core/repositories"
)

// ListArtifactsQuery represents a query to list artifacts.
type ListArtifactsQuery struct {
	Limit          int
	Offset         int
	OrderBy        string
	OrderDirection string
}

// NewListArtifactsQuery creates a new list artifacts query.
func NewListArtifactsQuery() *ListArtifactsQuery {
	return &ListArtifactsQuery{
		Limit:  100,
		Offset: 0,
	}
}

// ListArtifactsQueryHandler handles the list artifacts query.
type ListArtifactsQueryHandler struct {
	repo repositories.ArtifactRepository
}

// NewListArtifactsQueryHandler creates a new list artifacts query handler.
func NewListArtifactsQueryHandler(repo repositories.ArtifactRepository) *ListArtifactsQueryHandler {
	return &ListArtifactsQueryHandler{
		repo: repo,
	}
}

// Handle executes the list artifacts query.
func (h *ListArtifactsQueryHandler) Handle(ctx context.Context, query *ListArtifactsQuery) ([]*entities.Artifact, int64, error) {
	// Apply filters
	filters := make(map[string]interface{})
	if query.OrganizationID != "" {
		filters["organization_id"] = query.OrganizationID
	}
	if query.Filter != nil {
		// TODO: Apply advanced filters
	}

	// Execute query with pagination
	results, err := h.repo.List(ctx, filters, query.Limit, query.Offset)
	if err != nil {
		return nil, 0, errors.Wrap(err, "failed to list artifacts")
	}

	// Get total count
	total, err := h.repo.Count(ctx, filters)
	if err != nil {
		return nil, 0, errors.Wrap(err, "failed to count artifacts")
	}

	return results, total, nil
}
