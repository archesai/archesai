// Code generated by archesai/codegen. DO NOT EDIT.

package auth

import (
	"context"
	"fmt"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/repositories"
)

// ListAccountsQuery represents a query to list accounts.
type ListAccountsQuery struct {
	SessionID      uuid.UUID
	Limit          int32
	Offset         int32
	OrderBy        string
	OrderDirection string
}

// NewListAccountsQuery creates a new list accounts query.
func NewListAccountsQuery(
	SessionID uuid.UUID,
) *ListAccountsQuery {
	return &ListAccountsQuery{
		SessionID: SessionID,
		Limit:     100,
		Offset:    0,
	}
}

// ListAccountsQueryHandler handles the list accounts query.
type ListAccountsQueryHandler struct {
	repo repositories.AccountRepository
}

// NewListAccountsQueryHandler creates a new list accounts query handler.
func NewListAccountsQueryHandler(repo repositories.AccountRepository) *ListAccountsQueryHandler {
	return &ListAccountsQueryHandler{
		repo: repo,
	}
}

// Handle executes the list accounts query.
func (h *ListAccountsQueryHandler) Handle(ctx context.Context, query *ListAccountsQuery) ([]*entities.Account, int64, error) {
	// TODO: Apply filters based on query parameters
	results, total, err := h.repo.List(ctx, query.Limit, query.Offset)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list accounts: %w", err)
	}

	return results, total, nil
}
