// Code generated by archesai/codegen. DO NOT EDIT.

package auth

import (
	"context"
	"fmt"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/repositories"
)

// ListAuthQuery represents a query to list auths.
type ListAuthQuery struct {
	Limit          int
	Offset         int
	OrderBy        string
	OrderDirection string
}

// NewListAuthQuery creates a new list auths query.
func NewListAuthQuery() *ListAuthQuery {
	return &ListAuthQuery{
		Limit:  100,
		Offset: 0,
	}
}

// ListAuthQueryHandler handles the list auths query.
type ListAuthQueryHandler struct {
	repo repositories.AuthRepository
}

// NewListAuthQueryHandler creates a new list auths query handler.
func NewListAuthQueryHandler(repo repositories.AuthRepository) *ListAuthQueryHandler {
	return &ListAuthQueryHandler{
		repo: repo,
	}
}

// Handle executes the list auths query.
func (h *ListAuthQueryHandler) Handle(ctx context.Context, query *ListAuthQuery) ([]*entities.Auth, int64, error) {
	// Convert to int32 for repository
	limit := int32(query.Limit)
	offset := int32(query.Offset)

	// Execute query with pagination
	results, total, err := h.repo.List(ctx, limit, offset)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list auths: %w", err)
	}

	return results, total, nil
}
