// Code generated by archesai. DO NOT EDIT.

package auth

import (
	"context"
	"fmt"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/repositories"
)

// ListSessionsQuery represents a query to get auth.
type ListSessionsQuery struct {
	SessionID uuid.UUID
}

// NewListSessionsQuery creates a new get auth query.
func NewListSessionsQuery(
	SessionID uuid.UUID,
) *ListSessionsQuery {
	return &ListSessionsQuery{
		SessionID: SessionID,
	}
}

// ListSessionsQueryHandler handles the get auth query.
type ListSessionsQueryHandler struct {
	repo repositories.SessionRepository
}

// NewListSessionsQueryHandler creates a new get auth query handler.
func NewListSessionsQueryHandler(repo repositories.SessionRepository) *ListSessionsQueryHandler {
	return &ListSessionsQueryHandler{
		repo: repo,
	}
}

// Handle executes the list auths query.
func (h *ListSessionsQueryHandler) Handle(ctx context.Context, query *ListSessionsQuery) ([]*entities.Session, int64, error) {
	// TODO: Apply filters based on query parameters
	results, total, err := h.repo.List(ctx, 100, 0)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list auths: %w", err)
	}

	return results, total, nil
}
