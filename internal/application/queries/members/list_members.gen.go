// Code generated by archesai/codegen. DO NOT EDIT.

package members

import (
	"context"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/errors"
	"github.com/archesai/archesai/internal/core/repositories"
)

// ListMembersQuery represents a query to list members.
type ListMembersQuery struct {
	Limit          int
	Offset         int
	OrderBy        string
	OrderDirection string
}

// NewListMembersQuery creates a new list members query.
func NewListMembersQuery() *ListMembersQuery {
	return &ListMembersQuery{
		Limit:  100,
		Offset: 0,
	}
}

// ListMembersQueryHandler handles the list members query.
type ListMembersQueryHandler struct {
	repo repositories.MemberRepository
}

// NewListMembersQueryHandler creates a new list members query handler.
func NewListMembersQueryHandler(repo repositories.MemberRepository) *ListMembersQueryHandler {
	return &ListMembersQueryHandler{
		repo: repo,
	}
}

// Handle executes the list members query.
func (h *ListMembersQueryHandler) Handle(ctx context.Context, query *ListMembersQuery) ([]*entities.Member, int64, error) {
	// Apply filters
	filters := make(map[string]interface{})
	if query.OrganizationID != "" {
		filters["organization_id"] = query.OrganizationID
	}
	if query.Filter != nil {
		// TODO: Apply advanced filters
	}

	// Execute query with pagination
	results, err := h.repo.List(ctx, filters, query.Limit, query.Offset)
	if err != nil {
		return nil, 0, errors.Wrap(err, "failed to list members")
	}

	// Get total count
	total, err := h.repo.Count(ctx, filters)
	if err != nil {
		return nil, 0, errors.Wrap(err, "failed to count members")
	}

	return results, total, nil
}
