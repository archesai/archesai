// Code generated by archesai. DO NOT EDIT.

package run

import (
	"context"
	"fmt"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/repositories"
)

// ListRunsQuery represents a query to get run.
type ListRunsQuery struct {
	SessionID uuid.UUID
}

// NewListRunsQuery creates a new get run query.
func NewListRunsQuery(
	SessionID uuid.UUID,
) *ListRunsQuery {
	return &ListRunsQuery{
		SessionID: SessionID,
	}
}

// ListRunsQueryHandler handles the get run query.
type ListRunsQueryHandler struct {
	repo repositories.RunRepository
}

// NewListRunsQueryHandler creates a new get run query handler.
func NewListRunsQueryHandler(repo repositories.RunRepository) *ListRunsQueryHandler {
	return &ListRunsQueryHandler{
		repo: repo,
	}
}

// Handle executes the list runs query.
func (h *ListRunsQueryHandler) Handle(ctx context.Context, query *ListRunsQuery) ([]*entities.Run, int64, error) {
	// TODO: Apply filters based on query parameters
	results, total, err := h.repo.List(ctx, 100, 0)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list runs: %w", err)
	}

	return results, total, nil
}
