// Code generated by archesai/codegen. DO NOT EDIT.

package runs

import (
	"context"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/errors"
	"github.com/archesai/archesai/internal/core/repositories"
)

// ListRunsQuery represents a query to list runs.
type ListRunsQuery struct {
	Limit          int
	Offset         int
	OrderBy        string
	OrderDirection string
}

// NewListRunsQuery creates a new list runs query.
func NewListRunsQuery() *ListRunsQuery {
	return &ListRunsQuery{
		Limit:  100,
		Offset: 0,
	}
}

// ListRunsQueryHandler handles the list runs query.
type ListRunsQueryHandler struct {
	repo repositories.RunRepository
}

// NewListRunsQueryHandler creates a new list runs query handler.
func NewListRunsQueryHandler(repo repositories.RunRepository) *ListRunsQueryHandler {
	return &ListRunsQueryHandler{
		repo: repo,
	}
}

// Handle executes the list runs query.
func (h *ListRunsQueryHandler) Handle(ctx context.Context, query *ListRunsQuery) ([]*entities.Run, int64, error) {
	// Apply filters
	filters := make(map[string]interface{})
	if query.OrganizationID != "" {
		filters["organization_id"] = query.OrganizationID
	}
	if query.Filter != nil {
		// TODO: Apply advanced filters
	}

	// Execute query with pagination
	results, err := h.repo.List(ctx, filters, query.Limit, query.Offset)
	if err != nil {
		return nil, 0, errors.Wrap(err, "failed to list runs")
	}

	// Get total count
	total, err := h.repo.Count(ctx, filters)
	if err != nil {
		return nil, 0, errors.Wrap(err, "failed to count runs")
	}

	return results, total, nil
}
