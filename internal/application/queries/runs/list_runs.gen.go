// Code generated by archesai/codegen. DO NOT EDIT.

package runs

import (
	"context"
	"fmt"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/repositories"
)

// ListRunsQuery represents a query to list runs.
type ListRunsQuery struct {
	Limit          int
	Offset         int
	OrderBy        string
	OrderDirection string
}

// NewListRunsQuery creates a new list runs query.
func NewListRunsQuery() *ListRunsQuery {
	return &ListRunsQuery{
		Limit:  100,
		Offset: 0,
	}
}

// ListRunsQueryHandler handles the list runs query.
type ListRunsQueryHandler struct {
	repo repositories.RunRepository
}

// NewListRunsQueryHandler creates a new list runs query handler.
func NewListRunsQueryHandler(repo repositories.RunRepository) *ListRunsQueryHandler {
	return &ListRunsQueryHandler{
		repo: repo,
	}
}

// Handle executes the list runs query.
func (h *ListRunsQueryHandler) Handle(ctx context.Context, query *ListRunsQuery) ([]*entities.Run, int64, error) {
	// Convert to int32 for repository
	limit := int32(query.Limit)
	offset := int32(query.Offset)

	// Execute query with pagination
	results, total, err := h.repo.List(ctx, limit, offset)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list runs: %w", err)
	}

	return results, total, nil
}
