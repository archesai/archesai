// Code generated by archesai. DO NOT EDIT.

package member

import (
	"context"
	"fmt"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/repositories"
)

// ListMembersQuery represents a query to get member.
type ListMembersQuery struct {
	SessionID      uuid.UUID
	OrganizationID uuid.UUID
}

// NewListMembersQuery creates a new get member query.
func NewListMembersQuery(
	SessionID uuid.UUID,
	OrganizationID uuid.UUID,
) *ListMembersQuery {
	return &ListMembersQuery{
		SessionID:      SessionID,
		OrganizationID: OrganizationID,
	}
}

// ListMembersQueryHandler handles the get member query.
type ListMembersQueryHandler struct {
	repo repositories.MemberRepository
}

// NewListMembersQueryHandler creates a new get member query handler.
func NewListMembersQueryHandler(repo repositories.MemberRepository) *ListMembersQueryHandler {
	return &ListMembersQueryHandler{
		repo: repo,
	}
}

// Handle executes the list members query.
func (h *ListMembersQueryHandler) Handle(ctx context.Context, query *ListMembersQuery) ([]*entities.Member, int64, error) {
	// TODO: Apply filters based on query parameters
	results, total, err := h.repo.List(ctx, 100, 0)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list members: %w", err)
	}

	return results, total, nil
}
