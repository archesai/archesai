// Code generated by archesai/codegen. DO NOT EDIT.

package artifacts

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
)

// CreateArtifactCommand represents the command to create a artifact.
type CreateArtifactCommand struct {
	SessionID uuid.UUID
	Name      *string
	Text      string
}

// NewCreateArtifactCommand creates a new create artifact command.
func NewCreateArtifactCommand(
	SessionID uuid.UUID,
	Name *string,
	Text string,
) *CreateArtifactCommand {
	return &CreateArtifactCommand{
		SessionID: SessionID,
		Name:      Name,
		Text:      Text,
	}
}

// CreateArtifactCommandHandler handles the create artifact command.
type CreateArtifactCommandHandler struct {
	repo      repositories.ArtifactRepository
	publisher events.Publisher
}

// NewCreateArtifactCommandHandler creates a new create artifact command handler.
func NewCreateArtifactCommandHandler(
	repo repositories.ArtifactRepository,
	publisher events.Publisher,
) *CreateArtifactCommandHandler {
	return &CreateArtifactCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the create artifact command.
func (h *CreateArtifactCommandHandler) Handle(ctx context.Context, cmd *CreateArtifactCommand) (*entities.Artifact, error) {
	// Create the artifact entity
	entity := &entities.Artifact{
		ID:        uuid.New(),
		CreatedAt: time.Now().UTC(),
		UpdatedAt: time.Now().UTC(),
		// TODO: Map command fields to entity
	}

	// Save to repository
	created, err := h.repo.Create(ctx, entity)
	if err != nil {
		return nil, fmt.Errorf("failed to create artifact: %w", err)
	}

	// Publish domain event
	event := events.NewArtifactCreatedEvent(created.ID)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return created, nil
}
