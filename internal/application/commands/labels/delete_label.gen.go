// Code generated by archesai/codegen. DO NOT EDIT.

package labels

import (
	"context"
	"fmt"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
)

// DeleteLabelCommand represents the command to delete a label.
type DeleteLabelCommand struct {
	ID uuid.UUID
}

// NewDeleteLabelCommand creates a new delete label command.
func NewDeleteLabelCommand(
	id uuid.UUID,
) *DeleteLabelCommand {
	return &DeleteLabelCommand{
		ID: id,
	}
}

// DeleteLabelCommandHandler handles the delete label command.
type DeleteLabelCommandHandler struct {
	repo      repositories.LabelRepository
	publisher events.Publisher
}

// NewDeleteLabelCommandHandler creates a new delete label command handler.
func NewDeleteLabelCommandHandler(
	repo repositories.LabelRepository,
	publisher events.Publisher,
) *DeleteLabelCommandHandler {
	return &DeleteLabelCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the delete label command.
func (h *DeleteLabelCommandHandler) Handle(ctx context.Context, cmd *DeleteLabelCommand) error {
	// Delete from repository
	if err := h.repo.Delete(ctx, cmd.ID); err != nil {
		return fmt.Errorf("failed to delete label: %w", err)
	}

	// Publish domain event
	event := events.NewLabelDeletedEvent(cmd.ID)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return nil
}
