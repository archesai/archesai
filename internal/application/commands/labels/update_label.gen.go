// Code generated by archesai/codegen. DO NOT EDIT.

package labels

import (
	"context"
	"time"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/errors"
	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
	"github.com/archesai/archesai/internal/core/valueobjects"
	"github.com/archesai/archesai/internal/infrastructure/events"
)

// UpdateLabelCommand represents the command to update a label.
type UpdateLabelCommand struct {
	ID          valueobjects.LabelID
	Name        *string
	Description *string
	Metadata    map[string]interface{}
}

// NewUpdateLabelCommand creates a new update label command.
func NewUpdateLabelCommand(
	id valueobjects.LabelID,
	name *string,
	description *string,
	metadata map[string]interface{},
) *UpdateLabelCommand {
	return &UpdateLabelCommand{
		ID:          id,
		Name:        name,
		Description: description,
		Metadata:    metadata,
	}
}

// UpdateLabelCommand represents a command to update an label.
type UpdateLabelCommand struct {
	ID          valueobjects.LabelID
	Name        *string
	Description *string
	Metadata    map[string]interface{}
}

// NewUpdateLabelCommand creates a new update label command.
func NewUpdateLabelCommand(
	id valueobjects.LabelID,
	name *string,
	description *string,
	metadata map[string]interface{},
) *UpdateLabelCommand {
	return &UpdateLabelCommand{
		ID:          id,
		Name:        name,
		Description: description,
		Metadata:    metadata,
	}
}

// UpdateLabelCommandHandler handles the update label command.
type UpdateLabelCommandHandler struct {
	repo      repositories.LabelRepository
	publisher events.Publisher
}

// NewUpdateLabelCommandHandler creates a new update label command handler.
func NewUpdateLabelCommandHandler(
	repo repositories.LabelRepository,
	publisher events.Publisher,
) *UpdateLabelCommandHandler {
	return &UpdateLabelCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the update label command.
func (h *UpdateLabelCommandHandler) Handle(ctx context.Context, cmd *UpdateLabelCommand) (*entities.Label, error) {
	// Fetch existing label
	existing, err := h.repo.Get(ctx, cmd.ID)
	if err != nil {
		return nil, errors.Wrap(err, "failed to get label")
	}

	// Update fields
	// TODO: Map command fields to entity
	existing.UpdatedAt = time.Now().UTC()

	// Save to repository
	updated, err := h.repo.Update(ctx, cmd.ID, existing)
	if err != nil {
		return nil, errors.Wrap(err, "failed to update label")
	}

	// Publish domain event
	event := events.NewLabelUpdatedEvent(
		updated.ID,
		updated.UpdatedAt,
	)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return updated, nil
}
