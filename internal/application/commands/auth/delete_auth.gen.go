// Code generated by archesai/codegen. DO NOT EDIT.

package auth

import (
	"context"
	"time"

	"github.com/archesai/archesai/internal/core/errors"
	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/valueobjects"
	"github.com/archesai/archesai/internal/infrastructure/events"
)

// DeleteAuthCommand represents the command to delete a auth.
type DeleteAuthCommand struct {
	ID valueobjects.AuthID
}

// NewDeleteAuthCommand creates a new delete auth command.
func NewDeleteAuthCommand(
	id valueobjects.AuthID,
) *DeleteAuthCommand {
	return &DeleteAuthCommand{
		ID: id,
	}
}

// DeleteAuthCommand represents a command to delete an auth.
type DeleteAuthCommand struct {
	ID valueobjects.AuthID
}

// NewDeleteAuthCommand creates a new delete auth command.
func NewDeleteAuthCommand(id valueobjects.AuthID) *DeleteAuthCommand {
	return &DeleteAuthCommand{
		ID: id,
	}
}

// DeleteAuthCommandHandler handles the delete auth command.
type DeleteAuthCommandHandler struct {
	repo      repositories.AuthRepository
	publisher events.Publisher
}

// NewDeleteAuthCommandHandler creates a new delete auth command handler.
func NewDeleteAuthCommandHandler(
	repo repositories.AuthRepository,
	publisher events.Publisher,
) *DeleteAuthCommandHandler {
	return &DeleteAuthCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the delete auth command.
func (h *DeleteAuthCommandHandler) Handle(ctx context.Context, cmd *DeleteAuthCommand) error {
	// Delete from repository
	if err := h.repo.Delete(ctx, cmd.ID); err != nil {
		return errors.Wrap(err, "failed to delete auth")
	}

	// Publish domain event
	event := events.NewAuthDeletedEvent(
		cmd.ID,
		time.Now().UTC(),
	)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return nil
}
