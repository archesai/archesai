// Code generated by archesai/codegen. DO NOT EDIT.

package members

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
)

// UpdateMemberCommand represents the command to update a member.
type UpdateMemberCommand struct {
	SessionID      uuid.UUID
	OrganizationID uuid.UUID
	ID             uuid.UUID
	Role           *string
}

// NewUpdateMemberCommand creates a new update member command.
func NewUpdateMemberCommand(
	SessionID uuid.UUID,
	organizationID uuid.UUID,
	id uuid.UUID,
	Role *string,
) *UpdateMemberCommand {
	return &UpdateMemberCommand{
		SessionID:      SessionID,
		OrganizationID: organizationID,
		ID:             id,
		Role:           Role,
	}
}

// UpdateMemberCommandHandler handles the update member command.
type UpdateMemberCommandHandler struct {
	repo      repositories.MemberRepository
	publisher events.Publisher
}

// NewUpdateMemberCommandHandler creates a new update member command handler.
func NewUpdateMemberCommandHandler(
	repo repositories.MemberRepository,
	publisher events.Publisher,
) *UpdateMemberCommandHandler {
	return &UpdateMemberCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the update member command.
func (h *UpdateMemberCommandHandler) Handle(ctx context.Context, cmd *UpdateMemberCommand) (*entities.Member, error) {
	// Fetch existing member
	existing, err := h.repo.Get(ctx, cmd.ID)
	if err != nil {
		return nil, fmt.Errorf("failed to get member: %w", err)
	}

	// Update fields
	// TODO: Map command fields to entity
	existing.UpdatedAt = time.Now().UTC()

	// Save to repository
	updated, err := h.repo.Update(ctx, cmd.ID, existing)
	if err != nil {
		return nil, fmt.Errorf("failed to update member: %w", err)
	}

	// Publish domain event
	event := events.NewMemberUpdatedEvent(updated.ID)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return updated, nil
}
