// Code generated by archesai/codegen. DO NOT EDIT.

package members

import (
	"context"
	"time"

	"github.com/archesai/archesai/internal/core/errors"
	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
	"github.com/archesai/archesai/internal/core/valueobjects"
	"github.com/archesai/archesai/internal/infrastructure/events"
)

// DeleteMemberCommand represents the command to delete a member.
type DeleteMemberCommand struct {
	ID valueobjects.MemberID
}

// NewDeleteMemberCommand creates a new delete member command.
func NewDeleteMemberCommand(
	id valueobjects.MemberID,
) *DeleteMemberCommand {
	return &DeleteMemberCommand{
		ID: id,
	}
}

// DeleteMemberCommand represents a command to delete an member.
type DeleteMemberCommand struct {
	ID valueobjects.MemberID
}

// NewDeleteMemberCommand creates a new delete member command.
func NewDeleteMemberCommand(id valueobjects.MemberID) *DeleteMemberCommand {
	return &DeleteMemberCommand{
		ID: id,
	}
}

// DeleteMemberCommandHandler handles the delete member command.
type DeleteMemberCommandHandler struct {
	repo      repositories.MemberRepository
	publisher events.Publisher
}

// NewDeleteMemberCommandHandler creates a new delete member command handler.
func NewDeleteMemberCommandHandler(
	repo repositories.MemberRepository,
	publisher events.Publisher,
) *DeleteMemberCommandHandler {
	return &DeleteMemberCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the delete member command.
func (h *DeleteMemberCommandHandler) Handle(ctx context.Context, cmd *DeleteMemberCommand) error {
	// Delete from repository
	if err := h.repo.Delete(ctx, cmd.ID); err != nil {
		return errors.Wrap(err, "failed to delete member")
	}

	// Publish domain event
	event := events.NewMemberDeletedEvent(
		cmd.ID,
		time.Now().UTC(),
	)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return nil
}
