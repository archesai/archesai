// Code generated by archesai. DO NOT EDIT.

package apikey

import (
	"context"
	"fmt"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
)

// DeleteAPIKeyCommand represents the command to delete a apikey.
type DeleteAPIKeyCommand struct {
	SessionID uuid.UUID
	ID        uuid.UUID
}

// NewDeleteAPIKeyCommand creates a new DeleteAPIKey command.
func NewDeleteAPIKeyCommand(
	SessionID uuid.UUID,
	ID uuid.UUID,
) *DeleteAPIKeyCommand {
	return &DeleteAPIKeyCommand{
		SessionID: SessionID,
		ID:        ID,
	}
}

// DeleteAPIKeyCommandHandler handles the delete apikey command.
type DeleteAPIKeyCommandHandler struct {
	repo      repositories.APIKeyRepository
	publisher events.Publisher
}

// NewDeleteAPIKeyCommandHandler creates a new delete apikey command handler.
func NewDeleteAPIKeyCommandHandler(
	repo repositories.APIKeyRepository,
	publisher events.Publisher,
) *DeleteAPIKeyCommandHandler {
	return &DeleteAPIKeyCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the delete apikey command.
func (h *DeleteAPIKeyCommandHandler) Handle(ctx context.Context, cmd *DeleteAPIKeyCommand) error {
	// Delete from repository
	if err := h.repo.Delete(ctx, cmd.ID); err != nil {
		return fmt.Errorf("failed to delete apikey: %w", err)
	}

	// Publish domain event
	event := events.NewAPIKeyDeletedEvent(cmd.ID)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return nil
}
