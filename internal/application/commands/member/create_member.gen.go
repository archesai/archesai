// Code generated by archesai. DO NOT EDIT.

package member

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
)

// CreateMemberCommand represents the command to post a member.
type CreateMemberCommand struct {
	SessionID      uuid.UUID
	OrganizationID uuid.UUID
	Role           string
}

// NewCreateMemberCommand creates a new CreateMember command.
func NewCreateMemberCommand(
	SessionID uuid.UUID,
	OrganizationID uuid.UUID,
	Role string,
) *CreateMemberCommand {
	return &CreateMemberCommand{
		SessionID:      SessionID,
		OrganizationID: OrganizationID,
		Role:           Role,
	}
}

// CreateMemberCommandHandler handles the create member command.
type CreateMemberCommandHandler struct {
	repo      repositories.MemberRepository
	publisher events.Publisher
}

// NewCreateMemberCommandHandler creates a new create member command handler.
func NewCreateMemberCommandHandler(
	repo repositories.MemberRepository,
	publisher events.Publisher,
) *CreateMemberCommandHandler {
	return &CreateMemberCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the create member command.
func (h *CreateMemberCommandHandler) Handle(ctx context.Context, cmd *CreateMemberCommand) (*entities.Member, error) {
	// Create the member entity
	entity := &entities.Member{
		ID:        uuid.New(),
		CreatedAt: time.Now().UTC(),
		UpdatedAt: time.Now().UTC(),
		// TODO: Map command fields to entity
	}

	// Save to repository
	created, err := h.repo.Create(ctx, entity)
	if err != nil {
		return nil, fmt.Errorf("failed to create member: %w", err)
	}

	// Publish domain event
	event := events.NewMemberCreatedEvent(created.ID)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return created, nil
}
