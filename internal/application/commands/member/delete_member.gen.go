// Code generated by archesai. DO NOT EDIT.

package member

import (
	"context"
	"fmt"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
)

// DeleteMemberCommand represents the command to delete a member.
type DeleteMemberCommand struct {
	SessionID      uuid.UUID
	OrganizationID uuid.UUID
	ID             uuid.UUID
}

// NewDeleteMemberCommand creates a new DeleteMember command.
func NewDeleteMemberCommand(
	SessionID uuid.UUID,
	OrganizationID uuid.UUID,
	ID uuid.UUID,
) *DeleteMemberCommand {
	return &DeleteMemberCommand{
		SessionID:      SessionID,
		OrganizationID: OrganizationID,
		ID:             ID,
	}
}

// DeleteMemberCommandHandler handles the delete member command.
type DeleteMemberCommandHandler struct {
	repo      repositories.MemberRepository
	publisher events.Publisher
}

// NewDeleteMemberCommandHandler creates a new delete member command handler.
func NewDeleteMemberCommandHandler(
	repo repositories.MemberRepository,
	publisher events.Publisher,
) *DeleteMemberCommandHandler {
	return &DeleteMemberCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the delete member command.
func (h *DeleteMemberCommandHandler) Handle(ctx context.Context, cmd *DeleteMemberCommand) error {
	// Delete from repository
	if err := h.repo.Delete(ctx, cmd.ID); err != nil {
		return fmt.Errorf("failed to delete member: %w", err)
	}

	// Publish domain event
	event := events.NewMemberDeletedEvent(cmd.ID)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return nil
}
