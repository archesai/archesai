// Code generated by archesai/codegen. DO NOT EDIT.

package invitations

import (
	"context"
	"time"

	"github.com/archesai/archesai/internal/core/errors"
	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
	"github.com/archesai/archesai/internal/core/valueobjects"
	"github.com/archesai/archesai/internal/infrastructure/events"
)

// DeleteInvitationCommand represents the command to delete a invitation.
type DeleteInvitationCommand struct {
	ID valueobjects.InvitationID
}

// NewDeleteInvitationCommand creates a new delete invitation command.
func NewDeleteInvitationCommand(
	id valueobjects.InvitationID,
) *DeleteInvitationCommand {
	return &DeleteInvitationCommand{
		ID: id,
	}
}

// DeleteInvitationCommand represents a command to delete an invitation.
type DeleteInvitationCommand struct {
	ID valueobjects.InvitationID
}

// NewDeleteInvitationCommand creates a new delete invitation command.
func NewDeleteInvitationCommand(id valueobjects.InvitationID) *DeleteInvitationCommand {
	return &DeleteInvitationCommand{
		ID: id,
	}
}

// DeleteInvitationCommandHandler handles the delete invitation command.
type DeleteInvitationCommandHandler struct {
	repo      repositories.InvitationRepository
	publisher events.Publisher
}

// NewDeleteInvitationCommandHandler creates a new delete invitation command handler.
func NewDeleteInvitationCommandHandler(
	repo repositories.InvitationRepository,
	publisher events.Publisher,
) *DeleteInvitationCommandHandler {
	return &DeleteInvitationCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the delete invitation command.
func (h *DeleteInvitationCommandHandler) Handle(ctx context.Context, cmd *DeleteInvitationCommand) error {
	// Delete from repository
	if err := h.repo.Delete(ctx, cmd.ID); err != nil {
		return errors.Wrap(err, "failed to delete invitation")
	}

	// Publish domain event
	event := events.NewInvitationDeletedEvent(
		cmd.ID,
		time.Now().UTC(),
	)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return nil
}
