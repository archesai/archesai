// Code generated by archesai/codegen. DO NOT EDIT.

package invitations

import (
	"context"
	"time"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/errors"
	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
	"github.com/archesai/archesai/internal/core/valueobjects"
	"github.com/archesai/archesai/internal/infrastructure/events"
)

// UpdateInvitationCommand represents the command to update a invitation.
type UpdateInvitationCommand struct {
	ID          valueobjects.InvitationID
	Name        *string
	Description *string
	Metadata    map[string]interface{}
}

// NewUpdateInvitationCommand creates a new update invitation command.
func NewUpdateInvitationCommand(
	id valueobjects.InvitationID,
	name *string,
	description *string,
	metadata map[string]interface{},
) *UpdateInvitationCommand {
	return &UpdateInvitationCommand{
		ID:          id,
		Name:        name,
		Description: description,
		Metadata:    metadata,
	}
}

// UpdateInvitationCommand represents a command to update an invitation.
type UpdateInvitationCommand struct {
	ID          valueobjects.InvitationID
	Name        *string
	Description *string
	Metadata    map[string]interface{}
}

// NewUpdateInvitationCommand creates a new update invitation command.
func NewUpdateInvitationCommand(
	id valueobjects.InvitationID,
	name *string,
	description *string,
	metadata map[string]interface{},
) *UpdateInvitationCommand {
	return &UpdateInvitationCommand{
		ID:          id,
		Name:        name,
		Description: description,
		Metadata:    metadata,
	}
}

// UpdateInvitationCommandHandler handles the update invitation command.
type UpdateInvitationCommandHandler struct {
	repo      repositories.InvitationRepository
	publisher events.Publisher
}

// NewUpdateInvitationCommandHandler creates a new update invitation command handler.
func NewUpdateInvitationCommandHandler(
	repo repositories.InvitationRepository,
	publisher events.Publisher,
) *UpdateInvitationCommandHandler {
	return &UpdateInvitationCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the update invitation command.
func (h *UpdateInvitationCommandHandler) Handle(ctx context.Context, cmd *UpdateInvitationCommand) (*entities.Invitation, error) {
	// Fetch existing invitation
	existing, err := h.repo.Get(ctx, cmd.ID)
	if err != nil {
		return nil, errors.Wrap(err, "failed to get invitation")
	}

	// Update fields
	// TODO: Map command fields to entity
	existing.UpdatedAt = time.Now().UTC()

	// Save to repository
	updated, err := h.repo.Update(ctx, cmd.ID, existing)
	if err != nil {
		return nil, errors.Wrap(err, "failed to update invitation")
	}

	// Publish domain event
	event := events.NewInvitationUpdatedEvent(
		updated.ID,
		updated.UpdatedAt,
	)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return updated, nil
}
