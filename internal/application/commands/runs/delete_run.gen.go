// Code generated by archesai/codegen. DO NOT EDIT.

package runs

import (
	"context"
	"time"

	"github.com/archesai/archesai/internal/core/errors"
	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
	"github.com/archesai/archesai/internal/core/valueobjects"
	"github.com/archesai/archesai/internal/infrastructure/events"
)

// DeleteRunCommand represents the command to delete a run.
type DeleteRunCommand struct {
	ID valueobjects.RunID
}

// NewDeleteRunCommand creates a new delete run command.
func NewDeleteRunCommand(
	id valueobjects.RunID,
) *DeleteRunCommand {
	return &DeleteRunCommand{
		ID: id,
	}
}

// DeleteRunCommand represents a command to delete an run.
type DeleteRunCommand struct {
	ID valueobjects.RunID
}

// NewDeleteRunCommand creates a new delete run command.
func NewDeleteRunCommand(id valueobjects.RunID) *DeleteRunCommand {
	return &DeleteRunCommand{
		ID: id,
	}
}

// DeleteRunCommandHandler handles the delete run command.
type DeleteRunCommandHandler struct {
	repo      repositories.RunRepository
	publisher events.Publisher
}

// NewDeleteRunCommandHandler creates a new delete run command handler.
func NewDeleteRunCommandHandler(
	repo repositories.RunRepository,
	publisher events.Publisher,
) *DeleteRunCommandHandler {
	return &DeleteRunCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the delete run command.
func (h *DeleteRunCommandHandler) Handle(ctx context.Context, cmd *DeleteRunCommand) error {
	// Delete from repository
	if err := h.repo.Delete(ctx, cmd.ID); err != nil {
		return errors.Wrap(err, "failed to delete run")
	}

	// Publish domain event
	event := events.NewRunDeletedEvent(
		cmd.ID,
		time.Now().UTC(),
	)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return nil
}
