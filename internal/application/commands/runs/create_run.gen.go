// Code generated by archesai/codegen. DO NOT EDIT.

package runs

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
)

// CreateRunCommand represents the command to create a run.
type CreateRunCommand struct {
	PipelineID uuid.UUID
}

// NewCreateRunCommand creates a new create run command.
func NewCreateRunCommand(
	PipelineID uuid.UUID,
) *CreateRunCommand {
	return &CreateRunCommand{
		PipelineID: PipelineID,
	}
}

// CreateRunCommandHandler handles the create run command.
type CreateRunCommandHandler struct {
	repo      repositories.RunRepository
	publisher events.Publisher
}

// NewCreateRunCommandHandler creates a new create run command handler.
func NewCreateRunCommandHandler(
	repo repositories.RunRepository,
	publisher events.Publisher,
) *CreateRunCommandHandler {
	return &CreateRunCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the create run command.
func (h *CreateRunCommandHandler) Handle(ctx context.Context, cmd *CreateRunCommand) (*entities.Run, error) {
	// Create the run entity
	entity := &entities.Run{
		ID:        uuid.New(),
		CreatedAt: time.Now().UTC(),
		UpdatedAt: time.Now().UTC(),
		// TODO: Map command fields to entity
	}

	// Save to repository
	created, err := h.repo.Create(ctx, entity)
	if err != nil {
		return nil, fmt.Errorf("failed to create run: %w", err)
	}

	// Publish domain event
	event := events.NewRunCreatedEvent(created.ID)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return created, nil
}
