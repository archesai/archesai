// Code generated by archesai/codegen. DO NOT EDIT.

package accounts

import (
	"context"
	"time"

	"github.com/archesai/archesai/internal/core/errors"
	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
	"github.com/archesai/archesai/internal/core/valueobjects"
	"github.com/archesai/archesai/internal/infrastructure/events"
)

// DeleteAccountCommand represents the command to delete a account.
type DeleteAccountCommand struct {
	ID valueobjects.AccountID
}

// NewDeleteAccountCommand creates a new delete account command.
func NewDeleteAccountCommand(
	id valueobjects.AccountID,
) *DeleteAccountCommand {
	return &DeleteAccountCommand{
		ID: id,
	}
}

// DeleteAccountCommand represents a command to delete an account.
type DeleteAccountCommand struct {
	ID valueobjects.AccountID
}

// NewDeleteAccountCommand creates a new delete account command.
func NewDeleteAccountCommand(id valueobjects.AccountID) *DeleteAccountCommand {
	return &DeleteAccountCommand{
		ID: id,
	}
}

// DeleteAccountCommandHandler handles the delete account command.
type DeleteAccountCommandHandler struct {
	repo      repositories.AccountRepository
	publisher events.Publisher
}

// NewDeleteAccountCommandHandler creates a new delete account command handler.
func NewDeleteAccountCommandHandler(
	repo repositories.AccountRepository,
	publisher events.Publisher,
) *DeleteAccountCommandHandler {
	return &DeleteAccountCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the delete account command.
func (h *DeleteAccountCommandHandler) Handle(ctx context.Context, cmd *DeleteAccountCommand) error {
	// Delete from repository
	if err := h.repo.Delete(ctx, cmd.ID); err != nil {
		return errors.Wrap(err, "failed to delete account")
	}

	// Publish domain event
	event := events.NewAccountDeletedEvent(
		cmd.ID,
		time.Now().UTC(),
	)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return nil
}
