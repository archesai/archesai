// Code generated by archesai/codegen. DO NOT EDIT.

package accounts

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
)

// UpdateAccountCommand represents the command to update a account.
type UpdateAccountCommand struct {
	ID          uuid.UUID
	Name        *string
	Description *string
	Metadata    map[string]interface{}
}

// NewUpdateAccountCommand creates a new update account command.
func NewUpdateAccountCommand(
	id uuid.UUID,
	name *string,
	description *string,
	metadata map[string]interface{},
) *UpdateAccountCommand {
	return &UpdateAccountCommand{
		ID:          id,
		Name:        name,
		Description: description,
		Metadata:    metadata,
	}
}

// UpdateAccountCommandHandler handles the update account command.
type UpdateAccountCommandHandler struct {
	repo      repositories.AccountRepository
	publisher events.Publisher
}

// NewUpdateAccountCommandHandler creates a new update account command handler.
func NewUpdateAccountCommandHandler(
	repo repositories.AccountRepository,
	publisher events.Publisher,
) *UpdateAccountCommandHandler {
	return &UpdateAccountCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the update account command.
func (h *UpdateAccountCommandHandler) Handle(ctx context.Context, cmd *UpdateAccountCommand) (*entities.Account, error) {
	// Fetch existing account
	existing, err := h.repo.Get(ctx, cmd.ID)
	if err != nil {
		return nil, fmt.Errorf("failed to get account: %w", err)
	}

	// Update fields
	// TODO: Map command fields to entity
	existing.UpdatedAt = time.Now().UTC()

	// Save to repository
	updated, err := h.repo.Update(ctx, cmd.ID, existing)
	if err != nil {
		return nil, fmt.Errorf("failed to update account: %w", err)
	}

	// Publish domain event
	event := events.NewAccountUpdatedEvent(updated.ID)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return updated, nil
}
