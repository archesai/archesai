// Code generated by archesai/codegen. DO NOT EDIT.

package accounts

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
)

// CreateAccountCommand represents the command to create a account.
type CreateAccountCommand struct {
	OrganizationID uuid.UUID
	Name           string
	Description    string
	Metadata       map[string]interface{}
}

// NewCreateAccountCommand creates a new create account command.
func NewCreateAccountCommand(
	organizationID uuid.UUID,
	name string,
	description string,
	metadata map[string]interface{},
) *CreateAccountCommand {
	return &CreateAccountCommand{
		OrganizationID: organizationID,
		Name:           name,
		Description:    description,
		Metadata:       metadata,
	}
}

// CreateAccountCommandHandler handles the create account command.
type CreateAccountCommandHandler struct {
	repo      repositories.AccountRepository
	publisher events.Publisher
}

// NewCreateAccountCommandHandler creates a new create account command handler.
func NewCreateAccountCommandHandler(
	repo repositories.AccountRepository,
	publisher events.Publisher,
) *CreateAccountCommandHandler {
	return &CreateAccountCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the create account command.
func (h *CreateAccountCommandHandler) Handle(ctx context.Context, cmd *CreateAccountCommand) (*entities.Account, error) {
	// Create the account entity
	entity := &entities.Account{
		ID:        uuid.New(),
		CreatedAt: time.Now().UTC(),
		UpdatedAt: time.Now().UTC(),
		// TODO: Map command fields to entity
	}

	// Save to repository
	created, err := h.repo.Create(ctx, entity)
	if err != nil {
		return nil, fmt.Errorf("failed to create account: %w", err)
	}

	// Publish domain event
	event := events.NewAccountCreatedEvent(created.ID)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return created, nil
}
