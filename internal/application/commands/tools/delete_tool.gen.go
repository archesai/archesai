// Code generated by archesai/codegen. DO NOT EDIT.

package tools

import (
	"context"
	"time"

	"github.com/archesai/archesai/internal/core/errors"
	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
	"github.com/archesai/archesai/internal/core/valueobjects"
	"github.com/archesai/archesai/internal/infrastructure/events"
)

// DeleteToolCommand represents the command to delete a tool.
type DeleteToolCommand struct {
	ID valueobjects.ToolID
}

// NewDeleteToolCommand creates a new delete tool command.
func NewDeleteToolCommand(
	id valueobjects.ToolID,
) *DeleteToolCommand {
	return &DeleteToolCommand{
		ID: id,
	}
}

// DeleteToolCommand represents a command to delete an tool.
type DeleteToolCommand struct {
	ID valueobjects.ToolID
}

// NewDeleteToolCommand creates a new delete tool command.
func NewDeleteToolCommand(id valueobjects.ToolID) *DeleteToolCommand {
	return &DeleteToolCommand{
		ID: id,
	}
}

// DeleteToolCommandHandler handles the delete tool command.
type DeleteToolCommandHandler struct {
	repo      repositories.ToolRepository
	publisher events.Publisher
}

// NewDeleteToolCommandHandler creates a new delete tool command handler.
func NewDeleteToolCommandHandler(
	repo repositories.ToolRepository,
	publisher events.Publisher,
) *DeleteToolCommandHandler {
	return &DeleteToolCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the delete tool command.
func (h *DeleteToolCommandHandler) Handle(ctx context.Context, cmd *DeleteToolCommand) error {
	// Delete from repository
	if err := h.repo.Delete(ctx, cmd.ID); err != nil {
		return errors.Wrap(err, "failed to delete tool")
	}

	// Publish domain event
	event := events.NewToolDeletedEvent(
		cmd.ID,
		time.Now().UTC(),
	)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return nil
}
