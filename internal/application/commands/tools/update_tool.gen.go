// Code generated by archesai/codegen. DO NOT EDIT.

package tools

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
)

// UpdateToolCommand represents the command to update a tool.
type UpdateToolCommand struct {
	ID          uuid.UUID
	Description *string
	Name        *string
}

// NewUpdateToolCommand creates a new update tool command.
func NewUpdateToolCommand(
	id uuid.UUID,
	Description *string,
	Name *string,
) *UpdateToolCommand {
	return &UpdateToolCommand{
		ID:          id,
		Description: Description,
		Name:        Name,
	}
}

// UpdateToolCommandHandler handles the update tool command.
type UpdateToolCommandHandler struct {
	repo      repositories.ToolRepository
	publisher events.Publisher
}

// NewUpdateToolCommandHandler creates a new update tool command handler.
func NewUpdateToolCommandHandler(
	repo repositories.ToolRepository,
	publisher events.Publisher,
) *UpdateToolCommandHandler {
	return &UpdateToolCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the update tool command.
func (h *UpdateToolCommandHandler) Handle(ctx context.Context, cmd *UpdateToolCommand) (*entities.Tool, error) {
	// Fetch existing tool
	existing, err := h.repo.Get(ctx, cmd.ID)
	if err != nil {
		return nil, fmt.Errorf("failed to get tool: %w", err)
	}

	// Update fields
	// TODO: Map command fields to entity
	existing.UpdatedAt = time.Now().UTC()

	// Save to repository
	updated, err := h.repo.Update(ctx, cmd.ID, existing)
	if err != nil {
		return nil, fmt.Errorf("failed to update tool: %w", err)
	}

	// Publish domain event
	event := events.NewToolUpdatedEvent(updated.ID)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return updated, nil
}
