// Code generated by archesai. DO NOT EDIT.

package invitation

import (
	"context"
	"fmt"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
)

// DeleteInvitationCommand represents the command to delete a invitation.
type DeleteInvitationCommand struct {
	SessionID      uuid.UUID
	OrganizationID uuid.UUID
	ID             uuid.UUID
}

// NewDeleteInvitationCommand creates a new DeleteInvitation command.
func NewDeleteInvitationCommand(
	SessionID uuid.UUID,
	OrganizationID uuid.UUID,
	ID uuid.UUID,
) *DeleteInvitationCommand {
	return &DeleteInvitationCommand{
		SessionID:      SessionID,
		OrganizationID: OrganizationID,
		ID:             ID,
	}
}

// DeleteInvitationCommandHandler handles the delete invitation command.
type DeleteInvitationCommandHandler struct {
	repo      repositories.InvitationRepository
	publisher events.Publisher
}

// NewDeleteInvitationCommandHandler creates a new delete invitation command handler.
func NewDeleteInvitationCommandHandler(
	repo repositories.InvitationRepository,
	publisher events.Publisher,
) *DeleteInvitationCommandHandler {
	return &DeleteInvitationCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the delete invitation command.
func (h *DeleteInvitationCommandHandler) Handle(ctx context.Context, cmd *DeleteInvitationCommand) error {
	// Delete from repository
	if err := h.repo.Delete(ctx, cmd.ID); err != nil {
		return fmt.Errorf("failed to delete invitation: %w", err)
	}

	// Publish domain event
	event := events.NewInvitationDeletedEvent(cmd.ID)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return nil
}
