// Code generated by archesai. DO NOT EDIT.

package invitation

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
)

// CreateInvitationCommand represents the command to post a invitation.
type CreateInvitationCommand struct {
	SessionID      uuid.UUID
	OrganizationID uuid.UUID
	Email          string
	Role           string
}

// NewCreateInvitationCommand creates a new CreateInvitation command.
func NewCreateInvitationCommand(
	SessionID uuid.UUID,
	OrganizationID uuid.UUID,
	Email string,
	Role string,
) *CreateInvitationCommand {
	return &CreateInvitationCommand{
		SessionID:      SessionID,
		OrganizationID: OrganizationID,
		Email:          Email,
		Role:           Role,
	}
}

// CreateInvitationCommandHandler handles the create invitation command.
type CreateInvitationCommandHandler struct {
	repo      repositories.InvitationRepository
	publisher events.Publisher
}

// NewCreateInvitationCommandHandler creates a new create invitation command handler.
func NewCreateInvitationCommandHandler(
	repo repositories.InvitationRepository,
	publisher events.Publisher,
) *CreateInvitationCommandHandler {
	return &CreateInvitationCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the create invitation command.
func (h *CreateInvitationCommandHandler) Handle(ctx context.Context, cmd *CreateInvitationCommand) (*entities.Invitation, error) {
	// Create the invitation entity
	entity := &entities.Invitation{
		ID:        uuid.New(),
		CreatedAt: time.Now().UTC(),
		UpdatedAt: time.Now().UTC(),
		// TODO: Map command fields to entity
	}

	// Save to repository
	created, err := h.repo.Create(ctx, entity)
	if err != nil {
		return nil, fmt.Errorf("failed to create invitation: %w", err)
	}

	// Publish domain event
	event := events.NewInvitationCreatedEvent(created.ID)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return created, nil
}
