// Code generated by archesai. DO NOT EDIT.

package user

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
)

// UpdateUserCommand represents the command to patch a user.
type UpdateUserCommand struct {
	SessionID uuid.UUID
	ID        uuid.UUID
	Email     *string
	Image     *string
}

// NewUpdateUserCommand creates a new UpdateUser command.
func NewUpdateUserCommand(
	SessionID uuid.UUID,
	ID uuid.UUID,
	Email *string,
	Image *string,
) *UpdateUserCommand {
	return &UpdateUserCommand{
		SessionID: SessionID,
		ID:        ID,
		Email:     Email,
		Image:     Image,
	}
}

// UpdateUserCommandHandler handles the update user command.
type UpdateUserCommandHandler struct {
	repo      repositories.UserRepository
	publisher events.Publisher
}

// NewUpdateUserCommandHandler creates a new update user command handler.
func NewUpdateUserCommandHandler(
	repo repositories.UserRepository,
	publisher events.Publisher,
) *UpdateUserCommandHandler {
	return &UpdateUserCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the update user command.
func (h *UpdateUserCommandHandler) Handle(ctx context.Context, cmd *UpdateUserCommand) (*entities.User, error) {
	// Fetch existing user
	existing, err := h.repo.Get(ctx, cmd.ID)
	if err != nil {
		return nil, fmt.Errorf("failed to get user: %w", err)
	}

	// Update fields
	// TODO: Map command fields to entity
	existing.UpdatedAt = time.Now().UTC()

	// Save to repository
	updated, err := h.repo.Update(ctx, cmd.ID, existing)
	if err != nil {
		return nil, fmt.Errorf("failed to update user: %w", err)
	}

	// Publish domain event
	event := events.NewUserUpdatedEvent(updated.ID)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return updated, nil
}
