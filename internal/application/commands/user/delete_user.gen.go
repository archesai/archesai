// Code generated by archesai. DO NOT EDIT.

package user

import (
	"context"
	"fmt"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
)

// DeleteUserCommand represents the command to delete a user.
type DeleteUserCommand struct {
	SessionID uuid.UUID
	ID        uuid.UUID
}

// NewDeleteUserCommand creates a new DeleteUser command.
func NewDeleteUserCommand(
	SessionID uuid.UUID,
	ID uuid.UUID,
) *DeleteUserCommand {
	return &DeleteUserCommand{
		SessionID: SessionID,
		ID:        ID,
	}
}

// DeleteUserCommandHandler handles the delete user command.
type DeleteUserCommandHandler struct {
	repo      repositories.UserRepository
	publisher events.Publisher
}

// NewDeleteUserCommandHandler creates a new delete user command handler.
func NewDeleteUserCommandHandler(
	repo repositories.UserRepository,
	publisher events.Publisher,
) *DeleteUserCommandHandler {
	return &DeleteUserCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the delete user command.
func (h *DeleteUserCommandHandler) Handle(ctx context.Context, cmd *DeleteUserCommand) error {
	// Delete from repository
	if err := h.repo.Delete(ctx, cmd.ID); err != nil {
		return fmt.Errorf("failed to delete user: %w", err)
	}

	// Publish domain event
	event := events.NewUserDeletedEvent(cmd.ID)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return nil
}
