// Code generated by archesai/codegen. DO NOT EDIT.

package sessions

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
)

// UpdateSessionCommand represents the command to update a session.
type UpdateSessionCommand struct {
	ID             uuid.UUID
	OrganizationID uuid.UUID
}

// NewUpdateSessionCommand creates a new update session command.
func NewUpdateSessionCommand(
	id uuid.UUID,
	OrganizationID uuid.UUID,
) *UpdateSessionCommand {
	return &UpdateSessionCommand{
		ID:             id,
		OrganizationID: OrganizationID,
	}
}

// UpdateSessionCommandHandler handles the update session command.
type UpdateSessionCommandHandler struct {
	repo      repositories.SessionRepository
	publisher events.Publisher
}

// NewUpdateSessionCommandHandler creates a new update session command handler.
func NewUpdateSessionCommandHandler(
	repo repositories.SessionRepository,
	publisher events.Publisher,
) *UpdateSessionCommandHandler {
	return &UpdateSessionCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the update session command.
func (h *UpdateSessionCommandHandler) Handle(ctx context.Context, cmd *UpdateSessionCommand) (*entities.Session, error) {
	// Fetch existing session
	existing, err := h.repo.Get(ctx, cmd.ID)
	if err != nil {
		return nil, fmt.Errorf("failed to get session: %w", err)
	}

	// Update fields
	// TODO: Map command fields to entity
	existing.UpdatedAt = time.Now().UTC()

	// Save to repository
	updated, err := h.repo.Update(ctx, cmd.ID, existing)
	if err != nil {
		return nil, fmt.Errorf("failed to update session: %w", err)
	}

	// Publish domain event
	event := events.NewSessionUpdatedEvent(updated.ID)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return updated, nil
}
