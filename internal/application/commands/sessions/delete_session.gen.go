// Code generated by archesai/codegen. DO NOT EDIT.

package sessions

import (
	"context"
	"fmt"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
)

// DeleteSessionCommand represents the command to delete a session.
type DeleteSessionCommand struct {
	ID uuid.UUID
}

// NewDeleteSessionCommand creates a new delete session command.
func NewDeleteSessionCommand(
	id uuid.UUID,
) *DeleteSessionCommand {
	return &DeleteSessionCommand{
		ID: id,
	}
}

// DeleteSessionCommandHandler handles the delete session command.
type DeleteSessionCommandHandler struct {
	repo      repositories.SessionRepository
	publisher events.Publisher
}

// NewDeleteSessionCommandHandler creates a new delete session command handler.
func NewDeleteSessionCommandHandler(
	repo repositories.SessionRepository,
	publisher events.Publisher,
) *DeleteSessionCommandHandler {
	return &DeleteSessionCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the delete session command.
func (h *DeleteSessionCommandHandler) Handle(ctx context.Context, cmd *DeleteSessionCommand) error {
	// Delete from repository
	if err := h.repo.Delete(ctx, cmd.ID); err != nil {
		return fmt.Errorf("failed to delete session: %w", err)
	}

	// Publish domain event
	event := events.NewSessionDeletedEvent(cmd.ID)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return nil
}
