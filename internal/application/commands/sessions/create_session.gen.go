// Code generated by archesai/codegen. DO NOT EDIT.

package sessions

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
)

// CreateSessionCommand represents the command to create a session.
type CreateSessionCommand struct {
	OrganizationID uuid.UUID
	Name           string
	Description    string
	Metadata       map[string]interface{}
}

// NewCreateSessionCommand creates a new create session command.
func NewCreateSessionCommand(
	organizationID uuid.UUID,
	name string,
	description string,
	metadata map[string]interface{},
) *CreateSessionCommand {
	return &CreateSessionCommand{
		OrganizationID: organizationID,
		Name:           name,
		Description:    description,
		Metadata:       metadata,
	}
}

// CreateSessionCommandHandler handles the create session command.
type CreateSessionCommandHandler struct {
	repo      repositories.SessionRepository
	publisher events.Publisher
}

// NewCreateSessionCommandHandler creates a new create session command handler.
func NewCreateSessionCommandHandler(
	repo repositories.SessionRepository,
	publisher events.Publisher,
) *CreateSessionCommandHandler {
	return &CreateSessionCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the create session command.
func (h *CreateSessionCommandHandler) Handle(ctx context.Context, cmd *CreateSessionCommand) (*entities.Session, error) {
	// Create the session entity
	entity := &entities.Session{
		ID:        uuid.New(),
		CreatedAt: time.Now().UTC(),
		UpdatedAt: time.Now().UTC(),
		// TODO: Map command fields to entity
	}

	// Save to repository
	created, err := h.repo.Create(ctx, entity)
	if err != nil {
		return nil, fmt.Errorf("failed to create session: %w", err)
	}

	// Publish domain event
	event := events.NewSessionCreatedEvent(created.ID)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return created, nil
}
