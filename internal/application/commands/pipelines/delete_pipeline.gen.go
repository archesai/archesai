// Code generated by archesai/codegen. DO NOT EDIT.

package pipelines

import (
	"context"
	"fmt"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
)

// DeletePipelineCommand represents the command to delete a pipeline.
type DeletePipelineCommand struct {
	SessionID uuid.UUID
	ID        uuid.UUID
}

// NewDeletePipelineCommand creates a new delete pipeline command.
func NewDeletePipelineCommand(
	SessionID uuid.UUID,
	id uuid.UUID,
) *DeletePipelineCommand {
	return &DeletePipelineCommand{
		SessionID: SessionID,
		ID:        id,
	}
}

// DeletePipelineCommandHandler handles the delete pipeline command.
type DeletePipelineCommandHandler struct {
	repo      repositories.PipelineRepository
	publisher events.Publisher
}

// NewDeletePipelineCommandHandler creates a new delete pipeline command handler.
func NewDeletePipelineCommandHandler(
	repo repositories.PipelineRepository,
	publisher events.Publisher,
) *DeletePipelineCommandHandler {
	return &DeletePipelineCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the delete pipeline command.
func (h *DeletePipelineCommandHandler) Handle(ctx context.Context, cmd *DeletePipelineCommand) error {
	// Delete from repository
	if err := h.repo.Delete(ctx, cmd.ID); err != nil {
		return fmt.Errorf("failed to delete pipeline: %w", err)
	}

	// Publish domain event
	event := events.NewPipelineDeletedEvent(cmd.ID)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return nil
}
