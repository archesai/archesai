// Code generated by archesai/codegen. DO NOT EDIT.

package pipelines

import (
	"context"
	"time"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/errors"
	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
	"github.com/archesai/archesai/internal/core/valueobjects"
	"github.com/archesai/archesai/internal/infrastructure/events"
)

// CreatePipelineCommand represents the command to create a pipeline.
type CreatePipelineCommand struct {
	OrganizationID valueobjects.OrganizationID
	Name           string
	Description    string
	Metadata       map[string]interface{}
}

// NewCreatePipelineCommand creates a new create pipeline command.
func NewCreatePipelineCommand(
	organizationID valueobjects.OrganizationID,
	name string,
	description string,
	metadata map[string]interface{},
) *CreatePipelineCommand {
	return &CreatePipelineCommand{
		OrganizationID: organizationID,
		Name:           name,
		Description:    description,
		Metadata:       metadata,
	}
}

// CreatePipelineCommandHandler handles the create pipeline command.
type CreatePipelineCommandHandler struct {
	repo      repositories.PipelineRepository
	publisher events.Publisher
}

// NewCreatePipelineCommandHandler creates a new create pipeline command handler.
func NewCreatePipelineCommandHandler(
	repo repositories.PipelineRepository,
	publisher events.Publisher,
) *CreatePipelineCommandHandler {
	return &CreatePipelineCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the create pipeline command.
func (h *CreatePipelineCommandHandler) Handle(ctx context.Context, cmd *CreatePipelineCommand) (*entities.Pipeline, error) {
	// Create the pipeline entity
	entity := &entities.Pipeline{
		ID:        valueobjects.NewPipelineID(),
		CreatedAt: time.Now().UTC(),
		UpdatedAt: time.Now().UTC(),
		// TODO: Map command fields to entity
	}

	// Save to repository
	created, err := h.repo.Create(ctx, entity)
	if err != nil {
		return nil, errors.Wrap(err, "failed to create pipeline")
	}

	// Publish domain event
	event := events.NewPipelineCreatedEvent(
		created.ID,
		created.CreatedAt,
	)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return created, nil
}
