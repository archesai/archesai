// Code generated by archesai/codegen. DO NOT EDIT.

package pipelines

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
)

// UpdatePipelineCommand represents the command to update a pipeline.
type UpdatePipelineCommand struct {
	SessionID   uuid.UUID
	ID          uuid.UUID
	Description *string
	Name        *string
}

// NewUpdatePipelineCommand creates a new update pipeline command.
func NewUpdatePipelineCommand(
	SessionID uuid.UUID,
	id uuid.UUID,
	Description *string,
	Name *string,
) *UpdatePipelineCommand {
	return &UpdatePipelineCommand{
		SessionID:   SessionID,
		ID:          id,
		Description: Description,
		Name:        Name,
	}
}

// UpdatePipelineCommandHandler handles the update pipeline command.
type UpdatePipelineCommandHandler struct {
	repo      repositories.PipelineRepository
	publisher events.Publisher
}

// NewUpdatePipelineCommandHandler creates a new update pipeline command handler.
func NewUpdatePipelineCommandHandler(
	repo repositories.PipelineRepository,
	publisher events.Publisher,
) *UpdatePipelineCommandHandler {
	return &UpdatePipelineCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the update pipeline command.
func (h *UpdatePipelineCommandHandler) Handle(ctx context.Context, cmd *UpdatePipelineCommand) (*entities.Pipeline, error) {
	// Fetch existing pipeline
	existing, err := h.repo.Get(ctx, cmd.ID)
	if err != nil {
		return nil, fmt.Errorf("failed to get pipeline: %w", err)
	}

	// Update fields
	// TODO: Map command fields to entity
	existing.UpdatedAt = time.Now().UTC()

	// Save to repository
	updated, err := h.repo.Update(ctx, cmd.ID, existing)
	if err != nil {
		return nil, fmt.Errorf("failed to update pipeline: %w", err)
	}

	// Publish domain event
	event := events.NewPipelineUpdatedEvent(updated.ID)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return updated, nil
}
