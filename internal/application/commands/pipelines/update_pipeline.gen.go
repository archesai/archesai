// Code generated by archesai/codegen. DO NOT EDIT.

package pipelines

import (
	"context"
	"time"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/errors"
	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
	"github.com/archesai/archesai/internal/core/valueobjects"
	"github.com/archesai/archesai/internal/infrastructure/events"
)

// UpdatePipelineCommand represents the command to update a pipeline.
type UpdatePipelineCommand struct {
	ID          valueobjects.PipelineID
	Name        *string
	Description *string
	Metadata    map[string]interface{}
}

// NewUpdatePipelineCommand creates a new update pipeline command.
func NewUpdatePipelineCommand(
	id valueobjects.PipelineID,
	name *string,
	description *string,
	metadata map[string]interface{},
) *UpdatePipelineCommand {
	return &UpdatePipelineCommand{
		ID:          id,
		Name:        name,
		Description: description,
		Metadata:    metadata,
	}
}

// UpdatePipelineCommand represents a command to update an pipeline.
type UpdatePipelineCommand struct {
	ID          valueobjects.PipelineID
	Name        *string
	Description *string
	Metadata    map[string]interface{}
}

// NewUpdatePipelineCommand creates a new update pipeline command.
func NewUpdatePipelineCommand(
	id valueobjects.PipelineID,
	name *string,
	description *string,
	metadata map[string]interface{},
) *UpdatePipelineCommand {
	return &UpdatePipelineCommand{
		ID:          id,
		Name:        name,
		Description: description,
		Metadata:    metadata,
	}
}

// UpdatePipelineCommandHandler handles the update pipeline command.
type UpdatePipelineCommandHandler struct {
	repo      repositories.PipelineRepository
	publisher events.Publisher
}

// NewUpdatePipelineCommandHandler creates a new update pipeline command handler.
func NewUpdatePipelineCommandHandler(
	repo repositories.PipelineRepository,
	publisher events.Publisher,
) *UpdatePipelineCommandHandler {
	return &UpdatePipelineCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the update pipeline command.
func (h *UpdatePipelineCommandHandler) Handle(ctx context.Context, cmd *UpdatePipelineCommand) (*entities.Pipeline, error) {
	// Fetch existing pipeline
	existing, err := h.repo.Get(ctx, cmd.ID)
	if err != nil {
		return nil, errors.Wrap(err, "failed to get pipeline")
	}

	// Update fields
	// TODO: Map command fields to entity
	existing.UpdatedAt = time.Now().UTC()

	// Save to repository
	updated, err := h.repo.Update(ctx, cmd.ID, existing)
	if err != nil {
		return nil, errors.Wrap(err, "failed to update pipeline")
	}

	// Publish domain event
	event := events.NewPipelineUpdatedEvent(
		updated.ID,
		updated.UpdatedAt,
	)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return updated, nil
}
