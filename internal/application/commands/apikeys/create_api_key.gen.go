// Code generated by archesai/codegen. DO NOT EDIT.

package apikeys

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
)

// CreateAPIKeyCommand represents the command to create a apikey.
type CreateAPIKeyCommand struct {
	SessionID uuid.UUID
	ExpiresAt *time.Time
	Name      string
	RateLimit *int
	Scopes    []string
}

// NewCreateAPIKeyCommand creates a new create apikey command.
func NewCreateAPIKeyCommand(
	SessionID uuid.UUID,
	ExpiresAt *time.Time,
	Name string,
	RateLimit *int,
	Scopes []string,
) *CreateAPIKeyCommand {
	return &CreateAPIKeyCommand{
		SessionID: SessionID,
		ExpiresAt: ExpiresAt,
		Name:      Name,
		RateLimit: RateLimit,
		Scopes:    Scopes,
	}
}

// CreateAPIKeyCommandHandler handles the create apikey command.
type CreateAPIKeyCommandHandler struct {
	repo      repositories.APIKeyRepository
	publisher events.Publisher
}

// NewCreateAPIKeyCommandHandler creates a new create apikey command handler.
func NewCreateAPIKeyCommandHandler(
	repo repositories.APIKeyRepository,
	publisher events.Publisher,
) *CreateAPIKeyCommandHandler {
	return &CreateAPIKeyCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the create apikey command.
func (h *CreateAPIKeyCommandHandler) Handle(ctx context.Context, cmd *CreateAPIKeyCommand) (*entities.APIKey, error) {
	// Create the apikey entity
	entity := &entities.APIKey{
		ID:        uuid.New(),
		CreatedAt: time.Now().UTC(),
		UpdatedAt: time.Now().UTC(),
		// TODO: Map command fields to entity
	}

	// Save to repository
	created, err := h.repo.Create(ctx, entity)
	if err != nil {
		return nil, fmt.Errorf("failed to create apikey: %w", err)
	}

	// Publish domain event
	event := events.NewAPIKeyCreatedEvent(created.ID)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return created, nil
}
