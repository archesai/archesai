// Code generated by archesai/codegen. DO NOT EDIT.

package users

import (
	"context"
	"time"

	"github.com/archesai/archesai/internal/core/errors"
	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
	"github.com/archesai/archesai/internal/core/valueobjects"
	"github.com/archesai/archesai/internal/infrastructure/events"
)

// DeleteUserCommand represents the command to delete a user.
type DeleteUserCommand struct {
	ID valueobjects.UserID
}

// NewDeleteUserCommand creates a new delete user command.
func NewDeleteUserCommand(
	id valueobjects.UserID,
) *DeleteUserCommand {
	return &DeleteUserCommand{
		ID: id,
	}
}

// DeleteUserCommand represents a command to delete an user.
type DeleteUserCommand struct {
	ID valueobjects.UserID
}

// NewDeleteUserCommand creates a new delete user command.
func NewDeleteUserCommand(id valueobjects.UserID) *DeleteUserCommand {
	return &DeleteUserCommand{
		ID: id,
	}
}

// DeleteUserCommandHandler handles the delete user command.
type DeleteUserCommandHandler struct {
	repo      repositories.UserRepository
	publisher events.Publisher
}

// NewDeleteUserCommandHandler creates a new delete user command handler.
func NewDeleteUserCommandHandler(
	repo repositories.UserRepository,
	publisher events.Publisher,
) *DeleteUserCommandHandler {
	return &DeleteUserCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the delete user command.
func (h *DeleteUserCommandHandler) Handle(ctx context.Context, cmd *DeleteUserCommand) error {
	// Delete from repository
	if err := h.repo.Delete(ctx, cmd.ID); err != nil {
		return errors.Wrap(err, "failed to delete user")
	}

	// Publish domain event
	event := events.NewUserDeletedEvent(
		cmd.ID,
		time.Now().UTC(),
	)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return nil
}
