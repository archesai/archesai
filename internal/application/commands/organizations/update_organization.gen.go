// Code generated by archesai/codegen. DO NOT EDIT.

package organizations

import (
	"context"
	"time"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/errors"
	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
	"github.com/archesai/archesai/internal/core/valueobjects"
	"github.com/archesai/archesai/internal/infrastructure/events"
)

// UpdateOrganizationCommand represents the command to update a organization.
type UpdateOrganizationCommand struct {
	ID          valueobjects.OrganizationID
	Name        *string
	Description *string
	Metadata    map[string]interface{}
}

// NewUpdateOrganizationCommand creates a new update organization command.
func NewUpdateOrganizationCommand(
	id valueobjects.OrganizationID,
	name *string,
	description *string,
	metadata map[string]interface{},
) *UpdateOrganizationCommand {
	return &UpdateOrganizationCommand{
		ID:          id,
		Name:        name,
		Description: description,
		Metadata:    metadata,
	}
}

// UpdateOrganizationCommand represents a command to update an organization.
type UpdateOrganizationCommand struct {
	ID          valueobjects.OrganizationID
	Name        *string
	Description *string
	Metadata    map[string]interface{}
}

// NewUpdateOrganizationCommand creates a new update organization command.
func NewUpdateOrganizationCommand(
	id valueobjects.OrganizationID,
	name *string,
	description *string,
	metadata map[string]interface{},
) *UpdateOrganizationCommand {
	return &UpdateOrganizationCommand{
		ID:          id,
		Name:        name,
		Description: description,
		Metadata:    metadata,
	}
}

// UpdateOrganizationCommandHandler handles the update organization command.
type UpdateOrganizationCommandHandler struct {
	repo      repositories.OrganizationRepository
	publisher events.Publisher
}

// NewUpdateOrganizationCommandHandler creates a new update organization command handler.
func NewUpdateOrganizationCommandHandler(
	repo repositories.OrganizationRepository,
	publisher events.Publisher,
) *UpdateOrganizationCommandHandler {
	return &UpdateOrganizationCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the update organization command.
func (h *UpdateOrganizationCommandHandler) Handle(ctx context.Context, cmd *UpdateOrganizationCommand) (*entities.Organization, error) {
	// Fetch existing organization
	existing, err := h.repo.Get(ctx, cmd.ID)
	if err != nil {
		return nil, errors.Wrap(err, "failed to get organization")
	}

	// Update fields
	// TODO: Map command fields to entity
	existing.UpdatedAt = time.Now().UTC()

	// Save to repository
	updated, err := h.repo.Update(ctx, cmd.ID, existing)
	if err != nil {
		return nil, errors.Wrap(err, "failed to update organization")
	}

	// Publish domain event
	event := events.NewOrganizationUpdatedEvent(
		updated.ID,
		updated.UpdatedAt,
	)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return updated, nil
}
