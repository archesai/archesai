// Code generated by archesai/codegen. DO NOT EDIT.

package organizations

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"

	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
)

// UpdateOrganizationCommand represents the command to update a organization.
type UpdateOrganizationCommand struct {
	SessionID      uuid.UUID
	ID             uuid.UUID
	BillingEmail   *string
	OrganizationID *uuid.UUID
}

// NewUpdateOrganizationCommand creates a new update organization command.
func NewUpdateOrganizationCommand(
	SessionID uuid.UUID,
	id uuid.UUID,
	BillingEmail *string,
	OrganizationID *uuid.UUID,
) *UpdateOrganizationCommand {
	return &UpdateOrganizationCommand{
		SessionID:      SessionID,
		ID:             id,
		BillingEmail:   BillingEmail,
		OrganizationID: OrganizationID,
	}
}

// UpdateOrganizationCommandHandler handles the update organization command.
type UpdateOrganizationCommandHandler struct {
	repo      repositories.OrganizationRepository
	publisher events.Publisher
}

// NewUpdateOrganizationCommandHandler creates a new update organization command handler.
func NewUpdateOrganizationCommandHandler(
	repo repositories.OrganizationRepository,
	publisher events.Publisher,
) *UpdateOrganizationCommandHandler {
	return &UpdateOrganizationCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the update organization command.
func (h *UpdateOrganizationCommandHandler) Handle(ctx context.Context, cmd *UpdateOrganizationCommand) (*entities.Organization, error) {
	// Fetch existing organization
	existing, err := h.repo.Get(ctx, cmd.ID)
	if err != nil {
		return nil, fmt.Errorf("failed to get organization: %w", err)
	}

	// Update fields
	// TODO: Map command fields to entity
	existing.UpdatedAt = time.Now().UTC()

	// Save to repository
	updated, err := h.repo.Update(ctx, cmd.ID, existing)
	if err != nil {
		return nil, fmt.Errorf("failed to update organization: %w", err)
	}

	// Publish domain event
	event := events.NewOrganizationUpdatedEvent(updated.ID)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return updated, nil
}
