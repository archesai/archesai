// Code generated by archesai/codegen. DO NOT EDIT.

package organizations

import (
	"context"
	"time"

	"github.com/archesai/archesai/internal/core/errors"
	"github.com/archesai/archesai/internal/core/events"
	"github.com/archesai/archesai/internal/core/repositories"
	"github.com/archesai/archesai/internal/core/valueobjects"
	"github.com/archesai/archesai/internal/infrastructure/events"
)

// DeleteOrganizationCommand represents the command to delete a organization.
type DeleteOrganizationCommand struct {
	ID valueobjects.OrganizationID
}

// NewDeleteOrganizationCommand creates a new delete organization command.
func NewDeleteOrganizationCommand(
	id valueobjects.OrganizationID,
) *DeleteOrganizationCommand {
	return &DeleteOrganizationCommand{
		ID: id,
	}
}

// DeleteOrganizationCommand represents a command to delete an organization.
type DeleteOrganizationCommand struct {
	ID valueobjects.OrganizationID
}

// NewDeleteOrganizationCommand creates a new delete organization command.
func NewDeleteOrganizationCommand(id valueobjects.OrganizationID) *DeleteOrganizationCommand {
	return &DeleteOrganizationCommand{
		ID: id,
	}
}

// DeleteOrganizationCommandHandler handles the delete organization command.
type DeleteOrganizationCommandHandler struct {
	repo      repositories.OrganizationRepository
	publisher events.Publisher
}

// NewDeleteOrganizationCommandHandler creates a new delete organization command handler.
func NewDeleteOrganizationCommandHandler(
	repo repositories.OrganizationRepository,
	publisher events.Publisher,
) *DeleteOrganizationCommandHandler {
	return &DeleteOrganizationCommandHandler{
		repo:      repo,
		publisher: publisher,
	}
}

// Handle executes the delete organization command.
func (h *DeleteOrganizationCommandHandler) Handle(ctx context.Context, cmd *DeleteOrganizationCommand) error {
	// Delete from repository
	if err := h.repo.Delete(ctx, cmd.ID); err != nil {
		return errors.Wrap(err, "failed to delete organization")
	}

	// Publish domain event
	event := events.NewOrganizationDeletedEvent(
		cmd.ID,
		time.Now().UTC(),
	)
	if err := h.publisher.Publish(ctx, event); err != nil {
		// Log error but don't fail the operation
	}

	return nil
}
