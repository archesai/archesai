// Package members provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package members

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List members
	// (GET /organizations/{id}/members)
	ListMembers(ctx echo.Context, id string, params ListMembersParams) error
	// Create a member
	// (POST /organizations/{id}/members)
	CreateMember(ctx echo.Context, id string) error
	// Delete a member
	// (DELETE /organizations/{id}/members/{memberId})
	DeleteMember(ctx echo.Context, id openapi_types.UUID, memberId openapi_types.UUID) error
	// Find a member
	// (GET /organizations/{id}/members/{memberId})
	GetOneMember(ctx echo.Context, id openapi_types.UUID, memberId openapi_types.UUID) error
	// Update a member
	// (PATCH /organizations/{id}/members/{memberId})
	UpdateMember(ctx echo.Context, id openapi_types.UUID, memberId openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListMembers converts echo context to params.
func (w *ServerInterfaceWrapper) ListMembers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMembersParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListMembers(ctx, id, params)
	return err
}

// CreateMember converts echo context to params.
func (w *ServerInterfaceWrapper) CreateMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateMember(ctx, id)
	return err
}

// DeleteMember converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "memberId" -------------
	var memberId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "memberId", ctx.Param("memberId"), &memberId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter memberId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteMember(ctx, id, memberId)
	return err
}

// GetOneMember converts echo context to params.
func (w *ServerInterfaceWrapper) GetOneMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "memberId" -------------
	var memberId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "memberId", ctx.Param("memberId"), &memberId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter memberId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOneMember(ctx, id, memberId)
	return err
}

// UpdateMember converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// ------------- Path parameter "memberId" -------------
	var memberId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "memberId", ctx.Param("memberId"), &memberId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter memberId: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateMember(ctx, id, memberId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/organizations/:id/members", wrapper.ListMembers)
	router.POST(baseURL+"/organizations/:id/members", wrapper.CreateMember)
	router.DELETE(baseURL+"/organizations/:id/members/:memberId", wrapper.DeleteMember)
	router.GET(baseURL+"/organizations/:id/members/:memberId", wrapper.GetOneMember)
	router.PATCH(baseURL+"/organizations/:id/members/:memberId", wrapper.UpdateMember)

}

type BadRequestApplicationProblemPlusJSONResponse Problem

type NotFoundApplicationProblemPlusJSONResponse Problem

type UnauthorizedApplicationProblemPlusJSONResponse Problem

type ListMembersRequestObject struct {
	Id     string `json:"id"`
	Params ListMembersParams
}

type ListMembersResponseObject interface {
	VisitListMembersResponse(w http.ResponseWriter) error
}

type ListMembers200JSONResponse struct {
	Data []Member `json:"data"`
	Meta struct {
		// Total Total number of items in the collection
		Total float32 `json:"total"`
	} `json:"meta"`
}

func (response ListMembers200JSONResponse) VisitListMembersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListMembers400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response ListMembers400ApplicationProblemPlusJSONResponse) VisitListMembersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListMembers401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response ListMembers401ApplicationProblemPlusJSONResponse) VisitListMembersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateMemberRequestObject struct {
	Id   string `json:"id"`
	Body *CreateMemberJSONRequestBody
}

type CreateMemberResponseObject interface {
	VisitCreateMemberResponse(w http.ResponseWriter) error
}

type CreateMember201JSONResponse struct {
	// Data Schema for Member entity
	Data Member `json:"data"`
}

func (response CreateMember201JSONResponse) VisitCreateMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateMember400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response CreateMember400ApplicationProblemPlusJSONResponse) VisitCreateMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateMember401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response CreateMember401ApplicationProblemPlusJSONResponse) VisitCreateMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMemberRequestObject struct {
	Id       openapi_types.UUID `json:"id"`
	MemberId openapi_types.UUID `json:"memberId"`
}

type DeleteMemberResponseObject interface {
	VisitDeleteMemberResponse(w http.ResponseWriter) error
}

type DeleteMember200JSONResponse struct {
	// Data Schema for Member entity
	Data Member `json:"data"`
}

func (response DeleteMember200JSONResponse) VisitDeleteMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMember404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response DeleteMember404ApplicationProblemPlusJSONResponse) VisitDeleteMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetOneMemberRequestObject struct {
	Id       openapi_types.UUID `json:"id"`
	MemberId openapi_types.UUID `json:"memberId"`
}

type GetOneMemberResponseObject interface {
	VisitGetOneMemberResponse(w http.ResponseWriter) error
}

type GetOneMember200JSONResponse struct {
	// Data Schema for Member entity
	Data Member `json:"data"`
}

func (response GetOneMember200JSONResponse) VisitGetOneMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOneMember404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response GetOneMember404ApplicationProblemPlusJSONResponse) VisitGetOneMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMemberRequestObject struct {
	Id       openapi_types.UUID `json:"id"`
	MemberId openapi_types.UUID `json:"memberId"`
	Body     *UpdateMemberJSONRequestBody
}

type UpdateMemberResponseObject interface {
	VisitUpdateMemberResponse(w http.ResponseWriter) error
}

type UpdateMember200JSONResponse struct {
	// Data Schema for Member entity
	Data Member `json:"data"`
}

func (response UpdateMember200JSONResponse) VisitUpdateMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMember404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response UpdateMember404ApplicationProblemPlusJSONResponse) VisitUpdateMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List members
	// (GET /organizations/{id}/members)
	ListMembers(ctx context.Context, request ListMembersRequestObject) (ListMembersResponseObject, error)
	// Create a member
	// (POST /organizations/{id}/members)
	CreateMember(ctx context.Context, request CreateMemberRequestObject) (CreateMemberResponseObject, error)
	// Delete a member
	// (DELETE /organizations/{id}/members/{memberId})
	DeleteMember(ctx context.Context, request DeleteMemberRequestObject) (DeleteMemberResponseObject, error)
	// Find a member
	// (GET /organizations/{id}/members/{memberId})
	GetOneMember(ctx context.Context, request GetOneMemberRequestObject) (GetOneMemberResponseObject, error)
	// Update a member
	// (PATCH /organizations/{id}/members/{memberId})
	UpdateMember(ctx context.Context, request UpdateMemberRequestObject) (UpdateMemberResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ListMembers operation middleware
func (sh *strictHandler) ListMembers(ctx echo.Context, id string, params ListMembersParams) error {
	var request ListMembersRequestObject

	request.Id = id
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListMembers(ctx.Request().Context(), request.(ListMembersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListMembers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListMembersResponseObject); ok {
		return validResponse.VisitListMembersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateMember operation middleware
func (sh *strictHandler) CreateMember(ctx echo.Context, id string) error {
	var request CreateMemberRequestObject

	request.Id = id

	var body CreateMemberJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateMember(ctx.Request().Context(), request.(CreateMemberRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateMember")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateMemberResponseObject); ok {
		return validResponse.VisitCreateMemberResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteMember operation middleware
func (sh *strictHandler) DeleteMember(ctx echo.Context, id openapi_types.UUID, memberId openapi_types.UUID) error {
	var request DeleteMemberRequestObject

	request.Id = id
	request.MemberId = memberId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteMember(ctx.Request().Context(), request.(DeleteMemberRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteMember")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteMemberResponseObject); ok {
		return validResponse.VisitDeleteMemberResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetOneMember operation middleware
func (sh *strictHandler) GetOneMember(ctx echo.Context, id openapi_types.UUID, memberId openapi_types.UUID) error {
	var request GetOneMemberRequestObject

	request.Id = id
	request.MemberId = memberId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOneMember(ctx.Request().Context(), request.(GetOneMemberRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOneMember")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetOneMemberResponseObject); ok {
		return validResponse.VisitGetOneMemberResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateMember operation middleware
func (sh *strictHandler) UpdateMember(ctx echo.Context, id openapi_types.UUID, memberId openapi_types.UUID) error {
	var request UpdateMemberRequestObject

	request.Id = id
	request.MemberId = memberId

	var body UpdateMemberJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateMember(ctx.Request().Context(), request.(UpdateMemberRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateMember")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateMemberResponseObject); ok {
		return validResponse.VisitUpdateMemberResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
