// Code generated by archesai codegen. DO NOT EDIT.
package members

import (
	"time"

	"github.com/google/uuid"
)

// Defines values for MemberRole.
const (
	Admin MemberRole = "admin"
	Owner MemberRole = "owner"
	User  MemberRole = "user"
)

// Defines values for ListMembersParamsSortField.
const (
	MembersCreatedAt      ListMembersParamsSortField = "createdAt"
	MembersID             ListMembersParamsSortField = "id"
	MembersOrganizationID ListMembersParamsSortField = "organizationID"
	MembersRole           ListMembersParamsSortField = "role"
	MembersUpdatedAt      ListMembersParamsSortField = "updatedAt"
	MembersUserID         ListMembersParamsSortField = "userID"
)

// Defines values for ListMembersParamsSortOrder.
const (
	MembersAsc  ListMembersParamsSortOrder = "asc"
	MembersDesc ListMembersParamsSortOrder = "desc"
)

// MemberRole represents the type for MemberRole enum values.
type MemberRole string

// ListMembersParamsSortField represents the type for ListMembersParamsSortField enum values.
type ListMembersParamsSortField string

// ListMembersParamsSortOrder represents the type for ListMembersParamsSortOrder enum values.
type ListMembersParamsSortOrder string

// CreateMemberResponse
type CreateMemberResponse = Member

// UpdateMemberResponse
type UpdateMemberResponse = Member

// GetMemberResponse
type GetMemberResponse = Member

// Member Schema for Member entity
type Member struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`
	// ID Unique identifier for the resource
	ID uuid.UUID `json:"id" yaml:"id"`
	// OrganizationID The organization this member belongs to
	OrganizationID uuid.UUID `json:"organizationID" yaml:"organizationID"`
	// Role The role of the member
	Role MemberRole `json:"role" yaml:"role"`
	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
	// UserID The user who is a member of the organization
	UserID uuid.UUID `json:"userID" yaml:"userID"`
}

// CreateMemberRequestBody Request body for createMember
type CreateMemberRequestBody struct {
	// Description The members description
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name The members name
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`
}

// UpdateMemberRequestBody Request body for updateMember
type UpdateMemberRequestBody struct {
	// Description The members description
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name The members name
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`
}

// ListMembersParams Parameters for listing members
type ListMembersParams struct {
	// Filter Filter parameters
	Filter *ListMembersParamsFilter `json:"filter,omitempty" yaml:"filter,omitempty"`
	// Page Pagination parameters
	Page *ListMembersParamsPage `json:"page,omitempty" yaml:"page,omitempty"`
	// Sort Sort parameters
	Sort *ListMembersParamsSort `json:"sort,omitempty" yaml:"sort,omitempty"`
}

// ListMembersParamsFilter Filter members by field values
type ListMembersParamsFilter struct {
	// Filter A recursive filter node that can be a condition or group
	Filter interface{} `json:"filter" yaml:"filter"`
}

// ListMembersParamsPage Pagination parameters for listing members
type ListMembersParamsPage struct {
	// Number Page number (1-indexed)
	Number int `json:"number" yaml:"number"`
	// Size Page size (items per page)
	Size int `json:"size" yaml:"size"`
}

// ListMembersParamsSort Sort members by field and order
type ListMembersParamsSort struct {
	// Field Field to sort by
	Field ListMembersParamsSortField `json:"field" yaml:"field"`
	// Order Sort order (asc or desc)
	Order ListMembersParamsSortOrder `json:"order" yaml:"order"`
}

// ListMetadata Metadata for list responses
type ListMetadata struct {
	// Total Total number of items
	Total int64 `json:"total" yaml:"total"`
}

// DeleteMemberResponse Response for deleting a member
type DeleteMemberResponse struct {
}

// ListMembersResponse Response for listing members
type ListMembersResponse struct {
	// Data List of members
	Data []*Member `json:"data" yaml:"data"`
	// Meta Metadata about the list response
	Meta ListMetadata `json:"meta" yaml:"meta"`
}
