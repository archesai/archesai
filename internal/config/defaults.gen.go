// Code generated by codegen defaults. DO NOT EDIT.

package config

// GetDefaultConfig returns a new ArchesConfig with all default values from OpenAPI schema
func GetDefaultConfig() *ArchesConfig {

	config := &ArchesConfig{
		Api: APIConfig{
			Cors: CORSConfig{
				Origins: "https://platform.archesai.dev",
			},
			Docs: true,
			Email: EmailConfig{
				Enabled: false,
			},
			Environment: "development",
			Host:        "0.0.0.0",
			Image: ImageConfig{
				PullPolicy: "IfNotPresent",
				Tag:        "latest",
			},
			Port: 3001,
			Resources: ResourceConfig{
				Limits:   ResourceLimits{},
				Requests: ResourceRequests{},
			},
			Validate: true,
		},
		Auth: AuthConfig{
			Enabled: true,
			Firebase: FirebaseAuth{
				Enabled: false,
			},
			Local: LocalAuth{
				AccessTokenTtl:  "15m",
				Enabled:         true,
				JwtSecret:       "change-me-in-production",
				RefreshTokenTtl: "168h",
			},
			Twitter: TwitterAuth{
				Enabled: false,
			},
		},
		Billing: BillingConfig{
			Enabled: false,
			Stripe:  StripeConfig{},
		},
		Database: DatabaseConfig{
			Auth: DatabaseAuth{
				Database: "archesai-db",
				Password: "password",
			},
			Enabled: true,
			Image: ImageConfig{
				PullPolicy: "IfNotPresent",
				Tag:        "latest",
			},
			Managed:  false,
			MaxConns: 25,
			MinConns: 5,
			Persistence: PersistenceConfig{
				Enabled: true,
				Size:    "10Gi",
			},
			Resources: ResourceConfig{
				Limits:   ResourceLimits{},
				Requests: ResourceRequests{},
			},
			RunMigrations: false,
			Type:          "postgresql",
			Url:           "postgresql://admin:password@localhost:5432/archesai-db?schema=public",
		},
		Infrastructure: InfrastructureConfig{
			Development: DevelopmentConfig{
				Api: DevServiceConfig{
					Enabled: false,
				},
				HostIP: "172.18.0.1",
				Loki: DevServiceConfig{
					Enabled: false,
				},
				Platform: DevServiceConfig{
					Enabled: false,
				},
				Postgres: DevServiceConfig{
					Enabled: false,
				},
				Redis: DevServiceConfig{
					Enabled: false,
				},
			},
			Images: ImagesConfig{
				ImagePullSecrets: []string{},
				ImageRegistry:    "",
			},
			Migrations: MigrationsConfig{
				Enabled: false,
			},
			Namespace: "arches-system",
			ServiceAccount: ServiceAccountConfig{
				Create: true,
				Name:   "",
			},
		},
		Ingress: IngressConfig{
			Domain:  "archesai.dev",
			Enabled: false,
			Tls: TLSConfig{
				Enabled:    true,
				Issuer:     "letsencrypt-staging",
				SecretName: "archesai-tls",
			},
		},
		Intelligence: IntelligenceConfig{
			Embedding: EmbeddingConfig{
				Type: "ollama",
			},
			Llm: LLMConfig{
				Type: "ollama",
			},
			Runpod: RunPodConfig{
				Enabled: false,
			},
			Scraper: ScraperConfig{
				Enabled: false,
				Image: ImageConfig{
					PullPolicy: "IfNotPresent",
					Tag:        "latest",
				},
				Managed: false,
				Resources: ResourceConfig{
					Limits:   ResourceLimits{},
					Requests: ResourceRequests{},
				},
			},
			Speech: SpeechConfig{
				Enabled: false,
			},
			Unstructured: UnstructuredConfig{
				Enabled: false,
				Image: ImageConfig{
					PullPolicy: "IfNotPresent",
					Tag:        "latest",
				},
				Managed: false,
				Resources: ResourceConfig{
					Limits:   ResourceLimits{},
					Requests: ResourceRequests{},
				},
			},
		},
		Logging: LoggingConfig{
			Level:  "info",
			Pretty: false,
		},
		Monitoring: MonitoringConfig{
			Grafana: GrafanaConfig{
				Enabled: false,
				Image: ImageConfig{
					PullPolicy: "IfNotPresent",
					Tag:        "latest",
				},
				Managed: false,
				Resources: ResourceConfig{
					Limits:   ResourceLimits{},
					Requests: ResourceRequests{},
				},
			},
			Loki: LokiConfig{
				Enabled: false,
				Host:    "http://localhost:3100",
				Image: ImageConfig{
					PullPolicy: "IfNotPresent",
					Tag:        "latest",
				},
				Managed: false,
				Resources: ResourceConfig{
					Limits:   ResourceLimits{},
					Requests: ResourceRequests{},
				},
			},
		},
		Platform: PlatformConfig{
			Enabled: false,
			Host:    "localhost",
			Image: ImageConfig{
				PullPolicy: "IfNotPresent",
				Tag:        "latest",
			},
			Managed: false,
			Resources: ResourceConfig{
				Limits:   ResourceLimits{},
				Requests: ResourceRequests{},
			},
		},
		Redis: RedisConfig{
			Auth:    "password",
			Enabled: false,
			Host:    "localhost",
			Image: ImageConfig{
				PullPolicy: "IfNotPresent",
				Tag:        "latest",
			},
			Managed: false,
			Persistence: PersistenceConfig{
				Enabled: true,
				Size:    "10Gi",
			},
			Port: 6379,
			Resources: ResourceConfig{
				Limits:   ResourceLimits{},
				Requests: ResourceRequests{},
			},
		},
		Storage: StorageConfig{
			Accesskey: "minioadmin",
			Bucket:    "archesai",
			Enabled:   false,
			Endpoint:  "http://localhost:9000",
			Image: ImageConfig{
				PullPolicy: "IfNotPresent",
				Tag:        "latest",
			},
			Managed: false,
			Persistence: PersistenceConfig{
				Enabled: true,
				Size:    "10Gi",
			},
			Resources: ResourceConfig{
				Limits:   ResourceLimits{},
				Requests: ResourceRequests{},
			},
			Secretkey: "minioadmin",
		},
	}

	return config
}

// GetDefaultConfigWithOverrides returns a config with defaults and applies common overrides
func GetDefaultConfigWithOverrides() *ArchesConfig {
	config := GetDefaultConfig()

	// Apply common development overrides
	// These can be customized based on environment

	return config
}
