// Package config provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package config

import (
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes    = "bearerAuth.Scopes"
	SessionCookieScopes = "sessionCookie.Scopes"
)

// Defines values for APIConfigEnvironment.
const (
	Development APIConfigEnvironment = "development"
	Production  APIConfigEnvironment = "production"
	Staging     APIConfigEnvironment = "staging"
)

// Defines values for DatabaseConfigType.
const (
	Postgresql DatabaseConfigType = "postgresql"
	Sqlite     DatabaseConfigType = "sqlite"
)

// Defines values for EmbeddingConfigType.
const (
	EmbeddingConfigTypeOllama EmbeddingConfigType = "ollama"
	EmbeddingConfigTypeOpenai EmbeddingConfigType = "openai"
)

// Defines values for ImageConfigPullPolicy.
const (
	Always       ImageConfigPullPolicy = "Always"
	IfNotPresent ImageConfigPullPolicy = "IfNotPresent"
	Never        ImageConfigPullPolicy = "Never"
)

// Defines values for LLMConfigType.
const (
	LLMConfigTypeOllama LLMConfigType = "ollama"
	LLMConfigTypeOpenai LLMConfigType = "openai"
)

// Defines values for LoggingConfigLevel.
const (
	Debug  LoggingConfigLevel = "debug"
	Error  LoggingConfigLevel = "error"
	Fatal  LoggingConfigLevel = "fatal"
	Info   LoggingConfigLevel = "info"
	Silent LoggingConfigLevel = "silent"
	Trace  LoggingConfigLevel = "trace"
	Warn   LoggingConfigLevel = "warn"
)

// APIConfig Configuration schema for the API server
type APIConfig struct {
	// Cors A comma-separated list of allowed origins for CORS requests
	Cors string `json:"cors,omitempty,omitzero" yaml:"cors,omitempty" mapstructure:"cors,omitempty"`

	// Docs Enable or disable API documentation
	Docs bool `json:"docs,omitempty,omitzero" yaml:"docs,omitempty" mapstructure:"docs,omitempty"`

	// Email Email configuration for sending emails
	Email EmailConfig `json:"email,omitempty,omitzero" yaml:"email,omitempty" mapstructure:"email,omitempty"`

	// Environment Deployment environment (development, staging, production)
	Environment APIConfigEnvironment `json:"environment,omitempty,omitzero" yaml:"environment,omitempty" mapstructure:"environment,omitempty"`

	// Host The host address on which the API server will listen
	Host string `json:"host,omitempty,omitzero" yaml:"host,omitempty" mapstructure:"host,omitempty"`

	// Image Container image configuration
	Image ImageConfig `json:"image,omitempty,omitzero" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// Port The port on which the API server will listen
	Port float32 `json:"port,omitempty,omitzero" yaml:"port,omitempty" mapstructure:"port,omitempty"`

	// Resources Kubernetes resource configuration
	Resources ResourceConfig `json:"resources,omitempty,omitzero" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`

	// Validate Enable or disable request validation
	Validate bool `json:"validate,omitempty,omitzero" yaml:"validate,omitempty" mapstructure:"validate,omitempty"`
}

// APIConfigEnvironment Deployment environment (development, staging, production)
type APIConfigEnvironment string

// ArchesConfig Arches AI configuration schema
type ArchesConfig struct {
	// API Configuration schema for the API server
	API APIConfig `json:"api,omitempty,omitzero" yaml:"api,omitempty" mapstructure:"api,omitempty"`

	// Auth Authentication configuration for the API server
	Auth AuthConfig `json:"auth,omitempty,omitzero" yaml:"auth,omitempty" mapstructure:"auth,omitempty"`

	// Billing Billing configuration for Stripe
	Billing BillingConfig `json:"billing,omitempty,omitzero" yaml:"billing,omitempty" mapstructure:"billing,omitempty"`

	// Database Database configuration for PostgreSQL
	Database DatabaseConfig `json:"database,omitempty,omitzero" yaml:"database,omitempty" mapstructure:"database,omitempty"`

	// Intelligence Intelligence configuration (LLMs, embeddings, scraper, speech, etc.)
	Intelligence IntelligenceConfig `json:"intelligence,omitempty,omitzero" yaml:"intelligence,omitempty" mapstructure:"intelligence,omitempty"`

	// Kubernetes Kubernetes-specific deployment configuration
	Kubernetes struct {
		// Infrastructure Infrastructure configuration for Kubernetes deployments
		Infrastructure InfrastructureConfig `json:"infrastructure,omitempty,omitzero" yaml:"infrastructure,omitempty" mapstructure:"infrastructure,omitempty"`

		// Ingress Ingress configuration
		Ingress IngressConfig `json:"ingress,omitempty,omitzero" yaml:"ingress,omitempty" mapstructure:"ingress,omitempty"`

		// Monitoring Monitoring configuration for Grafana and Loki
		Monitoring MonitoringConfig `json:"monitoring,omitempty,omitzero" yaml:"monitoring,omitempty" mapstructure:"monitoring,omitempty"`
	} `json:"kubernetes,omitempty,omitzero" yaml:"kubernetes,omitempty" mapstructure:"kubernetes,omitempty"`

	// Logging Logging configuration
	Logging LoggingConfig `json:"logging,omitempty,omitzero" yaml:"logging,omitempty" mapstructure:"logging,omitempty"`

	// Platform Platform configuration (host, image, resources)
	Platform PlatformConfig `json:"platform,omitempty,omitzero" yaml:"platform,omitempty" mapstructure:"platform,omitempty"`

	// Redis Redis configuration
	Redis RedisConfig `json:"redis,omitempty,omitzero" yaml:"redis,omitempty" mapstructure:"redis,omitempty"`

	// Storage Object storage configuration for MinIO or S3-compatible services
	Storage StorageConfig `json:"storage,omitempty,omitzero" yaml:"storage,omitempty" mapstructure:"storage,omitempty"`
}

// AuthConfig Authentication configuration for the API server
type AuthConfig struct {
	// Enabled Enable authentication
	Enabled bool `json:"enabled" yaml:"enabled" mapstructure:"enabled"`

	// Firebase Firebase authentication configuration
	Firebase FirebaseAuth `json:"firebase,omitempty,omitzero" yaml:"firebase,omitempty" mapstructure:"firebase,omitempty"`

	// Github GitHub OAuth configuration
	Github GitHubAuth `json:"github,omitempty,omitzero" yaml:"github,omitempty" mapstructure:"github,omitempty"`

	// Google Google OAuth configuration
	Google GoogleAuth `json:"google,omitempty,omitzero" yaml:"google,omitempty" mapstructure:"google,omitempty"`

	// Local Local username/password authentication
	Local LocalAuth `json:"local,omitempty,omitzero" yaml:"local,omitempty" mapstructure:"local,omitempty"`

	// MagicLink Magic link authentication configuration
	MagicLink MagicLinkAuth `json:"magicLink,omitempty,omitzero" yaml:"magicLink,omitempty" mapstructure:"magicLink,omitempty"`

	// Microsoft Microsoft/Azure AD OAuth configuration
	Microsoft MicrosoftAuth `json:"microsoft,omitempty,omitzero" yaml:"microsoft,omitempty" mapstructure:"microsoft,omitempty"`

	// Twitter Twitter OAuth configuration
	Twitter TwitterAuth `json:"twitter,omitempty,omitzero" yaml:"twitter,omitempty" mapstructure:"twitter,omitempty"`
}

// BillingConfig Billing configuration for Stripe
type BillingConfig struct {
	// Enabled Enable billing functionality
	Enabled bool `json:"enabled" yaml:"enabled" mapstructure:"enabled"`

	// Stripe Stripe payment configuration
	Stripe StripeConfig `json:"stripe,omitempty,omitzero" yaml:"stripe,omitempty" mapstructure:"stripe,omitempty"`
}

// DatabaseAuth Database authentication credentials
type DatabaseAuth struct {
	// Database Database name
	Database string `json:"database" yaml:"database" mapstructure:"database"`

	// Password Database user password
	Password string `json:"password" yaml:"password" mapstructure:"password"`
}

// DatabaseConfig Database configuration for PostgreSQL
type DatabaseConfig struct {
	// Auth Database authentication credentials
	Auth DatabaseAuth `json:"auth,omitempty,omitzero" yaml:"auth,omitempty" mapstructure:"auth,omitempty"`

	// ConnMaxIdleTime Maximum connection idle time (e.g., "5m")
	ConnMaxIdleTime string `json:"connMaxIdleTime,omitempty,omitzero" yaml:"connMaxIdleTime,omitempty" mapstructure:"connMaxIdleTime,omitempty"`

	// ConnMaxLifetime Maximum connection lifetime (e.g., "30m")
	ConnMaxLifetime string `json:"connMaxLifetime,omitempty,omitzero" yaml:"connMaxLifetime,omitempty" mapstructure:"connMaxLifetime,omitempty"`

	// Enabled Enable database
	Enabled bool `json:"enabled" yaml:"enabled" mapstructure:"enabled"`

	// HealthCheckPeriod Health check period for connections (PostgreSQL)
	HealthCheckPeriod string `json:"healthCheckPeriod,omitempty,omitzero" yaml:"healthCheckPeriod,omitempty" mapstructure:"healthCheckPeriod,omitempty"`

	// Image Container image configuration
	Image ImageConfig `json:"image,omitempty,omitzero" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// Managed Use managed database deployment
	Managed bool `json:"managed,omitempty,omitzero" yaml:"managed,omitempty" mapstructure:"managed,omitempty"`

	// MaxConns Maximum number of connections in pool (PostgreSQL)
	MaxConns int `json:"maxConns,omitempty,omitzero" yaml:"maxConns,omitempty" mapstructure:"maxConns,omitempty"`

	// MinConns Minimum number of connections in pool (PostgreSQL)
	MinConns int `json:"minConns,omitempty,omitzero" yaml:"minConns,omitempty" mapstructure:"minConns,omitempty"`

	// Persistence Persistent storage configuration
	Persistence PersistenceConfig `json:"persistence,omitempty,omitzero" yaml:"persistence,omitempty" mapstructure:"persistence,omitempty"`

	// Resources Kubernetes resource configuration
	Resources ResourceConfig `json:"resources,omitempty,omitzero" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`

	// RunMigrations Automatically run database migrations on startup
	RunMigrations bool `json:"runMigrations,omitempty,omitzero" yaml:"runMigrations,omitempty" mapstructure:"runMigrations,omitempty"`

	// Type Database type (postgresql or sqlite)
	Type DatabaseConfigType `json:"type,omitempty,omitzero" yaml:"type,omitempty" mapstructure:"type,omitempty"`

	// URL Database connection url/string
	URL string `json:"url,omitempty,omitzero" yaml:"url,omitempty" mapstructure:"url,omitempty"`
}

// DatabaseConfigType Database type (postgresql or sqlite)
type DatabaseConfigType string

// EmailConfig Email configuration for sending emails
type EmailConfig struct {
	// Enabled Enable email functionality
	Enabled bool `json:"enabled" yaml:"enabled" mapstructure:"enabled"`

	// Password Password for the email service
	Password string `json:"password,omitempty,omitzero" yaml:"password,omitempty" mapstructure:"password,omitempty"`

	// Service Email service provider (e.g., "gmail", "sendgrid", etc.)
	Service string `json:"service,omitempty,omitzero" yaml:"service,omitempty" mapstructure:"service,omitempty"`

	// User Username for the email service
	User string `json:"user,omitempty,omitzero" yaml:"user,omitempty" mapstructure:"user,omitempty"`
}

// EmbeddingConfig Configuration for text embedding generation
type EmbeddingConfig struct {
	// Type The embedding provider to use for vector embeddings
	Type EmbeddingConfigType `json:"type" yaml:"type" mapstructure:"type"`
}

// EmbeddingConfigType The embedding provider to use for vector embeddings
type EmbeddingConfigType string

// FirebaseAuth Firebase authentication configuration
type FirebaseAuth struct {
	// ClientEmail Firebase service account client email address
	ClientEmail string `json:"clientEmail,omitempty,omitzero" yaml:"clientEmail,omitempty" mapstructure:"clientEmail,omitempty"`

	// Enabled Enable Firebase authentication
	Enabled bool `json:"enabled" yaml:"enabled" mapstructure:"enabled"`

	// PrivateKey Firebase service account private key (PEM format)
	PrivateKey string `json:"privateKey,omitempty,omitzero" yaml:"privateKey,omitempty" mapstructure:"privateKey,omitempty"`

	// ProjectID Firebase project ID for authentication
	ProjectID string `json:"projectID,omitempty,omitzero" yaml:"projectID,omitempty" mapstructure:"projectID,omitempty"`
}

// GitHubAuth GitHub OAuth configuration
type GitHubAuth struct {
	// ClientID GitHub OAuth App client ID
	ClientID string `json:"clientId,omitempty,omitzero" yaml:"clientId,omitempty" mapstructure:"clientId,omitempty"`

	// ClientSecret GitHub OAuth App client secret
	ClientSecret string `json:"clientSecret,omitempty,omitzero" yaml:"clientSecret,omitempty" mapstructure:"clientSecret,omitempty"`

	// Enabled Enable GitHub OAuth
	Enabled bool `json:"enabled" yaml:"enabled" mapstructure:"enabled"`

	// RedirectURL OAuth callback URL
	RedirectURL string `json:"redirectUrl,omitempty,omitzero" yaml:"redirectUrl,omitempty" mapstructure:"redirectUrl,omitempty"`

	// Scopes OAuth scopes to request
	Scopes []string `json:"scopes,omitempty,omitzero" yaml:"scopes,omitempty" mapstructure:"scopes,omitempty"`
}

// GoogleAuth Google OAuth configuration
type GoogleAuth struct {
	// ClientID Google OAuth client ID
	ClientID string `json:"clientId,omitempty,omitzero" yaml:"clientId,omitempty" mapstructure:"clientId,omitempty"`

	// ClientSecret Google OAuth client secret
	ClientSecret string `json:"clientSecret,omitempty,omitzero" yaml:"clientSecret,omitempty" mapstructure:"clientSecret,omitempty"`

	// Enabled Enable Google OAuth
	Enabled bool `json:"enabled" yaml:"enabled" mapstructure:"enabled"`

	// RedirectURL OAuth callback URL
	RedirectURL string `json:"redirectUrl,omitempty,omitzero" yaml:"redirectUrl,omitempty" mapstructure:"redirectUrl,omitempty"`

	// Scopes OAuth scopes to request
	Scopes []string `json:"scopes,omitempty,omitzero" yaml:"scopes,omitempty" mapstructure:"scopes,omitempty"`
}

// GrafanaConfig Grafana monitoring dashboard configuration
type GrafanaConfig struct {
	// Enabled Enable Grafana
	Enabled bool `json:"enabled" yaml:"enabled" mapstructure:"enabled"`

	// Image Container image configuration
	Image ImageConfig `json:"image,omitempty,omitzero" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// Managed Use managed Grafana deployment
	Managed bool `json:"managed,omitempty,omitzero" yaml:"managed,omitempty" mapstructure:"managed,omitempty"`

	// Resources Kubernetes resource configuration
	Resources ResourceConfig `json:"resources,omitempty,omitzero" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`
}

// ImageConfig Container image configuration
type ImageConfig struct {
	// PullPolicy Kubernetes image pull policy
	PullPolicy ImageConfigPullPolicy `json:"pullPolicy" yaml:"pullPolicy" mapstructure:"pullPolicy"`

	// Repository Container image repository
	Repository string `json:"repository,omitempty,omitzero" yaml:"repository,omitempty" mapstructure:"repository,omitempty"`

	// Tag Container image tag
	Tag string `json:"tag" yaml:"tag" mapstructure:"tag"`
}

// ImageConfigPullPolicy Kubernetes image pull policy
type ImageConfigPullPolicy string

// ImagesConfig Container image configuration
type ImagesConfig struct {
	// ImagePullSecrets List of Kubernetes secrets for pulling private images
	ImagePullSecrets []string `json:"imagePullSecrets" yaml:"imagePullSecrets" mapstructure:"imagePullSecrets"`

	// ImageRegistry Custom container registry URL (leave empty for Docker Hub)
	ImageRegistry string `json:"imageRegistry" yaml:"imageRegistry" mapstructure:"imageRegistry"`
}

// InfrastructureConfig Infrastructure configuration for Kubernetes deployments
type InfrastructureConfig struct {
	// Images Container image configuration
	Images ImagesConfig `json:"images" yaml:"images" mapstructure:"images"`

	// Migrations Database migration configuration
	Migrations MigrationsConfig `json:"migrations" yaml:"migrations" mapstructure:"migrations"`

	// Namespace Kubernetes namespace where all resources will be deployed
	Namespace string `json:"namespace" yaml:"namespace" mapstructure:"namespace"`

	// ServiceAccount Kubernetes service account configuration
	ServiceAccount ServiceAccountConfig `json:"serviceAccount" yaml:"serviceAccount" mapstructure:"serviceAccount"`
}

// IngressConfig Ingress configuration
type IngressConfig struct {
	// Domain Primary domain name for ingress routing
	Domain string `json:"domain,omitempty,omitzero" yaml:"domain,omitempty" mapstructure:"domain,omitempty"`

	// Enabled Enable ingress
	Enabled bool `json:"enabled" yaml:"enabled" mapstructure:"enabled"`

	// TLS TLS configuration
	TLS TLSConfig `json:"tls,omitempty,omitzero" yaml:"tls,omitempty" mapstructure:"tls,omitempty"`
}

// IntelligenceConfig Intelligence configuration (LLMs, embeddings, scraper, speech, etc.)
type IntelligenceConfig struct {
	// Embedding Configuration for text embedding generation
	Embedding EmbeddingConfig `json:"embedding,omitempty,omitzero" yaml:"embedding,omitempty" mapstructure:"embedding,omitempty"`

	// Llm Large Language Model configuration
	Llm LLMConfig `json:"llm,omitempty,omitzero" yaml:"llm,omitempty" mapstructure:"llm,omitempty"`

	// Runpod RunPod serverless GPU configuration
	Runpod RunPodConfig `json:"runpod,omitempty,omitzero" yaml:"runpod,omitempty" mapstructure:"runpod,omitempty"`

	// Scraper Web scraping service configuration
	Scraper ScraperConfig `json:"scraper,omitempty,omitzero" yaml:"scraper,omitempty" mapstructure:"scraper,omitempty"`

	// Speech Speech recognition and TTS services
	Speech SpeechConfig `json:"speech,omitempty,omitzero" yaml:"speech,omitempty" mapstructure:"speech,omitempty"`

	// Unstructured Unstructured.io service for document parsing
	Unstructured UnstructuredConfig `json:"unstructured,omitempty,omitzero" yaml:"unstructured,omitempty" mapstructure:"unstructured,omitempty"`
}

// LLMConfig Large Language Model configuration
type LLMConfig struct {
	// Endpoint LLM service endpoint URL
	Endpoint string `json:"endpoint,omitempty,omitzero" yaml:"endpoint,omitempty" mapstructure:"endpoint,omitempty"`

	// Token Authentication token for LLM service
	Token string `json:"token,omitempty,omitzero" yaml:"token,omitempty" mapstructure:"token,omitempty"`

	// Type LLM provider type
	Type LLMConfigType `json:"type" yaml:"type" mapstructure:"type"`
}

// LLMConfigType LLM provider type
type LLMConfigType string

// LocalAuth Local username/password authentication
type LocalAuth struct {
	// AccessTokenTTL Access token time-to-live duration (e.g., "15m", "1h")
	AccessTokenTTL string `json:"accessTokenTtl" yaml:"accessTokenTtl" mapstructure:"accessTokenTtl"`

	// Enabled Enable local authentication
	Enabled bool `json:"enabled" yaml:"enabled" mapstructure:"enabled"`

	// JwtSecret Secret key for JWT token signing
	JwtSecret string `json:"jwtSecret" yaml:"jwtSecret" mapstructure:"jwtSecret"`

	// RefreshTokenTTL Refresh token time-to-live duration (e.g., "7d", "168h")
	RefreshTokenTTL string `json:"refreshTokenTtl" yaml:"refreshTokenTtl" mapstructure:"refreshTokenTtl"`
}

// LoggingConfig Logging configuration
type LoggingConfig struct {
	// Level Minimum log level to output
	Level LoggingConfigLevel `json:"level" yaml:"level" mapstructure:"level"`

	// Pretty Enable pretty-printed logs for development
	Pretty bool `json:"pretty" yaml:"pretty" mapstructure:"pretty"`
}

// LoggingConfigLevel Minimum log level to output
type LoggingConfigLevel string

// LokiConfig Loki log aggregation service configuration
type LokiConfig struct {
	// Enabled Enable Loki
	Enabled bool `json:"enabled" yaml:"enabled" mapstructure:"enabled"`

	// Host Loki host URL
	Host string `json:"host,omitempty,omitzero" yaml:"host,omitempty" mapstructure:"host,omitempty"`

	// Image Container image configuration
	Image ImageConfig `json:"image,omitempty,omitzero" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// Managed Use managed Loki deployment
	Managed bool `json:"managed,omitempty,omitzero" yaml:"managed,omitempty" mapstructure:"managed,omitempty"`

	// Resources Kubernetes resource configuration
	Resources ResourceConfig `json:"resources,omitempty,omitzero" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`
}

// MagicLinkAuth Magic link authentication configuration
type MagicLinkAuth struct {
	// DeliveryMethods Available delivery methods
	DeliveryMethods struct {
		Console struct {
			// Enabled Enable console output (development only)
			Enabled bool `json:"enabled,omitempty,omitzero" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
		} `json:"console,omitempty,omitzero" yaml:"console,omitempty" mapstructure:"console,omitempty"`
		Email struct {
			Enabled bool                `json:"enabled,omitempty,omitzero" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
			From    openapi_types.Email `json:"from,omitempty,omitzero" yaml:"from,omitempty" mapstructure:"from,omitempty"`
		} `json:"email,omitempty,omitzero" yaml:"email,omitempty" mapstructure:"email,omitempty"`
		Otp struct {
			Enabled bool `json:"enabled,omitempty,omitzero" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
		} `json:"otp,omitempty,omitzero" yaml:"otp,omitempty" mapstructure:"otp,omitempty"`
		Webhook struct {
			Enabled bool   `json:"enabled,omitempty,omitzero" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
			URL     string `json:"url,omitempty,omitzero" yaml:"url,omitempty" mapstructure:"url,omitempty"`
		} `json:"webhook,omitempty,omitzero" yaml:"webhook,omitempty" mapstructure:"webhook,omitempty"`
	} `json:"deliveryMethods,omitempty,omitzero" yaml:"deliveryMethods,omitempty" mapstructure:"deliveryMethods,omitempty"`

	// Enabled Enable magic link authentication
	Enabled bool `json:"enabled" yaml:"enabled" mapstructure:"enabled"`

	// OtpLength Length of OTP code
	OtpLength int `json:"otpLength,omitempty,omitzero" yaml:"otpLength,omitempty" mapstructure:"otpLength,omitempty"`

	// RateLimit Rate limiting configuration
	RateLimit struct {
		// MaxAttempts Maximum number of attempts within window
		MaxAttempts int `json:"maxAttempts,omitempty,omitzero" yaml:"maxAttempts,omitempty" mapstructure:"maxAttempts,omitempty"`

		// WindowMinutes Time window in minutes
		WindowMinutes int `json:"windowMinutes,omitempty,omitzero" yaml:"windowMinutes,omitempty" mapstructure:"windowMinutes,omitempty"`
	} `json:"rateLimit,omitempty,omitzero" yaml:"rateLimit,omitempty" mapstructure:"rateLimit,omitempty"`

	// TokenExpiry Token expiry duration in minutes
	TokenExpiry int `json:"tokenExpiry,omitempty,omitzero" yaml:"tokenExpiry,omitempty" mapstructure:"tokenExpiry,omitempty"`
}

// MicrosoftAuth Microsoft/Azure AD OAuth configuration
type MicrosoftAuth struct {
	// ClientID Azure AD Application (client) ID
	ClientID string `json:"clientId,omitempty,omitzero" yaml:"clientId,omitempty" mapstructure:"clientId,omitempty"`

	// ClientSecret Azure AD client secret
	ClientSecret string `json:"clientSecret,omitempty,omitzero" yaml:"clientSecret,omitempty" mapstructure:"clientSecret,omitempty"`

	// Enabled Enable Microsoft OAuth
	Enabled bool `json:"enabled" yaml:"enabled" mapstructure:"enabled"`

	// RedirectURL OAuth callback URL
	RedirectURL string `json:"redirectUrl,omitempty,omitzero" yaml:"redirectUrl,omitempty" mapstructure:"redirectUrl,omitempty"`

	// Scopes OAuth scopes to request
	Scopes []string `json:"scopes,omitempty,omitzero" yaml:"scopes,omitempty" mapstructure:"scopes,omitempty"`

	// Tenant Azure AD tenant ID (use 'common' for multi-tenant)
	Tenant string `json:"tenant,omitempty,omitzero" yaml:"tenant,omitempty" mapstructure:"tenant,omitempty"`
}

// MigrationsConfig Database migration configuration
type MigrationsConfig struct {
	// Enabled Enable automatic DB migrations
	Enabled bool `json:"enabled" yaml:"enabled" mapstructure:"enabled"`
}

// MonitoringConfig Monitoring configuration for Grafana and Loki
type MonitoringConfig struct {
	// Grafana Grafana monitoring dashboard configuration
	Grafana GrafanaConfig `json:"grafana" yaml:"grafana" mapstructure:"grafana"`

	// Loki Loki log aggregation service configuration
	Loki LokiConfig `json:"loki" yaml:"loki" mapstructure:"loki"`
}

// PersistenceConfig Persistent storage configuration
type PersistenceConfig struct {
	// Enabled Enable persistent storage
	Enabled bool `json:"enabled" yaml:"enabled" mapstructure:"enabled"`

	// Size Size of persistent volume
	Size string `json:"size" yaml:"size" mapstructure:"size"`
}

// PlatformConfig Platform configuration (host, image, resources)
type PlatformConfig struct {
	// Enabled Enable platform service
	Enabled bool `json:"enabled" yaml:"enabled" mapstructure:"enabled"`

	// Host Host address where the platform service will be accessible
	Host string `json:"host,omitempty,omitzero" yaml:"host,omitempty" mapstructure:"host,omitempty"`

	// Image Container image configuration
	Image ImageConfig `json:"image,omitempty,omitzero" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// Managed Use managed platform deployment
	Managed bool `json:"managed,omitempty,omitzero" yaml:"managed,omitempty" mapstructure:"managed,omitempty"`

	// Resources Kubernetes resource configuration
	Resources ResourceConfig `json:"resources,omitempty,omitzero" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`
}

// Problem RFC 7807 (Problem Details) compliant error response
type Problem struct {
	// Detail Human-readable explanation specific to this occurrence
	Detail string `json:"detail,omitempty,omitzero" yaml:"detail,omitempty" mapstructure:"detail,omitempty"`

	// Instance URI identifying the specific occurrence
	Instance string `json:"instance,omitempty,omitzero" yaml:"instance,omitempty" mapstructure:"instance,omitempty"`

	// Status HTTP status code
	Status int `json:"status" yaml:"status" mapstructure:"status"`

	// Title Short, human-readable summary
	Title string `json:"title" yaml:"title" mapstructure:"title"`

	// Type URI identifying the problem type
	Type string `json:"type,omitempty,omitzero" yaml:"type,omitempty" mapstructure:"type,omitempty"`
}

// RedisConfig Redis configuration
type RedisConfig struct {
	// Auth Redis authentication password
	Auth string `json:"auth" yaml:"auth" mapstructure:"auth"`

	// Ca Certificate Authority for TLS (optional)
	Ca string `json:"ca,omitempty,omitzero" yaml:"ca,omitempty" mapstructure:"ca,omitempty"`

	// Enabled Enable Redis
	Enabled bool `json:"enabled" yaml:"enabled" mapstructure:"enabled"`

	// Host Redis hostname or IP
	Host string `json:"host" yaml:"host" mapstructure:"host"`

	// Image Container image configuration
	Image ImageConfig `json:"image,omitempty,omitzero" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// Managed Use managed Redis deployment
	Managed bool `json:"managed,omitempty,omitzero" yaml:"managed,omitempty" mapstructure:"managed,omitempty"`

	// Persistence Persistent storage configuration
	Persistence PersistenceConfig `json:"persistence,omitempty,omitzero" yaml:"persistence,omitempty" mapstructure:"persistence,omitempty"`

	// Port Redis port number
	Port float32 `json:"port" yaml:"port" mapstructure:"port"`

	// Resources Kubernetes resource configuration
	Resources ResourceConfig `json:"resources,omitempty,omitzero" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`
}

// ResourceConfig Kubernetes resource configuration
type ResourceConfig struct {
	// Limits Resource limits
	Limits ResourceLimits `json:"limits" yaml:"limits" mapstructure:"limits"`

	// Requests Resource requests
	Requests ResourceRequests `json:"requests" yaml:"requests" mapstructure:"requests"`
}

// ResourceLimits Resource limits
type ResourceLimits struct {
	// CPU Maximum CPU allocation
	CPU string `json:"cpu" yaml:"cpu" mapstructure:"cpu"`

	// Memory Maximum memory allocation
	Memory string `json:"memory" yaml:"memory" mapstructure:"memory"`
}

// ResourceRequests Resource requests
type ResourceRequests struct {
	// CPU Requested CPU allocation
	CPU string `json:"cpu" yaml:"cpu" mapstructure:"cpu"`

	// Memory Requested memory allocation
	Memory string `json:"memory" yaml:"memory" mapstructure:"memory"`
}

// RunPodConfig RunPod serverless GPU configuration
type RunPodConfig struct {
	// Enabled Enable RunPod integration
	Enabled bool `json:"enabled" yaml:"enabled" mapstructure:"enabled"`

	// Token RunPod API token
	Token string `json:"token,omitempty,omitzero" yaml:"token,omitempty" mapstructure:"token,omitempty"`
}

// ScraperConfig Web scraping service configuration
type ScraperConfig struct {
	// Enabled Enable scraper service
	Enabled bool `json:"enabled" yaml:"enabled" mapstructure:"enabled"`

	// Endpoint Web scraper service endpoint URL
	Endpoint string `json:"endpoint,omitempty,omitzero" yaml:"endpoint,omitempty" mapstructure:"endpoint,omitempty"`

	// Image Container image configuration
	Image ImageConfig `json:"image,omitempty,omitzero" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// Managed Use managed scraper deployment
	Managed bool `json:"managed,omitempty,omitzero" yaml:"managed,omitempty" mapstructure:"managed,omitempty"`

	// Resources Kubernetes resource configuration
	Resources ResourceConfig `json:"resources,omitempty,omitzero" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`
}

// ServiceAccountConfig Kubernetes service account configuration
type ServiceAccountConfig struct {
	// Create Create dedicated service account
	Create bool `json:"create" yaml:"create" mapstructure:"create"`

	// Name Custom service account name
	Name string `json:"name" yaml:"name" mapstructure:"name"`
}

// SpeechConfig Speech recognition and TTS services
type SpeechConfig struct {
	// Enabled Enable speech services
	Enabled bool `json:"enabled" yaml:"enabled" mapstructure:"enabled"`

	// Token Speech-to-text service API token
	Token string `json:"token,omitempty,omitzero" yaml:"token,omitempty" mapstructure:"token,omitempty"`
}

// StorageConfig Object storage configuration for MinIO or S3-compatible services
type StorageConfig struct {
	// Accesskey MinIO/S3 access key ID
	Accesskey string `json:"accesskey" yaml:"accesskey" mapstructure:"accesskey"`

	// Bucket S3 bucket name
	Bucket string `json:"bucket" yaml:"bucket" mapstructure:"bucket"`

	// Enabled Enable object storage
	Enabled bool `json:"enabled" yaml:"enabled" mapstructure:"enabled"`

	// Endpoint MinIO server endpoint URL
	Endpoint string `json:"endpoint" yaml:"endpoint" mapstructure:"endpoint"`

	// Image Container image configuration
	Image ImageConfig `json:"image,omitempty,omitzero" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// Managed Use managed storage deployment
	Managed bool `json:"managed,omitempty,omitzero" yaml:"managed,omitempty" mapstructure:"managed,omitempty"`

	// Persistence Persistent storage configuration
	Persistence PersistenceConfig `json:"persistence,omitempty,omitzero" yaml:"persistence,omitempty" mapstructure:"persistence,omitempty"`

	// Resources Kubernetes resource configuration
	Resources ResourceConfig `json:"resources,omitempty,omitzero" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`

	// Secretkey MinIO/S3 secret access key
	Secretkey string `json:"secretkey" yaml:"secretkey" mapstructure:"secretkey"`
}

// StripeConfig Stripe payment configuration
type StripeConfig struct {
	// Token Stripe secret API key
	Token string `json:"token" yaml:"token" mapstructure:"token"`

	// Whsec Stripe webhook endpoint secret
	Whsec string `json:"whsec" yaml:"whsec" mapstructure:"whsec"`
}

// TLSConfig TLS configuration
type TLSConfig struct {
	// Enabled Enable TLS/SSL
	Enabled bool `json:"enabled" yaml:"enabled" mapstructure:"enabled"`

	// Issuer Cert-manager ClusterIssuer
	Issuer string `json:"issuer,omitempty,omitzero" yaml:"issuer,omitempty" mapstructure:"issuer,omitempty"`

	// SecretName Kubernetes secret name for TLS certificates
	SecretName string `json:"secretName,omitempty,omitzero" yaml:"secretName,omitempty" mapstructure:"secretName,omitempty"`
}

// TwitterAuth Twitter OAuth configuration
type TwitterAuth struct {
	// CallbackURL OAuth callback URL
	CallbackURL string `json:"callbackURL,omitempty,omitzero" yaml:"callbackURL,omitempty" mapstructure:"callbackURL,omitempty"`

	// ConsumerKey Twitter API consumer key
	ConsumerKey string `json:"consumerKey,omitempty,omitzero" yaml:"consumerKey,omitempty" mapstructure:"consumerKey,omitempty"`

	// ConsumerSecret Twitter API consumer secret
	ConsumerSecret string `json:"consumerSecret,omitempty,omitzero" yaml:"consumerSecret,omitempty" mapstructure:"consumerSecret,omitempty"`

	// Enabled Enable Twitter OAuth
	Enabled bool `json:"enabled" yaml:"enabled" mapstructure:"enabled"`
}

// UnstructuredConfig Unstructured.io service for document parsing
type UnstructuredConfig struct {
	// Enabled Enable unstructured document parsing
	Enabled bool `json:"enabled" yaml:"enabled" mapstructure:"enabled"`

	// Image Container image configuration
	Image ImageConfig `json:"image,omitempty,omitzero" yaml:"image,omitempty" mapstructure:"image,omitempty"`

	// Managed Use managed unstructured deployment
	Managed bool `json:"managed,omitempty,omitzero" yaml:"managed,omitempty" mapstructure:"managed,omitempty"`

	// Resources Kubernetes resource configuration
	Resources ResourceConfig `json:"resources,omitempty,omitzero" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`
}

// BadRequest RFC 7807 (Problem Details) compliant error response
type BadRequest = Problem
