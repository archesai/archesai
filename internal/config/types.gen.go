// Code generated by archesai codegen. DO NOT EDIT.
package config

// Defines values for ConfigDatabaseType.
const (
	Postgresql ConfigDatabaseType = "postgresql"
	SQLite     ConfigDatabaseType = "sqlite"
)

// Defines values for ConfigImagePullPolicy.
const (
	Always       ConfigImagePullPolicy = "Always"
	IfNotPresent ConfigImagePullPolicy = "IfNotPresent"
	Never        ConfigImagePullPolicy = "Never"
)

// Defines values for ConfigLLMType.
const (
	Ollama ConfigLLMType = "ollama"
	Openai ConfigLLMType = "openai"
)

// Defines values for ConfigLoggingLevel.
const (
	Fatal  ConfigLoggingLevel = "fatal"
	Error  ConfigLoggingLevel = "error"
	Warn   ConfigLoggingLevel = "warn"
	Info   ConfigLoggingLevel = "info"
	Debug  ConfigLoggingLevel = "debug"
	Trace  ConfigLoggingLevel = "trace"
	Silent ConfigLoggingLevel = "silent"
)

// ConfigDatabaseType represents the type for ConfigDatabaseType enum values.
type ConfigDatabaseType string

// ConfigImagePullPolicy represents the type for ConfigImagePullPolicy enum values.
type ConfigImagePullPolicy string

// ConfigLLMType represents the type for ConfigLLMType enum values.
type ConfigLLMType string

// ConfigLoggingLevel represents the type for ConfigLoggingLevel enum values.
type ConfigLoggingLevel string

// Config Arches AI configuration schema
type Config struct {
	API          *ConfigAPI          `json:"api,omitempty" yaml:"api,omitempty" mapstructure:"api,omitempty"`
	Auth         *ConfigAuth         `json:"auth,omitempty" yaml:"auth,omitempty" mapstructure:"auth,omitempty"`
	Billing      *ConfigBilling      `json:"billing,omitempty" yaml:"billing,omitempty" mapstructure:"billing,omitempty"`
	Database     *ConfigDatabase     `json:"database,omitempty" yaml:"database,omitempty" mapstructure:"database,omitempty"`
	Intelligence *ConfigIntelligence `json:"intelligence,omitempty" yaml:"intelligence,omitempty" mapstructure:"intelligence,omitempty"`
	Kubernetes   *ConfigKubernetes   `json:"kubernetes,omitempty" yaml:"kubernetes,omitempty" mapstructure:"kubernetes,omitempty"`
	Logging      *ConfigLogging      `json:"logging,omitempty" yaml:"logging,omitempty" mapstructure:"logging,omitempty"`
	Platform     *ConfigPlatform     `json:"platform,omitempty" yaml:"platform,omitempty" mapstructure:"platform,omitempty"`
	Redis        *ConfigRedis        `json:"redis,omitempty" yaml:"redis,omitempty" mapstructure:"redis,omitempty"`
	Storage      *ConfigStorage      `json:"storage,omitempty" yaml:"storage,omitempty" mapstructure:"storage,omitempty"`
}

// ConfigAPI Configuration schema for the API server
type ConfigAPI struct {
	// Cors A comma-separated list of allowed origins for CORS requests
	Cors string `json:"cors" yaml:"cors" default:"localhost"`
	// Docs Enable or disable API documentation
	Docs  bool         `json:"docs" yaml:"docs" default:"true"`
	Email *ConfigEmail `json:"email,omitempty" yaml:"email,omitempty" mapstructure:"email,omitempty"`
	// Environment Deployment environment (development, staging, production)
	Environment string `json:"environment" yaml:"environment" default:"development"`
	// Host The host address on which the API server will listen
	Host  string       `json:"host" yaml:"host" default:"0.0.0.0"`
	Image *ConfigImage `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`
	// Port The port on which the API server will listen
	Port      float64         `json:"port" yaml:"port" default:"3001"`
	Resources *ConfigResource `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`
	// Validate Enable or disable request validation
	Validate bool `json:"validate" yaml:"validate" default:"true"`
}

// ConfigAuth Authentication configuration for the API server
type ConfigAuth struct {
	// Enabled Enable authentication
	Enabled   bool                 `json:"enabled" yaml:"enabled" default:"true"`
	Firebase  *ConfigAuthFirebase  `json:"firebase,omitempty" yaml:"firebase,omitempty" mapstructure:"firebase,omitempty"`
	Github    *ConfigAuthGithub    `json:"github,omitempty" yaml:"github,omitempty" mapstructure:"github,omitempty"`
	Google    *ConfigAuthGoogle    `json:"google,omitempty" yaml:"google,omitempty" mapstructure:"google,omitempty"`
	Local     *ConfigAuthLocal     `json:"local,omitempty" yaml:"local,omitempty" mapstructure:"local,omitempty"`
	MagicLink *ConfigAuthMagicLink `json:"magicLink,omitempty" yaml:"magicLink,omitempty" mapstructure:"magicLink,omitempty"`
	Microsoft *ConfigAuthMicrosoft `json:"microsoft,omitempty" yaml:"microsoft,omitempty" mapstructure:"microsoft,omitempty"`
	Twitter   *ConfigAuthTwitter   `json:"twitter,omitempty" yaml:"twitter,omitempty" mapstructure:"twitter,omitempty"`
}

// ConfigAuthFirebase Firebase authentication configuration
type ConfigAuthFirebase struct {
	// ClientEmail Firebase service account client email address
	ClientEmail *string `json:"clientEmail,omitempty" yaml:"clientEmail,omitempty" mapstructure:"clientEmail,omitempty"`
	// Enabled Enable Firebase authentication
	Enabled bool `json:"enabled" yaml:"enabled" default:"false"`
	// PrivateKey Firebase service account private key (PEM format)
	PrivateKey *string `json:"privateKey,omitempty" yaml:"privateKey,omitempty" mapstructure:"privateKey,omitempty"`
	// ProjectID Firebase project ID for authentication
	ProjectID *string `json:"projectID,omitempty" yaml:"projectID,omitempty" mapstructure:"projectID,omitempty"`
}

// ConfigAuthGithub GitHub OAuth configuration
type ConfigAuthGithub struct {
	// ClientID GitHub OAuth App client ID
	ClientID *string `json:"clientId,omitempty" yaml:"clientId,omitempty" mapstructure:"clientId,omitempty"`
	// ClientSecret GitHub OAuth App client secret
	ClientSecret *string `json:"clientSecret,omitempty" yaml:"clientSecret,omitempty" mapstructure:"clientSecret,omitempty"`
	// Enabled Enable GitHub OAuth
	Enabled bool `json:"enabled" yaml:"enabled" default:"false"`
	// RedirectURL OAuth callback URL
	RedirectURL *string `json:"redirectUrl,omitempty" yaml:"redirectUrl,omitempty" mapstructure:"redirectUrl,omitempty"`
	// Scopes OAuth scopes to request
	Scopes []string `json:"scopes,omitempty" yaml:"scopes,omitempty" default:"[user:email]"`
}

// ConfigAuthGoogle Google OAuth configuration
type ConfigAuthGoogle struct {
	// ClientID Google OAuth client ID
	ClientID *string `json:"clientId,omitempty" yaml:"clientId,omitempty" mapstructure:"clientId,omitempty"`
	// ClientSecret Google OAuth client secret
	ClientSecret *string `json:"clientSecret,omitempty" yaml:"clientSecret,omitempty" mapstructure:"clientSecret,omitempty"`
	// Enabled Enable Google OAuth
	Enabled bool `json:"enabled" yaml:"enabled" default:"false"`
	// RedirectURL OAuth callback URL
	RedirectURL *string `json:"redirectUrl,omitempty" yaml:"redirectUrl,omitempty" mapstructure:"redirectUrl,omitempty"`
	// Scopes OAuth scopes to request
	Scopes []string `json:"scopes,omitempty" yaml:"scopes,omitempty" default:"[openid profile email]"`
}

// ConfigAuthLocal Local username/password authentication
type ConfigAuthLocal struct {
	// AccessTokenTtl Access token time-to-live duration (e.g., "15m", "1h")
	AccessTokenTtl string `json:"accessTokenTtl" yaml:"accessTokenTtl" default:"15m"`
	// Enabled Enable local authentication
	Enabled bool `json:"enabled" yaml:"enabled" default:"true"`
	// JWTSecret Secret key for JWT token signing
	JWTSecret string `json:"jwtSecret" yaml:"jwtSecret" default:"change-me-in-production"`
	// RefreshTokenTtl Refresh token time-to-live duration (e.g., "7d", "168h")
	RefreshTokenTtl string `json:"refreshTokenTtl" yaml:"refreshTokenTtl" default:"168h"`
}

// ConfigAuthMagicLink Magic link authentication configuration
type ConfigAuthMagicLink struct {
	// DeliveryMethods Available delivery methods
	DeliveryMethods *struct {
		Console *struct {
			Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty"` // Enable console output (development only)
		} `json:"console,omitempty" yaml:"console,omitempty" mapstructure:"console,omitempty"`
		Email *struct {
			Enabled *bool   `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
			From    *string `json:"from,omitempty" yaml:"from,omitempty" mapstructure:"from,omitempty"`
		} `json:"email,omitempty" yaml:"email,omitempty" mapstructure:"email,omitempty"`
		Otp *struct {
			Enabled *bool `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
		} `json:"otp,omitempty" yaml:"otp,omitempty" mapstructure:"otp,omitempty"`
		Webhook *struct {
			Enabled *bool   `json:"enabled,omitempty" yaml:"enabled,omitempty" mapstructure:"enabled,omitempty"`
			URL     *string `json:"url,omitempty" yaml:"url,omitempty" mapstructure:"url,omitempty"`
		} `json:"webhook,omitempty" yaml:"webhook,omitempty" mapstructure:"webhook,omitempty"`
	} `json:"deliveryMethods,omitempty" yaml:"deliveryMethods,omitempty" mapstructure:"deliveryMethods,omitempty"`
	// Enabled Enable magic link authentication
	Enabled bool `json:"enabled" yaml:"enabled" default:"false"`
	// OtpLength Length of OTP code
	OtpLength *int `json:"otpLength,omitempty" yaml:"otpLength,omitempty" default:"6"`
	// RateLimit Rate limiting configuration
	RateLimit *struct {
		MaxAttempts   *int `json:"maxAttempts,omitempty" yaml:"maxAttempts,omitempty"`     // Maximum number of attempts within window
		WindowMinutes *int `json:"windowMinutes,omitempty" yaml:"windowMinutes,omitempty"` // Time window in minutes
	} `json:"rateLimit,omitempty" yaml:"rateLimit,omitempty" mapstructure:"rateLimit,omitempty"`
	// TokenExpiry Token expiry duration in minutes
	TokenExpiry *int `json:"tokenExpiry,omitempty" yaml:"tokenExpiry,omitempty" default:"15"`
}

// ConfigAuthMicrosoft Microsoft/Azure AD OAuth configuration
type ConfigAuthMicrosoft struct {
	// ClientID Azure AD Application (client) ID
	ClientID *string `json:"clientId,omitempty" yaml:"clientId,omitempty" mapstructure:"clientId,omitempty"`
	// ClientSecret Azure AD client secret
	ClientSecret *string `json:"clientSecret,omitempty" yaml:"clientSecret,omitempty" mapstructure:"clientSecret,omitempty"`
	// Enabled Enable Microsoft OAuth
	Enabled bool `json:"enabled" yaml:"enabled" default:"false"`
	// RedirectURL OAuth callback URL
	RedirectURL *string `json:"redirectUrl,omitempty" yaml:"redirectUrl,omitempty" mapstructure:"redirectUrl,omitempty"`
	// Scopes OAuth scopes to request
	Scopes []string `json:"scopes,omitempty" yaml:"scopes,omitempty" default:"[openid profile email User.Read]"`
	// Tenant Azure AD tenant ID (use 'common' for multi-tenant)
	Tenant *string `json:"tenant,omitempty" yaml:"tenant,omitempty" default:"common"`
}

// ConfigAuthTwitter Twitter OAuth configuration
type ConfigAuthTwitter struct {
	// CallbackURL OAuth callback URL
	CallbackURL *string `json:"callbackURL,omitempty" yaml:"callbackURL,omitempty" mapstructure:"callbackURL,omitempty"`
	// ConsumerKey Twitter API consumer key
	ConsumerKey *string `json:"consumerKey,omitempty" yaml:"consumerKey,omitempty" mapstructure:"consumerKey,omitempty"`
	// ConsumerSecret Twitter API consumer secret
	ConsumerSecret *string `json:"consumerSecret,omitempty" yaml:"consumerSecret,omitempty" mapstructure:"consumerSecret,omitempty"`
	// Enabled Enable Twitter OAuth
	Enabled bool `json:"enabled" yaml:"enabled" default:"false"`
}

// ConfigBilling Billing configuration for Stripe
type ConfigBilling struct {
	// Enabled Enable billing functionality
	Enabled bool          `json:"enabled" yaml:"enabled" default:"false"`
	Stripe  *ConfigStripe `json:"stripe,omitempty" yaml:"stripe,omitempty" mapstructure:"stripe,omitempty"`
}

// ConfigDatabase Database configuration for PostgreSQL
type ConfigDatabase struct {
	// ConnMaxIdleTime Maximum connection idle time (e.g., "5m")
	ConnMaxIdleTime *string `json:"connMaxIdleTime,omitempty" yaml:"connMaxIdleTime,omitempty" mapstructure:"connMaxIdleTime,omitempty"`
	// ConnMaxLifetime Maximum connection lifetime (e.g., "30m")
	ConnMaxLifetime *string `json:"connMaxLifetime,omitempty" yaml:"connMaxLifetime,omitempty" mapstructure:"connMaxLifetime,omitempty"`
	// Enabled Enable database
	Enabled bool `json:"enabled" yaml:"enabled" default:"true"`
	// HealthCheckPeriod Health check period for connections (PostgreSQL)
	HealthCheckPeriod *string      `json:"healthCheckPeriod,omitempty" yaml:"healthCheckPeriod,omitempty" mapstructure:"healthCheckPeriod,omitempty"`
	Image             *ConfigImage `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`
	// Managed Use managed database deployment
	Managed bool `json:"managed" yaml:"managed" default:"false"`
	// MaxConns Maximum number of connections in pool (PostgreSQL)
	MaxConns int32 `json:"maxConns" yaml:"maxConns" default:"25"`
	// MinConns Minimum number of connections in pool (PostgreSQL)
	MinConns    int32              `json:"minConns" yaml:"minConns" default:"5"`
	Persistence *ConfigPersistence `json:"persistence,omitempty" yaml:"persistence,omitempty" mapstructure:"persistence,omitempty"`
	Resources   *ConfigResource    `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`
	// RunMigrations Automatically run database migrations on startup
	RunMigrations bool `json:"runMigrations" yaml:"runMigrations" default:"false"`
	// Type Database type (postgresql or sqlite)
	Type ConfigDatabaseType `json:"type" yaml:"type" default:"postgresql"`
	// URL Database connection url/string
	URL string `json:"url" yaml:"url" default:"postgresql://admin:password@127.0.0.1:5432/archesai"`
}

// ConfigEmail Email configuration for sending emails
type ConfigEmail struct {
	// Enabled Enable email functionality
	Enabled bool `json:"enabled" yaml:"enabled" default:"false"`
	// Password Password for the email service
	Password *string `json:"password,omitempty" yaml:"password,omitempty" mapstructure:"password,omitempty"`
	// Service Email service provider (e.g., "gmail", "sendgrid", etc.)
	Service *string `json:"service,omitempty" yaml:"service,omitempty" mapstructure:"service,omitempty"`
	// User Username for the email service
	User *string `json:"user,omitempty" yaml:"user,omitempty" mapstructure:"user,omitempty"`
}

// ConfigGrafana Grafana monitoring dashboard configuration
type ConfigGrafana struct {
	// Enabled Enable Grafana
	Enabled bool         `json:"enabled" yaml:"enabled" default:"false"`
	Image   *ConfigImage `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`
	// Managed Use managed Grafana deployment
	Managed   *bool           `json:"managed,omitempty" yaml:"managed,omitempty" default:"false"`
	Resources *ConfigResource `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`
}

// ConfigImage Container image configuration
type ConfigImage struct {
	// PullPolicy Kubernetes image pull policy
	PullPolicy ConfigImagePullPolicy `json:"pullPolicy" yaml:"pullPolicy" default:"IfNotPresent"`
	// Repository Container image repository
	Repository *string `json:"repository,omitempty" yaml:"repository,omitempty" mapstructure:"repository,omitempty"`
	// Tag Container image tag
	Tag string `json:"tag" yaml:"tag" default:"latest"`
}

// ConfigImages Container image configuration
type ConfigImages struct {
	// ImagePullSecrets List of Kubernetes secrets for pulling private images
	ImagePullSecrets []string `json:"imagePullSecrets" yaml:"imagePullSecrets" default:"[]"`
	// ImageRegistry Custom container registry URL (leave empty for Docker Hub)
	ImageRegistry string `json:"imageRegistry" yaml:"imageRegistry" mapstructure:"imageRegistry"`
}

// ConfigInfrastructure Infrastructure configuration for Kubernetes deployments
type ConfigInfrastructure struct {
	Images     ConfigImages     `json:"images" yaml:"images" mapstructure:"images"`
	Migrations ConfigMigrations `json:"migrations" yaml:"migrations" mapstructure:"migrations"`
	// Namespace Kubernetes namespace where all resources will be deployed
	Namespace      string               `json:"namespace" yaml:"namespace" default:"arches-system"`
	ServiceAccount ConfigServiceAccount `json:"serviceAccount" yaml:"serviceAccount" mapstructure:"serviceAccount"`
}

// ConfigIngress Ingress configuration
type ConfigIngress struct {
	// Domain Primary domain name for ingress routing
	Domain *string `json:"domain,omitempty" yaml:"domain,omitempty" default:"archesai.dev"`
	// Enabled Enable ingress
	Enabled bool       `json:"enabled" yaml:"enabled" default:"false"`
	Tls     *ConfigTLS `json:"tls,omitempty" yaml:"tls,omitempty" mapstructure:"tls,omitempty"`
}

// ConfigIntelligence Intelligence configuration (LLMs, embeddings, scraper, speech, etc.)
type ConfigIntelligence struct {
	Embedding    *ConfigLLM          `json:"embedding,omitempty" yaml:"embedding,omitempty" mapstructure:"embedding,omitempty"`
	Llm          *ConfigLLM          `json:"llm,omitempty" yaml:"llm,omitempty" mapstructure:"llm,omitempty"`
	Runpod       *ConfigRunPod       `json:"runpod,omitempty" yaml:"runpod,omitempty" mapstructure:"runpod,omitempty"`
	Scraper      *ConfigScraper      `json:"scraper,omitempty" yaml:"scraper,omitempty" mapstructure:"scraper,omitempty"`
	Speech       *ConfigSpeech       `json:"speech,omitempty" yaml:"speech,omitempty" mapstructure:"speech,omitempty"`
	Unstructured *ConfigUnstructured `json:"unstructured,omitempty" yaml:"unstructured,omitempty" mapstructure:"unstructured,omitempty"`
}

// ConfigKubernetes Kubernetes-specific deployment configuration
type ConfigKubernetes struct {
	Infrastructure *ConfigInfrastructure `json:"infrastructure,omitempty" yaml:"infrastructure,omitempty" mapstructure:"infrastructure,omitempty"`
	Ingress        *ConfigIngress        `json:"ingress,omitempty" yaml:"ingress,omitempty" mapstructure:"ingress,omitempty"`
	Monitoring     *ConfigMonitoring     `json:"monitoring,omitempty" yaml:"monitoring,omitempty" mapstructure:"monitoring,omitempty"`
}

// ConfigLLM Large Language Model configuration
type ConfigLLM struct {
	// Endpoint LLM service endpoint URL
	Endpoint *string `json:"endpoint,omitempty" yaml:"endpoint,omitempty" mapstructure:"endpoint,omitempty"`
	// Token Authentication token for LLM service
	Token *string `json:"token,omitempty" yaml:"token,omitempty" mapstructure:"token,omitempty"`
	// Type LLM provider type
	Type ConfigLLMType `json:"type" yaml:"type" default:"ollama"`
}

// ConfigLogging Logging configuration
type ConfigLogging struct {
	// Level Minimum log level to output
	Level ConfigLoggingLevel `json:"level" yaml:"level" default:"info"`
	// Pretty Enable pretty-printed logs for development
	Pretty bool `json:"pretty" yaml:"pretty" default:"false"`
}

// ConfigLoki Loki log aggregation service configuration
type ConfigLoki struct {
	// Enabled Enable Loki
	Enabled bool `json:"enabled" yaml:"enabled" default:"false"`
	// Host Loki host URL
	Host  *string      `json:"host,omitempty" yaml:"host,omitempty" default:"http://localhost:3100"`
	Image *ConfigImage `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`
	// Managed Use managed Loki deployment
	Managed   *bool           `json:"managed,omitempty" yaml:"managed,omitempty" default:"false"`
	Resources *ConfigResource `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`
}

// ConfigMigrations Database migration configuration
type ConfigMigrations struct {
	// Enabled Enable automatic DB migrations
	Enabled bool `json:"enabled" yaml:"enabled" default:"false"`
}

// ConfigMonitoring Monitoring configuration for Grafana and Loki
type ConfigMonitoring struct {
	Grafana ConfigGrafana `json:"grafana" yaml:"grafana" mapstructure:"grafana"`
	Loki    ConfigLoki    `json:"loki" yaml:"loki" mapstructure:"loki"`
}

// ConfigPersistence Persistent storage configuration
type ConfigPersistence struct {
	// Enabled Enable persistent storage
	Enabled bool `json:"enabled" yaml:"enabled" default:"true"`
	// Size Size of persistent volume
	Size string `json:"size" yaml:"size" default:"10Gi"`
}

// ConfigPlatform Platform configuration (host, image, resources)
type ConfigPlatform struct {
	// Enabled Enable platform service
	Enabled bool `json:"enabled" yaml:"enabled" default:"false"`
	// Host Host address where the platform service will be accessible
	Host  *string      `json:"host,omitempty" yaml:"host,omitempty" default:"localhost"`
	Image *ConfigImage `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`
	// Managed Use managed platform deployment
	Managed   *bool           `json:"managed,omitempty" yaml:"managed,omitempty" default:"false"`
	Resources *ConfigResource `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`
}

// ConfigRedis Redis configuration
type ConfigRedis struct {
	// Auth Redis authentication password
	Auth string `json:"auth" yaml:"auth" default:"password"`
	// Ca Certificate Authority for TLS (optional)
	Ca *string `json:"ca,omitempty" yaml:"ca,omitempty" mapstructure:"ca,omitempty"`
	// Enabled Enable Redis
	Enabled bool `json:"enabled" yaml:"enabled" default:"false"`
	// Host Redis hostname or IP
	Host  string       `json:"host" yaml:"host" default:"localhost"`
	Image *ConfigImage `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`
	// Managed Use managed Redis deployment
	Managed     *bool              `json:"managed,omitempty" yaml:"managed,omitempty" default:"false"`
	Persistence *ConfigPersistence `json:"persistence,omitempty" yaml:"persistence,omitempty" mapstructure:"persistence,omitempty"`
	// Port Redis port number
	Port      float64         `json:"port" yaml:"port" default:"6379"`
	Resources *ConfigResource `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`
}

// ConfigResource Kubernetes resource configuration
type ConfigResource struct {
	// Limits Resource limits
	Limits struct {
		Cpu    string `json:"cpu" yaml:"cpu"`       // Maximum CPU allocation
		Memory string `json:"memory" yaml:"memory"` // Maximum memory allocation
	} `json:"limits" yaml:"limits" mapstructure:"limits"`
	// Requests Resource requests
	Requests struct {
		Cpu    string `json:"cpu" yaml:"cpu"`       // Requested CPU allocation
		Memory string `json:"memory" yaml:"memory"` // Requested memory allocation
	} `json:"requests" yaml:"requests" mapstructure:"requests"`
}

// ConfigRunPod RunPod serverless GPU configuration
type ConfigRunPod struct {
	// Enabled Enable RunPod integration
	Enabled bool `json:"enabled" yaml:"enabled" default:"false"`
	// Token RunPod API token
	Token *string `json:"token,omitempty" yaml:"token,omitempty" mapstructure:"token,omitempty"`
}

// ConfigScraper Web scraping service configuration
type ConfigScraper struct {
	// Enabled Enable scraper service
	Enabled bool `json:"enabled" yaml:"enabled" default:"false"`
	// Endpoint Web scraper service endpoint URL
	Endpoint *string      `json:"endpoint,omitempty" yaml:"endpoint,omitempty" mapstructure:"endpoint,omitempty"`
	Image    *ConfigImage `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`
	// Managed Use managed scraper deployment
	Managed   *bool           `json:"managed,omitempty" yaml:"managed,omitempty" default:"false"`
	Resources *ConfigResource `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`
}

// ConfigServiceAccount Kubernetes service account configuration
type ConfigServiceAccount struct {
	// Create Create dedicated service account
	Create bool `json:"create" yaml:"create" default:"true"`
	// Name Custom service account name
	Name string `json:"name" yaml:"name" mapstructure:"name"`
}

// ConfigSpeech Speech recognition and TTS services
type ConfigSpeech struct {
	// Enabled Enable speech services
	Enabled bool `json:"enabled" yaml:"enabled" default:"false"`
	// Token Speech-to-text service API token
	Token *string `json:"token,omitempty" yaml:"token,omitempty" mapstructure:"token,omitempty"`
}

// ConfigStorage Object storage configuration for MinIO or S3-compatible services
type ConfigStorage struct {
	// Accesskey MinIO/S3 access key ID
	Accesskey string `json:"accesskey" yaml:"accesskey" default:"minioadmin"`
	// Bucket S3 bucket name
	Bucket string `json:"bucket" yaml:"bucket" default:"archesai"`
	// Enabled Enable object storage
	Enabled bool `json:"enabled" yaml:"enabled" default:"false"`
	// Endpoint MinIO server endpoint URL
	Endpoint string       `json:"endpoint" yaml:"endpoint" default:"http://localhost:9000"`
	Image    *ConfigImage `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`
	// Managed Use managed storage deployment
	Managed     *bool              `json:"managed,omitempty" yaml:"managed,omitempty" default:"false"`
	Persistence *ConfigPersistence `json:"persistence,omitempty" yaml:"persistence,omitempty" mapstructure:"persistence,omitempty"`
	Resources   *ConfigResource    `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`
	// Secretkey MinIO/S3 secret access key
	Secretkey string `json:"secretkey" yaml:"secretkey" default:"minioadmin"`
}

// ConfigStripe Stripe payment configuration
type ConfigStripe struct {
	// Token Stripe secret API key
	Token string `json:"token" yaml:"token" mapstructure:"token"`
	// Whsec Stripe webhook endpoint secret
	Whsec string `json:"whsec" yaml:"whsec" mapstructure:"whsec"`
}

// ConfigTLS TLS configuration
type ConfigTLS struct {
	// Enabled Enable TLS/SSL
	Enabled bool `json:"enabled" yaml:"enabled" default:"true"`
	// Issuer Cert-manager ClusterIssuer
	Issuer *string `json:"issuer,omitempty" yaml:"issuer,omitempty" default:"letsencrypt-staging"`
	// SecretName Kubernetes secret name for TLS certificates
	SecretName *string `json:"secretName,omitempty" yaml:"secretName,omitempty" default:"archesai-tls"`
}

// ConfigUnstructured Unstructured.io service for document parsing
type ConfigUnstructured struct {
	// Enabled Enable unstructured document parsing
	Enabled bool         `json:"enabled" yaml:"enabled" default:"false"`
	Image   *ConfigImage `json:"image,omitempty" yaml:"image,omitempty" mapstructure:"image,omitempty"`
	// Managed Use managed unstructured deployment
	Managed   *bool           `json:"managed,omitempty" yaml:"managed,omitempty" default:"false"`
	Resources *ConfigResource `json:"resources,omitempty" yaml:"resources,omitempty" mapstructure:"resources,omitempty"`
}
