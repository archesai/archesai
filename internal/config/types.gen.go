// Package config provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package config

import (
	"encoding/json"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes    = "bearerAuth.Scopes"
	SessionCookieScopes = "sessionCookie.Scopes"
)

// Defines values for APIConfigEnvironment.
const (
	Development APIConfigEnvironment = "development"
	Production  APIConfigEnvironment = "production"
	Staging     APIConfigEnvironment = "staging"
)

// Defines values for DatabaseConfigType.
const (
	Postgresql DatabaseConfigType = "postgresql"
	Sqlite     DatabaseConfigType = "sqlite"
)

// Defines values for EmbeddingConfigType.
const (
	EmbeddingConfigTypeOllama EmbeddingConfigType = "ollama"
	EmbeddingConfigTypeOpenai EmbeddingConfigType = "openai"
)

// Defines values for ImageConfigPullPolicy.
const (
	Always       ImageConfigPullPolicy = "Always"
	IfNotPresent ImageConfigPullPolicy = "IfNotPresent"
	Never        ImageConfigPullPolicy = "Never"
)

// Defines values for LLMConfigType.
const (
	LLMConfigTypeOllama LLMConfigType = "ollama"
	LLMConfigTypeOpenai LLMConfigType = "openai"
)

// Defines values for LoggingConfigLevel.
const (
	Debug  LoggingConfigLevel = "debug"
	Error  LoggingConfigLevel = "error"
	Fatal  LoggingConfigLevel = "fatal"
	Info   LoggingConfigLevel = "info"
	Silent LoggingConfigLevel = "silent"
	Trace  LoggingConfigLevel = "trace"
	Warn   LoggingConfigLevel = "warn"
)

// APIConfig Configuration schema for the API server
type APIConfig struct {
	// Cors CORS configuration for the API server
	Cors CORSConfig `json:"cors" yaml:"cors"`

	// Docs Enable or disable API documentation
	Docs bool `json:"docs" yaml:"docs"`

	// Email Email configuration for sending emails
	Email EmailConfig `json:"email" yaml:"email"`

	// Environment Deployment environment (development, staging, production)
	Environment APIConfigEnvironment `json:"environment,omitempty,omitzero" yaml:"environment,omitempty"`

	// Host The host address on which the API server will listen
	Host string `json:"host" yaml:"host"`

	// Image Container image configuration
	Image ImageConfig `json:"image" yaml:"image"`

	// Port The port on which the API server will listen
	Port float32 `json:"port" yaml:"port"`

	// Resources Kubernetes resource configuration
	Resources ResourceConfig `json:"resources" yaml:"resources"`

	// Validate Enable or disable request validation
	Validate bool `json:"validate" yaml:"validate"`
}

// APIConfigEnvironment Deployment environment (development, staging, production)
type APIConfigEnvironment string

// ArchesConfig Arches AI configuration schema
type ArchesConfig struct {
	// API Configuration schema for the API server
	API APIConfig `json:"api" yaml:"api"`

	// Auth Authentication configuration for the API server
	Auth AuthConfig `json:"auth" yaml:"auth"`

	// Billing Billing configuration for Stripe
	Billing BillingConfig `json:"billing" yaml:"billing"`

	// Database Database configuration for PostgreSQL
	Database DatabaseConfig `json:"database" yaml:"database"`

	// Infrastructure Infrastructure configuration for Kubernetes deployments
	Infrastructure InfrastructureConfig `json:"infrastructure" yaml:"infrastructure"`

	// Ingress Ingress configuration
	Ingress IngressConfig `json:"ingress" yaml:"ingress"`

	// Intelligence Intelligence configuration (LLMs, embeddings, scraper, speech, etc.)
	Intelligence IntelligenceConfig `json:"intelligence" yaml:"intelligence"`

	// Logging Logging configuration
	Logging LoggingConfig `json:"logging" yaml:"logging"`

	// Monitoring Monitoring configuration for Grafana and Loki
	Monitoring MonitoringConfig `json:"monitoring" yaml:"monitoring"`

	// Platform Platform configuration (host, image, resources)
	Platform PlatformConfig `json:"platform" yaml:"platform"`

	// Redis Redis configuration
	Redis RedisConfig `json:"redis" yaml:"redis"`

	// Storage Object storage configuration for MinIO or S3-compatible services
	Storage StorageConfig `json:"storage" yaml:"storage"`
}

// AuthConfig Authentication configuration for the API server
type AuthConfig struct {
	// Enabled Enable authentication
	Enabled bool `json:"enabled" yaml:"enabled"`

	// Firebase Firebase authentication configuration
	Firebase FirebaseAuth `json:"firebase,omitempty,omitzero" yaml:"firebase,omitempty"`

	// Local Local username/password authentication
	Local LocalAuth `json:"local,omitempty,omitzero" yaml:"local,omitempty"`

	// Twitter Twitter OAuth configuration
	Twitter TwitterAuth `json:"twitter,omitempty,omitzero" yaml:"twitter,omitempty"`
}

// BillingConfig Billing configuration for Stripe
type BillingConfig struct {
	// Enabled Enable billing functionality
	Enabled bool `json:"enabled" yaml:"enabled"`

	// Stripe Stripe payment configuration
	Stripe StripeConfig `json:"stripe,omitempty,omitzero" yaml:"stripe,omitempty"`
}

// CORSConfig CORS configuration for the API server
type CORSConfig struct {
	// Origins A comma-separated list of allowed origins for CORS requests
	Origins string `json:"origins" yaml:"origins"`
}

// DatabaseAuth Database authentication credentials
type DatabaseAuth struct {
	// Database Database name
	Database string `json:"database" yaml:"database"`

	// Password Database user password
	Password string `json:"password" yaml:"password"`
}

// DatabaseConfig Database configuration for PostgreSQL
type DatabaseConfig struct {
	// URL Database connection URL/string
	URL string `json:"URL" yaml:"URL"`

	// Auth Database authentication credentials
	Auth DatabaseAuth `json:"auth,omitempty,omitzero" yaml:"auth,omitempty"`

	// ConnMaxIdleTime Maximum connection idle time (e.g., "5m")
	ConnMaxIdleTime string `json:"connMaxIdleTime,omitempty,omitzero" yaml:"connMaxIdleTime,omitempty"`

	// ConnMaxLifetime Maximum connection lifetime (e.g., "30m")
	ConnMaxLifetime string `json:"connMaxLifetime,omitempty,omitzero" yaml:"connMaxLifetime,omitempty"`

	// Enabled Enable database
	Enabled bool `json:"enabled" yaml:"enabled"`

	// HealthCheckPeriod Health check period for connections (PostgreSQL)
	HealthCheckPeriod string `json:"healthCheckPeriod,omitempty,omitzero" yaml:"healthCheckPeriod,omitempty"`

	// Image Container image configuration
	Image ImageConfig `json:"image,omitempty,omitzero" yaml:"image,omitempty"`

	// Managed Use managed database deployment
	Managed bool `json:"managed,omitempty,omitzero" yaml:"managed,omitempty"`

	// MaxConns Maximum number of connections in pool (PostgreSQL)
	MaxConns int `json:"maxConns,omitempty,omitzero" yaml:"maxConns,omitempty"`

	// MinConns Minimum number of connections in pool (PostgreSQL)
	MinConns int `json:"minConns,omitempty,omitzero" yaml:"minConns,omitempty"`

	// Persistence Persistent storage configuration
	Persistence PersistenceConfig `json:"persistence,omitempty,omitzero" yaml:"persistence,omitempty"`

	// Resources Kubernetes resource configuration
	Resources ResourceConfig `json:"resources,omitempty,omitzero" yaml:"resources,omitempty"`

	// RunMigrations Automatically run database migrations on startup
	RunMigrations bool `json:"runMigrations,omitempty,omitzero" yaml:"runMigrations,omitempty"`

	// Type Database type (postgresql or sqlite)
	Type DatabaseConfigType `json:"type,omitempty,omitzero" yaml:"type,omitempty"`
}

// DatabaseConfigType Database type (postgresql or sqlite)
type DatabaseConfigType string

// DevServiceConfig Development service port forwarding configuration
type DevServiceConfig struct {
	// Enabled Enable dev port forwarding
	Enabled bool `json:"enabled" yaml:"enabled"`

	// Port Local port for forwarding
	Port float32 `json:"port" yaml:"port"`
}

// DevelopmentConfig Development environment configuration
type DevelopmentConfig struct {
	// API Development service port forwarding configuration
	API DevServiceConfig `json:"api" yaml:"api"`

	// HostIP Host IP address for dev port forwarding
	HostIP string `json:"hostIP" yaml:"hostIP"`

	// Loki Development service port forwarding configuration
	Loki DevServiceConfig `json:"loki" yaml:"loki"`

	// Platform Development service port forwarding configuration
	Platform DevServiceConfig `json:"platform" yaml:"platform"`

	// Postgres Development service port forwarding configuration
	Postgres DevServiceConfig `json:"postgres" yaml:"postgres"`

	// Redis Development service port forwarding configuration
	Redis DevServiceConfig `json:"redis" yaml:"redis"`
}

// EmailConfig Email configuration for sending emails
type EmailConfig struct {
	// Enabled Enable email functionality
	Enabled bool `json:"enabled" yaml:"enabled"`

	// Password Password for the email service
	Password string `json:"password,omitempty,omitzero" yaml:"password,omitempty"`

	// Service Email service provider (e.g., "gmail", "sendgrid", etc.)
	Service string `json:"service,omitempty,omitzero" yaml:"service,omitempty"`

	// User Username for the email service
	User string `json:"user,omitempty,omitzero" yaml:"user,omitempty"`
}

// EmbeddingConfig Configuration for text embedding generation
type EmbeddingConfig struct {
	// Type The embedding provider to use for vector embeddings
	Type EmbeddingConfigType `json:"type" yaml:"type"`
}

// EmbeddingConfigType The embedding provider to use for vector embeddings
type EmbeddingConfigType string

// FirebaseAuth Firebase authentication configuration
type FirebaseAuth struct {
	// ClientEmail Firebase service account client email address
	ClientEmail string `json:"clientEmail,omitempty,omitzero" yaml:"clientEmail,omitempty"`

	// Enabled Enable Firebase authentication
	Enabled bool `json:"enabled" yaml:"enabled"`

	// PrivateKey Firebase service account private key (PEM format)
	PrivateKey string `json:"privateKey,omitempty,omitzero" yaml:"privateKey,omitempty"`

	// ProjectID Firebase project ID for authentication
	ProjectID string `json:"projectID,omitempty,omitzero" yaml:"projectID,omitempty"`
}

// GrafanaConfig Grafana monitoring dashboard configuration
type GrafanaConfig struct {
	// Enabled Enable Grafana
	Enabled bool `json:"enabled" yaml:"enabled"`

	// Image Container image configuration
	Image ImageConfig `json:"image,omitempty,omitzero" yaml:"image,omitempty"`

	// Managed Use managed Grafana deployment
	Managed bool `json:"managed,omitempty,omitzero" yaml:"managed,omitempty"`

	// Resources Kubernetes resource configuration
	Resources ResourceConfig `json:"resources,omitempty,omitzero" yaml:"resources,omitempty"`
}

// ImageConfig Container image configuration
type ImageConfig struct {
	// PullPolicy Kubernetes image pull policy
	PullPolicy ImageConfigPullPolicy `json:"pullPolicy" yaml:"pullPolicy"`

	// Repository Container image repository
	Repository string `json:"repository" yaml:"repository"`

	// Tag Container image tag
	Tag string `json:"tag" yaml:"tag"`
}

// ImageConfigPullPolicy Kubernetes image pull policy
type ImageConfigPullPolicy string

// ImagesConfig Container image configuration
type ImagesConfig struct {
	// ImagePullSecrets List of Kubernetes secrets for pulling private images
	ImagePullSecrets []string `json:"imagePullSecrets" yaml:"imagePullSecrets"`

	// ImageRegistry Custom container registry URL (leave empty for Docker Hub)
	ImageRegistry string `json:"imageRegistry" yaml:"imageRegistry"`
}

// InfrastructureConfig Infrastructure configuration for Kubernetes deployments
type InfrastructureConfig struct {
	// Development Development environment configuration
	Development DevelopmentConfig `json:"development" yaml:"development"`

	// Images Container image configuration
	Images ImagesConfig `json:"images" yaml:"images"`

	// Migrations Database migration configuration
	Migrations MigrationsConfig `json:"migrations" yaml:"migrations"`

	// Namespace Kubernetes namespace where all resources will be deployed
	Namespace string `json:"namespace" yaml:"namespace"`

	// ServiceAccount Kubernetes service account configuration
	ServiceAccount ServiceAccountConfig `json:"serviceAccount" yaml:"serviceAccount"`
}

// IngressConfig Ingress configuration
type IngressConfig struct {
	// Domain Primary domain name for ingress routing
	Domain string `json:"domain,omitempty,omitzero" yaml:"domain,omitempty"`

	// Enabled Enable ingress
	Enabled bool `json:"enabled" yaml:"enabled"`

	// TLS TLS configuration
	TLS TLSConfig `json:"tls,omitempty,omitzero" yaml:"tls,omitempty"`
}

// IntelligenceConfig Intelligence configuration (LLMs, embeddings, scraper, speech, etc.)
type IntelligenceConfig struct {
	// Embedding Configuration for text embedding generation
	Embedding EmbeddingConfig `json:"embedding" yaml:"embedding"`

	// Llm Large Language Model configuration
	Llm LLMConfig `json:"llm" yaml:"llm"`

	// Runpod RunPod serverless GPU configuration
	Runpod RunPodConfig `json:"runpod" yaml:"runpod"`

	// Scraper Web scraping service configuration
	Scraper ScraperConfig `json:"scraper" yaml:"scraper"`

	// Speech Speech recognition and TTS services
	Speech SpeechConfig `json:"speech" yaml:"speech"`

	// Unstructured Unstructured.io service for document parsing
	Unstructured UnstructuredConfig `json:"unstructured" yaml:"unstructured"`
}

// LLMConfig Large Language Model configuration
type LLMConfig struct {
	// Endpoint LLM service endpoint URL
	Endpoint string `json:"endpoint,omitempty,omitzero" yaml:"endpoint,omitempty"`

	// Token Authentication token for LLM service
	Token string `json:"token,omitempty,omitzero" yaml:"token,omitempty"`

	// Type LLM provider type
	Type LLMConfigType `json:"type" yaml:"type"`
}

// LLMConfigType LLM provider type
type LLMConfigType string

// LocalAuth Local username/password authentication
type LocalAuth struct {
	// AccessTokenTTL Access token time-to-live duration (e.g., "15m", "1h")
	AccessTokenTTL string `json:"accessTokenTtl" yaml:"accessTokenTtl"`

	// Enabled Enable local authentication
	Enabled bool `json:"enabled" yaml:"enabled"`

	// JwtSecret Secret key for JWT token signing
	JwtSecret string `json:"jwtSecret" yaml:"jwtSecret"`

	// RefreshTokenTTL Refresh token time-to-live duration (e.g., "7d", "168h")
	RefreshTokenTTL string `json:"refreshTokenTtl" yaml:"refreshTokenTtl"`
}

// LoggingConfig Logging configuration
type LoggingConfig struct {
	// Level Minimum log level to output
	Level LoggingConfigLevel `json:"level" yaml:"level"`

	// Pretty Enable pretty-printed logs for development
	Pretty bool `json:"pretty" yaml:"pretty"`
}

// LoggingConfigLevel Minimum log level to output
type LoggingConfigLevel string

// LokiConfig Loki log aggregation service configuration
type LokiConfig struct {
	// Enabled Enable Loki
	Enabled bool `json:"enabled" yaml:"enabled"`

	// Host Loki host URL
	Host string `json:"host,omitempty,omitzero" yaml:"host,omitempty"`

	// Image Container image configuration
	Image ImageConfig `json:"image,omitempty,omitzero" yaml:"image,omitempty"`

	// Managed Use managed Loki deployment
	Managed bool `json:"managed,omitempty,omitzero" yaml:"managed,omitempty"`

	// Resources Kubernetes resource configuration
	Resources ResourceConfig `json:"resources,omitempty,omitzero" yaml:"resources,omitempty"`
}

// MigrationsConfig Database migration configuration
type MigrationsConfig struct {
	// Enabled Enable automatic DB migrations
	Enabled bool `json:"enabled" yaml:"enabled"`
}

// MonitoringConfig Monitoring configuration for Grafana and Loki
type MonitoringConfig struct {
	// Grafana Grafana monitoring dashboard configuration
	Grafana GrafanaConfig `json:"grafana" yaml:"grafana"`

	// Loki Loki log aggregation service configuration
	Loki LokiConfig `json:"loki" yaml:"loki"`
}

// PersistenceConfig Persistent storage configuration
type PersistenceConfig struct {
	// Enabled Enable persistent storage
	Enabled bool `json:"enabled" yaml:"enabled"`

	// Size Size of persistent volume
	Size string `json:"size" yaml:"size"`
}

// PlatformConfig Platform configuration (host, image, resources)
type PlatformConfig struct {
	// Enabled Enable platform service
	Enabled bool `json:"enabled" yaml:"enabled"`

	// Host Host address where the platform service will be accessible
	Host string `json:"host,omitempty,omitzero" yaml:"host,omitempty"`

	// Image Container image configuration
	Image ImageConfig `json:"image,omitempty,omitzero" yaml:"image,omitempty"`

	// Managed Use managed platform deployment
	Managed bool `json:"managed,omitempty,omitzero" yaml:"managed,omitempty"`

	// Resources Kubernetes resource configuration
	Resources ResourceConfig `json:"resources,omitempty,omitzero" yaml:"resources,omitempty"`
}

// Problem RFC 7807 (Problem Details) compliant error response
type Problem struct {
	// Detail Human-readable explanation specific to this occurrence
	Detail string `json:"detail" yaml:"detail"`

	// Errors Additional validation errors for specific fields
	Errors []ValidationError `json:"errors,omitempty,omitzero" yaml:"errors,omitempty"`

	// Instance URI identifying the specific occurrence
	Instance string `json:"instance,omitempty,omitzero" yaml:"instance,omitempty"`

	// Status HTTP status code
	Status int `json:"status" yaml:"status"`

	// Title Short, human-readable summary
	Title string `json:"title" yaml:"title"`

	// Type URI identifying the problem type
	Type string `json:"type" yaml:"type"`
}

// RedisConfig Redis configuration
type RedisConfig struct {
	// Auth Redis authentication password
	Auth string `json:"auth" yaml:"auth"`

	// Ca Certificate Authority for TLS (optional)
	Ca string `json:"ca,omitempty,omitzero" yaml:"ca,omitempty"`

	// Enabled Enable Redis
	Enabled bool `json:"enabled" yaml:"enabled"`

	// Host Redis hostname or IP
	Host string `json:"host" yaml:"host"`

	// Image Container image configuration
	Image ImageConfig `json:"image,omitempty,omitzero" yaml:"image,omitempty"`

	// Managed Use managed Redis deployment
	Managed bool `json:"managed,omitempty,omitzero" yaml:"managed,omitempty"`

	// Persistence Persistent storage configuration
	Persistence PersistenceConfig `json:"persistence,omitempty,omitzero" yaml:"persistence,omitempty"`

	// Port Redis port number
	Port float32 `json:"port" yaml:"port"`

	// Resources Kubernetes resource configuration
	Resources ResourceConfig `json:"resources,omitempty,omitzero" yaml:"resources,omitempty"`
}

// ResourceConfig Kubernetes resource configuration
type ResourceConfig struct {
	// Limits Resource limits
	Limits ResourceLimits `json:"limits" yaml:"limits"`

	// Requests Resource requests
	Requests ResourceRequests `json:"requests" yaml:"requests"`
}

// ResourceLimits Resource limits
type ResourceLimits struct {
	// CPU Maximum CPU allocation
	CPU string `json:"cpu" yaml:"cpu"`

	// Memory Maximum memory allocation
	Memory string `json:"memory" yaml:"memory"`
}

// ResourceRequests Resource requests
type ResourceRequests struct {
	// CPU Requested CPU allocation
	CPU string `json:"cpu" yaml:"cpu"`

	// Memory Requested memory allocation
	Memory string `json:"memory" yaml:"memory"`
}

// RunPodConfig RunPod serverless GPU configuration
type RunPodConfig struct {
	// Enabled Enable RunPod integration
	Enabled bool `json:"enabled" yaml:"enabled"`

	// Token RunPod API token
	Token string `json:"token,omitempty,omitzero" yaml:"token,omitempty"`
}

// ScraperConfig Web scraping service configuration
type ScraperConfig struct {
	// Enabled Enable scraper service
	Enabled bool `json:"enabled" yaml:"enabled"`

	// Endpoint Web scraper service endpoint URL
	Endpoint string `json:"endpoint,omitempty,omitzero" yaml:"endpoint,omitempty"`

	// Image Container image configuration
	Image ImageConfig `json:"image,omitempty,omitzero" yaml:"image,omitempty"`

	// Managed Use managed scraper deployment
	Managed bool `json:"managed,omitempty,omitzero" yaml:"managed,omitempty"`

	// Resources Kubernetes resource configuration
	Resources ResourceConfig `json:"resources,omitempty,omitzero" yaml:"resources,omitempty"`
}

// ServiceAccountConfig Kubernetes service account configuration
type ServiceAccountConfig struct {
	// Create Create dedicated service account
	Create bool `json:"create" yaml:"create"`

	// Name Custom service account name
	Name string `json:"name" yaml:"name"`
}

// SpeechConfig Speech recognition and TTS services
type SpeechConfig struct {
	// Enabled Enable speech services
	Enabled bool `json:"enabled" yaml:"enabled"`

	// Token Speech-to-text service API token
	Token string `json:"token,omitempty,omitzero" yaml:"token,omitempty"`
}

// StorageConfig Object storage configuration for MinIO or S3-compatible services
type StorageConfig struct {
	// Accesskey MinIO/S3 access key ID
	Accesskey string `json:"accesskey" yaml:"accesskey"`

	// Bucket S3 bucket name
	Bucket string `json:"bucket" yaml:"bucket"`

	// Enabled Enable object storage
	Enabled bool `json:"enabled" yaml:"enabled"`

	// Endpoint MinIO server endpoint URL
	Endpoint string `json:"endpoint" yaml:"endpoint"`

	// Image Container image configuration
	Image ImageConfig `json:"image,omitempty,omitzero" yaml:"image,omitempty"`

	// Managed Use managed storage deployment
	Managed bool `json:"managed,omitempty,omitzero" yaml:"managed,omitempty"`

	// Persistence Persistent storage configuration
	Persistence PersistenceConfig `json:"persistence,omitempty,omitzero" yaml:"persistence,omitempty"`

	// Resources Kubernetes resource configuration
	Resources ResourceConfig `json:"resources,omitempty,omitzero" yaml:"resources,omitempty"`

	// Secretkey MinIO/S3 secret access key
	Secretkey string `json:"secretkey" yaml:"secretkey"`
}

// StripeConfig Stripe payment configuration
type StripeConfig struct {
	// Token Stripe secret API key
	Token string `json:"token" yaml:"token"`

	// Whsec Stripe webhook endpoint secret
	Whsec string `json:"whsec" yaml:"whsec"`
}

// TLSConfig TLS configuration
type TLSConfig struct {
	// Enabled Enable TLS/SSL
	Enabled bool `json:"enabled" yaml:"enabled"`

	// Issuer Cert-manager ClusterIssuer
	Issuer string `json:"issuer,omitempty,omitzero" yaml:"issuer,omitempty"`

	// SecretName Kubernetes secret name for TLS certificates
	SecretName string `json:"secretName" yaml:"secretName"`
}

// TwitterAuth Twitter OAuth configuration
type TwitterAuth struct {
	// CallbackURL OAuth callback URL
	CallbackURL string `json:"callbackURL,omitempty,omitzero" yaml:"callbackURL,omitempty"`

	// ConsumerKey Twitter API consumer key
	ConsumerKey string `json:"consumerKey,omitempty,omitzero" yaml:"consumerKey,omitempty"`

	// ConsumerSecret Twitter API consumer secret
	ConsumerSecret string `json:"consumerSecret,omitempty,omitzero" yaml:"consumerSecret,omitempty"`

	// Enabled Enable Twitter OAuth
	Enabled bool `json:"enabled" yaml:"enabled"`
}

// UnstructuredConfig Unstructured.io service for document parsing
type UnstructuredConfig struct {
	// Enabled Enable unstructured document parsing
	Enabled bool `json:"enabled" yaml:"enabled"`

	// Image Container image configuration
	Image ImageConfig `json:"image,omitempty,omitzero" yaml:"image,omitempty"`

	// Managed Use managed unstructured deployment
	Managed bool `json:"managed,omitempty,omitzero" yaml:"managed,omitempty"`

	// Resources Kubernetes resource configuration
	Resources ResourceConfig `json:"resources,omitempty,omitzero" yaml:"resources,omitempty"`
}

// ValidationError Individual field validation error
type ValidationError struct {
	// Field The field path that failed validation
	Field string `json:"field" yaml:"field"`

	// Message Human-readable error message
	Message string `json:"message" yaml:"message"`

	// Value The invalid value that was provided
	Value ValidationError_Value `json:"value,omitempty,omitzero" yaml:"value,omitempty"`
}

// ValidationErrorValue0 defines model for .
type ValidationErrorValue0 = string

// ValidationErrorValue1 defines model for .
type ValidationErrorValue1 = float32

// ValidationErrorValue2 defines model for .
type ValidationErrorValue2 = bool

// ValidationError_Value The invalid value that was provided
type ValidationError_Value struct {
	union json.RawMessage
}

// BadRequest RFC 7807 (Problem Details) compliant error response
type BadRequest = Problem

// AsValidationErrorValue0 returns the union data inside the ValidationError_Value as a ValidationErrorValue0
func (t ValidationError_Value) AsValidationErrorValue0() (ValidationErrorValue0, error) {
	var body ValidationErrorValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorValue0 overwrites any union data inside the ValidationError_Value as the provided ValidationErrorValue0
func (t *ValidationError_Value) FromValidationErrorValue0(v ValidationErrorValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorValue0 performs a merge with any union data inside the ValidationError_Value, using the provided ValidationErrorValue0
func (t *ValidationError_Value) MergeValidationErrorValue0(v ValidationErrorValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorValue1 returns the union data inside the ValidationError_Value as a ValidationErrorValue1
func (t ValidationError_Value) AsValidationErrorValue1() (ValidationErrorValue1, error) {
	var body ValidationErrorValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorValue1 overwrites any union data inside the ValidationError_Value as the provided ValidationErrorValue1
func (t *ValidationError_Value) FromValidationErrorValue1(v ValidationErrorValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorValue1 performs a merge with any union data inside the ValidationError_Value, using the provided ValidationErrorValue1
func (t *ValidationError_Value) MergeValidationErrorValue1(v ValidationErrorValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorValue2 returns the union data inside the ValidationError_Value as a ValidationErrorValue2
func (t ValidationError_Value) AsValidationErrorValue2() (ValidationErrorValue2, error) {
	var body ValidationErrorValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorValue2 overwrites any union data inside the ValidationError_Value as the provided ValidationErrorValue2
func (t *ValidationError_Value) FromValidationErrorValue2(v ValidationErrorValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorValue2 performs a merge with any union data inside the ValidationError_Value, using the provided ValidationErrorValue2
func (t *ValidationError_Value) MergeValidationErrorValue2(v ValidationErrorValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ValidationError_Value) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Value) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
