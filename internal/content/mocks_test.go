// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package content

import (
	"context"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// CreateArtifact provides a mock function for the type MockRepository
func (_mock *MockRepository) CreateArtifact(ctx context.Context, entity *Artifact) (*Artifact, error) {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for CreateArtifact")
	}

	var r0 *Artifact
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Artifact) (*Artifact, error)); ok {
		return returnFunc(ctx, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Artifact) *Artifact); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Artifact)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *Artifact) error); ok {
		r1 = returnFunc(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_CreateArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateArtifact'
type MockRepository_CreateArtifact_Call struct {
	*mock.Call
}

// CreateArtifact is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *Artifact
func (_e *MockRepository_Expecter) CreateArtifact(ctx interface{}, entity interface{}) *MockRepository_CreateArtifact_Call {
	return &MockRepository_CreateArtifact_Call{Call: _e.mock.On("CreateArtifact", ctx, entity)}
}

func (_c *MockRepository_CreateArtifact_Call) Run(run func(ctx context.Context, entity *Artifact)) *MockRepository_CreateArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Artifact
		if args[1] != nil {
			arg1 = args[1].(*Artifact)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_CreateArtifact_Call) Return(artifact *Artifact, err error) *MockRepository_CreateArtifact_Call {
	_c.Call.Return(artifact, err)
	return _c
}

func (_c *MockRepository_CreateArtifact_Call) RunAndReturn(run func(ctx context.Context, entity *Artifact) (*Artifact, error)) *MockRepository_CreateArtifact_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLabel provides a mock function for the type MockRepository
func (_mock *MockRepository) CreateLabel(ctx context.Context, entity *Label) (*Label, error) {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for CreateLabel")
	}

	var r0 *Label
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Label) (*Label, error)); ok {
		return returnFunc(ctx, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Label) *Label); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Label)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *Label) error); ok {
		r1 = returnFunc(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_CreateLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLabel'
type MockRepository_CreateLabel_Call struct {
	*mock.Call
}

// CreateLabel is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *Label
func (_e *MockRepository_Expecter) CreateLabel(ctx interface{}, entity interface{}) *MockRepository_CreateLabel_Call {
	return &MockRepository_CreateLabel_Call{Call: _e.mock.On("CreateLabel", ctx, entity)}
}

func (_c *MockRepository_CreateLabel_Call) Run(run func(ctx context.Context, entity *Label)) *MockRepository_CreateLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Label
		if args[1] != nil {
			arg1 = args[1].(*Label)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_CreateLabel_Call) Return(label *Label, err error) *MockRepository_CreateLabel_Call {
	_c.Call.Return(label, err)
	return _c
}

func (_c *MockRepository_CreateLabel_Call) RunAndReturn(run func(ctx context.Context, entity *Label) (*Label, error)) *MockRepository_CreateLabel_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteArtifact provides a mock function for the type MockRepository
func (_mock *MockRepository) DeleteArtifact(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteArtifact")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_DeleteArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteArtifact'
type MockRepository_DeleteArtifact_Call struct {
	*mock.Call
}

// DeleteArtifact is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepository_Expecter) DeleteArtifact(ctx interface{}, id interface{}) *MockRepository_DeleteArtifact_Call {
	return &MockRepository_DeleteArtifact_Call{Call: _e.mock.On("DeleteArtifact", ctx, id)}
}

func (_c *MockRepository_DeleteArtifact_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_DeleteArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_DeleteArtifact_Call) Return(err error) *MockRepository_DeleteArtifact_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_DeleteArtifact_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockRepository_DeleteArtifact_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLabel provides a mock function for the type MockRepository
func (_mock *MockRepository) DeleteLabel(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLabel")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_DeleteLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLabel'
type MockRepository_DeleteLabel_Call struct {
	*mock.Call
}

// DeleteLabel is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepository_Expecter) DeleteLabel(ctx interface{}, id interface{}) *MockRepository_DeleteLabel_Call {
	return &MockRepository_DeleteLabel_Call{Call: _e.mock.On("DeleteLabel", ctx, id)}
}

func (_c *MockRepository_DeleteLabel_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_DeleteLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_DeleteLabel_Call) Return(err error) *MockRepository_DeleteLabel_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_DeleteLabel_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockRepository_DeleteLabel_Call {
	_c.Call.Return(run)
	return _c
}

// GetArtifact provides a mock function for the type MockRepository
func (_mock *MockRepository) GetArtifact(ctx context.Context, id uuid.UUID) (*Artifact, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetArtifact")
	}

	var r0 *Artifact
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Artifact, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Artifact); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Artifact)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArtifact'
type MockRepository_GetArtifact_Call struct {
	*mock.Call
}

// GetArtifact is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepository_Expecter) GetArtifact(ctx interface{}, id interface{}) *MockRepository_GetArtifact_Call {
	return &MockRepository_GetArtifact_Call{Call: _e.mock.On("GetArtifact", ctx, id)}
}

func (_c *MockRepository_GetArtifact_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_GetArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetArtifact_Call) Return(artifact *Artifact, err error) *MockRepository_GetArtifact_Call {
	_c.Call.Return(artifact, err)
	return _c
}

func (_c *MockRepository_GetArtifact_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*Artifact, error)) *MockRepository_GetArtifact_Call {
	_c.Call.Return(run)
	return _c
}

// GetLabel provides a mock function for the type MockRepository
func (_mock *MockRepository) GetLabel(ctx context.Context, id uuid.UUID) (*Label, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetLabel")
	}

	var r0 *Label
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*Label, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *Label); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Label)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLabel'
type MockRepository_GetLabel_Call struct {
	*mock.Call
}

// GetLabel is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepository_Expecter) GetLabel(ctx interface{}, id interface{}) *MockRepository_GetLabel_Call {
	return &MockRepository_GetLabel_Call{Call: _e.mock.On("GetLabel", ctx, id)}
}

func (_c *MockRepository_GetLabel_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_GetLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetLabel_Call) Return(label *Label, err error) *MockRepository_GetLabel_Call {
	_c.Call.Return(label, err)
	return _c
}

func (_c *MockRepository_GetLabel_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*Label, error)) *MockRepository_GetLabel_Call {
	_c.Call.Return(run)
	return _c
}

// ListArtifacts provides a mock function for the type MockRepository
func (_mock *MockRepository) ListArtifacts(ctx context.Context, params ListArtifactsParams) ([]*Artifact, int64, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListArtifacts")
	}

	var r0 []*Artifact
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ListArtifactsParams) ([]*Artifact, int64, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ListArtifactsParams) []*Artifact); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Artifact)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ListArtifactsParams) int64); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, ListArtifactsParams) error); ok {
		r2 = returnFunc(ctx, params)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRepository_ListArtifacts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListArtifacts'
type MockRepository_ListArtifacts_Call struct {
	*mock.Call
}

// ListArtifacts is a helper method to define mock.On call
//   - ctx context.Context
//   - params ListArtifactsParams
func (_e *MockRepository_Expecter) ListArtifacts(ctx interface{}, params interface{}) *MockRepository_ListArtifacts_Call {
	return &MockRepository_ListArtifacts_Call{Call: _e.mock.On("ListArtifacts", ctx, params)}
}

func (_c *MockRepository_ListArtifacts_Call) Run(run func(ctx context.Context, params ListArtifactsParams)) *MockRepository_ListArtifacts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ListArtifactsParams
		if args[1] != nil {
			arg1 = args[1].(ListArtifactsParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_ListArtifacts_Call) Return(artifacts []*Artifact, n int64, err error) *MockRepository_ListArtifacts_Call {
	_c.Call.Return(artifacts, n, err)
	return _c
}

func (_c *MockRepository_ListArtifacts_Call) RunAndReturn(run func(ctx context.Context, params ListArtifactsParams) ([]*Artifact, int64, error)) *MockRepository_ListArtifacts_Call {
	_c.Call.Return(run)
	return _c
}

// ListLabels provides a mock function for the type MockRepository
func (_mock *MockRepository) ListLabels(ctx context.Context, params ListLabelsParams) ([]*Label, int64, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListLabels")
	}

	var r0 []*Label
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ListLabelsParams) ([]*Label, int64, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ListLabelsParams) []*Label); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Label)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ListLabelsParams) int64); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, ListLabelsParams) error); ok {
		r2 = returnFunc(ctx, params)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRepository_ListLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLabels'
type MockRepository_ListLabels_Call struct {
	*mock.Call
}

// ListLabels is a helper method to define mock.On call
//   - ctx context.Context
//   - params ListLabelsParams
func (_e *MockRepository_Expecter) ListLabels(ctx interface{}, params interface{}) *MockRepository_ListLabels_Call {
	return &MockRepository_ListLabels_Call{Call: _e.mock.On("ListLabels", ctx, params)}
}

func (_c *MockRepository_ListLabels_Call) Run(run func(ctx context.Context, params ListLabelsParams)) *MockRepository_ListLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ListLabelsParams
		if args[1] != nil {
			arg1 = args[1].(ListLabelsParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_ListLabels_Call) Return(labels []*Label, n int64, err error) *MockRepository_ListLabels_Call {
	_c.Call.Return(labels, n, err)
	return _c
}

func (_c *MockRepository_ListLabels_Call) RunAndReturn(run func(ctx context.Context, params ListLabelsParams) ([]*Label, int64, error)) *MockRepository_ListLabels_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateArtifact provides a mock function for the type MockRepository
func (_mock *MockRepository) UpdateArtifact(ctx context.Context, id uuid.UUID, entity *Artifact) (*Artifact, error) {
	ret := _mock.Called(ctx, id, entity)

	if len(ret) == 0 {
		panic("no return value specified for UpdateArtifact")
	}

	var r0 *Artifact
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *Artifact) (*Artifact, error)); ok {
		return returnFunc(ctx, id, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *Artifact) *Artifact); ok {
		r0 = returnFunc(ctx, id, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Artifact)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *Artifact) error); ok {
		r1 = returnFunc(ctx, id, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_UpdateArtifact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateArtifact'
type MockRepository_UpdateArtifact_Call struct {
	*mock.Call
}

// UpdateArtifact is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - entity *Artifact
func (_e *MockRepository_Expecter) UpdateArtifact(ctx interface{}, id interface{}, entity interface{}) *MockRepository_UpdateArtifact_Call {
	return &MockRepository_UpdateArtifact_Call{Call: _e.mock.On("UpdateArtifact", ctx, id, entity)}
}

func (_c *MockRepository_UpdateArtifact_Call) Run(run func(ctx context.Context, id uuid.UUID, entity *Artifact)) *MockRepository_UpdateArtifact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *Artifact
		if args[2] != nil {
			arg2 = args[2].(*Artifact)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepository_UpdateArtifact_Call) Return(artifact *Artifact, err error) *MockRepository_UpdateArtifact_Call {
	_c.Call.Return(artifact, err)
	return _c
}

func (_c *MockRepository_UpdateArtifact_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, entity *Artifact) (*Artifact, error)) *MockRepository_UpdateArtifact_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLabel provides a mock function for the type MockRepository
func (_mock *MockRepository) UpdateLabel(ctx context.Context, id uuid.UUID, entity *Label) (*Label, error) {
	ret := _mock.Called(ctx, id, entity)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLabel")
	}

	var r0 *Label
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *Label) (*Label, error)); ok {
		return returnFunc(ctx, id, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *Label) *Label); ok {
		r0 = returnFunc(ctx, id, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Label)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *Label) error); ok {
		r1 = returnFunc(ctx, id, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_UpdateLabel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLabel'
type MockRepository_UpdateLabel_Call struct {
	*mock.Call
}

// UpdateLabel is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - entity *Label
func (_e *MockRepository_Expecter) UpdateLabel(ctx interface{}, id interface{}, entity interface{}) *MockRepository_UpdateLabel_Call {
	return &MockRepository_UpdateLabel_Call{Call: _e.mock.On("UpdateLabel", ctx, id, entity)}
}

func (_c *MockRepository_UpdateLabel_Call) Run(run func(ctx context.Context, id uuid.UUID, entity *Label)) *MockRepository_UpdateLabel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *Label
		if args[2] != nil {
			arg2 = args[2].(*Label)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepository_UpdateLabel_Call) Return(label *Label, err error) *MockRepository_UpdateLabel_Call {
	_c.Call.Return(label, err)
	return _c
}

func (_c *MockRepository_UpdateLabel_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, entity *Label) (*Label, error)) *MockRepository_UpdateLabel_Call {
	_c.Call.Return(run)
	return _c
}
