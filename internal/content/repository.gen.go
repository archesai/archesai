// Code generated by codegen repository. DO NOT EDIT.
package content

import (
	"context"
	"fmt"
	"github.com/google/uuid"
)

// Repository provides data access operations for content domain.
type Repository interface {

	// Artifact operations
	CreateArtifact(ctx context.Context, entity *Artifact) (*Artifact, error)
	GetArtifactByID(ctx context.Context, id uuid.UUID) (*Artifact, error)
	UpdateArtifact(ctx context.Context, id uuid.UUID, entity *Artifact) (*Artifact, error)
	DeleteArtifact(ctx context.Context, id uuid.UUID) error
	ListArtifacts(ctx context.Context, params ListArtifactsParams) ([]*Artifact, int64, error)

	// Label operations
	CreateLabel(ctx context.Context, entity *Label) (*Label, error)
	GetLabelByID(ctx context.Context, id uuid.UUID) (*Label, error)
	UpdateLabel(ctx context.Context, id uuid.UUID, entity *Label) (*Label, error)
	DeleteLabel(ctx context.Context, id uuid.UUID) error
	ListLabels(ctx context.Context, params ListLabelsParams) ([]*Label, int64, error)
}

// ListArtifactsParams represents parameters for listing artifacts.
type ListArtifactsParams struct {
	Limit  int
	Offset int
}

// ListLabelsParams represents parameters for listing labels.
type ListLabelsParams struct {
	Limit  int
	Offset int
}

// RepositoryError represents a repository error.
type RepositoryError struct {
	Operation string
	Err       error
}

func (e *RepositoryError) Error() string {
	return fmt.Sprintf("repository %s: %v", e.Operation, e.Err)
}

func (e *RepositoryError) Unwrap() error {
	return e.Err
}

// NewRepositoryError creates a new repository error.
func NewRepositoryError(operation string, err error) *RepositoryError {
	return &RepositoryError{
		Operation: operation,
		Err:       err,
	}
}
