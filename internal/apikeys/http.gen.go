// Package apikeys provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package apikeys

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List API keys
	// (GET /apikeys)
	ApikeysFindMany(ctx echo.Context, params ApikeysFindManyParams) error
	// Create API key
	// (POST /apikeys)
	ApikeysCreate(ctx echo.Context) error
	// Delete API key
	// (DELETE /apikeys/{id})
	ApikeysDelete(ctx echo.Context, id openapi_types.UUID) error
	// Get API key details
	// (GET /apikeys/{id})
	ApikeysFindById(ctx echo.Context, id openapi_types.UUID) error
	// Update API key
	// (PATCH /apikeys/{id})
	ApikeysUpdate(ctx echo.Context, id openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ApikeysFindMany converts echo context to params.
func (w *ServerInterfaceWrapper) ApikeysFindMany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ApikeysFindManyParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApikeysFindMany(ctx, params)
	return err
}

// ApikeysCreate converts echo context to params.
func (w *ServerInterfaceWrapper) ApikeysCreate(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApikeysCreate(ctx)
	return err
}

// ApikeysDelete converts echo context to params.
func (w *ServerInterfaceWrapper) ApikeysDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApikeysDelete(ctx, id)
	return err
}

// ApikeysFindById converts echo context to params.
func (w *ServerInterfaceWrapper) ApikeysFindById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApikeysFindById(ctx, id)
	return err
}

// ApikeysUpdate converts echo context to params.
func (w *ServerInterfaceWrapper) ApikeysUpdate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApikeysUpdate(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/apikeys", wrapper.ApikeysFindMany)
	router.POST(baseURL+"/apikeys", wrapper.ApikeysCreate)
	router.DELETE(baseURL+"/apikeys/:id", wrapper.ApikeysDelete)
	router.GET(baseURL+"/apikeys/:id", wrapper.ApikeysFindById)
	router.PATCH(baseURL+"/apikeys/:id", wrapper.ApikeysUpdate)

}

type BadRequestApplicationProblemPlusJSONResponse Problem

type NotFoundApplicationProblemPlusJSONResponse Problem

type UnauthorizedApplicationProblemPlusJSONResponse Problem

type ApikeysFindManyRequestObject struct {
	Params ApikeysFindManyParams
}

type ApikeysFindManyResponseObject interface {
	VisitApikeysFindManyResponse(w http.ResponseWriter) error
}

type ApikeysFindMany200JSONResponse struct {
	Data []ApiKey `json:"data"`
	Meta struct {
		Total float32 `json:"total"`
	} `json:"meta"`
}

func (response ApikeysFindMany200JSONResponse) VisitApikeysFindManyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ApikeysFindMany401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response ApikeysFindMany401ApplicationProblemPlusJSONResponse) VisitApikeysFindManyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ApikeysCreateRequestObject struct {
	Body *ApikeysCreateJSONRequestBody
}

type ApikeysCreateResponseObject interface {
	VisitApikeysCreateResponse(w http.ResponseWriter) error
}

type ApikeysCreate201JSONResponse ApiKeyResponse

func (response ApikeysCreate201JSONResponse) VisitApikeysCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ApikeysCreate400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response ApikeysCreate400ApplicationProblemPlusJSONResponse) VisitApikeysCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ApikeysCreate401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response ApikeysCreate401ApplicationProblemPlusJSONResponse) VisitApikeysCreateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ApikeysDeleteRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type ApikeysDeleteResponseObject interface {
	VisitApikeysDeleteResponse(w http.ResponseWriter) error
}

type ApikeysDelete204Response struct {
}

func (response ApikeysDelete204Response) VisitApikeysDeleteResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type ApikeysDelete400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response ApikeysDelete400ApplicationProblemPlusJSONResponse) VisitApikeysDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ApikeysDelete401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response ApikeysDelete401ApplicationProblemPlusJSONResponse) VisitApikeysDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ApikeysDelete404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response ApikeysDelete404ApplicationProblemPlusJSONResponse) VisitApikeysDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ApikeysFindByIdRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type ApikeysFindByIdResponseObject interface {
	VisitApikeysFindByIdResponse(w http.ResponseWriter) error
}

type ApikeysFindById200JSONResponse ApiKey

func (response ApikeysFindById200JSONResponse) VisitApikeysFindByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ApikeysFindById400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response ApikeysFindById400ApplicationProblemPlusJSONResponse) VisitApikeysFindByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ApikeysFindById401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response ApikeysFindById401ApplicationProblemPlusJSONResponse) VisitApikeysFindByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ApikeysFindById404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response ApikeysFindById404ApplicationProblemPlusJSONResponse) VisitApikeysFindByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ApikeysUpdateRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *ApikeysUpdateJSONRequestBody
}

type ApikeysUpdateResponseObject interface {
	VisitApikeysUpdateResponse(w http.ResponseWriter) error
}

type ApikeysUpdate200JSONResponse ApiKey

func (response ApikeysUpdate200JSONResponse) VisitApikeysUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ApikeysUpdate400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response ApikeysUpdate400ApplicationProblemPlusJSONResponse) VisitApikeysUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ApikeysUpdate401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response ApikeysUpdate401ApplicationProblemPlusJSONResponse) VisitApikeysUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ApikeysUpdate404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response ApikeysUpdate404ApplicationProblemPlusJSONResponse) VisitApikeysUpdateResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List API keys
	// (GET /apikeys)
	ApikeysFindMany(ctx context.Context, request ApikeysFindManyRequestObject) (ApikeysFindManyResponseObject, error)
	// Create API key
	// (POST /apikeys)
	ApikeysCreate(ctx context.Context, request ApikeysCreateRequestObject) (ApikeysCreateResponseObject, error)
	// Delete API key
	// (DELETE /apikeys/{id})
	ApikeysDelete(ctx context.Context, request ApikeysDeleteRequestObject) (ApikeysDeleteResponseObject, error)
	// Get API key details
	// (GET /apikeys/{id})
	ApikeysFindById(ctx context.Context, request ApikeysFindByIdRequestObject) (ApikeysFindByIdResponseObject, error)
	// Update API key
	// (PATCH /apikeys/{id})
	ApikeysUpdate(ctx context.Context, request ApikeysUpdateRequestObject) (ApikeysUpdateResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ApikeysFindMany operation middleware
func (sh *strictHandler) ApikeysFindMany(ctx echo.Context, params ApikeysFindManyParams) error {
	var request ApikeysFindManyRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ApikeysFindMany(ctx.Request().Context(), request.(ApikeysFindManyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ApikeysFindMany")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ApikeysFindManyResponseObject); ok {
		return validResponse.VisitApikeysFindManyResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ApikeysCreate operation middleware
func (sh *strictHandler) ApikeysCreate(ctx echo.Context) error {
	var request ApikeysCreateRequestObject

	var body ApikeysCreateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ApikeysCreate(ctx.Request().Context(), request.(ApikeysCreateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ApikeysCreate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ApikeysCreateResponseObject); ok {
		return validResponse.VisitApikeysCreateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ApikeysDelete operation middleware
func (sh *strictHandler) ApikeysDelete(ctx echo.Context, id openapi_types.UUID) error {
	var request ApikeysDeleteRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ApikeysDelete(ctx.Request().Context(), request.(ApikeysDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ApikeysDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ApikeysDeleteResponseObject); ok {
		return validResponse.VisitApikeysDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ApikeysFindById operation middleware
func (sh *strictHandler) ApikeysFindById(ctx echo.Context, id openapi_types.UUID) error {
	var request ApikeysFindByIdRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ApikeysFindById(ctx.Request().Context(), request.(ApikeysFindByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ApikeysFindById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ApikeysFindByIdResponseObject); ok {
		return validResponse.VisitApikeysFindByIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ApikeysUpdate operation middleware
func (sh *strictHandler) ApikeysUpdate(ctx echo.Context, id openapi_types.UUID) error {
	var request ApikeysUpdateRequestObject

	request.Id = id

	var body ApikeysUpdateJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ApikeysUpdate(ctx.Request().Context(), request.(ApikeysUpdateRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ApikeysUpdate")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ApikeysUpdateResponseObject); ok {
		return validResponse.VisitApikeysUpdateResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
