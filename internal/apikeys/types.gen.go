// Package apikeys provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package apikeys

import (
	"encoding/json"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// ApiKey defines model for ApiKey.
type ApiKey struct {
	// CreatedAt When this API key was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// ExpiresAt When this API key expires
	ExpiresAt time.Time          `json:"expiresAt" yaml:"expiresAt"`
	Id        openapi_types.UUID `json:"id" yaml:"id"`

	// LastUsedAt When this API key was last used
	LastUsedAt time.Time `json:"lastUsedAt,omitempty,omitzero" yaml:"lastUsedAt,omitempty"`
	Name       string    `json:"name" yaml:"name"`
	Prefix     string    `json:"prefix" yaml:"prefix"`

	// RateLimit Requests per minute allowed for this API key
	RateLimit int      `json:"rateLimit" yaml:"rateLimit"`
	Scopes    []string `json:"scopes" yaml:"scopes"`

	// UpdatedAt When this API key was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// ApiKeyResponse defines model for ApiKeyResponse.
type ApiKeyResponse struct {
	// CreatedAt When this API key was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// ExpiresAt When this API key expires
	ExpiresAt time.Time          `json:"expiresAt" yaml:"expiresAt"`
	Id        openapi_types.UUID `json:"id" yaml:"id"`

	// Key The actual API key (only returned once on creation)
	Key    string `json:"key" yaml:"key"`
	Name   string `json:"name" yaml:"name"`
	Prefix string `json:"prefix" yaml:"prefix"`

	// RateLimit Requests per minute allowed for this API key
	RateLimit int      `json:"rateLimit" yaml:"rateLimit"`
	Scopes    []string `json:"scopes" yaml:"scopes"`
}

// Problem RFC 7807 (Problem Details) compliant error response
type Problem struct {
	// Detail Human-readable explanation specific to this occurrence
	Detail string `json:"detail" yaml:"detail"`

	// Errors Additional validation errors for specific fields
	Errors []ValidationError `json:"errors,omitempty,omitzero" yaml:"errors,omitempty"`

	// Instance URI identifying the specific occurrence
	Instance string `json:"instance,omitempty,omitzero" yaml:"instance,omitempty"`

	// Status HTTP status code
	Status int `json:"status" yaml:"status"`

	// Title Short, human-readable summary
	Title string `json:"title" yaml:"title"`

	// Type URI identifying the problem type
	Type string `json:"type" yaml:"type"`
}

// ValidationError Individual field validation error
type ValidationError struct {
	// Field The field path that failed validation
	Field string `json:"field" yaml:"field"`

	// Message Human-readable error message
	Message string `json:"message" yaml:"message"`

	// Value The invalid value that was provided
	Value ValidationError_Value `json:"value,omitempty,omitzero" yaml:"value,omitempty"`
}

// ValidationErrorValue0 defines model for .
type ValidationErrorValue0 = string

// ValidationErrorValue1 defines model for .
type ValidationErrorValue1 = float32

// ValidationErrorValue2 defines model for .
type ValidationErrorValue2 = bool

// ValidationError_Value The invalid value that was provided
type ValidationError_Value struct {
	union json.RawMessage
}

// BadRequest RFC 7807 (Problem Details) compliant error response
type BadRequest = Problem

// NotFound RFC 7807 (Problem Details) compliant error response
type NotFound = Problem

// Unauthorized RFC 7807 (Problem Details) compliant error response
type Unauthorized = Problem

// ApikeysFindManyParams defines parameters for ApikeysFindMany.
type ApikeysFindManyParams struct {
	// Limit Maximum number of items to return
	Limit int `form:"limit,omitempty" json:"limit,omitempty,omitzero" yaml:"limit,omitempty"`

	// Offset Number of items to skip
	Offset int `form:"offset,omitempty" json:"offset,omitempty,omitzero" yaml:"offset,omitempty"`
}

// ApikeysCreateJSONBody defines parameters for ApikeysCreate.
type ApikeysCreateJSONBody struct {
	// ExpiresAt When the API key expires (optional, no expiry if omitted)
	ExpiresAt time.Time `json:"expiresAt,omitempty,omitzero" yaml:"expiresAt,omitempty"`

	// Name Human-readable name for the API key
	Name string `json:"name" yaml:"name"`

	// RateLimit Requests per minute limit (default 60)
	RateLimit int `json:"rateLimit,omitempty,omitzero" yaml:"rateLimit,omitempty"`

	// Scopes List of scopes/permissions for this API key
	Scopes []string `json:"scopes" yaml:"scopes"`
}

// ApikeysUpdateJSONBody defines parameters for ApikeysUpdate.
type ApikeysUpdateJSONBody struct {
	// Name Human-readable name for the API key
	Name string `json:"name,omitempty,omitzero" yaml:"name,omitempty"`

	// RateLimit Requests per minute allowed for this API key
	RateLimit int `json:"rateLimit,omitempty,omitzero" yaml:"rateLimit,omitempty"`

	// Scopes Array of permission scopes
	Scopes []string `json:"scopes,omitempty,omitzero" yaml:"scopes,omitempty"`
}

// ApikeysCreateJSONRequestBody defines body for ApikeysCreate for application/json ContentType.
type ApikeysCreateJSONRequestBody ApikeysCreateJSONBody

// ApikeysUpdateJSONRequestBody defines body for ApikeysUpdate for application/json ContentType.
type ApikeysUpdateJSONRequestBody ApikeysUpdateJSONBody

// AsValidationErrorValue0 returns the union data inside the ValidationError_Value as a ValidationErrorValue0
func (t ValidationError_Value) AsValidationErrorValue0() (ValidationErrorValue0, error) {
	var body ValidationErrorValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorValue0 overwrites any union data inside the ValidationError_Value as the provided ValidationErrorValue0
func (t *ValidationError_Value) FromValidationErrorValue0(v ValidationErrorValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorValue0 performs a merge with any union data inside the ValidationError_Value, using the provided ValidationErrorValue0
func (t *ValidationError_Value) MergeValidationErrorValue0(v ValidationErrorValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorValue1 returns the union data inside the ValidationError_Value as a ValidationErrorValue1
func (t ValidationError_Value) AsValidationErrorValue1() (ValidationErrorValue1, error) {
	var body ValidationErrorValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorValue1 overwrites any union data inside the ValidationError_Value as the provided ValidationErrorValue1
func (t *ValidationError_Value) FromValidationErrorValue1(v ValidationErrorValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorValue1 performs a merge with any union data inside the ValidationError_Value, using the provided ValidationErrorValue1
func (t *ValidationError_Value) MergeValidationErrorValue1(v ValidationErrorValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorValue2 returns the union data inside the ValidationError_Value as a ValidationErrorValue2
func (t ValidationError_Value) AsValidationErrorValue2() (ValidationErrorValue2, error) {
	var body ValidationErrorValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorValue2 overwrites any union data inside the ValidationError_Value as the provided ValidationErrorValue2
func (t *ValidationError_Value) FromValidationErrorValue2(v ValidationErrorValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorValue2 performs a merge with any union data inside the ValidationError_Value, using the provided ValidationErrorValue2
func (t *ValidationError_Value) MergeValidationErrorValue2(v ValidationErrorValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ValidationError_Value) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Value) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
