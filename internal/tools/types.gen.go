// Package tools provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package tools

import (
	"time"

	"github.com/google/uuid"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ListToolsParamsSortField.
const (
	CreatedAt      ListToolsParamsSortField = "createdAt"
	Description    ListToolsParamsSortField = "description"
	ID             ListToolsParamsSortField = "id"
	InputMimeType  ListToolsParamsSortField = "inputMimeType"
	Name           ListToolsParamsSortField = "name"
	OrganizationID ListToolsParamsSortField = "organizationID"
	OutputMimeType ListToolsParamsSortField = "outputMimeType"
	UpdatedAt      ListToolsParamsSortField = "updatedAt"
)

// Defines values for ListToolsParamsSortOrder.
const (
	Asc  ListToolsParamsSortOrder = "asc"
	Desc ListToolsParamsSortOrder = "desc"
)

// Base defines model for Base.
type Base struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// ID Universally Unique IDentifier
	ID UUID `json:"id" yaml:"id"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// FilterNode A recursive filter node that can be a condition or group
type FilterNode = interface{}

// Page Pagination (page number & size)
type Page struct {
	Number int `json:"number,omitempty,omitzero" yaml:"number,omitempty"`
	Size   int `json:"size,omitempty,omitzero" yaml:"size,omitempty"`
}

// Problem RFC 7807 (Problem Details) compliant error response
type Problem struct {
	// Detail Human-readable explanation specific to this occurrence
	Detail string `json:"detail,omitempty,omitzero" yaml:"detail,omitempty"`

	// Instance URI identifying the specific occurrence
	Instance string `json:"instance,omitempty,omitzero" yaml:"instance,omitempty"`

	// Status HTTP status code
	Status int `json:"status" yaml:"status"`

	// Title Short, human-readable summary
	Title string `json:"title" yaml:"title"`

	// Type URI identifying the problem type
	Type string `json:"type,omitempty,omitzero" yaml:"type,omitempty"`
}

// Tool defines model for Tool.
type Tool struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// Description The tool description
	Description string `json:"description" yaml:"description"`

	// ID Universally Unique IDentifier
	ID UUID `json:"id" yaml:"id"`

	// InputMimeType The MIME type of the input for the tool, e.g. text/plain
	InputMimeType string `json:"inputMimeType" yaml:"inputMimeType"`

	// Name The name of the tool
	Name           string `json:"name" yaml:"name"`
	OrganizationID UUID   `json:"organizationID" yaml:"organizationID"`

	// OutputMimeType The MIME type of the output for the tool, e.g. text/plain
	OutputMimeType string `json:"outputMimeType" yaml:"outputMimeType"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// UUID Universally Unique IDentifier
type UUID = uuid.UUID

// PageQuery Pagination (page number & size)
type PageQuery = Page

// ToolsFilter A recursive filter node that can be a condition or group
type ToolsFilter = FilterNode

// ToolsSort defines model for ToolsSort.
type ToolsSort = []struct {
	Field string `json:"field" yaml:"field"`
	Order string `json:"order" yaml:"order"`
}

// BadRequest RFC 7807 (Problem Details) compliant error response
type BadRequest = Problem

// NotFound RFC 7807 (Problem Details) compliant error response
type NotFound = Problem

// Unauthorized RFC 7807 (Problem Details) compliant error response
type Unauthorized = Problem

// ListToolsParams defines parameters for ListTools.
type ListToolsParams struct {
	// Filter Filter tools by field values. Supported fields:
	// - createdAt, id, updatedAt, description, inputMimeType
	// - name, organizationID, outputMimeType
	Filter ToolsFilter `json:"filter,omitempty,omitzero" yaml:"filter,omitempty"`

	// Page The page parameter
	Page PageQuery `form:"page,omitempty" json:"page,omitempty,omitzero" yaml:"page,omitempty"`

	// Sort The sort parameter
	Sort ToolsSort `form:"sort,omitempty" json:"sort,omitempty,omitzero" yaml:"sort,omitempty"`
}

// ListToolsParamsSortField defines parameters for ListTools.
type ListToolsParamsSortField string

// ListToolsParamsSortOrder defines parameters for ListTools.
type ListToolsParamsSortOrder string

// CreateToolJSONBody defines parameters for CreateTool.
type CreateToolJSONBody struct {
	// Description The tool description
	Description string `json:"description" yaml:"description"`

	// Name The name of the tool
	Name string `json:"name" yaml:"name"`
}

// UpdateToolJSONBody defines parameters for UpdateTool.
type UpdateToolJSONBody struct {
	// Description The tool description
	Description string `json:"description,omitempty,omitzero" yaml:"description,omitempty"`

	// Name The name of the tool
	Name string `json:"name,omitempty,omitzero" yaml:"name,omitempty"`
}

// CreateToolJSONRequestBody defines body for CreateTool for application/json ContentType.
type CreateToolJSONRequestBody CreateToolJSONBody

// UpdateToolJSONRequestBody defines body for UpdateTool for application/json ContentType.
type UpdateToolJSONRequestBody UpdateToolJSONBody
