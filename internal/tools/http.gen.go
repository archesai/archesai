// Package tools provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Find many tools
	// (GET /workflows/tools)
	FindManyTools(ctx echo.Context, params FindManyToolsParams) error
	// Create a new tool
	// (POST /workflows/tools)
	CreateTool(ctx echo.Context) error
	// Delete a tool
	// (DELETE /workflows/tools/{id})
	DeleteTool(ctx echo.Context, id openapi_types.UUID) error
	// Find a tool
	// (GET /workflows/tools/{id})
	GetOneTool(ctx echo.Context, id openapi_types.UUID) error
	// Update a tool
	// (PATCH /workflows/tools/{id})
	UpdateTool(ctx echo.Context, id openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindManyTools converts echo context to params.
func (w *ServerInterfaceWrapper) FindManyTools(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindManyToolsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindManyTools(ctx, params)
	return err
}

// CreateTool converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTool(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTool(ctx)
	return err
}

// DeleteTool converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTool(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTool(ctx, id)
	return err
}

// GetOneTool converts echo context to params.
func (w *ServerInterfaceWrapper) GetOneTool(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOneTool(ctx, id)
	return err
}

// UpdateTool converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTool(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateTool(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/workflows/tools", wrapper.FindManyTools)
	router.POST(baseURL+"/workflows/tools", wrapper.CreateTool)
	router.DELETE(baseURL+"/workflows/tools/:id", wrapper.DeleteTool)
	router.GET(baseURL+"/workflows/tools/:id", wrapper.GetOneTool)
	router.PATCH(baseURL+"/workflows/tools/:id", wrapper.UpdateTool)

}

type BadRequestApplicationProblemPlusJSONResponse Problem

type NotFoundApplicationProblemPlusJSONResponse Problem

type UnauthorizedApplicationProblemPlusJSONResponse Problem

type FindManyToolsRequestObject struct {
	Params FindManyToolsParams
}

type FindManyToolsResponseObject interface {
	VisitFindManyToolsResponse(w http.ResponseWriter) error
}

type FindManyTools200JSONResponse struct {
	Data []Tool `json:"data"`
	Meta struct {
		// Total Total number of items in the collection
		Total float32 `json:"total"`
	} `json:"meta"`
}

func (response FindManyTools200JSONResponse) VisitFindManyToolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FindManyTools400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response FindManyTools400ApplicationProblemPlusJSONResponse) VisitFindManyToolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type FindManyTools401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response FindManyTools401ApplicationProblemPlusJSONResponse) VisitFindManyToolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateToolRequestObject struct {
	Body *CreateToolJSONRequestBody
}

type CreateToolResponseObject interface {
	VisitCreateToolResponse(w http.ResponseWriter) error
}

type CreateTool201JSONResponse struct {
	// Data Schema for Tool entity
	Data Tool `json:"data"`
}

func (response CreateTool201JSONResponse) VisitCreateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateTool400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response CreateTool400ApplicationProblemPlusJSONResponse) VisitCreateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateTool401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response CreateTool401ApplicationProblemPlusJSONResponse) VisitCreateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteToolRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteToolResponseObject interface {
	VisitDeleteToolResponse(w http.ResponseWriter) error
}

type DeleteTool200JSONResponse struct {
	// Data Schema for Tool entity
	Data Tool `json:"data"`
}

func (response DeleteTool200JSONResponse) VisitDeleteToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTool404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response DeleteTool404ApplicationProblemPlusJSONResponse) VisitDeleteToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetOneToolRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetOneToolResponseObject interface {
	VisitGetOneToolResponse(w http.ResponseWriter) error
}

type GetOneTool200JSONResponse struct {
	// Data Schema for Tool entity
	Data Tool `json:"data"`
}

func (response GetOneTool200JSONResponse) VisitGetOneToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOneTool404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response GetOneTool404ApplicationProblemPlusJSONResponse) VisitGetOneToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateToolRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *UpdateToolJSONRequestBody
}

type UpdateToolResponseObject interface {
	VisitUpdateToolResponse(w http.ResponseWriter) error
}

type UpdateTool200JSONResponse struct {
	// Data Schema for Tool entity
	Data Tool `json:"data"`
}

func (response UpdateTool200JSONResponse) VisitUpdateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTool404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response UpdateTool404ApplicationProblemPlusJSONResponse) VisitUpdateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Find many tools
	// (GET /workflows/tools)
	FindManyTools(ctx context.Context, request FindManyToolsRequestObject) (FindManyToolsResponseObject, error)
	// Create a new tool
	// (POST /workflows/tools)
	CreateTool(ctx context.Context, request CreateToolRequestObject) (CreateToolResponseObject, error)
	// Delete a tool
	// (DELETE /workflows/tools/{id})
	DeleteTool(ctx context.Context, request DeleteToolRequestObject) (DeleteToolResponseObject, error)
	// Find a tool
	// (GET /workflows/tools/{id})
	GetOneTool(ctx context.Context, request GetOneToolRequestObject) (GetOneToolResponseObject, error)
	// Update a tool
	// (PATCH /workflows/tools/{id})
	UpdateTool(ctx context.Context, request UpdateToolRequestObject) (UpdateToolResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// FindManyTools operation middleware
func (sh *strictHandler) FindManyTools(ctx echo.Context, params FindManyToolsParams) error {
	var request FindManyToolsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FindManyTools(ctx.Request().Context(), request.(FindManyToolsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindManyTools")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FindManyToolsResponseObject); ok {
		return validResponse.VisitFindManyToolsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateTool operation middleware
func (sh *strictHandler) CreateTool(ctx echo.Context) error {
	var request CreateToolRequestObject

	var body CreateToolJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTool(ctx.Request().Context(), request.(CreateToolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTool")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateToolResponseObject); ok {
		return validResponse.VisitCreateToolResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteTool operation middleware
func (sh *strictHandler) DeleteTool(ctx echo.Context, id openapi_types.UUID) error {
	var request DeleteToolRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTool(ctx.Request().Context(), request.(DeleteToolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTool")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteToolResponseObject); ok {
		return validResponse.VisitDeleteToolResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetOneTool operation middleware
func (sh *strictHandler) GetOneTool(ctx echo.Context, id openapi_types.UUID) error {
	var request GetOneToolRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOneTool(ctx.Request().Context(), request.(GetOneToolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOneTool")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetOneToolResponseObject); ok {
		return validResponse.VisitGetOneToolResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateTool operation middleware
func (sh *strictHandler) UpdateTool(ctx echo.Context, id openapi_types.UUID) error {
	var request UpdateToolRequestObject

	request.Id = id

	var body UpdateToolJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTool(ctx.Request().Context(), request.(UpdateToolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateTool")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateToolResponseObject); ok {
		return validResponse.VisitUpdateToolResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
