// Code generated by archesai/codegen. DO NOT EDIT.

package tools

import (
	"context"
	"errors"
	"log/slog"
	"time"

	"github.com/archesai/archesai/internal/database/postgresql"
	"github.com/google/uuid"
)

// ServiceInterface defines the business logic operations
type ServiceInterface interface {
	CreateTool(ctx context.Context, request CreateToolRequestObject) (CreateToolResponseObject, error)
	GetTool(ctx context.Context, request GetToolRequestObject) (GetToolResponseObject, error)
	UpdateTool(ctx context.Context, request UpdateToolRequestObject) (UpdateToolResponseObject, error)
	DeleteTool(ctx context.Context, request DeleteToolRequestObject) (DeleteToolResponseObject, error)
	ListTools(ctx context.Context, request ListToolsRequestObject) (ListToolsResponseObject, error)
}

// Service implements the business logic
type Service struct {
	repo   Repository
	db     *postgresql.Queries
	logger *slog.Logger
}

// NewService creates a new service implementation
func NewService(repo Repository, db *postgresql.Queries, logger *slog.Logger) *Service {
	return &Service{
		repo:   repo,
		db:     db,
		logger: logger,
	}
}

// CreateTool creates a new tool
func (s *Service) CreateTool(ctx context.Context, request CreateToolRequestObject) (CreateToolResponseObject, error) {
	if request.Body == nil {
		return CreateTool400ApplicationProblemPlusJSONResponse{
			BadRequestApplicationProblemPlusJSONResponse: BadRequestApplicationProblemPlusJSONResponse{
				Detail: "Request body is required",
				Status: 400,
				Title:  "Bad Request",
				Type:   "about:blank",
			},
		}, nil
	}

	// Create entity from request
	entity := &Tool{
		ID:        uuid.New(),
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}

	// Call repository to persist
	created, err := s.repo.Create(ctx, entity)
	if err != nil {
		s.logger.Error("Failed to create tool", "error", err)
		return CreateTool400ApplicationProblemPlusJSONResponse{
			BadRequestApplicationProblemPlusJSONResponse: BadRequestApplicationProblemPlusJSONResponse{
				Detail: "Failed to create tool",
				Status: 400,
				Title:  "Bad Request",
				Type:   "about:blank",
			},
		}, nil
	}
	// Check if response type has Data field (wrapped response)
	return CreateTool201JSONResponse{
		Data: *created,
	}, nil
}

// GetTool gets a tool by ID
func (s *Service) GetTool(ctx context.Context, request GetToolRequestObject) (GetToolResponseObject, error) {
	// Call repository to fetch entity
	entity, err := s.repo.Get(ctx, request.ID)
	if err != nil {
		if errors.Is(err, ErrToolNotFound) {
			return GetTool404ApplicationProblemPlusJSONResponse{
				NotFoundApplicationProblemPlusJSONResponse: NotFoundApplicationProblemPlusJSONResponse{
					Detail: "Tool not found",
					Status: 404,
					Title:  "Not Found",
					Type:   "about:blank",
				},
			}, nil
		}

		s.logger.Error("Failed to get tool", "error", err, "id", request.ID)
		return GetTool404ApplicationProblemPlusJSONResponse{
			NotFoundApplicationProblemPlusJSONResponse: NotFoundApplicationProblemPlusJSONResponse{
				Detail: "Failed to retrieve tool",
				Status: 404,
				Title:  "Not Found",
				Type:   "about:blank",
			},
		}, nil
	}

	return GetTool200JSONResponse{
		Data: *entity,
	}, nil
}

// UpdateTool updates a tool
func (s *Service) UpdateTool(ctx context.Context, request UpdateToolRequestObject) (UpdateToolResponseObject, error) {
	if request.Body == nil {
		return UpdateTool404ApplicationProblemPlusJSONResponse{
			NotFoundApplicationProblemPlusJSONResponse: NotFoundApplicationProblemPlusJSONResponse{
				Detail: "Request body is required",
				Status: 400,
				Title:  "Bad Request",
				Type:   "about:blank",
			},
		}, nil
	}

	// Get existing entity to verify it exists
	existing, err := s.repo.Get(ctx, request.ID)
	if err != nil {
		if errors.Is(err, ErrToolNotFound) {
			return UpdateTool404ApplicationProblemPlusJSONResponse{
				NotFoundApplicationProblemPlusJSONResponse: NotFoundApplicationProblemPlusJSONResponse{
					Detail: "Tool not found",
					Status: 404,
					Title:  "Not Found",
					Type:   "about:blank",
				},
			}, nil
		}
		s.logger.Error("Failed to get tool for update", "error", err, "id", request.ID)
		return UpdateTool404ApplicationProblemPlusJSONResponse{
			NotFoundApplicationProblemPlusJSONResponse: NotFoundApplicationProblemPlusJSONResponse{
				Detail: "Internal server error",
				Status: 500,
				Title:  "Internal Server Error",
				Type:   "about:blank",
			},
		}, nil
	}

	// Update the entity with current timestamp
	existing.UpdatedAt = time.Now()

	// Call repository to persist changes
	updated, err := s.repo.Update(ctx, request.ID, existing)
	if err != nil {
		s.logger.Error("Failed to update tool", "error", err, "id", request.ID)
		return UpdateTool404ApplicationProblemPlusJSONResponse{
			NotFoundApplicationProblemPlusJSONResponse: NotFoundApplicationProblemPlusJSONResponse{
				Detail: "Failed to update tool",
				Status: 500,
				Title:  "Internal Server Error",
				Type:   "about:blank",
			},
		}, nil
	}

	return UpdateTool200JSONResponse{
		Data: *updated,
	}, nil
}

// DeleteTool deletes a tool
func (s *Service) DeleteTool(ctx context.Context, request DeleteToolRequestObject) (DeleteToolResponseObject, error) {
	// Check if entity exists first
	_, err := s.repo.Get(ctx, request.ID)
	if err != nil {
		if errors.Is(err, ErrToolNotFound) {
			return DeleteTool404ApplicationProblemPlusJSONResponse{
				NotFoundApplicationProblemPlusJSONResponse: NotFoundApplicationProblemPlusJSONResponse{
					Detail: "Tool not found",
					Status: 404,
					Title:  "Not Found",
					Type:   "about:blank",
				},
			}, nil
		}
		s.logger.Error("Failed to get tool for deletion", "error", err, "id", request.ID)
		return DeleteTool404ApplicationProblemPlusJSONResponse{
			NotFoundApplicationProblemPlusJSONResponse: NotFoundApplicationProblemPlusJSONResponse{
				Detail: "Internal server error",
				Status: 500,
				Title:  "Internal Server Error",
				Type:   "about:blank",
			},
		}, nil
	}

	// Delete the entity
	err = s.repo.Delete(ctx, request.ID)
	if err != nil {
		s.logger.Error("Failed to delete tool", "error", err, "id", request.ID)
		return DeleteTool404ApplicationProblemPlusJSONResponse{
			NotFoundApplicationProblemPlusJSONResponse: NotFoundApplicationProblemPlusJSONResponse{
				Detail: "Failed to delete tool",
				Status: 500,
				Title:  "Internal Server Error",
				Type:   "about:blank",
			},
		}, nil
	}

	return DeleteTool200JSONResponse{}, nil
}

// ListTools lists all tools
func (s *Service) ListTools(ctx context.Context, request ListToolsRequestObject) (ListToolsResponseObject, error) {
	// Call repository to fetch entities using the request parameters
	entities, total, err := s.repo.List(ctx, request.Params)
	if err != nil {
		s.logger.Error("Failed to list tools", "error", err)
		return ListTools400ApplicationProblemPlusJSONResponse{
			BadRequestApplicationProblemPlusJSONResponse: BadRequestApplicationProblemPlusJSONResponse{
				Detail: "Failed to list tools",
				Status: 500,
				Title:  "Internal Server Error",
				Type:   "about:blank",
			},
		}, nil
	}

	// Convert entities to response format
	var responseData []Tool
	for _, entity := range entities {
		if entity != nil {
			responseData = append(responseData, *entity)
		}
	}

	return ListTools200JSONResponse{
		Data: responseData,
		Meta: struct {
			Total float32 `json:"total"`
		}{
			Total: float32(total),
		},
	}, nil
}
