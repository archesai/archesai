// Code generated by archesai/codegen. DO NOT EDIT.

package tools

import (
	"context"
	"errors"
	"log/slog"
	"time"

	"github.com/archesai/archesai/internal/database/postgresql"
	"github.com/google/uuid"
)

// Service implements the business logic
type Service struct {
	repo   Repository
	db     *postgresql.Queries
	logger *slog.Logger
}

// NewService creates a new service implementation
func NewService(repo Repository, db *postgresql.Queries, logger *slog.Logger) *Service {
	return &Service{
		repo:   repo,
		db:     db,
		logger: logger,
	}
}

// CreateTool creates a new tool
func (s *Service) CreateTool(ctx context.Context, entity *Tool) (*Tool, error) {
	if entity == nil {
		return nil, errors.New("entity is required")
	}

	// Set timestamps if not already set
	if entity.CreatedAt.IsZero() {
		entity.CreatedAt = time.Now()
	}
	if entity.UpdatedAt.IsZero() {
		entity.UpdatedAt = time.Now()
	}

	created, err := s.repo.Create(ctx, entity)
	if err != nil {
		s.logger.Error("Failed to create tool", "error", err)
		return nil, err
	}

	return created, nil
}

// GetTool gets a tool by ID
func (s *Service) GetTool(ctx context.Context, id uuid.UUID) (*Tool, error) {
	entity, err := s.repo.Get(ctx, id)
	if err != nil {
		if errors.Is(err, ErrToolNotFound) {
			return nil, err
		}
		s.logger.Error("Failed to get tool", "error", err, "id", id)
		return nil, err
	}

	return entity, nil
}

// UpdateTool updates a tool
func (s *Service) UpdateTool(ctx context.Context, id uuid.UUID, entity *Tool) (*Tool, error) {
	if entity == nil {
		return nil, errors.New("entity is required")
	}

	// Set updated timestamp
	entity.UpdatedAt = time.Now()

	updated, err := s.repo.Update(ctx, id, entity)
	if err != nil {
		s.logger.Error("Failed to update tool", "error", err, "id", id)
		return nil, err
	}

	return updated, nil
}

// DeleteTool deletes a tool
func (s *Service) DeleteTool(ctx context.Context, id uuid.UUID) error {
	// Check if entity exists first
	_, err := s.repo.Get(ctx, id)
	if err != nil {
		if errors.Is(err, ErrToolNotFound) {
			return err
		}
		s.logger.Error("Failed to get tool for deletion", "error", err, "id", id)
		return err
	}

	err = s.repo.Delete(ctx, id)
	if err != nil {
		s.logger.Error("Failed to delete tool", "error", err, "id", id)
		return err
	}

	return nil
}

// ListTools lists all tools
func (s *Service) ListTools(ctx context.Context, filter *ListToolsParamsFilter, page *ListToolsParamsPage, sort *ListToolsParamsSort) ([]*Tool, int64, error) {
	params := ListToolsParams{
		Filter: filter,
		Page:   page,
		Sort:   sort,
	}
	entities, total, err := s.repo.List(ctx, params)
	if err != nil {
		s.logger.Error("Failed to list tools", "error", err)
		return nil, 0, err
	}

	return entities, total, nil
}
