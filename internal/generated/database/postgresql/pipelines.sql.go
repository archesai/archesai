// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: pipelines.sql

package postgresql

import (
	"context"
)

const createPipeline = `-- name: CreatePipeline :one
INSERT INTO pipeline (
    organization_id,
    name,
    description
) VALUES (
    $1, $2, $3
)
RETURNING id, created_at, updated_at, description, name, organization_id
`

type CreatePipelineParams struct {
	OrganizationID string  `json:"organization_id"`
	Name           *string `json:"name"`
	Description    *string `json:"description"`
}

func (q *Queries) CreatePipeline(ctx context.Context, arg CreatePipelineParams) (Pipeline, error) {
	row := q.db.QueryRow(ctx, createPipeline, arg.OrganizationID, arg.Name, arg.Description)
	var i Pipeline
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Name,
		&i.OrganizationID,
	)
	return i, err
}

const deletePipeline = `-- name: DeletePipeline :exec
DELETE FROM pipeline
WHERE id = $1
`

func (q *Queries) DeletePipeline(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deletePipeline, id)
	return err
}

const deletePipelinesByOrganization = `-- name: DeletePipelinesByOrganization :exec
DELETE FROM pipeline
WHERE organization_id = $1
`

func (q *Queries) DeletePipelinesByOrganization(ctx context.Context, organizationID string) error {
	_, err := q.db.Exec(ctx, deletePipelinesByOrganization, organizationID)
	return err
}

const getPipeline = `-- name: GetPipeline :one
SELECT id, created_at, updated_at, description, name, organization_id FROM pipeline
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPipeline(ctx context.Context, id string) (Pipeline, error) {
	row := q.db.QueryRow(ctx, getPipeline, id)
	var i Pipeline
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Name,
		&i.OrganizationID,
	)
	return i, err
}

const listPipelines = `-- name: ListPipelines :many
SELECT id, created_at, updated_at, description, name, organization_id FROM pipeline
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListPipelinesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPipelines(ctx context.Context, arg ListPipelinesParams) ([]Pipeline, error) {
	rows, err := q.db.Query(ctx, listPipelines, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pipeline
	for rows.Next() {
		var i Pipeline
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.Name,
			&i.OrganizationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPipelinesByOrganization = `-- name: ListPipelinesByOrganization :many
SELECT id, created_at, updated_at, description, name, organization_id FROM pipeline
WHERE organization_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListPipelinesByOrganizationParams struct {
	OrganizationID string `json:"organization_id"`
	Limit          int32  `json:"limit"`
	Offset         int32  `json:"offset"`
}

func (q *Queries) ListPipelinesByOrganization(ctx context.Context, arg ListPipelinesByOrganizationParams) ([]Pipeline, error) {
	rows, err := q.db.Query(ctx, listPipelinesByOrganization, arg.OrganizationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pipeline
	for rows.Next() {
		var i Pipeline
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.Name,
			&i.OrganizationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePipeline = `-- name: UpdatePipeline :one
UPDATE pipeline
SET 
    name = COALESCE($2, name),
    description = COALESCE($3, description)
WHERE id = $1
RETURNING id, created_at, updated_at, description, name, organization_id
`

type UpdatePipelineParams struct {
	ID          string  `json:"id"`
	Name        *string `json:"name"`
	Description *string `json:"description"`
}

func (q *Queries) UpdatePipeline(ctx context.Context, arg UpdatePipelineParams) (Pipeline, error) {
	row := q.db.QueryRow(ctx, updatePipeline, arg.ID, arg.Name, arg.Description)
	var i Pipeline
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Name,
		&i.OrganizationID,
	)
	return i, err
}
