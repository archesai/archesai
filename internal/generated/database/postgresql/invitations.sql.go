// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: invitations.sql

package postgresql

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInvitation = `-- name: CreateInvitation :one
INSERT INTO invitation (
    organization_id,
    inviter_id,
    email,
    role,
    expires_at,
    status
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, created_at, updated_at, email, expires_at, inviter_id, organization_id, role, status
`

type CreateInvitationParams struct {
	OrganizationId string    `json:"organization_id"`
	InviterId      string    `json:"inviter_id"`
	Email          string    `json:"email"`
	Role           Role      `json:"role"`
	ExpiresAt      time.Time `json:"expires_at"`
	Status         string    `json:"status"`
}

func (q *Queries) CreateInvitation(ctx context.Context, arg CreateInvitationParams) (Invitation, error) {
	row := q.db.QueryRow(ctx, createInvitation,
		arg.OrganizationId,
		arg.InviterId,
		arg.Email,
		arg.Role,
		arg.ExpiresAt,
		arg.Status,
	)
	var i Invitation
	err := row.Scan(
		&i.Id,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.ExpiresAt,
		&i.InviterId,
		&i.OrganizationId,
		&i.Role,
		&i.Status,
	)
	return i, err
}

const deleteInvitation = `-- name: DeleteInvitation :exec
DELETE FROM invitation
WHERE id = $1
`

func (q *Queries) DeleteInvitation(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteInvitation, id)
	return err
}

const deleteInvitationsByOrganization = `-- name: DeleteInvitationsByOrganization :exec
DELETE FROM invitation
WHERE organization_id = $1
`

func (q *Queries) DeleteInvitationsByOrganization(ctx context.Context, organizationID string) error {
	_, err := q.db.Exec(ctx, deleteInvitationsByOrganization, organizationID)
	return err
}

const getInvitation = `-- name: GetInvitation :one
SELECT id, created_at, updated_at, email, expires_at, inviter_id, organization_id, role, status FROM invitation
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetInvitation(ctx context.Context, id string) (Invitation, error) {
	row := q.db.QueryRow(ctx, getInvitation, id)
	var i Invitation
	err := row.Scan(
		&i.Id,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.ExpiresAt,
		&i.InviterId,
		&i.OrganizationId,
		&i.Role,
		&i.Status,
	)
	return i, err
}

const getInvitationByEmail = `-- name: GetInvitationByEmail :one
SELECT id, created_at, updated_at, email, expires_at, inviter_id, organization_id, role, status FROM invitation
WHERE organization_id = $1 AND email = $2 LIMIT 1
`

type GetInvitationByEmailParams struct {
	OrganizationId string `json:"organization_id"`
	Email          string `json:"email"`
}

func (q *Queries) GetInvitationByEmail(ctx context.Context, arg GetInvitationByEmailParams) (Invitation, error) {
	row := q.db.QueryRow(ctx, getInvitationByEmail, arg.OrganizationId, arg.Email)
	var i Invitation
	err := row.Scan(
		&i.Id,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.ExpiresAt,
		&i.InviterId,
		&i.OrganizationId,
		&i.Role,
		&i.Status,
	)
	return i, err
}

const listInvitations = `-- name: ListInvitations :many
SELECT id, created_at, updated_at, email, expires_at, inviter_id, organization_id, role, status FROM invitation
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListInvitationsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListInvitations(ctx context.Context, arg ListInvitationsParams) ([]Invitation, error) {
	rows, err := q.db.Query(ctx, listInvitations, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invitation
	for rows.Next() {
		var i Invitation
		if err := rows.Scan(
			&i.Id,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.ExpiresAt,
			&i.InviterId,
			&i.OrganizationId,
			&i.Role,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listInvitationsByInviter = `-- name: ListInvitationsByInviter :many
SELECT id, created_at, updated_at, email, expires_at, inviter_id, organization_id, role, status FROM invitation
WHERE inviter_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListInvitationsByInviterParams struct {
	InviterId string `json:"inviter_id"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
}

func (q *Queries) ListInvitationsByInviter(ctx context.Context, arg ListInvitationsByInviterParams) ([]Invitation, error) {
	rows, err := q.db.Query(ctx, listInvitationsByInviter, arg.InviterId, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invitation
	for rows.Next() {
		var i Invitation
		if err := rows.Scan(
			&i.Id,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.ExpiresAt,
			&i.InviterId,
			&i.OrganizationId,
			&i.Role,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listInvitationsByOrganization = `-- name: ListInvitationsByOrganization :many
SELECT id, created_at, updated_at, email, expires_at, inviter_id, organization_id, role, status FROM invitation
WHERE organization_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListInvitationsByOrganizationParams struct {
	OrganizationId string `json:"organization_id"`
	Limit          int32  `json:"limit"`
	Offset         int32  `json:"offset"`
}

func (q *Queries) ListInvitationsByOrganization(ctx context.Context, arg ListInvitationsByOrganizationParams) ([]Invitation, error) {
	rows, err := q.db.Query(ctx, listInvitationsByOrganization, arg.OrganizationId, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invitation
	for rows.Next() {
		var i Invitation
		if err := rows.Scan(
			&i.Id,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Email,
			&i.ExpiresAt,
			&i.InviterId,
			&i.OrganizationId,
			&i.Role,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInvitation = `-- name: UpdateInvitation :one
UPDATE invitation
SET 
    email = COALESCE($2, email),
    role = COALESCE($3, role),
    expires_at = COALESCE($4, expires_at),
    status = COALESCE($5, status),
    updated_at = NOW()
WHERE id = $1
RETURNING id, created_at, updated_at, email, expires_at, inviter_id, organization_id, role, status
`

type UpdateInvitationParams struct {
	Id        string             `json:"id"`
	Email     *string            `json:"email"`
	Role      NullRole           `json:"role"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
	Status    *string            `json:"status"`
}

func (q *Queries) UpdateInvitation(ctx context.Context, arg UpdateInvitationParams) (Invitation, error) {
	row := q.db.QueryRow(ctx, updateInvitation,
		arg.Id,
		arg.Email,
		arg.Role,
		arg.ExpiresAt,
		arg.Status,
	)
	var i Invitation
	err := row.Scan(
		&i.Id,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.ExpiresAt,
		&i.InviterId,
		&i.OrganizationId,
		&i.Role,
		&i.Status,
	)
	return i, err
}
