// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: runs.sql

package postgresql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRun = `-- name: CreateRun :one
INSERT INTO run (
    organization_id,
    pipeline_id,
    tool_id,
    status,
    progress
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, created_at, updated_at, completed_at, error, organization_id, pipeline_id, progress, started_at, status, tool_id
`

type CreateRunParams struct {
	OrganizationID string    `json:"organization_id"`
	PipelineID     *string   `json:"pipeline_id"`
	ToolID         string    `json:"tool_id"`
	Status         RunStatus `json:"status"`
	Progress       float64   `json:"progress"`
}

func (q *Queries) CreateRun(ctx context.Context, arg CreateRunParams) (Run, error) {
	row := q.db.QueryRow(ctx, createRun,
		arg.OrganizationID,
		arg.PipelineID,
		arg.ToolID,
		arg.Status,
		arg.Progress,
	)
	var i Run
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
		&i.Error,
		&i.OrganizationID,
		&i.PipelineID,
		&i.Progress,
		&i.StartedAt,
		&i.Status,
		&i.ToolID,
	)
	return i, err
}

const deleteRun = `-- name: DeleteRun :exec
DELETE FROM run
WHERE id = $1
`

func (q *Queries) DeleteRun(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteRun, id)
	return err
}

const deleteRunsByPipeline = `-- name: DeleteRunsByPipeline :exec
DELETE FROM run
WHERE pipeline_id = $1
`

func (q *Queries) DeleteRunsByPipeline(ctx context.Context, pipelineID *string) error {
	_, err := q.db.Exec(ctx, deleteRunsByPipeline, pipelineID)
	return err
}

const getRun = `-- name: GetRun :one
SELECT id, created_at, updated_at, completed_at, error, organization_id, pipeline_id, progress, started_at, status, tool_id FROM run
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRun(ctx context.Context, id string) (Run, error) {
	row := q.db.QueryRow(ctx, getRun, id)
	var i Run
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
		&i.Error,
		&i.OrganizationID,
		&i.PipelineID,
		&i.Progress,
		&i.StartedAt,
		&i.Status,
		&i.ToolID,
	)
	return i, err
}

const listRuns = `-- name: ListRuns :many
SELECT id, created_at, updated_at, completed_at, error, organization_id, pipeline_id, progress, started_at, status, tool_id FROM run
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListRunsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRuns(ctx context.Context, arg ListRunsParams) ([]Run, error) {
	rows, err := q.db.Query(ctx, listRuns, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Run
	for rows.Next() {
		var i Run
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CompletedAt,
			&i.Error,
			&i.OrganizationID,
			&i.PipelineID,
			&i.Progress,
			&i.StartedAt,
			&i.Status,
			&i.ToolID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRunsByOrganization = `-- name: ListRunsByOrganization :many
SELECT id, created_at, updated_at, completed_at, error, organization_id, pipeline_id, progress, started_at, status, tool_id FROM run
WHERE organization_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListRunsByOrganizationParams struct {
	OrganizationID string `json:"organization_id"`
	Limit          int32  `json:"limit"`
	Offset         int32  `json:"offset"`
}

func (q *Queries) ListRunsByOrganization(ctx context.Context, arg ListRunsByOrganizationParams) ([]Run, error) {
	rows, err := q.db.Query(ctx, listRunsByOrganization, arg.OrganizationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Run
	for rows.Next() {
		var i Run
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CompletedAt,
			&i.Error,
			&i.OrganizationID,
			&i.PipelineID,
			&i.Progress,
			&i.StartedAt,
			&i.Status,
			&i.ToolID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRunsByPipeline = `-- name: ListRunsByPipeline :many
SELECT id, created_at, updated_at, completed_at, error, organization_id, pipeline_id, progress, started_at, status, tool_id FROM run
WHERE pipeline_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListRunsByPipelineParams struct {
	PipelineID *string `json:"pipeline_id"`
	Limit      int32   `json:"limit"`
	Offset     int32   `json:"offset"`
}

func (q *Queries) ListRunsByPipeline(ctx context.Context, arg ListRunsByPipelineParams) ([]Run, error) {
	rows, err := q.db.Query(ctx, listRunsByPipeline, arg.PipelineID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Run
	for rows.Next() {
		var i Run
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CompletedAt,
			&i.Error,
			&i.OrganizationID,
			&i.PipelineID,
			&i.Progress,
			&i.StartedAt,
			&i.Status,
			&i.ToolID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRunsByTool = `-- name: ListRunsByTool :many
SELECT id, created_at, updated_at, completed_at, error, organization_id, pipeline_id, progress, started_at, status, tool_id FROM run
WHERE tool_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListRunsByToolParams struct {
	ToolID string `json:"tool_id"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListRunsByTool(ctx context.Context, arg ListRunsByToolParams) ([]Run, error) {
	rows, err := q.db.Query(ctx, listRunsByTool, arg.ToolID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Run
	for rows.Next() {
		var i Run
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CompletedAt,
			&i.Error,
			&i.OrganizationID,
			&i.PipelineID,
			&i.Progress,
			&i.StartedAt,
			&i.Status,
			&i.ToolID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRun = `-- name: UpdateRun :one
UPDATE run
SET 
    pipeline_id = COALESCE($2, pipeline_id),
    tool_id = COALESCE($3, tool_id),
    status = COALESCE($4, status),
    progress = COALESCE($5, progress),
    error = COALESCE($6, error),
    started_at = COALESCE($7, started_at),
    completed_at = COALESCE($8, completed_at),
    updated_at = NOW()
WHERE id = $1
RETURNING id, created_at, updated_at, completed_at, error, organization_id, pipeline_id, progress, started_at, status, tool_id
`

type UpdateRunParams struct {
	ID          string             `json:"id"`
	PipelineID  *string            `json:"pipeline_id"`
	ToolID      *string            `json:"tool_id"`
	Status      NullRunStatus      `json:"status"`
	Progress    pgtype.Float8      `json:"progress"`
	Error       *string            `json:"error"`
	StartedAt   pgtype.Timestamptz `json:"started_at"`
	CompletedAt pgtype.Timestamptz `json:"completed_at"`
}

func (q *Queries) UpdateRun(ctx context.Context, arg UpdateRunParams) (Run, error) {
	row := q.db.QueryRow(ctx, updateRun,
		arg.ID,
		arg.PipelineID,
		arg.ToolID,
		arg.Status,
		arg.Progress,
		arg.Error,
		arg.StartedAt,
		arg.CompletedAt,
	)
	var i Run
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CompletedAt,
		&i.Error,
		&i.OrganizationID,
		&i.PipelineID,
		&i.Progress,
		&i.StartedAt,
		&i.Status,
		&i.ToolID,
	)
	return i, err
}
