// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: tools.sql

package postgresql

import (
	"context"
)

const createTool = `-- name: CreateTool :one
INSERT INTO tool (
    organization_id,
    name,
    description,
    input_mime_type,
    output_mime_type
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, created_at, updated_at, description, input_mime_type, name, organization_id, output_mime_type
`

type CreateToolParams struct {
	OrganizationID string `json:"organization_id"`
	Name           string `json:"name"`
	Description    string `json:"description"`
	InputMimeType  string `json:"input_mime_type"`
	OutputMimeType string `json:"output_mime_type"`
}

func (q *Queries) CreateTool(ctx context.Context, arg CreateToolParams) (Tool, error) {
	row := q.db.QueryRow(ctx, createTool,
		arg.OrganizationID,
		arg.Name,
		arg.Description,
		arg.InputMimeType,
		arg.OutputMimeType,
	)
	var i Tool
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.InputMimeType,
		&i.Name,
		&i.OrganizationID,
		&i.OutputMimeType,
	)
	return i, err
}

const deleteTool = `-- name: DeleteTool :exec
DELETE FROM tool
WHERE id = $1
`

func (q *Queries) DeleteTool(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteTool, id)
	return err
}

const deleteToolsByOrganization = `-- name: DeleteToolsByOrganization :exec
DELETE FROM tool
WHERE organization_id = $1
`

func (q *Queries) DeleteToolsByOrganization(ctx context.Context, organizationID string) error {
	_, err := q.db.Exec(ctx, deleteToolsByOrganization, organizationID)
	return err
}

const getTool = `-- name: GetTool :one
SELECT id, created_at, updated_at, description, input_mime_type, name, organization_id, output_mime_type FROM tool
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTool(ctx context.Context, id string) (Tool, error) {
	row := q.db.QueryRow(ctx, getTool, id)
	var i Tool
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.InputMimeType,
		&i.Name,
		&i.OrganizationID,
		&i.OutputMimeType,
	)
	return i, err
}

const listTools = `-- name: ListTools :many
SELECT id, created_at, updated_at, description, input_mime_type, name, organization_id, output_mime_type FROM tool
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListToolsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTools(ctx context.Context, arg ListToolsParams) ([]Tool, error) {
	rows, err := q.db.Query(ctx, listTools, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tool
	for rows.Next() {
		var i Tool
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.InputMimeType,
			&i.Name,
			&i.OrganizationID,
			&i.OutputMimeType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listToolsByOrganization = `-- name: ListToolsByOrganization :many
SELECT id, created_at, updated_at, description, input_mime_type, name, organization_id, output_mime_type FROM tool
WHERE organization_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListToolsByOrganizationParams struct {
	OrganizationID string `json:"organization_id"`
	Limit          int32  `json:"limit"`
	Offset         int32  `json:"offset"`
}

func (q *Queries) ListToolsByOrganization(ctx context.Context, arg ListToolsByOrganizationParams) ([]Tool, error) {
	rows, err := q.db.Query(ctx, listToolsByOrganization, arg.OrganizationID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tool
	for rows.Next() {
		var i Tool
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.InputMimeType,
			&i.Name,
			&i.OrganizationID,
			&i.OutputMimeType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTool = `-- name: UpdateTool :one
UPDATE tool
SET 
    name = COALESCE($2, name),
    description = COALESCE($3, description),
    input_mime_type = COALESCE($4, input_mime_type),
    output_mime_type = COALESCE($5, output_mime_type)
WHERE id = $1
RETURNING id, created_at, updated_at, description, input_mime_type, name, organization_id, output_mime_type
`

type UpdateToolParams struct {
	ID             string  `json:"id"`
	Name           *string `json:"name"`
	Description    *string `json:"description"`
	InputMimeType  *string `json:"input_mime_type"`
	OutputMimeType *string `json:"output_mime_type"`
}

func (q *Queries) UpdateTool(ctx context.Context, arg UpdateToolParams) (Tool, error) {
	row := q.db.QueryRow(ctx, updateTool,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.InputMimeType,
		arg.OutputMimeType,
	)
	var i Tool
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.InputMimeType,
		&i.Name,
		&i.OrganizationID,
		&i.OutputMimeType,
	)
	return i, err
}
