// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/xlwD/QMjwEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
