// Package labels provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package labels

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	externalRef0 "github.com/archesai/archesai/internal/generated/api/common"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for FindManyLabelsParamsSortField.
const (
	CreatedAt      FindManyLabelsParamsSortField = "createdAt"
	Id             FindManyLabelsParamsSortField = "id"
	Name           FindManyLabelsParamsSortField = "name"
	OrganizationId FindManyLabelsParamsSortField = "organizationId"
	UpdatedAt      FindManyLabelsParamsSortField = "updatedAt"
)

// Defines values for FindManyLabelsParamsSortOrder.
const (
	Asc  FindManyLabelsParamsSortOrder = "asc"
	Desc FindManyLabelsParamsSortOrder = "desc"
)

// FindManyLabelsParams defines parameters for FindManyLabels.
type FindManyLabelsParams struct {
	// Filter Filter labels by field values. Supported fields:
	// - createdAt, id, updatedAt, name, organizationId
	Filter *LabelsFilter           `json:"filter,omitempty"`
	Page   *externalRef0.PageQuery `form:"page,omitempty" json:"page,omitempty"`
	Sort   *LabelsSort             `form:"sort,omitempty" json:"sort,omitempty"`
}

// FindManyLabelsParamsSortField defines parameters for FindManyLabels.
type FindManyLabelsParamsSortField string

// FindManyLabelsParamsSortOrder defines parameters for FindManyLabels.
type FindManyLabelsParamsSortOrder string

// CreateLabelJSONBody defines parameters for CreateLabel.
type CreateLabelJSONBody struct {
	// Name The name of the label
	Name string `json:"name"`
}

// UpdateLabelJSONBody defines parameters for UpdateLabel.
type UpdateLabelJSONBody struct {
	// Name The name of the label
	Name *string `json:"name,omitempty"`
}

// CreateLabelJSONRequestBody defines body for CreateLabel for application/json ContentType.
type CreateLabelJSONRequestBody CreateLabelJSONBody

// UpdateLabelJSONRequestBody defines body for UpdateLabel for application/json ContentType.
type UpdateLabelJSONRequestBody UpdateLabelJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Find many labels
	// (GET /labels)
	FindManyLabels(ctx echo.Context, params FindManyLabelsParams) error
	// Create a new label
	// (POST /labels)
	CreateLabel(ctx echo.Context) error
	// Delete a label
	// (DELETE /labels/{id})
	DeleteLabel(ctx echo.Context, id openapi_types.UUID) error
	// Find a label
	// (GET /labels/{id})
	GetOneLabel(ctx echo.Context, id openapi_types.UUID) error
	// Update a label
	// (PATCH /labels/{id})
	UpdateLabel(ctx echo.Context, id openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindManyLabels converts echo context to params.
func (w *ServerInterfaceWrapper) FindManyLabels(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindManyLabelsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindManyLabels(ctx, params)
	return err
}

// CreateLabel converts echo context to params.
func (w *ServerInterfaceWrapper) CreateLabel(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateLabel(ctx)
	return err
}

// DeleteLabel converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLabel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLabel(ctx, id)
	return err
}

// GetOneLabel converts echo context to params.
func (w *ServerInterfaceWrapper) GetOneLabel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOneLabel(ctx, id)
	return err
}

// UpdateLabel converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateLabel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateLabel(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/labels", wrapper.FindManyLabels)
	router.POST(baseURL+"/labels", wrapper.CreateLabel)
	router.DELETE(baseURL+"/labels/:id", wrapper.DeleteLabel)
	router.GET(baseURL+"/labels/:id", wrapper.GetOneLabel)
	router.PATCH(baseURL+"/labels/:id", wrapper.UpdateLabel)

}

type FindManyLabelsRequestObject struct {
	Params FindManyLabelsParams
}

type FindManyLabelsResponseObject interface {
	VisitFindManyLabelsResponse(w http.ResponseWriter) error
}

type FindManyLabels200JSONResponse struct {
	Data []LabelEntity `json:"data"`
	Meta struct {
		// Total Total number of items in the collection
		Total float32 `json:"total"`
	} `json:"meta"`
}

func (response FindManyLabels200JSONResponse) VisitFindManyLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateLabelRequestObject struct {
	Body *CreateLabelJSONRequestBody
}

type CreateLabelResponseObject interface {
	VisitCreateLabelResponse(w http.ResponseWriter) error
}

type CreateLabel201JSONResponse struct {
	// Data Schema for Label entity
	Data LabelEntity `json:"data"`
}

func (response CreateLabel201JSONResponse) VisitCreateLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteLabelRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteLabelResponseObject interface {
	VisitDeleteLabelResponse(w http.ResponseWriter) error
}

type DeleteLabel200JSONResponse struct {
	// Data Schema for Label entity
	Data LabelEntity `json:"data"`
}

func (response DeleteLabel200JSONResponse) VisitDeleteLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteLabel404JSONResponse struct{ externalRef0.NotFound }

func (response DeleteLabel404JSONResponse) VisitDeleteLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetOneLabelRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetOneLabelResponseObject interface {
	VisitGetOneLabelResponse(w http.ResponseWriter) error
}

type GetOneLabel200JSONResponse struct {
	// Data Schema for Label entity
	Data LabelEntity `json:"data"`
}

func (response GetOneLabel200JSONResponse) VisitGetOneLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOneLabel404JSONResponse struct{ externalRef0.NotFound }

func (response GetOneLabel404JSONResponse) VisitGetOneLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateLabelRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *UpdateLabelJSONRequestBody
}

type UpdateLabelResponseObject interface {
	VisitUpdateLabelResponse(w http.ResponseWriter) error
}

type UpdateLabel200JSONResponse struct {
	// Data Schema for Label entity
	Data LabelEntity `json:"data"`
}

func (response UpdateLabel200JSONResponse) VisitUpdateLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateLabel404JSONResponse struct{ externalRef0.NotFound }

func (response UpdateLabel404JSONResponse) VisitUpdateLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Find many labels
	// (GET /labels)
	FindManyLabels(ctx context.Context, request FindManyLabelsRequestObject) (FindManyLabelsResponseObject, error)
	// Create a new label
	// (POST /labels)
	CreateLabel(ctx context.Context, request CreateLabelRequestObject) (CreateLabelResponseObject, error)
	// Delete a label
	// (DELETE /labels/{id})
	DeleteLabel(ctx context.Context, request DeleteLabelRequestObject) (DeleteLabelResponseObject, error)
	// Find a label
	// (GET /labels/{id})
	GetOneLabel(ctx context.Context, request GetOneLabelRequestObject) (GetOneLabelResponseObject, error)
	// Update a label
	// (PATCH /labels/{id})
	UpdateLabel(ctx context.Context, request UpdateLabelRequestObject) (UpdateLabelResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// FindManyLabels operation middleware
func (sh *strictHandler) FindManyLabels(ctx echo.Context, params FindManyLabelsParams) error {
	var request FindManyLabelsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FindManyLabels(ctx.Request().Context(), request.(FindManyLabelsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindManyLabels")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FindManyLabelsResponseObject); ok {
		return validResponse.VisitFindManyLabelsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateLabel operation middleware
func (sh *strictHandler) CreateLabel(ctx echo.Context) error {
	var request CreateLabelRequestObject

	var body CreateLabelJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateLabel(ctx.Request().Context(), request.(CreateLabelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateLabel")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateLabelResponseObject); ok {
		return validResponse.VisitCreateLabelResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteLabel operation middleware
func (sh *strictHandler) DeleteLabel(ctx echo.Context, id openapi_types.UUID) error {
	var request DeleteLabelRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteLabel(ctx.Request().Context(), request.(DeleteLabelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteLabel")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteLabelResponseObject); ok {
		return validResponse.VisitDeleteLabelResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetOneLabel operation middleware
func (sh *strictHandler) GetOneLabel(ctx echo.Context, id openapi_types.UUID) error {
	var request GetOneLabelRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOneLabel(ctx.Request().Context(), request.(GetOneLabelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOneLabel")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetOneLabelResponseObject); ok {
		return validResponse.VisitGetOneLabelResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateLabel operation middleware
func (sh *strictHandler) UpdateLabel(ctx echo.Context, id openapi_types.UUID) error {
	var request UpdateLabelRequestObject

	request.Id = id

	var body UpdateLabelJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateLabel(ctx.Request().Context(), request.(UpdateLabelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateLabel")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateLabelResponseObject); ok {
		return validResponse.VisitUpdateLabelResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
