// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Find many accounts
	// (GET /auth/accounts)
	AccountsFindMany(ctx echo.Context, params AccountsFindManyParams) error
	// Delete an account
	// (DELETE /auth/accounts/{id})
	AccountsDelete(ctx echo.Context, id openapi_types.UUID) error
	// Find an account
	// (GET /auth/accounts/{id})
	AccountsGetOne(ctx echo.Context, id openapi_types.UUID) error
	// Request e-mail change
	// (POST /auth/email-change/request)
	RequestEmailChange(ctx echo.Context) error
	// Verify e-mail change
	// (POST /auth/email-change/verify)
	ConfirmEmailChange(ctx echo.Context) error
	// Request e-mail verification
	// (POST /auth/email-verification/request)
	RequestEmailVerification(ctx echo.Context) error
	// Confirm e-mail verification
	// (POST /auth/email-verification/verify)
	ConfirmEmailVerification(ctx echo.Context) error
	// Find many invitations
	// (GET /auth/invitations)
	FindManyInvitations(ctx echo.Context, params FindManyInvitationsParams) error
	// Create a new invitation
	// (POST /auth/invitations)
	CreateInvitation(ctx echo.Context) error
	// Delete an invitation
	// (DELETE /auth/invitations/{id})
	DeleteInvitation(ctx echo.Context, id openapi_types.UUID) error
	// Find an invitation
	// (GET /auth/invitations/{id})
	GetOneInvitation(ctx echo.Context, id openapi_types.UUID) error
	// Update an invitation
	// (PATCH /auth/invitations/{id})
	UpdateInvitation(ctx echo.Context, id openapi_types.UUID) error
	// Find many members
	// (GET /auth/members)
	FindManyMembers(ctx echo.Context, params FindManyMembersParams) error
	// Create a new member
	// (POST /auth/members)
	CreateMember(ctx echo.Context) error
	// Delete a member
	// (DELETE /auth/members/{id})
	DeleteMember(ctx echo.Context, id openapi_types.UUID) error
	// Find a member
	// (GET /auth/members/{id})
	GetOneMember(ctx echo.Context, id openapi_types.UUID) error
	// Update a member
	// (PATCH /auth/members/{id})
	UpdateMember(ctx echo.Context, id openapi_types.UUID) error
	// Find many organizations
	// (GET /auth/organizations)
	FindManyOrganizations(ctx echo.Context, params FindManyOrganizationsParams) error
	// Create a new organization
	// (POST /auth/organizations)
	CreateOrganization(ctx echo.Context) error
	// Delete an organization
	// (DELETE /auth/organizations/{id})
	DeleteOrganization(ctx echo.Context, id openapi_types.UUID) error
	// Find an organization
	// (GET /auth/organizations/{id})
	GetOneOrganization(ctx echo.Context, id openapi_types.UUID) error
	// Update an organization
	// (PATCH /auth/organizations/{id})
	UpdateOrganization(ctx echo.Context, id openapi_types.UUID) error
	// Request password reset
	// (POST /auth/password-reset/request)
	RequestPasswordReset(ctx echo.Context) error
	// Verify password reset
	// (POST /auth/password-reset/verify)
	ConfirmPasswordReset(ctx echo.Context) error
	// Find many sessions
	// (GET /auth/sessions)
	FindManySessions(ctx echo.Context, params FindManySessionsParams) error
	// Delete a session
	// (DELETE /auth/sessions/{id})
	DeleteSession(ctx echo.Context, id openapi_types.UUID) error
	// Find a session
	// (GET /auth/sessions/{id})
	GetOneSession(ctx echo.Context, id openapi_types.UUID) error
	// Update Session
	// (PATCH /auth/sessions/{id})
	UpdateSession(ctx echo.Context, id openapi_types.UUID) error
	// Login
	// (POST /auth/sign-in)
	Login(ctx echo.Context) error
	// Logout
	// (POST /auth/sign-out)
	Logout(ctx echo.Context) error
	// Register
	// (POST /auth/sign-up)
	Register(ctx echo.Context) error
	// Find many users
	// (GET /auth/users)
	FindManyUsers(ctx echo.Context, params FindManyUsersParams) error
	// Delete an user
	// (DELETE /auth/users/{id})
	DeleteUser(ctx echo.Context, id openapi_types.UUID) error
	// Find an user
	// (GET /auth/users/{id})
	GetOneUser(ctx echo.Context, id openapi_types.UUID) error
	// Update an user
	// (PATCH /auth/users/{id})
	UpdateUser(ctx echo.Context, id openapi_types.UUID) error
	// Get the configuration
	// (GET /config)
	GetConfig(ctx echo.Context) error
	// Health check endpoint
	// (GET /health)
	GetHealth(ctx echo.Context) error
	// Find many artifacts
	// (GET /intelligence/artifacts)
	FindManyArtifacts(ctx echo.Context, params FindManyArtifactsParams) error
	// Create a new artifact
	// (POST /intelligence/artifacts)
	CreateArtifact(ctx echo.Context) error
	// Delete an artifact
	// (DELETE /intelligence/artifacts/{id})
	DeleteArtifact(ctx echo.Context, id openapi_types.UUID) error
	// Find an artifact
	// (GET /intelligence/artifacts/{id})
	GetOneArtifact(ctx echo.Context, id openapi_types.UUID) error
	// Update an artifact
	// (PATCH /intelligence/artifacts/{id})
	UpdateArtifact(ctx echo.Context, id openapi_types.UUID) error
	// Find many labels
	// (GET /intelligence/labels)
	FindManyLabels(ctx echo.Context, params FindManyLabelsParams) error
	// Create a new label
	// (POST /intelligence/labels)
	CreateLabel(ctx echo.Context) error
	// Delete a label
	// (DELETE /intelligence/labels/{id})
	DeleteLabel(ctx echo.Context, id openapi_types.UUID) error
	// Find a label
	// (GET /intelligence/labels/{id})
	GetOneLabel(ctx echo.Context, id openapi_types.UUID) error
	// Update a label
	// (PATCH /intelligence/labels/{id})
	UpdateLabel(ctx echo.Context, id openapi_types.UUID) error
	// Find many pipelines
	// (GET /intelligence/pipelines)
	FindManyPipelines(ctx echo.Context, params FindManyPipelinesParams) error
	// Create a new pipeline
	// (POST /intelligence/pipelines)
	CreatePipeline(ctx echo.Context) error
	// Delete a pipeline
	// (DELETE /intelligence/pipelines/{id})
	DeletePipeline(ctx echo.Context, id openapi_types.UUID) error
	// Find a pipeline
	// (GET /intelligence/pipelines/{id})
	GetOnePipeline(ctx echo.Context, id openapi_types.UUID) error
	// Update a pipeline
	// (PATCH /intelligence/pipelines/{id})
	UpdatePipeline(ctx echo.Context, id openapi_types.UUID) error
	// Find many runs
	// (GET /intelligence/runs)
	FindManyRuns(ctx echo.Context, params FindManyRunsParams) error
	// Create a new run
	// (POST /intelligence/runs)
	CreateRun(ctx echo.Context) error
	// Delete a run
	// (DELETE /intelligence/runs/{id})
	DeleteRun(ctx echo.Context, id openapi_types.UUID) error
	// Find a run
	// (GET /intelligence/runs/{id})
	GetOneRun(ctx echo.Context, id openapi_types.UUID) error
	// Update a run
	// (PATCH /intelligence/runs/{id})
	UpdateRun(ctx echo.Context, id openapi_types.UUID) error
	// Find many tools
	// (GET /intelligence/tools)
	FindManyTools(ctx echo.Context, params FindManyToolsParams) error
	// Create a new tool
	// (POST /intelligence/tools)
	CreateTool(ctx echo.Context) error
	// Delete a tool
	// (DELETE /intelligence/tools/{id})
	DeleteTool(ctx echo.Context, id openapi_types.UUID) error
	// Find a tool
	// (GET /intelligence/tools/{id})
	GetOneTool(ctx echo.Context, id openapi_types.UUID) error
	// Update a tool
	// (PATCH /intelligence/tools/{id})
	UpdateTool(ctx echo.Context, id openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AccountsFindMany converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsFindMany(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params AccountsFindManyParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountsFindMany(ctx, params)
	return err
}

// AccountsDelete converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsDelete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountsDelete(ctx, id)
	return err
}

// AccountsGetOne converts echo context to params.
func (w *ServerInterfaceWrapper) AccountsGetOne(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AccountsGetOne(ctx, id)
	return err
}

// RequestEmailChange converts echo context to params.
func (w *ServerInterfaceWrapper) RequestEmailChange(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(SessionCookieScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RequestEmailChange(ctx)
	return err
}

// ConfirmEmailChange converts echo context to params.
func (w *ServerInterfaceWrapper) ConfirmEmailChange(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(SessionCookieScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConfirmEmailChange(ctx)
	return err
}

// RequestEmailVerification converts echo context to params.
func (w *ServerInterfaceWrapper) RequestEmailVerification(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RequestEmailVerification(ctx)
	return err
}

// ConfirmEmailVerification converts echo context to params.
func (w *ServerInterfaceWrapper) ConfirmEmailVerification(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(SessionCookieScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConfirmEmailVerification(ctx)
	return err
}

// FindManyInvitations converts echo context to params.
func (w *ServerInterfaceWrapper) FindManyInvitations(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindManyInvitationsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindManyInvitations(ctx, params)
	return err
}

// CreateInvitation converts echo context to params.
func (w *ServerInterfaceWrapper) CreateInvitation(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateInvitation(ctx)
	return err
}

// DeleteInvitation converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteInvitation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteInvitation(ctx, id)
	return err
}

// GetOneInvitation converts echo context to params.
func (w *ServerInterfaceWrapper) GetOneInvitation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOneInvitation(ctx, id)
	return err
}

// UpdateInvitation converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateInvitation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateInvitation(ctx, id)
	return err
}

// FindManyMembers converts echo context to params.
func (w *ServerInterfaceWrapper) FindManyMembers(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindManyMembersParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindManyMembers(ctx, params)
	return err
}

// CreateMember converts echo context to params.
func (w *ServerInterfaceWrapper) CreateMember(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateMember(ctx)
	return err
}

// DeleteMember converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteMember(ctx, id)
	return err
}

// GetOneMember converts echo context to params.
func (w *ServerInterfaceWrapper) GetOneMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOneMember(ctx, id)
	return err
}

// UpdateMember converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateMember(ctx, id)
	return err
}

// FindManyOrganizations converts echo context to params.
func (w *ServerInterfaceWrapper) FindManyOrganizations(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindManyOrganizationsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindManyOrganizations(ctx, params)
	return err
}

// CreateOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) CreateOrganization(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateOrganization(ctx)
	return err
}

// DeleteOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteOrganization(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteOrganization(ctx, id)
	return err
}

// GetOneOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) GetOneOrganization(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOneOrganization(ctx, id)
	return err
}

// UpdateOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateOrganization(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateOrganization(ctx, id)
	return err
}

// RequestPasswordReset converts echo context to params.
func (w *ServerInterfaceWrapper) RequestPasswordReset(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(SessionCookieScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RequestPasswordReset(ctx)
	return err
}

// ConfirmPasswordReset converts echo context to params.
func (w *ServerInterfaceWrapper) ConfirmPasswordReset(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(SessionCookieScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConfirmPasswordReset(ctx)
	return err
}

// FindManySessions converts echo context to params.
func (w *ServerInterfaceWrapper) FindManySessions(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindManySessionsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindManySessions(ctx, params)
	return err
}

// DeleteSession converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSession(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSession(ctx, id)
	return err
}

// GetOneSession converts echo context to params.
func (w *ServerInterfaceWrapper) GetOneSession(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOneSession(ctx, id)
	return err
}

// UpdateSession converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSession(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(SessionCookieScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateSession(ctx, id)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(SessionCookieScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// Logout converts echo context to params.
func (w *ServerInterfaceWrapper) Logout(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(SessionCookieScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Logout(ctx)
	return err
}

// Register converts echo context to params.
func (w *ServerInterfaceWrapper) Register(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(SessionCookieScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Register(ctx)
	return err
}

// FindManyUsers converts echo context to params.
func (w *ServerInterfaceWrapper) FindManyUsers(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindManyUsersParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindManyUsers(ctx, params)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUser(ctx, id)
	return err
}

// GetOneUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetOneUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOneUser(ctx, id)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUser(ctx, id)
	return err
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(SessionCookieScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx)
	return err
}

// GetHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetHealth(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	ctx.Set(SessionCookieScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetHealth(ctx)
	return err
}

// FindManyArtifacts converts echo context to params.
func (w *ServerInterfaceWrapper) FindManyArtifacts(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindManyArtifactsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindManyArtifacts(ctx, params)
	return err
}

// CreateArtifact converts echo context to params.
func (w *ServerInterfaceWrapper) CreateArtifact(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateArtifact(ctx)
	return err
}

// DeleteArtifact converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteArtifact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteArtifact(ctx, id)
	return err
}

// GetOneArtifact converts echo context to params.
func (w *ServerInterfaceWrapper) GetOneArtifact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOneArtifact(ctx, id)
	return err
}

// UpdateArtifact converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateArtifact(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateArtifact(ctx, id)
	return err
}

// FindManyLabels converts echo context to params.
func (w *ServerInterfaceWrapper) FindManyLabels(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindManyLabelsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindManyLabels(ctx, params)
	return err
}

// CreateLabel converts echo context to params.
func (w *ServerInterfaceWrapper) CreateLabel(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateLabel(ctx)
	return err
}

// DeleteLabel converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLabel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLabel(ctx, id)
	return err
}

// GetOneLabel converts echo context to params.
func (w *ServerInterfaceWrapper) GetOneLabel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOneLabel(ctx, id)
	return err
}

// UpdateLabel converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateLabel(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateLabel(ctx, id)
	return err
}

// FindManyPipelines converts echo context to params.
func (w *ServerInterfaceWrapper) FindManyPipelines(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindManyPipelinesParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindManyPipelines(ctx, params)
	return err
}

// CreatePipeline converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePipeline(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreatePipeline(ctx)
	return err
}

// DeletePipeline converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePipeline(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePipeline(ctx, id)
	return err
}

// GetOnePipeline converts echo context to params.
func (w *ServerInterfaceWrapper) GetOnePipeline(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOnePipeline(ctx, id)
	return err
}

// UpdatePipeline converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePipeline(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdatePipeline(ctx, id)
	return err
}

// FindManyRuns converts echo context to params.
func (w *ServerInterfaceWrapper) FindManyRuns(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindManyRunsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindManyRuns(ctx, params)
	return err
}

// CreateRun converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRun(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateRun(ctx)
	return err
}

// DeleteRun converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRun(ctx, id)
	return err
}

// GetOneRun converts echo context to params.
func (w *ServerInterfaceWrapper) GetOneRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOneRun(ctx, id)
	return err
}

// UpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateRun(ctx, id)
	return err
}

// FindManyTools converts echo context to params.
func (w *ServerInterfaceWrapper) FindManyTools(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindManyToolsParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindManyTools(ctx, params)
	return err
}

// CreateTool converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTool(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateTool(ctx)
	return err
}

// DeleteTool converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTool(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTool(ctx, id)
	return err
}

// GetOneTool converts echo context to params.
func (w *ServerInterfaceWrapper) GetOneTool(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOneTool(ctx, id)
	return err
}

// UpdateTool converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTool(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateTool(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/auth/accounts", wrapper.AccountsFindMany)
	router.DELETE(baseURL+"/auth/accounts/:id", wrapper.AccountsDelete)
	router.GET(baseURL+"/auth/accounts/:id", wrapper.AccountsGetOne)
	router.POST(baseURL+"/auth/email-change/request", wrapper.RequestEmailChange)
	router.POST(baseURL+"/auth/email-change/verify", wrapper.ConfirmEmailChange)
	router.POST(baseURL+"/auth/email-verification/request", wrapper.RequestEmailVerification)
	router.POST(baseURL+"/auth/email-verification/verify", wrapper.ConfirmEmailVerification)
	router.GET(baseURL+"/auth/invitations", wrapper.FindManyInvitations)
	router.POST(baseURL+"/auth/invitations", wrapper.CreateInvitation)
	router.DELETE(baseURL+"/auth/invitations/:id", wrapper.DeleteInvitation)
	router.GET(baseURL+"/auth/invitations/:id", wrapper.GetOneInvitation)
	router.PATCH(baseURL+"/auth/invitations/:id", wrapper.UpdateInvitation)
	router.GET(baseURL+"/auth/members", wrapper.FindManyMembers)
	router.POST(baseURL+"/auth/members", wrapper.CreateMember)
	router.DELETE(baseURL+"/auth/members/:id", wrapper.DeleteMember)
	router.GET(baseURL+"/auth/members/:id", wrapper.GetOneMember)
	router.PATCH(baseURL+"/auth/members/:id", wrapper.UpdateMember)
	router.GET(baseURL+"/auth/organizations", wrapper.FindManyOrganizations)
	router.POST(baseURL+"/auth/organizations", wrapper.CreateOrganization)
	router.DELETE(baseURL+"/auth/organizations/:id", wrapper.DeleteOrganization)
	router.GET(baseURL+"/auth/organizations/:id", wrapper.GetOneOrganization)
	router.PATCH(baseURL+"/auth/organizations/:id", wrapper.UpdateOrganization)
	router.POST(baseURL+"/auth/password-reset/request", wrapper.RequestPasswordReset)
	router.POST(baseURL+"/auth/password-reset/verify", wrapper.ConfirmPasswordReset)
	router.GET(baseURL+"/auth/sessions", wrapper.FindManySessions)
	router.DELETE(baseURL+"/auth/sessions/:id", wrapper.DeleteSession)
	router.GET(baseURL+"/auth/sessions/:id", wrapper.GetOneSession)
	router.PATCH(baseURL+"/auth/sessions/:id", wrapper.UpdateSession)
	router.POST(baseURL+"/auth/sign-in", wrapper.Login)
	router.POST(baseURL+"/auth/sign-out", wrapper.Logout)
	router.POST(baseURL+"/auth/sign-up", wrapper.Register)
	router.GET(baseURL+"/auth/users", wrapper.FindManyUsers)
	router.DELETE(baseURL+"/auth/users/:id", wrapper.DeleteUser)
	router.GET(baseURL+"/auth/users/:id", wrapper.GetOneUser)
	router.PATCH(baseURL+"/auth/users/:id", wrapper.UpdateUser)
	router.GET(baseURL+"/config", wrapper.GetConfig)
	router.GET(baseURL+"/health", wrapper.GetHealth)
	router.GET(baseURL+"/intelligence/artifacts", wrapper.FindManyArtifacts)
	router.POST(baseURL+"/intelligence/artifacts", wrapper.CreateArtifact)
	router.DELETE(baseURL+"/intelligence/artifacts/:id", wrapper.DeleteArtifact)
	router.GET(baseURL+"/intelligence/artifacts/:id", wrapper.GetOneArtifact)
	router.PATCH(baseURL+"/intelligence/artifacts/:id", wrapper.UpdateArtifact)
	router.GET(baseURL+"/intelligence/labels", wrapper.FindManyLabels)
	router.POST(baseURL+"/intelligence/labels", wrapper.CreateLabel)
	router.DELETE(baseURL+"/intelligence/labels/:id", wrapper.DeleteLabel)
	router.GET(baseURL+"/intelligence/labels/:id", wrapper.GetOneLabel)
	router.PATCH(baseURL+"/intelligence/labels/:id", wrapper.UpdateLabel)
	router.GET(baseURL+"/intelligence/pipelines", wrapper.FindManyPipelines)
	router.POST(baseURL+"/intelligence/pipelines", wrapper.CreatePipeline)
	router.DELETE(baseURL+"/intelligence/pipelines/:id", wrapper.DeletePipeline)
	router.GET(baseURL+"/intelligence/pipelines/:id", wrapper.GetOnePipeline)
	router.PATCH(baseURL+"/intelligence/pipelines/:id", wrapper.UpdatePipeline)
	router.GET(baseURL+"/intelligence/runs", wrapper.FindManyRuns)
	router.POST(baseURL+"/intelligence/runs", wrapper.CreateRun)
	router.DELETE(baseURL+"/intelligence/runs/:id", wrapper.DeleteRun)
	router.GET(baseURL+"/intelligence/runs/:id", wrapper.GetOneRun)
	router.PATCH(baseURL+"/intelligence/runs/:id", wrapper.UpdateRun)
	router.GET(baseURL+"/intelligence/tools", wrapper.FindManyTools)
	router.POST(baseURL+"/intelligence/tools", wrapper.CreateTool)
	router.DELETE(baseURL+"/intelligence/tools/:id", wrapper.DeleteTool)
	router.GET(baseURL+"/intelligence/tools/:id", wrapper.GetOneTool)
	router.PATCH(baseURL+"/intelligence/tools/:id", wrapper.UpdateTool)

}

type BadRequestApplicationProblemPlusJSONResponse ProblemDetails

type NoContentResponse struct {
}

type NotFoundApplicationProblemPlusJSONResponse ProblemDetails

type UnauthorizedApplicationProblemPlusJSONResponse ProblemDetails

type AccountsFindManyRequestObject struct {
	Params AccountsFindManyParams
}

type AccountsFindManyResponseObject interface {
	VisitAccountsFindManyResponse(w http.ResponseWriter) error
}

type AccountsFindMany200JSONResponse struct {
	Data []AccountEntity `json:"data" yaml:"data"`
	Meta struct {
		Total float32 `json:"total" yaml:"total"`
	} `json:"meta" yaml:"meta"`
}

func (response AccountsFindMany200JSONResponse) VisitAccountsFindManyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccountsFindMany400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response AccountsFindMany400ApplicationProblemPlusJSONResponse) VisitAccountsFindManyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AccountsFindMany401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response AccountsFindMany401ApplicationProblemPlusJSONResponse) VisitAccountsFindManyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AccountsDeleteRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type AccountsDeleteResponseObject interface {
	VisitAccountsDeleteResponse(w http.ResponseWriter) error
}

type AccountsDelete200JSONResponse struct {
	// Data Schema for Account entity (authentication provider account)
	Data AccountEntity `json:"data" yaml:"data"`
}

func (response AccountsDelete200JSONResponse) VisitAccountsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccountsDelete404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response AccountsDelete404ApplicationProblemPlusJSONResponse) VisitAccountsDeleteResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AccountsGetOneRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type AccountsGetOneResponseObject interface {
	VisitAccountsGetOneResponse(w http.ResponseWriter) error
}

type AccountsGetOne200JSONResponse struct {
	// Data Schema for Account entity (authentication provider account)
	Data AccountEntity `json:"data" yaml:"data"`
}

func (response AccountsGetOne200JSONResponse) VisitAccountsGetOneResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AccountsGetOne404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response AccountsGetOne404ApplicationProblemPlusJSONResponse) VisitAccountsGetOneResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RequestEmailChangeRequestObject struct {
	Body *RequestEmailChangeJSONRequestBody
}

type RequestEmailChangeResponseObject interface {
	VisitRequestEmailChangeResponse(w http.ResponseWriter) error
}

type RequestEmailChange204Response = NoContentResponse

func (response RequestEmailChange204Response) VisitRequestEmailChangeResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RequestEmailChange400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response RequestEmailChange400ApplicationProblemPlusJSONResponse) VisitRequestEmailChangeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RequestEmailChange401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response RequestEmailChange401ApplicationProblemPlusJSONResponse) VisitRequestEmailChangeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConfirmEmailChangeRequestObject struct {
	Body *ConfirmEmailChangeJSONRequestBody
}

type ConfirmEmailChangeResponseObject interface {
	VisitConfirmEmailChangeResponse(w http.ResponseWriter) error
}

type ConfirmEmailChange204ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response ConfirmEmailChange204ApplicationProblemPlusJSONResponse) VisitConfirmEmailChangeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(204)

	return json.NewEncoder(w).Encode(response)
}

type ConfirmEmailChange401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response ConfirmEmailChange401ApplicationProblemPlusJSONResponse) VisitConfirmEmailChangeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConfirmEmailChange404ApplicationProblemPlusJSONResponse ProblemDetails

func (response ConfirmEmailChange404ApplicationProblemPlusJSONResponse) VisitConfirmEmailChangeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RequestEmailVerificationRequestObject struct {
}

type RequestEmailVerificationResponseObject interface {
	VisitRequestEmailVerificationResponse(w http.ResponseWriter) error
}

type RequestEmailVerification204Response = NoContentResponse

func (response RequestEmailVerification204Response) VisitRequestEmailVerificationResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RequestEmailVerification400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response RequestEmailVerification400ApplicationProblemPlusJSONResponse) VisitRequestEmailVerificationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RequestEmailVerification401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response RequestEmailVerification401ApplicationProblemPlusJSONResponse) VisitRequestEmailVerificationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConfirmEmailVerificationRequestObject struct {
	Body *ConfirmEmailVerificationJSONRequestBody
}

type ConfirmEmailVerificationResponseObject interface {
	VisitConfirmEmailVerificationResponse(w http.ResponseWriter) error
}

type ConfirmEmailVerification200JSONResponse struct {
	// Session Schema for Session entity
	Session SessionEntity `json:"session" yaml:"session"`

	// User Schema for User entity
	User UserEntity `json:"user" yaml:"user"`
}

func (response ConfirmEmailVerification200JSONResponse) VisitConfirmEmailVerificationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ConfirmEmailVerification401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response ConfirmEmailVerification401ApplicationProblemPlusJSONResponse) VisitConfirmEmailVerificationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConfirmEmailVerification404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response ConfirmEmailVerification404ApplicationProblemPlusJSONResponse) VisitConfirmEmailVerificationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type FindManyInvitationsRequestObject struct {
	Params FindManyInvitationsParams
}

type FindManyInvitationsResponseObject interface {
	VisitFindManyInvitationsResponse(w http.ResponseWriter) error
}

type FindManyInvitations200JSONResponse struct {
	Data []InvitationEntity `json:"data" yaml:"data"`
	Meta struct {
		// Total Total number of items in the collection
		Total float32 `json:"total" yaml:"total"`
	} `json:"meta" yaml:"meta"`
}

func (response FindManyInvitations200JSONResponse) VisitFindManyInvitationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FindManyInvitations400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response FindManyInvitations400ApplicationProblemPlusJSONResponse) VisitFindManyInvitationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type FindManyInvitations401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response FindManyInvitations401ApplicationProblemPlusJSONResponse) VisitFindManyInvitationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateInvitationRequestObject struct {
	Body *CreateInvitationJSONRequestBody
}

type CreateInvitationResponseObject interface {
	VisitCreateInvitationResponse(w http.ResponseWriter) error
}

type CreateInvitation201JSONResponse struct {
	// Data Schema for Invitation entity
	Data InvitationEntity `json:"data" yaml:"data"`
}

func (response CreateInvitation201JSONResponse) VisitCreateInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateInvitation400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response CreateInvitation400ApplicationProblemPlusJSONResponse) VisitCreateInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateInvitation401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response CreateInvitation401ApplicationProblemPlusJSONResponse) VisitCreateInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteInvitationRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteInvitationResponseObject interface {
	VisitDeleteInvitationResponse(w http.ResponseWriter) error
}

type DeleteInvitation200JSONResponse struct {
	// Data Schema for Invitation entity
	Data InvitationEntity `json:"data" yaml:"data"`
}

func (response DeleteInvitation200JSONResponse) VisitDeleteInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteInvitation404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response DeleteInvitation404ApplicationProblemPlusJSONResponse) VisitDeleteInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetOneInvitationRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetOneInvitationResponseObject interface {
	VisitGetOneInvitationResponse(w http.ResponseWriter) error
}

type GetOneInvitation200JSONResponse struct {
	// Data Schema for Invitation entity
	Data InvitationEntity `json:"data" yaml:"data"`
}

func (response GetOneInvitation200JSONResponse) VisitGetOneInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOneInvitation404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response GetOneInvitation404ApplicationProblemPlusJSONResponse) VisitGetOneInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateInvitationRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *UpdateInvitationJSONRequestBody
}

type UpdateInvitationResponseObject interface {
	VisitUpdateInvitationResponse(w http.ResponseWriter) error
}

type UpdateInvitation200JSONResponse struct {
	// Data Schema for Invitation entity
	Data InvitationEntity `json:"data" yaml:"data"`
}

func (response UpdateInvitation200JSONResponse) VisitUpdateInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateInvitation404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response UpdateInvitation404ApplicationProblemPlusJSONResponse) VisitUpdateInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type FindManyMembersRequestObject struct {
	Params FindManyMembersParams
}

type FindManyMembersResponseObject interface {
	VisitFindManyMembersResponse(w http.ResponseWriter) error
}

type FindManyMembers200JSONResponse struct {
	Data []MemberEntity `json:"data" yaml:"data"`
	Meta struct {
		// Total Total number of items in the collection
		Total float32 `json:"total" yaml:"total"`
	} `json:"meta" yaml:"meta"`
}

func (response FindManyMembers200JSONResponse) VisitFindManyMembersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FindManyMembers400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response FindManyMembers400ApplicationProblemPlusJSONResponse) VisitFindManyMembersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type FindManyMembers401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response FindManyMembers401ApplicationProblemPlusJSONResponse) VisitFindManyMembersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateMemberRequestObject struct {
	Body *CreateMemberJSONRequestBody
}

type CreateMemberResponseObject interface {
	VisitCreateMemberResponse(w http.ResponseWriter) error
}

type CreateMember201JSONResponse struct {
	// Data Schema for Member entity
	Data MemberEntity `json:"data" yaml:"data"`
}

func (response CreateMember201JSONResponse) VisitCreateMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateMember400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response CreateMember400ApplicationProblemPlusJSONResponse) VisitCreateMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateMember401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response CreateMember401ApplicationProblemPlusJSONResponse) VisitCreateMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMemberRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteMemberResponseObject interface {
	VisitDeleteMemberResponse(w http.ResponseWriter) error
}

type DeleteMember200JSONResponse struct {
	// Data Schema for Member entity
	Data MemberEntity `json:"data" yaml:"data"`
}

func (response DeleteMember200JSONResponse) VisitDeleteMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMember404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response DeleteMember404ApplicationProblemPlusJSONResponse) VisitDeleteMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetOneMemberRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetOneMemberResponseObject interface {
	VisitGetOneMemberResponse(w http.ResponseWriter) error
}

type GetOneMember200JSONResponse struct {
	// Data Schema for Member entity
	Data MemberEntity `json:"data" yaml:"data"`
}

func (response GetOneMember200JSONResponse) VisitGetOneMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOneMember404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response GetOneMember404ApplicationProblemPlusJSONResponse) VisitGetOneMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMemberRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *UpdateMemberJSONRequestBody
}

type UpdateMemberResponseObject interface {
	VisitUpdateMemberResponse(w http.ResponseWriter) error
}

type UpdateMember200JSONResponse struct {
	// Data Schema for Member entity
	Data MemberEntity `json:"data" yaml:"data"`
}

func (response UpdateMember200JSONResponse) VisitUpdateMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMember404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response UpdateMember404ApplicationProblemPlusJSONResponse) VisitUpdateMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type FindManyOrganizationsRequestObject struct {
	Params FindManyOrganizationsParams
}

type FindManyOrganizationsResponseObject interface {
	VisitFindManyOrganizationsResponse(w http.ResponseWriter) error
}

type FindManyOrganizations200JSONResponse struct {
	Data []OrganizationEntity `json:"data" yaml:"data"`
	Meta struct {
		// Total Total number of items in the collection
		Total float32 `json:"total" yaml:"total"`
	} `json:"meta" yaml:"meta"`
}

func (response FindManyOrganizations200JSONResponse) VisitFindManyOrganizationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FindManyOrganizations400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response FindManyOrganizations400ApplicationProblemPlusJSONResponse) VisitFindManyOrganizationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type FindManyOrganizations401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response FindManyOrganizations401ApplicationProblemPlusJSONResponse) VisitFindManyOrganizationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrganizationRequestObject struct {
	Body *CreateOrganizationJSONRequestBody
}

type CreateOrganizationResponseObject interface {
	VisitCreateOrganizationResponse(w http.ResponseWriter) error
}

type CreateOrganization201JSONResponse struct {
	// Data Schema for Organization entity
	Data OrganizationEntity `json:"data" yaml:"data"`
}

func (response CreateOrganization201JSONResponse) VisitCreateOrganizationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrganization400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response CreateOrganization400ApplicationProblemPlusJSONResponse) VisitCreateOrganizationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrganization401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response CreateOrganization401ApplicationProblemPlusJSONResponse) VisitCreateOrganizationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteOrganizationRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteOrganizationResponseObject interface {
	VisitDeleteOrganizationResponse(w http.ResponseWriter) error
}

type DeleteOrganization200JSONResponse struct {
	// Data Schema for Organization entity
	Data OrganizationEntity `json:"data" yaml:"data"`
}

func (response DeleteOrganization200JSONResponse) VisitDeleteOrganizationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteOrganization404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response DeleteOrganization404ApplicationProblemPlusJSONResponse) VisitDeleteOrganizationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetOneOrganizationRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetOneOrganizationResponseObject interface {
	VisitGetOneOrganizationResponse(w http.ResponseWriter) error
}

type GetOneOrganization200JSONResponse struct {
	// Data Schema for Organization entity
	Data OrganizationEntity `json:"data" yaml:"data"`
}

func (response GetOneOrganization200JSONResponse) VisitGetOneOrganizationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOneOrganization404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response GetOneOrganization404ApplicationProblemPlusJSONResponse) VisitGetOneOrganizationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateOrganizationRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *UpdateOrganizationJSONRequestBody
}

type UpdateOrganizationResponseObject interface {
	VisitUpdateOrganizationResponse(w http.ResponseWriter) error
}

type UpdateOrganization200JSONResponse struct {
	// Data Schema for Organization entity
	Data OrganizationEntity `json:"data" yaml:"data"`
}

func (response UpdateOrganization200JSONResponse) VisitUpdateOrganizationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateOrganization404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response UpdateOrganization404ApplicationProblemPlusJSONResponse) VisitUpdateOrganizationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RequestPasswordResetRequestObject struct {
	Body *RequestPasswordResetJSONRequestBody
}

type RequestPasswordResetResponseObject interface {
	VisitRequestPasswordResetResponse(w http.ResponseWriter) error
}

type RequestPasswordReset204Response = NoContentResponse

func (response RequestPasswordReset204Response) VisitRequestPasswordResetResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RequestPasswordReset400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response RequestPasswordReset400ApplicationProblemPlusJSONResponse) VisitRequestPasswordResetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConfirmPasswordResetRequestObject struct {
	Body *ConfirmPasswordResetJSONRequestBody
}

type ConfirmPasswordResetResponseObject interface {
	VisitConfirmPasswordResetResponse(w http.ResponseWriter) error
}

type ConfirmPasswordReset204ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response ConfirmPasswordReset204ApplicationProblemPlusJSONResponse) VisitConfirmPasswordResetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(204)

	return json.NewEncoder(w).Encode(response)
}

type ConfirmPasswordReset401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response ConfirmPasswordReset401ApplicationProblemPlusJSONResponse) VisitConfirmPasswordResetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConfirmPasswordReset404ApplicationProblemPlusJSONResponse ProblemDetails

func (response ConfirmPasswordReset404ApplicationProblemPlusJSONResponse) VisitConfirmPasswordResetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type FindManySessionsRequestObject struct {
	Params FindManySessionsParams
}

type FindManySessionsResponseObject interface {
	VisitFindManySessionsResponse(w http.ResponseWriter) error
}

type FindManySessions200JSONResponse struct {
	Data []SessionEntity `json:"data" yaml:"data"`
	Meta struct {
		// Total Total number of items in the collection
		Total float32 `json:"total" yaml:"total"`
	} `json:"meta" yaml:"meta"`
}

func (response FindManySessions200JSONResponse) VisitFindManySessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FindManySessions400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response FindManySessions400ApplicationProblemPlusJSONResponse) VisitFindManySessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type FindManySessions401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response FindManySessions401ApplicationProblemPlusJSONResponse) VisitFindManySessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSessionRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteSessionResponseObject interface {
	VisitDeleteSessionResponse(w http.ResponseWriter) error
}

type DeleteSession200JSONResponse struct {
	// Data Schema for Session entity
	Data SessionEntity `json:"data" yaml:"data"`
}

func (response DeleteSession200JSONResponse) VisitDeleteSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSession404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response DeleteSession404ApplicationProblemPlusJSONResponse) VisitDeleteSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetOneSessionRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetOneSessionResponseObject interface {
	VisitGetOneSessionResponse(w http.ResponseWriter) error
}

type GetOneSession200JSONResponse struct {
	// Data Schema for Session entity
	Data SessionEntity `json:"data" yaml:"data"`
}

func (response GetOneSession200JSONResponse) VisitGetOneSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOneSession404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response GetOneSession404ApplicationProblemPlusJSONResponse) VisitGetOneSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSessionRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *UpdateSessionJSONRequestBody
}

type UpdateSessionResponseObject interface {
	VisitUpdateSessionResponse(w http.ResponseWriter) error
}

type UpdateSession200JSONResponse struct {
	// Data Schema for Session entity
	Data SessionEntity `json:"data" yaml:"data"`
}

func (response UpdateSession200JSONResponse) VisitUpdateSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSession401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response UpdateSession401ApplicationProblemPlusJSONResponse) VisitUpdateSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(w http.ResponseWriter) error
}

type Login200JSONResponse struct {
	// Data Schema for User entity
	Data UserEntity `json:"data" yaml:"data"`
}

func (response Login200JSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Login401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response Login401ApplicationProblemPlusJSONResponse) VisitLoginResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type LogoutRequestObject struct {
}

type LogoutResponseObject interface {
	VisitLogoutResponse(w http.ResponseWriter) error
}

type Logout204ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response Logout204ApplicationProblemPlusJSONResponse) VisitLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(204)

	return json.NewEncoder(w).Encode(response)
}

type Logout401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response Logout401ApplicationProblemPlusJSONResponse) VisitLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RegisterRequestObject struct {
	Body *RegisterJSONRequestBody
}

type RegisterResponseObject interface {
	VisitRegisterResponse(w http.ResponseWriter) error
}

type Register201JSONResponse struct {
	// Data Schema for User entity
	Data UserEntity `json:"data" yaml:"data"`
}

func (response Register201JSONResponse) VisitRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type Register401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response Register401ApplicationProblemPlusJSONResponse) VisitRegisterResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type FindManyUsersRequestObject struct {
	Params FindManyUsersParams
}

type FindManyUsersResponseObject interface {
	VisitFindManyUsersResponse(w http.ResponseWriter) error
}

type FindManyUsers200JSONResponse struct {
	Data []UserEntity `json:"data" yaml:"data"`
	Meta struct {
		// Total Total number of items in the collection
		Total float32 `json:"total" yaml:"total"`
	} `json:"meta" yaml:"meta"`
}

func (response FindManyUsers200JSONResponse) VisitFindManyUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FindManyUsers400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response FindManyUsers400ApplicationProblemPlusJSONResponse) VisitFindManyUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type FindManyUsers401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response FindManyUsers401ApplicationProblemPlusJSONResponse) VisitFindManyUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteUserResponseObject interface {
	VisitDeleteUserResponse(w http.ResponseWriter) error
}

type DeleteUser200JSONResponse struct {
	// Data Schema for User entity
	Data UserEntity `json:"data" yaml:"data"`
}

func (response DeleteUser200JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response DeleteUser404ApplicationProblemPlusJSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetOneUserRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetOneUserResponseObject interface {
	VisitGetOneUserResponse(w http.ResponseWriter) error
}

type GetOneUser200JSONResponse struct {
	// Data Schema for User entity
	Data UserEntity `json:"data" yaml:"data"`
}

func (response GetOneUser200JSONResponse) VisitGetOneUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOneUser404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response GetOneUser404ApplicationProblemPlusJSONResponse) VisitGetOneUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *UpdateUserJSONRequestBody
}

type UpdateUserResponseObject interface {
	VisitUpdateUserResponse(w http.ResponseWriter) error
}

type UpdateUser200JSONResponse struct {
	// Data Schema for User entity
	Data UserEntity `json:"data" yaml:"data"`
}

func (response UpdateUser200JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response UpdateUser404ApplicationProblemPlusJSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetConfigRequestObject struct {
}

type GetConfigResponseObject interface {
	VisitGetConfigResponse(w http.ResponseWriter) error
}

type GetConfig200JSONResponse ArchesConfig

func (response GetConfig200JSONResponse) VisitGetConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConfig400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response GetConfig400ApplicationProblemPlusJSONResponse) VisitGetConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetHealthRequestObject struct {
}

type GetHealthResponseObject interface {
	VisitGetHealthResponse(w http.ResponseWriter) error
}

type GetHealth200JSONResponse HealthResponse

func (response GetHealth200JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHealth400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response GetHealth400ApplicationProblemPlusJSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type FindManyArtifactsRequestObject struct {
	Params FindManyArtifactsParams
}

type FindManyArtifactsResponseObject interface {
	VisitFindManyArtifactsResponse(w http.ResponseWriter) error
}

type FindManyArtifacts200JSONResponse struct {
	Data []ArtifactEntity `json:"data" yaml:"data"`
	Meta struct {
		// Total Total number of items in the collection
		Total float32 `json:"total" yaml:"total"`
	} `json:"meta" yaml:"meta"`
}

func (response FindManyArtifacts200JSONResponse) VisitFindManyArtifactsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FindManyArtifacts400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response FindManyArtifacts400ApplicationProblemPlusJSONResponse) VisitFindManyArtifactsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type FindManyArtifacts401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response FindManyArtifacts401ApplicationProblemPlusJSONResponse) VisitFindManyArtifactsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateArtifactRequestObject struct {
	Body *CreateArtifactJSONRequestBody
}

type CreateArtifactResponseObject interface {
	VisitCreateArtifactResponse(w http.ResponseWriter) error
}

type CreateArtifact201JSONResponse struct {
	// Data Schema for Artifact entity
	Data ArtifactEntity `json:"data" yaml:"data"`
}

func (response CreateArtifact201JSONResponse) VisitCreateArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateArtifact400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response CreateArtifact400ApplicationProblemPlusJSONResponse) VisitCreateArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateArtifact401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response CreateArtifact401ApplicationProblemPlusJSONResponse) VisitCreateArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteArtifactRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteArtifactResponseObject interface {
	VisitDeleteArtifactResponse(w http.ResponseWriter) error
}

type DeleteArtifact200JSONResponse struct {
	// Data Schema for Artifact entity
	Data ArtifactEntity `json:"data" yaml:"data"`
}

func (response DeleteArtifact200JSONResponse) VisitDeleteArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteArtifact404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response DeleteArtifact404ApplicationProblemPlusJSONResponse) VisitDeleteArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetOneArtifactRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetOneArtifactResponseObject interface {
	VisitGetOneArtifactResponse(w http.ResponseWriter) error
}

type GetOneArtifact200JSONResponse struct {
	// Data Schema for Artifact entity
	Data ArtifactEntity `json:"data" yaml:"data"`
}

func (response GetOneArtifact200JSONResponse) VisitGetOneArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOneArtifact404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response GetOneArtifact404ApplicationProblemPlusJSONResponse) VisitGetOneArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateArtifactRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *UpdateArtifactJSONRequestBody
}

type UpdateArtifactResponseObject interface {
	VisitUpdateArtifactResponse(w http.ResponseWriter) error
}

type UpdateArtifact200JSONResponse struct {
	// Data Schema for Artifact entity
	Data ArtifactEntity `json:"data" yaml:"data"`
}

func (response UpdateArtifact200JSONResponse) VisitUpdateArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateArtifact404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response UpdateArtifact404ApplicationProblemPlusJSONResponse) VisitUpdateArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type FindManyLabelsRequestObject struct {
	Params FindManyLabelsParams
}

type FindManyLabelsResponseObject interface {
	VisitFindManyLabelsResponse(w http.ResponseWriter) error
}

type FindManyLabels200JSONResponse struct {
	Data []LabelEntity `json:"data" yaml:"data"`
	Meta struct {
		// Total Total number of items in the collection
		Total float32 `json:"total" yaml:"total"`
	} `json:"meta" yaml:"meta"`
}

func (response FindManyLabels200JSONResponse) VisitFindManyLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FindManyLabels400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response FindManyLabels400ApplicationProblemPlusJSONResponse) VisitFindManyLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type FindManyLabels401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response FindManyLabels401ApplicationProblemPlusJSONResponse) VisitFindManyLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateLabelRequestObject struct {
	Body *CreateLabelJSONRequestBody
}

type CreateLabelResponseObject interface {
	VisitCreateLabelResponse(w http.ResponseWriter) error
}

type CreateLabel201JSONResponse struct {
	// Data Schema for Label entity
	Data LabelEntity `json:"data" yaml:"data"`
}

func (response CreateLabel201JSONResponse) VisitCreateLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateLabel400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response CreateLabel400ApplicationProblemPlusJSONResponse) VisitCreateLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateLabel401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response CreateLabel401ApplicationProblemPlusJSONResponse) VisitCreateLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteLabelRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteLabelResponseObject interface {
	VisitDeleteLabelResponse(w http.ResponseWriter) error
}

type DeleteLabel200JSONResponse struct {
	// Data Schema for Label entity
	Data LabelEntity `json:"data" yaml:"data"`
}

func (response DeleteLabel200JSONResponse) VisitDeleteLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteLabel404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response DeleteLabel404ApplicationProblemPlusJSONResponse) VisitDeleteLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetOneLabelRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetOneLabelResponseObject interface {
	VisitGetOneLabelResponse(w http.ResponseWriter) error
}

type GetOneLabel200JSONResponse struct {
	// Data Schema for Label entity
	Data LabelEntity `json:"data" yaml:"data"`
}

func (response GetOneLabel200JSONResponse) VisitGetOneLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOneLabel404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response GetOneLabel404ApplicationProblemPlusJSONResponse) VisitGetOneLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateLabelRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *UpdateLabelJSONRequestBody
}

type UpdateLabelResponseObject interface {
	VisitUpdateLabelResponse(w http.ResponseWriter) error
}

type UpdateLabel200JSONResponse struct {
	// Data Schema for Label entity
	Data LabelEntity `json:"data" yaml:"data"`
}

func (response UpdateLabel200JSONResponse) VisitUpdateLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateLabel404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response UpdateLabel404ApplicationProblemPlusJSONResponse) VisitUpdateLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type FindManyPipelinesRequestObject struct {
	Params FindManyPipelinesParams
}

type FindManyPipelinesResponseObject interface {
	VisitFindManyPipelinesResponse(w http.ResponseWriter) error
}

type FindManyPipelines200JSONResponse struct {
	Data []PipelineEntity `json:"data" yaml:"data"`
	Meta struct {
		// Total Total number of items in the collection
		Total float32 `json:"total" yaml:"total"`
	} `json:"meta" yaml:"meta"`
}

func (response FindManyPipelines200JSONResponse) VisitFindManyPipelinesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FindManyPipelines400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response FindManyPipelines400ApplicationProblemPlusJSONResponse) VisitFindManyPipelinesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type FindManyPipelines401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response FindManyPipelines401ApplicationProblemPlusJSONResponse) VisitFindManyPipelinesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreatePipelineRequestObject struct {
	Body *CreatePipelineJSONRequestBody
}

type CreatePipelineResponseObject interface {
	VisitCreatePipelineResponse(w http.ResponseWriter) error
}

type CreatePipeline201JSONResponse struct {
	// Data Schema for Pipeline entity
	Data PipelineEntity `json:"data" yaml:"data"`
}

func (response CreatePipeline201JSONResponse) VisitCreatePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreatePipeline400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response CreatePipeline400ApplicationProblemPlusJSONResponse) VisitCreatePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreatePipeline401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response CreatePipeline401ApplicationProblemPlusJSONResponse) VisitCreatePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeletePipelineRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeletePipelineResponseObject interface {
	VisitDeletePipelineResponse(w http.ResponseWriter) error
}

type DeletePipeline200JSONResponse struct {
	// Data Schema for Pipeline entity
	Data PipelineEntity `json:"data" yaml:"data"`
}

func (response DeletePipeline200JSONResponse) VisitDeletePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeletePipeline404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response DeletePipeline404ApplicationProblemPlusJSONResponse) VisitDeletePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetOnePipelineRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetOnePipelineResponseObject interface {
	VisitGetOnePipelineResponse(w http.ResponseWriter) error
}

type GetOnePipeline200JSONResponse struct {
	// Data Schema for Pipeline entity
	Data PipelineEntity `json:"data" yaml:"data"`
}

func (response GetOnePipeline200JSONResponse) VisitGetOnePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOnePipeline404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response GetOnePipeline404ApplicationProblemPlusJSONResponse) VisitGetOnePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePipelineRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *UpdatePipelineJSONRequestBody
}

type UpdatePipelineResponseObject interface {
	VisitUpdatePipelineResponse(w http.ResponseWriter) error
}

type UpdatePipeline200JSONResponse struct {
	// Data Schema for Pipeline entity
	Data PipelineEntity `json:"data" yaml:"data"`
}

func (response UpdatePipeline200JSONResponse) VisitUpdatePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePipeline404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response UpdatePipeline404ApplicationProblemPlusJSONResponse) VisitUpdatePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type FindManyRunsRequestObject struct {
	Params FindManyRunsParams
}

type FindManyRunsResponseObject interface {
	VisitFindManyRunsResponse(w http.ResponseWriter) error
}

type FindManyRuns200JSONResponse struct {
	Data []RunEntity `json:"data" yaml:"data"`
	Meta struct {
		// Total Total number of items in the collection
		Total float32 `json:"total" yaml:"total"`
	} `json:"meta" yaml:"meta"`
}

func (response FindManyRuns200JSONResponse) VisitFindManyRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FindManyRuns400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response FindManyRuns400ApplicationProblemPlusJSONResponse) VisitFindManyRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type FindManyRuns401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response FindManyRuns401ApplicationProblemPlusJSONResponse) VisitFindManyRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateRunRequestObject struct {
	Body *CreateRunJSONRequestBody
}

type CreateRunResponseObject interface {
	VisitCreateRunResponse(w http.ResponseWriter) error
}

type CreateRun201JSONResponse struct {
	// Data Schema for Run entity
	Data RunEntity `json:"data" yaml:"data"`
}

func (response CreateRun201JSONResponse) VisitCreateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateRun400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response CreateRun400ApplicationProblemPlusJSONResponse) VisitCreateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateRun401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response CreateRun401ApplicationProblemPlusJSONResponse) VisitCreateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRunRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteRunResponseObject interface {
	VisitDeleteRunResponse(w http.ResponseWriter) error
}

type DeleteRun200JSONResponse struct {
	// Data Schema for Run entity
	Data RunEntity `json:"data" yaml:"data"`
}

func (response DeleteRun200JSONResponse) VisitDeleteRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRun404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response DeleteRun404ApplicationProblemPlusJSONResponse) VisitDeleteRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetOneRunRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetOneRunResponseObject interface {
	VisitGetOneRunResponse(w http.ResponseWriter) error
}

type GetOneRun200JSONResponse struct {
	// Data Schema for Run entity
	Data RunEntity `json:"data" yaml:"data"`
}

func (response GetOneRun200JSONResponse) VisitGetOneRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOneRun404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response GetOneRun404ApplicationProblemPlusJSONResponse) VisitGetOneRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRunRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *UpdateRunJSONRequestBody
}

type UpdateRunResponseObject interface {
	VisitUpdateRunResponse(w http.ResponseWriter) error
}

type UpdateRun200JSONResponse struct {
	// Data Schema for Run entity
	Data RunEntity `json:"data" yaml:"data"`
}

func (response UpdateRun200JSONResponse) VisitUpdateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRun404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response UpdateRun404ApplicationProblemPlusJSONResponse) VisitUpdateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type FindManyToolsRequestObject struct {
	Params FindManyToolsParams
}

type FindManyToolsResponseObject interface {
	VisitFindManyToolsResponse(w http.ResponseWriter) error
}

type FindManyTools200JSONResponse struct {
	Data []ToolEntity `json:"data" yaml:"data"`
	Meta struct {
		// Total Total number of items in the collection
		Total float32 `json:"total" yaml:"total"`
	} `json:"meta" yaml:"meta"`
}

func (response FindManyTools200JSONResponse) VisitFindManyToolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type FindManyTools400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response FindManyTools400ApplicationProblemPlusJSONResponse) VisitFindManyToolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type FindManyTools401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response FindManyTools401ApplicationProblemPlusJSONResponse) VisitFindManyToolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateToolRequestObject struct {
	Body *CreateToolJSONRequestBody
}

type CreateToolResponseObject interface {
	VisitCreateToolResponse(w http.ResponseWriter) error
}

type CreateTool201JSONResponse struct {
	// Data Schema for Tool entity
	Data ToolEntity `json:"data" yaml:"data"`
}

func (response CreateTool201JSONResponse) VisitCreateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateTool400ApplicationProblemPlusJSONResponse struct {
	BadRequestApplicationProblemPlusJSONResponse
}

func (response CreateTool400ApplicationProblemPlusJSONResponse) VisitCreateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateTool401ApplicationProblemPlusJSONResponse struct {
	UnauthorizedApplicationProblemPlusJSONResponse
}

func (response CreateTool401ApplicationProblemPlusJSONResponse) VisitCreateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteToolRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteToolResponseObject interface {
	VisitDeleteToolResponse(w http.ResponseWriter) error
}

type DeleteTool200JSONResponse struct {
	// Data Schema for Tool entity
	Data ToolEntity `json:"data" yaml:"data"`
}

func (response DeleteTool200JSONResponse) VisitDeleteToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTool404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response DeleteTool404ApplicationProblemPlusJSONResponse) VisitDeleteToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetOneToolRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetOneToolResponseObject interface {
	VisitGetOneToolResponse(w http.ResponseWriter) error
}

type GetOneTool200JSONResponse struct {
	// Data Schema for Tool entity
	Data ToolEntity `json:"data" yaml:"data"`
}

func (response GetOneTool200JSONResponse) VisitGetOneToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOneTool404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response GetOneTool404ApplicationProblemPlusJSONResponse) VisitGetOneToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateToolRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *UpdateToolJSONRequestBody
}

type UpdateToolResponseObject interface {
	VisitUpdateToolResponse(w http.ResponseWriter) error
}

type UpdateTool200JSONResponse struct {
	// Data Schema for Tool entity
	Data ToolEntity `json:"data" yaml:"data"`
}

func (response UpdateTool200JSONResponse) VisitUpdateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTool404ApplicationProblemPlusJSONResponse struct {
	NotFoundApplicationProblemPlusJSONResponse
}

func (response UpdateTool404ApplicationProblemPlusJSONResponse) VisitUpdateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Find many accounts
	// (GET /auth/accounts)
	AccountsFindMany(ctx context.Context, request AccountsFindManyRequestObject) (AccountsFindManyResponseObject, error)
	// Delete an account
	// (DELETE /auth/accounts/{id})
	AccountsDelete(ctx context.Context, request AccountsDeleteRequestObject) (AccountsDeleteResponseObject, error)
	// Find an account
	// (GET /auth/accounts/{id})
	AccountsGetOne(ctx context.Context, request AccountsGetOneRequestObject) (AccountsGetOneResponseObject, error)
	// Request e-mail change
	// (POST /auth/email-change/request)
	RequestEmailChange(ctx context.Context, request RequestEmailChangeRequestObject) (RequestEmailChangeResponseObject, error)
	// Verify e-mail change
	// (POST /auth/email-change/verify)
	ConfirmEmailChange(ctx context.Context, request ConfirmEmailChangeRequestObject) (ConfirmEmailChangeResponseObject, error)
	// Request e-mail verification
	// (POST /auth/email-verification/request)
	RequestEmailVerification(ctx context.Context, request RequestEmailVerificationRequestObject) (RequestEmailVerificationResponseObject, error)
	// Confirm e-mail verification
	// (POST /auth/email-verification/verify)
	ConfirmEmailVerification(ctx context.Context, request ConfirmEmailVerificationRequestObject) (ConfirmEmailVerificationResponseObject, error)
	// Find many invitations
	// (GET /auth/invitations)
	FindManyInvitations(ctx context.Context, request FindManyInvitationsRequestObject) (FindManyInvitationsResponseObject, error)
	// Create a new invitation
	// (POST /auth/invitations)
	CreateInvitation(ctx context.Context, request CreateInvitationRequestObject) (CreateInvitationResponseObject, error)
	// Delete an invitation
	// (DELETE /auth/invitations/{id})
	DeleteInvitation(ctx context.Context, request DeleteInvitationRequestObject) (DeleteInvitationResponseObject, error)
	// Find an invitation
	// (GET /auth/invitations/{id})
	GetOneInvitation(ctx context.Context, request GetOneInvitationRequestObject) (GetOneInvitationResponseObject, error)
	// Update an invitation
	// (PATCH /auth/invitations/{id})
	UpdateInvitation(ctx context.Context, request UpdateInvitationRequestObject) (UpdateInvitationResponseObject, error)
	// Find many members
	// (GET /auth/members)
	FindManyMembers(ctx context.Context, request FindManyMembersRequestObject) (FindManyMembersResponseObject, error)
	// Create a new member
	// (POST /auth/members)
	CreateMember(ctx context.Context, request CreateMemberRequestObject) (CreateMemberResponseObject, error)
	// Delete a member
	// (DELETE /auth/members/{id})
	DeleteMember(ctx context.Context, request DeleteMemberRequestObject) (DeleteMemberResponseObject, error)
	// Find a member
	// (GET /auth/members/{id})
	GetOneMember(ctx context.Context, request GetOneMemberRequestObject) (GetOneMemberResponseObject, error)
	// Update a member
	// (PATCH /auth/members/{id})
	UpdateMember(ctx context.Context, request UpdateMemberRequestObject) (UpdateMemberResponseObject, error)
	// Find many organizations
	// (GET /auth/organizations)
	FindManyOrganizations(ctx context.Context, request FindManyOrganizationsRequestObject) (FindManyOrganizationsResponseObject, error)
	// Create a new organization
	// (POST /auth/organizations)
	CreateOrganization(ctx context.Context, request CreateOrganizationRequestObject) (CreateOrganizationResponseObject, error)
	// Delete an organization
	// (DELETE /auth/organizations/{id})
	DeleteOrganization(ctx context.Context, request DeleteOrganizationRequestObject) (DeleteOrganizationResponseObject, error)
	// Find an organization
	// (GET /auth/organizations/{id})
	GetOneOrganization(ctx context.Context, request GetOneOrganizationRequestObject) (GetOneOrganizationResponseObject, error)
	// Update an organization
	// (PATCH /auth/organizations/{id})
	UpdateOrganization(ctx context.Context, request UpdateOrganizationRequestObject) (UpdateOrganizationResponseObject, error)
	// Request password reset
	// (POST /auth/password-reset/request)
	RequestPasswordReset(ctx context.Context, request RequestPasswordResetRequestObject) (RequestPasswordResetResponseObject, error)
	// Verify password reset
	// (POST /auth/password-reset/verify)
	ConfirmPasswordReset(ctx context.Context, request ConfirmPasswordResetRequestObject) (ConfirmPasswordResetResponseObject, error)
	// Find many sessions
	// (GET /auth/sessions)
	FindManySessions(ctx context.Context, request FindManySessionsRequestObject) (FindManySessionsResponseObject, error)
	// Delete a session
	// (DELETE /auth/sessions/{id})
	DeleteSession(ctx context.Context, request DeleteSessionRequestObject) (DeleteSessionResponseObject, error)
	// Find a session
	// (GET /auth/sessions/{id})
	GetOneSession(ctx context.Context, request GetOneSessionRequestObject) (GetOneSessionResponseObject, error)
	// Update Session
	// (PATCH /auth/sessions/{id})
	UpdateSession(ctx context.Context, request UpdateSessionRequestObject) (UpdateSessionResponseObject, error)
	// Login
	// (POST /auth/sign-in)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)
	// Logout
	// (POST /auth/sign-out)
	Logout(ctx context.Context, request LogoutRequestObject) (LogoutResponseObject, error)
	// Register
	// (POST /auth/sign-up)
	Register(ctx context.Context, request RegisterRequestObject) (RegisterResponseObject, error)
	// Find many users
	// (GET /auth/users)
	FindManyUsers(ctx context.Context, request FindManyUsersRequestObject) (FindManyUsersResponseObject, error)
	// Delete an user
	// (DELETE /auth/users/{id})
	DeleteUser(ctx context.Context, request DeleteUserRequestObject) (DeleteUserResponseObject, error)
	// Find an user
	// (GET /auth/users/{id})
	GetOneUser(ctx context.Context, request GetOneUserRequestObject) (GetOneUserResponseObject, error)
	// Update an user
	// (PATCH /auth/users/{id})
	UpdateUser(ctx context.Context, request UpdateUserRequestObject) (UpdateUserResponseObject, error)
	// Get the configuration
	// (GET /config)
	GetConfig(ctx context.Context, request GetConfigRequestObject) (GetConfigResponseObject, error)
	// Health check endpoint
	// (GET /health)
	GetHealth(ctx context.Context, request GetHealthRequestObject) (GetHealthResponseObject, error)
	// Find many artifacts
	// (GET /intelligence/artifacts)
	FindManyArtifacts(ctx context.Context, request FindManyArtifactsRequestObject) (FindManyArtifactsResponseObject, error)
	// Create a new artifact
	// (POST /intelligence/artifacts)
	CreateArtifact(ctx context.Context, request CreateArtifactRequestObject) (CreateArtifactResponseObject, error)
	// Delete an artifact
	// (DELETE /intelligence/artifacts/{id})
	DeleteArtifact(ctx context.Context, request DeleteArtifactRequestObject) (DeleteArtifactResponseObject, error)
	// Find an artifact
	// (GET /intelligence/artifacts/{id})
	GetOneArtifact(ctx context.Context, request GetOneArtifactRequestObject) (GetOneArtifactResponseObject, error)
	// Update an artifact
	// (PATCH /intelligence/artifacts/{id})
	UpdateArtifact(ctx context.Context, request UpdateArtifactRequestObject) (UpdateArtifactResponseObject, error)
	// Find many labels
	// (GET /intelligence/labels)
	FindManyLabels(ctx context.Context, request FindManyLabelsRequestObject) (FindManyLabelsResponseObject, error)
	// Create a new label
	// (POST /intelligence/labels)
	CreateLabel(ctx context.Context, request CreateLabelRequestObject) (CreateLabelResponseObject, error)
	// Delete a label
	// (DELETE /intelligence/labels/{id})
	DeleteLabel(ctx context.Context, request DeleteLabelRequestObject) (DeleteLabelResponseObject, error)
	// Find a label
	// (GET /intelligence/labels/{id})
	GetOneLabel(ctx context.Context, request GetOneLabelRequestObject) (GetOneLabelResponseObject, error)
	// Update a label
	// (PATCH /intelligence/labels/{id})
	UpdateLabel(ctx context.Context, request UpdateLabelRequestObject) (UpdateLabelResponseObject, error)
	// Find many pipelines
	// (GET /intelligence/pipelines)
	FindManyPipelines(ctx context.Context, request FindManyPipelinesRequestObject) (FindManyPipelinesResponseObject, error)
	// Create a new pipeline
	// (POST /intelligence/pipelines)
	CreatePipeline(ctx context.Context, request CreatePipelineRequestObject) (CreatePipelineResponseObject, error)
	// Delete a pipeline
	// (DELETE /intelligence/pipelines/{id})
	DeletePipeline(ctx context.Context, request DeletePipelineRequestObject) (DeletePipelineResponseObject, error)
	// Find a pipeline
	// (GET /intelligence/pipelines/{id})
	GetOnePipeline(ctx context.Context, request GetOnePipelineRequestObject) (GetOnePipelineResponseObject, error)
	// Update a pipeline
	// (PATCH /intelligence/pipelines/{id})
	UpdatePipeline(ctx context.Context, request UpdatePipelineRequestObject) (UpdatePipelineResponseObject, error)
	// Find many runs
	// (GET /intelligence/runs)
	FindManyRuns(ctx context.Context, request FindManyRunsRequestObject) (FindManyRunsResponseObject, error)
	// Create a new run
	// (POST /intelligence/runs)
	CreateRun(ctx context.Context, request CreateRunRequestObject) (CreateRunResponseObject, error)
	// Delete a run
	// (DELETE /intelligence/runs/{id})
	DeleteRun(ctx context.Context, request DeleteRunRequestObject) (DeleteRunResponseObject, error)
	// Find a run
	// (GET /intelligence/runs/{id})
	GetOneRun(ctx context.Context, request GetOneRunRequestObject) (GetOneRunResponseObject, error)
	// Update a run
	// (PATCH /intelligence/runs/{id})
	UpdateRun(ctx context.Context, request UpdateRunRequestObject) (UpdateRunResponseObject, error)
	// Find many tools
	// (GET /intelligence/tools)
	FindManyTools(ctx context.Context, request FindManyToolsRequestObject) (FindManyToolsResponseObject, error)
	// Create a new tool
	// (POST /intelligence/tools)
	CreateTool(ctx context.Context, request CreateToolRequestObject) (CreateToolResponseObject, error)
	// Delete a tool
	// (DELETE /intelligence/tools/{id})
	DeleteTool(ctx context.Context, request DeleteToolRequestObject) (DeleteToolResponseObject, error)
	// Find a tool
	// (GET /intelligence/tools/{id})
	GetOneTool(ctx context.Context, request GetOneToolRequestObject) (GetOneToolResponseObject, error)
	// Update a tool
	// (PATCH /intelligence/tools/{id})
	UpdateTool(ctx context.Context, request UpdateToolRequestObject) (UpdateToolResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// AccountsFindMany operation middleware
func (sh *strictHandler) AccountsFindMany(ctx echo.Context, params AccountsFindManyParams) error {
	var request AccountsFindManyRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountsFindMany(ctx.Request().Context(), request.(AccountsFindManyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountsFindMany")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountsFindManyResponseObject); ok {
		return validResponse.VisitAccountsFindManyResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AccountsDelete operation middleware
func (sh *strictHandler) AccountsDelete(ctx echo.Context, id openapi_types.UUID) error {
	var request AccountsDeleteRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountsDelete(ctx.Request().Context(), request.(AccountsDeleteRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountsDelete")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountsDeleteResponseObject); ok {
		return validResponse.VisitAccountsDeleteResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AccountsGetOne operation middleware
func (sh *strictHandler) AccountsGetOne(ctx echo.Context, id openapi_types.UUID) error {
	var request AccountsGetOneRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AccountsGetOne(ctx.Request().Context(), request.(AccountsGetOneRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AccountsGetOne")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AccountsGetOneResponseObject); ok {
		return validResponse.VisitAccountsGetOneResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RequestEmailChange operation middleware
func (sh *strictHandler) RequestEmailChange(ctx echo.Context) error {
	var request RequestEmailChangeRequestObject

	var body RequestEmailChangeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RequestEmailChange(ctx.Request().Context(), request.(RequestEmailChangeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RequestEmailChange")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RequestEmailChangeResponseObject); ok {
		return validResponse.VisitRequestEmailChangeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ConfirmEmailChange operation middleware
func (sh *strictHandler) ConfirmEmailChange(ctx echo.Context) error {
	var request ConfirmEmailChangeRequestObject

	var body ConfirmEmailChangeJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ConfirmEmailChange(ctx.Request().Context(), request.(ConfirmEmailChangeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConfirmEmailChange")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ConfirmEmailChangeResponseObject); ok {
		return validResponse.VisitConfirmEmailChangeResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RequestEmailVerification operation middleware
func (sh *strictHandler) RequestEmailVerification(ctx echo.Context) error {
	var request RequestEmailVerificationRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RequestEmailVerification(ctx.Request().Context(), request.(RequestEmailVerificationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RequestEmailVerification")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RequestEmailVerificationResponseObject); ok {
		return validResponse.VisitRequestEmailVerificationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ConfirmEmailVerification operation middleware
func (sh *strictHandler) ConfirmEmailVerification(ctx echo.Context) error {
	var request ConfirmEmailVerificationRequestObject

	var body ConfirmEmailVerificationJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ConfirmEmailVerification(ctx.Request().Context(), request.(ConfirmEmailVerificationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConfirmEmailVerification")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ConfirmEmailVerificationResponseObject); ok {
		return validResponse.VisitConfirmEmailVerificationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// FindManyInvitations operation middleware
func (sh *strictHandler) FindManyInvitations(ctx echo.Context, params FindManyInvitationsParams) error {
	var request FindManyInvitationsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FindManyInvitations(ctx.Request().Context(), request.(FindManyInvitationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindManyInvitations")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FindManyInvitationsResponseObject); ok {
		return validResponse.VisitFindManyInvitationsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateInvitation operation middleware
func (sh *strictHandler) CreateInvitation(ctx echo.Context) error {
	var request CreateInvitationRequestObject

	var body CreateInvitationJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateInvitation(ctx.Request().Context(), request.(CreateInvitationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateInvitation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateInvitationResponseObject); ok {
		return validResponse.VisitCreateInvitationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteInvitation operation middleware
func (sh *strictHandler) DeleteInvitation(ctx echo.Context, id openapi_types.UUID) error {
	var request DeleteInvitationRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteInvitation(ctx.Request().Context(), request.(DeleteInvitationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteInvitation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteInvitationResponseObject); ok {
		return validResponse.VisitDeleteInvitationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetOneInvitation operation middleware
func (sh *strictHandler) GetOneInvitation(ctx echo.Context, id openapi_types.UUID) error {
	var request GetOneInvitationRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOneInvitation(ctx.Request().Context(), request.(GetOneInvitationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOneInvitation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetOneInvitationResponseObject); ok {
		return validResponse.VisitGetOneInvitationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateInvitation operation middleware
func (sh *strictHandler) UpdateInvitation(ctx echo.Context, id openapi_types.UUID) error {
	var request UpdateInvitationRequestObject

	request.Id = id

	var body UpdateInvitationJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateInvitation(ctx.Request().Context(), request.(UpdateInvitationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateInvitation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateInvitationResponseObject); ok {
		return validResponse.VisitUpdateInvitationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// FindManyMembers operation middleware
func (sh *strictHandler) FindManyMembers(ctx echo.Context, params FindManyMembersParams) error {
	var request FindManyMembersRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FindManyMembers(ctx.Request().Context(), request.(FindManyMembersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindManyMembers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FindManyMembersResponseObject); ok {
		return validResponse.VisitFindManyMembersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateMember operation middleware
func (sh *strictHandler) CreateMember(ctx echo.Context) error {
	var request CreateMemberRequestObject

	var body CreateMemberJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateMember(ctx.Request().Context(), request.(CreateMemberRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateMember")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateMemberResponseObject); ok {
		return validResponse.VisitCreateMemberResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteMember operation middleware
func (sh *strictHandler) DeleteMember(ctx echo.Context, id openapi_types.UUID) error {
	var request DeleteMemberRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteMember(ctx.Request().Context(), request.(DeleteMemberRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteMember")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteMemberResponseObject); ok {
		return validResponse.VisitDeleteMemberResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetOneMember operation middleware
func (sh *strictHandler) GetOneMember(ctx echo.Context, id openapi_types.UUID) error {
	var request GetOneMemberRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOneMember(ctx.Request().Context(), request.(GetOneMemberRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOneMember")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetOneMemberResponseObject); ok {
		return validResponse.VisitGetOneMemberResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateMember operation middleware
func (sh *strictHandler) UpdateMember(ctx echo.Context, id openapi_types.UUID) error {
	var request UpdateMemberRequestObject

	request.Id = id

	var body UpdateMemberJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateMember(ctx.Request().Context(), request.(UpdateMemberRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateMember")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateMemberResponseObject); ok {
		return validResponse.VisitUpdateMemberResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// FindManyOrganizations operation middleware
func (sh *strictHandler) FindManyOrganizations(ctx echo.Context, params FindManyOrganizationsParams) error {
	var request FindManyOrganizationsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FindManyOrganizations(ctx.Request().Context(), request.(FindManyOrganizationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindManyOrganizations")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FindManyOrganizationsResponseObject); ok {
		return validResponse.VisitFindManyOrganizationsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateOrganization operation middleware
func (sh *strictHandler) CreateOrganization(ctx echo.Context) error {
	var request CreateOrganizationRequestObject

	var body CreateOrganizationJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOrganization(ctx.Request().Context(), request.(CreateOrganizationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOrganization")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateOrganizationResponseObject); ok {
		return validResponse.VisitCreateOrganizationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteOrganization operation middleware
func (sh *strictHandler) DeleteOrganization(ctx echo.Context, id openapi_types.UUID) error {
	var request DeleteOrganizationRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteOrganization(ctx.Request().Context(), request.(DeleteOrganizationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteOrganization")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteOrganizationResponseObject); ok {
		return validResponse.VisitDeleteOrganizationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetOneOrganization operation middleware
func (sh *strictHandler) GetOneOrganization(ctx echo.Context, id openapi_types.UUID) error {
	var request GetOneOrganizationRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOneOrganization(ctx.Request().Context(), request.(GetOneOrganizationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOneOrganization")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetOneOrganizationResponseObject); ok {
		return validResponse.VisitGetOneOrganizationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateOrganization operation middleware
func (sh *strictHandler) UpdateOrganization(ctx echo.Context, id openapi_types.UUID) error {
	var request UpdateOrganizationRequestObject

	request.Id = id

	var body UpdateOrganizationJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateOrganization(ctx.Request().Context(), request.(UpdateOrganizationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateOrganization")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateOrganizationResponseObject); ok {
		return validResponse.VisitUpdateOrganizationResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RequestPasswordReset operation middleware
func (sh *strictHandler) RequestPasswordReset(ctx echo.Context) error {
	var request RequestPasswordResetRequestObject

	var body RequestPasswordResetJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RequestPasswordReset(ctx.Request().Context(), request.(RequestPasswordResetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RequestPasswordReset")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RequestPasswordResetResponseObject); ok {
		return validResponse.VisitRequestPasswordResetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ConfirmPasswordReset operation middleware
func (sh *strictHandler) ConfirmPasswordReset(ctx echo.Context) error {
	var request ConfirmPasswordResetRequestObject

	var body ConfirmPasswordResetJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ConfirmPasswordReset(ctx.Request().Context(), request.(ConfirmPasswordResetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConfirmPasswordReset")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ConfirmPasswordResetResponseObject); ok {
		return validResponse.VisitConfirmPasswordResetResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// FindManySessions operation middleware
func (sh *strictHandler) FindManySessions(ctx echo.Context, params FindManySessionsParams) error {
	var request FindManySessionsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FindManySessions(ctx.Request().Context(), request.(FindManySessionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindManySessions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FindManySessionsResponseObject); ok {
		return validResponse.VisitFindManySessionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteSession operation middleware
func (sh *strictHandler) DeleteSession(ctx echo.Context, id openapi_types.UUID) error {
	var request DeleteSessionRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSession(ctx.Request().Context(), request.(DeleteSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteSessionResponseObject); ok {
		return validResponse.VisitDeleteSessionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetOneSession operation middleware
func (sh *strictHandler) GetOneSession(ctx echo.Context, id openapi_types.UUID) error {
	var request GetOneSessionRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOneSession(ctx.Request().Context(), request.(GetOneSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOneSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetOneSessionResponseObject); ok {
		return validResponse.VisitGetOneSessionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateSession operation middleware
func (sh *strictHandler) UpdateSession(ctx echo.Context, id openapi_types.UUID) error {
	var request UpdateSessionRequestObject

	request.Id = id

	var body UpdateSessionJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateSession(ctx.Request().Context(), request.(UpdateSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateSession")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateSessionResponseObject); ok {
		return validResponse.VisitUpdateSessionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Login operation middleware
func (sh *strictHandler) Login(ctx echo.Context) error {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx.Request().Context(), request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		return validResponse.VisitLoginResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Logout operation middleware
func (sh *strictHandler) Logout(ctx echo.Context) error {
	var request LogoutRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Logout(ctx.Request().Context(), request.(LogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Logout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LogoutResponseObject); ok {
		return validResponse.VisitLogoutResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Register operation middleware
func (sh *strictHandler) Register(ctx echo.Context) error {
	var request RegisterRequestObject

	var body RegisterJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Register(ctx.Request().Context(), request.(RegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Register")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RegisterResponseObject); ok {
		return validResponse.VisitRegisterResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// FindManyUsers operation middleware
func (sh *strictHandler) FindManyUsers(ctx echo.Context, params FindManyUsersParams) error {
	var request FindManyUsersRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FindManyUsers(ctx.Request().Context(), request.(FindManyUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindManyUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FindManyUsersResponseObject); ok {
		return validResponse.VisitFindManyUsersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteUser operation middleware
func (sh *strictHandler) DeleteUser(ctx echo.Context, id openapi_types.UUID) error {
	var request DeleteUserRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUser(ctx.Request().Context(), request.(DeleteUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteUserResponseObject); ok {
		return validResponse.VisitDeleteUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetOneUser operation middleware
func (sh *strictHandler) GetOneUser(ctx echo.Context, id openapi_types.UUID) error {
	var request GetOneUserRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOneUser(ctx.Request().Context(), request.(GetOneUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOneUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetOneUserResponseObject); ok {
		return validResponse.VisitGetOneUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateUser operation middleware
func (sh *strictHandler) UpdateUser(ctx echo.Context, id openapi_types.UUID) error {
	var request UpdateUserRequestObject

	request.Id = id

	var body UpdateUserJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUser(ctx.Request().Context(), request.(UpdateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateUserResponseObject); ok {
		return validResponse.VisitUpdateUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetConfig operation middleware
func (sh *strictHandler) GetConfig(ctx echo.Context) error {
	var request GetConfigRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetConfig(ctx.Request().Context(), request.(GetConfigRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetConfig")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetConfigResponseObject); ok {
		return validResponse.VisitGetConfigResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetHealth operation middleware
func (sh *strictHandler) GetHealth(ctx echo.Context) error {
	var request GetHealthRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetHealth(ctx.Request().Context(), request.(GetHealthRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetHealth")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetHealthResponseObject); ok {
		return validResponse.VisitGetHealthResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// FindManyArtifacts operation middleware
func (sh *strictHandler) FindManyArtifacts(ctx echo.Context, params FindManyArtifactsParams) error {
	var request FindManyArtifactsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FindManyArtifacts(ctx.Request().Context(), request.(FindManyArtifactsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindManyArtifacts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FindManyArtifactsResponseObject); ok {
		return validResponse.VisitFindManyArtifactsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateArtifact operation middleware
func (sh *strictHandler) CreateArtifact(ctx echo.Context) error {
	var request CreateArtifactRequestObject

	var body CreateArtifactJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateArtifact(ctx.Request().Context(), request.(CreateArtifactRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateArtifact")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateArtifactResponseObject); ok {
		return validResponse.VisitCreateArtifactResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteArtifact operation middleware
func (sh *strictHandler) DeleteArtifact(ctx echo.Context, id openapi_types.UUID) error {
	var request DeleteArtifactRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteArtifact(ctx.Request().Context(), request.(DeleteArtifactRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteArtifact")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteArtifactResponseObject); ok {
		return validResponse.VisitDeleteArtifactResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetOneArtifact operation middleware
func (sh *strictHandler) GetOneArtifact(ctx echo.Context, id openapi_types.UUID) error {
	var request GetOneArtifactRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOneArtifact(ctx.Request().Context(), request.(GetOneArtifactRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOneArtifact")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetOneArtifactResponseObject); ok {
		return validResponse.VisitGetOneArtifactResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateArtifact operation middleware
func (sh *strictHandler) UpdateArtifact(ctx echo.Context, id openapi_types.UUID) error {
	var request UpdateArtifactRequestObject

	request.Id = id

	var body UpdateArtifactJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateArtifact(ctx.Request().Context(), request.(UpdateArtifactRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateArtifact")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateArtifactResponseObject); ok {
		return validResponse.VisitUpdateArtifactResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// FindManyLabels operation middleware
func (sh *strictHandler) FindManyLabels(ctx echo.Context, params FindManyLabelsParams) error {
	var request FindManyLabelsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FindManyLabels(ctx.Request().Context(), request.(FindManyLabelsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindManyLabels")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FindManyLabelsResponseObject); ok {
		return validResponse.VisitFindManyLabelsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateLabel operation middleware
func (sh *strictHandler) CreateLabel(ctx echo.Context) error {
	var request CreateLabelRequestObject

	var body CreateLabelJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateLabel(ctx.Request().Context(), request.(CreateLabelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateLabel")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateLabelResponseObject); ok {
		return validResponse.VisitCreateLabelResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteLabel operation middleware
func (sh *strictHandler) DeleteLabel(ctx echo.Context, id openapi_types.UUID) error {
	var request DeleteLabelRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteLabel(ctx.Request().Context(), request.(DeleteLabelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteLabel")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteLabelResponseObject); ok {
		return validResponse.VisitDeleteLabelResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetOneLabel operation middleware
func (sh *strictHandler) GetOneLabel(ctx echo.Context, id openapi_types.UUID) error {
	var request GetOneLabelRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOneLabel(ctx.Request().Context(), request.(GetOneLabelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOneLabel")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetOneLabelResponseObject); ok {
		return validResponse.VisitGetOneLabelResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateLabel operation middleware
func (sh *strictHandler) UpdateLabel(ctx echo.Context, id openapi_types.UUID) error {
	var request UpdateLabelRequestObject

	request.Id = id

	var body UpdateLabelJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateLabel(ctx.Request().Context(), request.(UpdateLabelRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateLabel")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateLabelResponseObject); ok {
		return validResponse.VisitUpdateLabelResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// FindManyPipelines operation middleware
func (sh *strictHandler) FindManyPipelines(ctx echo.Context, params FindManyPipelinesParams) error {
	var request FindManyPipelinesRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FindManyPipelines(ctx.Request().Context(), request.(FindManyPipelinesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindManyPipelines")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FindManyPipelinesResponseObject); ok {
		return validResponse.VisitFindManyPipelinesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreatePipeline operation middleware
func (sh *strictHandler) CreatePipeline(ctx echo.Context) error {
	var request CreatePipelineRequestObject

	var body CreatePipelineJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePipeline(ctx.Request().Context(), request.(CreatePipelineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePipeline")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreatePipelineResponseObject); ok {
		return validResponse.VisitCreatePipelineResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeletePipeline operation middleware
func (sh *strictHandler) DeletePipeline(ctx echo.Context, id openapi_types.UUID) error {
	var request DeletePipelineRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePipeline(ctx.Request().Context(), request.(DeletePipelineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePipeline")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeletePipelineResponseObject); ok {
		return validResponse.VisitDeletePipelineResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetOnePipeline operation middleware
func (sh *strictHandler) GetOnePipeline(ctx echo.Context, id openapi_types.UUID) error {
	var request GetOnePipelineRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOnePipeline(ctx.Request().Context(), request.(GetOnePipelineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOnePipeline")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetOnePipelineResponseObject); ok {
		return validResponse.VisitGetOnePipelineResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdatePipeline operation middleware
func (sh *strictHandler) UpdatePipeline(ctx echo.Context, id openapi_types.UUID) error {
	var request UpdatePipelineRequestObject

	request.Id = id

	var body UpdatePipelineJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePipeline(ctx.Request().Context(), request.(UpdatePipelineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePipeline")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdatePipelineResponseObject); ok {
		return validResponse.VisitUpdatePipelineResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// FindManyRuns operation middleware
func (sh *strictHandler) FindManyRuns(ctx echo.Context, params FindManyRunsParams) error {
	var request FindManyRunsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FindManyRuns(ctx.Request().Context(), request.(FindManyRunsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindManyRuns")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FindManyRunsResponseObject); ok {
		return validResponse.VisitFindManyRunsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateRun operation middleware
func (sh *strictHandler) CreateRun(ctx echo.Context) error {
	var request CreateRunRequestObject

	var body CreateRunJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateRun(ctx.Request().Context(), request.(CreateRunRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateRun")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateRunResponseObject); ok {
		return validResponse.VisitCreateRunResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteRun operation middleware
func (sh *strictHandler) DeleteRun(ctx echo.Context, id openapi_types.UUID) error {
	var request DeleteRunRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRun(ctx.Request().Context(), request.(DeleteRunRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRun")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteRunResponseObject); ok {
		return validResponse.VisitDeleteRunResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetOneRun operation middleware
func (sh *strictHandler) GetOneRun(ctx echo.Context, id openapi_types.UUID) error {
	var request GetOneRunRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOneRun(ctx.Request().Context(), request.(GetOneRunRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOneRun")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetOneRunResponseObject); ok {
		return validResponse.VisitGetOneRunResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateRun operation middleware
func (sh *strictHandler) UpdateRun(ctx echo.Context, id openapi_types.UUID) error {
	var request UpdateRunRequestObject

	request.Id = id

	var body UpdateRunJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateRun(ctx.Request().Context(), request.(UpdateRunRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateRun")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateRunResponseObject); ok {
		return validResponse.VisitUpdateRunResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// FindManyTools operation middleware
func (sh *strictHandler) FindManyTools(ctx echo.Context, params FindManyToolsParams) error {
	var request FindManyToolsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FindManyTools(ctx.Request().Context(), request.(FindManyToolsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindManyTools")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FindManyToolsResponseObject); ok {
		return validResponse.VisitFindManyToolsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateTool operation middleware
func (sh *strictHandler) CreateTool(ctx echo.Context) error {
	var request CreateToolRequestObject

	var body CreateToolJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTool(ctx.Request().Context(), request.(CreateToolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTool")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateToolResponseObject); ok {
		return validResponse.VisitCreateToolResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteTool operation middleware
func (sh *strictHandler) DeleteTool(ctx echo.Context, id openapi_types.UUID) error {
	var request DeleteToolRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTool(ctx.Request().Context(), request.(DeleteToolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTool")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteToolResponseObject); ok {
		return validResponse.VisitDeleteToolResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetOneTool operation middleware
func (sh *strictHandler) GetOneTool(ctx echo.Context, id openapi_types.UUID) error {
	var request GetOneToolRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOneTool(ctx.Request().Context(), request.(GetOneToolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOneTool")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetOneToolResponseObject); ok {
		return validResponse.VisitGetOneToolResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateTool operation middleware
func (sh *strictHandler) UpdateTool(ctx echo.Context, id openapi_types.UUID) error {
	var request UpdateToolRequestObject

	request.Id = id

	var body UpdateToolJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTool(ctx.Request().Context(), request.(UpdateToolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateTool")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateToolResponseObject); ok {
		return validResponse.VisitUpdateToolResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
