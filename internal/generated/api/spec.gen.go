// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
