// Package users provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package users

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	externalRef0 "github.com/archesai/archesai/internal/generated/api/common"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for FindManyUsersParamsSortField.
const (
	CreatedAt     FindManyUsersParamsSortField = "createdAt"
	Email         FindManyUsersParamsSortField = "email"
	EmailVerified FindManyUsersParamsSortField = "emailVerified"
	Id            FindManyUsersParamsSortField = "id"
	Image         FindManyUsersParamsSortField = "image"
	Name          FindManyUsersParamsSortField = "name"
	UpdatedAt     FindManyUsersParamsSortField = "updatedAt"
)

// Defines values for FindManyUsersParamsSortOrder.
const (
	Asc  FindManyUsersParamsSortOrder = "asc"
	Desc FindManyUsersParamsSortOrder = "desc"
)

// FindManyUsersParams defines parameters for FindManyUsers.
type FindManyUsersParams struct {
	// Filter Filter users by field values. Supported fields:
	// - createdAt, id, updatedAt, email, emailVerified, image, name
	Filter *UsersFilter            `json:"filter,omitempty"`
	Page   *externalRef0.PageQuery `form:"page,omitempty" json:"page,omitempty"`
	Sort   *UsersSort              `form:"sort,omitempty" json:"sort,omitempty"`
}

// FindManyUsersParamsSortField defines parameters for FindManyUsers.
type FindManyUsersParamsSortField string

// FindManyUsersParamsSortOrder defines parameters for FindManyUsers.
type FindManyUsersParamsSortOrder string

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody struct {
	// Email The user's e-mail
	Email *string `json:"email,omitempty"`

	// Image The user's avatar image URL
	Image *string `json:"image"`
}

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UpdateUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Find many users
	// (GET /users)
	FindManyUsers(ctx echo.Context, params FindManyUsersParams) error
	// Delete an user
	// (DELETE /users/{id})
	DeleteUser(ctx echo.Context, id openapi_types.UUID) error
	// Find an user
	// (GET /users/{id})
	GetOneUser(ctx echo.Context, id openapi_types.UUID) error
	// Update an user
	// (PATCH /users/{id})
	UpdateUser(ctx echo.Context, id openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindManyUsers converts echo context to params.
func (w *ServerInterfaceWrapper) FindManyUsers(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindManyUsersParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindManyUsers(ctx, params)
	return err
}

// DeleteUser converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUser(ctx, id)
	return err
}

// GetOneUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetOneUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOneUser(ctx, id)
	return err
}

// UpdateUser converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateUser(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/users", wrapper.FindManyUsers)
	router.DELETE(baseURL+"/users/:id", wrapper.DeleteUser)
	router.GET(baseURL+"/users/:id", wrapper.GetOneUser)
	router.PATCH(baseURL+"/users/:id", wrapper.UpdateUser)

}

type FindManyUsersRequestObject struct {
	Params FindManyUsersParams
}

type FindManyUsersResponseObject interface {
	VisitFindManyUsersResponse(w http.ResponseWriter) error
}

type FindManyUsers200JSONResponse struct {
	Data []UserEntity `json:"data"`
	Meta struct {
		// Total Total number of items in the collection
		Total float32 `json:"total"`
	} `json:"meta"`
}

func (response FindManyUsers200JSONResponse) VisitFindManyUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteUserResponseObject interface {
	VisitDeleteUserResponse(w http.ResponseWriter) error
}

type DeleteUser200JSONResponse struct {
	// Data Schema for User entity
	Data UserEntity `json:"data"`
}

func (response DeleteUser200JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser404JSONResponse struct{ externalRef0.NotFound }

func (response DeleteUser404JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetOneUserRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetOneUserResponseObject interface {
	VisitGetOneUserResponse(w http.ResponseWriter) error
}

type GetOneUser200JSONResponse struct {
	// Data Schema for User entity
	Data UserEntity `json:"data"`
}

func (response GetOneUser200JSONResponse) VisitGetOneUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOneUser404JSONResponse struct{ externalRef0.NotFound }

func (response GetOneUser404JSONResponse) VisitGetOneUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *UpdateUserJSONRequestBody
}

type UpdateUserResponseObject interface {
	VisitUpdateUserResponse(w http.ResponseWriter) error
}

type UpdateUser200JSONResponse struct {
	// Data Schema for User entity
	Data UserEntity `json:"data"`
}

func (response UpdateUser200JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser404JSONResponse struct{ externalRef0.NotFound }

func (response UpdateUser404JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Find many users
	// (GET /users)
	FindManyUsers(ctx context.Context, request FindManyUsersRequestObject) (FindManyUsersResponseObject, error)
	// Delete an user
	// (DELETE /users/{id})
	DeleteUser(ctx context.Context, request DeleteUserRequestObject) (DeleteUserResponseObject, error)
	// Find an user
	// (GET /users/{id})
	GetOneUser(ctx context.Context, request GetOneUserRequestObject) (GetOneUserResponseObject, error)
	// Update an user
	// (PATCH /users/{id})
	UpdateUser(ctx context.Context, request UpdateUserRequestObject) (UpdateUserResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// FindManyUsers operation middleware
func (sh *strictHandler) FindManyUsers(ctx echo.Context, params FindManyUsersParams) error {
	var request FindManyUsersRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FindManyUsers(ctx.Request().Context(), request.(FindManyUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindManyUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FindManyUsersResponseObject); ok {
		return validResponse.VisitFindManyUsersResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteUser operation middleware
func (sh *strictHandler) DeleteUser(ctx echo.Context, id openapi_types.UUID) error {
	var request DeleteUserRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUser(ctx.Request().Context(), request.(DeleteUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteUserResponseObject); ok {
		return validResponse.VisitDeleteUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetOneUser operation middleware
func (sh *strictHandler) GetOneUser(ctx echo.Context, id openapi_types.UUID) error {
	var request GetOneUserRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOneUser(ctx.Request().Context(), request.(GetOneUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOneUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetOneUserResponseObject); ok {
		return validResponse.VisitGetOneUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateUser operation middleware
func (sh *strictHandler) UpdateUser(ctx echo.Context, id openapi_types.UUID) error {
	var request UpdateUserRequestObject

	request.Id = id

	var body UpdateUserJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUser(ctx.Request().Context(), request.(UpdateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateUserResponseObject); ok {
		return validResponse.VisitUpdateUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
