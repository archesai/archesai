// Code generated by archesai codegen. DO NOT EDIT.
package users

import (
	"time"

	"github.com/google/uuid"
)

// Defines values for ListUsersParamsSortField.
const (
	UsersCreatedAt     ListUsersParamsSortField = "createdAt"
	UsersEmail         ListUsersParamsSortField = "email"
	UsersEmailVerified ListUsersParamsSortField = "emailVerified"
	UsersID            ListUsersParamsSortField = "id"
	UsersImage         ListUsersParamsSortField = "image"
	UsersName          ListUsersParamsSortField = "name"
	UsersUpdatedAt     ListUsersParamsSortField = "updatedAt"
)

// Defines values for ListUsersParamsSortOrder.
const (
	UsersAsc  ListUsersParamsSortOrder = "asc"
	UsersDesc ListUsersParamsSortOrder = "desc"
)

// ListUsersParamsSortField represents the type for ListUsersParamsSortField enum values.
type ListUsersParamsSortField string

// ListUsersParamsSortOrder represents the type for ListUsersParamsSortOrder enum values.
type ListUsersParamsSortOrder string

// CreateUserResponse
type CreateUserResponse = User

// UpdateUserResponse
type UpdateUserResponse = User

// GetUserResponse
type GetUserResponse = User

// User Schema for User entity
type User struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`
	// Email The user's email address
	Email string `json:"email" yaml:"email"`
	// EmailVerified Whether the user's email has been verified
	EmailVerified bool `json:"emailVerified" yaml:"emailVerified" default:"false"`
	// ID Unique identifier for the resource
	ID uuid.UUID `json:"id" yaml:"id"`
	// Image The user's avatar image URL
	Image *string `json:"image,omitempty" yaml:"image,omitempty"`
	// Name The user's display name
	Name string `json:"name" yaml:"name"`
	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// UpdateUserRequestBody Request body for updateUser
type UpdateUserRequestBody struct {
	// Description The users description
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name The users name
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`
}

// ListUsersParams Parameters for listing users
type ListUsersParams struct {
	// Filter Filter parameters
	Filter *ListUsersParamsFilter `json:"filter,omitempty" yaml:"filter,omitempty"`
	// Page Pagination parameters
	Page *ListUsersParamsPage `json:"page,omitempty" yaml:"page,omitempty"`
	// Sort Sort parameters
	Sort *ListUsersParamsSort `json:"sort,omitempty" yaml:"sort,omitempty"`
}

// ListUsersParamsFilter Filter users by field values
type ListUsersParamsFilter struct {
	// Filter A recursive filter node that can be a condition or group
	Filter interface{} `json:"filter" yaml:"filter"`
}

// ListUsersParamsPage Pagination parameters for listing users
type ListUsersParamsPage struct {
	// Number Page number (1-indexed)
	Number int `json:"number" yaml:"number"`
	// Size Page size (items per page)
	Size int `json:"size" yaml:"size"`
}

// ListUsersParamsSort Sort users by field and order
type ListUsersParamsSort struct {
	// Field Field to sort by
	Field ListUsersParamsSortField `json:"field" yaml:"field"`
	// Order Sort order (asc or desc)
	Order ListUsersParamsSortOrder `json:"order" yaml:"order"`
}

// ListMetadata Metadata for list responses
type ListMetadata struct {
	// Total Total number of items
	Total int64 `json:"total" yaml:"total"`
}

// DeleteUserResponse Response for deleting a user
type DeleteUserResponse struct {
}

// ListUsersResponse Response for listing users
type ListUsersResponse struct {
	// Data List of users
	Data []*User `json:"data" yaml:"data"`
	// Meta Metadata about the list response
	Meta ListMetadata `json:"meta" yaml:"meta"`
}
