// Package users provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package users

import (
	"time"

	"github.com/google/uuid"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ListUsersParamsSortField.
const (
	ListUsersParamsSortFieldCreatedAt     ListUsersParamsSortField = "createdAt"
	ListUsersParamsSortFieldEmail         ListUsersParamsSortField = "email"
	ListUsersParamsSortFieldEmailVerified ListUsersParamsSortField = "emailVerified"
	ListUsersParamsSortFieldID            ListUsersParamsSortField = "id"
	ListUsersParamsSortFieldImage         ListUsersParamsSortField = "image"
	ListUsersParamsSortFieldName          ListUsersParamsSortField = "name"
	ListUsersParamsSortFieldUpdatedAt     ListUsersParamsSortField = "updatedAt"
)

// Defines values for ListUsersParamsSortOrder.
const (
	Asc  ListUsersParamsSortOrder = "asc"
	Desc ListUsersParamsSortOrder = "desc"
)

// Base defines model for Base.
type Base struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// ID Universally Unique IDentifier
	ID UUID `json:"id" yaml:"id"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// Email defines model for Email.
type Email = openapi_types.Email

// FilterNode A recursive filter node that can be a condition or group
type FilterNode = interface{}

// Page Pagination (page number & size)
type Page struct {
	Number int `json:"number,omitempty,omitzero" yaml:"number,omitempty"`
	Size   int `json:"size,omitempty,omitzero" yaml:"size,omitempty"`
}

// Problem RFC 7807 (Problem Details) compliant error response
type Problem struct {
	// Detail Human-readable explanation specific to this occurrence
	Detail string `json:"detail,omitempty,omitzero" yaml:"detail,omitempty"`

	// Instance URI identifying the specific occurrence
	Instance string `json:"instance,omitempty,omitzero" yaml:"instance,omitempty"`

	// Status HTTP status code
	Status int `json:"status" yaml:"status"`

	// Title Short, human-readable summary
	Title string `json:"title" yaml:"title"`

	// Type URI identifying the problem type
	Type string `json:"type,omitempty,omitzero" yaml:"type,omitempty"`
}

// UUID Universally Unique IDentifier
type UUID = uuid.UUID

// User defines model for User.
type User struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// Email The user's email address
	Email Email `json:"email" yaml:"email"`

	// EmailVerified Whether the user's email has been verified
	EmailVerified bool `json:"emailVerified" yaml:"emailVerified"`

	// ID Universally Unique IDentifier
	ID UUID `json:"id" yaml:"id"`

	// Image The user's avatar image URL
	Image string `json:"image,omitempty,omitzero" yaml:"image,omitempty"`

	// Name The user's display name
	Name string `json:"name" yaml:"name"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// PageQuery Pagination (page number & size)
type PageQuery = Page

// UsersFilter A recursive filter node that can be a condition or group
type UsersFilter = FilterNode

// UsersSort defines model for UsersSort.
type UsersSort = []struct {
	Field string `json:"field" yaml:"field"`
	Order string `json:"order" yaml:"order"`
}

// BadRequest RFC 7807 (Problem Details) compliant error response
type BadRequest = Problem

// NotFound RFC 7807 (Problem Details) compliant error response
type NotFound = Problem

// Unauthorized RFC 7807 (Problem Details) compliant error response
type Unauthorized = Problem

// ListUsersParams defines parameters for ListUsers.
type ListUsersParams struct {
	// Filter Filter users by field values. Supported fields:
	// - createdAt, id, updatedAt, email, emailVerified, image, name
	Filter UsersFilter `json:"filter,omitempty,omitzero" yaml:"filter,omitempty"`

	// Page The page parameter
	Page PageQuery `form:"page,omitempty" json:"page,omitempty,omitzero" yaml:"page,omitempty"`

	// Sort The sort parameter
	Sort UsersSort `form:"sort,omitempty" json:"sort,omitempty,omitzero" yaml:"sort,omitempty"`
}

// ListUsersParamsSortField defines parameters for ListUsers.
type ListUsersParamsSortField string

// ListUsersParamsSortOrder defines parameters for ListUsers.
type ListUsersParamsSortOrder string

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody struct {
	// Email The user's e-mail
	Email string `json:"email,omitempty,omitzero" yaml:"email,omitempty"`

	// Image The user's avatar image URL
	Image string `json:"image,omitempty,omitzero" yaml:"image,omitempty"`
}

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UpdateUserJSONBody
