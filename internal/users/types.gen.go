// Package users provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package users

import (
	"encoding/json"
	"time"

	"github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ListUsersParamsSortField.
const (
	ListUsersParamsSortFieldCreatedAt     ListUsersParamsSortField = "createdAt"
	ListUsersParamsSortFieldEmail         ListUsersParamsSortField = "email"
	ListUsersParamsSortFieldEmailVerified ListUsersParamsSortField = "emailVerified"
	ListUsersParamsSortFieldId            ListUsersParamsSortField = "id"
	ListUsersParamsSortFieldImage         ListUsersParamsSortField = "image"
	ListUsersParamsSortFieldName          ListUsersParamsSortField = "name"
	ListUsersParamsSortFieldUpdatedAt     ListUsersParamsSortField = "updatedAt"
)

// Defines values for ListUsersParamsSortOrder.
const (
	Asc  ListUsersParamsSortOrder = "asc"
	Desc ListUsersParamsSortOrder = "desc"
)

// Base defines model for Base.
type Base struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// Id Universally Unique Identifier
	Id UUID `json:"id" yaml:"id"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// Email defines model for Email.
type Email = openapi_types.Email

// FilterNode A recursive filter node that can be a condition or group
type FilterNode = interface{}

// Page Pagination (page number & size)
type Page struct {
	Number int `json:"number,omitempty,omitzero" yaml:"number,omitempty"`
	Size   int `json:"size,omitempty,omitzero" yaml:"size,omitempty"`
}

// Problem RFC 7807 (Problem Details) compliant error response
type Problem struct {
	// Detail Human-readable explanation specific to this occurrence
	Detail string `json:"detail" yaml:"detail"`

	// Errors Additional validation errors for specific fields
	Errors []ValidationError `json:"errors,omitempty,omitzero" yaml:"errors,omitempty"`

	// Instance URI identifying the specific occurrence
	Instance string `json:"instance,omitempty,omitzero" yaml:"instance,omitempty"`

	// Status HTTP status code
	Status int `json:"status" yaml:"status"`

	// Title Short, human-readable summary
	Title string `json:"title" yaml:"title"`

	// Type URI identifying the problem type
	Type string `json:"type" yaml:"type"`
}

// UUID Universally Unique Identifier
type UUID = uuid.UUID

// User defines model for User.
type User struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// Email The user's email address
	Email Email `json:"email" yaml:"email"`

	// EmailVerified Whether the user's email has been verified
	EmailVerified bool `json:"emailVerified" yaml:"emailVerified"`

	// Id Universally Unique Identifier
	Id UUID `json:"id" yaml:"id"`

	// Image The user's avatar image URL
	Image string `json:"image,omitempty,omitzero" yaml:"image,omitempty"`

	// Name The user's display name
	Name string `json:"name" yaml:"name"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// ValidationError Individual field validation error
type ValidationError struct {
	// Field The field path that failed validation
	Field string `json:"field" yaml:"field"`

	// Message Human-readable error message
	Message string `json:"message" yaml:"message"`

	// Value The invalid value that was provided
	Value ValidationError_Value `json:"value,omitempty,omitzero" yaml:"value,omitempty"`
}

// ValidationErrorValue0 defines model for .
type ValidationErrorValue0 = string

// ValidationErrorValue1 defines model for .
type ValidationErrorValue1 = float32

// ValidationErrorValue2 defines model for .
type ValidationErrorValue2 = bool

// ValidationError_Value The invalid value that was provided
type ValidationError_Value struct {
	union json.RawMessage
}

// PageQuery Pagination (page number & size)
type PageQuery = Page

// UsersFilter A recursive filter node that can be a condition or group
type UsersFilter = FilterNode

// UsersSort defines model for UsersSort.
type UsersSort = []struct {
	Field string `json:"field" yaml:"field"`
	Order string `json:"order" yaml:"order"`
}

// BadRequest RFC 7807 (Problem Details) compliant error response
type BadRequest = Problem

// NotFound RFC 7807 (Problem Details) compliant error response
type NotFound = Problem

// Unauthorized RFC 7807 (Problem Details) compliant error response
type Unauthorized = Problem

// ListUsersParams defines parameters for ListUsers.
type ListUsersParams struct {
	// Filter Filter users by field values. Supported fields:
	// - createdAt, id, updatedAt, email, emailVerified, image, name
	Filter UsersFilter `json:"filter,omitempty,omitzero" yaml:"filter,omitempty"`

	// Page The page parameter
	Page PageQuery `form:"page,omitempty" json:"page,omitempty,omitzero" yaml:"page,omitempty"`

	// Sort The sort parameter
	Sort UsersSort `form:"sort,omitempty" json:"sort,omitempty,omitzero" yaml:"sort,omitempty"`
}

// ListUsersParamsSortField defines parameters for ListUsers.
type ListUsersParamsSortField string

// ListUsersParamsSortOrder defines parameters for ListUsers.
type ListUsersParamsSortOrder string

// UpdateUserJSONBody defines parameters for UpdateUser.
type UpdateUserJSONBody struct {
	// Email The user's e-mail
	Email string `json:"email,omitempty,omitzero" yaml:"email,omitempty"`

	// Image The user's avatar image URL
	Image string `json:"image,omitempty,omitzero" yaml:"image,omitempty"`
}

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody UpdateUserJSONBody

// AsValidationErrorValue0 returns the union data inside the ValidationError_Value as a ValidationErrorValue0
func (t ValidationError_Value) AsValidationErrorValue0() (ValidationErrorValue0, error) {
	var body ValidationErrorValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorValue0 overwrites any union data inside the ValidationError_Value as the provided ValidationErrorValue0
func (t *ValidationError_Value) FromValidationErrorValue0(v ValidationErrorValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorValue0 performs a merge with any union data inside the ValidationError_Value, using the provided ValidationErrorValue0
func (t *ValidationError_Value) MergeValidationErrorValue0(v ValidationErrorValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorValue1 returns the union data inside the ValidationError_Value as a ValidationErrorValue1
func (t ValidationError_Value) AsValidationErrorValue1() (ValidationErrorValue1, error) {
	var body ValidationErrorValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorValue1 overwrites any union data inside the ValidationError_Value as the provided ValidationErrorValue1
func (t *ValidationError_Value) FromValidationErrorValue1(v ValidationErrorValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorValue1 performs a merge with any union data inside the ValidationError_Value, using the provided ValidationErrorValue1
func (t *ValidationError_Value) MergeValidationErrorValue1(v ValidationErrorValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorValue2 returns the union data inside the ValidationError_Value as a ValidationErrorValue2
func (t ValidationError_Value) AsValidationErrorValue2() (ValidationErrorValue2, error) {
	var body ValidationErrorValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorValue2 overwrites any union data inside the ValidationError_Value as the provided ValidationErrorValue2
func (t *ValidationError_Value) FromValidationErrorValue2(v ValidationErrorValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorValue2 performs a merge with any union data inside the ValidationError_Value, using the provided ValidationErrorValue2
func (t *ValidationError_Value) MergeValidationErrorValue2(v ValidationErrorValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ValidationError_Value) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Value) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
