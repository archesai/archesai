// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package users

import (
	"context"
	"time"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCache creates a new instance of MockCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCache {
	mock := &MockCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCache is an autogenerated mock type for the Cache type
type MockCache struct {
	mock.Mock
}

type MockCache_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCache) EXPECT() *MockCache_Expecter {
	return &MockCache_Expecter{mock: &_m.Mock}
}

// DeleteUser provides a mock function for the type MockCache
func (_mock *MockCache) DeleteUser(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockCache_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockCache_Expecter) DeleteUser(ctx interface{}, id interface{}) *MockCache_DeleteUser_Call {
	return &MockCache_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *MockCache_DeleteUser_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockCache_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCache_DeleteUser_Call) Return(err error) *MockCache_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_DeleteUser_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockCache_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserByEmail provides a mock function for the type MockCache
func (_mock *MockCache) DeleteUserByEmail(ctx context.Context, email string) error {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserByEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, email)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_DeleteUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserByEmail'
type MockCache_DeleteUserByEmail_Call struct {
	*mock.Call
}

// DeleteUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockCache_Expecter) DeleteUserByEmail(ctx interface{}, email interface{}) *MockCache_DeleteUserByEmail_Call {
	return &MockCache_DeleteUserByEmail_Call{Call: _e.mock.On("DeleteUserByEmail", ctx, email)}
}

func (_c *MockCache_DeleteUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockCache_DeleteUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCache_DeleteUserByEmail_Call) Return(err error) *MockCache_DeleteUserByEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_DeleteUserByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) error) *MockCache_DeleteUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// FlushAll provides a mock function for the type MockCache
func (_mock *MockCache) FlushAll(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FlushAll")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_FlushAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FlushAll'
type MockCache_FlushAll_Call struct {
	*mock.Call
}

// FlushAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockCache_Expecter) FlushAll(ctx interface{}) *MockCache_FlushAll_Call {
	return &MockCache_FlushAll_Call{Call: _e.mock.On("FlushAll", ctx)}
}

func (_c *MockCache_FlushAll_Call) Run(run func(ctx context.Context)) *MockCache_FlushAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCache_FlushAll_Call) Return(err error) *MockCache_FlushAll_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_FlushAll_Call) RunAndReturn(run func(ctx context.Context) error) *MockCache_FlushAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockCache
func (_mock *MockCache) GetUser(ctx context.Context, id uuid.UUID) (*User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCache_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockCache_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockCache_Expecter) GetUser(ctx interface{}, id interface{}) *MockCache_GetUser_Call {
	return &MockCache_GetUser_Call{Call: _e.mock.On("GetUser", ctx, id)}
}

func (_c *MockCache_GetUser_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockCache_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCache_GetUser_Call) Return(user *User, err error) *MockCache_GetUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockCache_GetUser_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*User, error)) *MockCache_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function for the type MockCache
func (_mock *MockCache) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCache_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockCache_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockCache_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockCache_GetUserByEmail_Call {
	return &MockCache_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockCache_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockCache_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCache_GetUserByEmail_Call) Return(user *User, err error) *MockCache_GetUserByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockCache_GetUserByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*User, error)) *MockCache_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SetUser provides a mock function for the type MockCache
func (_mock *MockCache) SetUser(ctx context.Context, entity *User, ttl time.Duration) error {
	ret := _mock.Called(ctx, entity, ttl)

	if len(ret) == 0 {
		panic("no return value specified for SetUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *User, time.Duration) error); ok {
		r0 = returnFunc(ctx, entity, ttl)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_SetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUser'
type MockCache_SetUser_Call struct {
	*mock.Call
}

// SetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *User
//   - ttl time.Duration
func (_e *MockCache_Expecter) SetUser(ctx interface{}, entity interface{}, ttl interface{}) *MockCache_SetUser_Call {
	return &MockCache_SetUser_Call{Call: _e.mock.On("SetUser", ctx, entity, ttl)}
}

func (_c *MockCache_SetUser_Call) Run(run func(ctx context.Context, entity *User, ttl time.Duration)) *MockCache_SetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *User
		if args[1] != nil {
			arg1 = args[1].(*User)
		}
		var arg2 time.Duration
		if args[2] != nil {
			arg2 = args[2].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockCache_SetUser_Call) Return(err error) *MockCache_SetUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_SetUser_Call) RunAndReturn(run func(ctx context.Context, entity *User, ttl time.Duration) error) *MockCache_SetUser_Call {
	_c.Call.Return(run)
	return _c
}

// SetUserByEmail provides a mock function for the type MockCache
func (_mock *MockCache) SetUserByEmail(ctx context.Context, email string, entity *User, ttl time.Duration) error {
	ret := _mock.Called(ctx, email, entity, ttl)

	if len(ret) == 0 {
		panic("no return value specified for SetUserByEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, *User, time.Duration) error); ok {
		r0 = returnFunc(ctx, email, entity, ttl)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCache_SetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUserByEmail'
type MockCache_SetUserByEmail_Call struct {
	*mock.Call
}

// SetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - entity *User
//   - ttl time.Duration
func (_e *MockCache_Expecter) SetUserByEmail(ctx interface{}, email interface{}, entity interface{}, ttl interface{}) *MockCache_SetUserByEmail_Call {
	return &MockCache_SetUserByEmail_Call{Call: _e.mock.On("SetUserByEmail", ctx, email, entity, ttl)}
}

func (_c *MockCache_SetUserByEmail_Call) Run(run func(ctx context.Context, email string, entity *User, ttl time.Duration)) *MockCache_SetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 *User
		if args[2] != nil {
			arg2 = args[2].(*User)
		}
		var arg3 time.Duration
		if args[3] != nil {
			arg3 = args[3].(time.Duration)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockCache_SetUserByEmail_Call) Return(err error) *MockCache_SetUserByEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCache_SetUserByEmail_Call) RunAndReturn(run func(ctx context.Context, email string, entity *User, ttl time.Duration) error) *MockCache_SetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventPublisher creates a new instance of MockEventPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventPublisher {
	mock := &MockEventPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEventPublisher is an autogenerated mock type for the EventPublisher type
type MockEventPublisher struct {
	mock.Mock
}

type MockEventPublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventPublisher) EXPECT() *MockEventPublisher_Expecter {
	return &MockEventPublisher_Expecter{mock: &_m.Mock}
}

// PublishRaw provides a mock function for the type MockEventPublisher
func (_mock *MockEventPublisher) PublishRaw(ctx context.Context, event *Event) error {
	ret := _mock.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for PublishRaw")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *Event) error); ok {
		r0 = returnFunc(ctx, event)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEventPublisher_PublishRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishRaw'
type MockEventPublisher_PublishRaw_Call struct {
	*mock.Call
}

// PublishRaw is a helper method to define mock.On call
//   - ctx context.Context
//   - event *Event
func (_e *MockEventPublisher_Expecter) PublishRaw(ctx interface{}, event interface{}) *MockEventPublisher_PublishRaw_Call {
	return &MockEventPublisher_PublishRaw_Call{Call: _e.mock.On("PublishRaw", ctx, event)}
}

func (_c *MockEventPublisher_PublishRaw_Call) Run(run func(ctx context.Context, event *Event)) *MockEventPublisher_PublishRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *Event
		if args[1] != nil {
			arg1 = args[1].(*Event)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventPublisher_PublishRaw_Call) Return(err error) *MockEventPublisher_PublishRaw_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEventPublisher_PublishRaw_Call) RunAndReturn(run func(ctx context.Context, event *Event) error) *MockEventPublisher_PublishRaw_Call {
	_c.Call.Return(run)
	return _c
}

// PublishUserCreated provides a mock function for the type MockEventPublisher
func (_mock *MockEventPublisher) PublishUserCreated(ctx context.Context, entity *User) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for PublishUserCreated")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *User) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEventPublisher_PublishUserCreated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishUserCreated'
type MockEventPublisher_PublishUserCreated_Call struct {
	*mock.Call
}

// PublishUserCreated is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *User
func (_e *MockEventPublisher_Expecter) PublishUserCreated(ctx interface{}, entity interface{}) *MockEventPublisher_PublishUserCreated_Call {
	return &MockEventPublisher_PublishUserCreated_Call{Call: _e.mock.On("PublishUserCreated", ctx, entity)}
}

func (_c *MockEventPublisher_PublishUserCreated_Call) Run(run func(ctx context.Context, entity *User)) *MockEventPublisher_PublishUserCreated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *User
		if args[1] != nil {
			arg1 = args[1].(*User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventPublisher_PublishUserCreated_Call) Return(err error) *MockEventPublisher_PublishUserCreated_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEventPublisher_PublishUserCreated_Call) RunAndReturn(run func(ctx context.Context, entity *User) error) *MockEventPublisher_PublishUserCreated_Call {
	_c.Call.Return(run)
	return _c
}

// PublishUserDeleted provides a mock function for the type MockEventPublisher
func (_mock *MockEventPublisher) PublishUserDeleted(ctx context.Context, entity *User) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for PublishUserDeleted")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *User) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEventPublisher_PublishUserDeleted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishUserDeleted'
type MockEventPublisher_PublishUserDeleted_Call struct {
	*mock.Call
}

// PublishUserDeleted is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *User
func (_e *MockEventPublisher_Expecter) PublishUserDeleted(ctx interface{}, entity interface{}) *MockEventPublisher_PublishUserDeleted_Call {
	return &MockEventPublisher_PublishUserDeleted_Call{Call: _e.mock.On("PublishUserDeleted", ctx, entity)}
}

func (_c *MockEventPublisher_PublishUserDeleted_Call) Run(run func(ctx context.Context, entity *User)) *MockEventPublisher_PublishUserDeleted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *User
		if args[1] != nil {
			arg1 = args[1].(*User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventPublisher_PublishUserDeleted_Call) Return(err error) *MockEventPublisher_PublishUserDeleted_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEventPublisher_PublishUserDeleted_Call) RunAndReturn(run func(ctx context.Context, entity *User) error) *MockEventPublisher_PublishUserDeleted_Call {
	_c.Call.Return(run)
	return _c
}

// PublishUserEmail_verified provides a mock function for the type MockEventPublisher
func (_mock *MockEventPublisher) PublishUserEmail_verified(ctx context.Context, entity *User) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for PublishUserEmail_verified")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *User) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEventPublisher_PublishUserEmail_verified_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishUserEmail_verified'
type MockEventPublisher_PublishUserEmail_verified_Call struct {
	*mock.Call
}

// PublishUserEmail_verified is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *User
func (_e *MockEventPublisher_Expecter) PublishUserEmail_verified(ctx interface{}, entity interface{}) *MockEventPublisher_PublishUserEmail_verified_Call {
	return &MockEventPublisher_PublishUserEmail_verified_Call{Call: _e.mock.On("PublishUserEmail_verified", ctx, entity)}
}

func (_c *MockEventPublisher_PublishUserEmail_verified_Call) Run(run func(ctx context.Context, entity *User)) *MockEventPublisher_PublishUserEmail_verified_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *User
		if args[1] != nil {
			arg1 = args[1].(*User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventPublisher_PublishUserEmail_verified_Call) Return(err error) *MockEventPublisher_PublishUserEmail_verified_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEventPublisher_PublishUserEmail_verified_Call) RunAndReturn(run func(ctx context.Context, entity *User) error) *MockEventPublisher_PublishUserEmail_verified_Call {
	_c.Call.Return(run)
	return _c
}

// PublishUserUpdated provides a mock function for the type MockEventPublisher
func (_mock *MockEventPublisher) PublishUserUpdated(ctx context.Context, entity *User) error {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for PublishUserUpdated")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *User) error); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEventPublisher_PublishUserUpdated_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishUserUpdated'
type MockEventPublisher_PublishUserUpdated_Call struct {
	*mock.Call
}

// PublishUserUpdated is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *User
func (_e *MockEventPublisher_Expecter) PublishUserUpdated(ctx interface{}, entity interface{}) *MockEventPublisher_PublishUserUpdated_Call {
	return &MockEventPublisher_PublishUserUpdated_Call{Call: _e.mock.On("PublishUserUpdated", ctx, entity)}
}

func (_c *MockEventPublisher_PublishUserUpdated_Call) Run(run func(ctx context.Context, entity *User)) *MockEventPublisher_PublishUserUpdated_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *User
		if args[1] != nil {
			arg1 = args[1].(*User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEventPublisher_PublishUserUpdated_Call) Return(err error) *MockEventPublisher_PublishUserUpdated_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEventPublisher_PublishUserUpdated_Call) RunAndReturn(run func(ctx context.Context, entity *User) error) *MockEventPublisher_PublishUserUpdated_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockRepository
func (_mock *MockRepository) CreateUser(ctx context.Context, entity *User) (*User, error) {
	ret := _mock.Called(ctx, entity)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *User) (*User, error)); ok {
		return returnFunc(ctx, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *User) *User); ok {
		r0 = returnFunc(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *User) error); ok {
		r1 = returnFunc(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - entity *User
func (_e *MockRepository_Expecter) CreateUser(ctx interface{}, entity interface{}) *MockRepository_CreateUser_Call {
	return &MockRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, entity)}
}

func (_c *MockRepository_CreateUser_Call) Run(run func(ctx context.Context, entity *User)) *MockRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *User
		if args[1] != nil {
			arg1 = args[1].(*User)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_CreateUser_Call) Return(user *User, err error) *MockRepository_CreateUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockRepository_CreateUser_Call) RunAndReturn(run func(ctx context.Context, entity *User) (*User, error)) *MockRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type MockRepository
func (_mock *MockRepository) DeleteUser(ctx context.Context, id uuid.UUID) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockRepository_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockRepository_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepository_Expecter) DeleteUser(ctx interface{}, id interface{}) *MockRepository_DeleteUser_Call {
	return &MockRepository_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, id)}
}

func (_c *MockRepository_DeleteUser_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_DeleteUser_Call) Return(err error) *MockRepository_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockRepository_DeleteUser_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) error) *MockRepository_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUser provides a mock function for the type MockRepository
func (_mock *MockRepository) GetUser(ctx context.Context, id uuid.UUID) (*User, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*User, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *User); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockRepository_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *MockRepository_Expecter) GetUser(ctx interface{}, id interface{}) *MockRepository_GetUser_Call {
	return &MockRepository_GetUser_Call{Call: _e.mock.On("GetUser", ctx, id)}
}

func (_c *MockRepository_GetUser_Call) Run(run func(ctx context.Context, id uuid.UUID)) *MockRepository_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetUser_Call) Return(user *User, err error) *MockRepository_GetUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockRepository_GetUser_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID) (*User, error)) *MockRepository_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function for the type MockRepository
func (_mock *MockRepository) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockRepository_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *MockRepository_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockRepository_GetUserByEmail_Call {
	return &MockRepository_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockRepository_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockRepository_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_GetUserByEmail_Call) Return(user *User, err error) *MockRepository_GetUserByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockRepository_GetUserByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*User, error)) *MockRepository_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function for the type MockRepository
func (_mock *MockRepository) ListUsers(ctx context.Context, params ListUsersParams) ([]*User, int64, error) {
	ret := _mock.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 []*User
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ListUsersParams) ([]*User, int64, error)); ok {
		return returnFunc(ctx, params)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ListUsersParams) []*User); ok {
		r0 = returnFunc(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ListUsersParams) int64); ok {
		r1 = returnFunc(ctx, params)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, ListUsersParams) error); ok {
		r2 = returnFunc(ctx, params)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockRepository_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockRepository_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - params ListUsersParams
func (_e *MockRepository_Expecter) ListUsers(ctx interface{}, params interface{}) *MockRepository_ListUsers_Call {
	return &MockRepository_ListUsers_Call{Call: _e.mock.On("ListUsers", ctx, params)}
}

func (_c *MockRepository_ListUsers_Call) Run(run func(ctx context.Context, params ListUsersParams)) *MockRepository_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ListUsersParams
		if args[1] != nil {
			arg1 = args[1].(ListUsersParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockRepository_ListUsers_Call) Return(users []*User, n int64, err error) *MockRepository_ListUsers_Call {
	_c.Call.Return(users, n, err)
	return _c
}

func (_c *MockRepository_ListUsers_Call) RunAndReturn(run func(ctx context.Context, params ListUsersParams) ([]*User, int64, error)) *MockRepository_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function for the type MockRepository
func (_mock *MockRepository) UpdateUser(ctx context.Context, id uuid.UUID, entity *User) (*User, error) {
	ret := _mock.Called(ctx, id, entity)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *User) (*User, error)); ok {
		return returnFunc(ctx, id, entity)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *User) *User); ok {
		r0 = returnFunc(ctx, id, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *User) error); ok {
		r1 = returnFunc(ctx, id, entity)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockRepository_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockRepository_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - entity *User
func (_e *MockRepository_Expecter) UpdateUser(ctx interface{}, id interface{}, entity interface{}) *MockRepository_UpdateUser_Call {
	return &MockRepository_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, id, entity)}
}

func (_c *MockRepository_UpdateUser_Call) Run(run func(ctx context.Context, id uuid.UUID, entity *User)) *MockRepository_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *User
		if args[2] != nil {
			arg2 = args[2].(*User)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockRepository_UpdateUser_Call) Return(user *User, err error) *MockRepository_UpdateUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockRepository_UpdateUser_Call) RunAndReturn(run func(ctx context.Context, id uuid.UUID, entity *User) (*User, error)) *MockRepository_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}
