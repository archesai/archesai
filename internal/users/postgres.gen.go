// Code generated by codegen repository. DO NOT EDIT.
package users

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"time"

	"github.com/archesai/archesai/internal/database/postgresql"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/oapi-codegen/runtime/types"
)

// PostgresRepository implements Repository using PostgreSQL.
type PostgresRepository struct {
	db      *pgxpool.Pool
	queries *postgresql.Queries
}

// NewPostgresRepository creates a new PostgreSQL repository.
func NewPostgresRepository(db *pgxpool.Pool) Repository {
	return &PostgresRepository{
		db:      db,
		queries: postgresql.New(db),
	}
}

// User operations

// Create creates a new user
func (r *PostgresRepository) Create(ctx context.Context, entity *User) (*User, error) {
	params := postgresql.CreateUserParams{
		ID: entity.ID,

		Email:         string(entity.Email),
		EmailVerified: entity.EmailVerified,
		Image:         stringPtr(entity.Image),
		Name:          entity.Name,
	}

	result, err := r.queries.CreateUser(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to create user: %w", err)
	}

	return mapUserFromDB(&result), nil
}

// Get retrieves a user by ID
func (r *PostgresRepository) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	result, err := r.queries.GetUser(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrUserNotFound
		}
		return nil, fmt.Errorf("failed to get user: %w", err)
	}

	return mapUserFromDB(&result), nil
}

// Update updates an existing user
func (r *PostgresRepository) Update(ctx context.Context, id uuid.UUID, entity *User) (*User, error) {
	params := postgresql.UpdateUserParams{
		ID: id,

		Email:         stringPtr(string(entity.Email)),
		EmailVerified: boolPtr(entity.EmailVerified),
		Image:         stringPtr(entity.Image),
		Name:          stringPtr(entity.Name),
	}

	result, err := r.queries.UpdateUser(ctx, params)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrUserNotFound
		}
		return nil, fmt.Errorf("failed to update user: %w", err)
	}

	return mapUserFromDB(&result), nil
}

// Delete removes a user
func (r *PostgresRepository) Delete(ctx context.Context, id uuid.UUID) error {
	err := r.queries.DeleteUser(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return ErrUserNotFound
		}
		return fmt.Errorf("failed to delete user: %w", err)
	}
	return nil
}

// List returns a paginated list of users
func (r *PostgresRepository) List(ctx context.Context, params ListUsersParams) ([]*User, int64, error) {
	// Calculate offset from page
	offset := int32(0)
	limit := int32(10) // default

	// Check if params has Page field with Number and Size
	if params.Page.Number > 0 && params.Page.Size > 0 {
		offset = int32((params.Page.Number - 1) * params.Page.Size)
		limit = int32(params.Page.Size)
	}

	listParams := postgresql.ListUsersParams{
		Limit:  limit,
		Offset: offset,
	}

	results, err := r.queries.ListUsers(ctx, listParams)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list users: %w", err)
	}

	items := make([]*User, len(results))
	for i, result := range results {
		items[i] = mapUserFromDB(&result)
	}

	// For now, return the count as the length of results
	// In production, you'd want a separate count query
	count := int64(len(results))

	return items, count, nil
}

// GetByEmail retrieves user by email
func (r *PostgresRepository) GetByEmail(ctx context.Context, email string) (*User, error) {
	// TODO: Implement GetByEmail - this needs a custom SQLC query
	// The implementation depends on the specific query available in SQLC

	return nil, fmt.Errorf("GetByEmail not implemented - add SQLC query")

}

// Mapper functions - Convert between domain types and database types

func mapUserFromDB(db *postgresql.User) *User {
	if db == nil {
		return nil
	}

	result := &User{
		ID:        db.ID,
		CreatedAt: db.CreatedAt,
		UpdatedAt: db.UpdatedAt,

		Email: types.Email(db.Email),

		EmailVerified: db.EmailVerified,

		Image: stringFromPtr(db.Image),

		Name: db.Name,
	}

	return result
}

// Helper functions for conversions
func stringPtr(s string) *string {
	if s == "" {
		return nil
	}
	return &s
}

func nilIfEmpty(s string) *string {
	if s == "" {
		return nil
	}
	return &s
}

func stringFromPtr(s *string) string {
	if s == nil {
		return ""
	}
	return *s
}

func boolPtr(b bool) *bool {
	return &b
}

func int32Ptr(i int32) *int32 {
	return &i
}

func float32Ptr(f float32) *float32 {
	return &f
}

func float64Ptr(f float64) *float64 {
	return &f
}

func marshalJSON(v interface{}) *string {
	if v == nil {
		return nil
	}
	data, err := json.Marshal(v)
	if err != nil {
		return nil
	}
	s := string(data)
	return &s
}

func unmarshalJSON(s *string) map[string]interface{} {
	if s == nil {
		return nil
	}
	var result map[string]interface{}
	if err := json.Unmarshal([]byte(*s), &result); err != nil {
		return nil
	}
	return result
}

func uuidFromPtr(u *uuid.UUID) uuid.UUID {
	if u == nil {
		return uuid.Nil
	}
	return *u
}

func timeFromPtr(t *time.Time) time.Time {
	if t == nil {
		return time.Time{}
	}
	return *t
}
