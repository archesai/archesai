// Code generated by archesai/codegen. DO NOT EDIT.

package users

import (
	"context"
	"errors"
	"log/slog"
	"time"

	"github.com/archesai/archesai/internal/database/postgresql"
	"github.com/google/uuid"
)

// Service implements the business logic
type Service struct {
	repo   Repository
	db     *postgresql.Queries
	logger *slog.Logger
}

// NewService creates a new service implementation
func NewService(repo Repository, db *postgresql.Queries, logger *slog.Logger) *Service {
	return &Service{
		repo:   repo,
		db:     db,
		logger: logger,
	}
}

// GetUser gets a user by ID
func (s *Service) GetUser(ctx context.Context, id uuid.UUID) (*User, error) {
	entity, err := s.repo.Get(ctx, id)
	if err != nil {
		if errors.Is(err, ErrUserNotFound) {
			return nil, err
		}
		s.logger.Error("Failed to get user", "error", err, "id", id)
		return nil, err
	}

	return entity, nil
}

// UpdateUser updates a user
func (s *Service) UpdateUser(ctx context.Context, id uuid.UUID, entity *User) (*User, error) {
	if entity == nil {
		return nil, errors.New("entity is required")
	}

	// Set updated timestamp
	entity.UpdatedAt = time.Now()

	updated, err := s.repo.Update(ctx, id, entity)
	if err != nil {
		s.logger.Error("Failed to update user", "error", err, "id", id)
		return nil, err
	}

	return updated, nil
}

// DeleteUser deletes a user
func (s *Service) DeleteUser(ctx context.Context, id uuid.UUID) error {
	// Check if entity exists first
	_, err := s.repo.Get(ctx, id)
	if err != nil {
		if errors.Is(err, ErrUserNotFound) {
			return err
		}
		s.logger.Error("Failed to get user for deletion", "error", err, "id", id)
		return err
	}

	err = s.repo.Delete(ctx, id)
	if err != nil {
		s.logger.Error("Failed to delete user", "error", err, "id", id)
		return err
	}

	return nil
}

// ListUsers lists all users
func (s *Service) ListUsers(ctx context.Context, filter *ListUsersParamsFilter, page *ListUsersParamsPage, sort *ListUsersParamsSort) ([]*User, int64, error) {
	params := ListUsersParams{
		Filter: filter,
		Page:   page,
		Sort:   sort,
	}
	entities, total, err := s.repo.List(ctx, params)
	if err != nil {
		s.logger.Error("Failed to list users", "error", err)
		return nil, 0, err
	}

	return entities, total, nil
}
