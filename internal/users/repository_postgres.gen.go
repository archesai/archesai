// Code generated by codegen repository. DO NOT EDIT.
package users

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/archesai/archesai/internal/database/postgresql"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgxpool"
)

// PostgresRepository implements Repository using PostgreSQL.
type PostgresRepository struct {
	queries *postgresql.Queries
}

// NewPostgresRepository creates a new PostgreSQL repository.
func NewPostgresRepository(db *pgxpool.Pool) Repository {
	return &PostgresRepository{
		queries: postgresql.New(db),
	}
}

// User operations

// Create creates a new user
func (r *PostgresRepository) Create(ctx context.Context, entity *User) (*User, error) {
	params := postgresql.CreateUserParams{
		ID: entity.ID,

		Email:         entity.Email,
		EmailVerified: entity.EmailVerified,
		Image:         entity.Image,
		Name:          entity.Name,
	}

	result, err := r.queries.CreateUser(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to create user: %w", err)
	}

	return mapUserFromDB(&result), nil
}

// Get retrieves a user by ID
func (r *PostgresRepository) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	result, err := r.queries.GetUser(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrUserNotFound
		}
		return nil, fmt.Errorf("failed to get user: %w", err)
	}

	return mapUserFromDB(&result), nil
}

// Update updates an existing user
func (r *PostgresRepository) Update(ctx context.Context, id uuid.UUID, entity *User) (*User, error) {
	params := postgresql.UpdateUserParams{
		ID: id,

		Email:         &entity.Email,
		EmailVerified: &entity.EmailVerified,
		Image:         entity.Image,
		Name:          &entity.Name,
	}

	result, err := r.queries.UpdateUser(ctx, params)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrUserNotFound
		}
		return nil, fmt.Errorf("failed to update user: %w", err)
	}

	return mapUserFromDB(&result), nil
}

// Delete removes a user
func (r *PostgresRepository) Delete(ctx context.Context, id uuid.UUID) error {
	err := r.queries.DeleteUser(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return ErrUserNotFound
		}
		return fmt.Errorf("failed to delete user: %w", err)
	}
	return nil
}

// List returns a paginated list of users
func (r *PostgresRepository) List(ctx context.Context, params ListUsersParams) ([]*User, int64, error) {
	// Calculate offset from page
	offset := int32(0)
	limit := int32(10) // default

	// Check if params has Page field with Number and Size
	if params.Page != nil && params.Page.Number > 0 && params.Page.Size > 0 {
		offset = int32((params.Page.Number - 1) * params.Page.Size)
		limit = int32(params.Page.Size)
	}

	listParams := postgresql.ListUsersParams{
		Limit:  limit,
		Offset: offset,
	}

	results, err := r.queries.ListUsers(ctx, listParams)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list users: %w", err)
	}

	items := make([]*User, len(results))
	for i, result := range results {
		items[i] = mapUserFromDB(&result)
	}

	// For now, return the count as the length of results
	// In production, you'd want a separate count query
	count := int64(len(results))

	return items, count, nil
}

// Additional methods

// GetByEmail retrieves a single user by email
func (r *PostgresRepository) GetByEmail(ctx context.Context, email string) (*User, error) {

	// TODO: Implement GetByEmail - fetch single user
	return nil, fmt.Errorf("GetByEmail not yet implemented")

}

// Mapper functions - Convert between domain types and database types

func mapUserFromDB(db *postgresql.User) *User {
	if db == nil {
		return nil
	}

	result := &User{
		ID:        db.ID,
		CreatedAt: db.CreatedAt,
		UpdatedAt: db.UpdatedAt,

		Email: db.Email,

		EmailVerified: db.EmailVerified,

		Image: db.Image,

		Name: db.Name,
	}

	return result
}
