// Code generated by codegen events. DO NOT EDIT.
package users

import (
	"context"
	"github.com/google/uuid"
	"time"
)

// EventType represents the type of event.
type EventType string

// Event types for users domain.
const (
	EventUserCreated        EventType = "user.created"
	EventUserUpdated        EventType = "user.updated"
	EventUserDeleted        EventType = "user.deleted"
	EventUserEmail_verified EventType = "user.email-verified"
)

// Event represents a domain event.
type Event struct {
	ID        string            `json:"id"`
	Type      EventType         `json:"type"`
	Timestamp time.Time         `json:"timestamp"`
	Source    string            `json:"source"`
	Data      interface{}       `json:"data"`
	Metadata  map[string]string `json:"metadata,omitempty"`
}

// EventPublisher publishes domain events.
type EventPublisher interface {
	// PublishUserCreated publishes a created event event for User.
	PublishUserCreated(ctx context.Context, entity *User) error
	// PublishUserUpdated publishes a updated event event for User.
	PublishUserUpdated(ctx context.Context, entity *User) error
	// PublishUserDeleted publishes a deleted event event for User.
	PublishUserDeleted(ctx context.Context, entity *User) error
	// PublishUserEmail_verified publishes a email_verified event event for User.
	PublishUserEmail_verified(ctx context.Context, entity *User) error

	// PublishRaw publishes a raw event.
	PublishRaw(ctx context.Context, event *Event) error
}

// NoOpEventPublisher is a no-op event publisher implementation.
type NoOpEventPublisher struct{}

// NewNoOpEventPublisher creates a new no-op event publisher.
func NewNoOpEventPublisher() EventPublisher {
	return &NoOpEventPublisher{}
}

// PublishUserCreated does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishUserCreated(ctx context.Context, entity *User) error {
	return nil
}

// PublishUserUpdated does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishUserUpdated(ctx context.Context, entity *User) error {
	return nil
}

// PublishUserDeleted does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishUserDeleted(ctx context.Context, entity *User) error {
	return nil
}

// PublishUserEmail_verified does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishUserEmail_verified(ctx context.Context, entity *User) error {
	return nil
}

// PublishRaw does nothing in no-op implementation.
func (p *NoOpEventPublisher) PublishRaw(ctx context.Context, event *Event) error {
	return nil
}

// UserCreatedEvent represents a created event event for User.
type UserCreatedEvent struct {
	Event
	Entity *User `json:"entity"`
}

// NewUserCreatedEvent creates a new User created event.
func NewUserCreatedEvent(entity *User) *UserCreatedEvent {
	return &UserCreatedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventUserCreated,
			Timestamp: time.Now().UTC(),
			Source:    "users",
			Data:      entity,
		},
		Entity: entity,
	}
}

// UserUpdatedEvent represents a updated event event for User.
type UserUpdatedEvent struct {
	Event
	Entity *User `json:"entity"`
}

// NewUserUpdatedEvent creates a new User updated event.
func NewUserUpdatedEvent(entity *User) *UserUpdatedEvent {
	return &UserUpdatedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventUserUpdated,
			Timestamp: time.Now().UTC(),
			Source:    "users",
			Data:      entity,
		},
		Entity: entity,
	}
}

// UserDeletedEvent represents a deleted event event for User.
type UserDeletedEvent struct {
	Event
	Entity *User `json:"entity"`
}

// NewUserDeletedEvent creates a new User deleted event.
func NewUserDeletedEvent(entity *User) *UserDeletedEvent {
	return &UserDeletedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventUserDeleted,
			Timestamp: time.Now().UTC(),
			Source:    "users",
			Data:      entity,
		},
		Entity: entity,
	}
}

// UserEmail_verifiedEvent represents a email_verified event event for User.
type UserEmail_verifiedEvent struct {
	Event
	Entity *User `json:"entity"`
}

// NewUserEmail_verifiedEvent creates a new User email_verified event.
func NewUserEmail_verifiedEvent(entity *User) *UserEmail_verifiedEvent {
	return &UserEmail_verifiedEvent{
		Event: Event{
			ID:        uuid.New().String(),
			Type:      EventUserEmail_verified,
			Timestamp: time.Now().UTC(),
			Source:    "users",
			Data:      entity,
		},
		Entity: entity,
	}
}
