// Code generated by archesai. DO NOT EDIT.

package controllers

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"

	"github.com/archesai/archesai/internal/adapters/http/server"
	commands "github.com/archesai/archesai/internal/application/commands/run"
	queries "github.com/archesai/archesai/internal/application/queries/run"
	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/valueobjects"
)

// RunController handles HTTP requests for run endpoints.
type RunController struct {
	createRunHandler *commands.CreateRunCommandHandler
	updateRunHandler *commands.UpdateRunCommandHandler
	deleteRunHandler *commands.DeleteRunCommandHandler
	getRunHandler    *queries.GetRunQueryHandler
	listRunsHandler  *queries.ListRunsQueryHandler
}

// NewRunController creates a new run controller with injected handlers.
func NewRunController(
	createRunHandler *commands.CreateRunCommandHandler,
	updateRunHandler *commands.UpdateRunCommandHandler,
	deleteRunHandler *commands.DeleteRunCommandHandler,
	getRunHandler *queries.GetRunQueryHandler,
	listRunsHandler *queries.ListRunsQueryHandler,
) *RunController {
	return &RunController{
		createRunHandler: createRunHandler,
		updateRunHandler: updateRunHandler,
		deleteRunHandler: deleteRunHandler,
		getRunHandler:    getRunHandler,
		listRunsHandler:  listRunsHandler,
	}
}

// RegisterRunRoutes registers all HTTP routes for the run domain.
func RegisterRunRoutes(router server.EchoRouter, controller *RunController) {
	router.POST("/runs", controller.CreateRun)
	router.GET("/runs/:id", controller.GetRun)
	router.GET("/runs", controller.ListRuns)
	router.PATCH("/runs/:id", controller.UpdateRun)
	router.DELETE("/runs/:id", controller.DeleteRun)
}

// ============================================================================
// CreateRun - POST /runs
// ============================================================================

// Request types
// CreateRunRequestBody defines the request body for CreateRun
type CreateRunRequestBody struct {
	PipelineID uuid.UUID `json:"pipelineID"`
}

type CreateRunRequest struct {
	Body *CreateRunRequestBody
}

// Response types

type CreateRunResponse interface {
	VisitCreateRunResponse(w http.ResponseWriter) error
}

type CreateRun201Response struct {
	Data entities.Run `json:"data"`
}

func (response CreateRun201Response) VisitCreateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateRun400Response struct {
	server.BadRequestResponse
}

func (response CreateRun400Response) VisitCreateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type CreateRun401Response struct {
	server.UnauthorizedResponse
}

func (response CreateRun401Response) VisitCreateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

type CreateRun422Response struct {
	server.ProblemDetails
}

func (response CreateRun422Response) VisitCreateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type CreateRun429Response struct {
	server.ProblemDetails
}

func (response CreateRun429Response) VisitCreateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type CreateRun500Response struct {
	server.InternalServerErrorResponse
}

func (response CreateRun500Response) VisitCreateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.InternalServerErrorResponse)
}

// Handler method

// CreateRun handles the POST /runs endpoint.
func (c *RunController) CreateRun(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := CreateRunRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Request body
	request.Body = &CreateRunRequestBody{}
	if err := ctx.Bind(request.Body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewCreateRunCommand(
		sessionID,               // SessionID for authenticated operations
		request.Body.PipelineID, // PipelineID
	)
	result, err := c.createRunHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}
	return ctx.JSON(http.StatusCreated, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// GetRun - GET /runs/{id}
// ============================================================================

// Request types

type GetRunRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type GetRunResponse interface {
	VisitGetRunResponse(w http.ResponseWriter) error
}

type GetRun200Response struct {
	Data []entities.Run              `json:"data"`
	Meta valueobjects.PaginationMeta `json:"meta"`
}

func (response GetRun200Response) VisitGetRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRun404Response struct {
	server.NotFoundResponse
}

func (response GetRun404Response) VisitGetRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

type GetRun429Response struct {
	server.ProblemDetails
}

func (response GetRun429Response) VisitGetRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type GetRun500Response struct {
	server.InternalServerErrorResponse
}

func (response GetRun500Response) VisitGetRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.InternalServerErrorResponse)
}

type GetRun401Response struct {
	server.UnauthorizedResponse
}

func (response GetRun401Response) VisitGetRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

type GetRun422Response struct {
	server.ProblemDetails
}

func (response GetRun422Response) VisitGetRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

// Handler method

// GetRun handles the GET /runs/{id} endpoint.
func (c *RunController) GetRun(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := GetRunRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewGetRunQuery(
		sessionID,  // SessionID for authenticated operations
		request.ID, // ID
	)

	result, err := c.getRunHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// ListRuns - GET /runs
// ============================================================================

// Request types
// ListRunsParams defines parameters for ListRuns
type ListRunsParams struct {
	Filter map[string]any   `json:"filter,omitempty"`
	Page   map[string]any   `json:"page,omitempty"`
	Sort   []map[string]any `json:"sort,omitempty"`
}

type ListRunsRequest struct {
	Params ListRunsParams
}

// Response types

type ListRunsResponse interface {
	VisitListRunsResponse(w http.ResponseWriter) error
}

type ListRuns200Response struct {
	Data []entities.Run              `json:"data"`
	Meta valueobjects.PaginationMeta `json:"meta"`
}

func (response ListRuns200Response) VisitListRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListRuns400Response struct {
	server.BadRequestResponse
}

func (response ListRuns400Response) VisitListRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type ListRuns401Response struct {
	server.UnauthorizedResponse
}

func (response ListRuns401Response) VisitListRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

type ListRuns422Response struct {
	server.ProblemDetails
}

func (response ListRuns422Response) VisitListRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type ListRuns429Response struct {
	server.ProblemDetails
}

func (response ListRuns429Response) VisitListRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type ListRuns500Response struct {
	server.InternalServerErrorResponse
}

func (response ListRuns500Response) VisitListRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.InternalServerErrorResponse)
}

// Handler method

// ListRuns handles the GET /runs endpoint.
func (c *RunController) ListRuns(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := ListRunsRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Query parameters
	var params ListRunsParams
	// Optional query parameter "Filter"
	if err := runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}
	// Optional query parameter "Page"
	if err := runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}
	// Optional query parameter "Sort"
	if err := runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}
	request.Params = params

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewListRunsQuery(
		sessionID, // SessionID for authenticated operations
	)
	// TODO: Apply filters, pagination, sorting from request.Params

	results, total, err := c.listRunsHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": results,
		"meta": map[string]interface{}{
			"total": total,
		},
	})
}

// ============================================================================
// UpdateRun - PATCH /runs/{id}
// ============================================================================

// Request types
// UpdateRunRequestBody defines the request body for UpdateRun
type UpdateRunRequestBody struct {
	PipelineID *uuid.UUID `json:"pipelineID,omitempty"`
}

type UpdateRunRequest struct {
	ID   uuid.UUID `json:"id"`
	Body *UpdateRunRequestBody
}

// Response types

type UpdateRunResponse interface {
	VisitUpdateRunResponse(w http.ResponseWriter) error
}

type UpdateRun200Response struct {
	Data entities.Run `json:"data"`
}

func (response UpdateRun200Response) VisitUpdateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRun404Response struct {
	server.NotFoundResponse
}

func (response UpdateRun404Response) VisitUpdateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

type UpdateRun429Response struct {
	server.ProblemDetails
}

func (response UpdateRun429Response) VisitUpdateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRun500Response struct {
	server.InternalServerErrorResponse
}

func (response UpdateRun500Response) VisitUpdateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.InternalServerErrorResponse)
}

type UpdateRun400Response struct {
	server.BadRequestResponse
}

func (response UpdateRun400Response) VisitUpdateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type UpdateRun401Response struct {
	server.UnauthorizedResponse
}

func (response UpdateRun401Response) VisitUpdateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

type UpdateRun422Response struct {
	server.ProblemDetails
}

func (response UpdateRun422Response) VisitUpdateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

// Handler method

// UpdateRun handles the PATCH /runs/{id} endpoint.
func (c *RunController) UpdateRun(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := UpdateRunRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Request body
	request.Body = &UpdateRunRequestBody{}
	if err := ctx.Bind(request.Body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewUpdateRunCommand(
		sessionID,               // SessionID for authenticated operations
		request.ID,              // ID
		request.Body.PipelineID, // PipelineID
	)
	result, err := c.updateRunHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}
	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// DeleteRun - DELETE /runs/{id}
// ============================================================================

// Request types

type DeleteRunRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type DeleteRunResponse interface {
	VisitDeleteRunResponse(w http.ResponseWriter) error
}

type DeleteRun200Response struct {
	Data entities.Run `json:"data"`
}

func (response DeleteRun200Response) VisitDeleteRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRun404Response struct {
	server.NotFoundResponse
}

func (response DeleteRun404Response) VisitDeleteRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

type DeleteRun429Response struct {
	server.ProblemDetails
}

func (response DeleteRun429Response) VisitDeleteRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRun500Response struct {
	server.InternalServerErrorResponse
}

func (response DeleteRun500Response) VisitDeleteRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.InternalServerErrorResponse)
}

type DeleteRun401Response struct {
	server.UnauthorizedResponse
}

func (response DeleteRun401Response) VisitDeleteRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

type DeleteRun422Response struct {
	server.ProblemDetails
}

func (response DeleteRun422Response) VisitDeleteRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

// Handler method

// DeleteRun handles the DELETE /runs/{id} endpoint.
func (c *RunController) DeleteRun(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := DeleteRunRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewDeleteRunCommand(
		sessionID,  // SessionID for authenticated operations
		request.ID, // ID
	)
	if err := c.deleteRunHandler.Handle(reqCtx, cmd); err != nil {
		return err
	}
	return ctx.NoContent(http.StatusNoContent)
}
