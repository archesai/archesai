// Code generated by archesai. DO NOT EDIT.

package controllers

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/google/uuid"
	"github.com/oapi-codegen/runtime"

	"github.com/archesai/archesai/internal/adapters/http/server"
	commands "github.com/archesai/archesai/internal/application/commands/run"
	queries "github.com/archesai/archesai/internal/application/queries/run"
	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/valueobjects"
)

// RunController handles HTTP requests for run endpoints.
type RunController struct {
	createRunHandler *commands.CreateRunCommandHandler
	updateRunHandler *commands.UpdateRunCommandHandler
	deleteRunHandler *commands.DeleteRunCommandHandler
	getRunHandler    *queries.GetRunQueryHandler
	listRunsHandler  *queries.ListRunsQueryHandler
}

// NewRunController creates a new run controller with injected handlers.
func NewRunController(
	createRunHandler *commands.CreateRunCommandHandler,
	updateRunHandler *commands.UpdateRunCommandHandler,
	deleteRunHandler *commands.DeleteRunCommandHandler,
	getRunHandler *queries.GetRunQueryHandler,
	listRunsHandler *queries.ListRunsQueryHandler,
) *RunController {
	return &RunController{
		createRunHandler: createRunHandler,
		updateRunHandler: updateRunHandler,
		deleteRunHandler: deleteRunHandler,
		getRunHandler:    getRunHandler,
		listRunsHandler:  listRunsHandler,
	}
}

// RegisterRunRoutes registers all HTTP routes for the run domain.
func RegisterRunRoutes(mux *http.ServeMux, controller *RunController) {
	mux.HandleFunc("POST /runs", controller.CreateRun)
	mux.HandleFunc("GET /runs/{id}", controller.GetRun)
	mux.HandleFunc("GET /runs", controller.ListRuns)
	mux.HandleFunc("PATCH /runs/{id}", controller.UpdateRun)
	mux.HandleFunc("DELETE /runs/{id}", controller.DeleteRun)
}

// ============================================================================
// CreateRun - POST /runs
// ============================================================================

// Request types
// CreateRunRequestBody defines the request body for CreateRun
type CreateRunRequestBody struct {
	PipelineID uuid.UUID `json:"pipelineID"`
}

type CreateRunRequest struct {
	Body *CreateRunRequestBody
}

// Response types

type CreateRunResponse interface {
	VisitCreateRunResponse(w http.ResponseWriter) error
}

type CreateRun201Response struct {
	Data entities.Run `json:"data"`
}

func (response CreateRun201Response) VisitCreateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateRun400Response struct {
	server.ProblemDetails
}

func (response CreateRun400Response) VisitCreateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type CreateRun401Response struct {
	server.ProblemDetails
}

func (response CreateRun401Response) VisitCreateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type CreateRun422Response struct {
	server.ProblemDetails
}

func (response CreateRun422Response) VisitCreateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type CreateRun429Response struct {
	server.ProblemDetails
}

func (response CreateRun429Response) VisitCreateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Retry-After", "")           // TODO: Set actual value for Retry-After
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type CreateRun500Response struct {
	server.ProblemDetails
}

func (response CreateRun500Response) VisitCreateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

// Handler method

// CreateRun handles the POST /runs endpoint.
func (c *RunController) CreateRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	request := CreateRunRequest{}

	// Extract session ID from context for authenticated operations
	sessionID, ok := ctx.Value(server.SessionIDContextKey).(uuid.UUID)
	if !ok {
		errorResp := CreateRun401Response{
			ProblemDetails: server.NewUnauthorizedResponse("session required", r.URL.Path),
		}
		if err := errorResp.VisitCreateRunResponse(w); err != nil {
			// Log error - response may have already been partially written
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Request body
	request.Body = &CreateRunRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(request.Body); err != nil {
		errorResp := CreateRun400Response{
			ProblemDetails: server.NewBadRequestResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitCreateRunResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewCreateRunCommand(
		sessionID,               // SessionID for authenticated operations
		request.Body.PipelineID, // PipelineID
	)
	result, err := c.createRunHandler.Handle(ctx, cmd)
	if err != nil {
		errorResp := CreateRun500Response{
			ProblemDetails: server.NewInternalServerErrorResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitCreateRunResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	response := CreateRun201Response{Data: *result}
	if err := response.VisitCreateRunResponse(w); err != nil {
		fmt.Fprintf(w, "error writing response: %v", err)
	}
}

// ============================================================================
// GetRun - GET /runs/{id}
// ============================================================================

// Request types

type GetRunRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type GetRunResponse interface {
	VisitGetRunResponse(w http.ResponseWriter) error
}

type GetRun200Response struct {
	Data entities.Run `json:"data"`
}

func (response GetRun200Response) VisitGetRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRun400Response struct {
	server.ProblemDetails
}

func (response GetRun400Response) VisitGetRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetRun401Response struct {
	server.ProblemDetails
}

func (response GetRun401Response) VisitGetRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetRun404Response struct {
	server.ProblemDetails
}

func (response GetRun404Response) VisitGetRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetRun422Response struct {
	server.ProblemDetails
}

func (response GetRun422Response) VisitGetRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetRun429Response struct {
	server.ProblemDetails
}

func (response GetRun429Response) VisitGetRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Retry-After", "")           // TODO: Set actual value for Retry-After
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetRun500Response struct {
	server.ProblemDetails
}

func (response GetRun500Response) VisitGetRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

// Handler method

// GetRun handles the GET /runs/{id} endpoint.
func (c *RunController) GetRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	request := GetRunRequest{}

	// Extract session ID from context for authenticated operations
	sessionID, ok := ctx.Value(server.SessionIDContextKey).(uuid.UUID)
	if !ok {
		errorResp := GetRun401Response{
			ProblemDetails: server.NewUnauthorizedResponse("session required", r.URL.Path),
		}
		if err := errorResp.VisitGetRunResponse(w); err != nil {
			// Log error - response may have already been partially written
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		errorResp := GetRun400Response{
			ProblemDetails: server.NewBadRequestResponse(fmt.Sprintf("Invalid format for parameter id: %s", err), r.URL.Path),
		}
		if err := errorResp.VisitGetRunResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewGetRunQuery(
		sessionID,  // SessionID for authenticated operations
		request.ID, // ID
	)

	result, err := c.getRunHandler.Handle(ctx, query)
	if err != nil {
		errorResp := GetRun500Response{
			ProblemDetails: server.NewInternalServerErrorResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitGetRunResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	response := GetRun200Response{Data: *result}
	if err := response.VisitGetRunResponse(w); err != nil {
		fmt.Fprintf(w, "error writing response: %v", err)
	}
}

// ============================================================================
// ListRuns - GET /runs
// ============================================================================

// Request types
// ListRunsParams defines parameters for ListRuns
type ListRunsParams struct {
	Filter map[string]any   `json:"filter,omitempty"`
	Page   map[string]any   `json:"page,omitempty"`
	Sort   []map[string]any `json:"sort,omitempty"`
}

type ListRunsRequest struct {
	Params ListRunsParams
}

// Response types

type ListRunsResponse interface {
	VisitListRunsResponse(w http.ResponseWriter) error
}

type ListRuns200Response struct {
	Data []entities.Run              `json:"data"`
	Meta valueobjects.PaginationMeta `json:"meta"`
}

func (response ListRuns200Response) VisitListRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListRuns400Response struct {
	server.ProblemDetails
}

func (response ListRuns400Response) VisitListRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type ListRuns401Response struct {
	server.ProblemDetails
}

func (response ListRuns401Response) VisitListRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type ListRuns422Response struct {
	server.ProblemDetails
}

func (response ListRuns422Response) VisitListRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type ListRuns429Response struct {
	server.ProblemDetails
}

func (response ListRuns429Response) VisitListRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Retry-After", "")           // TODO: Set actual value for Retry-After
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type ListRuns500Response struct {
	server.ProblemDetails
}

func (response ListRuns500Response) VisitListRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

// Handler method

// ListRuns handles the GET /runs endpoint.
func (c *RunController) ListRuns(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	request := ListRunsRequest{}

	// Extract session ID from context for authenticated operations
	sessionID, ok := ctx.Value(server.SessionIDContextKey).(uuid.UUID)
	if !ok {
		errorResp := ListRuns401Response{
			ProblemDetails: server.NewUnauthorizedResponse("session required", r.URL.Path),
		}
		if err := errorResp.VisitListRunsResponse(w); err != nil {
			// Log error - response may have already been partially written
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Query parameters
	var params ListRunsParams

	// Optional query parameter "filter"
	if err := runtime.BindQueryParameter("deepObject", true, false, "filter", r.URL.Query(), &params.Filter); err != nil {
		errorResp := ListRuns400Response{
			ProblemDetails: server.NewBadRequestResponse(fmt.Sprintf("Invalid format for parameter filter: %s", err), r.URL.Path),
		}
		if err := errorResp.VisitListRunsResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Optional query parameter "page"
	if err := runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page); err != nil {
		errorResp := ListRuns400Response{
			ProblemDetails: server.NewBadRequestResponse(fmt.Sprintf("Invalid format for parameter page: %s", err), r.URL.Path),
		}
		if err := errorResp.VisitListRunsResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Optional query parameter "sort"
	if err := runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort); err != nil {
		errorResp := ListRuns400Response{
			ProblemDetails: server.NewBadRequestResponse(fmt.Sprintf("Invalid format for parameter sort: %s", err), r.URL.Path),
		}
		if err := errorResp.VisitListRunsResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}
	request.Params = params

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewListRunsQuery(
		sessionID, // SessionID for authenticated operations
	)
	// TODO: Apply filters, pagination, sorting from request.Params

	results, total, err := c.listRunsHandler.Handle(ctx, query)
	if err != nil {
		errorResp := ListRuns500Response{
			ProblemDetails: server.NewInternalServerErrorResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitListRunsResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Convert pointer slice to value slice for response
	data := make([]entities.Run, len(results))
	for i, item := range results {
		if item != nil {
			data[i] = *item
		}
	}

	response := ListRuns200Response{
		Data: data,
		Meta: valueobjects.PaginationMeta{Total: int32(total)},
	}
	if err := response.VisitListRunsResponse(w); err != nil {
		fmt.Fprintf(w, "error writing response: %v", err)
	}
}

// ============================================================================
// UpdateRun - PATCH /runs/{id}
// ============================================================================

// Request types
// UpdateRunRequestBody defines the request body for UpdateRun
type UpdateRunRequestBody struct {
	PipelineID *uuid.UUID `json:"pipelineID,omitempty"`
}

type UpdateRunRequest struct {
	ID   uuid.UUID `json:"id"`
	Body *UpdateRunRequestBody
}

// Response types

type UpdateRunResponse interface {
	VisitUpdateRunResponse(w http.ResponseWriter) error
}

type UpdateRun200Response struct {
	Data entities.Run `json:"data"`
}

func (response UpdateRun200Response) VisitUpdateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRun400Response struct {
	server.ProblemDetails
}

func (response UpdateRun400Response) VisitUpdateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type UpdateRun401Response struct {
	server.ProblemDetails
}

func (response UpdateRun401Response) VisitUpdateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type UpdateRun404Response struct {
	server.ProblemDetails
}

func (response UpdateRun404Response) VisitUpdateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type UpdateRun422Response struct {
	server.ProblemDetails
}

func (response UpdateRun422Response) VisitUpdateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type UpdateRun429Response struct {
	server.ProblemDetails
}

func (response UpdateRun429Response) VisitUpdateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Retry-After", "")           // TODO: Set actual value for Retry-After
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type UpdateRun500Response struct {
	server.ProblemDetails
}

func (response UpdateRun500Response) VisitUpdateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

// Handler method

// UpdateRun handles the PATCH /runs/{id} endpoint.
func (c *RunController) UpdateRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	request := UpdateRunRequest{}

	// Extract session ID from context for authenticated operations
	sessionID, ok := ctx.Value(server.SessionIDContextKey).(uuid.UUID)
	if !ok {
		errorResp := UpdateRun401Response{
			ProblemDetails: server.NewUnauthorizedResponse("session required", r.URL.Path),
		}
		if err := errorResp.VisitUpdateRunResponse(w); err != nil {
			// Log error - response may have already been partially written
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		errorResp := UpdateRun400Response{
			ProblemDetails: server.NewBadRequestResponse(fmt.Sprintf("Invalid format for parameter id: %s", err), r.URL.Path),
		}
		if err := errorResp.VisitUpdateRunResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}
	request.ID = id

	// Request body
	request.Body = &UpdateRunRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(request.Body); err != nil {
		errorResp := UpdateRun400Response{
			ProblemDetails: server.NewBadRequestResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitUpdateRunResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewUpdateRunCommand(
		sessionID,               // SessionID for authenticated operations
		request.ID,              // ID
		request.Body.PipelineID, // PipelineID
	)
	result, err := c.updateRunHandler.Handle(ctx, cmd)
	if err != nil {
		errorResp := UpdateRun500Response{
			ProblemDetails: server.NewInternalServerErrorResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitUpdateRunResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	response := UpdateRun200Response{Data: *result}
	if err := response.VisitUpdateRunResponse(w); err != nil {
		fmt.Fprintf(w, "error writing response: %v", err)
	}
}

// ============================================================================
// DeleteRun - DELETE /runs/{id}
// ============================================================================

// Request types

type DeleteRunRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type DeleteRunResponse interface {
	VisitDeleteRunResponse(w http.ResponseWriter) error
}

type DeleteRun204Response struct {
}

func (response DeleteRun204Response) VisitDeleteRunResponse(w http.ResponseWriter) error {
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(204)

	return nil
}

type DeleteRun400Response struct {
	server.ProblemDetails
}

func (response DeleteRun400Response) VisitDeleteRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type DeleteRun401Response struct {
	server.ProblemDetails
}

func (response DeleteRun401Response) VisitDeleteRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type DeleteRun404Response struct {
	server.ProblemDetails
}

func (response DeleteRun404Response) VisitDeleteRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type DeleteRun422Response struct {
	server.ProblemDetails
}

func (response DeleteRun422Response) VisitDeleteRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type DeleteRun429Response struct {
	server.ProblemDetails
}

func (response DeleteRun429Response) VisitDeleteRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Retry-After", "")           // TODO: Set actual value for Retry-After
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type DeleteRun500Response struct {
	server.ProblemDetails
}

func (response DeleteRun500Response) VisitDeleteRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

// Handler method

// DeleteRun handles the DELETE /runs/{id} endpoint.
func (c *RunController) DeleteRun(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	request := DeleteRunRequest{}

	// Extract session ID from context for authenticated operations
	sessionID, ok := ctx.Value(server.SessionIDContextKey).(uuid.UUID)
	if !ok {
		errorResp := DeleteRun401Response{
			ProblemDetails: server.NewUnauthorizedResponse("session required", r.URL.Path),
		}
		if err := errorResp.VisitDeleteRunResponse(w); err != nil {
			// Log error - response may have already been partially written
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		errorResp := DeleteRun400Response{
			ProblemDetails: server.NewBadRequestResponse(fmt.Sprintf("Invalid format for parameter id: %s", err), r.URL.Path),
		}
		if err := errorResp.VisitDeleteRunResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewDeleteRunCommand(
		sessionID,  // SessionID for authenticated operations
		request.ID, // ID
	)
	if err := c.deleteRunHandler.Handle(ctx, cmd); err != nil {
		errorResp := DeleteRun500Response{
			ProblemDetails: server.NewInternalServerErrorResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitDeleteRunResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	response := DeleteRun204Response{}
	if err := response.VisitDeleteRunResponse(w); err != nil {
		fmt.Fprintf(w, "error writing response: %v", err)
	}
}
