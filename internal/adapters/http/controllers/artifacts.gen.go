// Code generated by archesai codegen. DO NOT EDIT.
package controllers

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"

	"github.com/archesai/archesai/internal/adapters/http/server"
	commands "github.com/archesai/archesai/internal/application/commands/artifacts"
	queries "github.com/archesai/archesai/internal/application/queries/artifacts"
)

// ArtifactsController handles HTTP requests for artifacts endpoints.
type ArtifactsController struct {
	// Command handlers
	createArtifactHandler *commands.CreateArtifactCommandHandler
	deleteArtifactHandler *commands.DeleteArtifactCommandHandler
	updateArtifactHandler *commands.UpdateArtifactCommandHandler
	// Query handlers
	getArtifactHandler   *queries.GetArtifactQueryHandler
	listArtifactsHandler *queries.ListArtifactsQueryHandler
}

// NewArtifactsController creates a new artifacts controller with injected handlers.
func NewArtifactsController(
	createArtifactHandler *commands.CreateArtifactCommandHandler,
	deleteArtifactHandler *commands.DeleteArtifactCommandHandler,
	updateArtifactHandler *commands.UpdateArtifactCommandHandler,
	getArtifactHandler *queries.GetArtifactQueryHandler,
	listArtifactsHandler *queries.ListArtifactsQueryHandler,
) *ArtifactsController {
	return &ArtifactsController{
		createArtifactHandler: createArtifactHandler,
		deleteArtifactHandler: deleteArtifactHandler,
		updateArtifactHandler: updateArtifactHandler,
		getArtifactHandler:    getArtifactHandler,
		listArtifactsHandler:  listArtifactsHandler,
	}
}

// RegisterArtifactsRoutes registers all HTTP routes for the artifacts domain.
func RegisterArtifactsRoutes(router server.EchoRouter, controller *ArtifactsController) {
	router.POST("/artifacts", controller.CreateArtifact)
	router.GET("/artifacts", controller.ListArtifacts)
	router.DELETE("/artifacts/:id", controller.DeleteArtifact)
	router.GET("/artifacts/:id", controller.GetArtifact)
	router.PATCH("/artifacts/:id", controller.UpdateArtifact)
}

// ============================================================================
// CreateArtifact - POST /artifacts
// ============================================================================

// Request types
// CreateArtifactRequestBody defines the request body for CreateArtifact
type CreateArtifactRequestBody struct {
	Name *string `json:"name,omitempty"`
	Text string  `json:"text"`
}

type CreateArtifactRequest struct {
	Body *CreateArtifactRequestBody
}

// Response types

type CreateArtifactResponse interface {
	VisitCreateArtifactResponse(w http.ResponseWriter) error
}

type CreateArtifact201JSONResponse struct {
}

func (response CreateArtifact201JSONResponse) VisitCreateArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateArtifact400Response struct {
	server.BadRequestResponse
}

func (response CreateArtifact400Response) VisitCreateArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type CreateArtifact401Response struct {
	server.UnauthorizedResponse
}

func (response CreateArtifact401Response) VisitCreateArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// CreateArtifact handles the POST /artifacts endpoint.
func (c *ArtifactsController) CreateArtifact(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := CreateArtifactRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Request body
	request.Body = &CreateArtifactRequestBody{}
	if err := ctx.Bind(request.Body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewCreateArtifactCommand(
		sessionID,         // SessionID for authenticated operations
		request.Body.Name, // Name
		request.Body.Text, // Text
	)
	result, err := c.createArtifactHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}
	return ctx.JSON(http.StatusCreated, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// ListArtifacts - GET /artifacts
// ============================================================================

// Request types
// ListArtifactsParams defines parameters for ListArtifacts
type ListArtifactsParams struct {
	Filter *map[string]interface{}   `json:"filter,omitempty"`
	Page   *map[string]interface{}   `json:"page,omitempty"`
	Sort   *[]map[string]interface{} `json:"sort,omitempty"`
}

type ListArtifactsRequest struct {
	Params ListArtifactsParams
}

// Response types

type ListArtifactsResponse interface {
	VisitListArtifactsResponse(w http.ResponseWriter) error
}

type ListArtifacts200JSONResponse struct {
}

func (response ListArtifacts200JSONResponse) VisitListArtifactsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListArtifacts400Response struct {
	server.BadRequestResponse
}

func (response ListArtifacts400Response) VisitListArtifactsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type ListArtifacts401Response struct {
	server.UnauthorizedResponse
}

func (response ListArtifacts401Response) VisitListArtifactsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// ListArtifacts handles the GET /artifacts endpoint.
func (c *ArtifactsController) ListArtifacts(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := ListArtifactsRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Query parameters
	var params ListArtifactsParams
	// Optional query parameter "filter"
	if err := runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}
	// Optional query parameter "page"
	if err := runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}
	// Optional query parameter "sort"
	if err := runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}
	request.Params = params

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewListArtifactsQuery(
		sessionID, // SessionID for authenticated operations
	)
	// TODO: Apply filters, pagination, sorting from request.Params

	results, total, err := c.listArtifactsHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": results,
		"meta": map[string]interface{}{
			"total": total,
		},
	})
}

// ============================================================================
// DeleteArtifact - DELETE /artifacts/{id}
// ============================================================================

// Request types

type DeleteArtifactRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type DeleteArtifactResponse interface {
	VisitDeleteArtifactResponse(w http.ResponseWriter) error
}

type DeleteArtifact200JSONResponse struct {
}

func (response DeleteArtifact200JSONResponse) VisitDeleteArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteArtifact404Response struct {
	server.NotFoundResponse
}

func (response DeleteArtifact404Response) VisitDeleteArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// DeleteArtifact handles the DELETE /artifacts/{id} endpoint.
func (c *ArtifactsController) DeleteArtifact(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := DeleteArtifactRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewDeleteArtifactCommand(
		sessionID,  // SessionID for authenticated operations
		request.ID, // id
	)
	err := c.deleteArtifactHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}
	return ctx.NoContent(http.StatusNoContent)
}

// ============================================================================
// GetArtifact - GET /artifacts/{id}
// ============================================================================

// Request types

type GetArtifactRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type GetArtifactResponse interface {
	VisitGetArtifactResponse(w http.ResponseWriter) error
}

type GetArtifact200JSONResponse struct {
}

func (response GetArtifact200JSONResponse) VisitGetArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetArtifact404Response struct {
	server.NotFoundResponse
}

func (response GetArtifact404Response) VisitGetArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// GetArtifact handles the GET /artifacts/{id} endpoint.
func (c *ArtifactsController) GetArtifact(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := GetArtifactRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewGetArtifactQuery(
		sessionID,  // SessionID for authenticated operations
		request.ID, // id
	)

	result, err := c.getArtifactHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// UpdateArtifact - PATCH /artifacts/{id}
// ============================================================================

// Request types
// UpdateArtifactRequestBody defines the request body for UpdateArtifact
type UpdateArtifactRequestBody struct {
	Name *string `json:"name,omitempty"`
	Text *string `json:"text,omitempty"`
	URL  *string `json:"url,omitempty"`
}

type UpdateArtifactRequest struct {
	ID   uuid.UUID `json:"id"`
	Body *UpdateArtifactRequestBody
}

// Response types

type UpdateArtifactResponse interface {
	VisitUpdateArtifactResponse(w http.ResponseWriter) error
}

type UpdateArtifact200JSONResponse struct {
}

func (response UpdateArtifact200JSONResponse) VisitUpdateArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateArtifact404Response struct {
	server.NotFoundResponse
}

func (response UpdateArtifact404Response) VisitUpdateArtifactResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// UpdateArtifact handles the PATCH /artifacts/{id} endpoint.
func (c *ArtifactsController) UpdateArtifact(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := UpdateArtifactRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Request body
	request.Body = &UpdateArtifactRequestBody{}
	if err := ctx.Bind(request.Body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewUpdateArtifactCommand(
		sessionID,         // SessionID for authenticated operations
		request.ID,        // id
		request.Body.Name, // Name
		request.Body.Text, // Text
		request.Body.URL,  // URL
	)
	result, err := c.updateArtifactHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}
	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}
