// Code generated by archesai codegen. DO NOT EDIT.
package controllers

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"

	"github.com/archesai/archesai/internal/adapters/http/server"
	commands "github.com/archesai/archesai/internal/application/commands/pipelines"
	"github.com/archesai/archesai/internal/application/dto"
	queries "github.com/archesai/archesai/internal/application/queries/pipelines"
	"github.com/archesai/archesai/internal/core/valueobjects"
)

// PipelinesController handles HTTP requests for pipelines endpoints.
type PipelinesController struct {
	// Command handlers
	createHandler *commands.CreatePipelineCommandHandler
	updateHandler *commands.UpdatePipelineCommandHandler
	deleteHandler *commands.DeletePipelineCommandHandler

	// Query handlers
	getHandler  *queries.GetPipelineQueryHandler
	listHandler *queries.ListPipelinesQueryHandler
}

// NewPipelinesController creates a new pipelines controller with injected handlers.
func NewPipelinesController(
	createHandler *commands.CreatePipelineCommandHandler,
	updateHandler *commands.UpdatePipelineCommandHandler,
	deleteHandler *commands.DeletePipelineCommandHandler,
	getHandler *queries.GetPipelineQueryHandler,
	listHandler *queries.ListPipelinesQueryHandler,
) *PipelinesController {
	return &PipelinesController{
		createHandler: createHandler,
		updateHandler: updateHandler,
		deleteHandler: deleteHandler,
		getHandler:    getHandler,
		listHandler:   listHandler,
	}
}

// RegisterPipelinesRoutes registers all HTTP routes for the pipelines domain.
func RegisterPipelinesRoutes(router server.EchoRouter, controller *PipelinesController) {
	router.POST("/pipelines", controller.CreatePipeline)
	router.GET("/pipelines", controller.ListPipelines)
	router.DELETE("/pipelines/:id", controller.DeletePipeline)
	router.GET("/pipelines/:id", controller.GetPipeline)
	router.PATCH("/pipelines/:id", controller.UpdatePipeline)
	router.GET("/pipelines/:id/steps", controller.GetPipelineSteps)
	router.POST("/pipelines/:id/steps", controller.CreatePipelineStep)
	router.GET("/pipelines/:id/execution-plans", controller.GetPipelineExecutionPlan)
	router.POST("/pipelines/:id/execution-plans", controller.ValidatePipelineExecutionPlan)
}

// ============================================================================
// CreatePipeline - POST /pipelines
// ============================================================================

// Request types

type CreatePipelineRequest struct {
}

// Response types

type CreatePipelineResponse interface {
	VisitCreatePipelineResponse(w http.ResponseWriter) error
}

type CreatePipeline201JSONResponse struct {
}

func (response CreatePipeline201JSONResponse) VisitCreatePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreatePipeline400Response struct {
	dto.BadRequestResponse
}

func (response CreatePipeline400Response) VisitCreatePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type CreatePipeline401Response struct {
	dto.UnauthorizedResponse
}

func (response CreatePipeline401Response) VisitCreatePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// CreatePipeline handles the POST /pipelines endpoint.
func (c *PipelinesController) CreatePipeline(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Determine which handler to call based on operation
	// Create command from request
	cmd := commands.NewCreatePipelineCommand(
	// TODO: Map request fields to command
	)

	result, err := c.createHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusCreated, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// ListPipelines - GET /pipelines
// ============================================================================

// Request types

type ListPipelinesRequest struct {
	Params dto.ListPipelinesParams
}

// Response types

type ListPipelinesResponse interface {
	VisitListPipelinesResponse(w http.ResponseWriter) error
}

type ListPipelines200JSONResponse struct {
}

func (response ListPipelines200JSONResponse) VisitListPipelinesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListPipelines400Response struct {
	dto.BadRequestResponse
}

func (response ListPipelines400Response) VisitListPipelinesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type ListPipelines401Response struct {
	dto.UnauthorizedResponse
}

func (response ListPipelines401Response) VisitListPipelinesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// ListPipelines handles the GET /pipelines endpoint.
func (c *PipelinesController) ListPipelines(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Query parameters
	var params dto.ListPipelinesParams
	// Optional query parameter "filter"
	if err := runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}
	// Optional query parameter "page"
	if err := runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}
	// Optional query parameter "sort"
	if err := runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}
	request.Params = params

	// Determine which handler to call based on operation
	// Create list query from request
	query := queries.NewListPipelinesQuery()
	// TODO: Apply filters, pagination, sorting from request.Params

	results, total, err := c.listHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": results,
		"meta": map[string]interface{}{
			"total": total,
		},
	})
}

// ============================================================================
// DeletePipeline - DELETE /pipelines/{id}
// ============================================================================

// Request types

type DeletePipelineRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type DeletePipelineResponse interface {
	VisitDeletePipelineResponse(w http.ResponseWriter) error
}

type DeletePipeline200JSONResponse struct {
}

func (response DeletePipeline200JSONResponse) VisitDeletePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeletePipeline404Response struct {
	dto.NotFoundResponse
}

func (response DeletePipeline404Response) VisitDeletePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// DeletePipeline handles the DELETE /pipelines/{id} endpoint.
func (c *PipelinesController) DeletePipeline(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Create delete command from request
	cmd := commands.NewDeletePipelineCommand(
		valueobjects.PipelineID(request.ID),
	)

	err := c.deleteHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.NoContent(http.StatusNoContent)
}

// ============================================================================
// GetPipeline - GET /pipelines/{id}
// ============================================================================

// Request types

type GetPipelineRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type GetPipelineResponse interface {
	VisitGetPipelineResponse(w http.ResponseWriter) error
}

type GetPipeline200JSONResponse struct {
}

func (response GetPipeline200JSONResponse) VisitGetPipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPipeline404Response struct {
	dto.NotFoundResponse
}

func (response GetPipeline404Response) VisitGetPipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// GetPipeline handles the GET /pipelines/{id} endpoint.
func (c *PipelinesController) GetPipeline(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Create get query from request
	query := queries.NewGetPipelineQuery(
		valueobjects.PipelineID(request.ID),
	)

	result, err := c.getHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// UpdatePipeline - PATCH /pipelines/{id}
// ============================================================================

// Request types

type UpdatePipelineRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type UpdatePipelineResponse interface {
	VisitUpdatePipelineResponse(w http.ResponseWriter) error
}

type UpdatePipeline200JSONResponse struct {
}

func (response UpdatePipeline200JSONResponse) VisitUpdatePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePipeline404Response struct {
	dto.NotFoundResponse
}

func (response UpdatePipeline404Response) VisitUpdatePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// UpdatePipeline handles the PATCH /pipelines/{id} endpoint.
func (c *PipelinesController) UpdatePipeline(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Create update command from request
	cmd := commands.NewUpdatePipelineCommand(
	// TODO: Map request fields to command including ID
	)

	result, err := c.updateHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// GetPipelineSteps - GET /pipelines/{id}/steps
// ============================================================================

// Request types

type GetPipelineStepsRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type GetPipelineStepsResponse interface {
	VisitGetPipelineStepsResponse(w http.ResponseWriter) error
}

type GetPipelineSteps200JSONResponse struct {
}

func (response GetPipelineSteps200JSONResponse) VisitGetPipelineStepsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPipelineSteps401Response struct {
	dto.UnauthorizedResponse
}

func (response GetPipelineSteps401Response) VisitGetPipelineStepsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

type GetPipelineSteps404Response struct {
	dto.NotFoundResponse
}

func (response GetPipelineSteps404Response) VisitGetPipelineStepsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// GetPipelineSteps handles the GET /pipelines/{id}/steps endpoint.
func (c *PipelinesController) GetPipelineSteps(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Create get query from request
	query := queries.NewGetPipelineQuery(
		valueobjects.PipelineID(request.ID),
	)

	result, err := c.getHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// CreatePipelineStep - POST /pipelines/{id}/steps
// ============================================================================

// Request types

type CreatePipelineStepRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type CreatePipelineStepResponse interface {
	VisitCreatePipelineStepResponse(w http.ResponseWriter) error
}

type CreatePipelineStep201JSONResponse struct {
}

func (response CreatePipelineStep201JSONResponse) VisitCreatePipelineStepResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreatePipelineStep400Response struct {
	dto.BadRequestResponse
}

func (response CreatePipelineStep400Response) VisitCreatePipelineStepResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type CreatePipelineStep401Response struct {
	dto.UnauthorizedResponse
}

func (response CreatePipelineStep401Response) VisitCreatePipelineStepResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

type CreatePipelineStep404Response struct {
	dto.NotFoundResponse
}

func (response CreatePipelineStep404Response) VisitCreatePipelineStepResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// CreatePipelineStep handles the POST /pipelines/{id}/steps endpoint.
func (c *PipelinesController) CreatePipelineStep(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Create command from request
	cmd := commands.NewCreatePipelineCommand(
	// TODO: Map request fields to command
	)

	result, err := c.createHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusCreated, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// GetPipelineExecutionPlan - GET /pipelines/{id}/execution-plans
// ============================================================================

// Request types

type GetPipelineExecutionPlanRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type GetPipelineExecutionPlanResponse interface {
	VisitGetPipelineExecutionPlanResponse(w http.ResponseWriter) error
}

type GetPipelineExecutionPlan200JSONResponse struct {
}

func (response GetPipelineExecutionPlan200JSONResponse) VisitGetPipelineExecutionPlanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPipelineExecutionPlan400Response struct {
	dto.BadRequestResponse
}

func (response GetPipelineExecutionPlan400Response) VisitGetPipelineExecutionPlanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type GetPipelineExecutionPlan401Response struct {
	dto.UnauthorizedResponse
}

func (response GetPipelineExecutionPlan401Response) VisitGetPipelineExecutionPlanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

type GetPipelineExecutionPlan404Response struct {
	dto.NotFoundResponse
}

func (response GetPipelineExecutionPlan404Response) VisitGetPipelineExecutionPlanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// GetPipelineExecutionPlan handles the GET /pipelines/{id}/execution-plans endpoint.
func (c *PipelinesController) GetPipelineExecutionPlan(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Create get query from request
	query := queries.NewGetPipelineQuery(
		valueobjects.PipelineID(request.ID),
	)

	result, err := c.getHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// ValidatePipelineExecutionPlan - POST /pipelines/{id}/execution-plans
// ============================================================================

// Request types

type ValidatePipelineExecutionPlanRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type ValidatePipelineExecutionPlanResponse interface {
	VisitValidatePipelineExecutionPlanResponse(w http.ResponseWriter) error
}

type ValidatePipelineExecutionPlan201JSONResponse struct {
}

func (response ValidatePipelineExecutionPlan201JSONResponse) VisitValidatePipelineExecutionPlanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ValidatePipelineExecutionPlan400Response struct {
	dto.BadRequestResponse
}

func (response ValidatePipelineExecutionPlan400Response) VisitValidatePipelineExecutionPlanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type ValidatePipelineExecutionPlan401Response struct {
	dto.UnauthorizedResponse
}

func (response ValidatePipelineExecutionPlan401Response) VisitValidatePipelineExecutionPlanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

type ValidatePipelineExecutionPlan404Response struct {
	dto.NotFoundResponse
}

func (response ValidatePipelineExecutionPlan404Response) VisitValidatePipelineExecutionPlanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// ValidatePipelineExecutionPlan handles the POST /pipelines/{id}/execution-plans endpoint.
func (c *PipelinesController) ValidatePipelineExecutionPlan(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Determine which handler to call based on operation
	// TODO: Handle custom operation ValidatePipelineExecutionPlan
	return echo.NewHTTPError(http.StatusNotImplemented, "Operation not implemented")
}
