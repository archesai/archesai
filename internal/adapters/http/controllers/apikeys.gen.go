// Code generated by archesai codegen. DO NOT EDIT.
package controllers

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"

	"github.com/archesai/archesai/internal/adapters/http/server"
	commands "github.com/archesai/archesai/internal/application/commands/apikeys"
	queries "github.com/archesai/archesai/internal/application/queries/apikeys"
)

// APIKeysController handles HTTP requests for apikeys endpoints.
type APIKeysController struct {
	// Command handlers
	createHandler *commands.CreateAPIKeyCommandHandler
	updateHandler *commands.UpdateAPIKeyCommandHandler
	deleteHandler *commands.DeleteAPIKeyCommandHandler
	// Query handlers
	getHandler  *queries.GetAPIKeyQueryHandler
	listHandler *queries.ListAPIKeysQueryHandler
}

// NewAPIKeysController creates a new apikeys controller with injected handlers.
func NewAPIKeysController(
	createHandler *commands.CreateAPIKeyCommandHandler,
	updateHandler *commands.UpdateAPIKeyCommandHandler,
	deleteHandler *commands.DeleteAPIKeyCommandHandler,
	getHandler *queries.GetAPIKeyQueryHandler,
	listHandler *queries.ListAPIKeysQueryHandler,
) *APIKeysController {
	return &APIKeysController{
		createHandler: createHandler,
		updateHandler: updateHandler,
		deleteHandler: deleteHandler,
		getHandler:    getHandler,
		listHandler:   listHandler,
	}
}

// RegisterAPIKeysRoutes registers all HTTP routes for the apikeys domain.
func RegisterAPIKeysRoutes(router server.EchoRouter, controller *APIKeysController) {
	router.GET("/api-keys", controller.ListAPIKeys)
	router.POST("/api-keys", controller.CreateAPIKey)
	router.GET("/api-keys/:id", controller.GetAPIKey)
	router.PATCH("/api-keys/:id", controller.UpdateAPIKey)
	router.DELETE("/api-keys/:id", controller.DeleteAPIKey)
}

// ============================================================================
// ListAPIKeys - GET /api-keys
// ============================================================================

// Request types
// ListAPIKeysParams defines parameters for ListAPIKeys
type ListAPIKeysParams struct {
	Filter *map[string]interface{}   `json:"filter,omitempty"`
	Page   *map[string]interface{}   `json:"page,omitempty"`
	Sort   *[]map[string]interface{} `json:"sort,omitempty"`
}

type ListAPIKeysRequest struct {
	Params ListAPIKeysParams
}

// Response types

type ListAPIKeysResponse interface {
	VisitListAPIKeysResponse(w http.ResponseWriter) error
}

type ListAPIKeys200JSONResponse struct {
}

func (response ListAPIKeys200JSONResponse) VisitListAPIKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListAPIKeys401Response struct {
	server.UnauthorizedResponse
}

func (response ListAPIKeys401Response) VisitListAPIKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// ListAPIKeys handles the GET /api-keys endpoint.
func (c *APIKeysController) ListAPIKeys(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := ListAPIKeysRequest{}

	// Query parameters
	var params ListAPIKeysParams
	// Optional query parameter "filter"
	if err := runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}
	// Optional query parameter "page"
	if err := runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}
	// Optional query parameter "sort"
	if err := runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}
	request.Params = params

	// Determine which handler to call based on operation
	// Create list query from request
	query := queries.NewListAPIKeysQuery()
	// TODO: Apply filters, pagination, sorting from request.Params

	results, total, err := c.listHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": results,
		"meta": map[string]interface{}{
			"total": total,
		},
	})
}

// ============================================================================
// CreateAPIKey - POST /api-keys
// ============================================================================

// Request types
// CreateAPIKeyRequestBody defines the request body for CreateAPIKey
type CreateAPIKeyRequestBody struct {
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`
	Name      string     `json:"name"`
	RateLimit *int       `json:"rateLimit,omitempty"`
	Scopes    []string   `json:"scopes"`
}

type CreateAPIKeyRequest struct {
	Body *CreateAPIKeyRequestBody
}

// Response types

type CreateAPIKeyResponse interface {
	VisitCreateAPIKeyResponse(w http.ResponseWriter) error
}

type CreateAPIKey201JSONResponse struct {
}

func (response CreateAPIKey201JSONResponse) VisitCreateAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateAPIKey400Response struct {
	server.BadRequestResponse
}

func (response CreateAPIKey400Response) VisitCreateAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type CreateAPIKey401Response struct {
	server.UnauthorizedResponse
}

func (response CreateAPIKey401Response) VisitCreateAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// CreateAPIKey handles the POST /api-keys endpoint.
func (c *APIKeysController) CreateAPIKey(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := CreateAPIKeyRequest{}

	// Request body
	var body CreateAPIKeyRequestBody
	if err := ctx.Bind(&body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// Determine which handler to call based on operation
	// Create handler

	// Map request body fields to command parameters
	cmd := commands.NewCreateAPIKeyCommand(
		request.Body.ExpiresAt, // ExpiresAt
		request.Body.Name,      // Name
		request.Body.RateLimit, // RateLimit
		request.Body.Scopes,    // Scopes
	)

	result, err := c.createHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusCreated, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// GetAPIKey - GET /api-keys/{id}
// ============================================================================

// Request types

type GetAPIKeyRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type GetAPIKeyResponse interface {
	VisitGetAPIKeyResponse(w http.ResponseWriter) error
}

type GetAPIKey200JSONResponse struct {
}

func (response GetAPIKey200JSONResponse) VisitGetAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAPIKey400Response struct {
	server.BadRequestResponse
}

func (response GetAPIKey400Response) VisitGetAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type GetAPIKey401Response struct {
	server.UnauthorizedResponse
}

func (response GetAPIKey401Response) VisitGetAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

type GetAPIKey404Response struct {
	server.NotFoundResponse
}

func (response GetAPIKey404Response) VisitGetAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// GetAPIKey handles the GET /api-keys/{id} endpoint.
func (c *APIKeysController) GetAPIKey(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := GetAPIKeyRequest{}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Create get query from request
	query := queries.NewGetAPIKeyQuery(
		request.ID,
	)

	result, err := c.getHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// UpdateAPIKey - PATCH /api-keys/{id}
// ============================================================================

// Request types
// UpdateAPIKeyRequestBody defines the request body for UpdateAPIKey
type UpdateAPIKeyRequestBody struct {
	Name      *string  `json:"name,omitempty"`
	RateLimit *int     `json:"rateLimit,omitempty"`
	Scopes    []string `json:"scopes,omitempty"`
}

type UpdateAPIKeyRequest struct {
	ID   uuid.UUID `json:"id"`
	Body *UpdateAPIKeyRequestBody
}

// Response types

type UpdateAPIKeyResponse interface {
	VisitUpdateAPIKeyResponse(w http.ResponseWriter) error
}

type UpdateAPIKey200JSONResponse struct {
}

func (response UpdateAPIKey200JSONResponse) VisitUpdateAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAPIKey400Response struct {
	server.BadRequestResponse
}

func (response UpdateAPIKey400Response) VisitUpdateAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type UpdateAPIKey401Response struct {
	server.UnauthorizedResponse
}

func (response UpdateAPIKey401Response) VisitUpdateAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

type UpdateAPIKey404Response struct {
	server.NotFoundResponse
}

func (response UpdateAPIKey404Response) VisitUpdateAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// UpdateAPIKey handles the PATCH /api-keys/{id} endpoint.
func (c *APIKeysController) UpdateAPIKey(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := UpdateAPIKeyRequest{}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Request body
	var body UpdateAPIKeyRequestBody
	if err := ctx.Bind(&body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// Determine which handler to call based on operation
	// Update handler

	// Map path parameters and request body fields to command parameters
	cmd := commands.NewUpdateAPIKeyCommand(
		request.ID,             // id (entity ID)
		request.Body.Name,      // Name
		request.Body.RateLimit, // RateLimit
		request.Body.Scopes,    // Scopes
	)

	result, err := c.updateHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// DeleteAPIKey - DELETE /api-keys/{id}
// ============================================================================

// Request types

type DeleteAPIKeyRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type DeleteAPIKeyResponse interface {
	VisitDeleteAPIKeyResponse(w http.ResponseWriter) error
}

type DeleteAPIKey200JSONResponse struct {
}

func (response DeleteAPIKey200JSONResponse) VisitDeleteAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAPIKey400Response struct {
	server.BadRequestResponse
}

func (response DeleteAPIKey400Response) VisitDeleteAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type DeleteAPIKey401Response struct {
	server.UnauthorizedResponse
}

func (response DeleteAPIKey401Response) VisitDeleteAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

type DeleteAPIKey404Response struct {
	server.NotFoundResponse
}

func (response DeleteAPIKey404Response) VisitDeleteAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// DeleteAPIKey handles the DELETE /api-keys/{id} endpoint.
func (c *APIKeysController) DeleteAPIKey(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := DeleteAPIKeyRequest{}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Create delete command from request
	cmd := commands.NewDeleteAPIKeyCommand(
		request.ID,
	)

	err := c.deleteHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.NoContent(http.StatusNoContent)
}
