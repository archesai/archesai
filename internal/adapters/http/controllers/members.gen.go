// Code generated by archesai codegen. DO NOT EDIT.
package controllers

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"

	"github.com/archesai/archesai/internal/adapters/http/server"
	commands "github.com/archesai/archesai/internal/application/commands/members"
	"github.com/archesai/archesai/internal/application/dto"
	queries "github.com/archesai/archesai/internal/application/queries/members"
	"github.com/archesai/archesai/internal/core/valueobjects"
)

// MembersController handles HTTP requests for members endpoints.
type MembersController struct {
	// Command handlers
	createHandler *commands.CreateMemberCommandHandler
	updateHandler *commands.UpdateMemberCommandHandler
	deleteHandler *commands.DeleteMemberCommandHandler

	// Query handlers
	getHandler  *queries.GetMemberQueryHandler
	listHandler *queries.ListMembersQueryHandler
}

// NewMembersController creates a new members controller with injected handlers.
func NewMembersController(
	createHandler *commands.CreateMemberCommandHandler,
	updateHandler *commands.UpdateMemberCommandHandler,
	deleteHandler *commands.DeleteMemberCommandHandler,
	getHandler *queries.GetMemberQueryHandler,
	listHandler *queries.ListMembersQueryHandler,
) *MembersController {
	return &MembersController{
		createHandler: createHandler,
		updateHandler: updateHandler,
		deleteHandler: deleteHandler,
		getHandler:    getHandler,
		listHandler:   listHandler,
	}
}

// RegisterMembersRoutes registers all HTTP routes for the members domain.
func RegisterMembersRoutes(router server.EchoRouter, controller *MembersController) {
	router.POST("/organizations/:id/members", controller.CreateMember)
	router.GET("/organizations/:id/members", controller.ListMembers)
	router.DELETE("/organizations/:id/members/:memberID", controller.DeleteMember)
	router.GET("/organizations/:id/members/:memberID", controller.GetMember)
	router.PATCH("/organizations/:id/members/:memberID", controller.UpdateMember)
}

// ============================================================================
// CreateMember - POST /organizations/{id}/members
// ============================================================================

// Request types

type CreateMemberRequest struct {
	ID string `json:"id"`
}

// Response types

type CreateMemberResponse interface {
	VisitCreateMemberResponse(w http.ResponseWriter) error
}

type CreateMember201JSONResponse struct {
}

func (response CreateMember201JSONResponse) VisitCreateMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateMember400Response struct {
	dto.BadRequestResponse
}

func (response CreateMember400Response) VisitCreateMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type CreateMember401Response struct {
	dto.UnauthorizedResponse
}

func (response CreateMember401Response) VisitCreateMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// CreateMember handles the POST /organizations/{id}/members endpoint.
func (c *MembersController) CreateMember(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Path parameter "id"
	var id string
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Create command from request
	cmd := commands.NewCreateMemberCommand(
	// TODO: Map request fields to command
	)

	result, err := c.createHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusCreated, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// ListMembers - GET /organizations/{id}/members
// ============================================================================

// Request types

type ListMembersRequest struct {
	ID     string `json:"id"`
	Params dto.ListMembersParams
}

// Response types

type ListMembersResponse interface {
	VisitListMembersResponse(w http.ResponseWriter) error
}

type ListMembers200JSONResponse struct {
}

func (response ListMembers200JSONResponse) VisitListMembersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListMembers400Response struct {
	dto.BadRequestResponse
}

func (response ListMembers400Response) VisitListMembersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type ListMembers401Response struct {
	dto.UnauthorizedResponse
}

func (response ListMembers401Response) VisitListMembersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// ListMembers handles the GET /organizations/{id}/members endpoint.
func (c *MembersController) ListMembers(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Path parameter "id"
	var id string
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Query parameters
	var params dto.ListMembersParams
	// Optional query parameter "filter"
	if err := runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}
	// Optional query parameter "page"
	if err := runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}
	// Optional query parameter "sort"
	if err := runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}
	request.Params = params

	// Determine which handler to call based on operation
	// Create list query from request
	query := queries.NewListMembersQuery()
	// TODO: Apply filters, pagination, sorting from request.Params

	results, total, err := c.listHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": results,
		"meta": map[string]interface{}{
			"total": total,
		},
	})
}

// ============================================================================
// DeleteMember - DELETE /organizations/{id}/members/{memberID}
// ============================================================================

// Request types

type DeleteMemberRequest struct {
	ID       uuid.UUID `json:"id"`
	MemberID uuid.UUID `json:"memberID"`
}

// Response types

type DeleteMemberResponse interface {
	VisitDeleteMemberResponse(w http.ResponseWriter) error
}

type DeleteMember200JSONResponse struct {
}

func (response DeleteMember200JSONResponse) VisitDeleteMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteMember404Response struct {
	dto.NotFoundResponse
}

func (response DeleteMember404Response) VisitDeleteMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// DeleteMember handles the DELETE /organizations/{id}/members/{memberID} endpoint.
func (c *MembersController) DeleteMember(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Path parameter "memberID"
	var memberID uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "memberID", ctx.Param("memberID"), &memberID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter memberID: %s", err))
	}
	request.MemberID = memberID

	// Determine which handler to call based on operation
	// Create delete command from request
	cmd := commands.NewDeleteMemberCommand(
		valueobjects.MemberID(request.ID),
	)

	err := c.deleteHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.NoContent(http.StatusNoContent)
}

// ============================================================================
// GetMember - GET /organizations/{id}/members/{memberID}
// ============================================================================

// Request types

type GetMemberRequest struct {
	ID       uuid.UUID `json:"id"`
	MemberID uuid.UUID `json:"memberID"`
}

// Response types

type GetMemberResponse interface {
	VisitGetMemberResponse(w http.ResponseWriter) error
}

type GetMember200JSONResponse struct {
}

func (response GetMember200JSONResponse) VisitGetMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMember404Response struct {
	dto.NotFoundResponse
}

func (response GetMember404Response) VisitGetMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// GetMember handles the GET /organizations/{id}/members/{memberID} endpoint.
func (c *MembersController) GetMember(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Path parameter "memberID"
	var memberID uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "memberID", ctx.Param("memberID"), &memberID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter memberID: %s", err))
	}
	request.MemberID = memberID

	// Determine which handler to call based on operation
	// Create get query from request
	query := queries.NewGetMemberQuery(
		valueobjects.MemberID(request.ID),
	)

	result, err := c.getHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// UpdateMember - PATCH /organizations/{id}/members/{memberID}
// ============================================================================

// Request types

type UpdateMemberRequest struct {
	ID       uuid.UUID `json:"id"`
	MemberID uuid.UUID `json:"memberID"`
}

// Response types

type UpdateMemberResponse interface {
	VisitUpdateMemberResponse(w http.ResponseWriter) error
}

type UpdateMember200JSONResponse struct {
}

func (response UpdateMember200JSONResponse) VisitUpdateMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateMember404Response struct {
	dto.NotFoundResponse
}

func (response UpdateMember404Response) VisitUpdateMemberResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// UpdateMember handles the PATCH /organizations/{id}/members/{memberID} endpoint.
func (c *MembersController) UpdateMember(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Path parameter "memberID"
	var memberID uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "memberID", ctx.Param("memberID"), &memberID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter memberID: %s", err))
	}
	request.MemberID = memberID

	// Determine which handler to call based on operation
	// Create update command from request
	cmd := commands.NewUpdateMemberCommand(
	// TODO: Map request fields to command including ID
	)

	result, err := c.updateHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}
