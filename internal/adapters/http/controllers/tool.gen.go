// Code generated by archesai. DO NOT EDIT.

package controllers

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/google/uuid"
	"github.com/oapi-codegen/runtime"

	"github.com/archesai/archesai/internal/adapters/http/server"
	commands "github.com/archesai/archesai/internal/application/commands/tool"
	queries "github.com/archesai/archesai/internal/application/queries/tool"
	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/valueobjects"
)

// ToolController handles HTTP requests for tool endpoints.
type ToolController struct {
	createToolHandler *commands.CreateToolCommandHandler
	updateToolHandler *commands.UpdateToolCommandHandler
	deleteToolHandler *commands.DeleteToolCommandHandler
	getToolHandler    *queries.GetToolQueryHandler
	listToolsHandler  *queries.ListToolsQueryHandler
}

// NewToolController creates a new tool controller with injected handlers.
func NewToolController(
	createToolHandler *commands.CreateToolCommandHandler,
	updateToolHandler *commands.UpdateToolCommandHandler,
	deleteToolHandler *commands.DeleteToolCommandHandler,
	getToolHandler *queries.GetToolQueryHandler,
	listToolsHandler *queries.ListToolsQueryHandler,
) *ToolController {
	return &ToolController{
		createToolHandler: createToolHandler,
		updateToolHandler: updateToolHandler,
		deleteToolHandler: deleteToolHandler,
		getToolHandler:    getToolHandler,
		listToolsHandler:  listToolsHandler,
	}
}

// RegisterToolRoutes registers all HTTP routes for the tool domain.
func RegisterToolRoutes(mux *http.ServeMux, controller *ToolController) {
	mux.HandleFunc("POST /tools", controller.CreateTool)
	mux.HandleFunc("GET /tools/{id}", controller.GetTool)
	mux.HandleFunc("GET /tools", controller.ListTools)
	mux.HandleFunc("PATCH /tools/{id}", controller.UpdateTool)
	mux.HandleFunc("DELETE /tools/{id}", controller.DeleteTool)
}

// ============================================================================
// CreateTool - POST /tools
// ============================================================================

// Request types
// CreateToolRequestBody defines the request body for CreateTool
type CreateToolRequestBody struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

type CreateToolRequest struct {
	Body *CreateToolRequestBody
}

// Response types

type CreateToolResponse interface {
	VisitCreateToolResponse(w http.ResponseWriter) error
}

type CreateTool201Response struct {
	Data entities.Tool `json:"data"`
}

func (response CreateTool201Response) VisitCreateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateTool400Response struct {
	server.ProblemDetails
}

func (response CreateTool400Response) VisitCreateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type CreateTool401Response struct {
	server.ProblemDetails
}

func (response CreateTool401Response) VisitCreateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type CreateTool422Response struct {
	server.ProblemDetails
}

func (response CreateTool422Response) VisitCreateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type CreateTool429Response struct {
	server.ProblemDetails
}

func (response CreateTool429Response) VisitCreateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Retry-After", "")           // TODO: Set actual value for Retry-After
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type CreateTool500Response struct {
	server.ProblemDetails
}

func (response CreateTool500Response) VisitCreateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

// Handler method

// CreateTool handles the POST /tools endpoint.
func (c *ToolController) CreateTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	request := CreateToolRequest{}

	// Extract session ID from context for authenticated operations
	sessionID, ok := ctx.Value(server.SessionIDContextKey).(uuid.UUID)
	if !ok {
		errorResp := CreateTool401Response{
			ProblemDetails: server.NewUnauthorizedResponse("session required", r.URL.Path),
		}
		if err := errorResp.VisitCreateToolResponse(w); err != nil {
			// Log error - response may have already been partially written
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Request body
	request.Body = &CreateToolRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(request.Body); err != nil {
		errorResp := CreateTool400Response{
			ProblemDetails: server.NewBadRequestResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitCreateToolResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewCreateToolCommand(
		sessionID,                // SessionID for authenticated operations
		request.Body.Description, // Description
		request.Body.Name,        // Name
	)
	result, err := c.createToolHandler.Handle(ctx, cmd)
	if err != nil {
		errorResp := CreateTool500Response{
			ProblemDetails: server.NewInternalServerErrorResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitCreateToolResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	response := CreateTool201Response{Data: *result}
	if err := response.VisitCreateToolResponse(w); err != nil {
		fmt.Fprintf(w, "error writing response: %v", err)
	}
}

// ============================================================================
// GetTool - GET /tools/{id}
// ============================================================================

// Request types

type GetToolRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type GetToolResponse interface {
	VisitGetToolResponse(w http.ResponseWriter) error
}

type GetTool200Response struct {
	Data entities.Tool `json:"data"`
}

func (response GetTool200Response) VisitGetToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTool400Response struct {
	server.ProblemDetails
}

func (response GetTool400Response) VisitGetToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetTool401Response struct {
	server.ProblemDetails
}

func (response GetTool401Response) VisitGetToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetTool404Response struct {
	server.ProblemDetails
}

func (response GetTool404Response) VisitGetToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetTool422Response struct {
	server.ProblemDetails
}

func (response GetTool422Response) VisitGetToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetTool429Response struct {
	server.ProblemDetails
}

func (response GetTool429Response) VisitGetToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Retry-After", "")           // TODO: Set actual value for Retry-After
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetTool500Response struct {
	server.ProblemDetails
}

func (response GetTool500Response) VisitGetToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

// Handler method

// GetTool handles the GET /tools/{id} endpoint.
func (c *ToolController) GetTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	request := GetToolRequest{}

	// Extract session ID from context for authenticated operations
	sessionID, ok := ctx.Value(server.SessionIDContextKey).(uuid.UUID)
	if !ok {
		errorResp := GetTool401Response{
			ProblemDetails: server.NewUnauthorizedResponse("session required", r.URL.Path),
		}
		if err := errorResp.VisitGetToolResponse(w); err != nil {
			// Log error - response may have already been partially written
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		errorResp := GetTool400Response{
			ProblemDetails: server.NewBadRequestResponse(fmt.Sprintf("Invalid format for parameter id: %s", err), r.URL.Path),
		}
		if err := errorResp.VisitGetToolResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewGetToolQuery(
		sessionID,  // SessionID for authenticated operations
		request.ID, // ID
	)

	result, err := c.getToolHandler.Handle(ctx, query)
	if err != nil {
		errorResp := GetTool500Response{
			ProblemDetails: server.NewInternalServerErrorResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitGetToolResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	response := GetTool200Response{Data: *result}
	if err := response.VisitGetToolResponse(w); err != nil {
		fmt.Fprintf(w, "error writing response: %v", err)
	}
}

// ============================================================================
// ListTools - GET /tools
// ============================================================================

// Request types
// ListToolsParams defines parameters for ListTools
type ListToolsParams struct {
	Filter map[string]any   `json:"filter,omitempty"`
	Page   map[string]any   `json:"page,omitempty"`
	Sort   []map[string]any `json:"sort,omitempty"`
}

type ListToolsRequest struct {
	Params ListToolsParams
}

// Response types

type ListToolsResponse interface {
	VisitListToolsResponse(w http.ResponseWriter) error
}

type ListTools200Response struct {
	Data []entities.Tool             `json:"data"`
	Meta valueobjects.PaginationMeta `json:"meta"`
}

func (response ListTools200Response) VisitListToolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTools400Response struct {
	server.ProblemDetails
}

func (response ListTools400Response) VisitListToolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type ListTools401Response struct {
	server.ProblemDetails
}

func (response ListTools401Response) VisitListToolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type ListTools422Response struct {
	server.ProblemDetails
}

func (response ListTools422Response) VisitListToolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type ListTools429Response struct {
	server.ProblemDetails
}

func (response ListTools429Response) VisitListToolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Retry-After", "")           // TODO: Set actual value for Retry-After
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type ListTools500Response struct {
	server.ProblemDetails
}

func (response ListTools500Response) VisitListToolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

// Handler method

// ListTools handles the GET /tools endpoint.
func (c *ToolController) ListTools(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	request := ListToolsRequest{}

	// Extract session ID from context for authenticated operations
	sessionID, ok := ctx.Value(server.SessionIDContextKey).(uuid.UUID)
	if !ok {
		errorResp := ListTools401Response{
			ProblemDetails: server.NewUnauthorizedResponse("session required", r.URL.Path),
		}
		if err := errorResp.VisitListToolsResponse(w); err != nil {
			// Log error - response may have already been partially written
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Query parameters
	var params ListToolsParams

	// Optional query parameter "filter"
	if err := runtime.BindQueryParameter("deepObject", true, false, "filter", r.URL.Query(), &params.Filter); err != nil {
		errorResp := ListTools400Response{
			ProblemDetails: server.NewBadRequestResponse(fmt.Sprintf("Invalid format for parameter filter: %s", err), r.URL.Path),
		}
		if err := errorResp.VisitListToolsResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Optional query parameter "page"
	if err := runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page); err != nil {
		errorResp := ListTools400Response{
			ProblemDetails: server.NewBadRequestResponse(fmt.Sprintf("Invalid format for parameter page: %s", err), r.URL.Path),
		}
		if err := errorResp.VisitListToolsResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Optional query parameter "sort"
	if err := runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort); err != nil {
		errorResp := ListTools400Response{
			ProblemDetails: server.NewBadRequestResponse(fmt.Sprintf("Invalid format for parameter sort: %s", err), r.URL.Path),
		}
		if err := errorResp.VisitListToolsResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}
	request.Params = params

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewListToolsQuery(
		sessionID, // SessionID for authenticated operations
	)
	// TODO: Apply filters, pagination, sorting from request.Params

	results, total, err := c.listToolsHandler.Handle(ctx, query)
	if err != nil {
		errorResp := ListTools500Response{
			ProblemDetails: server.NewInternalServerErrorResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitListToolsResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Convert pointer slice to value slice for response
	data := make([]entities.Tool, len(results))
	for i, item := range results {
		if item != nil {
			data[i] = *item
		}
	}

	response := ListTools200Response{
		Data: data,
		Meta: valueobjects.PaginationMeta{Total: int32(total)},
	}
	if err := response.VisitListToolsResponse(w); err != nil {
		fmt.Fprintf(w, "error writing response: %v", err)
	}
}

// ============================================================================
// UpdateTool - PATCH /tools/{id}
// ============================================================================

// Request types
// UpdateToolRequestBody defines the request body for UpdateTool
type UpdateToolRequestBody struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

type UpdateToolRequest struct {
	ID   uuid.UUID `json:"id"`
	Body *UpdateToolRequestBody
}

// Response types

type UpdateToolResponse interface {
	VisitUpdateToolResponse(w http.ResponseWriter) error
}

type UpdateTool200Response struct {
	Data entities.Tool `json:"data"`
}

func (response UpdateTool200Response) VisitUpdateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTool400Response struct {
	server.ProblemDetails
}

func (response UpdateTool400Response) VisitUpdateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type UpdateTool401Response struct {
	server.ProblemDetails
}

func (response UpdateTool401Response) VisitUpdateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type UpdateTool404Response struct {
	server.ProblemDetails
}

func (response UpdateTool404Response) VisitUpdateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type UpdateTool422Response struct {
	server.ProblemDetails
}

func (response UpdateTool422Response) VisitUpdateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type UpdateTool429Response struct {
	server.ProblemDetails
}

func (response UpdateTool429Response) VisitUpdateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Retry-After", "")           // TODO: Set actual value for Retry-After
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type UpdateTool500Response struct {
	server.ProblemDetails
}

func (response UpdateTool500Response) VisitUpdateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

// Handler method

// UpdateTool handles the PATCH /tools/{id} endpoint.
func (c *ToolController) UpdateTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	request := UpdateToolRequest{}

	// Extract session ID from context for authenticated operations
	sessionID, ok := ctx.Value(server.SessionIDContextKey).(uuid.UUID)
	if !ok {
		errorResp := UpdateTool401Response{
			ProblemDetails: server.NewUnauthorizedResponse("session required", r.URL.Path),
		}
		if err := errorResp.VisitUpdateToolResponse(w); err != nil {
			// Log error - response may have already been partially written
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		errorResp := UpdateTool400Response{
			ProblemDetails: server.NewBadRequestResponse(fmt.Sprintf("Invalid format for parameter id: %s", err), r.URL.Path),
		}
		if err := errorResp.VisitUpdateToolResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}
	request.ID = id

	// Request body
	request.Body = &UpdateToolRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(request.Body); err != nil {
		errorResp := UpdateTool400Response{
			ProblemDetails: server.NewBadRequestResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitUpdateToolResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewUpdateToolCommand(
		sessionID,                // SessionID for authenticated operations
		request.ID,               // ID
		request.Body.Description, // Description
		request.Body.Name,        // Name
	)
	result, err := c.updateToolHandler.Handle(ctx, cmd)
	if err != nil {
		errorResp := UpdateTool500Response{
			ProblemDetails: server.NewInternalServerErrorResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitUpdateToolResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	response := UpdateTool200Response{Data: *result}
	if err := response.VisitUpdateToolResponse(w); err != nil {
		fmt.Fprintf(w, "error writing response: %v", err)
	}
}

// ============================================================================
// DeleteTool - DELETE /tools/{id}
// ============================================================================

// Request types

type DeleteToolRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type DeleteToolResponse interface {
	VisitDeleteToolResponse(w http.ResponseWriter) error
}

type DeleteTool204Response struct {
}

func (response DeleteTool204Response) VisitDeleteToolResponse(w http.ResponseWriter) error {
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(204)

	return nil
}

type DeleteTool400Response struct {
	server.ProblemDetails
}

func (response DeleteTool400Response) VisitDeleteToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type DeleteTool401Response struct {
	server.ProblemDetails
}

func (response DeleteTool401Response) VisitDeleteToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type DeleteTool404Response struct {
	server.ProblemDetails
}

func (response DeleteTool404Response) VisitDeleteToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type DeleteTool422Response struct {
	server.ProblemDetails
}

func (response DeleteTool422Response) VisitDeleteToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type DeleteTool429Response struct {
	server.ProblemDetails
}

func (response DeleteTool429Response) VisitDeleteToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Retry-After", "")           // TODO: Set actual value for Retry-After
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type DeleteTool500Response struct {
	server.ProblemDetails
}

func (response DeleteTool500Response) VisitDeleteToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

// Handler method

// DeleteTool handles the DELETE /tools/{id} endpoint.
func (c *ToolController) DeleteTool(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	request := DeleteToolRequest{}

	// Extract session ID from context for authenticated operations
	sessionID, ok := ctx.Value(server.SessionIDContextKey).(uuid.UUID)
	if !ok {
		errorResp := DeleteTool401Response{
			ProblemDetails: server.NewUnauthorizedResponse("session required", r.URL.Path),
		}
		if err := errorResp.VisitDeleteToolResponse(w); err != nil {
			// Log error - response may have already been partially written
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		errorResp := DeleteTool400Response{
			ProblemDetails: server.NewBadRequestResponse(fmt.Sprintf("Invalid format for parameter id: %s", err), r.URL.Path),
		}
		if err := errorResp.VisitDeleteToolResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewDeleteToolCommand(
		sessionID,  // SessionID for authenticated operations
		request.ID, // ID
	)
	if err := c.deleteToolHandler.Handle(ctx, cmd); err != nil {
		errorResp := DeleteTool500Response{
			ProblemDetails: server.NewInternalServerErrorResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitDeleteToolResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	response := DeleteTool204Response{}
	if err := response.VisitDeleteToolResponse(w); err != nil {
		fmt.Fprintf(w, "error writing response: %v", err)
	}
}
