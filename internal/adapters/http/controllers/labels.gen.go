// Code generated by archesai codegen. DO NOT EDIT.
package controllers

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"

	"github.com/archesai/archesai/internal/adapters/http/server"
	commands "github.com/archesai/archesai/internal/application/commands/labels"
	queries "github.com/archesai/archesai/internal/application/queries/labels"
	"github.com/archesai/archesai/internal/infrastructure/http/middleware"
)

// LabelsController handles HTTP requests for labels endpoints.
type LabelsController struct {
	// Command handlers
	createLabelHandler *commands.CreateLabelCommandHandler
	deleteLabelHandler *commands.DeleteLabelCommandHandler
	updateLabelHandler *commands.UpdateLabelCommandHandler
	// Query handlers
	getLabelHandler   *queries.GetLabelQueryHandler
	listLabelsHandler *queries.ListLabelsQueryHandler
}

// NewLabelsController creates a new labels controller with injected handlers.
func NewLabelsController(
	createLabelHandler *commands.CreateLabelCommandHandler,
	deleteLabelHandler *commands.DeleteLabelCommandHandler,
	updateLabelHandler *commands.UpdateLabelCommandHandler,
	getLabelHandler *queries.GetLabelQueryHandler,
	listLabelsHandler *queries.ListLabelsQueryHandler,
) *LabelsController {
	return &LabelsController{
		createLabelHandler: createLabelHandler,
		deleteLabelHandler: deleteLabelHandler,
		updateLabelHandler: updateLabelHandler,
		getLabelHandler:    getLabelHandler,
		listLabelsHandler:  listLabelsHandler,
	}
}

// RegisterLabelsRoutes registers all HTTP routes for the labels domain.
func RegisterLabelsRoutes(router server.EchoRouter, controller *LabelsController) {
	router.POST("/labels", controller.CreateLabel)
	router.GET("/labels", controller.ListLabels)
	router.DELETE("/labels/:id", controller.DeleteLabel)
	router.GET("/labels/:id", controller.GetLabel)
	router.PATCH("/labels/:id", controller.UpdateLabel)
}

// ============================================================================
// CreateLabel - POST /labels
// ============================================================================

// Request types
// CreateLabelRequestBody defines the request body for CreateLabel
type CreateLabelRequestBody struct {
	Name string `json:"name"`
}

type CreateLabelRequest struct {
	Body *CreateLabelRequestBody
}

// Response types

type CreateLabelResponse interface {
	VisitCreateLabelResponse(w http.ResponseWriter) error
}

type CreateLabel201JSONResponse struct {
}

func (response CreateLabel201JSONResponse) VisitCreateLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateLabel400Response struct {
	server.BadRequestResponse
}

func (response CreateLabel400Response) VisitCreateLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type CreateLabel401Response struct {
	server.UnauthorizedResponse
}

func (response CreateLabel401Response) VisitCreateLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// CreateLabel handles the POST /labels endpoint.
func (c *LabelsController) CreateLabel(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := CreateLabelRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Request body
	request.Body = &CreateLabelRequestBody{}
	if err := ctx.Bind(request.Body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	// Set auth scopes
	ctx.Set(middleware.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewCreateLabelCommand(
		sessionID,         // SessionID for authenticated operations
		request.Body.Name, // Name
	)
	result, err := c.createLabelHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}
	return ctx.JSON(http.StatusCreated, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// ListLabels - GET /labels
// ============================================================================

// Request types
// ListLabelsParams defines parameters for ListLabels
type ListLabelsParams struct {
	Filter *map[string]interface{}   `json:"filter,omitempty"`
	Page   *map[string]interface{}   `json:"page,omitempty"`
	Sort   *[]map[string]interface{} `json:"sort,omitempty"`
}

type ListLabelsRequest struct {
	Params ListLabelsParams
}

// Response types

type ListLabelsResponse interface {
	VisitListLabelsResponse(w http.ResponseWriter) error
}

type ListLabels200JSONResponse struct {
}

func (response ListLabels200JSONResponse) VisitListLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListLabels400Response struct {
	server.BadRequestResponse
}

func (response ListLabels400Response) VisitListLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type ListLabels401Response struct {
	server.UnauthorizedResponse
}

func (response ListLabels401Response) VisitListLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// ListLabels handles the GET /labels endpoint.
func (c *LabelsController) ListLabels(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := ListLabelsRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Query parameters
	var params ListLabelsParams
	// Optional query parameter "filter"
	if err := runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}
	// Optional query parameter "page"
	if err := runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}
	// Optional query parameter "sort"
	if err := runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}
	request.Params = params

	// Set auth scopes
	ctx.Set(middleware.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewListLabelsQuery(
		sessionID, // SessionID for authenticated operations
	)
	// TODO: Apply filters, pagination, sorting from request.Params

	results, total, err := c.listLabelsHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": results,
		"meta": map[string]interface{}{
			"total": total,
		},
	})
}

// ============================================================================
// DeleteLabel - DELETE /labels/{id}
// ============================================================================

// Request types

type DeleteLabelRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type DeleteLabelResponse interface {
	VisitDeleteLabelResponse(w http.ResponseWriter) error
}

type DeleteLabel200JSONResponse struct {
}

func (response DeleteLabel200JSONResponse) VisitDeleteLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteLabel404Response struct {
	server.NotFoundResponse
}

func (response DeleteLabel404Response) VisitDeleteLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// DeleteLabel handles the DELETE /labels/{id} endpoint.
func (c *LabelsController) DeleteLabel(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := DeleteLabelRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Set auth scopes
	ctx.Set(middleware.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewDeleteLabelCommand(
		sessionID,  // SessionID for authenticated operations
		request.ID, // id
	)
	err := c.deleteLabelHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}
	return ctx.NoContent(http.StatusNoContent)
}

// ============================================================================
// GetLabel - GET /labels/{id}
// ============================================================================

// Request types

type GetLabelRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type GetLabelResponse interface {
	VisitGetLabelResponse(w http.ResponseWriter) error
}

type GetLabel200JSONResponse struct {
}

func (response GetLabel200JSONResponse) VisitGetLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetLabel404Response struct {
	server.NotFoundResponse
}

func (response GetLabel404Response) VisitGetLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// GetLabel handles the GET /labels/{id} endpoint.
func (c *LabelsController) GetLabel(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := GetLabelRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Set auth scopes
	ctx.Set(middleware.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewGetLabelQuery(
		sessionID,  // SessionID for authenticated operations
		request.ID, // id
	)

	result, err := c.getLabelHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// UpdateLabel - PATCH /labels/{id}
// ============================================================================

// Request types
// UpdateLabelRequestBody defines the request body for UpdateLabel
type UpdateLabelRequestBody struct {
	Name *string `json:"name,omitempty"`
}

type UpdateLabelRequest struct {
	ID   uuid.UUID `json:"id"`
	Body *UpdateLabelRequestBody
}

// Response types

type UpdateLabelResponse interface {
	VisitUpdateLabelResponse(w http.ResponseWriter) error
}

type UpdateLabel200JSONResponse struct {
}

func (response UpdateLabel200JSONResponse) VisitUpdateLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateLabel404Response struct {
	server.NotFoundResponse
}

func (response UpdateLabel404Response) VisitUpdateLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// UpdateLabel handles the PATCH /labels/{id} endpoint.
func (c *LabelsController) UpdateLabel(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := UpdateLabelRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Request body
	request.Body = &UpdateLabelRequestBody{}
	if err := ctx.Bind(request.Body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	// Set auth scopes
	ctx.Set(middleware.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewUpdateLabelCommand(
		sessionID,         // SessionID for authenticated operations
		request.ID,        // id
		request.Body.Name, // Name
	)
	result, err := c.updateLabelHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}
	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}
