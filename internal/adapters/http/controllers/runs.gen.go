// Code generated by archesai codegen. DO NOT EDIT.
package controllers

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"

	"github.com/archesai/archesai/internal/adapters/http/server"
	commands "github.com/archesai/archesai/internal/application/commands/runs"
	queries "github.com/archesai/archesai/internal/application/queries/runs"
)

// RunsController handles HTTP requests for runs endpoints.
type RunsController struct {
	// Command handlers
	createHandler *commands.CreateRunCommandHandler
	updateHandler *commands.UpdateRunCommandHandler
	deleteHandler *commands.DeleteRunCommandHandler

	// Query handlers
	getHandler  *queries.GetRunQueryHandler
	listHandler *queries.ListRunsQueryHandler
}

// NewRunsController creates a new runs controller with injected handlers.
func NewRunsController(
	createHandler *commands.CreateRunCommandHandler,
	updateHandler *commands.UpdateRunCommandHandler,
	deleteHandler *commands.DeleteRunCommandHandler,
	getHandler *queries.GetRunQueryHandler,
	listHandler *queries.ListRunsQueryHandler,
) *RunsController {
	return &RunsController{
		createHandler: createHandler,
		updateHandler: updateHandler,
		deleteHandler: deleteHandler,
		getHandler:    getHandler,
		listHandler:   listHandler,
	}
}

// RegisterRunsRoutes registers all HTTP routes for the runs domain.
func RegisterRunsRoutes(router server.EchoRouter, controller *RunsController) {
	router.POST("/runs", controller.CreateRun)
	router.GET("/runs", controller.ListRuns)
	router.DELETE("/runs/:id", controller.DeleteRun)
	router.GET("/runs/:id", controller.GetRun)
	router.PATCH("/runs/:id", controller.UpdateRun)
}

// ============================================================================
// CreateRun - POST /runs
// ============================================================================

// Request types

type CreateRunRequest struct {
}

// Response types

type CreateRunResponse interface {
	VisitCreateRunResponse(w http.ResponseWriter) error
}

type CreateRun201JSONResponse struct {
}

func (response CreateRun201JSONResponse) VisitCreateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateRun400Response struct {
	server.BadRequestResponse
}

func (response CreateRun400Response) VisitCreateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type CreateRun401Response struct {
	server.UnauthorizedResponse
}

func (response CreateRun401Response) VisitCreateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// CreateRun handles the POST /runs endpoint.
func (c *RunsController) CreateRun(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Determine which handler to call based on operation
	// Create command from request
	cmd := commands.NewCreateRunCommand(
	// TODO: Map request fields to command
	)

	result, err := c.createHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusCreated, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// ListRuns - GET /runs
// ============================================================================

// Request types

type ListRunsRequest struct {
	Params dto.ListRunsParams
}

// Response types

type ListRunsResponse interface {
	VisitListRunsResponse(w http.ResponseWriter) error
}

type ListRuns200JSONResponse struct {
}

func (response ListRuns200JSONResponse) VisitListRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListRuns400Response struct {
	server.BadRequestResponse
}

func (response ListRuns400Response) VisitListRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type ListRuns401Response struct {
	server.UnauthorizedResponse
}

func (response ListRuns401Response) VisitListRunsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// ListRuns handles the GET /runs endpoint.
func (c *RunsController) ListRuns(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Query parameters
	var params dto.ListRunsParams
	// Optional query parameter "filter"
	if err := runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}
	// Optional query parameter "page"
	if err := runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}
	// Optional query parameter "sort"
	if err := runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}
	request.Params = params

	// Determine which handler to call based on operation
	// Create list query from request
	query := queries.NewListRunsQuery()
	// TODO: Apply filters, pagination, sorting from request.Params

	results, total, err := c.listHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": results,
		"meta": map[string]interface{}{
			"total": total,
		},
	})
}

// ============================================================================
// DeleteRun - DELETE /runs/{id}
// ============================================================================

// Request types

type DeleteRunRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type DeleteRunResponse interface {
	VisitDeleteRunResponse(w http.ResponseWriter) error
}

type DeleteRun200JSONResponse struct {
}

func (response DeleteRun200JSONResponse) VisitDeleteRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRun404Response struct {
	server.NotFoundResponse
}

func (response DeleteRun404Response) VisitDeleteRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// DeleteRun handles the DELETE /runs/{id} endpoint.
func (c *RunsController) DeleteRun(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Create delete command from request
	cmd := commands.NewDeleteRunCommand(
		request.ID,
	)

	err := c.deleteHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.NoContent(http.StatusNoContent)
}

// ============================================================================
// GetRun - GET /runs/{id}
// ============================================================================

// Request types

type GetRunRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type GetRunResponse interface {
	VisitGetRunResponse(w http.ResponseWriter) error
}

type GetRun200JSONResponse struct {
}

func (response GetRun200JSONResponse) VisitGetRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRun404Response struct {
	server.NotFoundResponse
}

func (response GetRun404Response) VisitGetRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// GetRun handles the GET /runs/{id} endpoint.
func (c *RunsController) GetRun(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Create get query from request
	query := queries.NewGetRunQuery(
		request.ID,
	)

	result, err := c.getHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// UpdateRun - PATCH /runs/{id}
// ============================================================================

// Request types

type UpdateRunRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type UpdateRunResponse interface {
	VisitUpdateRunResponse(w http.ResponseWriter) error
}

type UpdateRun200JSONResponse struct {
}

func (response UpdateRun200JSONResponse) VisitUpdateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRun404Response struct {
	server.NotFoundResponse
}

func (response UpdateRun404Response) VisitUpdateRunResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// UpdateRun handles the PATCH /runs/{id} endpoint.
func (c *RunsController) UpdateRun(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Create update command from request
	cmd := commands.NewUpdateRunCommand(
	// TODO: Map request fields to command including ID
	)

	result, err := c.updateHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}
