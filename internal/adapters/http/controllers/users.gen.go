// Code generated by archesai codegen. DO NOT EDIT.
package controllers

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"

	"github.com/archesai/archesai/internal/adapters/http/server"
	commands "github.com/archesai/archesai/internal/application/commands/users"
	"github.com/archesai/archesai/internal/application/dto"
	queries "github.com/archesai/archesai/internal/application/queries/users"
	"github.com/archesai/archesai/internal/core/valueobjects"
)

// UsersController handles HTTP requests for users endpoints.
type UsersController struct {
	// Command handlers
	createHandler *commands.CreateUserCommandHandler
	updateHandler *commands.UpdateUserCommandHandler
	deleteHandler *commands.DeleteUserCommandHandler

	// Query handlers
	getHandler  *queries.GetUserQueryHandler
	listHandler *queries.ListUsersQueryHandler
}

// NewUsersController creates a new users controller with injected handlers.
func NewUsersController(
	createHandler *commands.CreateUserCommandHandler,
	updateHandler *commands.UpdateUserCommandHandler,
	deleteHandler *commands.DeleteUserCommandHandler,
	getHandler *queries.GetUserQueryHandler,
	listHandler *queries.ListUsersQueryHandler,
) *UsersController {
	return &UsersController{
		createHandler: createHandler,
		updateHandler: updateHandler,
		deleteHandler: deleteHandler,
		getHandler:    getHandler,
		listHandler:   listHandler,
	}
}

// RegisterUsersRoutes registers all HTTP routes for the users domain.
func RegisterUsersRoutes(router server.EchoRouter, controller *UsersController) {
	router.GET("/users", controller.ListUsers)
	router.DELETE("/users/:id", controller.DeleteUser)
	router.GET("/users/:id", controller.GetUser)
	router.PATCH("/users/:id", controller.UpdateUser)
}

// ============================================================================
// ListUsers - GET /users
// ============================================================================

// Request types

type ListUsersRequest struct {
	Params dto.ListUsersParams
}

// Response types

type ListUsersResponse interface {
	VisitListUsersResponse(w http.ResponseWriter) error
}

type ListUsers200JSONResponse struct {
}

func (response ListUsers200JSONResponse) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListUsers400Response struct {
	dto.BadRequestResponse
}

func (response ListUsers400Response) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type ListUsers401Response struct {
	dto.UnauthorizedResponse
}

func (response ListUsers401Response) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// ListUsers handles the GET /users endpoint.
func (c *UsersController) ListUsers(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Query parameters
	var params dto.ListUsersParams
	// Optional query parameter "filter"
	if err := runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}
	// Optional query parameter "page"
	if err := runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}
	// Optional query parameter "sort"
	if err := runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}
	request.Params = params

	// Determine which handler to call based on operation
	// Create list query from request
	query := queries.NewListUsersQuery()
	// TODO: Apply filters, pagination, sorting from request.Params

	results, total, err := c.listHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": results,
		"meta": map[string]interface{}{
			"total": total,
		},
	})
}

// ============================================================================
// DeleteUser - DELETE /users/{id}
// ============================================================================

// Request types

type DeleteUserRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type DeleteUserResponse interface {
	VisitDeleteUserResponse(w http.ResponseWriter) error
}

type DeleteUser200JSONResponse struct {
}

func (response DeleteUser200JSONResponse) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser404Response struct {
	dto.NotFoundResponse
}

func (response DeleteUser404Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// DeleteUser handles the DELETE /users/{id} endpoint.
func (c *UsersController) DeleteUser(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Create delete command from request
	cmd := commands.NewDeleteUserCommand(
		valueobjects.UserID(request.ID),
	)

	err := c.deleteHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.NoContent(http.StatusNoContent)
}

// ============================================================================
// GetUser - GET /users/{id}
// ============================================================================

// Request types

type GetUserRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type GetUserResponse interface {
	VisitGetUserResponse(w http.ResponseWriter) error
}

type GetUser200JSONResponse struct {
}

func (response GetUser200JSONResponse) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUser404Response struct {
	dto.NotFoundResponse
}

func (response GetUser404Response) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// GetUser handles the GET /users/{id} endpoint.
func (c *UsersController) GetUser(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Create get query from request
	query := queries.NewGetUserQuery(
		valueobjects.UserID(request.ID),
	)

	result, err := c.getHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// UpdateUser - PATCH /users/{id}
// ============================================================================

// Request types

type UpdateUserRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type UpdateUserResponse interface {
	VisitUpdateUserResponse(w http.ResponseWriter) error
}

type UpdateUser200JSONResponse struct {
}

func (response UpdateUser200JSONResponse) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser404Response struct {
	dto.NotFoundResponse
}

func (response UpdateUser404Response) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// UpdateUser handles the PATCH /users/{id} endpoint.
func (c *UsersController) UpdateUser(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Create update command from request
	cmd := commands.NewUpdateUserCommand(
	// TODO: Map request fields to command including ID
	)

	result, err := c.updateHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}
