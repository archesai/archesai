// Code generated by archesai. DO NOT EDIT.

package controllers

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"

	"github.com/archesai/archesai/internal/adapters/http/server"
	commands "github.com/archesai/archesai/internal/application/commands/invitation"
	queries "github.com/archesai/archesai/internal/application/queries/invitation"
	"github.com/archesai/archesai/internal/core/entities"
)

// InvitationController handles HTTP requests for invitation endpoints.
type InvitationController struct {
	createInvitationHandler *commands.CreateInvitationCommandHandler
	updateInvitationHandler *commands.UpdateInvitationCommandHandler
	deleteInvitationHandler *commands.DeleteInvitationCommandHandler
	getInvitationHandler    *queries.GetInvitationQueryHandler
	listInvitationsHandler  *queries.ListInvitationsQueryHandler
}

// NewInvitationController creates a new invitation controller with injected handlers.
func NewInvitationController(
	createInvitationHandler *commands.CreateInvitationCommandHandler,
	updateInvitationHandler *commands.UpdateInvitationCommandHandler,
	deleteInvitationHandler *commands.DeleteInvitationCommandHandler,
	getInvitationHandler *queries.GetInvitationQueryHandler,
	listInvitationsHandler *queries.ListInvitationsQueryHandler,
) *InvitationController {
	return &InvitationController{
		createInvitationHandler: createInvitationHandler,
		updateInvitationHandler: updateInvitationHandler,
		deleteInvitationHandler: deleteInvitationHandler,
		getInvitationHandler:    getInvitationHandler,
		listInvitationsHandler:  listInvitationsHandler,
	}
}

// RegisterInvitationRoutes registers all HTTP routes for the invitation domain.
func RegisterInvitationRoutes(router server.EchoRouter, controller *InvitationController) {
	router.POST("/organizations/:organizationID/invitations", controller.CreateInvitation)
	router.GET("/organizations/:organizationID/invitations/:id", controller.GetInvitation)
	router.GET("/organizations/:organizationID/invitations", controller.ListInvitations)
	router.PATCH("/organizations/:organizationID/invitations/:id", controller.UpdateInvitation)
	router.DELETE("/organizations/:organizationID/invitations/:id", controller.DeleteInvitation)
}

// ============================================================================
// CreateInvitation - POST /organizations/{organizationID}/invitations
// ============================================================================

// Request types
// CreateInvitationRequestBody defines the request body for CreateInvitation
type CreateInvitationRequestBody struct {
	Email string `json:"email"`
	Role  string `json:"role"`
}

type CreateInvitationRequest struct {
	OrganizationID uuid.UUID `json:"organizationID"`
	Body           *CreateInvitationRequestBody
}

// Response types

type CreateInvitationResponse interface {
	VisitCreateInvitationResponse(w http.ResponseWriter) error
}

type CreateInvitation201Response struct {
	Data entities.Invitation `json:"data"`
}

func (response CreateInvitation201Response) VisitCreateInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateInvitation400Response struct {
	server.BadRequestResponse
}

func (response CreateInvitation400Response) VisitCreateInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type CreateInvitation401Response struct {
	server.UnauthorizedResponse
}

func (response CreateInvitation401Response) VisitCreateInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// CreateInvitation handles the POST /organizations/{organizationID}/invitations endpoint.
func (c *InvitationController) CreateInvitation(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := CreateInvitationRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "organizationID"
	var organizationID uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "organizationID", ctx.Param("organizationID"), &organizationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationID: %s", err))
	}
	request.OrganizationID = organizationID

	// Request body
	request.Body = &CreateInvitationRequestBody{}
	if err := ctx.Bind(request.Body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewCreateInvitationCommand(
		sessionID,              // SessionID for authenticated operations
		request.OrganizationID, // OrganizationID
		request.Body.Email,     // Email
		request.Body.Role,      // Role
	)
	result, err := c.createInvitationHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}
	return ctx.JSON(http.StatusCreated, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// GetInvitation - GET /organizations/{organizationID}/invitations/{id}
// ============================================================================

// Request types

type GetInvitationRequest struct {
	OrganizationID uuid.UUID `json:"organizationID"`
	ID             uuid.UUID `json:"id"`
}

// Response types

type GetInvitationResponse interface {
	VisitGetInvitationResponse(w http.ResponseWriter) error
}

type GetInvitation200Response struct {
	Data entities.Invitation `json:"data"`
}

func (response GetInvitation200Response) VisitGetInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetInvitation404Response struct {
	server.NotFoundResponse
}

func (response GetInvitation404Response) VisitGetInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// GetInvitation handles the GET /organizations/{organizationID}/invitations/{id} endpoint.
func (c *InvitationController) GetInvitation(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := GetInvitationRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "organizationID"
	var organizationID uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "organizationID", ctx.Param("organizationID"), &organizationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationID: %s", err))
	}
	request.OrganizationID = organizationID

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewGetInvitationQuery(
		sessionID,              // SessionID for authenticated operations
		request.OrganizationID, // OrganizationID
		request.ID,             // ID
	)

	result, err := c.getInvitationHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// ListInvitations - GET /organizations/{organizationID}/invitations
// ============================================================================

// Request types
// ListInvitationsParams defines parameters for ListInvitations
type ListInvitationsParams struct {
	Filter map[string]any   `json:"filter,omitempty"`
	Page   map[string]any   `json:"page,omitempty"`
	Sort   []map[string]any `json:"sort,omitempty"`
}

type ListInvitationsRequest struct {
	OrganizationID uuid.UUID `json:"organizationID"`
	Params         ListInvitationsParams
}

// Response types

type ListInvitationsResponse interface {
	VisitListInvitationsResponse(w http.ResponseWriter) error
}

// ListInvitations200ResponseMeta defines the meta structure
type ListInvitations200ResponseMeta struct {
	Total float64 `json:"total"`
}

type ListInvitations200Response struct {
	Data []entities.Invitation          `json:"data"`
	Meta ListInvitations200ResponseMeta `json:"meta"`
}

func (response ListInvitations200Response) VisitListInvitationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListInvitations400Response struct {
	server.BadRequestResponse
}

func (response ListInvitations400Response) VisitListInvitationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type ListInvitations401Response struct {
	server.UnauthorizedResponse
}

func (response ListInvitations401Response) VisitListInvitationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// ListInvitations handles the GET /organizations/{organizationID}/invitations endpoint.
func (c *InvitationController) ListInvitations(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := ListInvitationsRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "organizationID"
	var organizationID uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "organizationID", ctx.Param("organizationID"), &organizationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationID: %s", err))
	}
	request.OrganizationID = organizationID

	// Query parameters
	var params ListInvitationsParams
	// Optional query parameter "Filter"
	if err := runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}
	// Optional query parameter "Page"
	if err := runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}
	// Optional query parameter "Sort"
	if err := runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}
	request.Params = params

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewListInvitationsQuery(
		sessionID,              // SessionID for authenticated operations
		request.OrganizationID, // OrganizationID
	)
	// TODO: Apply filters, pagination, sorting from request.Params

	results, total, err := c.listInvitationsHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": results,
		"meta": map[string]interface{}{
			"total": total,
		},
	})
}

// ============================================================================
// UpdateInvitation - PATCH /organizations/{organizationID}/invitations/{id}
// ============================================================================

// Request types
// UpdateInvitationRequestBody defines the request body for UpdateInvitation
type UpdateInvitationRequestBody struct {
	Email *string `json:"email,omitempty"`
	Role  *string `json:"role,omitempty"`
}

type UpdateInvitationRequest struct {
	OrganizationID uuid.UUID `json:"organizationID"`
	ID             uuid.UUID `json:"id"`
	Body           *UpdateInvitationRequestBody
}

// Response types

type UpdateInvitationResponse interface {
	VisitUpdateInvitationResponse(w http.ResponseWriter) error
}

type UpdateInvitation200Response struct {
	Data entities.Invitation `json:"data"`
}

func (response UpdateInvitation200Response) VisitUpdateInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateInvitation404Response struct {
	server.NotFoundResponse
}

func (response UpdateInvitation404Response) VisitUpdateInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// UpdateInvitation handles the PATCH /organizations/{organizationID}/invitations/{id} endpoint.
func (c *InvitationController) UpdateInvitation(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := UpdateInvitationRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "organizationID"
	var organizationID uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "organizationID", ctx.Param("organizationID"), &organizationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationID: %s", err))
	}
	request.OrganizationID = organizationID

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Request body
	request.Body = &UpdateInvitationRequestBody{}
	if err := ctx.Bind(request.Body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewUpdateInvitationCommand(
		sessionID,              // SessionID for authenticated operations
		request.OrganizationID, // OrganizationID
		request.ID,             // ID
		request.Body.Email,     // Email
		request.Body.Role,      // Role
	)
	result, err := c.updateInvitationHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}
	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// DeleteInvitation - DELETE /organizations/{organizationID}/invitations/{id}
// ============================================================================

// Request types

type DeleteInvitationRequest struct {
	OrganizationID uuid.UUID `json:"organizationID"`
	ID             uuid.UUID `json:"id"`
}

// Response types

type DeleteInvitationResponse interface {
	VisitDeleteInvitationResponse(w http.ResponseWriter) error
}

type DeleteInvitation200Response struct {
	Data entities.Invitation `json:"data"`
}

func (response DeleteInvitation200Response) VisitDeleteInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteInvitation404Response struct {
	server.NotFoundResponse
}

func (response DeleteInvitation404Response) VisitDeleteInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// DeleteInvitation handles the DELETE /organizations/{organizationID}/invitations/{id} endpoint.
func (c *InvitationController) DeleteInvitation(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := DeleteInvitationRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "organizationID"
	var organizationID uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "organizationID", ctx.Param("organizationID"), &organizationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter organizationID: %s", err))
	}
	request.OrganizationID = organizationID

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewDeleteInvitationCommand(
		sessionID,              // SessionID for authenticated operations
		request.OrganizationID, // OrganizationID
		request.ID,             // ID
	)
	if err := c.deleteInvitationHandler.Handle(reqCtx, cmd); err != nil {
		return err
	}
	return ctx.NoContent(http.StatusNoContent)
}
