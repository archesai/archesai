// Code generated by archesai codegen. DO NOT EDIT.
package controllers

import (
	"encoding/json"
	"net/http"

	"github.com/labstack/echo/v4"

	"github.com/archesai/archesai/internal/adapters/http/server"
	queries "github.com/archesai/archesai/internal/application/queries/health"
)

// HealthController handles HTTP requests for health endpoints.
type HealthController struct {
	// Query handlers
	getHealthHandler *queries.GetHealthQueryHandler
}

// NewHealthController creates a new health controller with injected handlers.
func NewHealthController(
	getHealthHandler *queries.GetHealthQueryHandler,
) *HealthController {
	return &HealthController{
		getHealthHandler: getHealthHandler,
	}
}

// RegisterHealthRoutes registers all HTTP routes for the health domain.
func RegisterHealthRoutes(router server.EchoRouter, controller *HealthController) {
	router.GET("/health", controller.GetHealth)
}

// ============================================================================
// GetHealth - GET /health
// ============================================================================

// Request types

type GetHealthRequest struct {
}

// Response types

type GetHealthResponse interface {
	VisitGetHealthResponse(w http.ResponseWriter) error
}

type GetHealth200JSONResponse struct {
}

func (response GetHealth200JSONResponse) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHealth400Response struct {
	server.BadRequestResponse
}

func (response GetHealth400Response) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

// Handler method

// GetHealth handles the GET /health endpoint.
func (c *HealthController) GetHealth(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewGetHealthQuery()

	result, err := c.getHealthHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}
