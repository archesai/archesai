// Code generated by archesai. DO NOT EDIT.

package controllers

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/archesai/archesai/internal/adapters/http/server"
	queries "github.com/archesai/archesai/internal/application/queries/health"
)

// HealthController handles HTTP requests for health endpoints.
type HealthController struct {
	getHealthHandler *queries.GetHealthQueryHandler
}

// NewHealthController creates a new health controller with injected handlers.
func NewHealthController(
	getHealthHandler *queries.GetHealthQueryHandler,
) *HealthController {
	return &HealthController{
		getHealthHandler: getHealthHandler,
	}
}

// RegisterHealthRoutes registers all HTTP routes for the health domain.
func RegisterHealthRoutes(mux *http.ServeMux, controller *HealthController) {
	mux.HandleFunc("GET /health", controller.GetHealth)
}

// ============================================================================
// GetHealth - GET /health
// ============================================================================

// Request types

type GetHealthRequest struct {
}

// Response types

type GetHealthResponse interface {
	VisitGetHealthResponse(w http.ResponseWriter) error
}

// GetHealth200ResponseServices defines the services structure
type GetHealth200ResponseServices struct {
	Database string `json:"database"`
	Email    string `json:"email"`
	Redis    string `json:"redis"`
}

type GetHealth200Response struct {
	Services  GetHealth200ResponseServices `json:"services"`
	Timestamp time.Time                    `json:"timestamp"`
	Uptime    int64                        `json:"uptime"`
}

func (response GetHealth200Response) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetHealth400Response struct {
	server.ProblemDetails
}

func (response GetHealth400Response) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetHealth401Response struct {
	server.ProblemDetails
}

func (response GetHealth401Response) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetHealth429Response struct {
	server.ProblemDetails
}

func (response GetHealth429Response) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Retry-After", "")           // TODO: Set actual value for Retry-After
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetHealth500Response struct {
	server.ProblemDetails
}

func (response GetHealth500Response) VisitGetHealthResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

// Handler method

// GetHealth handles the GET /health endpoint.
func (c *HealthController) GetHealth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewGetHealthQuery()

	result, err := c.getHealthHandler.Handle(ctx, query)
	if err != nil {
		errorResp := GetHealth500Response{
			ProblemDetails: server.NewInternalServerErrorResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitGetHealthResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Custom handler - result type varies, response structure not standardized
	// TODO: Implement proper type assertion and response mapping
	_ = result
	response := GetHealth200Response{}
	if err := response.VisitGetHealthResponse(w); err != nil {
		fmt.Fprintf(w, "error writing response: %v", err)
	}
}
