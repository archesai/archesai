// Code generated by archesai codegen. DO NOT EDIT.
package controllers

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"

	"github.com/archesai/archesai/internal/adapters/http/server"
	commands "github.com/archesai/archesai/internal/application/commands/organizations"
	queries "github.com/archesai/archesai/internal/application/queries/organizations"
)

// OrganizationsController handles HTTP requests for organizations endpoints.
type OrganizationsController struct {
	// Command handlers
	createOrganizationHandler *commands.CreateOrganizationCommandHandler
	deleteOrganizationHandler *commands.DeleteOrganizationCommandHandler
	updateOrganizationHandler *commands.UpdateOrganizationCommandHandler
	// Query handlers
	getOrganizationHandler   *queries.GetOrganizationQueryHandler
	listOrganizationsHandler *queries.ListOrganizationsQueryHandler
}

// NewOrganizationsController creates a new organizations controller with injected handlers.
func NewOrganizationsController(
	createOrganizationHandler *commands.CreateOrganizationCommandHandler,
	deleteOrganizationHandler *commands.DeleteOrganizationCommandHandler,
	updateOrganizationHandler *commands.UpdateOrganizationCommandHandler,
	getOrganizationHandler *queries.GetOrganizationQueryHandler,
	listOrganizationsHandler *queries.ListOrganizationsQueryHandler,
) *OrganizationsController {
	return &OrganizationsController{
		createOrganizationHandler: createOrganizationHandler,
		deleteOrganizationHandler: deleteOrganizationHandler,
		updateOrganizationHandler: updateOrganizationHandler,
		getOrganizationHandler:    getOrganizationHandler,
		listOrganizationsHandler:  listOrganizationsHandler,
	}
}

// RegisterOrganizationsRoutes registers all HTTP routes for the organizations domain.
func RegisterOrganizationsRoutes(router server.EchoRouter, controller *OrganizationsController) {
	router.POST("/organizations", controller.CreateOrganization)
	router.GET("/organizations", controller.ListOrganizations)
	router.DELETE("/organizations/:id", controller.DeleteOrganization)
	router.GET("/organizations/:id", controller.GetOrganization)
	router.PATCH("/organizations/:id", controller.UpdateOrganization)
}

// ============================================================================
// CreateOrganization - POST /organizations
// ============================================================================

// Request types
// CreateOrganizationRequestBody defines the request body for CreateOrganization
type CreateOrganizationRequestBody struct {
	BillingEmail   string    `json:"billingEmail"`
	OrganizationID uuid.UUID `json:"organizationID"`
}

type CreateOrganizationRequest struct {
	Body *CreateOrganizationRequestBody
}

// Response types

type CreateOrganizationResponse interface {
	VisitCreateOrganizationResponse(w http.ResponseWriter) error
}

type CreateOrganization201JSONResponse struct {
}

func (response CreateOrganization201JSONResponse) VisitCreateOrganizationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateOrganization400Response struct {
	server.BadRequestResponse
}

func (response CreateOrganization400Response) VisitCreateOrganizationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type CreateOrganization401Response struct {
	server.UnauthorizedResponse
}

func (response CreateOrganization401Response) VisitCreateOrganizationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// CreateOrganization handles the POST /organizations endpoint.
func (c *OrganizationsController) CreateOrganization(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := CreateOrganizationRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Request body
	request.Body = &CreateOrganizationRequestBody{}
	if err := ctx.Bind(request.Body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewCreateOrganizationCommand(
		sessionID,                   // SessionID for authenticated operations
		request.Body.BillingEmail,   // BillingEmail
		request.Body.OrganizationID, // OrganizationID
	)
	result, err := c.createOrganizationHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}
	return ctx.JSON(http.StatusCreated, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// ListOrganizations - GET /organizations
// ============================================================================

// Request types
// ListOrganizationsParams defines parameters for ListOrganizations
type ListOrganizationsParams struct {
	Filter *map[string]interface{}   `json:"filter,omitempty"`
	Page   *map[string]interface{}   `json:"page,omitempty"`
	Sort   *[]map[string]interface{} `json:"sort,omitempty"`
}

type ListOrganizationsRequest struct {
	Params ListOrganizationsParams
}

// Response types

type ListOrganizationsResponse interface {
	VisitListOrganizationsResponse(w http.ResponseWriter) error
}

type ListOrganizations200JSONResponse struct {
}

func (response ListOrganizations200JSONResponse) VisitListOrganizationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListOrganizations400Response struct {
	server.BadRequestResponse
}

func (response ListOrganizations400Response) VisitListOrganizationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type ListOrganizations401Response struct {
	server.UnauthorizedResponse
}

func (response ListOrganizations401Response) VisitListOrganizationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// ListOrganizations handles the GET /organizations endpoint.
func (c *OrganizationsController) ListOrganizations(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := ListOrganizationsRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Query parameters
	var params ListOrganizationsParams
	// Optional query parameter "filter"
	if err := runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}
	// Optional query parameter "page"
	if err := runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}
	// Optional query parameter "sort"
	if err := runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}
	request.Params = params

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewListOrganizationsQuery(
		sessionID, // SessionID for authenticated operations
	)
	// TODO: Apply filters, pagination, sorting from request.Params

	results, total, err := c.listOrganizationsHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": results,
		"meta": map[string]interface{}{
			"total": total,
		},
	})
}

// ============================================================================
// DeleteOrganization - DELETE /organizations/{id}
// ============================================================================

// Request types

type DeleteOrganizationRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type DeleteOrganizationResponse interface {
	VisitDeleteOrganizationResponse(w http.ResponseWriter) error
}

type DeleteOrganization200JSONResponse struct {
}

func (response DeleteOrganization200JSONResponse) VisitDeleteOrganizationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteOrganization404Response struct {
	server.NotFoundResponse
}

func (response DeleteOrganization404Response) VisitDeleteOrganizationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// DeleteOrganization handles the DELETE /organizations/{id} endpoint.
func (c *OrganizationsController) DeleteOrganization(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := DeleteOrganizationRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewDeleteOrganizationCommand(
		sessionID,  // SessionID for authenticated operations
		request.ID, // id
	)
	err := c.deleteOrganizationHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}
	return ctx.NoContent(http.StatusNoContent)
}

// ============================================================================
// GetOrganization - GET /organizations/{id}
// ============================================================================

// Request types

type GetOrganizationRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type GetOrganizationResponse interface {
	VisitGetOrganizationResponse(w http.ResponseWriter) error
}

type GetOrganization200JSONResponse struct {
}

func (response GetOrganization200JSONResponse) VisitGetOrganizationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOrganization404Response struct {
	server.NotFoundResponse
}

func (response GetOrganization404Response) VisitGetOrganizationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// GetOrganization handles the GET /organizations/{id} endpoint.
func (c *OrganizationsController) GetOrganization(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := GetOrganizationRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewGetOrganizationQuery(
		sessionID,  // SessionID for authenticated operations
		request.ID, // id
	)

	result, err := c.getOrganizationHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// UpdateOrganization - PATCH /organizations/{id}
// ============================================================================

// Request types
// UpdateOrganizationRequestBody defines the request body for UpdateOrganization
type UpdateOrganizationRequestBody struct {
	BillingEmail   *string    `json:"billingEmail,omitempty"`
	OrganizationID *uuid.UUID `json:"organizationID,omitempty"`
}

type UpdateOrganizationRequest struct {
	ID   uuid.UUID `json:"id"`
	Body *UpdateOrganizationRequestBody
}

// Response types

type UpdateOrganizationResponse interface {
	VisitUpdateOrganizationResponse(w http.ResponseWriter) error
}

type UpdateOrganization200JSONResponse struct {
}

func (response UpdateOrganization200JSONResponse) VisitUpdateOrganizationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateOrganization404Response struct {
	server.NotFoundResponse
}

func (response UpdateOrganization404Response) VisitUpdateOrganizationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// UpdateOrganization handles the PATCH /organizations/{id} endpoint.
func (c *OrganizationsController) UpdateOrganization(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := UpdateOrganizationRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Request body
	request.Body = &UpdateOrganizationRequestBody{}
	if err := ctx.Bind(request.Body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewUpdateOrganizationCommand(
		sessionID,                   // SessionID for authenticated operations
		request.ID,                  // id
		request.Body.BillingEmail,   // BillingEmail
		request.Body.OrganizationID, // OrganizationID
	)
	result, err := c.updateOrganizationHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}
	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}
