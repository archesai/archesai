// Code generated by archesai codegen. DO NOT EDIT.
package controllers

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"

	"github.com/archesai/archesai/internal/adapters/http/server"
	commands "github.com/archesai/archesai/internal/application/commands/invitations"
	queries "github.com/archesai/archesai/internal/application/queries/invitations"
)

// InvitationsController handles HTTP requests for invitations endpoints.
type InvitationsController struct {
	// Command handlers
	createHandler *commands.CreateInvitationCommandHandler
	updateHandler *commands.UpdateInvitationCommandHandler
	deleteHandler *commands.DeleteInvitationCommandHandler
	// Query handlers
	getHandler  *queries.GetInvitationQueryHandler
	listHandler *queries.ListInvitationsQueryHandler
}

// NewInvitationsController creates a new invitations controller with injected handlers.
func NewInvitationsController(
	createHandler *commands.CreateInvitationCommandHandler,
	updateHandler *commands.UpdateInvitationCommandHandler,
	deleteHandler *commands.DeleteInvitationCommandHandler,
	getHandler *queries.GetInvitationQueryHandler,
	listHandler *queries.ListInvitationsQueryHandler,
) *InvitationsController {
	return &InvitationsController{
		createHandler: createHandler,
		updateHandler: updateHandler,
		deleteHandler: deleteHandler,
		getHandler:    getHandler,
		listHandler:   listHandler,
	}
}

// RegisterInvitationsRoutes registers all HTTP routes for the invitations domain.
func RegisterInvitationsRoutes(router server.EchoRouter, controller *InvitationsController) {
	router.POST("/organizations/:id/invitations", controller.CreateInvitation)
	router.GET("/organizations/:id/invitations", controller.ListInvitations)
	router.DELETE("/organizations/:id/invitations/:invitationID", controller.DeleteInvitation)
	router.GET("/organizations/:id/invitations/:invitationID", controller.GetInvitation)
	router.PATCH("/organizations/:id/invitations/:invitationID", controller.UpdateInvitation)
}

// ============================================================================
// CreateInvitation - POST /organizations/{id}/invitations
// ============================================================================

// Request types
// CreateInvitationRequestBody defines the request body for CreateInvitation
type CreateInvitationRequestBody struct {
	Email string `json:"email"`
	Role  string `json:"role"`
}

type CreateInvitationRequest struct {
	ID   uuid.UUID `json:"id"`
	Body *CreateInvitationRequestBody
}

// Response types

type CreateInvitationResponse interface {
	VisitCreateInvitationResponse(w http.ResponseWriter) error
}

type CreateInvitation201JSONResponse struct {
}

func (response CreateInvitation201JSONResponse) VisitCreateInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateInvitation400Response struct {
	server.BadRequestResponse
}

func (response CreateInvitation400Response) VisitCreateInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type CreateInvitation401Response struct {
	server.UnauthorizedResponse
}

func (response CreateInvitation401Response) VisitCreateInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// CreateInvitation handles the POST /organizations/{id}/invitations endpoint.
func (c *InvitationsController) CreateInvitation(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := CreateInvitationRequest{}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Request body
	var body CreateInvitationRequestBody
	if err := ctx.Bind(&body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// Determine which handler to call based on operation
	// Create handler
	// Available request body fields: Email, Role

	// TODO: Get organization ID from auth context
	orgID := uuid.New()

	// Create command - adjust field mapping based on your API
	cmd := commands.NewCreateInvitationCommand(
		orgID,
		"",  // TODO: Map appropriate field from request.Body
		"",  // TODO: Map appropriate field from request.Body
		nil, // TODO: Map metadata if available
	)

	result, err := c.createHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusCreated, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// ListInvitations - GET /organizations/{id}/invitations
// ============================================================================

// Request types
// ListInvitationsParams defines parameters for ListInvitations
type ListInvitationsParams struct {
	Filter *map[string]interface{}   `json:"filter,omitempty"`
	Page   *map[string]interface{}   `json:"page,omitempty"`
	Sort   *[]map[string]interface{} `json:"sort,omitempty"`
}

type ListInvitationsRequest struct {
	ID     uuid.UUID `json:"id"`
	Params ListInvitationsParams
}

// Response types

type ListInvitationsResponse interface {
	VisitListInvitationsResponse(w http.ResponseWriter) error
}

type ListInvitations200JSONResponse struct {
}

func (response ListInvitations200JSONResponse) VisitListInvitationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListInvitations400Response struct {
	server.BadRequestResponse
}

func (response ListInvitations400Response) VisitListInvitationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type ListInvitations401Response struct {
	server.UnauthorizedResponse
}

func (response ListInvitations401Response) VisitListInvitationsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// ListInvitations handles the GET /organizations/{id}/invitations endpoint.
func (c *InvitationsController) ListInvitations(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := ListInvitationsRequest{}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Query parameters
	var params ListInvitationsParams
	// Optional query parameter "filter"
	if err := runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}
	// Optional query parameter "page"
	if err := runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}
	// Optional query parameter "sort"
	if err := runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}
	request.Params = params

	// Determine which handler to call based on operation
	// Create list query from request
	query := queries.NewListInvitationsQuery()
	// TODO: Apply filters, pagination, sorting from request.Params

	results, total, err := c.listHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": results,
		"meta": map[string]interface{}{
			"total": total,
		},
	})
}

// ============================================================================
// DeleteInvitation - DELETE /organizations/{id}/invitations/{invitationID}
// ============================================================================

// Request types

type DeleteInvitationRequest struct {
	ID           uuid.UUID `json:"id"`
	InvitationID uuid.UUID `json:"invitationID"`
}

// Response types

type DeleteInvitationResponse interface {
	VisitDeleteInvitationResponse(w http.ResponseWriter) error
}

type DeleteInvitation200JSONResponse struct {
}

func (response DeleteInvitation200JSONResponse) VisitDeleteInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteInvitation404Response struct {
	server.NotFoundResponse
}

func (response DeleteInvitation404Response) VisitDeleteInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// DeleteInvitation handles the DELETE /organizations/{id}/invitations/{invitationID} endpoint.
func (c *InvitationsController) DeleteInvitation(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := DeleteInvitationRequest{}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Path parameter "invitationID"
	var invitationID uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "invitationID", ctx.Param("invitationID"), &invitationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invitationID: %s", err))
	}
	request.InvitationID = invitationID

	// Determine which handler to call based on operation
	// Create delete command from request
	cmd := commands.NewDeleteInvitationCommand(
		request.ID,
	)

	err := c.deleteHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.NoContent(http.StatusNoContent)
}

// ============================================================================
// GetInvitation - GET /organizations/{id}/invitations/{invitationID}
// ============================================================================

// Request types

type GetInvitationRequest struct {
	ID           uuid.UUID `json:"id"`
	InvitationID uuid.UUID `json:"invitationID"`
}

// Response types

type GetInvitationResponse interface {
	VisitGetInvitationResponse(w http.ResponseWriter) error
}

type GetInvitation200JSONResponse struct {
}

func (response GetInvitation200JSONResponse) VisitGetInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetInvitation404Response struct {
	server.NotFoundResponse
}

func (response GetInvitation404Response) VisitGetInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// GetInvitation handles the GET /organizations/{id}/invitations/{invitationID} endpoint.
func (c *InvitationsController) GetInvitation(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := GetInvitationRequest{}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Path parameter "invitationID"
	var invitationID uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "invitationID", ctx.Param("invitationID"), &invitationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invitationID: %s", err))
	}
	request.InvitationID = invitationID

	// Determine which handler to call based on operation
	// Create get query from request
	query := queries.NewGetInvitationQuery(
		request.ID,
	)

	result, err := c.getHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// UpdateInvitation - PATCH /organizations/{id}/invitations/{invitationID}
// ============================================================================

// Request types
// UpdateInvitationRequestBody defines the request body for UpdateInvitation
type UpdateInvitationRequestBody struct {
	Email *string `json:"email,omitempty"`
	Role  *string `json:"role,omitempty"`
}

type UpdateInvitationRequest struct {
	ID           uuid.UUID `json:"id"`
	InvitationID uuid.UUID `json:"invitationID"`
	Body         *UpdateInvitationRequestBody
}

// Response types

type UpdateInvitationResponse interface {
	VisitUpdateInvitationResponse(w http.ResponseWriter) error
}

type UpdateInvitation200JSONResponse struct {
}

func (response UpdateInvitation200JSONResponse) VisitUpdateInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateInvitation404Response struct {
	server.NotFoundResponse
}

func (response UpdateInvitation404Response) VisitUpdateInvitationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// UpdateInvitation handles the PATCH /organizations/{id}/invitations/{invitationID} endpoint.
func (c *InvitationsController) UpdateInvitation(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := UpdateInvitationRequest{}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Path parameter "invitationID"
	var invitationID uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "invitationID", ctx.Param("invitationID"), &invitationID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter invitationID: %s", err))
	}
	request.InvitationID = invitationID

	// Request body
	var body UpdateInvitationRequestBody
	if err := ctx.Bind(&body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// Determine which handler to call based on operation
	// Update handler
	// Available request body fields: Email, Role

	// Create update command - adjust field mapping based on your API
	cmd := commands.NewUpdateInvitationCommand(
		request.ID, // Assumes all update operations have an ID path parameter
		nil,        // TODO: Map appropriate field from request.Body
		nil,        // TODO: Map appropriate field from request.Body
		nil,        // TODO: Map metadata if available
	)

	result, err := c.updateHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}
