// Code generated by archesai. DO NOT EDIT.

package controllers

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/google/uuid"
	"github.com/oapi-codegen/runtime"

	"github.com/archesai/archesai/internal/adapters/http/server"
	commands "github.com/archesai/archesai/internal/application/commands/label"
	queries "github.com/archesai/archesai/internal/application/queries/label"
	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/valueobjects"
)

// LabelController handles HTTP requests for label endpoints.
type LabelController struct {
	createLabelHandler *commands.CreateLabelCommandHandler
	updateLabelHandler *commands.UpdateLabelCommandHandler
	deleteLabelHandler *commands.DeleteLabelCommandHandler
	getLabelHandler    *queries.GetLabelQueryHandler
	listLabelsHandler  *queries.ListLabelsQueryHandler
}

// NewLabelController creates a new label controller with injected handlers.
func NewLabelController(
	createLabelHandler *commands.CreateLabelCommandHandler,
	updateLabelHandler *commands.UpdateLabelCommandHandler,
	deleteLabelHandler *commands.DeleteLabelCommandHandler,
	getLabelHandler *queries.GetLabelQueryHandler,
	listLabelsHandler *queries.ListLabelsQueryHandler,
) *LabelController {
	return &LabelController{
		createLabelHandler: createLabelHandler,
		updateLabelHandler: updateLabelHandler,
		deleteLabelHandler: deleteLabelHandler,
		getLabelHandler:    getLabelHandler,
		listLabelsHandler:  listLabelsHandler,
	}
}

// RegisterLabelRoutes registers all HTTP routes for the label domain.
func RegisterLabelRoutes(mux *http.ServeMux, controller *LabelController) {
	mux.HandleFunc("POST /labels", controller.CreateLabel)
	mux.HandleFunc("GET /labels/{id}", controller.GetLabel)
	mux.HandleFunc("GET /labels", controller.ListLabels)
	mux.HandleFunc("PATCH /labels/{id}", controller.UpdateLabel)
	mux.HandleFunc("DELETE /labels/{id}", controller.DeleteLabel)
}

// ============================================================================
// CreateLabel - POST /labels
// ============================================================================

// Request types
// CreateLabelRequestBody defines the request body for CreateLabel
type CreateLabelRequestBody struct {
	Name string `json:"name"`
}

type CreateLabelRequest struct {
	Body *CreateLabelRequestBody
}

// Response types

type CreateLabelResponse interface {
	VisitCreateLabelResponse(w http.ResponseWriter) error
}

type CreateLabel201Response struct {
	Data entities.Label `json:"data"`
}

func (response CreateLabel201Response) VisitCreateLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateLabel400Response struct {
	server.ProblemDetails
}

func (response CreateLabel400Response) VisitCreateLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type CreateLabel401Response struct {
	server.ProblemDetails
}

func (response CreateLabel401Response) VisitCreateLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type CreateLabel422Response struct {
	server.ProblemDetails
}

func (response CreateLabel422Response) VisitCreateLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type CreateLabel429Response struct {
	server.ProblemDetails
}

func (response CreateLabel429Response) VisitCreateLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Retry-After", "")           // TODO: Set actual value for Retry-After
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type CreateLabel500Response struct {
	server.ProblemDetails
}

func (response CreateLabel500Response) VisitCreateLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

// Handler method

// CreateLabel handles the POST /labels endpoint.
func (c *LabelController) CreateLabel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	request := CreateLabelRequest{}

	// Extract session ID from context for authenticated operations
	sessionID, ok := ctx.Value(server.SessionIDContextKey).(uuid.UUID)
	if !ok {
		errorResp := CreateLabel401Response{
			ProblemDetails: server.NewUnauthorizedResponse("session required", r.URL.Path),
		}
		if err := errorResp.VisitCreateLabelResponse(w); err != nil {
			// Log error - response may have already been partially written
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Request body
	request.Body = &CreateLabelRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(request.Body); err != nil {
		errorResp := CreateLabel400Response{
			ProblemDetails: server.NewBadRequestResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitCreateLabelResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewCreateLabelCommand(
		sessionID,         // SessionID for authenticated operations
		request.Body.Name, // Name
	)
	result, err := c.createLabelHandler.Handle(ctx, cmd)
	if err != nil {
		errorResp := CreateLabel500Response{
			ProblemDetails: server.NewInternalServerErrorResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitCreateLabelResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	response := CreateLabel201Response{Data: *result}
	if err := response.VisitCreateLabelResponse(w); err != nil {
		fmt.Fprintf(w, "error writing response: %v", err)
	}
}

// ============================================================================
// GetLabel - GET /labels/{id}
// ============================================================================

// Request types

type GetLabelRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type GetLabelResponse interface {
	VisitGetLabelResponse(w http.ResponseWriter) error
}

type GetLabel200Response struct {
	Data entities.Label `json:"data"`
}

func (response GetLabel200Response) VisitGetLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetLabel400Response struct {
	server.ProblemDetails
}

func (response GetLabel400Response) VisitGetLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetLabel401Response struct {
	server.ProblemDetails
}

func (response GetLabel401Response) VisitGetLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetLabel404Response struct {
	server.ProblemDetails
}

func (response GetLabel404Response) VisitGetLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetLabel422Response struct {
	server.ProblemDetails
}

func (response GetLabel422Response) VisitGetLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetLabel429Response struct {
	server.ProblemDetails
}

func (response GetLabel429Response) VisitGetLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Retry-After", "")           // TODO: Set actual value for Retry-After
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetLabel500Response struct {
	server.ProblemDetails
}

func (response GetLabel500Response) VisitGetLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

// Handler method

// GetLabel handles the GET /labels/{id} endpoint.
func (c *LabelController) GetLabel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	request := GetLabelRequest{}

	// Extract session ID from context for authenticated operations
	sessionID, ok := ctx.Value(server.SessionIDContextKey).(uuid.UUID)
	if !ok {
		errorResp := GetLabel401Response{
			ProblemDetails: server.NewUnauthorizedResponse("session required", r.URL.Path),
		}
		if err := errorResp.VisitGetLabelResponse(w); err != nil {
			// Log error - response may have already been partially written
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		errorResp := GetLabel400Response{
			ProblemDetails: server.NewBadRequestResponse(fmt.Sprintf("Invalid format for parameter id: %s", err), r.URL.Path),
		}
		if err := errorResp.VisitGetLabelResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewGetLabelQuery(
		sessionID,  // SessionID for authenticated operations
		request.ID, // ID
	)

	result, err := c.getLabelHandler.Handle(ctx, query)
	if err != nil {
		errorResp := GetLabel500Response{
			ProblemDetails: server.NewInternalServerErrorResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitGetLabelResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	response := GetLabel200Response{Data: *result}
	if err := response.VisitGetLabelResponse(w); err != nil {
		fmt.Fprintf(w, "error writing response: %v", err)
	}
}

// ============================================================================
// ListLabels - GET /labels
// ============================================================================

// Request types
// ListLabelsParams defines parameters for ListLabels
type ListLabelsParams struct {
	Filter map[string]any   `json:"filter,omitempty"`
	Page   map[string]any   `json:"page,omitempty"`
	Sort   []map[string]any `json:"sort,omitempty"`
}

type ListLabelsRequest struct {
	Params ListLabelsParams
}

// Response types

type ListLabelsResponse interface {
	VisitListLabelsResponse(w http.ResponseWriter) error
}

type ListLabels200Response struct {
	Data []entities.Label            `json:"data"`
	Meta valueobjects.PaginationMeta `json:"meta"`
}

func (response ListLabels200Response) VisitListLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListLabels400Response struct {
	server.ProblemDetails
}

func (response ListLabels400Response) VisitListLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type ListLabels401Response struct {
	server.ProblemDetails
}

func (response ListLabels401Response) VisitListLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type ListLabels422Response struct {
	server.ProblemDetails
}

func (response ListLabels422Response) VisitListLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type ListLabels429Response struct {
	server.ProblemDetails
}

func (response ListLabels429Response) VisitListLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Retry-After", "")           // TODO: Set actual value for Retry-After
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type ListLabels500Response struct {
	server.ProblemDetails
}

func (response ListLabels500Response) VisitListLabelsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

// Handler method

// ListLabels handles the GET /labels endpoint.
func (c *LabelController) ListLabels(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	request := ListLabelsRequest{}

	// Extract session ID from context for authenticated operations
	sessionID, ok := ctx.Value(server.SessionIDContextKey).(uuid.UUID)
	if !ok {
		errorResp := ListLabels401Response{
			ProblemDetails: server.NewUnauthorizedResponse("session required", r.URL.Path),
		}
		if err := errorResp.VisitListLabelsResponse(w); err != nil {
			// Log error - response may have already been partially written
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Query parameters
	var params ListLabelsParams

	// Optional query parameter "filter"
	if err := runtime.BindQueryParameter("deepObject", true, false, "filter", r.URL.Query(), &params.Filter); err != nil {
		errorResp := ListLabels400Response{
			ProblemDetails: server.NewBadRequestResponse(fmt.Sprintf("Invalid format for parameter filter: %s", err), r.URL.Path),
		}
		if err := errorResp.VisitListLabelsResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Optional query parameter "page"
	if err := runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page); err != nil {
		errorResp := ListLabels400Response{
			ProblemDetails: server.NewBadRequestResponse(fmt.Sprintf("Invalid format for parameter page: %s", err), r.URL.Path),
		}
		if err := errorResp.VisitListLabelsResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Optional query parameter "sort"
	if err := runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort); err != nil {
		errorResp := ListLabels400Response{
			ProblemDetails: server.NewBadRequestResponse(fmt.Sprintf("Invalid format for parameter sort: %s", err), r.URL.Path),
		}
		if err := errorResp.VisitListLabelsResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}
	request.Params = params

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewListLabelsQuery(
		sessionID, // SessionID for authenticated operations
	)
	// TODO: Apply filters, pagination, sorting from request.Params

	results, total, err := c.listLabelsHandler.Handle(ctx, query)
	if err != nil {
		errorResp := ListLabels500Response{
			ProblemDetails: server.NewInternalServerErrorResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitListLabelsResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Convert pointer slice to value slice for response
	data := make([]entities.Label, len(results))
	for i, item := range results {
		if item != nil {
			data[i] = *item
		}
	}

	response := ListLabels200Response{
		Data: data,
		Meta: valueobjects.PaginationMeta{Total: int32(total)},
	}
	if err := response.VisitListLabelsResponse(w); err != nil {
		fmt.Fprintf(w, "error writing response: %v", err)
	}
}

// ============================================================================
// UpdateLabel - PATCH /labels/{id}
// ============================================================================

// Request types
// UpdateLabelRequestBody defines the request body for UpdateLabel
type UpdateLabelRequestBody struct {
	Name *string `json:"name,omitempty"`
}

type UpdateLabelRequest struct {
	ID   uuid.UUID `json:"id"`
	Body *UpdateLabelRequestBody
}

// Response types

type UpdateLabelResponse interface {
	VisitUpdateLabelResponse(w http.ResponseWriter) error
}

type UpdateLabel200Response struct {
	Data entities.Label `json:"data"`
}

func (response UpdateLabel200Response) VisitUpdateLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateLabel400Response struct {
	server.ProblemDetails
}

func (response UpdateLabel400Response) VisitUpdateLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type UpdateLabel401Response struct {
	server.ProblemDetails
}

func (response UpdateLabel401Response) VisitUpdateLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type UpdateLabel404Response struct {
	server.ProblemDetails
}

func (response UpdateLabel404Response) VisitUpdateLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type UpdateLabel422Response struct {
	server.ProblemDetails
}

func (response UpdateLabel422Response) VisitUpdateLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type UpdateLabel429Response struct {
	server.ProblemDetails
}

func (response UpdateLabel429Response) VisitUpdateLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Retry-After", "")           // TODO: Set actual value for Retry-After
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type UpdateLabel500Response struct {
	server.ProblemDetails
}

func (response UpdateLabel500Response) VisitUpdateLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

// Handler method

// UpdateLabel handles the PATCH /labels/{id} endpoint.
func (c *LabelController) UpdateLabel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	request := UpdateLabelRequest{}

	// Extract session ID from context for authenticated operations
	sessionID, ok := ctx.Value(server.SessionIDContextKey).(uuid.UUID)
	if !ok {
		errorResp := UpdateLabel401Response{
			ProblemDetails: server.NewUnauthorizedResponse("session required", r.URL.Path),
		}
		if err := errorResp.VisitUpdateLabelResponse(w); err != nil {
			// Log error - response may have already been partially written
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		errorResp := UpdateLabel400Response{
			ProblemDetails: server.NewBadRequestResponse(fmt.Sprintf("Invalid format for parameter id: %s", err), r.URL.Path),
		}
		if err := errorResp.VisitUpdateLabelResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}
	request.ID = id

	// Request body
	request.Body = &UpdateLabelRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(request.Body); err != nil {
		errorResp := UpdateLabel400Response{
			ProblemDetails: server.NewBadRequestResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitUpdateLabelResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewUpdateLabelCommand(
		sessionID,         // SessionID for authenticated operations
		request.ID,        // ID
		request.Body.Name, // Name
	)
	result, err := c.updateLabelHandler.Handle(ctx, cmd)
	if err != nil {
		errorResp := UpdateLabel500Response{
			ProblemDetails: server.NewInternalServerErrorResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitUpdateLabelResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	response := UpdateLabel200Response{Data: *result}
	if err := response.VisitUpdateLabelResponse(w); err != nil {
		fmt.Fprintf(w, "error writing response: %v", err)
	}
}

// ============================================================================
// DeleteLabel - DELETE /labels/{id}
// ============================================================================

// Request types

type DeleteLabelRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type DeleteLabelResponse interface {
	VisitDeleteLabelResponse(w http.ResponseWriter) error
}

type DeleteLabel204Response struct {
}

func (response DeleteLabel204Response) VisitDeleteLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(204)

	return nil
}

type DeleteLabel400Response struct {
	server.ProblemDetails
}

func (response DeleteLabel400Response) VisitDeleteLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type DeleteLabel401Response struct {
	server.ProblemDetails
}

func (response DeleteLabel401Response) VisitDeleteLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type DeleteLabel404Response struct {
	server.ProblemDetails
}

func (response DeleteLabel404Response) VisitDeleteLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type DeleteLabel422Response struct {
	server.ProblemDetails
}

func (response DeleteLabel422Response) VisitDeleteLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type DeleteLabel429Response struct {
	server.ProblemDetails
}

func (response DeleteLabel429Response) VisitDeleteLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Retry-After", "")           // TODO: Set actual value for Retry-After
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type DeleteLabel500Response struct {
	server.ProblemDetails
}

func (response DeleteLabel500Response) VisitDeleteLabelResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

// Handler method

// DeleteLabel handles the DELETE /labels/{id} endpoint.
func (c *LabelController) DeleteLabel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	request := DeleteLabelRequest{}

	// Extract session ID from context for authenticated operations
	sessionID, ok := ctx.Value(server.SessionIDContextKey).(uuid.UUID)
	if !ok {
		errorResp := DeleteLabel401Response{
			ProblemDetails: server.NewUnauthorizedResponse("session required", r.URL.Path),
		}
		if err := errorResp.VisitDeleteLabelResponse(w); err != nil {
			// Log error - response may have already been partially written
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		errorResp := DeleteLabel400Response{
			ProblemDetails: server.NewBadRequestResponse(fmt.Sprintf("Invalid format for parameter id: %s", err), r.URL.Path),
		}
		if err := errorResp.VisitDeleteLabelResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewDeleteLabelCommand(
		sessionID,  // SessionID for authenticated operations
		request.ID, // ID
	)
	if err := c.deleteLabelHandler.Handle(ctx, cmd); err != nil {
		errorResp := DeleteLabel500Response{
			ProblemDetails: server.NewInternalServerErrorResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitDeleteLabelResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	response := DeleteLabel204Response{}
	if err := response.VisitDeleteLabelResponse(w); err != nil {
		fmt.Fprintf(w, "error writing response: %v", err)
	}
}
