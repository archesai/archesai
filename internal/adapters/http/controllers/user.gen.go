// Code generated by archesai. DO NOT EDIT.

package controllers

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"

	"github.com/archesai/archesai/internal/adapters/http/server"
	commands "github.com/archesai/archesai/internal/application/commands/user"
	queries "github.com/archesai/archesai/internal/application/queries/user"
	"github.com/archesai/archesai/internal/core/entities"
)

// UserController handles HTTP requests for user endpoints.
type UserController struct {
	updateCurrentUserHandler *commands.UpdateCurrentUserCommandHandler
	updateUserHandler        *commands.UpdateUserCommandHandler
	deleteCurrentUserHandler *commands.DeleteCurrentUserCommandHandler
	deleteUserHandler        *commands.DeleteUserCommandHandler
	getCurrentUserHandler    *queries.GetCurrentUserQueryHandler
	getUserHandler           *queries.GetUserQueryHandler
	listUsersHandler         *queries.ListUsersQueryHandler
}

// NewUserController creates a new user controller with injected handlers.
func NewUserController(
	updateCurrentUserHandler *commands.UpdateCurrentUserCommandHandler,
	updateUserHandler *commands.UpdateUserCommandHandler,
	deleteCurrentUserHandler *commands.DeleteCurrentUserCommandHandler,
	deleteUserHandler *commands.DeleteUserCommandHandler,
	getCurrentUserHandler *queries.GetCurrentUserQueryHandler,
	getUserHandler *queries.GetUserQueryHandler,
	listUsersHandler *queries.ListUsersQueryHandler,
) *UserController {
	return &UserController{
		updateCurrentUserHandler: updateCurrentUserHandler,
		updateUserHandler:        updateUserHandler,
		deleteCurrentUserHandler: deleteCurrentUserHandler,
		deleteUserHandler:        deleteUserHandler,
		getCurrentUserHandler:    getCurrentUserHandler,
		getUserHandler:           getUserHandler,
		listUsersHandler:         listUsersHandler,
	}
}

// RegisterUserRoutes registers all HTTP routes for the user domain.
func RegisterUserRoutes(router server.EchoRouter, controller *UserController) {
	router.GET("/users/me", controller.GetCurrentUser)
	router.GET("/users/:id", controller.GetUser)
	router.GET("/users", controller.ListUsers)
	router.PATCH("/users/me", controller.UpdateCurrentUser)
	router.PATCH("/users/:id", controller.UpdateUser)
	router.DELETE("/users/me", controller.DeleteCurrentUser)
	router.DELETE("/users/:id", controller.DeleteUser)
}

// ============================================================================
// GetCurrentUser - GET /users/me
// ============================================================================

// Request types

type GetCurrentUserRequest struct {
}

// Response types

type GetCurrentUserResponse interface {
	VisitGetCurrentUserResponse(w http.ResponseWriter) error
}

type GetCurrentUser200Response struct {
	Data entities.User `json:"data"`
}

func (response GetCurrentUser200Response) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentUser401Response struct {
	server.UnauthorizedResponse
}

func (response GetCurrentUser401Response) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// GetCurrentUser handles the GET /users/me endpoint.
func (c *UserController) GetCurrentUser(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})
	ctx.Set(server.SessionCookieScopes, []string{})

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewGetCurrentUserQuery(
		sessionID, // SessionID for authenticated operations
	)

	result, err := c.getCurrentUserHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// GetUser - GET /users/{id}
// ============================================================================

// Request types

type GetUserRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type GetUserResponse interface {
	VisitGetUserResponse(w http.ResponseWriter) error
}

type GetUser200Response struct {
	Data entities.User `json:"data"`
}

func (response GetUser200Response) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUser404Response struct {
	server.NotFoundResponse
}

func (response GetUser404Response) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// GetUser handles the GET /users/{id} endpoint.
func (c *UserController) GetUser(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := GetUserRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewGetUserQuery(
		sessionID,  // SessionID for authenticated operations
		request.ID, // ID
	)

	result, err := c.getUserHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// ListUsers - GET /users
// ============================================================================

// Request types
// ListUsersParams defines parameters for ListUsers
type ListUsersParams struct {
	Filter map[string]any   `json:"filter,omitempty"`
	Page   map[string]any   `json:"page,omitempty"`
	Sort   []map[string]any `json:"sort,omitempty"`
}

type ListUsersRequest struct {
	Params ListUsersParams
}

// Response types

type ListUsersResponse interface {
	VisitListUsersResponse(w http.ResponseWriter) error
}

// ListUsers200ResponseMeta defines the meta structure
type ListUsers200ResponseMeta struct {
	Total float64 `json:"total"`
}

type ListUsers200Response struct {
	Data []entities.User          `json:"data"`
	Meta ListUsers200ResponseMeta `json:"meta"`
}

func (response ListUsers200Response) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListUsers400Response struct {
	server.BadRequestResponse
}

func (response ListUsers400Response) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type ListUsers401Response struct {
	server.UnauthorizedResponse
}

func (response ListUsers401Response) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// ListUsers handles the GET /users endpoint.
func (c *UserController) ListUsers(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := ListUsersRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Query parameters
	var params ListUsersParams
	// Optional query parameter "Filter"
	if err := runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}
	// Optional query parameter "Page"
	if err := runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}
	// Optional query parameter "Sort"
	if err := runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}
	request.Params = params

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewListUsersQuery(
		sessionID, // SessionID for authenticated operations
	)
	// TODO: Apply filters, pagination, sorting from request.Params

	results, total, err := c.listUsersHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": results,
		"meta": map[string]interface{}{
			"total": total,
		},
	})
}

// ============================================================================
// UpdateCurrentUser - PATCH /users/me
// ============================================================================

// Request types
// UpdateCurrentUserRequestBody defines the request body for UpdateCurrentUser
type UpdateCurrentUserRequestBody struct {
	Image *string `json:"image,omitempty"`
	Name  *string `json:"name,omitempty"`
}

type UpdateCurrentUserRequest struct {
	Body *UpdateCurrentUserRequestBody
}

// Response types

type UpdateCurrentUserResponse interface {
	VisitUpdateCurrentUserResponse(w http.ResponseWriter) error
}

type UpdateCurrentUser200Response struct {
	Data entities.User `json:"data"`
}

func (response UpdateCurrentUser200Response) VisitUpdateCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCurrentUser400Response struct {
	server.BadRequestResponse
}

func (response UpdateCurrentUser400Response) VisitUpdateCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type UpdateCurrentUser401Response struct {
	server.UnauthorizedResponse
}

func (response UpdateCurrentUser401Response) VisitUpdateCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// UpdateCurrentUser handles the PATCH /users/me endpoint.
func (c *UserController) UpdateCurrentUser(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := UpdateCurrentUserRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Request body
	request.Body = &UpdateCurrentUserRequestBody{}
	if err := ctx.Bind(request.Body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})
	ctx.Set(server.SessionCookieScopes, []string{})

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewUpdateCurrentUserCommand(
		sessionID,          // SessionID for authenticated operations
		request.Body.Image, // Image
		request.Body.Name,  // Name
	)
	result, err := c.updateCurrentUserHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}
	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// UpdateUser - PATCH /users/{id}
// ============================================================================

// Request types
// UpdateUserRequestBody defines the request body for UpdateUser
type UpdateUserRequestBody struct {
	Email *string `json:"email,omitempty"`
	Image *string `json:"image,omitempty"`
}

type UpdateUserRequest struct {
	ID   uuid.UUID `json:"id"`
	Body *UpdateUserRequestBody
}

// Response types

type UpdateUserResponse interface {
	VisitUpdateUserResponse(w http.ResponseWriter) error
}

type UpdateUser200Response struct {
	Data entities.User `json:"data"`
}

func (response UpdateUser200Response) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser404Response struct {
	server.NotFoundResponse
}

func (response UpdateUser404Response) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// UpdateUser handles the PATCH /users/{id} endpoint.
func (c *UserController) UpdateUser(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := UpdateUserRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Request body
	request.Body = &UpdateUserRequestBody{}
	if err := ctx.Bind(request.Body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewUpdateUserCommand(
		sessionID,          // SessionID for authenticated operations
		request.ID,         // ID
		request.Body.Email, // Email
		request.Body.Image, // Image
	)
	result, err := c.updateUserHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}
	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// DeleteCurrentUser - DELETE /users/me
// ============================================================================

// Request types
// DeleteCurrentUserRequestBody defines the request body for DeleteCurrentUser
type DeleteCurrentUserRequestBody struct {
	Confirmation string `json:"confirmation"`
}

type DeleteCurrentUserRequest struct {
	Body *DeleteCurrentUserRequestBody
}

// Response types

type DeleteCurrentUserResponse interface {
	VisitDeleteCurrentUserResponse(w http.ResponseWriter) error
}

type DeleteCurrentUser200Response struct {
	Message string `json:"message"`
}

func (response DeleteCurrentUser200Response) VisitDeleteCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCurrentUser400Response struct {
	server.BadRequestResponse
}

func (response DeleteCurrentUser400Response) VisitDeleteCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type DeleteCurrentUser401Response struct {
	server.UnauthorizedResponse
}

func (response DeleteCurrentUser401Response) VisitDeleteCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// DeleteCurrentUser handles the DELETE /users/me endpoint.
func (c *UserController) DeleteCurrentUser(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := DeleteCurrentUserRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Request body
	request.Body = &DeleteCurrentUserRequestBody{}
	if err := ctx.Bind(request.Body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})
	ctx.Set(server.SessionCookieScopes, []string{})

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewDeleteCurrentUserCommand(
		sessionID,                 // SessionID for authenticated operations
		request.Body.Confirmation, // Confirmation
	)
	if err := c.deleteCurrentUserHandler.Handle(reqCtx, cmd); err != nil {
		return err
	}
	return ctx.NoContent(http.StatusNoContent)
}

// ============================================================================
// DeleteUser - DELETE /users/{id}
// ============================================================================

// Request types

type DeleteUserRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type DeleteUserResponse interface {
	VisitDeleteUserResponse(w http.ResponseWriter) error
}

type DeleteUser200Response struct {
	Data entities.User `json:"data"`
}

func (response DeleteUser200Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUser404Response struct {
	server.NotFoundResponse
}

func (response DeleteUser404Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// DeleteUser handles the DELETE /users/{id} endpoint.
func (c *UserController) DeleteUser(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := DeleteUserRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewDeleteUserCommand(
		sessionID,  // SessionID for authenticated operations
		request.ID, // ID
	)
	if err := c.deleteUserHandler.Handle(reqCtx, cmd); err != nil {
		return err
	}
	return ctx.NoContent(http.StatusNoContent)
}
