// Code generated by archesai. DO NOT EDIT.

package controllers

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/google/uuid"
	"github.com/oapi-codegen/runtime"

	"github.com/archesai/archesai/internal/adapters/http/server"
	commands "github.com/archesai/archesai/internal/application/commands/user"
	queries "github.com/archesai/archesai/internal/application/queries/user"
	"github.com/archesai/archesai/internal/core/entities"
	"github.com/archesai/archesai/internal/core/valueobjects"
)

// UserController handles HTTP requests for user endpoints.
type UserController struct {
	updateCurrentUserHandler *commands.UpdateCurrentUserCommandHandler
	updateUserHandler        *commands.UpdateUserCommandHandler
	deleteCurrentUserHandler *commands.DeleteCurrentUserCommandHandler
	deleteUserHandler        *commands.DeleteUserCommandHandler
	getCurrentUserHandler    *queries.GetCurrentUserQueryHandler
	getUserHandler           *queries.GetUserQueryHandler
	listUsersHandler         *queries.ListUsersQueryHandler
}

// NewUserController creates a new user controller with injected handlers.
func NewUserController(
	updateCurrentUserHandler *commands.UpdateCurrentUserCommandHandler,
	updateUserHandler *commands.UpdateUserCommandHandler,
	deleteCurrentUserHandler *commands.DeleteCurrentUserCommandHandler,
	deleteUserHandler *commands.DeleteUserCommandHandler,
	getCurrentUserHandler *queries.GetCurrentUserQueryHandler,
	getUserHandler *queries.GetUserQueryHandler,
	listUsersHandler *queries.ListUsersQueryHandler,
) *UserController {
	return &UserController{
		updateCurrentUserHandler: updateCurrentUserHandler,
		updateUserHandler:        updateUserHandler,
		deleteCurrentUserHandler: deleteCurrentUserHandler,
		deleteUserHandler:        deleteUserHandler,
		getCurrentUserHandler:    getCurrentUserHandler,
		getUserHandler:           getUserHandler,
		listUsersHandler:         listUsersHandler,
	}
}

// RegisterUserRoutes registers all HTTP routes for the user domain.
func RegisterUserRoutes(mux *http.ServeMux, controller *UserController) {
	mux.HandleFunc("GET /me", controller.GetCurrentUser)
	mux.HandleFunc("GET /users/{id}", controller.GetUser)
	mux.HandleFunc("GET /users", controller.ListUsers)
	mux.HandleFunc("PATCH /me", controller.UpdateCurrentUser)
	mux.HandleFunc("PATCH /users/{id}", controller.UpdateUser)
	mux.HandleFunc("DELETE /me", controller.DeleteCurrentUser)
	mux.HandleFunc("DELETE /users/{id}", controller.DeleteUser)
}

// ============================================================================
// GetCurrentUser - GET /me
// ============================================================================

// Request types

type GetCurrentUserRequest struct {
}

// Response types

type GetCurrentUserResponse interface {
	VisitGetCurrentUserResponse(w http.ResponseWriter) error
}

type GetCurrentUser200Response struct {
	Data entities.User `json:"data"`
}

func (response GetCurrentUser200Response) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentUser401Response struct {
	server.ProblemDetails
}

func (response GetCurrentUser401Response) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetCurrentUser422Response struct {
	server.ProblemDetails
}

func (response GetCurrentUser422Response) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetCurrentUser429Response struct {
	server.ProblemDetails
}

func (response GetCurrentUser429Response) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Retry-After", "")           // TODO: Set actual value for Retry-After
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetCurrentUser500Response struct {
	server.ProblemDetails
}

func (response GetCurrentUser500Response) VisitGetCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

// Handler method

// GetCurrentUser handles the GET /me endpoint.
func (c *UserController) GetCurrentUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// Extract session ID from context for authenticated operations
	sessionID, ok := ctx.Value(server.SessionIDContextKey).(uuid.UUID)
	if !ok {
		errorResp := GetCurrentUser401Response{
			ProblemDetails: server.NewUnauthorizedResponse("session required", r.URL.Path),
		}
		if err := errorResp.VisitGetCurrentUserResponse(w); err != nil {
			// Log error - response may have already been partially written
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewGetCurrentUserQuery(
		sessionID, // SessionID for authenticated operations
	)

	result, err := c.getCurrentUserHandler.Handle(ctx, query)
	if err != nil {
		errorResp := GetCurrentUser500Response{
			ProblemDetails: server.NewInternalServerErrorResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitGetCurrentUserResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Custom handler - result type varies, response structure not standardized
	// TODO: Implement proper type assertion and response mapping
	_ = result
	response := GetCurrentUser200Response{}
	if err := response.VisitGetCurrentUserResponse(w); err != nil {
		fmt.Fprintf(w, "error writing response: %v", err)
	}
}

// ============================================================================
// GetUser - GET /users/{id}
// ============================================================================

// Request types

type GetUserRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type GetUserResponse interface {
	VisitGetUserResponse(w http.ResponseWriter) error
}

type GetUser200Response struct {
	Data entities.User `json:"data"`
}

func (response GetUser200Response) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUser400Response struct {
	server.ProblemDetails
}

func (response GetUser400Response) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetUser401Response struct {
	server.ProblemDetails
}

func (response GetUser401Response) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetUser404Response struct {
	server.ProblemDetails
}

func (response GetUser404Response) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetUser422Response struct {
	server.ProblemDetails
}

func (response GetUser422Response) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetUser429Response struct {
	server.ProblemDetails
}

func (response GetUser429Response) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Retry-After", "")           // TODO: Set actual value for Retry-After
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetUser500Response struct {
	server.ProblemDetails
}

func (response GetUser500Response) VisitGetUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

// Handler method

// GetUser handles the GET /users/{id} endpoint.
func (c *UserController) GetUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	request := GetUserRequest{}

	// Extract session ID from context for authenticated operations
	sessionID, ok := ctx.Value(server.SessionIDContextKey).(uuid.UUID)
	if !ok {
		errorResp := GetUser401Response{
			ProblemDetails: server.NewUnauthorizedResponse("session required", r.URL.Path),
		}
		if err := errorResp.VisitGetUserResponse(w); err != nil {
			// Log error - response may have already been partially written
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		errorResp := GetUser400Response{
			ProblemDetails: server.NewBadRequestResponse(fmt.Sprintf("Invalid format for parameter id: %s", err), r.URL.Path),
		}
		if err := errorResp.VisitGetUserResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewGetUserQuery(
		sessionID,  // SessionID for authenticated operations
		request.ID, // ID
	)

	result, err := c.getUserHandler.Handle(ctx, query)
	if err != nil {
		errorResp := GetUser500Response{
			ProblemDetails: server.NewInternalServerErrorResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitGetUserResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	response := GetUser200Response{Data: *result}
	if err := response.VisitGetUserResponse(w); err != nil {
		fmt.Fprintf(w, "error writing response: %v", err)
	}
}

// ============================================================================
// ListUsers - GET /users
// ============================================================================

// Request types
// ListUsersParams defines parameters for ListUsers
type ListUsersParams struct {
	Filter map[string]any   `json:"filter,omitempty"`
	Page   map[string]any   `json:"page,omitempty"`
	Sort   []map[string]any `json:"sort,omitempty"`
}

type ListUsersRequest struct {
	Params ListUsersParams
}

// Response types

type ListUsersResponse interface {
	VisitListUsersResponse(w http.ResponseWriter) error
}

type ListUsers200Response struct {
	Data []entities.User             `json:"data"`
	Meta valueobjects.PaginationMeta `json:"meta"`
}

func (response ListUsers200Response) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListUsers400Response struct {
	server.ProblemDetails
}

func (response ListUsers400Response) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type ListUsers401Response struct {
	server.ProblemDetails
}

func (response ListUsers401Response) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type ListUsers422Response struct {
	server.ProblemDetails
}

func (response ListUsers422Response) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type ListUsers429Response struct {
	server.ProblemDetails
}

func (response ListUsers429Response) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Retry-After", "")           // TODO: Set actual value for Retry-After
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type ListUsers500Response struct {
	server.ProblemDetails
}

func (response ListUsers500Response) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

// Handler method

// ListUsers handles the GET /users endpoint.
func (c *UserController) ListUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	request := ListUsersRequest{}

	// Extract session ID from context for authenticated operations
	sessionID, ok := ctx.Value(server.SessionIDContextKey).(uuid.UUID)
	if !ok {
		errorResp := ListUsers401Response{
			ProblemDetails: server.NewUnauthorizedResponse("session required", r.URL.Path),
		}
		if err := errorResp.VisitListUsersResponse(w); err != nil {
			// Log error - response may have already been partially written
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Query parameters
	var params ListUsersParams

	// Optional query parameter "filter"
	if err := runtime.BindQueryParameter("deepObject", true, false, "filter", r.URL.Query(), &params.Filter); err != nil {
		errorResp := ListUsers400Response{
			ProblemDetails: server.NewBadRequestResponse(fmt.Sprintf("Invalid format for parameter filter: %s", err), r.URL.Path),
		}
		if err := errorResp.VisitListUsersResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Optional query parameter "page"
	if err := runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page); err != nil {
		errorResp := ListUsers400Response{
			ProblemDetails: server.NewBadRequestResponse(fmt.Sprintf("Invalid format for parameter page: %s", err), r.URL.Path),
		}
		if err := errorResp.VisitListUsersResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Optional query parameter "sort"
	if err := runtime.BindQueryParameter("form", true, false, "sort", r.URL.Query(), &params.Sort); err != nil {
		errorResp := ListUsers400Response{
			ProblemDetails: server.NewBadRequestResponse(fmt.Sprintf("Invalid format for parameter sort: %s", err), r.URL.Path),
		}
		if err := errorResp.VisitListUsersResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}
	request.Params = params

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewListUsersQuery(
		sessionID, // SessionID for authenticated operations
	)
	// TODO: Apply filters, pagination, sorting from request.Params

	results, total, err := c.listUsersHandler.Handle(ctx, query)
	if err != nil {
		errorResp := ListUsers500Response{
			ProblemDetails: server.NewInternalServerErrorResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitListUsersResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Convert pointer slice to value slice for response
	data := make([]entities.User, len(results))
	for i, item := range results {
		if item != nil {
			data[i] = *item
		}
	}

	response := ListUsers200Response{
		Data: data,
		Meta: valueobjects.PaginationMeta{Total: int32(total)},
	}
	if err := response.VisitListUsersResponse(w); err != nil {
		fmt.Fprintf(w, "error writing response: %v", err)
	}
}

// ============================================================================
// UpdateCurrentUser - PATCH /me
// ============================================================================

// Request types
// UpdateCurrentUserRequestBody defines the request body for UpdateCurrentUser
type UpdateCurrentUserRequestBody struct {
	Image *string `json:"image,omitempty"`
	Name  *string `json:"name,omitempty"`
}

type UpdateCurrentUserRequest struct {
	Body *UpdateCurrentUserRequestBody
}

// Response types

type UpdateCurrentUserResponse interface {
	VisitUpdateCurrentUserResponse(w http.ResponseWriter) error
}

type UpdateCurrentUser200Response struct {
	Data entities.User `json:"data"`
}

func (response UpdateCurrentUser200Response) VisitUpdateCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateCurrentUser400Response struct {
	server.ProblemDetails
}

func (response UpdateCurrentUser400Response) VisitUpdateCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type UpdateCurrentUser401Response struct {
	server.ProblemDetails
}

func (response UpdateCurrentUser401Response) VisitUpdateCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type UpdateCurrentUser422Response struct {
	server.ProblemDetails
}

func (response UpdateCurrentUser422Response) VisitUpdateCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type UpdateCurrentUser429Response struct {
	server.ProblemDetails
}

func (response UpdateCurrentUser429Response) VisitUpdateCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Retry-After", "")           // TODO: Set actual value for Retry-After
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type UpdateCurrentUser500Response struct {
	server.ProblemDetails
}

func (response UpdateCurrentUser500Response) VisitUpdateCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

// Handler method

// UpdateCurrentUser handles the PATCH /me endpoint.
func (c *UserController) UpdateCurrentUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	request := UpdateCurrentUserRequest{}

	// Extract session ID from context for authenticated operations
	sessionID, ok := ctx.Value(server.SessionIDContextKey).(uuid.UUID)
	if !ok {
		errorResp := UpdateCurrentUser401Response{
			ProblemDetails: server.NewUnauthorizedResponse("session required", r.URL.Path),
		}
		if err := errorResp.VisitUpdateCurrentUserResponse(w); err != nil {
			// Log error - response may have already been partially written
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Request body
	request.Body = &UpdateCurrentUserRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(request.Body); err != nil {
		errorResp := UpdateCurrentUser400Response{
			ProblemDetails: server.NewBadRequestResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitUpdateCurrentUserResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewUpdateCurrentUserCommand(
		sessionID,          // SessionID for authenticated operations
		request.Body.Image, // Image
		request.Body.Name,  // Name
	)
	result, err := c.updateCurrentUserHandler.Handle(ctx, cmd)
	if err != nil {
		errorResp := UpdateCurrentUser500Response{
			ProblemDetails: server.NewInternalServerErrorResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitUpdateCurrentUserResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Custom handler - result type varies, response structure not standardized
	// TODO: Implement proper type assertion and response mapping
	_ = result
	response := UpdateCurrentUser200Response{}
	if err := response.VisitUpdateCurrentUserResponse(w); err != nil {
		fmt.Fprintf(w, "error writing response: %v", err)
	}
}

// ============================================================================
// UpdateUser - PATCH /users/{id}
// ============================================================================

// Request types
// UpdateUserRequestBody defines the request body for UpdateUser
type UpdateUserRequestBody struct {
	Email *string `json:"email,omitempty"`
	Image *string `json:"image,omitempty"`
}

type UpdateUserRequest struct {
	ID   uuid.UUID `json:"id"`
	Body *UpdateUserRequestBody
}

// Response types

type UpdateUserResponse interface {
	VisitUpdateUserResponse(w http.ResponseWriter) error
}

type UpdateUser200Response struct {
	Data entities.User `json:"data"`
}

func (response UpdateUser200Response) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUser400Response struct {
	server.ProblemDetails
}

func (response UpdateUser400Response) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type UpdateUser401Response struct {
	server.ProblemDetails
}

func (response UpdateUser401Response) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type UpdateUser404Response struct {
	server.ProblemDetails
}

func (response UpdateUser404Response) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type UpdateUser422Response struct {
	server.ProblemDetails
}

func (response UpdateUser422Response) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type UpdateUser429Response struct {
	server.ProblemDetails
}

func (response UpdateUser429Response) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Retry-After", "")           // TODO: Set actual value for Retry-After
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type UpdateUser500Response struct {
	server.ProblemDetails
}

func (response UpdateUser500Response) VisitUpdateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

// Handler method

// UpdateUser handles the PATCH /users/{id} endpoint.
func (c *UserController) UpdateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	request := UpdateUserRequest{}

	// Extract session ID from context for authenticated operations
	sessionID, ok := ctx.Value(server.SessionIDContextKey).(uuid.UUID)
	if !ok {
		errorResp := UpdateUser401Response{
			ProblemDetails: server.NewUnauthorizedResponse("session required", r.URL.Path),
		}
		if err := errorResp.VisitUpdateUserResponse(w); err != nil {
			// Log error - response may have already been partially written
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		errorResp := UpdateUser400Response{
			ProblemDetails: server.NewBadRequestResponse(fmt.Sprintf("Invalid format for parameter id: %s", err), r.URL.Path),
		}
		if err := errorResp.VisitUpdateUserResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}
	request.ID = id

	// Request body
	request.Body = &UpdateUserRequestBody{}
	if err := json.NewDecoder(r.Body).Decode(request.Body); err != nil {
		errorResp := UpdateUser400Response{
			ProblemDetails: server.NewBadRequestResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitUpdateUserResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewUpdateUserCommand(
		sessionID,          // SessionID for authenticated operations
		request.ID,         // ID
		request.Body.Email, // Email
		request.Body.Image, // Image
	)
	result, err := c.updateUserHandler.Handle(ctx, cmd)
	if err != nil {
		errorResp := UpdateUser500Response{
			ProblemDetails: server.NewInternalServerErrorResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitUpdateUserResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	response := UpdateUser200Response{Data: *result}
	if err := response.VisitUpdateUserResponse(w); err != nil {
		fmt.Fprintf(w, "error writing response: %v", err)
	}
}

// ============================================================================
// DeleteCurrentUser - DELETE /me
// ============================================================================

// Request types

type DeleteCurrentUserRequest struct {
	XConfirm string `json:"xconfirm"`
}

// Response types

type DeleteCurrentUserResponse interface {
	VisitDeleteCurrentUserResponse(w http.ResponseWriter) error
}

type DeleteCurrentUser204Response struct {
}

func (response DeleteCurrentUser204Response) VisitDeleteCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(204)

	return nil
}

type DeleteCurrentUser400Response struct {
	server.ProblemDetails
}

func (response DeleteCurrentUser400Response) VisitDeleteCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type DeleteCurrentUser401Response struct {
	server.ProblemDetails
}

func (response DeleteCurrentUser401Response) VisitDeleteCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type DeleteCurrentUser422Response struct {
	server.ProblemDetails
}

func (response DeleteCurrentUser422Response) VisitDeleteCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type DeleteCurrentUser429Response struct {
	server.ProblemDetails
}

func (response DeleteCurrentUser429Response) VisitDeleteCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Retry-After", "")           // TODO: Set actual value for Retry-After
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type DeleteCurrentUser500Response struct {
	server.ProblemDetails
}

func (response DeleteCurrentUser500Response) VisitDeleteCurrentUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

// Handler method

// DeleteCurrentUser handles the DELETE /me endpoint.
func (c *UserController) DeleteCurrentUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	request := DeleteCurrentUserRequest{}

	// Extract session ID from context for authenticated operations
	sessionID, ok := ctx.Value(server.SessionIDContextKey).(uuid.UUID)
	if !ok {
		errorResp := DeleteCurrentUser401Response{
			ProblemDetails: server.NewUnauthorizedResponse("session required", r.URL.Path),
		}
		if err := errorResp.VisitDeleteCurrentUserResponse(w); err != nil {
			// Log error - response may have already been partially written
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Header parameter "XConfirm"
	xconfirm := r.Header.Get("XConfirm")
	if xconfirm == "" {
		errorResp := DeleteCurrentUser400Response{
			ProblemDetails: server.NewBadRequestResponse("Missing required header: XConfirm", r.URL.Path),
		}
		if err := errorResp.VisitDeleteCurrentUserResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}
	request.XConfirm = xconfirm

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewDeleteCurrentUserCommand(
		sessionID,        // SessionID for authenticated operations
		request.XConfirm, // XConfirm
	)
	if err := c.deleteCurrentUserHandler.Handle(ctx, cmd); err != nil {
		errorResp := DeleteCurrentUser500Response{
			ProblemDetails: server.NewInternalServerErrorResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitDeleteCurrentUserResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	response := DeleteCurrentUser204Response{}
	if err := response.VisitDeleteCurrentUserResponse(w); err != nil {
		fmt.Fprintf(w, "error writing response: %v", err)
	}
}

// ============================================================================
// DeleteUser - DELETE /users/{id}
// ============================================================================

// Request types

type DeleteUserRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type DeleteUserResponse interface {
	VisitDeleteUserResponse(w http.ResponseWriter) error
}

type DeleteUser204Response struct {
}

func (response DeleteUser204Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(204)

	return nil
}

type DeleteUser400Response struct {
	server.ProblemDetails
}

func (response DeleteUser400Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type DeleteUser401Response struct {
	server.ProblemDetails
}

func (response DeleteUser401Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type DeleteUser404Response struct {
	server.ProblemDetails
}

func (response DeleteUser404Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type DeleteUser422Response struct {
	server.ProblemDetails
}

func (response DeleteUser422Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type DeleteUser429Response struct {
	server.ProblemDetails
}

func (response DeleteUser429Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Retry-After", "")           // TODO: Set actual value for Retry-After
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type DeleteUser500Response struct {
	server.ProblemDetails
}

func (response DeleteUser500Response) VisitDeleteUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

// Handler method

// DeleteUser handles the DELETE /users/{id} endpoint.
func (c *UserController) DeleteUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	request := DeleteUserRequest{}

	// Extract session ID from context for authenticated operations
	sessionID, ok := ctx.Value(server.SessionIDContextKey).(uuid.UUID)
	if !ok {
		errorResp := DeleteUser401Response{
			ProblemDetails: server.NewUnauthorizedResponse("session required", r.URL.Path),
		}
		if err := errorResp.VisitDeleteUserResponse(w); err != nil {
			// Log error - response may have already been partially written
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		errorResp := DeleteUser400Response{
			ProblemDetails: server.NewBadRequestResponse(fmt.Sprintf("Invalid format for parameter id: %s", err), r.URL.Path),
		}
		if err := errorResp.VisitDeleteUserResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewDeleteUserCommand(
		sessionID,  // SessionID for authenticated operations
		request.ID, // ID
	)
	if err := c.deleteUserHandler.Handle(ctx, cmd); err != nil {
		errorResp := DeleteUser500Response{
			ProblemDetails: server.NewInternalServerErrorResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitDeleteUserResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	response := DeleteUser204Response{}
	if err := response.VisitDeleteUserResponse(w); err != nil {
		fmt.Fprintf(w, "error writing response: %v", err)
	}
}
