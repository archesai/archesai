// Code generated by archesai codegen. DO NOT EDIT.
package controllers

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"

	"github.com/archesai/archesai/internal/adapters/http/server"
	commands "github.com/archesai/archesai/internal/application/commands/tools"
	queries "github.com/archesai/archesai/internal/application/queries/tools"
)

// ToolsController handles HTTP requests for tools endpoints.
type ToolsController struct {
	// Command handlers
	createHandler *commands.CreateToolCommandHandler
	updateHandler *commands.UpdateToolCommandHandler
	deleteHandler *commands.DeleteToolCommandHandler

	// Query handlers
	getHandler  *queries.GetToolQueryHandler
	listHandler *queries.ListToolsQueryHandler
}

// NewToolsController creates a new tools controller with injected handlers.
func NewToolsController(
	createHandler *commands.CreateToolCommandHandler,
	updateHandler *commands.UpdateToolCommandHandler,
	deleteHandler *commands.DeleteToolCommandHandler,
	getHandler *queries.GetToolQueryHandler,
	listHandler *queries.ListToolsQueryHandler,
) *ToolsController {
	return &ToolsController{
		createHandler: createHandler,
		updateHandler: updateHandler,
		deleteHandler: deleteHandler,
		getHandler:    getHandler,
		listHandler:   listHandler,
	}
}

// RegisterToolsRoutes registers all HTTP routes for the tools domain.
func RegisterToolsRoutes(router server.EchoRouter, controller *ToolsController) {
	router.POST("/tools", controller.CreateTool)
	router.GET("/tools", controller.ListTools)
	router.DELETE("/tools/:id", controller.DeleteTool)
	router.GET("/tools/:id", controller.GetTool)
	router.PATCH("/tools/:id", controller.UpdateTool)
}

// ============================================================================
// CreateTool - POST /tools
// ============================================================================

// Request types

type CreateToolRequest struct {
}

// Response types

type CreateToolResponse interface {
	VisitCreateToolResponse(w http.ResponseWriter) error
}

type CreateTool201JSONResponse struct {
}

func (response CreateTool201JSONResponse) VisitCreateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateTool400Response struct {
	server.BadRequestResponse
}

func (response CreateTool400Response) VisitCreateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type CreateTool401Response struct {
	server.UnauthorizedResponse
}

func (response CreateTool401Response) VisitCreateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// CreateTool handles the POST /tools endpoint.
func (c *ToolsController) CreateTool(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Determine which handler to call based on operation
	// Create command from request
	cmd := commands.NewCreateToolCommand(
	// TODO: Map request fields to command
	)

	result, err := c.createHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusCreated, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// ListTools - GET /tools
// ============================================================================

// Request types

type ListToolsRequest struct {
	Params dto.ListToolsParams
}

// Response types

type ListToolsResponse interface {
	VisitListToolsResponse(w http.ResponseWriter) error
}

type ListTools200JSONResponse struct {
}

func (response ListTools200JSONResponse) VisitListToolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTools400Response struct {
	server.BadRequestResponse
}

func (response ListTools400Response) VisitListToolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type ListTools401Response struct {
	server.UnauthorizedResponse
}

func (response ListTools401Response) VisitListToolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// ListTools handles the GET /tools endpoint.
func (c *ToolsController) ListTools(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Query parameters
	var params dto.ListToolsParams
	// Optional query parameter "filter"
	if err := runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}
	// Optional query parameter "page"
	if err := runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}
	// Optional query parameter "sort"
	if err := runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}
	request.Params = params

	// Determine which handler to call based on operation
	// Create list query from request
	query := queries.NewListToolsQuery()
	// TODO: Apply filters, pagination, sorting from request.Params

	results, total, err := c.listHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": results,
		"meta": map[string]interface{}{
			"total": total,
		},
	})
}

// ============================================================================
// DeleteTool - DELETE /tools/{id}
// ============================================================================

// Request types

type DeleteToolRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type DeleteToolResponse interface {
	VisitDeleteToolResponse(w http.ResponseWriter) error
}

type DeleteTool200JSONResponse struct {
}

func (response DeleteTool200JSONResponse) VisitDeleteToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTool404Response struct {
	server.NotFoundResponse
}

func (response DeleteTool404Response) VisitDeleteToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// DeleteTool handles the DELETE /tools/{id} endpoint.
func (c *ToolsController) DeleteTool(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Create delete command from request
	cmd := commands.NewDeleteToolCommand(
		request.ID,
	)

	err := c.deleteHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.NoContent(http.StatusNoContent)
}

// ============================================================================
// GetTool - GET /tools/{id}
// ============================================================================

// Request types

type GetToolRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type GetToolResponse interface {
	VisitGetToolResponse(w http.ResponseWriter) error
}

type GetTool200JSONResponse struct {
}

func (response GetTool200JSONResponse) VisitGetToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTool404Response struct {
	server.NotFoundResponse
}

func (response GetTool404Response) VisitGetToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// GetTool handles the GET /tools/{id} endpoint.
func (c *ToolsController) GetTool(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Create get query from request
	query := queries.NewGetToolQuery(
		request.ID,
	)

	result, err := c.getHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// UpdateTool - PATCH /tools/{id}
// ============================================================================

// Request types

type UpdateToolRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type UpdateToolResponse interface {
	VisitUpdateToolResponse(w http.ResponseWriter) error
}

type UpdateTool200JSONResponse struct {
}

func (response UpdateTool200JSONResponse) VisitUpdateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTool404Response struct {
	server.NotFoundResponse
}

func (response UpdateTool404Response) VisitUpdateToolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// UpdateTool handles the PATCH /tools/{id} endpoint.
func (c *ToolsController) UpdateTool(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Create update command from request
	cmd := commands.NewUpdateToolCommand(
	// TODO: Map request fields to command including ID
	)

	result, err := c.updateHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}
