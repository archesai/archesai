// Code generated by archesai. DO NOT EDIT.

package controllers

import (
	"encoding/json"
	"net/http"

	"github.com/labstack/echo/v4"

	"github.com/archesai/archesai/internal/adapters/http/server"
	queries "github.com/archesai/archesai/internal/application/queries/config"
	"github.com/archesai/archesai/internal/core/valueobjects"
)

// ConfigController handles HTTP requests for config endpoints.
type ConfigController struct {
	getConfigHandler *queries.GetConfigQueryHandler
}

// NewConfigController creates a new config controller with injected handlers.
func NewConfigController(
	getConfigHandler *queries.GetConfigQueryHandler,
) *ConfigController {
	return &ConfigController{
		getConfigHandler: getConfigHandler,
	}
}

// RegisterConfigRoutes registers all HTTP routes for the config domain.
func RegisterConfigRoutes(router server.EchoRouter, controller *ConfigController) {
	router.GET("/config", controller.GetConfig)
}

// ============================================================================
// GetConfig - GET /config
// ============================================================================

// Request types

type GetConfigRequest struct {
}

// Response types

type GetConfigResponse interface {
	VisitGetConfigResponse(w http.ResponseWriter) error
}

type GetConfig200Response struct {
	API          valueobjects.APIConfig          `json:"api,omitempty"`
	Auth         valueobjects.AuthConfig         `json:"auth,omitempty"`
	Billing      valueobjects.BillingConfig      `json:"billing,omitempty"`
	Database     valueobjects.DatabaseConfig     `json:"database,omitempty"`
	Intelligence valueobjects.IntelligenceConfig `json:"intelligence,omitempty"`
	Kubernetes   valueobjects.KubernetesConfig   `json:"kubernetes,omitempty"`
	Logging      valueobjects.LoggingConfig      `json:"logging,omitempty"`
	Platform     valueobjects.PlatformConfig     `json:"platform,omitempty"`
	Redis        valueobjects.RedisConfig        `json:"redis,omitempty"`
	Storage      valueobjects.StorageConfig      `json:"storage,omitempty"`
}

func (response GetConfig200Response) VisitGetConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConfig400Response struct {
	server.BadRequestResponse
}

func (response GetConfig400Response) VisitGetConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type GetConfig401Response struct {
	server.UnauthorizedResponse
}

func (response GetConfig401Response) VisitGetConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

type GetConfig422Response struct {
	server.ProblemDetails
}

func (response GetConfig422Response) VisitGetConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetConfig429Response struct {
	server.ProblemDetails
}

func (response GetConfig429Response) VisitGetConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response)
}

type GetConfig500Response struct {
	server.InternalServerErrorResponse
}

func (response GetConfig500Response) VisitGetConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.InternalServerErrorResponse)
}

// Handler method

// GetConfig handles the GET /config endpoint.
func (c *ConfigController) GetConfig(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewGetConfigQuery()

	result, err := c.getConfigHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}
