// Code generated by archesai codegen. DO NOT EDIT.
package controllers

import (
	"encoding/json"
	"net/http"

	"github.com/labstack/echo/v4"

	"github.com/archesai/archesai/internal/adapters/http/server"
	queries "github.com/archesai/archesai/internal/application/queries/config"
)

// ConfigController handles HTTP requests for config endpoints.
type ConfigController struct {
	// Query handlers
	getHandler *queries.GetConfigQueryHandler
}

// NewConfigController creates a new config controller with injected handlers.
func NewConfigController(
	getHandler *queries.GetConfigQueryHandler,
) *ConfigController {
	return &ConfigController{
		getHandler: getHandler,
	}
}

// RegisterConfigRoutes registers all HTTP routes for the config domain.
func RegisterConfigRoutes(router server.EchoRouter, controller *ConfigController) {
	router.GET("/config", controller.GetConfig)
}

// ============================================================================
// GetConfig - GET /config
// ============================================================================

// Request types

type GetConfigRequest struct {
}

// Response types

type GetConfigResponse interface {
	VisitGetConfigResponse(w http.ResponseWriter) error
}

type GetConfig200JSONResponse struct {
}

func (response GetConfig200JSONResponse) VisitGetConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConfig400Response struct {
	server.BadRequestResponse
}

func (response GetConfig400Response) VisitGetConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

// Handler method

// GetConfig handles the GET /config endpoint.
func (c *ConfigController) GetConfig(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Determine which handler to call based on operation
	// Create get query from request
	query := queries.NewGetConfigQuery()

	result, err := c.getHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}
