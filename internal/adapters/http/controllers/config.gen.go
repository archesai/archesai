// Code generated by archesai. DO NOT EDIT.

package controllers

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/archesai/archesai/internal/adapters/http/server"
	queries "github.com/archesai/archesai/internal/application/queries/config"
	"github.com/archesai/archesai/internal/core/valueobjects"
)

// ConfigController handles HTTP requests for config endpoints.
type ConfigController struct {
	getConfigHandler *queries.GetConfigQueryHandler
}

// NewConfigController creates a new config controller with injected handlers.
func NewConfigController(
	getConfigHandler *queries.GetConfigQueryHandler,
) *ConfigController {
	return &ConfigController{
		getConfigHandler: getConfigHandler,
	}
}

// RegisterConfigRoutes registers all HTTP routes for the config domain.
func RegisterConfigRoutes(mux *http.ServeMux, controller *ConfigController) {
	mux.HandleFunc("GET /config", controller.GetConfig)
}

// ============================================================================
// GetConfig - GET /config
// ============================================================================

// Request types

type GetConfigRequest struct {
}

// Response types

type GetConfigResponse interface {
	VisitGetConfigResponse(w http.ResponseWriter) error
}

type GetConfig200Response struct {
	Data valueobjects.Config `json:"data,omitempty"`
}

func (response GetConfig200Response) VisitGetConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetConfig400Response struct {
	server.ProblemDetails
}

func (response GetConfig400Response) VisitGetConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetConfig401Response struct {
	server.ProblemDetails
}

func (response GetConfig401Response) VisitGetConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetConfig422Response struct {
	server.ProblemDetails
}

func (response GetConfig422Response) VisitGetConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetConfig429Response struct {
	server.ProblemDetails
}

func (response GetConfig429Response) VisitGetConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("Retry-After", "")           // TODO: Set actual value for Retry-After
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

type GetConfig500Response struct {
	server.ProblemDetails
}

func (response GetConfig500Response) VisitGetConfigResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.Header().Set("X-RateLimit-Limit", "")     // TODO: Set actual value for X-RateLimit-Limit
	w.Header().Set("X-RateLimit-Remaining", "") // TODO: Set actual value for X-RateLimit-Remaining
	w.Header().Set("X-RateLimit-Reset", "")     // TODO: Set actual value for X-RateLimit-Reset
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.ProblemDetails)
}

// Handler method

// GetConfig handles the GET /config endpoint.
func (c *ConfigController) GetConfig(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewGetConfigQuery()

	result, err := c.getConfigHandler.Handle(ctx, query)
	if err != nil {
		errorResp := GetConfig500Response{
			ProblemDetails: server.NewInternalServerErrorResponse(err.Error(), r.URL.Path),
		}
		if err := errorResp.VisitGetConfigResponse(w); err != nil {
			fmt.Fprintf(w, "error writing response: %v", err)
		}
		return
	}

	// Custom handler - result type varies, response structure not standardized
	// TODO: Implement proper type assertion and response mapping
	_ = result
	response := GetConfig200Response{}
	if err := response.VisitGetConfigResponse(w); err != nil {
		fmt.Fprintf(w, "error writing response: %v", err)
	}
}
