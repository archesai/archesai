// Code generated by archesai codegen. DO NOT EDIT.
package controllers

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"

	"github.com/archesai/archesai/internal/adapters/http/server"
	commands "github.com/archesai/archesai/internal/application/commands/accounts"
	queries "github.com/archesai/archesai/internal/application/queries/accounts"
)

// AccountsController handles HTTP requests for accounts endpoints.
type AccountsController struct {
	// Command handlers
	createHandler *commands.CreateAccountCommandHandler
	updateHandler *commands.UpdateAccountCommandHandler
	deleteHandler *commands.DeleteAccountCommandHandler
	// Query handlers
	getHandler  *queries.GetAccountQueryHandler
	listHandler *queries.ListAccountsQueryHandler
}

// NewAccountsController creates a new accounts controller with injected handlers.
func NewAccountsController(
	createHandler *commands.CreateAccountCommandHandler,
	updateHandler *commands.UpdateAccountCommandHandler,
	deleteHandler *commands.DeleteAccountCommandHandler,
	getHandler *queries.GetAccountQueryHandler,
	listHandler *queries.ListAccountsQueryHandler,
) *AccountsController {
	return &AccountsController{
		createHandler: createHandler,
		updateHandler: updateHandler,
		deleteHandler: deleteHandler,
		getHandler:    getHandler,
		listHandler:   listHandler,
	}
}

// RegisterAccountsRoutes registers all HTTP routes for the accounts domain.
func RegisterAccountsRoutes(router server.EchoRouter, controller *AccountsController) {
	router.GET("/accounts", controller.ListAccounts)
	router.POST("/accounts", controller.CreateAccount)
	router.GET("/accounts/:id", controller.GetAccount)
	router.PATCH("/accounts/:id", controller.UpdateAccount)
	router.DELETE("/accounts/:id", controller.DeleteAccount)
	router.POST("/accounts/email-verification/verify", controller.ConfirmEmailVerification)
	router.POST("/accounts/email-verification/request", controller.RequestEmailVerification)
	router.POST("/accounts/password-reset/request", controller.RequestPasswordReset)
	router.POST("/accounts/password-reset/verify", controller.ConfirmPasswordReset)
	router.POST("/accounts/email-change/request", controller.RequestEmailChange)
	router.POST("/accounts/email-change/verify", controller.ConfirmEmailChange)
}

// ============================================================================
// ListAccounts - GET /accounts
// ============================================================================

// Request types
// ListAccountsParams defines parameters for ListAccounts
type ListAccountsParams struct {
	Filter *map[string]interface{}   `json:"filter,omitempty"`
	Page   *map[string]interface{}   `json:"page,omitempty"`
	Sort   *[]map[string]interface{} `json:"sort,omitempty"`
}

type ListAccountsRequest struct {
	Params ListAccountsParams
}

// Response types

type ListAccountsResponse interface {
	VisitListAccountsResponse(w http.ResponseWriter) error
}

type ListAccounts200JSONResponse struct {
}

func (response ListAccounts200JSONResponse) VisitListAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListAccounts400Response struct {
	server.BadRequestResponse
}

func (response ListAccounts400Response) VisitListAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type ListAccounts401Response struct {
	server.UnauthorizedResponse
}

func (response ListAccounts401Response) VisitListAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// ListAccounts handles the GET /accounts endpoint.
func (c *AccountsController) ListAccounts(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := ListAccountsRequest{}

	// Query parameters
	var params ListAccountsParams
	// Optional query parameter "filter"
	if err := runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}
	// Optional query parameter "page"
	if err := runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}
	// Optional query parameter "sort"
	if err := runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}
	request.Params = params

	// Determine which handler to call based on operation
	// Create list query from request
	query := queries.NewListAccountsQuery()
	// TODO: Apply filters, pagination, sorting from request.Params

	results, total, err := c.listHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": results,
		"meta": map[string]interface{}{
			"total": total,
		},
	})
}

// ============================================================================
// CreateAccount - POST /accounts
// ============================================================================

// Request types
// CreateAccountRequestBody defines the request body for CreateAccount
type CreateAccountRequestBody struct {
	Email    string `json:"email"`
	Name     string `json:"name"`
	Password string `json:"password"`
}

type CreateAccountRequest struct {
	Body *CreateAccountRequestBody
}

// Response types

type CreateAccountResponse interface {
	VisitCreateAccountResponse(w http.ResponseWriter) error
}

type CreateAccount201JSONResponse struct {
}

func (response CreateAccount201JSONResponse) VisitCreateAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateAccount400Response struct {
	server.BadRequestResponse
}

func (response CreateAccount400Response) VisitCreateAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type CreateAccount409Response struct {
	server.ConflictResponse
}

func (response CreateAccount409Response) VisitCreateAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response.ConflictResponse)
}

// Handler method

// CreateAccount handles the POST /accounts endpoint.
func (c *AccountsController) CreateAccount(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := CreateAccountRequest{}

	// Request body
	var body CreateAccountRequestBody
	if err := ctx.Bind(&body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// Determine which handler to call based on operation
	// Create handler

	// Map request body fields to command parameters
	cmd := commands.NewCreateAccountCommand(
		request.Body.Email,    // Email
		request.Body.Name,     // Name
		request.Body.Password, // Password
	)

	result, err := c.createHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusCreated, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// GetAccount - GET /accounts/{id}
// ============================================================================

// Request types

type GetAccountRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type GetAccountResponse interface {
	VisitGetAccountResponse(w http.ResponseWriter) error
}

type GetAccount200JSONResponse struct {
}

func (response GetAccount200JSONResponse) VisitGetAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAccount404Response struct {
	server.NotFoundResponse
}

func (response GetAccount404Response) VisitGetAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// GetAccount handles the GET /accounts/{id} endpoint.
func (c *AccountsController) GetAccount(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := GetAccountRequest{}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Create get query from request
	query := queries.NewGetAccountQuery(
		request.ID,
	)

	result, err := c.getHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// UpdateAccount - PATCH /accounts/{id}
// ============================================================================

// Request types
// UpdateAccountRequestBody defines the request body for UpdateAccount
type UpdateAccountRequestBody struct {
	Provider          *string `json:"provider,omitempty"`
	ProviderAccountID *string `json:"providerAccountID,omitempty"`
	Type              *string `json:"type,omitempty"`
}

type UpdateAccountRequest struct {
	ID   uuid.UUID `json:"id"`
	Body *UpdateAccountRequestBody
}

// Response types

type UpdateAccountResponse interface {
	VisitUpdateAccountResponse(w http.ResponseWriter) error
}

type UpdateAccount200JSONResponse struct {
}

func (response UpdateAccount200JSONResponse) VisitUpdateAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAccount404Response struct {
	server.NotFoundResponse
}

func (response UpdateAccount404Response) VisitUpdateAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// UpdateAccount handles the PATCH /accounts/{id} endpoint.
func (c *AccountsController) UpdateAccount(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := UpdateAccountRequest{}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Request body
	var body UpdateAccountRequestBody
	if err := ctx.Bind(&body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// Determine which handler to call based on operation
	// Update handler

	// Map path parameters and request body fields to command parameters
	cmd := commands.NewUpdateAccountCommand(
		request.ID,                     // id (entity ID)
		request.Body.Provider,          // Provider
		request.Body.ProviderAccountID, // ProviderAccountID
		request.Body.Type,              // Type
	)

	result, err := c.updateHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// DeleteAccount - DELETE /accounts/{id}
// ============================================================================

// Request types

type DeleteAccountRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type DeleteAccountResponse interface {
	VisitDeleteAccountResponse(w http.ResponseWriter) error
}

type DeleteAccount200JSONResponse struct {
}

func (response DeleteAccount200JSONResponse) VisitDeleteAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAccount404Response struct {
	server.NotFoundResponse
}

func (response DeleteAccount404Response) VisitDeleteAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// DeleteAccount handles the DELETE /accounts/{id} endpoint.
func (c *AccountsController) DeleteAccount(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := DeleteAccountRequest{}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Create delete command from request
	cmd := commands.NewDeleteAccountCommand(
		request.ID,
	)

	err := c.deleteHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.NoContent(http.StatusNoContent)
}

// ============================================================================
// ConfirmEmailVerification - POST /accounts/email-verification/verify
// ============================================================================

// Request types
// ConfirmEmailVerificationRequestBody defines the request body for ConfirmEmailVerification
type ConfirmEmailVerificationRequestBody struct {
	Token string `json:"token"`
}

type ConfirmEmailVerificationRequest struct {
	Body *ConfirmEmailVerificationRequestBody
}

// Response types

type ConfirmEmailVerificationResponse interface {
	VisitConfirmEmailVerificationResponse(w http.ResponseWriter) error
}

type ConfirmEmailVerification201JSONResponse struct {
}

func (response ConfirmEmailVerification201JSONResponse) VisitConfirmEmailVerificationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ConfirmEmailVerification401Response struct {
	server.UnauthorizedResponse
}

func (response ConfirmEmailVerification401Response) VisitConfirmEmailVerificationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

type ConfirmEmailVerification404Response struct {
	server.NotFoundResponse
}

func (response ConfirmEmailVerification404Response) VisitConfirmEmailVerificationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// ConfirmEmailVerification handles the POST /accounts/email-verification/verify endpoint.
func (c *AccountsController) ConfirmEmailVerification(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := ConfirmEmailVerificationRequest{}

	// Request body
	var body ConfirmEmailVerificationRequestBody
	if err := ctx.Bind(&body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// Determine which handler to call based on operation
	// TODO: Handle custom operation ConfirmEmailVerification
	_ = reqCtx // Custom operation not yet implemented
	return echo.NewHTTPError(http.StatusNotImplemented, "Operation not implemented")
}

// ============================================================================
// RequestEmailVerification - POST /accounts/email-verification/request
// ============================================================================

// Request types

type RequestEmailVerificationRequest struct {
}

// Response types

type RequestEmailVerificationResponse interface {
	VisitRequestEmailVerificationResponse(w http.ResponseWriter) error
}

type RequestEmailVerification201JSONResponse struct {
}

func (response RequestEmailVerification201JSONResponse) VisitRequestEmailVerificationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type RequestEmailVerification400Response struct {
	server.BadRequestResponse
}

func (response RequestEmailVerification400Response) VisitRequestEmailVerificationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type RequestEmailVerification401Response struct {
	server.UnauthorizedResponse
}

func (response RequestEmailVerification401Response) VisitRequestEmailVerificationResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// RequestEmailVerification handles the POST /accounts/email-verification/request endpoint.
func (c *AccountsController) RequestEmailVerification(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Determine which handler to call based on operation
	// TODO: Handle custom operation RequestEmailVerification
	_ = reqCtx // Custom operation not yet implemented
	return echo.NewHTTPError(http.StatusNotImplemented, "Operation not implemented")
}

// ============================================================================
// RequestPasswordReset - POST /accounts/password-reset/request
// ============================================================================

// Request types
// RequestPasswordResetRequestBody defines the request body for RequestPasswordReset
type RequestPasswordResetRequestBody struct {
	Email string `json:"email"`
}

type RequestPasswordResetRequest struct {
	Body *RequestPasswordResetRequestBody
}

// Response types

type RequestPasswordResetResponse interface {
	VisitRequestPasswordResetResponse(w http.ResponseWriter) error
}

type RequestPasswordReset201JSONResponse struct {
}

func (response RequestPasswordReset201JSONResponse) VisitRequestPasswordResetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type RequestPasswordReset400Response struct {
	server.BadRequestResponse
}

func (response RequestPasswordReset400Response) VisitRequestPasswordResetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

// Handler method

// RequestPasswordReset handles the POST /accounts/password-reset/request endpoint.
func (c *AccountsController) RequestPasswordReset(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := RequestPasswordResetRequest{}

	// Request body
	var body RequestPasswordResetRequestBody
	if err := ctx.Bind(&body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// Determine which handler to call based on operation
	// TODO: Handle custom operation RequestPasswordReset
	_ = reqCtx // Custom operation not yet implemented
	return echo.NewHTTPError(http.StatusNotImplemented, "Operation not implemented")
}

// ============================================================================
// ConfirmPasswordReset - POST /accounts/password-reset/verify
// ============================================================================

// Request types
// ConfirmPasswordResetRequestBody defines the request body for ConfirmPasswordReset
type ConfirmPasswordResetRequestBody struct {
	NewPassword string `json:"newPassword"`
	Token       string `json:"token"`
}

type ConfirmPasswordResetRequest struct {
	Body *ConfirmPasswordResetRequestBody
}

// Response types

type ConfirmPasswordResetResponse interface {
	VisitConfirmPasswordResetResponse(w http.ResponseWriter) error
}

type ConfirmPasswordReset201JSONResponse struct {
}

func (response ConfirmPasswordReset201JSONResponse) VisitConfirmPasswordResetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ConfirmPasswordReset401Response struct {
	server.UnauthorizedResponse
}

func (response ConfirmPasswordReset401Response) VisitConfirmPasswordResetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

type ConfirmPasswordReset404Response struct {
	server.NotFoundResponse
}

func (response ConfirmPasswordReset404Response) VisitConfirmPasswordResetResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// ConfirmPasswordReset handles the POST /accounts/password-reset/verify endpoint.
func (c *AccountsController) ConfirmPasswordReset(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := ConfirmPasswordResetRequest{}

	// Request body
	var body ConfirmPasswordResetRequestBody
	if err := ctx.Bind(&body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// Determine which handler to call based on operation
	// TODO: Handle custom operation ConfirmPasswordReset
	_ = reqCtx // Custom operation not yet implemented
	return echo.NewHTTPError(http.StatusNotImplemented, "Operation not implemented")
}

// ============================================================================
// RequestEmailChange - POST /accounts/email-change/request
// ============================================================================

// Request types
// RequestEmailChangeRequestBody defines the request body for RequestEmailChange
type RequestEmailChangeRequestBody struct {
	NewEmail string    `json:"newEmail"`
	UserID   uuid.UUID `json:"userID"`
}

type RequestEmailChangeRequest struct {
	Body *RequestEmailChangeRequestBody
}

// Response types

type RequestEmailChangeResponse interface {
	VisitRequestEmailChangeResponse(w http.ResponseWriter) error
}

type RequestEmailChange201JSONResponse struct {
}

func (response RequestEmailChange201JSONResponse) VisitRequestEmailChangeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type RequestEmailChange400Response struct {
	server.BadRequestResponse
}

func (response RequestEmailChange400Response) VisitRequestEmailChangeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type RequestEmailChange401Response struct {
	server.UnauthorizedResponse
}

func (response RequestEmailChange401Response) VisitRequestEmailChangeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// RequestEmailChange handles the POST /accounts/email-change/request endpoint.
func (c *AccountsController) RequestEmailChange(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := RequestEmailChangeRequest{}

	// Request body
	var body RequestEmailChangeRequestBody
	if err := ctx.Bind(&body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// Determine which handler to call based on operation
	// TODO: Handle custom operation RequestEmailChange
	_ = reqCtx // Custom operation not yet implemented
	return echo.NewHTTPError(http.StatusNotImplemented, "Operation not implemented")
}

// ============================================================================
// ConfirmEmailChange - POST /accounts/email-change/verify
// ============================================================================

// Request types
// ConfirmEmailChangeRequestBody defines the request body for ConfirmEmailChange
type ConfirmEmailChangeRequestBody struct {
	NewEmail string    `json:"newEmail"`
	Token    string    `json:"token"`
	UserID   uuid.UUID `json:"userID"`
}

type ConfirmEmailChangeRequest struct {
	Body *ConfirmEmailChangeRequestBody
}

// Response types

type ConfirmEmailChangeResponse interface {
	VisitConfirmEmailChangeResponse(w http.ResponseWriter) error
}

type ConfirmEmailChange201JSONResponse struct {
}

func (response ConfirmEmailChange201JSONResponse) VisitConfirmEmailChangeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ConfirmEmailChange401Response struct {
	server.UnauthorizedResponse
}

func (response ConfirmEmailChange401Response) VisitConfirmEmailChangeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

type ConfirmEmailChange404Response struct {
	server.NotFoundResponse
}

func (response ConfirmEmailChange404Response) VisitConfirmEmailChangeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// ConfirmEmailChange handles the POST /accounts/email-change/verify endpoint.
func (c *AccountsController) ConfirmEmailChange(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := ConfirmEmailChangeRequest{}

	// Request body
	var body ConfirmEmailChangeRequestBody
	if err := ctx.Bind(&body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// Determine which handler to call based on operation
	// TODO: Handle custom operation ConfirmEmailChange
	_ = reqCtx // Custom operation not yet implemented
	return echo.NewHTTPError(http.StatusNotImplemented, "Operation not implemented")
}
