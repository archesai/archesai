// Code generated by archesai codegen. DO NOT EDIT.
package controllers

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"

	"github.com/archesai/archesai/internal/adapters/http/server"
	commands "github.com/archesai/archesai/internal/application/commands/accounts"
	queries "github.com/archesai/archesai/internal/application/queries/accounts"
)

// AccountsController handles HTTP requests for accounts endpoints.
type AccountsController struct {
	// Command handlers
	createHandler *commands.CreateAccountCommandHandler
	updateHandler *commands.UpdateAccountCommandHandler
	deleteHandler *commands.DeleteAccountCommandHandler

	// Query handlers
	getHandler  *queries.GetAccountQueryHandler
	listHandler *queries.ListAccountsQueryHandler
}

// NewAccountsController creates a new accounts controller with injected handlers.
func NewAccountsController(
	createHandler *commands.CreateAccountCommandHandler,
	updateHandler *commands.UpdateAccountCommandHandler,
	deleteHandler *commands.DeleteAccountCommandHandler,
	getHandler *queries.GetAccountQueryHandler,
	listHandler *queries.ListAccountsQueryHandler,
) *AccountsController {
	return &AccountsController{
		createHandler: createHandler,
		updateHandler: updateHandler,
		deleteHandler: deleteHandler,
		getHandler:    getHandler,
		listHandler:   listHandler,
	}
}

// RegisterAccountsRoutes registers all HTTP routes for the accounts domain.
func RegisterAccountsRoutes(router server.EchoRouter, controller *AccountsController) {
	router.GET("/accounts", controller.ListAccounts)
	router.POST("/accounts", controller.CreateAccount)
	router.GET("/accounts/:id", controller.GetAccount)
	router.PATCH("/accounts/:id", controller.UpdateAccount)
	router.DELETE("/accounts/:id", controller.DeleteAccount)
}

// ============================================================================
// ListAccounts - GET /accounts
// ============================================================================

// Request types

type ListAccountsRequest struct {
	Params dto.ListAccountsParams
}

// Response types

type ListAccountsResponse interface {
	VisitListAccountsResponse(w http.ResponseWriter) error
}

type ListAccounts200JSONResponse struct {
}

func (response ListAccounts200JSONResponse) VisitListAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListAccounts400Response struct {
	server.BadRequestResponse
}

func (response ListAccounts400Response) VisitListAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type ListAccounts401Response struct {
	server.UnauthorizedResponse
}

func (response ListAccounts401Response) VisitListAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// ListAccounts handles the GET /accounts endpoint.
func (c *AccountsController) ListAccounts(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Query parameters
	var params dto.ListAccountsParams
	// Optional query parameter "filter"
	if err := runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}
	// Optional query parameter "page"
	if err := runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}
	// Optional query parameter "sort"
	if err := runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}
	request.Params = params

	// Determine which handler to call based on operation
	// Create list query from request
	query := queries.NewListAccountsQuery()
	// TODO: Apply filters, pagination, sorting from request.Params

	results, total, err := c.listHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": results,
		"meta": map[string]interface{}{
			"total": total,
		},
	})
}

// ============================================================================
// CreateAccount - POST /accounts
// ============================================================================

// Request types

type CreateAccountRequest struct {
}

// Response types

type CreateAccountResponse interface {
	VisitCreateAccountResponse(w http.ResponseWriter) error
}

type CreateAccount201JSONResponse struct {
}

func (response CreateAccount201JSONResponse) VisitCreateAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateAccount400Response struct {
	server.BadRequestResponse
}

func (response CreateAccount400Response) VisitCreateAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type CreateAccount409Response struct {
	server.ConflictResponse
}

func (response CreateAccount409Response) VisitCreateAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response.ConflictResponse)
}

// Handler method

// CreateAccount handles the POST /accounts endpoint.
func (c *AccountsController) CreateAccount(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Determine which handler to call based on operation
	// Create command from request
	cmd := commands.NewCreateAccountCommand(
	// TODO: Map request fields to command
	)

	result, err := c.createHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusCreated, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// GetAccount - GET /accounts/{id}
// ============================================================================

// Request types

type GetAccountRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type GetAccountResponse interface {
	VisitGetAccountResponse(w http.ResponseWriter) error
}

type GetAccount200JSONResponse struct {
}

func (response GetAccount200JSONResponse) VisitGetAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAccount404Response struct {
	server.NotFoundResponse
}

func (response GetAccount404Response) VisitGetAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// GetAccount handles the GET /accounts/{id} endpoint.
func (c *AccountsController) GetAccount(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Create get query from request
	query := queries.NewGetAccountQuery(
		request.ID,
	)

	result, err := c.getHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// UpdateAccount - PATCH /accounts/{id}
// ============================================================================

// Request types

type UpdateAccountRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type UpdateAccountResponse interface {
	VisitUpdateAccountResponse(w http.ResponseWriter) error
}

type UpdateAccount200JSONResponse struct {
}

func (response UpdateAccount200JSONResponse) VisitUpdateAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAccount404Response struct {
	server.NotFoundResponse
}

func (response UpdateAccount404Response) VisitUpdateAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// UpdateAccount handles the PATCH /accounts/{id} endpoint.
func (c *AccountsController) UpdateAccount(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Create update command from request
	cmd := commands.NewUpdateAccountCommand(
	// TODO: Map request fields to command including ID
	)

	result, err := c.updateHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// DeleteAccount - DELETE /accounts/{id}
// ============================================================================

// Request types

type DeleteAccountRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type DeleteAccountResponse interface {
	VisitDeleteAccountResponse(w http.ResponseWriter) error
}

type DeleteAccount200JSONResponse struct {
}

func (response DeleteAccount200JSONResponse) VisitDeleteAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAccount404Response struct {
	server.NotFoundResponse
}

func (response DeleteAccount404Response) VisitDeleteAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// DeleteAccount handles the DELETE /accounts/{id} endpoint.
func (c *AccountsController) DeleteAccount(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Create delete command from request
	cmd := commands.NewDeleteAccountCommand(
		request.ID,
	)

	err := c.deleteHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.NoContent(http.StatusNoContent)
}
