// Code generated by archesai. DO NOT EDIT.

package controllers

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"

	"github.com/archesai/archesai/internal/adapters/http/server"
	commands "github.com/archesai/archesai/internal/application/commands/apikey"
	queries "github.com/archesai/archesai/internal/application/queries/apikey"
	"github.com/archesai/archesai/internal/core/entities"
)

// APIKeyController handles HTTP requests for apikey endpoints.
type APIKeyController struct {
	createAPIKeyHandler *commands.CreateAPIKeyCommandHandler
	updateAPIKeyHandler *commands.UpdateAPIKeyCommandHandler
	deleteAPIKeyHandler *commands.DeleteAPIKeyCommandHandler
	getAPIKeyHandler    *queries.GetAPIKeyQueryHandler
	listAPIKeysHandler  *queries.ListAPIKeysQueryHandler
}

// NewAPIKeyController creates a new apikey controller with injected handlers.
func NewAPIKeyController(
	createAPIKeyHandler *commands.CreateAPIKeyCommandHandler,
	updateAPIKeyHandler *commands.UpdateAPIKeyCommandHandler,
	deleteAPIKeyHandler *commands.DeleteAPIKeyCommandHandler,
	getAPIKeyHandler *queries.GetAPIKeyQueryHandler,
	listAPIKeysHandler *queries.ListAPIKeysQueryHandler,
) *APIKeyController {
	return &APIKeyController{
		createAPIKeyHandler: createAPIKeyHandler,
		updateAPIKeyHandler: updateAPIKeyHandler,
		deleteAPIKeyHandler: deleteAPIKeyHandler,
		getAPIKeyHandler:    getAPIKeyHandler,
		listAPIKeysHandler:  listAPIKeysHandler,
	}
}

// RegisterAPIKeyRoutes registers all HTTP routes for the apikey domain.
func RegisterAPIKeyRoutes(router server.EchoRouter, controller *APIKeyController) {
	router.POST("/api-keys", controller.CreateAPIKey)
	router.GET("/api-keys/:id", controller.GetAPIKey)
	router.GET("/api-keys", controller.ListAPIKeys)
	router.PATCH("/api-keys/:id", controller.UpdateAPIKey)
	router.DELETE("/api-keys/:id", controller.DeleteAPIKey)
}

// ============================================================================
// CreateAPIKey - POST /api-keys
// ============================================================================

// Request types
// CreateAPIKeyRequestBody defines the request body for CreateAPIKey
type CreateAPIKeyRequestBody struct {
	ExpiresAt *time.Time `json:"expiresAt,omitempty"`
	Name      string     `json:"name"`
	RateLimit *int       `json:"rateLimit,omitempty"`
	Scopes    []string   `json:"scopes"`
}

type CreateAPIKeyRequest struct {
	Body *CreateAPIKeyRequestBody
}

// Response types

type CreateAPIKeyResponse interface {
	VisitCreateAPIKeyResponse(w http.ResponseWriter) error
}

type CreateAPIKey201Response struct {
	ID             uuid.UUID `json:"id"`
	CreatedAt      time.Time `json:"createdAt"`
	ExpiresAt      time.Time `json:"expiresAt,omitempty"`
	KeyHash        string    `json:"keyHash"`
	LastUsedAt     time.Time `json:"lastUsedAt,omitempty"`
	Name           string    `json:"name,omitempty"`
	OrganizationID uuid.UUID `json:"organizationID"`
	Prefix         string    `json:"prefix,omitempty"`
	RateLimit      int32     `json:"rateLimit"`
	Scopes         []string  `json:"scopes"`
	UpdatedAt      time.Time `json:"updatedAt"`
	UserID         uuid.UUID `json:"userID"`
}

func (response CreateAPIKey201Response) VisitCreateAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateAPIKey400Response struct {
	server.BadRequestResponse
}

func (response CreateAPIKey400Response) VisitCreateAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type CreateAPIKey401Response struct {
	server.UnauthorizedResponse
}

func (response CreateAPIKey401Response) VisitCreateAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// CreateAPIKey handles the POST /api-keys endpoint.
func (c *APIKeyController) CreateAPIKey(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := CreateAPIKeyRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Request body
	request.Body = &CreateAPIKeyRequestBody{}
	if err := ctx.Bind(request.Body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewCreateAPIKeyCommand(
		sessionID,              // SessionID for authenticated operations
		request.Body.ExpiresAt, // ExpiresAt
		request.Body.Name,      // Name
		request.Body.RateLimit, // RateLimit
		request.Body.Scopes,    // Scopes
	)
	result, err := c.createAPIKeyHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}
	return ctx.JSON(http.StatusCreated, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// GetAPIKey - GET /api-keys/{id}
// ============================================================================

// Request types

type GetAPIKeyRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type GetAPIKeyResponse interface {
	VisitGetAPIKeyResponse(w http.ResponseWriter) error
}

type GetAPIKey200Response struct {
	ID             uuid.UUID `json:"id"`
	CreatedAt      time.Time `json:"createdAt"`
	ExpiresAt      time.Time `json:"expiresAt,omitempty"`
	KeyHash        string    `json:"keyHash"`
	LastUsedAt     time.Time `json:"lastUsedAt,omitempty"`
	Name           string    `json:"name,omitempty"`
	OrganizationID uuid.UUID `json:"organizationID"`
	Prefix         string    `json:"prefix,omitempty"`
	RateLimit      int32     `json:"rateLimit"`
	Scopes         []string  `json:"scopes"`
	UpdatedAt      time.Time `json:"updatedAt"`
	UserID         uuid.UUID `json:"userID"`
}

func (response GetAPIKey200Response) VisitGetAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAPIKey400Response struct {
	server.BadRequestResponse
}

func (response GetAPIKey400Response) VisitGetAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type GetAPIKey401Response struct {
	server.UnauthorizedResponse
}

func (response GetAPIKey401Response) VisitGetAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

type GetAPIKey404Response struct {
	server.NotFoundResponse
}

func (response GetAPIKey404Response) VisitGetAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// GetAPIKey handles the GET /api-keys/{id} endpoint.
func (c *APIKeyController) GetAPIKey(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := GetAPIKeyRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewGetAPIKeyQuery(
		sessionID,  // SessionID for authenticated operations
		request.ID, // ID
	)

	result, err := c.getAPIKeyHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// ListAPIKeys - GET /api-keys
// ============================================================================

// Request types
// ListAPIKeysParams defines parameters for ListAPIKeys
type ListAPIKeysParams struct {
	Filter map[string]any   `json:"filter,omitempty"`
	Page   map[string]any   `json:"page,omitempty"`
	Sort   []map[string]any `json:"sort,omitempty"`
}

type ListAPIKeysRequest struct {
	Params ListAPIKeysParams
}

// Response types

type ListAPIKeysResponse interface {
	VisitListAPIKeysResponse(w http.ResponseWriter) error
}

// ListAPIKeys200ResponseMeta defines the meta structure
type ListAPIKeys200ResponseMeta struct {
	Total float64 `json:"total"`
}

type ListAPIKeys200Response struct {
	Data []entities.APIKey          `json:"data"`
	Meta ListAPIKeys200ResponseMeta `json:"meta"`
}

func (response ListAPIKeys200Response) VisitListAPIKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListAPIKeys401Response struct {
	server.UnauthorizedResponse
}

func (response ListAPIKeys401Response) VisitListAPIKeysResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// ListAPIKeys handles the GET /api-keys endpoint.
func (c *APIKeyController) ListAPIKeys(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := ListAPIKeysRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Query parameters
	var params ListAPIKeysParams
	// Optional query parameter "Filter"
	if err := runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}
	// Optional query parameter "Page"
	if err := runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}
	// Optional query parameter "Sort"
	if err := runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}
	request.Params = params

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewListAPIKeysQuery(
		sessionID, // SessionID for authenticated operations
	)
	// TODO: Apply filters, pagination, sorting from request.Params

	results, total, err := c.listAPIKeysHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": results,
		"meta": map[string]interface{}{
			"total": total,
		},
	})
}

// ============================================================================
// UpdateAPIKey - PATCH /api-keys/{id}
// ============================================================================

// Request types
// UpdateAPIKeyRequestBody defines the request body for UpdateAPIKey
type UpdateAPIKeyRequestBody struct {
	Name      *string  `json:"name,omitempty"`
	RateLimit *int     `json:"rateLimit,omitempty"`
	Scopes    []string `json:"scopes,omitempty"`
}

type UpdateAPIKeyRequest struct {
	ID   uuid.UUID `json:"id"`
	Body *UpdateAPIKeyRequestBody
}

// Response types

type UpdateAPIKeyResponse interface {
	VisitUpdateAPIKeyResponse(w http.ResponseWriter) error
}

type UpdateAPIKey200Response struct {
	ID             uuid.UUID `json:"id"`
	CreatedAt      time.Time `json:"createdAt"`
	ExpiresAt      time.Time `json:"expiresAt,omitempty"`
	KeyHash        string    `json:"keyHash"`
	LastUsedAt     time.Time `json:"lastUsedAt,omitempty"`
	Name           string    `json:"name,omitempty"`
	OrganizationID uuid.UUID `json:"organizationID"`
	Prefix         string    `json:"prefix,omitempty"`
	RateLimit      int32     `json:"rateLimit"`
	Scopes         []string  `json:"scopes"`
	UpdatedAt      time.Time `json:"updatedAt"`
	UserID         uuid.UUID `json:"userID"`
}

func (response UpdateAPIKey200Response) VisitUpdateAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateAPIKey400Response struct {
	server.BadRequestResponse
}

func (response UpdateAPIKey400Response) VisitUpdateAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type UpdateAPIKey401Response struct {
	server.UnauthorizedResponse
}

func (response UpdateAPIKey401Response) VisitUpdateAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

type UpdateAPIKey404Response struct {
	server.NotFoundResponse
}

func (response UpdateAPIKey404Response) VisitUpdateAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// UpdateAPIKey handles the PATCH /api-keys/{id} endpoint.
func (c *APIKeyController) UpdateAPIKey(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := UpdateAPIKeyRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Request body
	request.Body = &UpdateAPIKeyRequestBody{}
	if err := ctx.Bind(request.Body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewUpdateAPIKeyCommand(
		sessionID,              // SessionID for authenticated operations
		request.ID,             // ID
		request.Body.Name,      // Name
		request.Body.RateLimit, // RateLimit
		request.Body.Scopes,    // Scopes
	)
	result, err := c.updateAPIKeyHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}
	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// DeleteAPIKey - DELETE /api-keys/{id}
// ============================================================================

// Request types

type DeleteAPIKeyRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type DeleteAPIKeyResponse interface {
	VisitDeleteAPIKeyResponse(w http.ResponseWriter) error
}

type DeleteAPIKey204Response struct {
}

func (response DeleteAPIKey204Response) VisitDeleteAPIKeyResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)

	return nil
}

type DeleteAPIKey400Response struct {
	server.BadRequestResponse
}

func (response DeleteAPIKey400Response) VisitDeleteAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type DeleteAPIKey401Response struct {
	server.UnauthorizedResponse
}

func (response DeleteAPIKey401Response) VisitDeleteAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

type DeleteAPIKey404Response struct {
	server.NotFoundResponse
}

func (response DeleteAPIKey404Response) VisitDeleteAPIKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// DeleteAPIKey handles the DELETE /api-keys/{id} endpoint.
func (c *APIKeyController) DeleteAPIKey(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := DeleteAPIKeyRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewDeleteAPIKeyCommand(
		sessionID,  // SessionID for authenticated operations
		request.ID, // ID
	)
	if err := c.deleteAPIKeyHandler.Handle(reqCtx, cmd); err != nil {
		return err
	}
	return ctx.NoContent(http.StatusNoContent)
}
