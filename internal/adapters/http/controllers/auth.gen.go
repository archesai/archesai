// Code generated by archesai codegen. DO NOT EDIT.
package controllers

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"

	"github.com/archesai/archesai/internal/adapters/http/server"
	commands "github.com/archesai/archesai/internal/application/commands/auth"
	queries "github.com/archesai/archesai/internal/application/queries/auth"
)

// AuthController handles HTTP requests for auth endpoints.
type AuthController struct {
	// Command handlers
	createHandler *commands.CreateAuthCommandHandler
	listHandler   *queries.ListAuthQueryHandler
}

// NewAuthController creates a new auth controller with injected handlers.
func NewAuthController(
	createHandler *commands.CreateAuthCommandHandler,
	listHandler *queries.ListAuthQueryHandler,
) *AuthController {
	return &AuthController{
		createHandler: createHandler,
		listHandler:   listHandler,
	}
}

// RegisterAuthRoutes registers all HTTP routes for the auth domain.
func RegisterAuthRoutes(router server.EchoRouter, controller *AuthController) {
	router.GET("/auth/oauth/:provider/authorize", controller.OauthAuthorize)
	router.GET("/auth/oauth/:provider/callback", controller.OauthCallback)
	router.POST("/auth/magic-links/request", controller.RequestMagicLink)
	router.POST("/auth/magic-links/verify", controller.VerifyMagicLink)
}

// ============================================================================
// OauthAuthorize - GET /auth/oauth/{provider}/authorize
// ============================================================================

// Request types
// OauthAuthorizeParams defines parameters for OauthAuthorize
type OauthAuthorizeParams struct {
	Redirect_uri *string `json:"redirect_uri,omitempty"`
	Scope        *string `json:"scope,omitempty"`
	State        *string `json:"state,omitempty"`
}

type OauthAuthorizeRequest struct {
	Provider string `json:"provider"`
	Params   OauthAuthorizeParams
}

// Response types

type OauthAuthorizeResponse interface {
	VisitOauthAuthorizeResponse(w http.ResponseWriter) error
}

type OauthAuthorize200JSONResponse struct {
}

func (response OauthAuthorize200JSONResponse) VisitOauthAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OauthAuthorize302Response struct {
	server.BadRequestResponse
}

func (response OauthAuthorize302Response) VisitOauthAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(302)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type OauthAuthorize400Response struct {
	server.BadRequestResponse
}

func (response OauthAuthorize400Response) VisitOauthAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type OauthAuthorize404Response struct {
	server.NotFoundResponse
}

func (response OauthAuthorize404Response) VisitOauthAuthorizeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// OauthAuthorize handles the GET /auth/oauth/{provider}/authorize endpoint.
func (c *AuthController) OauthAuthorize(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := OauthAuthorizeRequest{}

	// Path parameter "provider"
	var provider string
	if err := runtime.BindStyledParameterWithOptions("simple", "provider", ctx.Param("provider"), &provider, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter provider: %s", err))
	}
	request.Provider = provider

	// Query parameters
	var params OauthAuthorizeParams
	// Optional query parameter "redirect_uri"
	if err := runtime.BindQueryParameter("form", true, false, "redirect_uri", ctx.QueryParams(), &params.Redirect_uri); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter redirect_uri: %s", err))
	}
	// Optional query parameter "scope"
	if err := runtime.BindQueryParameter("form", true, false, "scope", ctx.QueryParams(), &params.Scope); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scope: %s", err))
	}
	// Optional query parameter "state"
	if err := runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}
	request.Params = params

	// Determine which handler to call based on operation
	// TODO: Handle custom operation OauthAuthorize
	_ = reqCtx // Custom operation not yet implemented
	return echo.NewHTTPError(http.StatusNotImplemented, "Operation not implemented")
}

// ============================================================================
// OauthCallback - GET /auth/oauth/{provider}/callback
// ============================================================================

// Request types
// OauthCallbackParams defines parameters for OauthCallback
type OauthCallbackParams struct {
	Code              *string `json:"code,omitempty"`
	State             *string `json:"state,omitempty"`
	Error             *string `json:"error,omitempty"`
	Error_description *string `json:"error_description,omitempty"`
}

type OauthCallbackRequest struct {
	Provider string `json:"provider"`
	Params   OauthCallbackParams
}

// Response types

type OauthCallbackResponse interface {
	VisitOauthCallbackResponse(w http.ResponseWriter) error
}

type OauthCallback200JSONResponse struct {
}

func (response OauthCallback200JSONResponse) VisitOauthCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type OauthCallback302Response struct {
	server.BadRequestResponse
}

func (response OauthCallback302Response) VisitOauthCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(302)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type OauthCallback400Response struct {
	server.BadRequestResponse
}

func (response OauthCallback400Response) VisitOauthCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type OauthCallback401Response struct {
	server.UnauthorizedResponse
}

func (response OauthCallback401Response) VisitOauthCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

type OauthCallback404Response struct {
	server.NotFoundResponse
}

func (response OauthCallback404Response) VisitOauthCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// OauthCallback handles the GET /auth/oauth/{provider}/callback endpoint.
func (c *AuthController) OauthCallback(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := OauthCallbackRequest{}

	// Path parameter "provider"
	var provider string
	if err := runtime.BindStyledParameterWithOptions("simple", "provider", ctx.Param("provider"), &provider, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter provider: %s", err))
	}
	request.Provider = provider

	// Query parameters
	var params OauthCallbackParams
	// Optional query parameter "code"
	if err := runtime.BindQueryParameter("form", true, false, "code", ctx.QueryParams(), &params.Code); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}
	// Optional query parameter "state"
	if err := runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}
	// Optional query parameter "error"
	if err := runtime.BindQueryParameter("form", true, false, "error", ctx.QueryParams(), &params.Error); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter error: %s", err))
	}
	// Optional query parameter "error_description"
	if err := runtime.BindQueryParameter("form", true, false, "error_description", ctx.QueryParams(), &params.Error_description); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter error_description: %s", err))
	}
	request.Params = params

	// Determine which handler to call based on operation
	// TODO: Handle custom operation OauthCallback
	_ = reqCtx // Custom operation not yet implemented
	return echo.NewHTTPError(http.StatusNotImplemented, "Operation not implemented")
}

// ============================================================================
// RequestMagicLink - POST /auth/magic-links/request
// ============================================================================

// Request types
// RequestMagicLinkRequestBody defines the request body for RequestMagicLink
type RequestMagicLinkRequestBody struct {
	DeliveryMethod *string `json:"deliveryMethod,omitempty"`
	Identifier     string  `json:"identifier"`
	RedirectUrl    *string `json:"redirectUrl,omitempty"`
}

type RequestMagicLinkRequest struct {
	Body *RequestMagicLinkRequestBody
}

// Response types

type RequestMagicLinkResponse interface {
	VisitRequestMagicLinkResponse(w http.ResponseWriter) error
}

type RequestMagicLink201JSONResponse struct {
}

func (response RequestMagicLink201JSONResponse) VisitRequestMagicLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type RequestMagicLink400Response struct {
	server.BadRequestResponse
}

func (response RequestMagicLink400Response) VisitRequestMagicLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type RequestMagicLink429Response struct {
	server.BadRequestResponse
}

func (response RequestMagicLink429Response) VisitRequestMagicLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(429)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type RequestMagicLink500Response struct {
	server.InternalServerErrorResponse
}

func (response RequestMagicLink500Response) VisitRequestMagicLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.InternalServerErrorResponse)
}

// Handler method

// RequestMagicLink handles the POST /auth/magic-links/request endpoint.
func (c *AuthController) RequestMagicLink(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := RequestMagicLinkRequest{}

	// Request body
	var body RequestMagicLinkRequestBody
	if err := ctx.Bind(&body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// Determine which handler to call based on operation
	// TODO: Handle custom operation RequestMagicLink
	_ = reqCtx // Custom operation not yet implemented
	return echo.NewHTTPError(http.StatusNotImplemented, "Operation not implemented")
}

// ============================================================================
// VerifyMagicLink - POST /auth/magic-links/verify
// ============================================================================

// Request types
// VerifyMagicLinkRequestBody defines the request body for VerifyMagicLink
type VerifyMagicLinkRequestBody struct {
	Code       *string `json:"code,omitempty"`
	Identifier *string `json:"identifier,omitempty"`
	Token      *string `json:"token,omitempty"`
}

type VerifyMagicLinkRequest struct {
	Body *VerifyMagicLinkRequestBody
}

// Response types

type VerifyMagicLinkResponse interface {
	VisitVerifyMagicLinkResponse(w http.ResponseWriter) error
}

type VerifyMagicLink201JSONResponse struct {
}

func (response VerifyMagicLink201JSONResponse) VisitVerifyMagicLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type VerifyMagicLink400Response struct {
	server.BadRequestResponse
}

func (response VerifyMagicLink400Response) VisitVerifyMagicLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type VerifyMagicLink401Response struct {
	server.UnauthorizedResponse
}

func (response VerifyMagicLink401Response) VisitVerifyMagicLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

type VerifyMagicLink404Response struct {
	server.NotFoundResponse
}

func (response VerifyMagicLink404Response) VisitVerifyMagicLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

type VerifyMagicLink500Response struct {
	server.InternalServerErrorResponse
}

func (response VerifyMagicLink500Response) VisitVerifyMagicLinkResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response.InternalServerErrorResponse)
}

// Handler method

// VerifyMagicLink handles the POST /auth/magic-links/verify endpoint.
func (c *AuthController) VerifyMagicLink(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := VerifyMagicLinkRequest{}

	// Request body
	var body VerifyMagicLinkRequestBody
	if err := ctx.Bind(&body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// Determine which handler to call based on operation
	// TODO: Handle custom operation VerifyMagicLink
	_ = reqCtx // Custom operation not yet implemented
	return echo.NewHTTPError(http.StatusNotImplemented, "Operation not implemented")
}
