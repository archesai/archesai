// Code generated by archesai. DO NOT EDIT.

package controllers

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"

	"github.com/archesai/archesai/internal/adapters/http/server"
	commands "github.com/archesai/archesai/internal/application/commands/pipeline"
	queries "github.com/archesai/archesai/internal/application/queries/pipeline"
	"github.com/archesai/archesai/internal/core/entities"
)

// PipelineController handles HTTP requests for pipeline endpoints.
type PipelineController struct {
	createPipelineHandler                *commands.CreatePipelineCommandHandler
	createPipelineStepHandler            *commands.CreatePipelineStepCommandHandler
	validatePipelineExecutionPlanHandler *commands.ValidatePipelineExecutionPlanCommandHandler
	updatePipelineHandler                *commands.UpdatePipelineCommandHandler
	deletePipelineHandler                *commands.DeletePipelineCommandHandler
	getPipelineHandler                   *queries.GetPipelineQueryHandler
	getPipelineExecutionPlanHandler      *queries.GetPipelineExecutionPlanQueryHandler
	getPipelineStepsHandler              *queries.GetPipelineStepsQueryHandler
	listPipelinesHandler                 *queries.ListPipelinesQueryHandler
}

// NewPipelineController creates a new pipeline controller with injected handlers.
func NewPipelineController(
	createPipelineHandler *commands.CreatePipelineCommandHandler,
	createPipelineStepHandler *commands.CreatePipelineStepCommandHandler,
	validatePipelineExecutionPlanHandler *commands.ValidatePipelineExecutionPlanCommandHandler,
	updatePipelineHandler *commands.UpdatePipelineCommandHandler,
	deletePipelineHandler *commands.DeletePipelineCommandHandler,
	getPipelineHandler *queries.GetPipelineQueryHandler,
	getPipelineExecutionPlanHandler *queries.GetPipelineExecutionPlanQueryHandler,
	getPipelineStepsHandler *queries.GetPipelineStepsQueryHandler,
	listPipelinesHandler *queries.ListPipelinesQueryHandler,
) *PipelineController {
	return &PipelineController{
		createPipelineHandler:                createPipelineHandler,
		createPipelineStepHandler:            createPipelineStepHandler,
		validatePipelineExecutionPlanHandler: validatePipelineExecutionPlanHandler,
		updatePipelineHandler:                updatePipelineHandler,
		deletePipelineHandler:                deletePipelineHandler,
		getPipelineHandler:                   getPipelineHandler,
		getPipelineExecutionPlanHandler:      getPipelineExecutionPlanHandler,
		getPipelineStepsHandler:              getPipelineStepsHandler,
		listPipelinesHandler:                 listPipelinesHandler,
	}
}

// RegisterPipelineRoutes registers all HTTP routes for the pipeline domain.
func RegisterPipelineRoutes(router server.EchoRouter, controller *PipelineController) {
	router.POST("/pipelines", controller.CreatePipeline)
	router.POST("/pipelines/:id/steps", controller.CreatePipelineStep)
	router.POST("/pipelines/:id/execution-plans", controller.ValidatePipelineExecutionPlan)
	router.GET("/pipelines/:id", controller.GetPipeline)
	router.GET("/pipelines/:id/execution-plans", controller.GetPipelineExecutionPlan)
	router.GET("/pipelines/:id/steps", controller.GetPipelineSteps)
	router.GET("/pipelines", controller.ListPipelines)
	router.PATCH("/pipelines/:id", controller.UpdatePipeline)
	router.DELETE("/pipelines/:id", controller.DeletePipeline)
}

// ============================================================================
// CreatePipeline - POST /pipelines
// ============================================================================

// Request types
// CreatePipelineRequestBody defines the request body for CreatePipeline
type CreatePipelineRequestBody struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

type CreatePipelineRequest struct {
	Body *CreatePipelineRequestBody
}

// Response types

type CreatePipelineResponse interface {
	VisitCreatePipelineResponse(w http.ResponseWriter) error
}

type CreatePipeline201Response struct {
	Data entities.Pipeline `json:"data"`
}

func (response CreatePipeline201Response) VisitCreatePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreatePipeline400Response struct {
	server.BadRequestResponse
}

func (response CreatePipeline400Response) VisitCreatePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type CreatePipeline401Response struct {
	server.UnauthorizedResponse
}

func (response CreatePipeline401Response) VisitCreatePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// CreatePipeline handles the POST /pipelines endpoint.
func (c *PipelineController) CreatePipeline(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := CreatePipelineRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Request body
	request.Body = &CreatePipelineRequestBody{}
	if err := ctx.Bind(request.Body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewCreatePipelineCommand(
		sessionID,                // SessionID for authenticated operations
		request.Body.Description, // Description
		request.Body.Name,        // Name
	)
	result, err := c.createPipelineHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}
	return ctx.JSON(http.StatusCreated, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// CreatePipelineStep - POST /pipelines/{id}/steps
// ============================================================================

// Request types
// CreatePipelineStepRequestBody defines the request body for CreatePipelineStep
type CreatePipelineStepRequestBody struct {
	Config       map[string]any `json:"config,omitempty"`
	Dependencies []uuid.UUID    `json:"dependencies,omitempty"`
	Description  *string        `json:"description,omitempty"`
	Name         string         `json:"name"`
	Position     *int           `json:"position,omitempty"`
	ToolID       uuid.UUID      `json:"toolID"`
}

type CreatePipelineStepRequest struct {
	ID   uuid.UUID `json:"id"`
	Body *CreatePipelineStepRequestBody
}

// Response types

type CreatePipelineStepResponse interface {
	VisitCreatePipelineStepResponse(w http.ResponseWriter) error
}

type CreatePipelineStep201Response struct {
	Data entities.PipelineStep `json:"data"`
}

func (response CreatePipelineStep201Response) VisitCreatePipelineStepResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreatePipelineStep400Response struct {
	server.BadRequestResponse
}

func (response CreatePipelineStep400Response) VisitCreatePipelineStepResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type CreatePipelineStep401Response struct {
	server.UnauthorizedResponse
}

func (response CreatePipelineStep401Response) VisitCreatePipelineStepResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

type CreatePipelineStep404Response struct {
	server.NotFoundResponse
}

func (response CreatePipelineStep404Response) VisitCreatePipelineStepResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// CreatePipelineStep handles the POST /pipelines/{id}/steps endpoint.
func (c *PipelineController) CreatePipelineStep(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := CreatePipelineStepRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Request body
	request.Body = &CreatePipelineStepRequestBody{}
	if err := ctx.Bind(request.Body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewCreatePipelineStepCommand(
		sessionID,                 // SessionID for authenticated operations
		request.ID,                // ID
		request.Body.Config,       // Config
		request.Body.Dependencies, // Dependencies
		request.Body.Description,  // Description
		request.Body.Name,         // Name
		request.Body.Position,     // Position
		request.Body.ToolID,       // ToolID
	)
	result, err := c.createPipelineStepHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}
	return ctx.JSON(http.StatusCreated, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// ValidatePipelineExecutionPlan - POST /pipelines/{id}/execution-plans
// ============================================================================

// Request types

type ValidatePipelineExecutionPlanRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type ValidatePipelineExecutionPlanResponse interface {
	VisitValidatePipelineExecutionPlanResponse(w http.ResponseWriter) error
}

// ValidatePipelineExecutionPlan200ResponseData defines the data structure
type ValidatePipelineExecutionPlan200ResponseData struct {
	Issues []string `json:"issues,omitempty"`
	Valid  bool     `json:"valid"`
}

type ValidatePipelineExecutionPlan200Response struct {
	Data ValidatePipelineExecutionPlan200ResponseData `json:"data"`
}

func (response ValidatePipelineExecutionPlan200Response) VisitValidatePipelineExecutionPlanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ValidatePipelineExecutionPlan400Response struct {
	server.BadRequestResponse
}

func (response ValidatePipelineExecutionPlan400Response) VisitValidatePipelineExecutionPlanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type ValidatePipelineExecutionPlan401Response struct {
	server.UnauthorizedResponse
}

func (response ValidatePipelineExecutionPlan401Response) VisitValidatePipelineExecutionPlanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

type ValidatePipelineExecutionPlan404Response struct {
	server.NotFoundResponse
}

func (response ValidatePipelineExecutionPlan404Response) VisitValidatePipelineExecutionPlanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// ValidatePipelineExecutionPlan handles the POST /pipelines/{id}/execution-plans endpoint.
func (c *PipelineController) ValidatePipelineExecutionPlan(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := ValidatePipelineExecutionPlanRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewValidatePipelineExecutionPlanCommand(
		sessionID,  // SessionID for authenticated operations
		request.ID, // ID
	)
	result, err := c.validatePipelineExecutionPlanHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}
	return ctx.JSON(http.StatusCreated, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// GetPipeline - GET /pipelines/{id}
// ============================================================================

// Request types

type GetPipelineRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type GetPipelineResponse interface {
	VisitGetPipelineResponse(w http.ResponseWriter) error
}

type GetPipeline200Response struct {
	Data entities.Pipeline `json:"data"`
}

func (response GetPipeline200Response) VisitGetPipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPipeline404Response struct {
	server.NotFoundResponse
}

func (response GetPipeline404Response) VisitGetPipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// GetPipeline handles the GET /pipelines/{id} endpoint.
func (c *PipelineController) GetPipeline(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := GetPipelineRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewGetPipelineQuery(
		sessionID,  // SessionID for authenticated operations
		request.ID, // ID
	)

	result, err := c.getPipelineHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// GetPipelineExecutionPlan - GET /pipelines/{id}/execution-plans
// ============================================================================

// Request types

type GetPipelineExecutionPlanRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type GetPipelineExecutionPlanResponse interface {
	VisitGetPipelineExecutionPlanResponse(w http.ResponseWriter) error
}

// GetPipelineExecutionPlan200ResponseData defines the data structure
type GetPipelineExecutionPlan200ResponseData struct {
	EstimatedDuration int          `json:"estimatedDuration,omitempty"`
	IsValid           bool         `json:"isValid"`
	Levels            []LevelsItem `json:"levels"`
	PipelineID        uuid.UUID    `json:"pipelineID"`
	TotalSteps        int          `json:"totalSteps"`
}

// LevelsItem defines an item in the levels array
type LevelsItem struct {
	Level int         `json:"level"`
	Steps []uuid.UUID `json:"steps"`
}

type GetPipelineExecutionPlan200Response struct {
	Data GetPipelineExecutionPlan200ResponseData `json:"data"`
}

func (response GetPipelineExecutionPlan200Response) VisitGetPipelineExecutionPlanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPipelineExecutionPlan400Response struct {
	server.BadRequestResponse
}

func (response GetPipelineExecutionPlan400Response) VisitGetPipelineExecutionPlanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type GetPipelineExecutionPlan401Response struct {
	server.UnauthorizedResponse
}

func (response GetPipelineExecutionPlan401Response) VisitGetPipelineExecutionPlanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

type GetPipelineExecutionPlan404Response struct {
	server.NotFoundResponse
}

func (response GetPipelineExecutionPlan404Response) VisitGetPipelineExecutionPlanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// GetPipelineExecutionPlan handles the GET /pipelines/{id}/execution-plans endpoint.
func (c *PipelineController) GetPipelineExecutionPlan(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := GetPipelineExecutionPlanRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewGetPipelineExecutionPlanQuery(
		sessionID,  // SessionID for authenticated operations
		request.ID, // ID
	)

	result, err := c.getPipelineExecutionPlanHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// GetPipelineSteps - GET /pipelines/{id}/steps
// ============================================================================

// Request types

type GetPipelineStepsRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type GetPipelineStepsResponse interface {
	VisitGetPipelineStepsResponse(w http.ResponseWriter) error
}

type GetPipelineSteps200Response struct {
	Data []entities.PipelineStep `json:"data"`
}

func (response GetPipelineSteps200Response) VisitGetPipelineStepsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPipelineSteps401Response struct {
	server.UnauthorizedResponse
}

func (response GetPipelineSteps401Response) VisitGetPipelineStepsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

type GetPipelineSteps404Response struct {
	server.NotFoundResponse
}

func (response GetPipelineSteps404Response) VisitGetPipelineStepsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// GetPipelineSteps handles the GET /pipelines/{id}/steps endpoint.
func (c *PipelineController) GetPipelineSteps(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := GetPipelineStepsRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewGetPipelineStepsQuery(
		sessionID,  // SessionID for authenticated operations
		request.ID, // ID
	)

	result, err := c.getPipelineStepsHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// ListPipelines - GET /pipelines
// ============================================================================

// Request types
// ListPipelinesParams defines parameters for ListPipelines
type ListPipelinesParams struct {
	Filter map[string]any   `json:"filter,omitempty"`
	Page   map[string]any   `json:"page,omitempty"`
	Sort   []map[string]any `json:"sort,omitempty"`
}

type ListPipelinesRequest struct {
	Params ListPipelinesParams
}

// Response types

type ListPipelinesResponse interface {
	VisitListPipelinesResponse(w http.ResponseWriter) error
}

// ListPipelines200ResponseMeta defines the meta structure
type ListPipelines200ResponseMeta struct {
	Total float64 `json:"total"`
}

type ListPipelines200Response struct {
	Data []entities.Pipeline          `json:"data"`
	Meta ListPipelines200ResponseMeta `json:"meta"`
}

func (response ListPipelines200Response) VisitListPipelinesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListPipelines400Response struct {
	server.BadRequestResponse
}

func (response ListPipelines400Response) VisitListPipelinesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type ListPipelines401Response struct {
	server.UnauthorizedResponse
}

func (response ListPipelines401Response) VisitListPipelinesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// ListPipelines handles the GET /pipelines endpoint.
func (c *PipelineController) ListPipelines(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := ListPipelinesRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Query parameters
	var params ListPipelinesParams
	// Optional query parameter "Filter"
	if err := runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}
	// Optional query parameter "Page"
	if err := runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}
	// Optional query parameter "Sort"
	if err := runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}
	request.Params = params

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Query handler
	query := queries.NewListPipelinesQuery(
		sessionID, // SessionID for authenticated operations
	)
	// TODO: Apply filters, pagination, sorting from request.Params

	results, total, err := c.listPipelinesHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": results,
		"meta": map[string]interface{}{
			"total": total,
		},
	})
}

// ============================================================================
// UpdatePipeline - PATCH /pipelines/{id}
// ============================================================================

// Request types
// UpdatePipelineRequestBody defines the request body for UpdatePipeline
type UpdatePipelineRequestBody struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

type UpdatePipelineRequest struct {
	ID   uuid.UUID `json:"id"`
	Body *UpdatePipelineRequestBody
}

// Response types

type UpdatePipelineResponse interface {
	VisitUpdatePipelineResponse(w http.ResponseWriter) error
}

type UpdatePipeline200Response struct {
	Data entities.Pipeline `json:"data"`
}

func (response UpdatePipeline200Response) VisitUpdatePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePipeline404Response struct {
	server.NotFoundResponse
}

func (response UpdatePipeline404Response) VisitUpdatePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// UpdatePipeline handles the PATCH /pipelines/{id} endpoint.
func (c *PipelineController) UpdatePipeline(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := UpdatePipelineRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Request body
	request.Body = &UpdatePipelineRequestBody{}
	if err := ctx.Bind(request.Body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewUpdatePipelineCommand(
		sessionID,                // SessionID for authenticated operations
		request.ID,               // ID
		request.Body.Description, // Description
		request.Body.Name,        // Name
	)
	result, err := c.updatePipelineHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}
	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// DeletePipeline - DELETE /pipelines/{id}
// ============================================================================

// Request types

type DeletePipelineRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type DeletePipelineResponse interface {
	VisitDeletePipelineResponse(w http.ResponseWriter) error
}

type DeletePipeline200Response struct {
	Data entities.Pipeline `json:"data"`
}

func (response DeletePipeline200Response) VisitDeletePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeletePipeline404Response struct {
	server.NotFoundResponse
}

func (response DeletePipeline404Response) VisitDeletePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// DeletePipeline handles the DELETE /pipelines/{id} endpoint.
func (c *PipelineController) DeletePipeline(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := DeletePipelineRequest{}

	// Extract session ID from context for authenticated operations
	var sessionID uuid.UUID
	if sid := ctx.Get("sessionID"); sid != nil {
		sessionID = sid.(uuid.UUID)
	} else {
		return echo.NewHTTPError(http.StatusUnauthorized, "session required")
	}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Set auth scopes
	ctx.Set(server.BearerAuthScopes, []string{})

	// Determine which handler to call based on operation
	// Command handler

	// Map request to command parameters
	cmd := commands.NewDeletePipelineCommand(
		sessionID,  // SessionID for authenticated operations
		request.ID, // ID
	)
	if err := c.deletePipelineHandler.Handle(reqCtx, cmd); err != nil {
		return err
	}
	return ctx.NoContent(http.StatusNoContent)
}
