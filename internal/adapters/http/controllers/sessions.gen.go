// Code generated by archesai codegen. DO NOT EDIT.
package controllers

import (
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"

	"github.com/archesai/archesai/internal/adapters/http/server"
	commands "github.com/archesai/archesai/internal/application/commands/sessions"
	queries "github.com/archesai/archesai/internal/application/queries/sessions"
)

// SessionsController handles HTTP requests for sessions endpoints.
type SessionsController struct {
	// Command handlers
	createHandler *commands.CreateSessionCommandHandler
	updateHandler *commands.UpdateSessionCommandHandler
	deleteHandler *commands.DeleteSessionCommandHandler
	// Query handlers
	getHandler  *queries.GetSessionQueryHandler
	listHandler *queries.ListSessionsQueryHandler
}

// NewSessionsController creates a new sessions controller with injected handlers.
func NewSessionsController(
	createHandler *commands.CreateSessionCommandHandler,
	updateHandler *commands.UpdateSessionCommandHandler,
	deleteHandler *commands.DeleteSessionCommandHandler,
	getHandler *queries.GetSessionQueryHandler,
	listHandler *queries.ListSessionsQueryHandler,
) *SessionsController {
	return &SessionsController{
		createHandler: createHandler,
		updateHandler: updateHandler,
		deleteHandler: deleteHandler,
		getHandler:    getHandler,
		listHandler:   listHandler,
	}
}

// RegisterSessionsRoutes registers all HTTP routes for the sessions domain.
func RegisterSessionsRoutes(router server.EchoRouter, controller *SessionsController) {
	router.GET("/sessions", controller.ListSessions)
	router.POST("/sessions", controller.CreateSession)
	router.DELETE("/sessions/:id", controller.DeleteSession)
	router.GET("/sessions/:id", controller.GetSession)
	router.PATCH("/sessions/:id", controller.UpdateSession)
}

// ============================================================================
// ListSessions - GET /sessions
// ============================================================================

// Request types
// ListSessionsParams defines parameters for ListSessions
type ListSessionsParams struct {
	Filter *map[string]interface{}   `json:"filter,omitempty"`
	Page   *map[string]interface{}   `json:"page,omitempty"`
	Sort   *[]map[string]interface{} `json:"sort,omitempty"`
}

type ListSessionsRequest struct {
	Params ListSessionsParams
}

// Response types

type ListSessionsResponse interface {
	VisitListSessionsResponse(w http.ResponseWriter) error
}

type ListSessions200JSONResponse struct {
}

func (response ListSessions200JSONResponse) VisitListSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListSessions400Response struct {
	server.BadRequestResponse
}

func (response ListSessions400Response) VisitListSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type ListSessions401Response struct {
	server.UnauthorizedResponse
}

func (response ListSessions401Response) VisitListSessionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// ListSessions handles the GET /sessions endpoint.
func (c *SessionsController) ListSessions(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := ListSessionsRequest{}

	// Query parameters
	var params ListSessionsParams
	// Optional query parameter "filter"
	if err := runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}
	// Optional query parameter "page"
	if err := runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}
	// Optional query parameter "sort"
	if err := runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}
	request.Params = params

	// Determine which handler to call based on operation
	// Create list query from request
	query := queries.NewListSessionsQuery()
	// TODO: Apply filters, pagination, sorting from request.Params

	results, total, err := c.listHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": results,
		"meta": map[string]interface{}{
			"total": total,
		},
	})
}

// ============================================================================
// CreateSession - POST /sessions
// ============================================================================

// Request types
// CreateSessionRequestBody defines the request body for CreateSession
type CreateSessionRequestBody struct {
	Email      string `json:"email"`
	Password   string `json:"password"`
	RememberMe *bool  `json:"rememberMe,omitempty"`
}

type CreateSessionRequest struct {
	Body *CreateSessionRequestBody
}

// Response types

type CreateSessionResponse interface {
	VisitCreateSessionResponse(w http.ResponseWriter) error
}

type CreateSession201JSONResponse struct {
}

func (response CreateSession201JSONResponse) VisitCreateSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateSession400Response struct {
	server.BadRequestResponse
}

func (response CreateSession400Response) VisitCreateSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response.BadRequestResponse)
}

type CreateSession401Response struct {
	server.UnauthorizedResponse
}

func (response CreateSession401Response) VisitCreateSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

// Handler method

// CreateSession handles the POST /sessions endpoint.
func (c *SessionsController) CreateSession(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := CreateSessionRequest{}

	// Request body
	var body CreateSessionRequestBody
	if err := ctx.Bind(&body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// Determine which handler to call based on operation
	// Create handler
	// Available request body fields: Email, Password, RememberMe

	// TODO: Get organization ID from auth context
	orgID := uuid.New()

	// Create command - adjust field mapping based on your API
	cmd := commands.NewCreateSessionCommand(
		orgID,
		"",  // TODO: Map appropriate field from request.Body
		"",  // TODO: Map appropriate field from request.Body
		nil, // TODO: Map metadata if available
	)

	result, err := c.createHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusCreated, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// DeleteSession - DELETE /sessions/{id}
// ============================================================================

// Request types

type DeleteSessionRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type DeleteSessionResponse interface {
	VisitDeleteSessionResponse(w http.ResponseWriter) error
}

type DeleteSession200JSONResponse struct {
}

func (response DeleteSession200JSONResponse) VisitDeleteSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSession401Response struct {
	server.UnauthorizedResponse
}

func (response DeleteSession401Response) VisitDeleteSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

type DeleteSession404Response struct {
	server.NotFoundResponse
}

func (response DeleteSession404Response) VisitDeleteSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// DeleteSession handles the DELETE /sessions/{id} endpoint.
func (c *SessionsController) DeleteSession(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := DeleteSessionRequest{}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Create delete command from request
	cmd := commands.NewDeleteSessionCommand(
		request.ID,
	)

	err := c.deleteHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.NoContent(http.StatusNoContent)
}

// ============================================================================
// GetSession - GET /sessions/{id}
// ============================================================================

// Request types

type GetSessionRequest struct {
	ID uuid.UUID `json:"id"`
}

// Response types

type GetSessionResponse interface {
	VisitGetSessionResponse(w http.ResponseWriter) error
}

type GetSession200JSONResponse struct {
}

func (response GetSession200JSONResponse) VisitGetSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSession404Response struct {
	server.NotFoundResponse
}

func (response GetSession404Response) VisitGetSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// GetSession handles the GET /sessions/{id} endpoint.
func (c *SessionsController) GetSession(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := GetSessionRequest{}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Determine which handler to call based on operation
	// Create get query from request
	query := queries.NewGetSessionQuery(
		request.ID,
	)

	result, err := c.getHandler.Handle(reqCtx, query)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}

// ============================================================================
// UpdateSession - PATCH /sessions/{id}
// ============================================================================

// Request types
// UpdateSessionRequestBody defines the request body for UpdateSession
type UpdateSessionRequestBody struct {
	OrganizationID uuid.UUID `json:"organizationID"`
}

type UpdateSessionRequest struct {
	ID   uuid.UUID `json:"id"`
	Body *UpdateSessionRequestBody
}

// Response types

type UpdateSessionResponse interface {
	VisitUpdateSessionResponse(w http.ResponseWriter) error
}

type UpdateSession200JSONResponse struct {
}

func (response UpdateSession200JSONResponse) VisitUpdateSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateSession401Response struct {
	server.UnauthorizedResponse
}

func (response UpdateSession401Response) VisitUpdateSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response.UnauthorizedResponse)
}

type UpdateSession404Response struct {
	server.NotFoundResponse
}

func (response UpdateSession404Response) VisitUpdateSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response.NotFoundResponse)
}

// Handler method

// UpdateSession handles the PATCH /sessions/{id} endpoint.
func (c *SessionsController) UpdateSession(ctx echo.Context) error {
	reqCtx := ctx.Request().Context()
	request := UpdateSessionRequest{}

	// Path parameter "id"
	var id uuid.UUID
	if err := runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true}); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}
	request.ID = id

	// Request body
	var body UpdateSessionRequestBody
	if err := ctx.Bind(&body); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}
	request.Body = &body

	// Determine which handler to call based on operation
	// Update handler
	// Available request body fields: OrganizationID

	// Create update command - adjust field mapping based on your API
	cmd := commands.NewUpdateSessionCommand(
		request.ID, // Assumes all update operations have an ID path parameter
		nil,        // TODO: Map appropriate field from request.Body
		nil,        // TODO: Map appropriate field from request.Body
		nil,        // TODO: Map metadata if available
	)

	result, err := c.updateHandler.Handle(reqCtx, cmd)
	if err != nil {
		return err
	}

	return ctx.JSON(http.StatusOK, map[string]interface{}{
		"data": result,
	})
}
