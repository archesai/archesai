// Code generated by archesai/codegen. DO NOT EDIT.

package pipelines

import (
	"context"
	"errors"
	"log/slog"
	"time"

	"github.com/archesai/archesai/internal/database/postgresql"
	"github.com/google/uuid"
)

// ServiceInterface defines the business logic operations
type ServiceInterface interface {
	Create(ctx context.Context, request CreatePipelineRequestObject) (CreatePipelineResponseObject, error)
	Get(ctx context.Context, request GetPipelineRequestObject) (GetPipelineResponseObject, error)
	Update(ctx context.Context, request UpdatePipelineRequestObject) (UpdatePipelineResponseObject, error)
	Delete(ctx context.Context, request DeletePipelineRequestObject) (DeletePipelineResponseObject, error)
	List(ctx context.Context, request ListPipelinesRequestObject) (ListPipelinesResponseObject, error)
}

// Service implements the business logic
type Service struct {
	repo   Repository
	db     *postgresql.Queries
	logger *slog.Logger
}

// NewService creates a new service implementation
func NewService(repo Repository, db *postgresql.Queries, logger *slog.Logger) *Service {
	return &Service{
		repo:   repo,
		db:     db,
		logger: logger,
	}
}

// Create creates a new pipeline
func (s *Service) Create(ctx context.Context, request CreatePipelineRequestObject) (CreatePipelineResponseObject, error) {
	if request.Body == nil {
		return CreatePipeline400ApplicationProblemPlusJSONResponse{
			BadRequestApplicationProblemPlusJSONResponse: BadRequestApplicationProblemPlusJSONResponse{
				Detail: "Request body is required",
				Status: 400,
				Title:  "Bad Request",
				Type:   "about:blank",
			},
		}, nil
	}

	// Create entity from request
	entity := &Pipeline{
		ID:        uuid.New(),
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}

	// Call repository to persist
	created, err := s.repo.Create(ctx, entity)
	if err != nil {
		s.logger.Error("Failed to create pipeline", "error", err)
		return CreatePipeline400ApplicationProblemPlusJSONResponse{
			BadRequestApplicationProblemPlusJSONResponse: BadRequestApplicationProblemPlusJSONResponse{
				Detail: "Failed to create pipeline",
				Status: 400,
				Title:  "Bad Request",
				Type:   "about:blank",
			},
		}, nil
	}
	// Check if response type has Data field (wrapped response)
	return CreatePipeline201JSONResponse{
		Data: *created,
	}, nil
}

// Get gets a pipeline by ID
func (s *Service) Get(ctx context.Context, request GetPipelineRequestObject) (GetPipelineResponseObject, error) {
	// Call repository to fetch entity
	entity, err := s.repo.Get(ctx, request.ID)
	if err != nil {
		if errors.Is(err, ErrPipelineNotFound) {
			return GetPipeline404ApplicationProblemPlusJSONResponse{
				NotFoundApplicationProblemPlusJSONResponse: NotFoundApplicationProblemPlusJSONResponse{
					Detail: "Pipeline not found",
					Status: 404,
					Title:  "Not Found",
					Type:   "about:blank",
				},
			}, nil
		}

		s.logger.Error("Failed to get pipeline", "error", err, "id", request.ID)
		return GetPipeline404ApplicationProblemPlusJSONResponse{
			NotFoundApplicationProblemPlusJSONResponse: NotFoundApplicationProblemPlusJSONResponse{
				Detail: "Failed to retrieve pipeline",
				Status: 404,
				Title:  "Not Found",
				Type:   "about:blank",
			},
		}, nil
	}

	return GetPipeline200JSONResponse{
		Data: *entity,
	}, nil
}

// Update updates a pipeline
func (s *Service) Update(ctx context.Context, request UpdatePipelineRequestObject) (UpdatePipelineResponseObject, error) {
	if request.Body == nil {
		return UpdatePipeline404ApplicationProblemPlusJSONResponse{
			NotFoundApplicationProblemPlusJSONResponse: NotFoundApplicationProblemPlusJSONResponse{
				Detail: "Request body is required",
				Status: 400,
				Title:  "Bad Request",
				Type:   "about:blank",
			},
		}, nil
	}

	// Get existing entity to verify it exists
	existing, err := s.repo.Get(ctx, request.ID)
	if err != nil {
		if errors.Is(err, ErrPipelineNotFound) {
			return UpdatePipeline404ApplicationProblemPlusJSONResponse{
				NotFoundApplicationProblemPlusJSONResponse: NotFoundApplicationProblemPlusJSONResponse{
					Detail: "Pipeline not found",
					Status: 404,
					Title:  "Not Found",
					Type:   "about:blank",
				},
			}, nil
		}
		s.logger.Error("Failed to get pipeline for update", "error", err, "id", request.ID)
		return UpdatePipeline404ApplicationProblemPlusJSONResponse{
			NotFoundApplicationProblemPlusJSONResponse: NotFoundApplicationProblemPlusJSONResponse{
				Detail: "Internal server error",
				Status: 500,
				Title:  "Internal Server Error",
				Type:   "about:blank",
			},
		}, nil
	}

	// Update the entity with current timestamp
	existing.UpdatedAt = time.Now()

	// Call repository to persist changes
	updated, err := s.repo.Update(ctx, request.ID, existing)
	if err != nil {
		s.logger.Error("Failed to update pipeline", "error", err, "id", request.ID)
		return UpdatePipeline404ApplicationProblemPlusJSONResponse{
			NotFoundApplicationProblemPlusJSONResponse: NotFoundApplicationProblemPlusJSONResponse{
				Detail: "Failed to update pipeline",
				Status: 500,
				Title:  "Internal Server Error",
				Type:   "about:blank",
			},
		}, nil
	}

	return UpdatePipeline200JSONResponse{
		Data: *updated,
	}, nil
}

// Delete deletes a pipeline
func (s *Service) Delete(ctx context.Context, request DeletePipelineRequestObject) (DeletePipelineResponseObject, error) {
	// Check if entity exists first
	_, err := s.repo.Get(ctx, request.ID)
	if err != nil {
		if errors.Is(err, ErrPipelineNotFound) {
			return DeletePipeline404ApplicationProblemPlusJSONResponse{
				NotFoundApplicationProblemPlusJSONResponse: NotFoundApplicationProblemPlusJSONResponse{
					Detail: "Pipeline not found",
					Status: 404,
					Title:  "Not Found",
					Type:   "about:blank",
				},
			}, nil
		}
		s.logger.Error("Failed to get pipeline for deletion", "error", err, "id", request.ID)
		return DeletePipeline404ApplicationProblemPlusJSONResponse{
			NotFoundApplicationProblemPlusJSONResponse: NotFoundApplicationProblemPlusJSONResponse{
				Detail: "Internal server error",
				Status: 500,
				Title:  "Internal Server Error",
				Type:   "about:blank",
			},
		}, nil
	}

	// Delete the entity
	err = s.repo.Delete(ctx, request.ID)
	if err != nil {
		s.logger.Error("Failed to delete pipeline", "error", err, "id", request.ID)
		return DeletePipeline404ApplicationProblemPlusJSONResponse{
			NotFoundApplicationProblemPlusJSONResponse: NotFoundApplicationProblemPlusJSONResponse{
				Detail: "Failed to delete pipeline",
				Status: 500,
				Title:  "Internal Server Error",
				Type:   "about:blank",
			},
		}, nil
	}

	return DeletePipeline200JSONResponse{}, nil
}

// List lists all pipelines
func (s *Service) List(ctx context.Context, request ListPipelinesRequestObject) (ListPipelinesResponseObject, error) {
	// Call repository to fetch entities using the request parameters
	entities, total, err := s.repo.List(ctx, request.Params)
	if err != nil {
		s.logger.Error("Failed to list pipelines", "error", err)
		return ListPipelines400ApplicationProblemPlusJSONResponse{
			BadRequestApplicationProblemPlusJSONResponse: BadRequestApplicationProblemPlusJSONResponse{
				Detail: "Failed to list pipelines",
				Status: 500,
				Title:  "Internal Server Error",
				Type:   "about:blank",
			},
		}, nil
	}

	// Convert entities to response format
	var responseData []Pipeline
	for _, entity := range entities {
		if entity != nil {
			responseData = append(responseData, *entity)
		}
	}

	return ListPipelines200JSONResponse{
		Data: responseData,
		Meta: struct {
			Total float32 `json:"total"`
		}{
			Total: float32(total),
		},
	}, nil
}
