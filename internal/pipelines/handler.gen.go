// Package pipelines provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package pipelines

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

const (
	BearerAuthScopes    = "bearerAuth.Scopes"
	SessionCookieScopes = "sessionCookie.Scopes"
)

// ProblemDetails represents an RFC 7807 problem details response.
type ProblemDetails struct {
	Type     string `json:"type"`
	Title    string `json:"title"`
	Status   int    `json:"status"`
	Detail   string `json:"detail,omitempty"`
	Instance string `json:"instance,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List pipelines
	// (GET /pipelines)
	ListPipelines(ctx echo.Context, params ListPipelinesParams) error
	// Create a pipeline
	// (POST /pipelines)
	CreatePipeline(ctx echo.Context) error
	// Delete a pipeline
	// (DELETE /pipelines/{id})
	DeletePipeline(ctx echo.Context, id uuid.UUID) error
	// Find a pipeline
	// (GET /pipelines/{id})
	GetPipeline(ctx echo.Context, id uuid.UUID) error
	// Update a pipeline
	// (PATCH /pipelines/{id})
	UpdatePipeline(ctx echo.Context, id uuid.UUID) error
	// Get execution plan for a pipeline
	// (GET /pipelines/{id}/execution-plans)
	GetPipelineExecutionPlan(ctx echo.Context, id uuid.UUID) error
	// Validate a pipeline configuration
	// (POST /pipelines/{id}/execution-plans)
	ValidatePipelineExecutionPlan(ctx echo.Context, id uuid.UUID) error
	// Get all steps for a pipeline
	// (GET /pipelines/{id}/steps)
	GetPipelineSteps(ctx echo.Context, id uuid.UUID) error
	// Add a step to a pipeline
	// (POST /pipelines/{id}/steps)
	CreatePipelineStep(ctx echo.Context, id uuid.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListPipelines converts echo context to params.
func (w *ServerInterfaceWrapper) ListPipelines(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPipelinesParams

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("deepObject", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListPipelines(ctx, params)
	return err
}

// CreatePipeline converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePipeline(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreatePipeline(ctx)
	return err
}

// DeletePipeline converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePipeline(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id uuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePipeline(ctx, id)
	return err
}

// GetPipeline converts echo context to params.
func (w *ServerInterfaceWrapper) GetPipeline(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id uuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPipeline(ctx, id)
	return err
}

// UpdatePipeline converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePipeline(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id uuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdatePipeline(ctx, id)
	return err
}

// GetPipelineExecutionPlan converts echo context to params.
func (w *ServerInterfaceWrapper) GetPipelineExecutionPlan(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id uuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPipelineExecutionPlan(ctx, id)
	return err
}

// ValidatePipelineExecutionPlan converts echo context to params.
func (w *ServerInterfaceWrapper) ValidatePipelineExecutionPlan(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id uuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ValidatePipelineExecutionPlan(ctx, id)
	return err
}

// GetPipelineSteps converts echo context to params.
func (w *ServerInterfaceWrapper) GetPipelineSteps(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id uuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPipelineSteps(ctx, id)
	return err
}

// CreatePipelineStep converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePipelineStep(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id uuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreatePipelineStep(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}
	router.GET(baseURL+"/pipelines", wrapper.ListPipelines)
	router.POST(baseURL+"/pipelines", wrapper.CreatePipeline)
	router.DELETE(baseURL+"/pipelines/:id", wrapper.DeletePipeline)
	router.GET(baseURL+"/pipelines/:id", wrapper.GetPipeline)
	router.PATCH(baseURL+"/pipelines/:id", wrapper.UpdatePipeline)
	router.GET(baseURL+"/pipelines/:id/execution-plans", wrapper.GetPipelineExecutionPlan)
	router.POST(baseURL+"/pipelines/:id/execution-plans", wrapper.ValidatePipelineExecutionPlan)
	router.GET(baseURL+"/pipelines/:id/steps", wrapper.GetPipelineSteps)
	router.POST(baseURL+"/pipelines/:id/steps", wrapper.CreatePipelineStep)

}

type BadRequestResponse ProblemDetails

type NotFoundResponse ProblemDetails

type UnauthorizedResponse ProblemDetails

type ListPipelinesRequestObject struct {
	Params ListPipelinesParams
}

type ListPipelinesResponseObject interface {
	VisitListPipelinesResponse(w http.ResponseWriter) error
}

type ListPipelines200JSONResponse struct {
	Data []Pipeline `json:"data"`
	Meta struct {
		Total int64 `json:"total"`
	} `json:"meta"`
}

func (response ListPipelines200JSONResponse) VisitListPipelinesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListPipelines400Response = BadRequestResponse

func (response ListPipelines400Response) VisitListPipelinesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ListPipelines401Response = UnauthorizedResponse

func (response ListPipelines401Response) VisitListPipelinesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ListPipelines404Response = NotFoundResponse

func (response ListPipelines404Response) VisitListPipelinesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreatePipelineRequestObject struct {
	Body *CreatePipelineRequestBody
}

type CreatePipelineResponseObject interface {
	VisitCreatePipelineResponse(w http.ResponseWriter) error
}
type CreatePipeline201JSONResponse struct {
	// Data Schema for pipelines entity
	Data Pipeline `json:"data"`
}

func (response CreatePipeline201JSONResponse) VisitCreatePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreatePipeline400Response = BadRequestResponse

func (response CreatePipeline400Response) VisitCreatePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreatePipeline401Response = UnauthorizedResponse

func (response CreatePipeline401Response) VisitCreatePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeletePipelineRequestObject struct {
	ID uuid.UUID `json:"id"`
}

type DeletePipelineResponseObject interface {
	VisitDeletePipelineResponse(w http.ResponseWriter) error
}
type DeletePipeline200JSONResponse struct {
	// Data Schema for pipelines entity
	Data Pipeline `json:"data"`
}

func (response DeletePipeline200JSONResponse) VisitDeletePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeletePipeline400Response = BadRequestResponse

func (response DeletePipeline400Response) VisitDeletePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeletePipeline401Response = UnauthorizedResponse

func (response DeletePipeline401Response) VisitDeletePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeletePipeline404Response = NotFoundResponse

func (response DeletePipeline404Response) VisitDeletePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPipelineRequestObject struct {
	ID uuid.UUID `json:"id"`
}

type GetPipelineResponseObject interface {
	VisitGetPipelineResponse(w http.ResponseWriter) error
}

type GetPipeline200JSONResponse struct {
	Data []Pipeline `json:"data"`
	Meta struct {
		Total int64 `json:"total"`
	} `json:"meta"`
}

func (response GetPipeline200JSONResponse) VisitGetPipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPipeline400Response = BadRequestResponse

func (response GetPipeline400Response) VisitGetPipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetPipeline401Response = UnauthorizedResponse

func (response GetPipeline401Response) VisitGetPipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetPipeline404Response = NotFoundResponse

func (response GetPipeline404Response) VisitGetPipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePipelineRequestObject struct {
	ID   uuid.UUID `json:"id"`
	Body *UpdatePipelineRequestBody
}

type UpdatePipelineResponseObject interface {
	VisitUpdatePipelineResponse(w http.ResponseWriter) error
}
type UpdatePipeline200JSONResponse struct {
	// Data Schema for pipelines entity
	Data Pipeline `json:"data"`
}

func (response UpdatePipeline200JSONResponse) VisitUpdatePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePipeline400Response = BadRequestResponse

func (response UpdatePipeline400Response) VisitUpdatePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePipeline401Response = UnauthorizedResponse

func (response UpdatePipeline401Response) VisitUpdatePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePipeline404Response = NotFoundResponse

func (response UpdatePipeline404Response) VisitUpdatePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPipelineExecutionPlanRequestObject struct {
	ID uuid.UUID `json:"id"`
}

type GetPipelineExecutionPlanResponseObject interface {
	VisitGetPipelineExecutionPlanResponse(w http.ResponseWriter) error
}

type GetPipelineExecutionPlan200JSONResponse struct {
	Data []Pipeline `json:"data"`
	Meta struct {
		Total int64 `json:"total"`
	} `json:"meta"`
}

func (response GetPipelineExecutionPlan200JSONResponse) VisitGetPipelineExecutionPlanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPipelineExecutionPlan400Response = BadRequestResponse

func (response GetPipelineExecutionPlan400Response) VisitGetPipelineExecutionPlanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetPipelineExecutionPlan401Response = UnauthorizedResponse

func (response GetPipelineExecutionPlan401Response) VisitGetPipelineExecutionPlanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetPipelineExecutionPlan404Response = NotFoundResponse

func (response GetPipelineExecutionPlan404Response) VisitGetPipelineExecutionPlanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ValidatePipelineExecutionPlanRequestObject struct {
	ID uuid.UUID `json:"id"`
}

type ValidatePipelineExecutionPlanResponseObject interface {
	VisitValidatePipelineExecutionPlanResponse(w http.ResponseWriter) error
}
type ValidatePipelineExecutionPlan201JSONResponse struct {
	// Data Schema for pipelines entity
	Data Pipeline `json:"data"`
}

func (response ValidatePipelineExecutionPlan201JSONResponse) VisitValidatePipelineExecutionPlanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type ValidatePipelineExecutionPlan400Response = BadRequestResponse

func (response ValidatePipelineExecutionPlan400Response) VisitValidatePipelineExecutionPlanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ValidatePipelineExecutionPlan401Response = UnauthorizedResponse

func (response ValidatePipelineExecutionPlan401Response) VisitValidatePipelineExecutionPlanResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetPipelineStepsRequestObject struct {
	ID uuid.UUID `json:"id"`
}

type GetPipelineStepsResponseObject interface {
	VisitGetPipelineStepsResponse(w http.ResponseWriter) error
}

type GetPipelineSteps200JSONResponse struct {
	Data []Pipeline `json:"data"`
	Meta struct {
		Total int64 `json:"total"`
	} `json:"meta"`
}

func (response GetPipelineSteps200JSONResponse) VisitGetPipelineStepsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPipelineSteps400Response = BadRequestResponse

func (response GetPipelineSteps400Response) VisitGetPipelineStepsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetPipelineSteps401Response = UnauthorizedResponse

func (response GetPipelineSteps401Response) VisitGetPipelineStepsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetPipelineSteps404Response = NotFoundResponse

func (response GetPipelineSteps404Response) VisitGetPipelineStepsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreatePipelineStepRequestObject struct {
	ID   uuid.UUID `json:"id"`
	Body *CreatePipelineStepRequestBody
}

type CreatePipelineStepResponseObject interface {
	VisitCreatePipelineStepResponse(w http.ResponseWriter) error
}
type CreatePipelineStep201JSONResponse struct {
	// Data Schema for pipelines entity
	Data Pipeline `json:"data"`
}

func (response CreatePipelineStep201JSONResponse) VisitCreatePipelineStepResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreatePipelineStep400Response = BadRequestResponse

func (response CreatePipelineStep400Response) VisitCreatePipelineStepResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreatePipelineStep401Response = UnauthorizedResponse

func (response CreatePipelineStep401Response) VisitCreatePipelineStepResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List pipelines
	// (GET /pipelines)
	ListPipelines(ctx context.Context, request ListPipelinesRequestObject) (ListPipelinesResponseObject, error)
	// Create a pipeline
	// (POST /pipelines)
	CreatePipeline(ctx context.Context, request CreatePipelineRequestObject) (CreatePipelineResponseObject, error)
	// Delete a pipeline
	// (DELETE /pipelines/{id})
	DeletePipeline(ctx context.Context, request DeletePipelineRequestObject) (DeletePipelineResponseObject, error)
	// Find a pipeline
	// (GET /pipelines/{id})
	GetPipeline(ctx context.Context, request GetPipelineRequestObject) (GetPipelineResponseObject, error)
	// Update a pipeline
	// (PATCH /pipelines/{id})
	UpdatePipeline(ctx context.Context, request UpdatePipelineRequestObject) (UpdatePipelineResponseObject, error)
	// Get execution plan for a pipeline
	// (GET /pipelines/{id}/execution-plans)
	GetPipelineExecutionPlan(ctx context.Context, request GetPipelineExecutionPlanRequestObject) (GetPipelineExecutionPlanResponseObject, error)
	// Validate a pipeline configuration
	// (POST /pipelines/{id}/execution-plans)
	ValidatePipelineExecutionPlan(ctx context.Context, request ValidatePipelineExecutionPlanRequestObject) (ValidatePipelineExecutionPlanResponseObject, error)
	// Get all steps for a pipeline
	// (GET /pipelines/{id}/steps)
	GetPipelineSteps(ctx context.Context, request GetPipelineStepsRequestObject) (GetPipelineStepsResponseObject, error)
	// Add a step to a pipeline
	// (POST /pipelines/{id}/steps)
	CreatePipelineStep(ctx context.Context, request CreatePipelineStepRequestObject) (CreatePipelineStepResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ListPipelines operation middleware
func (sh *strictHandler) ListPipelines(ctx echo.Context, params ListPipelinesParams) error {
	var request ListPipelinesRequestObject
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListPipelines(ctx.Request().Context(), request.(ListPipelinesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListPipelines")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ListPipelinesResponseObject); ok {
		return validResponse.VisitListPipelinesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreatePipeline operation middleware
func (sh *strictHandler) CreatePipeline(ctx echo.Context) error {
	var request CreatePipelineRequestObject
	var body CreatePipelineRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePipeline(ctx.Request().Context(), request.(CreatePipelineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePipeline")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreatePipelineResponseObject); ok {
		return validResponse.VisitCreatePipelineResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeletePipeline operation middleware
func (sh *strictHandler) DeletePipeline(ctx echo.Context, id uuid.UUID) error {
	var request DeletePipelineRequestObject
	request.ID = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePipeline(ctx.Request().Context(), request.(DeletePipelineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePipeline")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeletePipelineResponseObject); ok {
		return validResponse.VisitDeletePipelineResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetPipeline operation middleware
func (sh *strictHandler) GetPipeline(ctx echo.Context, id uuid.UUID) error {
	var request GetPipelineRequestObject
	request.ID = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPipeline(ctx.Request().Context(), request.(GetPipelineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPipeline")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetPipelineResponseObject); ok {
		return validResponse.VisitGetPipelineResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdatePipeline operation middleware
func (sh *strictHandler) UpdatePipeline(ctx echo.Context, id uuid.UUID) error {
	var request UpdatePipelineRequestObject
	request.ID = id
	var body UpdatePipelineRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePipeline(ctx.Request().Context(), request.(UpdatePipelineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePipeline")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdatePipelineResponseObject); ok {
		return validResponse.VisitUpdatePipelineResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetPipelineExecutionPlan operation middleware
func (sh *strictHandler) GetPipelineExecutionPlan(ctx echo.Context, id uuid.UUID) error {
	var request GetPipelineExecutionPlanRequestObject
	request.ID = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPipelineExecutionPlan(ctx.Request().Context(), request.(GetPipelineExecutionPlanRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPipelineExecutionPlan")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetPipelineExecutionPlanResponseObject); ok {
		return validResponse.VisitGetPipelineExecutionPlanResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ValidatePipelineExecutionPlan operation middleware
func (sh *strictHandler) ValidatePipelineExecutionPlan(ctx echo.Context, id uuid.UUID) error {
	var request ValidatePipelineExecutionPlanRequestObject
	request.ID = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ValidatePipelineExecutionPlan(ctx.Request().Context(), request.(ValidatePipelineExecutionPlanRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ValidatePipelineExecutionPlan")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ValidatePipelineExecutionPlanResponseObject); ok {
		return validResponse.VisitValidatePipelineExecutionPlanResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetPipelineSteps operation middleware
func (sh *strictHandler) GetPipelineSteps(ctx echo.Context, id uuid.UUID) error {
	var request GetPipelineStepsRequestObject
	request.ID = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetPipelineSteps(ctx.Request().Context(), request.(GetPipelineStepsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPipelineSteps")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetPipelineStepsResponseObject); ok {
		return validResponse.VisitGetPipelineStepsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreatePipelineStep operation middleware
func (sh *strictHandler) CreatePipelineStep(ctx echo.Context, id uuid.UUID) error {
	var request CreatePipelineStepRequestObject
	request.ID = id
	var body CreatePipelineStepRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePipelineStep(ctx.Request().Context(), request.(CreatePipelineStepRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePipelineStep")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreatePipelineStepResponseObject); ok {
		return validResponse.VisitCreatePipelineStepResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
