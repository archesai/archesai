// Package pipelines provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package pipelines

import (
	"encoding/json"
	"time"

	"github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for PipelineStepStatus.
const (
	Completed PipelineStepStatus = "completed"
	Failed    PipelineStepStatus = "failed"
	Pending   PipelineStepStatus = "pending"
	Ready     PipelineStepStatus = "ready"
	Running   PipelineStepStatus = "running"
	Skipped   PipelineStepStatus = "skipped"
)

// Defines values for FindManyPipelinesParamsSortField.
const (
	CreatedAt      FindManyPipelinesParamsSortField = "createdAt"
	Description    FindManyPipelinesParamsSortField = "description"
	Id             FindManyPipelinesParamsSortField = "id"
	Name           FindManyPipelinesParamsSortField = "name"
	OrganizationId FindManyPipelinesParamsSortField = "organizationId"
	UpdatedAt      FindManyPipelinesParamsSortField = "updatedAt"
)

// Defines values for FindManyPipelinesParamsSortOrder.
const (
	Asc  FindManyPipelinesParamsSortOrder = "asc"
	Desc FindManyPipelinesParamsSortOrder = "desc"
)

// Base defines model for Base.
type Base struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// Id Universally Unique Identifier
	Id UUID `json:"id" yaml:"id"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// FilterNode A recursive filter node that can be a condition or group
type FilterNode = interface{}

// OrganizationReference defines model for OrganizationReference.
type OrganizationReference struct {
	// OrganizationId Universally Unique Identifier
	OrganizationId UUID `json:"organizationId" yaml:"organizationId"`
}

// Page Pagination (page number & size)
type Page struct {
	Number int `json:"number,omitempty,omitzero" yaml:"number,omitempty"`
	Size   int `json:"size,omitempty,omitzero" yaml:"size,omitempty"`
}

// Pipeline defines model for Pipeline.
type Pipeline struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// Description Detailed description of the pipeline's purpose
	Description string `json:"description,omitempty,omitzero" yaml:"description,omitempty"`

	// Id Universally Unique Identifier
	Id UUID `json:"id" yaml:"id"`

	// Name The pipeline's display name
	Name string `json:"name" yaml:"name"`

	// OrganizationId Universally Unique Identifier
	OrganizationId UUID `json:"organizationId" yaml:"organizationId"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// PipelineStep defines model for PipelineStep.
type PipelineStep struct {
	// Config Configuration parameters for the tool
	Config map[string]interface{} `json:"config,omitempty,omitzero" yaml:"config,omitempty"`

	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// Dependencies IDs of steps this step depends on
	Dependencies []openapi_types.UUID `json:"dependencies,omitempty,omitzero" yaml:"dependencies,omitempty"`

	// Description Description of what this step does
	Description string `json:"description,omitempty,omitzero" yaml:"description,omitempty"`

	// Id Universally Unique Identifier
	Id UUID `json:"id" yaml:"id"`

	// Name Name of the step
	Name string `json:"name" yaml:"name"`

	// PipelineId The ID of the pipeline this step belongs to
	PipelineId openapi_types.UUID `json:"pipelineId" yaml:"pipelineId"`

	// Position Position in the pipeline for ordering
	Position int `json:"position,omitempty,omitzero" yaml:"position,omitempty"`

	// Retries Number of retries on failure
	Retries int `json:"retries,omitempty,omitzero" yaml:"retries,omitempty"`

	// Status Current status of the step
	Status PipelineStepStatus `json:"status,omitempty,omitzero" yaml:"status,omitempty"`

	// Timeout Timeout in seconds
	Timeout int `json:"timeout,omitempty,omitzero" yaml:"timeout,omitempty"`

	// ToolId The ID of the tool to execute
	ToolId openapi_types.UUID `json:"toolId" yaml:"toolId"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// PipelineStepStatus Current status of the step
type PipelineStepStatus string

// Problem RFC 7807 (Problem Details) compliant error response
type Problem struct {
	// Detail Human-readable explanation specific to this occurrence
	Detail string `json:"detail" yaml:"detail"`

	// Errors Additional validation errors for specific fields
	Errors []ValidationError `json:"errors,omitempty,omitzero" yaml:"errors,omitempty"`

	// Instance URI identifying the specific occurrence
	Instance string `json:"instance,omitempty,omitzero" yaml:"instance,omitempty"`

	// Status HTTP status code
	Status int `json:"status" yaml:"status"`

	// Title Short, human-readable summary
	Title string `json:"title" yaml:"title"`

	// Type URI identifying the problem type
	Type string `json:"type" yaml:"type"`
}

// UUID Universally Unique Identifier
type UUID = uuid.UUID

// ValidationError Individual field validation error
type ValidationError struct {
	// Field The field path that failed validation
	Field string `json:"field" yaml:"field"`

	// Message Human-readable error message
	Message string `json:"message" yaml:"message"`

	// Value The invalid value that was provided
	Value ValidationError_Value `json:"value,omitempty,omitzero" yaml:"value,omitempty"`
}

// ValidationErrorValue0 defines model for .
type ValidationErrorValue0 = string

// ValidationErrorValue1 defines model for .
type ValidationErrorValue1 = float32

// ValidationErrorValue2 defines model for .
type ValidationErrorValue2 = bool

// ValidationError_Value The invalid value that was provided
type ValidationError_Value struct {
	union json.RawMessage
}

// PageQuery Pagination (page number & size)
type PageQuery = Page

// PipelinesFilter A recursive filter node that can be a condition or group
type PipelinesFilter = FilterNode

// PipelinesSort defines model for PipelinesSort.
type PipelinesSort = []struct {
	Field string `json:"field" yaml:"field"`
	Order string `json:"order" yaml:"order"`
}

// BadRequest RFC 7807 (Problem Details) compliant error response
type BadRequest = Problem

// NotFound RFC 7807 (Problem Details) compliant error response
type NotFound = Problem

// Unauthorized RFC 7807 (Problem Details) compliant error response
type Unauthorized = Problem

// FindManyPipelinesParams defines parameters for FindManyPipelines.
type FindManyPipelinesParams struct {
	// Filter Filter pipelines by field values. Supported fields:
	// - createdAt, id, updatedAt, description, name, organizationId
	Filter PipelinesFilter `json:"filter,omitempty,omitzero" yaml:"filter,omitempty"`

	// Page The page parameter
	Page PageQuery `form:"page,omitempty" json:"page,omitempty,omitzero" yaml:"page,omitempty"`

	// Sort The sort parameter
	Sort PipelinesSort `form:"sort,omitempty" json:"sort,omitempty,omitzero" yaml:"sort,omitempty"`
}

// FindManyPipelinesParamsSortField defines parameters for FindManyPipelines.
type FindManyPipelinesParamsSortField string

// FindManyPipelinesParamsSortOrder defines parameters for FindManyPipelines.
type FindManyPipelinesParamsSortOrder string

// CreatePipelineJSONBody defines parameters for CreatePipeline.
type CreatePipelineJSONBody struct {
	// Description The pipeline description
	Description string `json:"description,omitempty,omitzero" yaml:"description,omitempty"`

	// Name The pipeline name
	Name string `json:"name,omitempty,omitzero" yaml:"name,omitempty"`
}

// UpdatePipelineJSONBody defines parameters for UpdatePipeline.
type UpdatePipelineJSONBody struct {
	// Description The pipeline description
	Description string `json:"description,omitempty,omitzero" yaml:"description,omitempty"`

	// Name The pipeline name
	Name string `json:"name,omitempty,omitzero" yaml:"name,omitempty"`
}

// CreatePipelineStepJSONBody defines parameters for CreatePipelineStep.
type CreatePipelineStepJSONBody struct {
	// Config Configuration for the tool
	Config map[string]interface{} `json:"config,omitempty,omitzero" yaml:"config,omitempty"`

	// Dependencies IDs of steps this step depends on
	Dependencies []openapi_types.UUID `json:"dependencies,omitempty,omitzero" yaml:"dependencies,omitempty"`

	// Description Description of what this step does
	Description string `json:"description,omitempty,omitzero" yaml:"description,omitempty"`

	// Name Name of the step
	Name string `json:"name" yaml:"name"`

	// Position Position in the pipeline (for ordering)
	Position int `json:"position,omitempty,omitzero" yaml:"position,omitempty"`

	// ToolId The ID of the tool to use
	ToolId openapi_types.UUID `json:"toolId" yaml:"toolId"`
}

// CreatePipelineJSONRequestBody defines body for CreatePipeline for application/json ContentType.
type CreatePipelineJSONRequestBody CreatePipelineJSONBody

// UpdatePipelineJSONRequestBody defines body for UpdatePipeline for application/json ContentType.
type UpdatePipelineJSONRequestBody UpdatePipelineJSONBody

// CreatePipelineStepJSONRequestBody defines body for CreatePipelineStep for application/json ContentType.
type CreatePipelineStepJSONRequestBody CreatePipelineStepJSONBody

// AsValidationErrorValue0 returns the union data inside the ValidationError_Value as a ValidationErrorValue0
func (t ValidationError_Value) AsValidationErrorValue0() (ValidationErrorValue0, error) {
	var body ValidationErrorValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorValue0 overwrites any union data inside the ValidationError_Value as the provided ValidationErrorValue0
func (t *ValidationError_Value) FromValidationErrorValue0(v ValidationErrorValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorValue0 performs a merge with any union data inside the ValidationError_Value, using the provided ValidationErrorValue0
func (t *ValidationError_Value) MergeValidationErrorValue0(v ValidationErrorValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorValue1 returns the union data inside the ValidationError_Value as a ValidationErrorValue1
func (t ValidationError_Value) AsValidationErrorValue1() (ValidationErrorValue1, error) {
	var body ValidationErrorValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorValue1 overwrites any union data inside the ValidationError_Value as the provided ValidationErrorValue1
func (t *ValidationError_Value) FromValidationErrorValue1(v ValidationErrorValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorValue1 performs a merge with any union data inside the ValidationError_Value, using the provided ValidationErrorValue1
func (t *ValidationError_Value) MergeValidationErrorValue1(v ValidationErrorValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorValue2 returns the union data inside the ValidationError_Value as a ValidationErrorValue2
func (t ValidationError_Value) AsValidationErrorValue2() (ValidationErrorValue2, error) {
	var body ValidationErrorValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorValue2 overwrites any union data inside the ValidationError_Value as the provided ValidationErrorValue2
func (t *ValidationError_Value) FromValidationErrorValue2(v ValidationErrorValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorValue2 performs a merge with any union data inside the ValidationError_Value, using the provided ValidationErrorValue2
func (t *ValidationError_Value) MergeValidationErrorValue2(v ValidationErrorValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ValidationError_Value) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Value) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
