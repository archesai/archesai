// Package pipelines provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package pipelines

import (
	"time"

	"github.com/google/uuid"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for PipelineStepStatus.
const (
	Completed PipelineStepStatus = "completed"
	Failed    PipelineStepStatus = "failed"
	Pending   PipelineStepStatus = "pending"
	Ready     PipelineStepStatus = "ready"
	Running   PipelineStepStatus = "running"
	Skipped   PipelineStepStatus = "skipped"
)

// Defines values for ListPipelinesParamsSortField.
const (
	CreatedAt      ListPipelinesParamsSortField = "createdAt"
	Description    ListPipelinesParamsSortField = "description"
	ID             ListPipelinesParamsSortField = "id"
	Name           ListPipelinesParamsSortField = "name"
	OrganizationID ListPipelinesParamsSortField = "organizationID"
	UpdatedAt      ListPipelinesParamsSortField = "updatedAt"
)

// Defines values for ListPipelinesParamsSortOrder.
const (
	Asc  ListPipelinesParamsSortOrder = "asc"
	Desc ListPipelinesParamsSortOrder = "desc"
)

// Base defines model for Base.
type Base struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// ID Universally Unique IDentifier
	ID UUID `json:"id" yaml:"id"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// FilterNode A recursive filter node that can be a condition or group
type FilterNode = interface{}

// OrganizationReference defines model for OrganizationReference.
type OrganizationReference struct {
	// OrganizationID Universally Unique IDentifier
	OrganizationID UUID `json:"organizationID" yaml:"organizationID"`
}

// Page Pagination (page number & size)
type Page struct {
	Number int `json:"number,omitempty,omitzero" yaml:"number,omitempty"`
	Size   int `json:"size,omitempty,omitzero" yaml:"size,omitempty"`
}

// Pipeline defines model for Pipeline.
type Pipeline struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// Description Detailed description of the pipeline's purpose
	Description string `json:"description,omitempty,omitzero" yaml:"description,omitempty"`

	// ID Universally Unique IDentifier
	ID UUID `json:"id" yaml:"id"`

	// Name The pipeline's display name
	Name string `json:"name" yaml:"name"`

	// OrganizationID Universally Unique IDentifier
	OrganizationID UUID `json:"organizationID" yaml:"organizationID"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// PipelineStep defines model for PipelineStep.
type PipelineStep struct {
	// Config Configuration parameters for the tool
	Config map[string]interface{} `json:"config,omitempty,omitzero" yaml:"config,omitempty"`

	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`

	// Dependencies IDs of steps this step depends on
	Dependencies []UUID `json:"dependencies,omitempty,omitzero" yaml:"dependencies,omitempty"`

	// Description Description of what this step does
	Description string `json:"description,omitempty,omitzero" yaml:"description,omitempty"`

	// ID Universally Unique IDentifier
	ID UUID `json:"id" yaml:"id"`

	// Name Name of the step
	Name       string `json:"name" yaml:"name"`
	PipelineID UUID   `json:"pipelineID" yaml:"pipelineID"`

	// Position Position in the pipeline for ordering
	Position int `json:"position,omitempty,omitzero" yaml:"position,omitempty"`

	// Retries Number of retries on failure
	Retries int `json:"retries,omitempty,omitzero" yaml:"retries,omitempty"`

	// Status Current status of the step
	Status PipelineStepStatus `json:"status,omitempty,omitzero" yaml:"status,omitempty"`

	// Timeout Timeout in seconds
	Timeout int  `json:"timeout,omitempty,omitzero" yaml:"timeout,omitempty"`
	ToolID  UUID `json:"toolID" yaml:"toolID"`

	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// PipelineStepStatus Current status of the step
type PipelineStepStatus string

// Problem RFC 7807 (Problem Details) compliant error response
type Problem struct {
	// Detail Human-readable explanation specific to this occurrence
	Detail string `json:"detail,omitempty,omitzero" yaml:"detail,omitempty"`

	// Instance URI identifying the specific occurrence
	Instance string `json:"instance,omitempty,omitzero" yaml:"instance,omitempty"`

	// Status HTTP status code
	Status int `json:"status" yaml:"status"`

	// Title Short, human-readable summary
	Title string `json:"title" yaml:"title"`

	// Type URI identifying the problem type
	Type string `json:"type,omitempty,omitzero" yaml:"type,omitempty"`
}

// UUID Universally Unique IDentifier
type UUID = uuid.UUID

// PageQuery Pagination (page number & size)
type PageQuery = Page

// PipelinesFilter A recursive filter node that can be a condition or group
type PipelinesFilter = FilterNode

// PipelinesSort defines model for PipelinesSort.
type PipelinesSort = []struct {
	Field string `json:"field" yaml:"field"`
	Order string `json:"order" yaml:"order"`
}

// BadRequest RFC 7807 (Problem Details) compliant error response
type BadRequest = Problem

// NotFound RFC 7807 (Problem Details) compliant error response
type NotFound = Problem

// Unauthorized RFC 7807 (Problem Details) compliant error response
type Unauthorized = Problem

// ListPipelinesParams defines parameters for ListPipelines.
type ListPipelinesParams struct {
	// Filter Filter pipelines by field values. Supported fields:
	// - createdAt, id, updatedAt, description, name, organizationID
	Filter PipelinesFilter `json:"filter,omitempty,omitzero" yaml:"filter,omitempty"`

	// Page The page parameter
	Page PageQuery `form:"page,omitempty" json:"page,omitempty,omitzero" yaml:"page,omitempty"`

	// Sort The sort parameter
	Sort PipelinesSort `form:"sort,omitempty" json:"sort,omitempty,omitzero" yaml:"sort,omitempty"`
}

// ListPipelinesParamsSortField defines parameters for ListPipelines.
type ListPipelinesParamsSortField string

// ListPipelinesParamsSortOrder defines parameters for ListPipelines.
type ListPipelinesParamsSortOrder string

// CreatePipelineJSONBody defines parameters for CreatePipeline.
type CreatePipelineJSONBody struct {
	// Description The pipeline description
	Description string `json:"description,omitempty,omitzero" yaml:"description,omitempty"`

	// Name The pipeline name
	Name string `json:"name,omitempty,omitzero" yaml:"name,omitempty"`
}

// UpdatePipelineJSONBody defines parameters for UpdatePipeline.
type UpdatePipelineJSONBody struct {
	// Description The pipeline description
	Description string `json:"description,omitempty,omitzero" yaml:"description,omitempty"`

	// Name The pipeline name
	Name string `json:"name,omitempty,omitzero" yaml:"name,omitempty"`
}

// CreatePipelineStepJSONBody defines parameters for CreatePipelineStep.
type CreatePipelineStepJSONBody struct {
	// Config Configuration for the tool
	Config map[string]interface{} `json:"config,omitempty,omitzero" yaml:"config,omitempty"`

	// Dependencies IDs of steps this step depends on
	Dependencies []UUID `json:"dependencies,omitempty,omitzero" yaml:"dependencies,omitempty"`

	// Description Description of what this step does
	Description string `json:"description,omitempty,omitzero" yaml:"description,omitempty"`

	// Name Name of the step
	Name string `json:"name" yaml:"name"`

	// Position Position in the pipeline (for ordering)
	Position int  `json:"position,omitempty,omitzero" yaml:"position,omitempty"`
	ToolID   UUID `json:"toolID" yaml:"toolID"`
}

// CreatePipelineJSONRequestBody defines body for CreatePipeline for application/json ContentType.
type CreatePipelineJSONRequestBody CreatePipelineJSONBody

// UpdatePipelineJSONRequestBody defines body for UpdatePipeline for application/json ContentType.
type UpdatePipelineJSONRequestBody UpdatePipelineJSONBody

// CreatePipelineStepJSONRequestBody defines body for CreatePipelineStep for application/json ContentType.
type CreatePipelineStepJSONRequestBody CreatePipelineStepJSONBody
