// Code generated by archesai codegen. DO NOT EDIT.
package pipelines

import (
	"time"

	"github.com/google/uuid"
)

// Defines values for PipelineStepStatus.
const (
	Pending   PipelineStepStatus = "pending"
	Ready     PipelineStepStatus = "ready"
	Running   PipelineStepStatus = "running"
	Completed PipelineStepStatus = "completed"
	Failed    PipelineStepStatus = "failed"
	Skipped   PipelineStepStatus = "skipped"
)

// Defines values for ListPipelinesParamsSortField.
const (
	PipelinesCreatedAt      ListPipelinesParamsSortField = "createdAt"
	PipelinesDescription    ListPipelinesParamsSortField = "description"
	PipelinesID             ListPipelinesParamsSortField = "id"
	PipelinesName           ListPipelinesParamsSortField = "name"
	PipelinesOrganizationID ListPipelinesParamsSortField = "organizationID"
	PipelinesUpdatedAt      ListPipelinesParamsSortField = "updatedAt"
)

// Defines values for ListPipelinesParamsSortOrder.
const (
	PipelinesAsc  ListPipelinesParamsSortOrder = "asc"
	PipelinesDesc ListPipelinesParamsSortOrder = "desc"
)

// PipelineStepStatus represents the type for PipelineStepStatus enum values.
type PipelineStepStatus string

// ListPipelinesParamsSortField represents the type for ListPipelinesParamsSortField enum values.
type ListPipelinesParamsSortField string

// ListPipelinesParamsSortOrder represents the type for ListPipelinesParamsSortOrder enum values.
type ListPipelinesParamsSortOrder string

// CreatePipelineResponse
type CreatePipelineResponse = Pipeline

// UpdatePipelineResponse
type UpdatePipelineResponse = Pipeline

// GetPipelineResponse
type GetPipelineResponse = Pipeline

// Pipeline Schema for Pipeline entity
type Pipeline struct {
	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`
	// Description Detailed description of the pipeline's purpose
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`
	// ID Unique identifier for the resource
	ID uuid.UUID `json:"id" yaml:"id"`
	// Name The pipeline's display name
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`
	// OrganizationID The organization identifier
	OrganizationID uuid.UUID `json:"organizationID" yaml:"organizationID"`
	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// PipelineStep Schema for PipelineStep entity
type PipelineStep struct {
	// Config Configuration parameters for the tool
	Config map[string]interface{} `json:"config,omitempty" yaml:"config,omitempty"`
	// CreatedAt The date and time when the resource was created
	CreatedAt time.Time `json:"createdAt" yaml:"createdAt"`
	// Dependencies IDs of steps this step depends on
	Dependencies []uuid.UUID `json:"dependencies,omitempty" yaml:"dependencies,omitempty"`
	// Description Description of what this step does
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`
	// ID Unique identifier for the resource
	ID uuid.UUID `json:"id" yaml:"id"`
	// Name Name of the step
	Name string `json:"name" yaml:"name"`
	// PipelineID The pipeline this step belongs to
	PipelineID uuid.UUID `json:"pipelineID" yaml:"pipelineID"`
	// Position Position in the pipeline for ordering
	Position *int `json:"position,omitempty" yaml:"position,omitempty"`
	// Retries Number of retries on failure
	Retries *int `json:"retries,omitempty" yaml:"retries,omitempty" default:"0"`
	// Status Current status of the step
	Status PipelineStepStatus `json:"status,omitempty" yaml:"status,omitempty" default:"pending"`
	// Timeout Timeout in seconds
	Timeout *int `json:"timeout,omitempty" yaml:"timeout,omitempty" default:"3600"`
	// ToolID The tool used in this step
	ToolID uuid.UUID `json:"toolID" yaml:"toolID"`
	// UpdatedAt The date and time when the resource was last updated
	UpdatedAt time.Time `json:"updatedAt" yaml:"updatedAt"`
}

// CreatePipelineRequestBody Request body for createPipeline
type CreatePipelineRequestBody struct {
	// Description The pipelines description
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name The pipelines name
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`
}

// UpdatePipelineRequestBody Request body for updatePipeline
type UpdatePipelineRequestBody struct {
	// Description The pipelines description
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name The pipelines name
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`
}

// CreatePipelineStepRequestBody Request body for createPipelineStep
type CreatePipelineStepRequestBody struct {
	// Description The pipelines description
	Description *string `json:"description,omitempty" yaml:"description,omitempty"`
	// Name The pipelines name
	Name *string `json:"name,omitempty" yaml:"name,omitempty"`
}

// ListPipelinesParams Parameters for listing pipelines
type ListPipelinesParams struct {
	// Filter Filter parameters
	Filter *ListPipelinesParamsFilter `json:"filter,omitempty" yaml:"filter,omitempty"`
	// Page Pagination parameters
	Page *ListPipelinesParamsPage `json:"page,omitempty" yaml:"page,omitempty"`
	// Sort Sort parameters
	Sort *ListPipelinesParamsSort `json:"sort,omitempty" yaml:"sort,omitempty"`
}

// ListPipelinesParamsFilter Filter pipelines by field values
type ListPipelinesParamsFilter struct {
	// Filter A recursive filter node that can be a condition or group
	Filter interface{} `json:"filter" yaml:"filter"`
}

// ListPipelinesParamsPage Pagination parameters for listing pipelines
type ListPipelinesParamsPage struct {
	// Number Page number (1-indexed)
	Number int `json:"number" yaml:"number"`
	// Size Page size (items per page)
	Size int `json:"size" yaml:"size"`
}

// ListPipelinesParamsSort Sort pipelines by field and order
type ListPipelinesParamsSort struct {
	// Field Field to sort by
	Field ListPipelinesParamsSortField `json:"field" yaml:"field"`
	// Order Sort order (asc or desc)
	Order ListPipelinesParamsSortOrder `json:"order" yaml:"order"`
}

// ListMetadata Metadata for list responses
type ListMetadata struct {
	// Total Total number of items
	Total int64 `json:"total" yaml:"total"`
}

// DeletePipelineResponse Response for deleting a pipeline
type DeletePipelineResponse struct {
}

// ListPipelinesResponse Response for listing pipelines
type ListPipelinesResponse struct {
	// Data List of pipelines
	Data []*Pipeline `json:"data" yaml:"data"`
	// Meta Metadata about the list response
	Meta ListMetadata `json:"meta" yaml:"meta"`
}
