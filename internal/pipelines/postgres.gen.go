// Code generated by codegen repository. DO NOT EDIT.
package pipelines

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"time"

	"github.com/archesai/archesai/internal/database/postgresql"
	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgxpool"
)

// PostgresRepository implements Repository using PostgreSQL.
type PostgresRepository struct {
	db      *pgxpool.Pool
	queries *postgresql.Queries
}

// NewPostgresRepository creates a new PostgreSQL repository.
func NewPostgresRepository(db *pgxpool.Pool) Repository {
	return &PostgresRepository{
		db:      db,
		queries: postgresql.New(db),
	}
}

// Pipeline operations

// Create creates a new pipeline
func (r *PostgresRepository) Create(ctx context.Context, entity *Pipeline) (*Pipeline, error) {
	params := postgresql.CreatePipelineParams{
		ID: entity.ID,

		Name:        stringPtr(entity.Name),
		Description: stringPtr(entity.Description),
	}

	result, err := r.queries.CreatePipeline(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to create pipeline: %w", err)
	}

	return mapPipelineFromDB(&result), nil
}

// Get retrieves a pipeline by ID
func (r *PostgresRepository) Get(ctx context.Context, id uuid.UUID) (*Pipeline, error) {
	result, err := r.queries.GetPipeline(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrPipelineNotFound
		}
		return nil, fmt.Errorf("failed to get pipeline: %w", err)
	}

	return mapPipelineFromDB(&result), nil
}

// Update updates an existing pipeline
func (r *PostgresRepository) Update(ctx context.Context, id uuid.UUID, entity *Pipeline) (*Pipeline, error) {
	params := postgresql.UpdatePipelineParams{
		ID: id,

		Name:        stringPtr(entity.Name),
		Description: stringPtr(entity.Description),
	}

	result, err := r.queries.UpdatePipeline(ctx, params)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, ErrPipelineNotFound
		}
		return nil, fmt.Errorf("failed to update pipeline: %w", err)
	}

	return mapPipelineFromDB(&result), nil
}

// Delete removes a pipeline
func (r *PostgresRepository) Delete(ctx context.Context, id uuid.UUID) error {
	err := r.queries.DeletePipeline(ctx, id)
	if err != nil {
		if err == sql.ErrNoRows {
			return ErrPipelineNotFound
		}
		return fmt.Errorf("failed to delete pipeline: %w", err)
	}
	return nil
}

// List returns a paginated list of pipelines
func (r *PostgresRepository) List(ctx context.Context, params ListPipelinesParams) ([]*Pipeline, int64, error) {
	// Calculate offset from page
	offset := int32(0)
	limit := int32(10) // default

	// Check if params has Page field with Number and Size
	if params.Page.Number > 0 && params.Page.Size > 0 {
		offset = int32((params.Page.Number - 1) * params.Page.Size)
		limit = int32(params.Page.Size)
	}

	listParams := postgresql.ListPipelinesParams{
		Limit:  limit,
		Offset: offset,
	}

	results, err := r.queries.ListPipelines(ctx, listParams)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list pipelines: %w", err)
	}

	items := make([]*Pipeline, len(results))
	for i, result := range results {
		items[i] = mapPipelineFromDB(&result)
	}

	// For now, return the count as the length of results
	// In production, you'd want a separate count query
	count := int64(len(results))

	return items, count, nil
}

// ListByOrganization retrieves multiple pipelines by organizationID
func (r *PostgresRepository) ListByOrganization(ctx context.Context, organizationID uuid.UUID) ([]*Pipeline, error) {
	// TODO: Implement ListByOrganization - this needs a custom SQLC query
	// The implementation depends on the specific query available in SQLC

	return nil, fmt.Errorf("ListByOrganization not implemented - add SQLC query")

}

// Mapper functions - Convert between domain types and database types

func mapPipelineFromDB(db *postgresql.Pipeline) *Pipeline {
	if db == nil {
		return nil
	}

	result := &Pipeline{
		ID:        db.ID,
		CreatedAt: db.CreatedAt,
		UpdatedAt: db.UpdatedAt,

		Name: stringFromPtr(db.Name),

		Description: stringFromPtr(db.Description),
	}

	return result
}

// Helper functions for conversions
func stringPtr(s string) *string {
	if s == "" {
		return nil
	}
	return &s
}

func nilIfEmpty(s string) *string {
	if s == "" {
		return nil
	}
	return &s
}

func stringFromPtr(s *string) string {
	if s == nil {
		return ""
	}
	return *s
}

func boolPtr(b bool) *bool {
	return &b
}

func int32Ptr(i int32) *int32 {
	return &i
}

func float32Ptr(f float32) *float32 {
	return &f
}

func float64Ptr(f float64) *float64 {
	return &f
}

func marshalJSON(v interface{}) *string {
	if v == nil {
		return nil
	}
	data, err := json.Marshal(v)
	if err != nil {
		return nil
	}
	s := string(data)
	return &s
}

func unmarshalJSON(s *string) map[string]interface{} {
	if s == nil {
		return nil
	}
	var result map[string]interface{}
	if err := json.Unmarshal([]byte(*s), &result); err != nil {
		return nil
	}
	return result
}

func uuidFromPtr(u *uuid.UUID) uuid.UUID {
	if u == nil {
		return uuid.Nil
	}
	return *u
}

func timeFromPtr(t *time.Time) time.Time {
	if t == nil {
		return time.Time{}
	}
	return *t
}
