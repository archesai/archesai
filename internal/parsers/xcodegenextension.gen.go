// Code generated by archesai-codegen. DO NOT EDIT.

package parsers

import (
	"fmt"
	"strings"
)

// XCodegenExtensionRepository represents Repository generation configuration
type XCodegenExtensionRepository struct {

	// AdditionalMethods Additional repository methods to generate
	AdditionalMethods []AdditionalMethodsItem `json:"additionalMethods,omitempty" yaml:"additionalMethods,omitempty"`

	// ExcludeFromCreate Fields to exclude from Create operations (e.g., auto-generated or DB-set fields)
	ExcludeFromCreate []string `json:"excludeFromCreate,omitempty" yaml:"excludeFromCreate,omitempty"`

	// ExcludeFromUpdate Fields to exclude from Update operations (e.g., immutable fields)
	ExcludeFromUpdate []string `json:"excludeFromUpdate,omitempty" yaml:"excludeFromUpdate,omitempty"`

	// Indices Database indices to create
	Indices []string `json:"indices,omitempty" yaml:"indices,omitempty"`

	// Operations Standard CRUD operations to generate
	Operations []string `json:"operations,omitempty" yaml:"operations,omitempty"`

	// Relations Foreign key relationships to other entities
	Relations []RelationsItem `json:"relations,omitempty" yaml:"relations,omitempty"`

	// TableName Override default table name
	TableName *string `json:"tableName,omitempty" yaml:"tableName,omitempty"`
}

// AdditionalMethodsItem represents a nested type for XCodegenExtension
type AdditionalMethodsItem struct {

	// Name Method name
	Name string `json:"name" yaml:"name"`

	// Params Method parameters
	Params []ParamsItem `json:"params,omitempty" yaml:"params,omitempty"`

	// Returns Return type (single or multiple)
	Returns string `json:"returns" yaml:"returns"`
}

// ParamsItem represents a nested type for XCodegenExtension
type ParamsItem struct {

	// Format Parameter format (e.g., uuid, email) - optional
	Format *string `json:"format,omitempty" yaml:"format,omitempty"`

	// Name Parameter name
	Name string `json:"name" yaml:"name"`

	// Type Parameter type (e.g., string, int)
	Type string `json:"type" yaml:"type"`
}

// RelationsItem represents a nested type for XCodegenExtension
type RelationsItem struct {

	// Field The field name in this entity that references another entity
	Field string `json:"field" yaml:"field"`

	// OnDelete Foreign key ON DELETE action
	OnDelete *string `json:"onDelete,omitempty" yaml:"onDelete,omitempty"`

	// OnUpdate Foreign key ON UPDATE action
	OnUpdate *string `json:"onUpdate,omitempty" yaml:"onUpdate,omitempty"`

	// References The table name being referenced (snake_case)
	References string `json:"references" yaml:"references"`

	// ReferencesField The field in the referenced table (defaults to 'id')
	ReferencesField *string `json:"referencesField,omitempty" yaml:"referencesField,omitempty"`
}

// XCodegenExtensionSchemaType represents the enumeration of valid values for SchemaType
type XCodegenExtensionSchemaType string

// Valid SchemaType values
const (
	XCodegenExtensionSchemaTypeEntity      XCodegenExtensionSchemaType = "entity"
	XCodegenExtensionSchemaTypeValueobject XCodegenExtensionSchemaType = "valueobject"
)

// String returns the string representation
func (e XCodegenExtensionSchemaType) String() string {
	return string(e)
}

// IsValid checks if the value is valid
func (e XCodegenExtensionSchemaType) IsValid() bool {
	switch e {
	case XCodegenExtensionSchemaTypeEntity:
		return true
	case XCodegenExtensionSchemaTypeValueobject:
		return true
	default:
		return false
	}
}

// ParseXCodegenExtensionSchemaType parses a string into the enum type
func ParseXCodegenExtensionSchemaType(s string) (XCodegenExtensionSchemaType, error) {
	v := XCodegenExtensionSchemaType(s)
	if !v.IsValid() {
		return "", fmt.Errorf("invalid SchemaType: %s", s)
	}
	return v, nil
}

// XCodegenExtension represents Configuration for code generation from OpenAPI schemas
type XCodegenExtension struct {

	// Repository Repository generation configuration
	Repository *XCodegenExtensionRepository `json:"repository,omitempty" yaml:"repository,omitempty"`

	// SchemaType Type of domain object (entity, valueobject)
	SchemaType XCodegenExtensionSchemaType `json:"schemaType" yaml:"schemaType"`
}

// NewXCodegenExtension creates a new immutable XCodegenExtension value object.
// Value objects are immutable and validated upon creation.
func NewXCodegenExtension(
	repository *XCodegenExtensionRepository,
	schemaType XCodegenExtensionSchemaType,
) (XCodegenExtension, error) {
	// Validate required fields
	if !schemaType.IsValid() {
		return XCodegenExtension{}, fmt.Errorf("invalid SchemaType: %s", schemaType)
	}
	return XCodegenExtension{
		Repository: repository,
		SchemaType: schemaType,
	}, nil
}

// ZeroXCodegenExtension returns the zero value for XCodegenExtension.
// This is useful for comparisons and as a default value.
func ZeroXCodegenExtension() XCodegenExtension {
	return XCodegenExtension{}
}

// GetRepository returns the Repository value.
// Value objects are immutable, so this returns a copy of the value.
func (v XCodegenExtension) GetRepository() *XCodegenExtensionRepository {
	return v.Repository
}

// GetSchemaType returns the SchemaType value.
// Value objects are immutable, so this returns a copy of the value.
func (v XCodegenExtension) GetSchemaType() XCodegenExtensionSchemaType {
	return v.SchemaType
}

// Validate validates the XCodegenExtension value object.
// Returns an error if any field fails validation.
func (v XCodegenExtension) Validate() error {
	if !v.SchemaType.IsValid() {
		return fmt.Errorf("invalid SchemaType: %s", v.SchemaType)
	}
	return nil
}

// IsZero returns true if this is the zero value.
func (v XCodegenExtension) IsZero() bool {
	zero := ZeroXCodegenExtension()
	// Compare using string representation as a simple equality check
	return v.String() == zero.String()
}

// String returns a string representation of XCodegenExtension
func (v XCodegenExtension) String() string {
	var fields []string
	fields = append(fields, fmt.Sprintf("Repository: %v", v.Repository))
	fields = append(fields, fmt.Sprintf("SchemaType: %v", v.SchemaType))
	return fmt.Sprintf("XCodegenExtension{%s}", strings.Join(fields, ", "))
}
