// Code generated by archesai/codegen. DO NOT EDIT.

package parsers

import (
	"fmt"
	"strings"
)

// XCodegenExtensionSchemaType represents the enumeration of valid values for SchemaType
type XCodegenExtensionSchemaType string

// Valid SchemaType values
const (
	XCodegenExtensionSchemaTypeEntity      XCodegenExtensionSchemaType = "entity"
	XCodegenExtensionSchemaTypeValueobject XCodegenExtensionSchemaType = "valueobject"
)

// String returns the string representation
func (e XCodegenExtensionSchemaType) String() string {
	return string(e)
}

// IsValid checks if the value is valid
func (e XCodegenExtensionSchemaType) IsValid() bool {
	switch e {
	case XCodegenExtensionSchemaTypeEntity:
		return true
	case XCodegenExtensionSchemaTypeValueobject:
		return true
	default:
		return false
	}
}

// ParseXCodegenExtensionSchemaType parses a string into the enum type
func ParseXCodegenExtensionSchemaType(s string) (XCodegenExtensionSchemaType, error) {
	v := XCodegenExtensionSchemaType(s)
	if !v.IsValid() {
		return "", fmt.Errorf("invalid SchemaType: %s", s)
	}
	return v, nil
}

// XCodegenExtension represents Configuration for code generation from OpenAPI schemas
type XCodegenExtension struct {
	Repository *struct {
		AdditionalMethods []struct {
			Name    string   `json:"name" yaml:"name"`
			Params  []string `json:"params,omitempty" yaml:"params"`
			Returns string   `json:"returns" yaml:"returns"`
		} `json:"additional_methods,omitempty" yaml:"additional_methods"`
		Indices    []string `json:"indices,omitempty" yaml:"indices"`
		Operations []string `json:"operations,omitempty" yaml:"operations"`
		TableName  *string  `json:"table_name,omitempty" yaml:"table_name"`
	} `json:"repository,omitempty" yaml:"repository,omitempty"` // Repository generation configuration
	SchemaType XCodegenExtensionSchemaType `json:"schemaType" yaml:"schemaType"` // Type of domain object (entity, valueobject)
}

// NewXCodegenExtension creates a new immutable XCodegenExtension value object.
// Value objects are immutable and validated upon creation.
func NewXCodegenExtension(repository *struct {
	AdditionalMethods []struct {
		Name    string   `json:"name" yaml:"name"`
		Params  []string `json:"params,omitempty" yaml:"params"`
		Returns string   `json:"returns" yaml:"returns"`
	} `json:"additional_methods,omitempty" yaml:"additional_methods"`
	Indices    []string `json:"indices,omitempty" yaml:"indices"`
	Operations []string `json:"operations,omitempty" yaml:"operations"`
	TableName  *string  `json:"table_name,omitempty" yaml:"table_name"`
}, schemaType string) (XCodegenExtension, error) {
	// Validate all fields
	schemaTypeEnum := XCodegenExtensionSchemaType(schemaType)
	if !schemaTypeEnum.IsValid() {
		return XCodegenExtension{}, fmt.Errorf("invalid SchemaType: %s", schemaType)
	}

	return XCodegenExtension{
		Repository: repository,
		SchemaType: schemaTypeEnum,
	}, nil
}

// MustXCodegenExtension creates a new XCodegenExtension value object and panics on validation error.
// Use this only when you are certain the values are valid (e.g., in tests or with hardcoded values).
func MustXCodegenExtension(repository *struct {
	AdditionalMethods []struct {
		Name    string   `json:"name" yaml:"name"`
		Params  []string `json:"params,omitempty" yaml:"params"`
		Returns string   `json:"returns" yaml:"returns"`
	} `json:"additional_methods,omitempty" yaml:"additional_methods"`
	Indices    []string `json:"indices,omitempty" yaml:"indices"`
	Operations []string `json:"operations,omitempty" yaml:"operations"`
	TableName  *string  `json:"table_name,omitempty" yaml:"table_name"`
}, schemaType string) XCodegenExtension {
	v, err := NewXCodegenExtension(repository, schemaType)
	if err != nil {
		panic(fmt.Sprintf("failed to create XCodegenExtension: %v", err))
	}
	return v
}

// ZeroXCodegenExtension returns the zero value for XCodegenExtension.
// This is useful for comparisons and as a default value.
func ZeroXCodegenExtension() XCodegenExtension {
	return XCodegenExtension{}
}

// GetRepository returns the Repository value.
// Value objects are immutable, so this returns a copy of the value.
func (v XCodegenExtension) GetRepository() *struct {
	AdditionalMethods []struct {
		Name    string   `json:"name" yaml:"name"`
		Params  []string `json:"params,omitempty" yaml:"params"`
		Returns string   `json:"returns" yaml:"returns"`
	} `json:"additional_methods,omitempty" yaml:"additional_methods"`
	Indices    []string `json:"indices,omitempty" yaml:"indices"`
	Operations []string `json:"operations,omitempty" yaml:"operations"`
	TableName  *string  `json:"table_name,omitempty" yaml:"table_name"`
} {
	return v.Repository
}

// GetSchemaType returns the SchemaType value.
// Value objects are immutable, so this returns a copy of the value.
func (v XCodegenExtension) GetSchemaType() string {
	return string(v.SchemaType)
}

// IsZero returns true if this is the zero value.
func (v XCodegenExtension) IsZero() bool {
	zero := ZeroXCodegenExtension()
	// Compare using string representation as a simple equality check
	return v.String() == zero.String()
}

// Validate checks if the value object is valid.
// This is automatically called during construction but can be used for explicit validation.
func (v XCodegenExtension) Validate() error {
	if v.SchemaType == "" {
		return fmt.Errorf("SchemaType cannot be empty")
	}
	return nil
}

// String returns a string representation of XCodegenExtension
func (v XCodegenExtension) String() string {
	var fields []string
	if v.Repository != nil {
		fields = append(fields, fmt.Sprintf("Repository: %v", *v.Repository))
	} else {
		fields = append(fields, "Repository: <nil>")
	}
	fields = append(fields, fmt.Sprintf("SchemaType: %v", v.SchemaType))
	return fmt.Sprintf("XCodegenExtension{%s}", strings.Join(fields, ", "))
}
