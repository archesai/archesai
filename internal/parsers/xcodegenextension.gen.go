// Code generated by archesai/codegen. DO NOT EDIT.

package parsers

import "fmt"

// XCodegenExtension represents Configuration for code generation from OpenAPI schemas
type XCodegenExtension struct {
	Controller *struct {
		Name       *string  `json:"name,omitempty" yaml:"name"`
		Operations []string `json:"operations,omitempty" yaml:"operations"`
	} `json:"controller,omitempty" yaml:"controller,omitempty"` // HTTP controller generation configuration
	Repository *struct {
		AdditionalMethods []struct {
			Name    string   `json:"name" yaml:"name"`
			Params  []string `json:"params,omitempty" yaml:"params"`
			Returns string   `json:"returns" yaml:"returns"`
		} `json:"additional_methods,omitempty" yaml:"additional_methods"`
		Indices    []string `json:"indices,omitempty" yaml:"indices"`
		Name       *string  `json:"name,omitempty" yaml:"name"`
		Operations []string `json:"operations,omitempty" yaml:"operations"`
		TableName  *string  `json:"table_name,omitempty" yaml:"table_name"`
	} `json:"repository,omitempty" yaml:"repository,omitempty"` // Repository generation configuration
	SchemaType string `json:"schemaType" yaml:"schemaType"` // Type of domain object (entity, valueobject)
}

// NewXCodegenExtension creates a new XCodegenExtension value object
func NewXCodegenExtension(controller *struct {
	Name       *string  `json:"name,omitempty" yaml:"name"`
	Operations []string `json:"operations,omitempty" yaml:"operations"`
}, repository *struct {
	AdditionalMethods []struct {
		Name    string   `json:"name" yaml:"name"`
		Params  []string `json:"params,omitempty" yaml:"params"`
		Returns string   `json:"returns" yaml:"returns"`
	} `json:"additional_methods,omitempty" yaml:"additional_methods"`
	Indices    []string `json:"indices,omitempty" yaml:"indices"`
	Name       *string  `json:"name,omitempty" yaml:"name"`
	Operations []string `json:"operations,omitempty" yaml:"operations"`
	TableName  *string  `json:"table_name,omitempty" yaml:"table_name"`
}, schemaType string) (XCodegenExtension, error) {
	if schemaType == "" {
		return XCodegenExtension{}, fmt.Errorf("SchemaType cannot be empty")
	}

	return XCodegenExtension{
		Controller: controller,
		Repository: repository,
		SchemaType: schemaType,
	}, nil
}

// GetController returns the Controller
func (v XCodegenExtension) GetController() *struct {
	Name       *string  `json:"name,omitempty" yaml:"name"`
	Operations []string `json:"operations,omitempty" yaml:"operations"`
} {
	return v.Controller
}

// GetRepository returns the Repository
func (v XCodegenExtension) GetRepository() *struct {
	AdditionalMethods []struct {
		Name    string   `json:"name" yaml:"name"`
		Params  []string `json:"params,omitempty" yaml:"params"`
		Returns string   `json:"returns" yaml:"returns"`
	} `json:"additional_methods,omitempty" yaml:"additional_methods"`
	Indices    []string `json:"indices,omitempty" yaml:"indices"`
	Name       *string  `json:"name,omitempty" yaml:"name"`
	Operations []string `json:"operations,omitempty" yaml:"operations"`
	TableName  *string  `json:"table_name,omitempty" yaml:"table_name"`
} {
	return v.Repository
}

// GetSchemaType returns the SchemaType
func (v XCodegenExtension) GetSchemaType() string {
	return v.SchemaType
}

// Equals checks if two XCodegenExtension value objects are equal
// func (v XCodegenExtension) Equals(other XCodegenExtension) bool {
//	return v.Controller == other.Controller && v.Repository == other.Repository && v.SchemaType == other.SchemaType
// }

// String returns a string representation of XCodegenExtension
func (v XCodegenExtension) String() string {
	return fmt.Sprintf("%+v", v)
}
