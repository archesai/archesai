// Code generated by archesai/codegen. DO NOT EDIT.

package parsers

import (
	"fmt"
	"strings"
)

// XCodegenExtension represents Configuration for code generation from OpenAPI schemas
type XCodegenExtension struct {
	Commands *struct {
		AdditionalMethods []struct {
			Handler     *string `json:"handler,omitempty" yaml:"handler"`
			OperationId string  `json:"operationId" yaml:"operationId"`
		} `json:"additional_methods,omitempty" yaml:"additional_methods"`
		Operations []string `json:"operations,omitempty" yaml:"operations"`
	} `json:"commands,omitempty" yaml:"commands,omitempty"` // Command handler generation configuration
	Controller *struct {
		Middleware []string `json:"middleware,omitempty" yaml:"middleware"`
		Operations []string `json:"operations,omitempty" yaml:"operations"`
	} `json:"controller,omitempty" yaml:"controller,omitempty"` // HTTP controller generation configuration
	Queries *struct {
		AdditionalMethods []struct {
			Handler     *string `json:"handler,omitempty" yaml:"handler"`
			OperationId string  `json:"operationId" yaml:"operationId"`
		} `json:"additional_methods,omitempty" yaml:"additional_methods"`
		Operations []string `json:"operations,omitempty" yaml:"operations"`
	} `json:"queries,omitempty" yaml:"queries,omitempty"` // Query handler generation configuration
	Repository *struct {
		AdditionalMethods []struct {
			Name    string   `json:"name" yaml:"name"`
			Params  []string `json:"params,omitempty" yaml:"params"`
			Returns string   `json:"returns" yaml:"returns"`
		} `json:"additional_methods,omitempty" yaml:"additional_methods"`
		Indices    []string `json:"indices,omitempty" yaml:"indices"`
		Operations []string `json:"operations,omitempty" yaml:"operations"`
		TableName  *string  `json:"table_name,omitempty" yaml:"table_name"`
	} `json:"repository,omitempty" yaml:"repository,omitempty"` // Repository generation configuration
	SchemaType string `json:"schemaType" yaml:"schemaType"` // Type of domain object (entity, valueobject)
}

// NewXCodegenExtension creates a new XCodegenExtension value object
func NewXCodegenExtension(commands *struct {
	AdditionalMethods []struct {
		Handler     *string `json:"handler,omitempty" yaml:"handler"`
		OperationId string  `json:"operationId" yaml:"operationId"`
	} `json:"additional_methods,omitempty" yaml:"additional_methods"`
	Operations []string `json:"operations,omitempty" yaml:"operations"`
}, controller *struct {
	Middleware []string `json:"middleware,omitempty" yaml:"middleware"`
	Operations []string `json:"operations,omitempty" yaml:"operations"`
}, queries *struct {
	AdditionalMethods []struct {
		Handler     *string `json:"handler,omitempty" yaml:"handler"`
		OperationId string  `json:"operationId" yaml:"operationId"`
	} `json:"additional_methods,omitempty" yaml:"additional_methods"`
	Operations []string `json:"operations,omitempty" yaml:"operations"`
}, repository *struct {
	AdditionalMethods []struct {
		Name    string   `json:"name" yaml:"name"`
		Params  []string `json:"params,omitempty" yaml:"params"`
		Returns string   `json:"returns" yaml:"returns"`
	} `json:"additional_methods,omitempty" yaml:"additional_methods"`
	Indices    []string `json:"indices,omitempty" yaml:"indices"`
	Operations []string `json:"operations,omitempty" yaml:"operations"`
	TableName  *string  `json:"table_name,omitempty" yaml:"table_name"`
}, schemaType string) (XCodegenExtension, error) {
	if schemaType == "" {
		return XCodegenExtension{}, fmt.Errorf("SchemaType cannot be empty")
	}

	return XCodegenExtension{
		Commands:   commands,
		Controller: controller,
		Queries:    queries,
		Repository: repository,
		SchemaType: schemaType,
	}, nil
}

// GetCommands returns the Commands
func (v XCodegenExtension) GetCommands() *struct {
	AdditionalMethods []struct {
		Handler     *string `json:"handler,omitempty" yaml:"handler"`
		OperationId string  `json:"operationId" yaml:"operationId"`
	} `json:"additional_methods,omitempty" yaml:"additional_methods"`
	Operations []string `json:"operations,omitempty" yaml:"operations"`
} {
	return v.Commands
}

// GetController returns the Controller
func (v XCodegenExtension) GetController() *struct {
	Middleware []string `json:"middleware,omitempty" yaml:"middleware"`
	Operations []string `json:"operations,omitempty" yaml:"operations"`
} {
	return v.Controller
}

// GetQueries returns the Queries
func (v XCodegenExtension) GetQueries() *struct {
	AdditionalMethods []struct {
		Handler     *string `json:"handler,omitempty" yaml:"handler"`
		OperationId string  `json:"operationId" yaml:"operationId"`
	} `json:"additional_methods,omitempty" yaml:"additional_methods"`
	Operations []string `json:"operations,omitempty" yaml:"operations"`
} {
	return v.Queries
}

// GetRepository returns the Repository
func (v XCodegenExtension) GetRepository() *struct {
	AdditionalMethods []struct {
		Name    string   `json:"name" yaml:"name"`
		Params  []string `json:"params,omitempty" yaml:"params"`
		Returns string   `json:"returns" yaml:"returns"`
	} `json:"additional_methods,omitempty" yaml:"additional_methods"`
	Indices    []string `json:"indices,omitempty" yaml:"indices"`
	Operations []string `json:"operations,omitempty" yaml:"operations"`
	TableName  *string  `json:"table_name,omitempty" yaml:"table_name"`
} {
	return v.Repository
}

// GetSchemaType returns the SchemaType
func (v XCodegenExtension) GetSchemaType() string {
	return v.SchemaType
}

// Equals checks if two XCodegenExtension value objects are equal
// func (v XCodegenExtension) Equals(other XCodegenExtension) bool {
//	return v.Commands == other.Commands && v.Controller == other.Controller && v.Queries == other.Queries && v.Repository == other.Repository && v.SchemaType == other.SchemaType
// }

// String returns a string representation of XCodegenExtension
func (v XCodegenExtension) String() string {
	// Build string representation field by field to avoid recursion
	var fields []string
	fields = append(fields, fmt.Sprintf("Commands: %v", v.Commands))
	fields = append(fields, fmt.Sprintf("Controller: %v", v.Controller))
	fields = append(fields, fmt.Sprintf("Queries: %v", v.Queries))
	fields = append(fields, fmt.Sprintf("Repository: %v", v.Repository))
	fields = append(fields, fmt.Sprintf("SchemaType: %v", v.SchemaType))
	return fmt.Sprintf("XCodegenExtension{%s}", strings.Join(fields, ", "))
}
