// Package config provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package config

import (
	"encoding/json"

	"github.com/oapi-codegen/runtime"
)

// Defines values for ArchesConfigApiEmail0Mode.
const (
	ArchesConfigApiEmail0ModeDisabled ArchesConfigApiEmail0Mode = "disabled"
)

// Defines values for ArchesConfigApiEmail1Mode.
const (
	ArchesConfigApiEmail1ModeEnabled ArchesConfigApiEmail1Mode = "enabled"
)

// Defines values for ArchesConfigApiImagePullPolicy.
const (
	ArchesConfigApiImagePullPolicyAlways       ArchesConfigApiImagePullPolicy = "Always"
	ArchesConfigApiImagePullPolicyIfNotPresent ArchesConfigApiImagePullPolicy = "IfNotPresent"
	ArchesConfigApiImagePullPolicyNever        ArchesConfigApiImagePullPolicy = "Never"
)

// Defines values for ArchesConfigAuth0Mode.
const (
	ArchesConfigAuth0ModeDisabled ArchesConfigAuth0Mode = "disabled"
)

// Defines values for ArchesConfigAuth1Firebase0Mode.
const (
	ArchesConfigAuth1Firebase0ModeDisabled ArchesConfigAuth1Firebase0Mode = "disabled"
)

// Defines values for ArchesConfigAuth1Firebase1Mode.
const (
	ArchesConfigAuth1Firebase1ModeEnabled ArchesConfigAuth1Firebase1Mode = "enabled"
)

// Defines values for ArchesConfigAuth1Local0Mode.
const (
	ArchesConfigAuth1Local0ModeDisabled ArchesConfigAuth1Local0Mode = "disabled"
)

// Defines values for ArchesConfigAuth1Local1Mode.
const (
	ArchesConfigAuth1Local1ModeEnabled ArchesConfigAuth1Local1Mode = "enabled"
)

// Defines values for ArchesConfigAuth1Mode.
const (
	ArchesConfigAuth1ModeEnabled ArchesConfigAuth1Mode = "enabled"
)

// Defines values for ArchesConfigAuth1Twitter0Mode.
const (
	ArchesConfigAuth1Twitter0ModeDisabled ArchesConfigAuth1Twitter0Mode = "disabled"
)

// Defines values for ArchesConfigAuth1Twitter1Mode.
const (
	ArchesConfigAuth1Twitter1ModeEnabled ArchesConfigAuth1Twitter1Mode = "enabled"
)

// Defines values for ArchesConfigBilling0Mode.
const (
	ArchesConfigBilling0ModeDisabled ArchesConfigBilling0Mode = "disabled"
)

// Defines values for ArchesConfigBilling1Mode.
const (
	ArchesConfigBilling1ModeEnabled ArchesConfigBilling1Mode = "enabled"
)

// Defines values for ArchesConfigDatabase0Mode.
const (
	ArchesConfigDatabase0ModeDisabled ArchesConfigDatabase0Mode = "disabled"
)

// Defines values for ArchesConfigDatabase1Mode.
const (
	ArchesConfigDatabase1ModeEnabled ArchesConfigDatabase1Mode = "enabled"
)

// Defines values for ArchesConfigDatabase2ImagePullPolicy.
const (
	ArchesConfigDatabase2ImagePullPolicyAlways       ArchesConfigDatabase2ImagePullPolicy = "Always"
	ArchesConfigDatabase2ImagePullPolicyIfNotPresent ArchesConfigDatabase2ImagePullPolicy = "IfNotPresent"
	ArchesConfigDatabase2ImagePullPolicyNever        ArchesConfigDatabase2ImagePullPolicy = "Never"
)

// Defines values for ArchesConfigDatabase2Mode.
const (
	ArchesConfigDatabase2ModeManaged ArchesConfigDatabase2Mode = "managed"
)

// Defines values for ArchesConfigIngress0Mode.
const (
	ArchesConfigIngress0ModeDisabled ArchesConfigIngress0Mode = "disabled"
)

// Defines values for ArchesConfigIngress1Mode.
const (
	ArchesConfigIngress1ModeEnabled ArchesConfigIngress1Mode = "enabled"
)

// Defines values for ArchesConfigIngress2Mode.
const (
	ArchesConfigIngress2ModeManaged ArchesConfigIngress2Mode = "managed"
)

// Defines values for ArchesConfigIntelligenceEmbeddingType.
const (
	ArchesConfigIntelligenceEmbeddingTypeOllama ArchesConfigIntelligenceEmbeddingType = "ollama"
	ArchesConfigIntelligenceEmbeddingTypeOpenai ArchesConfigIntelligenceEmbeddingType = "openai"
)

// Defines values for ArchesConfigIntelligenceLlm0Type.
const (
	ArchesConfigIntelligenceLlm0TypeOllama ArchesConfigIntelligenceLlm0Type = "ollama"
)

// Defines values for ArchesConfigIntelligenceLlm1Type.
const (
	Openai ArchesConfigIntelligenceLlm1Type = "openai"
)

// Defines values for ArchesConfigIntelligenceRunpod0Mode.
const (
	ArchesConfigIntelligenceRunpod0ModeDisabled ArchesConfigIntelligenceRunpod0Mode = "disabled"
)

// Defines values for ArchesConfigIntelligenceRunpod1Mode.
const (
	ArchesConfigIntelligenceRunpod1ModeEnabled ArchesConfigIntelligenceRunpod1Mode = "enabled"
)

// Defines values for ArchesConfigIntelligenceScraper0Mode.
const (
	ArchesConfigIntelligenceScraper0ModeDisabled ArchesConfigIntelligenceScraper0Mode = "disabled"
)

// Defines values for ArchesConfigIntelligenceScraper1Mode.
const (
	ArchesConfigIntelligenceScraper1ModeEnabled ArchesConfigIntelligenceScraper1Mode = "enabled"
)

// Defines values for ArchesConfigIntelligenceScraper2ImagePullPolicy.
const (
	ArchesConfigIntelligenceScraper2ImagePullPolicyAlways       ArchesConfigIntelligenceScraper2ImagePullPolicy = "Always"
	ArchesConfigIntelligenceScraper2ImagePullPolicyIfNotPresent ArchesConfigIntelligenceScraper2ImagePullPolicy = "IfNotPresent"
	ArchesConfigIntelligenceScraper2ImagePullPolicyNever        ArchesConfigIntelligenceScraper2ImagePullPolicy = "Never"
)

// Defines values for ArchesConfigIntelligenceScraper2Mode.
const (
	ArchesConfigIntelligenceScraper2ModeManaged ArchesConfigIntelligenceScraper2Mode = "managed"
)

// Defines values for ArchesConfigIntelligenceSpeech0Mode.
const (
	ArchesConfigIntelligenceSpeech0ModeDisabled ArchesConfigIntelligenceSpeech0Mode = "disabled"
)

// Defines values for ArchesConfigIntelligenceSpeech1Mode.
const (
	ArchesConfigIntelligenceSpeech1ModeEnabled ArchesConfigIntelligenceSpeech1Mode = "enabled"
)

// Defines values for ArchesConfigIntelligenceUnstructured0Mode.
const (
	ArchesConfigIntelligenceUnstructured0ModeDisabled ArchesConfigIntelligenceUnstructured0Mode = "disabled"
)

// Defines values for ArchesConfigIntelligenceUnstructured1Mode.
const (
	ArchesConfigIntelligenceUnstructured1ModeEnabled ArchesConfigIntelligenceUnstructured1Mode = "enabled"
)

// Defines values for ArchesConfigIntelligenceUnstructured2ImagePullPolicy.
const (
	ArchesConfigIntelligenceUnstructured2ImagePullPolicyAlways       ArchesConfigIntelligenceUnstructured2ImagePullPolicy = "Always"
	ArchesConfigIntelligenceUnstructured2ImagePullPolicyIfNotPresent ArchesConfigIntelligenceUnstructured2ImagePullPolicy = "IfNotPresent"
	ArchesConfigIntelligenceUnstructured2ImagePullPolicyNever        ArchesConfigIntelligenceUnstructured2ImagePullPolicy = "Never"
)

// Defines values for ArchesConfigIntelligenceUnstructured2Mode.
const (
	ArchesConfigIntelligenceUnstructured2ModeManaged ArchesConfigIntelligenceUnstructured2Mode = "managed"
)

// Defines values for ArchesConfigLoggingLevel.
const (
	Debug  ArchesConfigLoggingLevel = "debug"
	Error  ArchesConfigLoggingLevel = "error"
	Fatal  ArchesConfigLoggingLevel = "fatal"
	Info   ArchesConfigLoggingLevel = "info"
	Silent ArchesConfigLoggingLevel = "silent"
	Trace  ArchesConfigLoggingLevel = "trace"
	Warn   ArchesConfigLoggingLevel = "warn"
)

// Defines values for ArchesConfigMonitoringGrafana0Mode.
const (
	ArchesConfigMonitoringGrafana0ModeDisabled ArchesConfigMonitoringGrafana0Mode = "disabled"
)

// Defines values for ArchesConfigMonitoringGrafana1Mode.
const (
	ArchesConfigMonitoringGrafana1ModeEnabled ArchesConfigMonitoringGrafana1Mode = "enabled"
)

// Defines values for ArchesConfigMonitoringGrafana2ImagePullPolicy.
const (
	ArchesConfigMonitoringGrafana2ImagePullPolicyAlways       ArchesConfigMonitoringGrafana2ImagePullPolicy = "Always"
	ArchesConfigMonitoringGrafana2ImagePullPolicyIfNotPresent ArchesConfigMonitoringGrafana2ImagePullPolicy = "IfNotPresent"
	ArchesConfigMonitoringGrafana2ImagePullPolicyNever        ArchesConfigMonitoringGrafana2ImagePullPolicy = "Never"
)

// Defines values for ArchesConfigMonitoringGrafana2Mode.
const (
	ArchesConfigMonitoringGrafana2ModeManaged ArchesConfigMonitoringGrafana2Mode = "managed"
)

// Defines values for ArchesConfigMonitoringLoki0Mode.
const (
	ArchesConfigMonitoringLoki0ModeDisabled ArchesConfigMonitoringLoki0Mode = "disabled"
)

// Defines values for ArchesConfigMonitoringLoki1Mode.
const (
	ArchesConfigMonitoringLoki1ModeEnabled ArchesConfigMonitoringLoki1Mode = "enabled"
)

// Defines values for ArchesConfigMonitoringLoki2ImagePullPolicy.
const (
	ArchesConfigMonitoringLoki2ImagePullPolicyAlways       ArchesConfigMonitoringLoki2ImagePullPolicy = "Always"
	ArchesConfigMonitoringLoki2ImagePullPolicyIfNotPresent ArchesConfigMonitoringLoki2ImagePullPolicy = "IfNotPresent"
	ArchesConfigMonitoringLoki2ImagePullPolicyNever        ArchesConfigMonitoringLoki2ImagePullPolicy = "Never"
)

// Defines values for ArchesConfigMonitoringLoki2Mode.
const (
	ArchesConfigMonitoringLoki2ModeManaged ArchesConfigMonitoringLoki2Mode = "managed"
)

// Defines values for ArchesConfigPlatform0Mode.
const (
	ArchesConfigPlatform0ModeDisabled ArchesConfigPlatform0Mode = "disabled"
)

// Defines values for ArchesConfigPlatform1Mode.
const (
	ArchesConfigPlatform1ModeEnabled ArchesConfigPlatform1Mode = "enabled"
)

// Defines values for ArchesConfigPlatform2ImagePullPolicy.
const (
	ArchesConfigPlatform2ImagePullPolicyAlways       ArchesConfigPlatform2ImagePullPolicy = "Always"
	ArchesConfigPlatform2ImagePullPolicyIfNotPresent ArchesConfigPlatform2ImagePullPolicy = "IfNotPresent"
	ArchesConfigPlatform2ImagePullPolicyNever        ArchesConfigPlatform2ImagePullPolicy = "Never"
)

// Defines values for ArchesConfigPlatform2Mode.
const (
	ArchesConfigPlatform2ModeManaged ArchesConfigPlatform2Mode = "managed"
)

// Defines values for ArchesConfigRedis0Mode.
const (
	ArchesConfigRedis0ModeDisabled ArchesConfigRedis0Mode = "disabled"
)

// Defines values for ArchesConfigRedis1Mode.
const (
	ArchesConfigRedis1ModeEnabled ArchesConfigRedis1Mode = "enabled"
)

// Defines values for ArchesConfigRedis2ImagePullPolicy.
const (
	ArchesConfigRedis2ImagePullPolicyAlways       ArchesConfigRedis2ImagePullPolicy = "Always"
	ArchesConfigRedis2ImagePullPolicyIfNotPresent ArchesConfigRedis2ImagePullPolicy = "IfNotPresent"
	ArchesConfigRedis2ImagePullPolicyNever        ArchesConfigRedis2ImagePullPolicy = "Never"
)

// Defines values for ArchesConfigRedis2Mode.
const (
	ArchesConfigRedis2ModeManaged ArchesConfigRedis2Mode = "managed"
)

// Defines values for ArchesConfigStorage0Mode.
const (
	Disabled ArchesConfigStorage0Mode = "disabled"
)

// Defines values for ArchesConfigStorage1Mode.
const (
	Enabled ArchesConfigStorage1Mode = "enabled"
)

// Defines values for ArchesConfigStorage2ImagePullPolicy.
const (
	Always       ArchesConfigStorage2ImagePullPolicy = "Always"
	IfNotPresent ArchesConfigStorage2ImagePullPolicy = "IfNotPresent"
	Never        ArchesConfigStorage2ImagePullPolicy = "Never"
)

// Defines values for ArchesConfigStorage2Mode.
const (
	Managed ArchesConfigStorage2Mode = "managed"
)

// ArchesConfig Arches AI configuration schema
type ArchesConfig struct {
	// Api Configuration schema for the API server. This includes settings for CORS, documentation, email, host, port, and request validation.
	Api struct {
		// Cors CORS configuration for the API server. This allows you to specify which origins are allowed to make requests to the API.
		Cors struct {
			// Origins A comma-separated list of allowed origins for CORS requests. Use "*" to allow all
			Origins string `json:"origins"`
		} `json:"cors"`

		// Docs Enable or disable API documentation
		Docs  bool                   `json:"docs"`
		Email ArchesConfig_Api_Email `json:"email"`

		// Host The host address on which the API server will listen
		Host  string `json:"host"`
		Image struct {
			PullPolicy ArchesConfigApiImagePullPolicy `json:"pullPolicy"`
			Repository string                         `json:"repository"`
			Tag        string                         `json:"tag"`
		} `json:"image"`

		// Port The port on which the API server will listen
		Port      float32 `json:"port"`
		Resources struct {
			Limits struct {
				Cpu    string `json:"cpu"`
				Memory string `json:"memory"`
			} `json:"limits"`
			Requests struct {
				Cpu    string `json:"cpu"`
				Memory string `json:"memory"`
			} `json:"requests"`
		} `json:"resources"`

		// Validate Enable or disable request validation. When enabled, the API will validate incoming requests against the defined schemas.
		Validate bool `json:"validate"`
	} `json:"api"`

	// Auth Authentication configuration for the API server. This includes Firebase, local, and Twitter authentication options. Each option can be enabled or disabled independently. The default mode is "enabled" with local auth.
	Auth ArchesConfig_Auth `json:"auth"`

	// Billing Billing configuration for Stripe…
	Billing ArchesConfig_Billing `json:"billing"`

	// Database Database configuration for PostgreSQL with optional pgvector support…
	Database ArchesConfig_Database `json:"database"`

	// Infrastructure Infrastructure configuration for Kubernetes deployments, including development settings, image management, migrations, and service accounts.
	Infrastructure struct {
		// Development Development environment configuration…
		Development struct {
			// Api Development port forwarding config for API
			Api struct {
				// Enabled Enable dev port forward for API
				Enabled bool `json:"enabled"`

				// Port Local port…
				Port float32 `json:"port"`
			} `json:"api"`

			// HostIP Host IP address for dev port forwarding…
			HostIP string `json:"hostIP"`

			// Loki Dev port forwarding for Loki
			Loki struct {
				// Enabled Enable dev port forward for Loki
				Enabled bool `json:"enabled"`

				// Port Local port…
				Port float32 `json:"port"`
			} `json:"loki"`

			// Platform Dev port forwarding for platform
			Platform struct {
				// Enabled Enable dev port forward for platform
				Enabled bool `json:"enabled"`

				// Port Local port…
				Port float32 `json:"port"`
			} `json:"platform"`

			// Postgres Dev port forwarding for PostgreSQL
			Postgres struct {
				// Enabled Enable dev port forward for PostgreSQL
				Enabled bool `json:"enabled"`

				// Port Local port…
				Port float32 `json:"port"`
			} `json:"postgres"`

			// Redis Dev port forwarding for Redis
			Redis struct {
				// Enabled Enable dev port forward for Redis
				Enabled bool `json:"enabled"`

				// Port Local port…
				Port float32 `json:"port"`
			} `json:"redis"`
		} `json:"development"`

		// Images Container image configuration…
		Images struct {
			// ImagePullSecrets List of Kubernetes secrets for pulling private images
			ImagePullSecrets []string `json:"imagePullSecrets"`

			// ImageRegistry Custom container registry URL (leave empty for Docker Hub)
			ImageRegistry string `json:"imageRegistry"`
		} `json:"images"`

		// Migrations Database migration configuration…
		Migrations struct {
			// Enabled Enable automatic DB migrations…
			Enabled bool `json:"enabled"`
		} `json:"migrations"`

		// Namespace Kubernetes namespace where all resources will be deployed
		Namespace string `json:"namespace"`

		// ServiceAccount Kubernetes service account configuration…
		ServiceAccount struct {
			// Create Create dedicated service account
			Create bool `json:"create"`

			// Name Custom service account name
			Name string `json:"name"`
		} `json:"serviceAccount"`
	} `json:"infrastructure"`

	// Ingress Ingress configuration…
	Ingress ArchesConfig_Ingress `json:"ingress"`

	// Intelligence Intelligence configuration (LLMs, embeddings, scraper, speech, etc.)
	Intelligence struct {
		// Embedding Configuration for text embedding generation
		Embedding struct {
			// Type The embedding provider to use for vector embeddings
			Type ArchesConfigIntelligenceEmbeddingType `json:"type"`
		} `json:"embedding"`

		// Llm Large Language Model configuration
		Llm ArchesConfig_Intelligence_Llm `json:"llm"`

		// Runpod RunPod serverless GPU configuration
		Runpod ArchesConfig_Intelligence_Runpod `json:"runpod"`

		// Scraper Web scraping service
		Scraper ArchesConfig_Intelligence_Scraper `json:"scraper"`

		// Speech Speech recognition and TTS services
		Speech ArchesConfig_Intelligence_Speech `json:"speech"`

		// Unstructured Unstructured.io service for document parsing
		Unstructured ArchesConfig_Intelligence_Unstructured `json:"unstructured"`
	} `json:"intelligence"`

	// Logging Logging configuration
	Logging struct {
		// Level Minimum log level to output (fatal=highest, silent=no logs)
		Level ArchesConfigLoggingLevel `json:"level"`

		// Pretty Enable pretty-printed logs for development
		Pretty bool `json:"pretty"`
	} `json:"logging"`

	// Monitoring Monitoring configuration for Grafana and Loki
	Monitoring struct {
		// Grafana Grafana monitoring dashboard configuration
		Grafana ArchesConfig_Monitoring_Grafana `json:"grafana"`

		// Loki Loki log aggregation service configuration
		Loki ArchesConfig_Monitoring_Loki `json:"loki"`
	} `json:"monitoring"`

	// Platform Platform configuration (host, image, resources)
	Platform ArchesConfig_Platform `json:"platform"`
	Redis    ArchesConfig_Redis    `json:"redis"`

	// Storage Object storage configuration for MinIO or S3-compatible services
	Storage ArchesConfig_Storage `json:"storage"`
}

// ArchesConfigApiEmail0 Email configuration is disabled
type ArchesConfigApiEmail0 struct {
	Mode ArchesConfigApiEmail0Mode `json:"mode"`
}

// ArchesConfigApiEmail0Mode defines model for ArchesConfig.Api.Email.0.Mode.
type ArchesConfigApiEmail0Mode string

// ArchesConfigApiEmail1 Email configuration for sending emails. This includes the service, user, and password for the email service.
type ArchesConfigApiEmail1 struct {
	// Mode Email configuration is enabled
	Mode ArchesConfigApiEmail1Mode `json:"mode"`

	// Password Password for the email service. This is required when email configuration is enabled.
	Password string `json:"password"`

	// Service Email service provider (e.g., "gmail", "sendgrid", etc.). This is required when email configuration is enabled.
	Service string `json:"service"`

	// User Username for the email service. This is required when email configuration is enabled.
	User string `json:"user"`
}

// ArchesConfigApiEmail1Mode Email configuration is enabled
type ArchesConfigApiEmail1Mode string

// ArchesConfig_Api_Email defines model for ArchesConfig.Api.Email.
type ArchesConfig_Api_Email struct {
	union json.RawMessage
}

// ArchesConfigApiImagePullPolicy defines model for ArchesConfig.Api.Image.PullPolicy.
type ArchesConfigApiImagePullPolicy string

// ArchesConfigAuth0 defines model for .
type ArchesConfigAuth0 struct {
	Mode ArchesConfigAuth0Mode `json:"mode"`
}

// ArchesConfigAuth0Mode defines model for ArchesConfig.Auth.0.Mode.
type ArchesConfigAuth0Mode string

// ArchesConfigAuth1 defines model for .
type ArchesConfigAuth1 struct {
	// Firebase Firebase authentication configuration…
	Firebase ArchesConfig_Auth_1_Firebase `json:"firebase"`

	// Local Local username/password auth…
	Local ArchesConfig_Auth_1_Local `json:"local"`
	Mode  ArchesConfigAuth1Mode     `json:"mode"`

	// Twitter Twitter OAuth configuration…
	Twitter ArchesConfig_Auth_1_Twitter `json:"twitter"`
}

// ArchesConfigAuth1Firebase0 defines model for .
type ArchesConfigAuth1Firebase0 struct {
	Mode ArchesConfigAuth1Firebase0Mode `json:"mode"`
}

// ArchesConfigAuth1Firebase0Mode defines model for ArchesConfig.Auth.1.Firebase.0.Mode.
type ArchesConfigAuth1Firebase0Mode string

// ArchesConfigAuth1Firebase1 defines model for .
type ArchesConfigAuth1Firebase1 struct {
	// ClientEmail Firebase service account client email address
	ClientEmail string                         `json:"clientEmail"`
	Mode        ArchesConfigAuth1Firebase1Mode `json:"mode"`

	// PrivateKey Firebase service account private key (PEM format)
	PrivateKey string `json:"privateKey"`

	// ProjectId Firebase project ID for authentication
	ProjectId string `json:"projectId"`
}

// ArchesConfigAuth1Firebase1Mode defines model for ArchesConfig.Auth.1.Firebase.1.Mode.
type ArchesConfigAuth1Firebase1Mode string

// ArchesConfig_Auth_1_Firebase Firebase authentication configuration…
type ArchesConfig_Auth_1_Firebase struct {
	union json.RawMessage
}

// ArchesConfigAuth1Local0 defines model for .
type ArchesConfigAuth1Local0 struct {
	Mode ArchesConfigAuth1Local0Mode `json:"mode"`
}

// ArchesConfigAuth1Local0Mode defines model for ArchesConfig.Auth.1.Local.0.Mode.
type ArchesConfigAuth1Local0Mode string

// ArchesConfigAuth1Local1 defines model for .
type ArchesConfigAuth1Local1 struct {
	Mode ArchesConfigAuth1Local1Mode `json:"mode"`
}

// ArchesConfigAuth1Local1Mode defines model for ArchesConfig.Auth.1.Local.1.Mode.
type ArchesConfigAuth1Local1Mode string

// ArchesConfig_Auth_1_Local Local username/password auth…
type ArchesConfig_Auth_1_Local struct {
	union json.RawMessage
}

// ArchesConfigAuth1Mode defines model for ArchesConfig.Auth.1.Mode.
type ArchesConfigAuth1Mode string

// ArchesConfigAuth1Twitter0 defines model for .
type ArchesConfigAuth1Twitter0 struct {
	Mode ArchesConfigAuth1Twitter0Mode `json:"mode"`
}

// ArchesConfigAuth1Twitter0Mode defines model for ArchesConfig.Auth.1.Twitter.0.Mode.
type ArchesConfigAuth1Twitter0Mode string

// ArchesConfigAuth1Twitter1 defines model for .
type ArchesConfigAuth1Twitter1 struct {
	// CallbackURL OAuth callback URL…
	CallbackURL string `json:"callbackURL"`

	// ConsumerKey Twitter API consumer key…
	ConsumerKey string `json:"consumerKey"`

	// ConsumerSecret Twitter API consumer secret…
	ConsumerSecret string                        `json:"consumerSecret"`
	Mode           ArchesConfigAuth1Twitter1Mode `json:"mode"`
}

// ArchesConfigAuth1Twitter1Mode defines model for ArchesConfig.Auth.1.Twitter.1.Mode.
type ArchesConfigAuth1Twitter1Mode string

// ArchesConfig_Auth_1_Twitter Twitter OAuth configuration…
type ArchesConfig_Auth_1_Twitter struct {
	union json.RawMessage
}

// ArchesConfig_Auth Authentication configuration for the API server. This includes Firebase, local, and Twitter authentication options. Each option can be enabled or disabled independently. The default mode is "enabled" with local auth.
type ArchesConfig_Auth struct {
	union json.RawMessage
}

// ArchesConfigBilling0 defines model for .
type ArchesConfigBilling0 struct {
	Mode ArchesConfigBilling0Mode `json:"mode"`
}

// ArchesConfigBilling0Mode defines model for ArchesConfig.Billing.0.Mode.
type ArchesConfigBilling0Mode string

// ArchesConfigBilling1 defines model for .
type ArchesConfigBilling1 struct {
	Mode   ArchesConfigBilling1Mode `json:"mode"`
	Stripe struct {
		// Token Stripe secret API key…
		Token string `json:"token"`

		// Whsec Stripe webhook endpoint secret…
		Whsec string `json:"whsec"`
	} `json:"stripe"`
}

// ArchesConfigBilling1Mode defines model for ArchesConfig.Billing.1.Mode.
type ArchesConfigBilling1Mode string

// ArchesConfig_Billing Billing configuration for Stripe…
type ArchesConfig_Billing struct {
	union json.RawMessage
}

// ArchesConfigDatabase0 defines model for .
type ArchesConfigDatabase0 struct {
	Mode ArchesConfigDatabase0Mode `json:"mode"`
}

// ArchesConfigDatabase0Mode defines model for ArchesConfig.Database.0.Mode.
type ArchesConfigDatabase0Mode string

// ArchesConfigDatabase1 defines model for .
type ArchesConfigDatabase1 struct {
	Mode ArchesConfigDatabase1Mode `json:"mode"`

	// Url Database connection URL/string
	Url string `json:"url"`
}

// ArchesConfigDatabase1Mode defines model for ArchesConfig.Database.1.Mode.
type ArchesConfigDatabase1Mode string

// ArchesConfigDatabase2 defines model for .
type ArchesConfigDatabase2 struct {
	Auth struct {
		// Database Database name…
		Database string `json:"database"`

		// Password Database user password…
		Password string `json:"password"`
	} `json:"auth"`
	Image struct {
		// PullPolicy Kubernetes image pull policy
		PullPolicy ArchesConfigDatabase2ImagePullPolicy `json:"pullPolicy"`

		// Repository PostgreSQL with pgvector extension docker image
		Repository string `json:"repository"`

		// Tag PostgreSQL version tag
		Tag string `json:"tag"`
	} `json:"image"`
	Mode        ArchesConfigDatabase2Mode `json:"mode"`
	Persistence struct {
		// Enabled Enable persistent storage…
		Enabled bool `json:"enabled"`

		// Size Size of persistent volume…
		Size string `json:"size"`
	} `json:"persistence"`
	Resources struct {
		Limits struct {
			// Cpu Maximum CPU allocation…
			Cpu string `json:"cpu"`

			// Memory Maximum memory allocation…
			Memory string `json:"memory"`
		} `json:"limits"`
		Requests struct {
			// Cpu Requested CPU allocation…
			Cpu string `json:"cpu"`

			// Memory Requested memory allocation…
			Memory string `json:"memory"`
		} `json:"requests"`
	} `json:"resources"`

	// Url Database connection URL/string
	Url string `json:"url"`
}

// ArchesConfigDatabase2ImagePullPolicy Kubernetes image pull policy
type ArchesConfigDatabase2ImagePullPolicy string

// ArchesConfigDatabase2Mode defines model for ArchesConfig.Database.2.Mode.
type ArchesConfigDatabase2Mode string

// ArchesConfig_Database Database configuration for PostgreSQL with optional pgvector support…
type ArchesConfig_Database struct {
	union json.RawMessage
}

// ArchesConfigIngress0 defines model for .
type ArchesConfigIngress0 struct {
	Mode ArchesConfigIngress0Mode `json:"mode"`
}

// ArchesConfigIngress0Mode defines model for ArchesConfig.Ingress.0.Mode.
type ArchesConfigIngress0Mode string

// ArchesConfigIngress1 defines model for .
type ArchesConfigIngress1 struct {
	// Domain Primary domain name for ingress routing
	Domain string                   `json:"domain"`
	Mode   ArchesConfigIngress1Mode `json:"mode"`

	// Tls TLS configuration…
	Tls struct {
		// Enabled Enable TLS/SSL…
		Enabled bool `json:"enabled"`

		// SecretName Kubernetes secret name…
		SecretName string `json:"secretName"`
	} `json:"tls"`
}

// ArchesConfigIngress1Mode defines model for ArchesConfig.Ingress.1.Mode.
type ArchesConfigIngress1Mode string

// ArchesConfigIngress2 defines model for .
type ArchesConfigIngress2 struct {
	// Domain Primary domain name for ingress routing
	Domain string                   `json:"domain"`
	Mode   ArchesConfigIngress2Mode `json:"mode"`
	Tls    struct {
		// Enabled Enable TLS/SSL…
		Enabled bool `json:"enabled"`

		// Issuer Cert-manager ClusterIssuer…
		Issuer string `json:"issuer"`

		// SecretName Kubernetes secret name…
		SecretName string `json:"secretName"`
	} `json:"tls"`
}

// ArchesConfigIngress2Mode defines model for ArchesConfig.Ingress.2.Mode.
type ArchesConfigIngress2Mode string

// ArchesConfig_Ingress Ingress configuration…
type ArchesConfig_Ingress struct {
	union json.RawMessage
}

// ArchesConfigIntelligenceEmbeddingType The embedding provider to use for vector embeddings
type ArchesConfigIntelligenceEmbeddingType string

// ArchesConfigIntelligenceLlm0 defines model for .
type ArchesConfigIntelligenceLlm0 struct {
	// Endpoint Ollama server endpoint URL
	Endpoint string `json:"endpoint"`

	// Token Optional authentication token for Ollama
	Token *string                          `json:"token,omitempty"`
	Type  ArchesConfigIntelligenceLlm0Type `json:"type"`
}

// ArchesConfigIntelligenceLlm0Type defines model for ArchesConfig.Intelligence.Llm.0.Type.
type ArchesConfigIntelligenceLlm0Type string

// ArchesConfigIntelligenceLlm1 defines model for .
type ArchesConfigIntelligenceLlm1 struct {
	// Endpoint OpenAI API endpoint (defaults to official API)
	Endpoint string `json:"endpoint"`

	// Token OpenAI API key for authentication
	Token *string                          `json:"token,omitempty"`
	Type  ArchesConfigIntelligenceLlm1Type `json:"type"`
}

// ArchesConfigIntelligenceLlm1Type defines model for ArchesConfig.Intelligence.Llm.1.Type.
type ArchesConfigIntelligenceLlm1Type string

// ArchesConfig_Intelligence_Llm Large Language Model configuration
type ArchesConfig_Intelligence_Llm struct {
	union json.RawMessage
}

// ArchesConfigIntelligenceRunpod0 defines model for .
type ArchesConfigIntelligenceRunpod0 struct {
	Mode ArchesConfigIntelligenceRunpod0Mode `json:"mode"`
}

// ArchesConfigIntelligenceRunpod0Mode defines model for ArchesConfig.Intelligence.Runpod.0.Mode.
type ArchesConfigIntelligenceRunpod0Mode string

// ArchesConfigIntelligenceRunpod1 defines model for .
type ArchesConfigIntelligenceRunpod1 struct {
	Mode ArchesConfigIntelligenceRunpod1Mode `json:"mode"`

	// Token RunPod API token…
	Token *string `json:"token,omitempty"`
}

// ArchesConfigIntelligenceRunpod1Mode defines model for ArchesConfig.Intelligence.Runpod.1.Mode.
type ArchesConfigIntelligenceRunpod1Mode string

// ArchesConfig_Intelligence_Runpod RunPod serverless GPU configuration
type ArchesConfig_Intelligence_Runpod struct {
	union json.RawMessage
}

// ArchesConfigIntelligenceScraper0 defines model for .
type ArchesConfigIntelligenceScraper0 struct {
	Mode ArchesConfigIntelligenceScraper0Mode `json:"mode"`
}

// ArchesConfigIntelligenceScraper0Mode defines model for ArchesConfig.Intelligence.Scraper.0.Mode.
type ArchesConfigIntelligenceScraper0Mode string

// ArchesConfigIntelligenceScraper1 defines model for .
type ArchesConfigIntelligenceScraper1 struct {
	// Endpoint Web scraper service endpoint URL
	Endpoint string                               `json:"endpoint"`
	Mode     ArchesConfigIntelligenceScraper1Mode `json:"mode"`
}

// ArchesConfigIntelligenceScraper1Mode defines model for ArchesConfig.Intelligence.Scraper.1.Mode.
type ArchesConfigIntelligenceScraper1Mode string

// ArchesConfigIntelligenceScraper2 defines model for .
type ArchesConfigIntelligenceScraper2 struct {
	Image struct {
		PullPolicy ArchesConfigIntelligenceScraper2ImagePullPolicy `json:"pullPolicy"`
		Repository string                                          `json:"repository"`
		Tag        string                                          `json:"tag"`
	} `json:"image"`
	Mode      ArchesConfigIntelligenceScraper2Mode `json:"mode"`
	Resources struct {
		Limits struct {
			Cpu    string `json:"cpu"`
			Memory string `json:"memory"`
		} `json:"limits"`
		Requests struct {
			Cpu    string `json:"cpu"`
			Memory string `json:"memory"`
		} `json:"requests"`
	} `json:"resources"`
}

// ArchesConfigIntelligenceScraper2ImagePullPolicy defines model for ArchesConfig.Intelligence.Scraper.2.Image.PullPolicy.
type ArchesConfigIntelligenceScraper2ImagePullPolicy string

// ArchesConfigIntelligenceScraper2Mode defines model for ArchesConfig.Intelligence.Scraper.2.Mode.
type ArchesConfigIntelligenceScraper2Mode string

// ArchesConfig_Intelligence_Scraper Web scraping service
type ArchesConfig_Intelligence_Scraper struct {
	union json.RawMessage
}

// ArchesConfigIntelligenceSpeech0 defines model for .
type ArchesConfigIntelligenceSpeech0 struct {
	Mode ArchesConfigIntelligenceSpeech0Mode `json:"mode"`
}

// ArchesConfigIntelligenceSpeech0Mode defines model for ArchesConfig.Intelligence.Speech.0.Mode.
type ArchesConfigIntelligenceSpeech0Mode string

// ArchesConfigIntelligenceSpeech1 defines model for .
type ArchesConfigIntelligenceSpeech1 struct {
	Mode ArchesConfigIntelligenceSpeech1Mode `json:"mode"`

	// Token Speech-to-text service API token
	Token string `json:"token"`
}

// ArchesConfigIntelligenceSpeech1Mode defines model for ArchesConfig.Intelligence.Speech.1.Mode.
type ArchesConfigIntelligenceSpeech1Mode string

// ArchesConfig_Intelligence_Speech Speech recognition and TTS services
type ArchesConfig_Intelligence_Speech struct {
	union json.RawMessage
}

// ArchesConfigIntelligenceUnstructured0 defines model for .
type ArchesConfigIntelligenceUnstructured0 struct {
	Mode ArchesConfigIntelligenceUnstructured0Mode `json:"mode"`
}

// ArchesConfigIntelligenceUnstructured0Mode defines model for ArchesConfig.Intelligence.Unstructured.0.Mode.
type ArchesConfigIntelligenceUnstructured0Mode string

// ArchesConfigIntelligenceUnstructured1 defines model for .
type ArchesConfigIntelligenceUnstructured1 struct {
	Mode ArchesConfigIntelligenceUnstructured1Mode `json:"mode"`
}

// ArchesConfigIntelligenceUnstructured1Mode defines model for ArchesConfig.Intelligence.Unstructured.1.Mode.
type ArchesConfigIntelligenceUnstructured1Mode string

// ArchesConfigIntelligenceUnstructured2 defines model for .
type ArchesConfigIntelligenceUnstructured2 struct {
	Image struct {
		PullPolicy ArchesConfigIntelligenceUnstructured2ImagePullPolicy `json:"pullPolicy"`
		Repository string                                               `json:"repository"`
		Tag        string                                               `json:"tag"`
	} `json:"image"`
	Mode      ArchesConfigIntelligenceUnstructured2Mode `json:"mode"`
	Resources struct {
		Limits struct {
			Cpu    string `json:"cpu"`
			Memory string `json:"memory"`
		} `json:"limits"`
		Requests struct {
			Cpu    string `json:"cpu"`
			Memory string `json:"memory"`
		} `json:"requests"`
	} `json:"resources"`
}

// ArchesConfigIntelligenceUnstructured2ImagePullPolicy defines model for ArchesConfig.Intelligence.Unstructured.2.Image.PullPolicy.
type ArchesConfigIntelligenceUnstructured2ImagePullPolicy string

// ArchesConfigIntelligenceUnstructured2Mode defines model for ArchesConfig.Intelligence.Unstructured.2.Mode.
type ArchesConfigIntelligenceUnstructured2Mode string

// ArchesConfig_Intelligence_Unstructured Unstructured.io service for document parsing
type ArchesConfig_Intelligence_Unstructured struct {
	union json.RawMessage
}

// ArchesConfigLoggingLevel Minimum log level to output (fatal=highest, silent=no logs)
type ArchesConfigLoggingLevel string

// ArchesConfigMonitoringGrafana0 defines model for .
type ArchesConfigMonitoringGrafana0 struct {
	Mode ArchesConfigMonitoringGrafana0Mode `json:"mode"`
}

// ArchesConfigMonitoringGrafana0Mode defines model for ArchesConfig.Monitoring.Grafana.0.Mode.
type ArchesConfigMonitoringGrafana0Mode string

// ArchesConfigMonitoringGrafana1 defines model for .
type ArchesConfigMonitoringGrafana1 struct {
	Mode ArchesConfigMonitoringGrafana1Mode `json:"mode"`
}

// ArchesConfigMonitoringGrafana1Mode defines model for ArchesConfig.Monitoring.Grafana.1.Mode.
type ArchesConfigMonitoringGrafana1Mode string

// ArchesConfigMonitoringGrafana2 defines model for .
type ArchesConfigMonitoringGrafana2 struct {
	Image struct {
		PullPolicy ArchesConfigMonitoringGrafana2ImagePullPolicy `json:"pullPolicy"`
		Repository string                                        `json:"repository"`
		Tag        string                                        `json:"tag"`
	} `json:"image"`
	Mode      ArchesConfigMonitoringGrafana2Mode `json:"mode"`
	Resources struct {
		Limits struct {
			Cpu    string `json:"cpu"`
			Memory string `json:"memory"`
		} `json:"limits"`
		Requests struct {
			Cpu    string `json:"cpu"`
			Memory string `json:"memory"`
		} `json:"requests"`
	} `json:"resources"`
}

// ArchesConfigMonitoringGrafana2ImagePullPolicy defines model for ArchesConfig.Monitoring.Grafana.2.Image.PullPolicy.
type ArchesConfigMonitoringGrafana2ImagePullPolicy string

// ArchesConfigMonitoringGrafana2Mode defines model for ArchesConfig.Monitoring.Grafana.2.Mode.
type ArchesConfigMonitoringGrafana2Mode string

// ArchesConfig_Monitoring_Grafana Grafana monitoring dashboard configuration
type ArchesConfig_Monitoring_Grafana struct {
	union json.RawMessage
}

// ArchesConfigMonitoringLoki0 defines model for .
type ArchesConfigMonitoringLoki0 struct {
	Mode ArchesConfigMonitoringLoki0Mode `json:"mode"`
}

// ArchesConfigMonitoringLoki0Mode defines model for ArchesConfig.Monitoring.Loki.0.Mode.
type ArchesConfigMonitoringLoki0Mode string

// ArchesConfigMonitoringLoki1 defines model for .
type ArchesConfigMonitoringLoki1 struct {
	// Host External Loki host URL
	Host string                          `json:"host"`
	Mode ArchesConfigMonitoringLoki1Mode `json:"mode"`
}

// ArchesConfigMonitoringLoki1Mode defines model for ArchesConfig.Monitoring.Loki.1.Mode.
type ArchesConfigMonitoringLoki1Mode string

// ArchesConfigMonitoringLoki2 defines model for .
type ArchesConfigMonitoringLoki2 struct {
	Host  string `json:"host"`
	Image struct {
		PullPolicy ArchesConfigMonitoringLoki2ImagePullPolicy `json:"pullPolicy"`
		Repository string                                     `json:"repository"`
		Tag        string                                     `json:"tag"`
	} `json:"image"`
	Mode      ArchesConfigMonitoringLoki2Mode `json:"mode"`
	Resources struct {
		Limits struct {
			Cpu    string `json:"cpu"`
			Memory string `json:"memory"`
		} `json:"limits"`
		Requests struct {
			Cpu    string `json:"cpu"`
			Memory string `json:"memory"`
		} `json:"requests"`
	} `json:"resources"`
}

// ArchesConfigMonitoringLoki2ImagePullPolicy defines model for ArchesConfig.Monitoring.Loki.2.Image.PullPolicy.
type ArchesConfigMonitoringLoki2ImagePullPolicy string

// ArchesConfigMonitoringLoki2Mode defines model for ArchesConfig.Monitoring.Loki.2.Mode.
type ArchesConfigMonitoringLoki2Mode string

// ArchesConfig_Monitoring_Loki Loki log aggregation service configuration
type ArchesConfig_Monitoring_Loki struct {
	union json.RawMessage
}

// ArchesConfigPlatform0 defines model for .
type ArchesConfigPlatform0 struct {
	Mode ArchesConfigPlatform0Mode `json:"mode"`
}

// ArchesConfigPlatform0Mode defines model for ArchesConfig.Platform.0.Mode.
type ArchesConfigPlatform0Mode string

// ArchesConfigPlatform1 defines model for .
type ArchesConfigPlatform1 struct {
	// Host Host address where the platform service will be accessible
	Host string                    `json:"host"`
	Mode ArchesConfigPlatform1Mode `json:"mode"`
}

// ArchesConfigPlatform1Mode defines model for ArchesConfig.Platform.1.Mode.
type ArchesConfigPlatform1Mode string

// ArchesConfigPlatform2 defines model for .
type ArchesConfigPlatform2 struct {
	// Host Host address…
	Host  string `json:"host"`
	Image struct {
		PullPolicy ArchesConfigPlatform2ImagePullPolicy `json:"pullPolicy"`
		Repository string                               `json:"repository"`
		Tag        string                               `json:"tag"`
	} `json:"image"`
	Mode      ArchesConfigPlatform2Mode `json:"mode"`
	Resources struct {
		Limits struct {
			Cpu    string `json:"cpu"`
			Memory string `json:"memory"`
		} `json:"limits"`
		Requests struct {
			Cpu    string `json:"cpu"`
			Memory string `json:"memory"`
		} `json:"requests"`
	} `json:"resources"`
}

// ArchesConfigPlatform2ImagePullPolicy defines model for ArchesConfig.Platform.2.Image.PullPolicy.
type ArchesConfigPlatform2ImagePullPolicy string

// ArchesConfigPlatform2Mode defines model for ArchesConfig.Platform.2.Mode.
type ArchesConfigPlatform2Mode string

// ArchesConfig_Platform Platform configuration (host, image, resources)
type ArchesConfig_Platform struct {
	union json.RawMessage
}

// ArchesConfigRedis0 defines model for .
type ArchesConfigRedis0 struct {
	Mode ArchesConfigRedis0Mode `json:"mode"`
}

// ArchesConfigRedis0Mode defines model for ArchesConfig.Redis.0.Mode.
type ArchesConfigRedis0Mode string

// ArchesConfigRedis1 defines model for .
type ArchesConfigRedis1 struct {
	// Auth Redis authentication password (optional)
	Auth string `json:"auth"`

	// Ca Certificate Authority for TLS (optional)
	Ca *string `json:"ca,omitempty"`

	// Host Redis hostname or IP
	Host string                 `json:"host"`
	Mode ArchesConfigRedis1Mode `json:"mode"`

	// Port Redis port number
	Port float32 `json:"port"`
}

// ArchesConfigRedis1Mode defines model for ArchesConfig.Redis.1.Mode.
type ArchesConfigRedis1Mode string

// ArchesConfigRedis2 defines model for .
type ArchesConfigRedis2 struct {
	// Auth Redis authentication password (optional)
	Auth string `json:"auth"`

	// Ca Certificate Authority for TLS (optional)
	Ca *string `json:"ca,omitempty"`

	// Host Redis hostname or IP
	Host  string `json:"host"`
	Image struct {
		PullPolicy ArchesConfigRedis2ImagePullPolicy `json:"pullPolicy"`
		Repository string                            `json:"repository"`
		Tag        string                            `json:"tag"`
	} `json:"image"`
	Mode        ArchesConfigRedis2Mode `json:"mode"`
	Persistence struct {
		// Enabled Enable persistent storage for Redis data
		Enabled bool `json:"enabled"`

		// Size Size of persistent volume for Redis storage
		Size string `json:"size"`
	} `json:"persistence"`

	// Port Redis port number
	Port      float32 `json:"port"`
	Resources struct {
		Limits struct {
			Cpu    string `json:"cpu"`
			Memory string `json:"memory"`
		} `json:"limits"`
		Requests struct {
			Cpu    string `json:"cpu"`
			Memory string `json:"memory"`
		} `json:"requests"`
	} `json:"resources"`
}

// ArchesConfigRedis2ImagePullPolicy defines model for ArchesConfig.Redis.2.Image.PullPolicy.
type ArchesConfigRedis2ImagePullPolicy string

// ArchesConfigRedis2Mode defines model for ArchesConfig.Redis.2.Mode.
type ArchesConfigRedis2Mode string

// ArchesConfig_Redis defines model for ArchesConfig.Redis.
type ArchesConfig_Redis struct {
	union json.RawMessage
}

// ArchesConfigStorage0 defines model for .
type ArchesConfigStorage0 struct {
	Mode ArchesConfigStorage0Mode `json:"mode"`
}

// ArchesConfigStorage0Mode defines model for ArchesConfig.Storage.0.Mode.
type ArchesConfigStorage0Mode string

// ArchesConfigStorage1 defines model for .
type ArchesConfigStorage1 struct {
	// Accesskey MinIO/S3 access key ID
	Accesskey string `json:"accesskey"`

	// Bucket S3 bucket name
	Bucket string `json:"bucket"`

	// Endpoint MinIO server endpoint URL
	Endpoint string                   `json:"endpoint"`
	Mode     ArchesConfigStorage1Mode `json:"mode"`

	// Secretkey MinIO/S3 secret access key
	Secretkey string `json:"secretkey"`
}

// ArchesConfigStorage1Mode defines model for ArchesConfig.Storage.1.Mode.
type ArchesConfigStorage1Mode string

// ArchesConfigStorage2 defines model for .
type ArchesConfigStorage2 struct {
	// Accesskey MinIO/S3 access key ID
	Accesskey string `json:"accesskey"`

	// Bucket S3 bucket name
	Bucket string `json:"bucket"`

	// Endpoint MinIO server endpoint URL
	Endpoint string `json:"endpoint"`
	Image    struct {
		PullPolicy ArchesConfigStorage2ImagePullPolicy `json:"pullPolicy"`
		Repository string                              `json:"repository"`
		Tag        string                              `json:"tag"`
	} `json:"image"`
	Mode        ArchesConfigStorage2Mode `json:"mode"`
	Persistence struct {
		// Enabled Enable persistent storage for MinIO data
		Enabled bool `json:"enabled"`

		// Size Size of persistent volume for object storage
		Size string `json:"size"`
	} `json:"persistence"`
	Resources struct {
		Limits struct {
			Cpu    string `json:"cpu"`
			Memory string `json:"memory"`
		} `json:"limits"`
		Requests struct {
			Cpu    string `json:"cpu"`
			Memory string `json:"memory"`
		} `json:"requests"`
	} `json:"resources"`

	// Secretkey MinIO/S3 secret access key
	Secretkey string `json:"secretkey"`
}

// ArchesConfigStorage2ImagePullPolicy defines model for ArchesConfig.Storage.2.Image.PullPolicy.
type ArchesConfigStorage2ImagePullPolicy string

// ArchesConfigStorage2Mode defines model for ArchesConfig.Storage.2.Mode.
type ArchesConfigStorage2Mode string

// ArchesConfig_Storage Object storage configuration for MinIO or S3-compatible services
type ArchesConfig_Storage struct {
	union json.RawMessage
}

// AsArchesConfigApiEmail0 returns the union data inside the ArchesConfig_Api_Email as a ArchesConfigApiEmail0
func (t ArchesConfig_Api_Email) AsArchesConfigApiEmail0() (ArchesConfigApiEmail0, error) {
	var body ArchesConfigApiEmail0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigApiEmail0 overwrites any union data inside the ArchesConfig_Api_Email as the provided ArchesConfigApiEmail0
func (t *ArchesConfig_Api_Email) FromArchesConfigApiEmail0(v ArchesConfigApiEmail0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigApiEmail0 performs a merge with any union data inside the ArchesConfig_Api_Email, using the provided ArchesConfigApiEmail0
func (t *ArchesConfig_Api_Email) MergeArchesConfigApiEmail0(v ArchesConfigApiEmail0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchesConfigApiEmail1 returns the union data inside the ArchesConfig_Api_Email as a ArchesConfigApiEmail1
func (t ArchesConfig_Api_Email) AsArchesConfigApiEmail1() (ArchesConfigApiEmail1, error) {
	var body ArchesConfigApiEmail1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigApiEmail1 overwrites any union data inside the ArchesConfig_Api_Email as the provided ArchesConfigApiEmail1
func (t *ArchesConfig_Api_Email) FromArchesConfigApiEmail1(v ArchesConfigApiEmail1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigApiEmail1 performs a merge with any union data inside the ArchesConfig_Api_Email, using the provided ArchesConfigApiEmail1
func (t *ArchesConfig_Api_Email) MergeArchesConfigApiEmail1(v ArchesConfigApiEmail1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArchesConfig_Api_Email) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ArchesConfig_Api_Email) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsArchesConfigAuth1Firebase0 returns the union data inside the ArchesConfig_Auth_1_Firebase as a ArchesConfigAuth1Firebase0
func (t ArchesConfig_Auth_1_Firebase) AsArchesConfigAuth1Firebase0() (ArchesConfigAuth1Firebase0, error) {
	var body ArchesConfigAuth1Firebase0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigAuth1Firebase0 overwrites any union data inside the ArchesConfig_Auth_1_Firebase as the provided ArchesConfigAuth1Firebase0
func (t *ArchesConfig_Auth_1_Firebase) FromArchesConfigAuth1Firebase0(v ArchesConfigAuth1Firebase0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigAuth1Firebase0 performs a merge with any union data inside the ArchesConfig_Auth_1_Firebase, using the provided ArchesConfigAuth1Firebase0
func (t *ArchesConfig_Auth_1_Firebase) MergeArchesConfigAuth1Firebase0(v ArchesConfigAuth1Firebase0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchesConfigAuth1Firebase1 returns the union data inside the ArchesConfig_Auth_1_Firebase as a ArchesConfigAuth1Firebase1
func (t ArchesConfig_Auth_1_Firebase) AsArchesConfigAuth1Firebase1() (ArchesConfigAuth1Firebase1, error) {
	var body ArchesConfigAuth1Firebase1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigAuth1Firebase1 overwrites any union data inside the ArchesConfig_Auth_1_Firebase as the provided ArchesConfigAuth1Firebase1
func (t *ArchesConfig_Auth_1_Firebase) FromArchesConfigAuth1Firebase1(v ArchesConfigAuth1Firebase1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigAuth1Firebase1 performs a merge with any union data inside the ArchesConfig_Auth_1_Firebase, using the provided ArchesConfigAuth1Firebase1
func (t *ArchesConfig_Auth_1_Firebase) MergeArchesConfigAuth1Firebase1(v ArchesConfigAuth1Firebase1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArchesConfig_Auth_1_Firebase) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ArchesConfig_Auth_1_Firebase) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsArchesConfigAuth1Local0 returns the union data inside the ArchesConfig_Auth_1_Local as a ArchesConfigAuth1Local0
func (t ArchesConfig_Auth_1_Local) AsArchesConfigAuth1Local0() (ArchesConfigAuth1Local0, error) {
	var body ArchesConfigAuth1Local0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigAuth1Local0 overwrites any union data inside the ArchesConfig_Auth_1_Local as the provided ArchesConfigAuth1Local0
func (t *ArchesConfig_Auth_1_Local) FromArchesConfigAuth1Local0(v ArchesConfigAuth1Local0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigAuth1Local0 performs a merge with any union data inside the ArchesConfig_Auth_1_Local, using the provided ArchesConfigAuth1Local0
func (t *ArchesConfig_Auth_1_Local) MergeArchesConfigAuth1Local0(v ArchesConfigAuth1Local0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchesConfigAuth1Local1 returns the union data inside the ArchesConfig_Auth_1_Local as a ArchesConfigAuth1Local1
func (t ArchesConfig_Auth_1_Local) AsArchesConfigAuth1Local1() (ArchesConfigAuth1Local1, error) {
	var body ArchesConfigAuth1Local1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigAuth1Local1 overwrites any union data inside the ArchesConfig_Auth_1_Local as the provided ArchesConfigAuth1Local1
func (t *ArchesConfig_Auth_1_Local) FromArchesConfigAuth1Local1(v ArchesConfigAuth1Local1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigAuth1Local1 performs a merge with any union data inside the ArchesConfig_Auth_1_Local, using the provided ArchesConfigAuth1Local1
func (t *ArchesConfig_Auth_1_Local) MergeArchesConfigAuth1Local1(v ArchesConfigAuth1Local1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArchesConfig_Auth_1_Local) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ArchesConfig_Auth_1_Local) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsArchesConfigAuth1Twitter0 returns the union data inside the ArchesConfig_Auth_1_Twitter as a ArchesConfigAuth1Twitter0
func (t ArchesConfig_Auth_1_Twitter) AsArchesConfigAuth1Twitter0() (ArchesConfigAuth1Twitter0, error) {
	var body ArchesConfigAuth1Twitter0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigAuth1Twitter0 overwrites any union data inside the ArchesConfig_Auth_1_Twitter as the provided ArchesConfigAuth1Twitter0
func (t *ArchesConfig_Auth_1_Twitter) FromArchesConfigAuth1Twitter0(v ArchesConfigAuth1Twitter0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigAuth1Twitter0 performs a merge with any union data inside the ArchesConfig_Auth_1_Twitter, using the provided ArchesConfigAuth1Twitter0
func (t *ArchesConfig_Auth_1_Twitter) MergeArchesConfigAuth1Twitter0(v ArchesConfigAuth1Twitter0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchesConfigAuth1Twitter1 returns the union data inside the ArchesConfig_Auth_1_Twitter as a ArchesConfigAuth1Twitter1
func (t ArchesConfig_Auth_1_Twitter) AsArchesConfigAuth1Twitter1() (ArchesConfigAuth1Twitter1, error) {
	var body ArchesConfigAuth1Twitter1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigAuth1Twitter1 overwrites any union data inside the ArchesConfig_Auth_1_Twitter as the provided ArchesConfigAuth1Twitter1
func (t *ArchesConfig_Auth_1_Twitter) FromArchesConfigAuth1Twitter1(v ArchesConfigAuth1Twitter1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigAuth1Twitter1 performs a merge with any union data inside the ArchesConfig_Auth_1_Twitter, using the provided ArchesConfigAuth1Twitter1
func (t *ArchesConfig_Auth_1_Twitter) MergeArchesConfigAuth1Twitter1(v ArchesConfigAuth1Twitter1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArchesConfig_Auth_1_Twitter) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ArchesConfig_Auth_1_Twitter) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsArchesConfigAuth0 returns the union data inside the ArchesConfig_Auth as a ArchesConfigAuth0
func (t ArchesConfig_Auth) AsArchesConfigAuth0() (ArchesConfigAuth0, error) {
	var body ArchesConfigAuth0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigAuth0 overwrites any union data inside the ArchesConfig_Auth as the provided ArchesConfigAuth0
func (t *ArchesConfig_Auth) FromArchesConfigAuth0(v ArchesConfigAuth0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigAuth0 performs a merge with any union data inside the ArchesConfig_Auth, using the provided ArchesConfigAuth0
func (t *ArchesConfig_Auth) MergeArchesConfigAuth0(v ArchesConfigAuth0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchesConfigAuth1 returns the union data inside the ArchesConfig_Auth as a ArchesConfigAuth1
func (t ArchesConfig_Auth) AsArchesConfigAuth1() (ArchesConfigAuth1, error) {
	var body ArchesConfigAuth1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigAuth1 overwrites any union data inside the ArchesConfig_Auth as the provided ArchesConfigAuth1
func (t *ArchesConfig_Auth) FromArchesConfigAuth1(v ArchesConfigAuth1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigAuth1 performs a merge with any union data inside the ArchesConfig_Auth, using the provided ArchesConfigAuth1
func (t *ArchesConfig_Auth) MergeArchesConfigAuth1(v ArchesConfigAuth1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArchesConfig_Auth) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ArchesConfig_Auth) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsArchesConfigBilling0 returns the union data inside the ArchesConfig_Billing as a ArchesConfigBilling0
func (t ArchesConfig_Billing) AsArchesConfigBilling0() (ArchesConfigBilling0, error) {
	var body ArchesConfigBilling0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigBilling0 overwrites any union data inside the ArchesConfig_Billing as the provided ArchesConfigBilling0
func (t *ArchesConfig_Billing) FromArchesConfigBilling0(v ArchesConfigBilling0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigBilling0 performs a merge with any union data inside the ArchesConfig_Billing, using the provided ArchesConfigBilling0
func (t *ArchesConfig_Billing) MergeArchesConfigBilling0(v ArchesConfigBilling0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchesConfigBilling1 returns the union data inside the ArchesConfig_Billing as a ArchesConfigBilling1
func (t ArchesConfig_Billing) AsArchesConfigBilling1() (ArchesConfigBilling1, error) {
	var body ArchesConfigBilling1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigBilling1 overwrites any union data inside the ArchesConfig_Billing as the provided ArchesConfigBilling1
func (t *ArchesConfig_Billing) FromArchesConfigBilling1(v ArchesConfigBilling1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigBilling1 performs a merge with any union data inside the ArchesConfig_Billing, using the provided ArchesConfigBilling1
func (t *ArchesConfig_Billing) MergeArchesConfigBilling1(v ArchesConfigBilling1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArchesConfig_Billing) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ArchesConfig_Billing) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsArchesConfigDatabase0 returns the union data inside the ArchesConfig_Database as a ArchesConfigDatabase0
func (t ArchesConfig_Database) AsArchesConfigDatabase0() (ArchesConfigDatabase0, error) {
	var body ArchesConfigDatabase0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigDatabase0 overwrites any union data inside the ArchesConfig_Database as the provided ArchesConfigDatabase0
func (t *ArchesConfig_Database) FromArchesConfigDatabase0(v ArchesConfigDatabase0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigDatabase0 performs a merge with any union data inside the ArchesConfig_Database, using the provided ArchesConfigDatabase0
func (t *ArchesConfig_Database) MergeArchesConfigDatabase0(v ArchesConfigDatabase0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchesConfigDatabase1 returns the union data inside the ArchesConfig_Database as a ArchesConfigDatabase1
func (t ArchesConfig_Database) AsArchesConfigDatabase1() (ArchesConfigDatabase1, error) {
	var body ArchesConfigDatabase1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigDatabase1 overwrites any union data inside the ArchesConfig_Database as the provided ArchesConfigDatabase1
func (t *ArchesConfig_Database) FromArchesConfigDatabase1(v ArchesConfigDatabase1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigDatabase1 performs a merge with any union data inside the ArchesConfig_Database, using the provided ArchesConfigDatabase1
func (t *ArchesConfig_Database) MergeArchesConfigDatabase1(v ArchesConfigDatabase1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchesConfigDatabase2 returns the union data inside the ArchesConfig_Database as a ArchesConfigDatabase2
func (t ArchesConfig_Database) AsArchesConfigDatabase2() (ArchesConfigDatabase2, error) {
	var body ArchesConfigDatabase2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigDatabase2 overwrites any union data inside the ArchesConfig_Database as the provided ArchesConfigDatabase2
func (t *ArchesConfig_Database) FromArchesConfigDatabase2(v ArchesConfigDatabase2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigDatabase2 performs a merge with any union data inside the ArchesConfig_Database, using the provided ArchesConfigDatabase2
func (t *ArchesConfig_Database) MergeArchesConfigDatabase2(v ArchesConfigDatabase2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArchesConfig_Database) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ArchesConfig_Database) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsArchesConfigIngress0 returns the union data inside the ArchesConfig_Ingress as a ArchesConfigIngress0
func (t ArchesConfig_Ingress) AsArchesConfigIngress0() (ArchesConfigIngress0, error) {
	var body ArchesConfigIngress0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigIngress0 overwrites any union data inside the ArchesConfig_Ingress as the provided ArchesConfigIngress0
func (t *ArchesConfig_Ingress) FromArchesConfigIngress0(v ArchesConfigIngress0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigIngress0 performs a merge with any union data inside the ArchesConfig_Ingress, using the provided ArchesConfigIngress0
func (t *ArchesConfig_Ingress) MergeArchesConfigIngress0(v ArchesConfigIngress0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchesConfigIngress1 returns the union data inside the ArchesConfig_Ingress as a ArchesConfigIngress1
func (t ArchesConfig_Ingress) AsArchesConfigIngress1() (ArchesConfigIngress1, error) {
	var body ArchesConfigIngress1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigIngress1 overwrites any union data inside the ArchesConfig_Ingress as the provided ArchesConfigIngress1
func (t *ArchesConfig_Ingress) FromArchesConfigIngress1(v ArchesConfigIngress1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigIngress1 performs a merge with any union data inside the ArchesConfig_Ingress, using the provided ArchesConfigIngress1
func (t *ArchesConfig_Ingress) MergeArchesConfigIngress1(v ArchesConfigIngress1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchesConfigIngress2 returns the union data inside the ArchesConfig_Ingress as a ArchesConfigIngress2
func (t ArchesConfig_Ingress) AsArchesConfigIngress2() (ArchesConfigIngress2, error) {
	var body ArchesConfigIngress2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigIngress2 overwrites any union data inside the ArchesConfig_Ingress as the provided ArchesConfigIngress2
func (t *ArchesConfig_Ingress) FromArchesConfigIngress2(v ArchesConfigIngress2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigIngress2 performs a merge with any union data inside the ArchesConfig_Ingress, using the provided ArchesConfigIngress2
func (t *ArchesConfig_Ingress) MergeArchesConfigIngress2(v ArchesConfigIngress2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArchesConfig_Ingress) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ArchesConfig_Ingress) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsArchesConfigIntelligenceLlm0 returns the union data inside the ArchesConfig_Intelligence_Llm as a ArchesConfigIntelligenceLlm0
func (t ArchesConfig_Intelligence_Llm) AsArchesConfigIntelligenceLlm0() (ArchesConfigIntelligenceLlm0, error) {
	var body ArchesConfigIntelligenceLlm0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigIntelligenceLlm0 overwrites any union data inside the ArchesConfig_Intelligence_Llm as the provided ArchesConfigIntelligenceLlm0
func (t *ArchesConfig_Intelligence_Llm) FromArchesConfigIntelligenceLlm0(v ArchesConfigIntelligenceLlm0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigIntelligenceLlm0 performs a merge with any union data inside the ArchesConfig_Intelligence_Llm, using the provided ArchesConfigIntelligenceLlm0
func (t *ArchesConfig_Intelligence_Llm) MergeArchesConfigIntelligenceLlm0(v ArchesConfigIntelligenceLlm0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchesConfigIntelligenceLlm1 returns the union data inside the ArchesConfig_Intelligence_Llm as a ArchesConfigIntelligenceLlm1
func (t ArchesConfig_Intelligence_Llm) AsArchesConfigIntelligenceLlm1() (ArchesConfigIntelligenceLlm1, error) {
	var body ArchesConfigIntelligenceLlm1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigIntelligenceLlm1 overwrites any union data inside the ArchesConfig_Intelligence_Llm as the provided ArchesConfigIntelligenceLlm1
func (t *ArchesConfig_Intelligence_Llm) FromArchesConfigIntelligenceLlm1(v ArchesConfigIntelligenceLlm1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigIntelligenceLlm1 performs a merge with any union data inside the ArchesConfig_Intelligence_Llm, using the provided ArchesConfigIntelligenceLlm1
func (t *ArchesConfig_Intelligence_Llm) MergeArchesConfigIntelligenceLlm1(v ArchesConfigIntelligenceLlm1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArchesConfig_Intelligence_Llm) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ArchesConfig_Intelligence_Llm) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsArchesConfigIntelligenceRunpod0 returns the union data inside the ArchesConfig_Intelligence_Runpod as a ArchesConfigIntelligenceRunpod0
func (t ArchesConfig_Intelligence_Runpod) AsArchesConfigIntelligenceRunpod0() (ArchesConfigIntelligenceRunpod0, error) {
	var body ArchesConfigIntelligenceRunpod0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigIntelligenceRunpod0 overwrites any union data inside the ArchesConfig_Intelligence_Runpod as the provided ArchesConfigIntelligenceRunpod0
func (t *ArchesConfig_Intelligence_Runpod) FromArchesConfigIntelligenceRunpod0(v ArchesConfigIntelligenceRunpod0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigIntelligenceRunpod0 performs a merge with any union data inside the ArchesConfig_Intelligence_Runpod, using the provided ArchesConfigIntelligenceRunpod0
func (t *ArchesConfig_Intelligence_Runpod) MergeArchesConfigIntelligenceRunpod0(v ArchesConfigIntelligenceRunpod0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchesConfigIntelligenceRunpod1 returns the union data inside the ArchesConfig_Intelligence_Runpod as a ArchesConfigIntelligenceRunpod1
func (t ArchesConfig_Intelligence_Runpod) AsArchesConfigIntelligenceRunpod1() (ArchesConfigIntelligenceRunpod1, error) {
	var body ArchesConfigIntelligenceRunpod1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigIntelligenceRunpod1 overwrites any union data inside the ArchesConfig_Intelligence_Runpod as the provided ArchesConfigIntelligenceRunpod1
func (t *ArchesConfig_Intelligence_Runpod) FromArchesConfigIntelligenceRunpod1(v ArchesConfigIntelligenceRunpod1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigIntelligenceRunpod1 performs a merge with any union data inside the ArchesConfig_Intelligence_Runpod, using the provided ArchesConfigIntelligenceRunpod1
func (t *ArchesConfig_Intelligence_Runpod) MergeArchesConfigIntelligenceRunpod1(v ArchesConfigIntelligenceRunpod1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArchesConfig_Intelligence_Runpod) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ArchesConfig_Intelligence_Runpod) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsArchesConfigIntelligenceScraper0 returns the union data inside the ArchesConfig_Intelligence_Scraper as a ArchesConfigIntelligenceScraper0
func (t ArchesConfig_Intelligence_Scraper) AsArchesConfigIntelligenceScraper0() (ArchesConfigIntelligenceScraper0, error) {
	var body ArchesConfigIntelligenceScraper0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigIntelligenceScraper0 overwrites any union data inside the ArchesConfig_Intelligence_Scraper as the provided ArchesConfigIntelligenceScraper0
func (t *ArchesConfig_Intelligence_Scraper) FromArchesConfigIntelligenceScraper0(v ArchesConfigIntelligenceScraper0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigIntelligenceScraper0 performs a merge with any union data inside the ArchesConfig_Intelligence_Scraper, using the provided ArchesConfigIntelligenceScraper0
func (t *ArchesConfig_Intelligence_Scraper) MergeArchesConfigIntelligenceScraper0(v ArchesConfigIntelligenceScraper0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchesConfigIntelligenceScraper1 returns the union data inside the ArchesConfig_Intelligence_Scraper as a ArchesConfigIntelligenceScraper1
func (t ArchesConfig_Intelligence_Scraper) AsArchesConfigIntelligenceScraper1() (ArchesConfigIntelligenceScraper1, error) {
	var body ArchesConfigIntelligenceScraper1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigIntelligenceScraper1 overwrites any union data inside the ArchesConfig_Intelligence_Scraper as the provided ArchesConfigIntelligenceScraper1
func (t *ArchesConfig_Intelligence_Scraper) FromArchesConfigIntelligenceScraper1(v ArchesConfigIntelligenceScraper1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigIntelligenceScraper1 performs a merge with any union data inside the ArchesConfig_Intelligence_Scraper, using the provided ArchesConfigIntelligenceScraper1
func (t *ArchesConfig_Intelligence_Scraper) MergeArchesConfigIntelligenceScraper1(v ArchesConfigIntelligenceScraper1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchesConfigIntelligenceScraper2 returns the union data inside the ArchesConfig_Intelligence_Scraper as a ArchesConfigIntelligenceScraper2
func (t ArchesConfig_Intelligence_Scraper) AsArchesConfigIntelligenceScraper2() (ArchesConfigIntelligenceScraper2, error) {
	var body ArchesConfigIntelligenceScraper2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigIntelligenceScraper2 overwrites any union data inside the ArchesConfig_Intelligence_Scraper as the provided ArchesConfigIntelligenceScraper2
func (t *ArchesConfig_Intelligence_Scraper) FromArchesConfigIntelligenceScraper2(v ArchesConfigIntelligenceScraper2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigIntelligenceScraper2 performs a merge with any union data inside the ArchesConfig_Intelligence_Scraper, using the provided ArchesConfigIntelligenceScraper2
func (t *ArchesConfig_Intelligence_Scraper) MergeArchesConfigIntelligenceScraper2(v ArchesConfigIntelligenceScraper2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArchesConfig_Intelligence_Scraper) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ArchesConfig_Intelligence_Scraper) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsArchesConfigIntelligenceSpeech0 returns the union data inside the ArchesConfig_Intelligence_Speech as a ArchesConfigIntelligenceSpeech0
func (t ArchesConfig_Intelligence_Speech) AsArchesConfigIntelligenceSpeech0() (ArchesConfigIntelligenceSpeech0, error) {
	var body ArchesConfigIntelligenceSpeech0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigIntelligenceSpeech0 overwrites any union data inside the ArchesConfig_Intelligence_Speech as the provided ArchesConfigIntelligenceSpeech0
func (t *ArchesConfig_Intelligence_Speech) FromArchesConfigIntelligenceSpeech0(v ArchesConfigIntelligenceSpeech0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigIntelligenceSpeech0 performs a merge with any union data inside the ArchesConfig_Intelligence_Speech, using the provided ArchesConfigIntelligenceSpeech0
func (t *ArchesConfig_Intelligence_Speech) MergeArchesConfigIntelligenceSpeech0(v ArchesConfigIntelligenceSpeech0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchesConfigIntelligenceSpeech1 returns the union data inside the ArchesConfig_Intelligence_Speech as a ArchesConfigIntelligenceSpeech1
func (t ArchesConfig_Intelligence_Speech) AsArchesConfigIntelligenceSpeech1() (ArchesConfigIntelligenceSpeech1, error) {
	var body ArchesConfigIntelligenceSpeech1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigIntelligenceSpeech1 overwrites any union data inside the ArchesConfig_Intelligence_Speech as the provided ArchesConfigIntelligenceSpeech1
func (t *ArchesConfig_Intelligence_Speech) FromArchesConfigIntelligenceSpeech1(v ArchesConfigIntelligenceSpeech1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigIntelligenceSpeech1 performs a merge with any union data inside the ArchesConfig_Intelligence_Speech, using the provided ArchesConfigIntelligenceSpeech1
func (t *ArchesConfig_Intelligence_Speech) MergeArchesConfigIntelligenceSpeech1(v ArchesConfigIntelligenceSpeech1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArchesConfig_Intelligence_Speech) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ArchesConfig_Intelligence_Speech) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsArchesConfigIntelligenceUnstructured0 returns the union data inside the ArchesConfig_Intelligence_Unstructured as a ArchesConfigIntelligenceUnstructured0
func (t ArchesConfig_Intelligence_Unstructured) AsArchesConfigIntelligenceUnstructured0() (ArchesConfigIntelligenceUnstructured0, error) {
	var body ArchesConfigIntelligenceUnstructured0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigIntelligenceUnstructured0 overwrites any union data inside the ArchesConfig_Intelligence_Unstructured as the provided ArchesConfigIntelligenceUnstructured0
func (t *ArchesConfig_Intelligence_Unstructured) FromArchesConfigIntelligenceUnstructured0(v ArchesConfigIntelligenceUnstructured0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigIntelligenceUnstructured0 performs a merge with any union data inside the ArchesConfig_Intelligence_Unstructured, using the provided ArchesConfigIntelligenceUnstructured0
func (t *ArchesConfig_Intelligence_Unstructured) MergeArchesConfigIntelligenceUnstructured0(v ArchesConfigIntelligenceUnstructured0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchesConfigIntelligenceUnstructured1 returns the union data inside the ArchesConfig_Intelligence_Unstructured as a ArchesConfigIntelligenceUnstructured1
func (t ArchesConfig_Intelligence_Unstructured) AsArchesConfigIntelligenceUnstructured1() (ArchesConfigIntelligenceUnstructured1, error) {
	var body ArchesConfigIntelligenceUnstructured1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigIntelligenceUnstructured1 overwrites any union data inside the ArchesConfig_Intelligence_Unstructured as the provided ArchesConfigIntelligenceUnstructured1
func (t *ArchesConfig_Intelligence_Unstructured) FromArchesConfigIntelligenceUnstructured1(v ArchesConfigIntelligenceUnstructured1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigIntelligenceUnstructured1 performs a merge with any union data inside the ArchesConfig_Intelligence_Unstructured, using the provided ArchesConfigIntelligenceUnstructured1
func (t *ArchesConfig_Intelligence_Unstructured) MergeArchesConfigIntelligenceUnstructured1(v ArchesConfigIntelligenceUnstructured1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchesConfigIntelligenceUnstructured2 returns the union data inside the ArchesConfig_Intelligence_Unstructured as a ArchesConfigIntelligenceUnstructured2
func (t ArchesConfig_Intelligence_Unstructured) AsArchesConfigIntelligenceUnstructured2() (ArchesConfigIntelligenceUnstructured2, error) {
	var body ArchesConfigIntelligenceUnstructured2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigIntelligenceUnstructured2 overwrites any union data inside the ArchesConfig_Intelligence_Unstructured as the provided ArchesConfigIntelligenceUnstructured2
func (t *ArchesConfig_Intelligence_Unstructured) FromArchesConfigIntelligenceUnstructured2(v ArchesConfigIntelligenceUnstructured2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigIntelligenceUnstructured2 performs a merge with any union data inside the ArchesConfig_Intelligence_Unstructured, using the provided ArchesConfigIntelligenceUnstructured2
func (t *ArchesConfig_Intelligence_Unstructured) MergeArchesConfigIntelligenceUnstructured2(v ArchesConfigIntelligenceUnstructured2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArchesConfig_Intelligence_Unstructured) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ArchesConfig_Intelligence_Unstructured) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsArchesConfigMonitoringGrafana0 returns the union data inside the ArchesConfig_Monitoring_Grafana as a ArchesConfigMonitoringGrafana0
func (t ArchesConfig_Monitoring_Grafana) AsArchesConfigMonitoringGrafana0() (ArchesConfigMonitoringGrafana0, error) {
	var body ArchesConfigMonitoringGrafana0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigMonitoringGrafana0 overwrites any union data inside the ArchesConfig_Monitoring_Grafana as the provided ArchesConfigMonitoringGrafana0
func (t *ArchesConfig_Monitoring_Grafana) FromArchesConfigMonitoringGrafana0(v ArchesConfigMonitoringGrafana0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigMonitoringGrafana0 performs a merge with any union data inside the ArchesConfig_Monitoring_Grafana, using the provided ArchesConfigMonitoringGrafana0
func (t *ArchesConfig_Monitoring_Grafana) MergeArchesConfigMonitoringGrafana0(v ArchesConfigMonitoringGrafana0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchesConfigMonitoringGrafana1 returns the union data inside the ArchesConfig_Monitoring_Grafana as a ArchesConfigMonitoringGrafana1
func (t ArchesConfig_Monitoring_Grafana) AsArchesConfigMonitoringGrafana1() (ArchesConfigMonitoringGrafana1, error) {
	var body ArchesConfigMonitoringGrafana1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigMonitoringGrafana1 overwrites any union data inside the ArchesConfig_Monitoring_Grafana as the provided ArchesConfigMonitoringGrafana1
func (t *ArchesConfig_Monitoring_Grafana) FromArchesConfigMonitoringGrafana1(v ArchesConfigMonitoringGrafana1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigMonitoringGrafana1 performs a merge with any union data inside the ArchesConfig_Monitoring_Grafana, using the provided ArchesConfigMonitoringGrafana1
func (t *ArchesConfig_Monitoring_Grafana) MergeArchesConfigMonitoringGrafana1(v ArchesConfigMonitoringGrafana1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchesConfigMonitoringGrafana2 returns the union data inside the ArchesConfig_Monitoring_Grafana as a ArchesConfigMonitoringGrafana2
func (t ArchesConfig_Monitoring_Grafana) AsArchesConfigMonitoringGrafana2() (ArchesConfigMonitoringGrafana2, error) {
	var body ArchesConfigMonitoringGrafana2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigMonitoringGrafana2 overwrites any union data inside the ArchesConfig_Monitoring_Grafana as the provided ArchesConfigMonitoringGrafana2
func (t *ArchesConfig_Monitoring_Grafana) FromArchesConfigMonitoringGrafana2(v ArchesConfigMonitoringGrafana2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigMonitoringGrafana2 performs a merge with any union data inside the ArchesConfig_Monitoring_Grafana, using the provided ArchesConfigMonitoringGrafana2
func (t *ArchesConfig_Monitoring_Grafana) MergeArchesConfigMonitoringGrafana2(v ArchesConfigMonitoringGrafana2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArchesConfig_Monitoring_Grafana) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ArchesConfig_Monitoring_Grafana) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsArchesConfigMonitoringLoki0 returns the union data inside the ArchesConfig_Monitoring_Loki as a ArchesConfigMonitoringLoki0
func (t ArchesConfig_Monitoring_Loki) AsArchesConfigMonitoringLoki0() (ArchesConfigMonitoringLoki0, error) {
	var body ArchesConfigMonitoringLoki0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigMonitoringLoki0 overwrites any union data inside the ArchesConfig_Monitoring_Loki as the provided ArchesConfigMonitoringLoki0
func (t *ArchesConfig_Monitoring_Loki) FromArchesConfigMonitoringLoki0(v ArchesConfigMonitoringLoki0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigMonitoringLoki0 performs a merge with any union data inside the ArchesConfig_Monitoring_Loki, using the provided ArchesConfigMonitoringLoki0
func (t *ArchesConfig_Monitoring_Loki) MergeArchesConfigMonitoringLoki0(v ArchesConfigMonitoringLoki0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchesConfigMonitoringLoki1 returns the union data inside the ArchesConfig_Monitoring_Loki as a ArchesConfigMonitoringLoki1
func (t ArchesConfig_Monitoring_Loki) AsArchesConfigMonitoringLoki1() (ArchesConfigMonitoringLoki1, error) {
	var body ArchesConfigMonitoringLoki1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigMonitoringLoki1 overwrites any union data inside the ArchesConfig_Monitoring_Loki as the provided ArchesConfigMonitoringLoki1
func (t *ArchesConfig_Monitoring_Loki) FromArchesConfigMonitoringLoki1(v ArchesConfigMonitoringLoki1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigMonitoringLoki1 performs a merge with any union data inside the ArchesConfig_Monitoring_Loki, using the provided ArchesConfigMonitoringLoki1
func (t *ArchesConfig_Monitoring_Loki) MergeArchesConfigMonitoringLoki1(v ArchesConfigMonitoringLoki1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchesConfigMonitoringLoki2 returns the union data inside the ArchesConfig_Monitoring_Loki as a ArchesConfigMonitoringLoki2
func (t ArchesConfig_Monitoring_Loki) AsArchesConfigMonitoringLoki2() (ArchesConfigMonitoringLoki2, error) {
	var body ArchesConfigMonitoringLoki2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigMonitoringLoki2 overwrites any union data inside the ArchesConfig_Monitoring_Loki as the provided ArchesConfigMonitoringLoki2
func (t *ArchesConfig_Monitoring_Loki) FromArchesConfigMonitoringLoki2(v ArchesConfigMonitoringLoki2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigMonitoringLoki2 performs a merge with any union data inside the ArchesConfig_Monitoring_Loki, using the provided ArchesConfigMonitoringLoki2
func (t *ArchesConfig_Monitoring_Loki) MergeArchesConfigMonitoringLoki2(v ArchesConfigMonitoringLoki2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArchesConfig_Monitoring_Loki) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ArchesConfig_Monitoring_Loki) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsArchesConfigPlatform0 returns the union data inside the ArchesConfig_Platform as a ArchesConfigPlatform0
func (t ArchesConfig_Platform) AsArchesConfigPlatform0() (ArchesConfigPlatform0, error) {
	var body ArchesConfigPlatform0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigPlatform0 overwrites any union data inside the ArchesConfig_Platform as the provided ArchesConfigPlatform0
func (t *ArchesConfig_Platform) FromArchesConfigPlatform0(v ArchesConfigPlatform0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigPlatform0 performs a merge with any union data inside the ArchesConfig_Platform, using the provided ArchesConfigPlatform0
func (t *ArchesConfig_Platform) MergeArchesConfigPlatform0(v ArchesConfigPlatform0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchesConfigPlatform1 returns the union data inside the ArchesConfig_Platform as a ArchesConfigPlatform1
func (t ArchesConfig_Platform) AsArchesConfigPlatform1() (ArchesConfigPlatform1, error) {
	var body ArchesConfigPlatform1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigPlatform1 overwrites any union data inside the ArchesConfig_Platform as the provided ArchesConfigPlatform1
func (t *ArchesConfig_Platform) FromArchesConfigPlatform1(v ArchesConfigPlatform1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigPlatform1 performs a merge with any union data inside the ArchesConfig_Platform, using the provided ArchesConfigPlatform1
func (t *ArchesConfig_Platform) MergeArchesConfigPlatform1(v ArchesConfigPlatform1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchesConfigPlatform2 returns the union data inside the ArchesConfig_Platform as a ArchesConfigPlatform2
func (t ArchesConfig_Platform) AsArchesConfigPlatform2() (ArchesConfigPlatform2, error) {
	var body ArchesConfigPlatform2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigPlatform2 overwrites any union data inside the ArchesConfig_Platform as the provided ArchesConfigPlatform2
func (t *ArchesConfig_Platform) FromArchesConfigPlatform2(v ArchesConfigPlatform2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigPlatform2 performs a merge with any union data inside the ArchesConfig_Platform, using the provided ArchesConfigPlatform2
func (t *ArchesConfig_Platform) MergeArchesConfigPlatform2(v ArchesConfigPlatform2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArchesConfig_Platform) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ArchesConfig_Platform) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsArchesConfigRedis0 returns the union data inside the ArchesConfig_Redis as a ArchesConfigRedis0
func (t ArchesConfig_Redis) AsArchesConfigRedis0() (ArchesConfigRedis0, error) {
	var body ArchesConfigRedis0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigRedis0 overwrites any union data inside the ArchesConfig_Redis as the provided ArchesConfigRedis0
func (t *ArchesConfig_Redis) FromArchesConfigRedis0(v ArchesConfigRedis0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigRedis0 performs a merge with any union data inside the ArchesConfig_Redis, using the provided ArchesConfigRedis0
func (t *ArchesConfig_Redis) MergeArchesConfigRedis0(v ArchesConfigRedis0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchesConfigRedis1 returns the union data inside the ArchesConfig_Redis as a ArchesConfigRedis1
func (t ArchesConfig_Redis) AsArchesConfigRedis1() (ArchesConfigRedis1, error) {
	var body ArchesConfigRedis1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigRedis1 overwrites any union data inside the ArchesConfig_Redis as the provided ArchesConfigRedis1
func (t *ArchesConfig_Redis) FromArchesConfigRedis1(v ArchesConfigRedis1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigRedis1 performs a merge with any union data inside the ArchesConfig_Redis, using the provided ArchesConfigRedis1
func (t *ArchesConfig_Redis) MergeArchesConfigRedis1(v ArchesConfigRedis1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchesConfigRedis2 returns the union data inside the ArchesConfig_Redis as a ArchesConfigRedis2
func (t ArchesConfig_Redis) AsArchesConfigRedis2() (ArchesConfigRedis2, error) {
	var body ArchesConfigRedis2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigRedis2 overwrites any union data inside the ArchesConfig_Redis as the provided ArchesConfigRedis2
func (t *ArchesConfig_Redis) FromArchesConfigRedis2(v ArchesConfigRedis2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigRedis2 performs a merge with any union data inside the ArchesConfig_Redis, using the provided ArchesConfigRedis2
func (t *ArchesConfig_Redis) MergeArchesConfigRedis2(v ArchesConfigRedis2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArchesConfig_Redis) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ArchesConfig_Redis) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsArchesConfigStorage0 returns the union data inside the ArchesConfig_Storage as a ArchesConfigStorage0
func (t ArchesConfig_Storage) AsArchesConfigStorage0() (ArchesConfigStorage0, error) {
	var body ArchesConfigStorage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigStorage0 overwrites any union data inside the ArchesConfig_Storage as the provided ArchesConfigStorage0
func (t *ArchesConfig_Storage) FromArchesConfigStorage0(v ArchesConfigStorage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigStorage0 performs a merge with any union data inside the ArchesConfig_Storage, using the provided ArchesConfigStorage0
func (t *ArchesConfig_Storage) MergeArchesConfigStorage0(v ArchesConfigStorage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchesConfigStorage1 returns the union data inside the ArchesConfig_Storage as a ArchesConfigStorage1
func (t ArchesConfig_Storage) AsArchesConfigStorage1() (ArchesConfigStorage1, error) {
	var body ArchesConfigStorage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigStorage1 overwrites any union data inside the ArchesConfig_Storage as the provided ArchesConfigStorage1
func (t *ArchesConfig_Storage) FromArchesConfigStorage1(v ArchesConfigStorage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigStorage1 performs a merge with any union data inside the ArchesConfig_Storage, using the provided ArchesConfigStorage1
func (t *ArchesConfig_Storage) MergeArchesConfigStorage1(v ArchesConfigStorage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArchesConfigStorage2 returns the union data inside the ArchesConfig_Storage as a ArchesConfigStorage2
func (t ArchesConfig_Storage) AsArchesConfigStorage2() (ArchesConfigStorage2, error) {
	var body ArchesConfigStorage2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArchesConfigStorage2 overwrites any union data inside the ArchesConfig_Storage as the provided ArchesConfigStorage2
func (t *ArchesConfig_Storage) FromArchesConfigStorage2(v ArchesConfigStorage2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArchesConfigStorage2 performs a merge with any union data inside the ArchesConfig_Storage, using the provided ArchesConfigStorage2
func (t *ArchesConfig_Storage) MergeArchesConfigStorage2(v ArchesConfigStorage2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArchesConfig_Storage) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ArchesConfig_Storage) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
