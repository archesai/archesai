// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"cr1eesYBAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
