// Package organizations provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package organizations

import (
	"encoding/json"
	"time"

	externalRef0 "github.com/archesai/archesai/gen/api/common"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for OrganizationEntityPlan.
const (
	BASIC     OrganizationEntityPlan = "BASIC"
	FREE      OrganizationEntityPlan = "FREE"
	PREMIUM   OrganizationEntityPlan = "PREMIUM"
	STANDARD  OrganizationEntityPlan = "STANDARD"
	UNLIMITED OrganizationEntityPlan = "UNLIMITED"
)

// Defines values for OrganizationsFilterNode0Field.
const (
	OrganizationsFilterNode0FieldBillingEmail     OrganizationsFilterNode0Field = "billingEmail"
	OrganizationsFilterNode0FieldCreatedAt        OrganizationsFilterNode0Field = "createdAt"
	OrganizationsFilterNode0FieldCredits          OrganizationsFilterNode0Field = "credits"
	OrganizationsFilterNode0FieldId               OrganizationsFilterNode0Field = "id"
	OrganizationsFilterNode0FieldLogo             OrganizationsFilterNode0Field = "logo"
	OrganizationsFilterNode0FieldMetadata         OrganizationsFilterNode0Field = "metadata"
	OrganizationsFilterNode0FieldName             OrganizationsFilterNode0Field = "name"
	OrganizationsFilterNode0FieldPlan             OrganizationsFilterNode0Field = "plan"
	OrganizationsFilterNode0FieldSlug             OrganizationsFilterNode0Field = "slug"
	OrganizationsFilterNode0FieldStripeCustomerId OrganizationsFilterNode0Field = "stripeCustomerId"
	OrganizationsFilterNode0FieldUpdatedAt        OrganizationsFilterNode0Field = "updatedAt"
)

// Defines values for OrganizationsFilterNode1Operator.
const (
	And OrganizationsFilterNode1Operator = "and"
	Or  OrganizationsFilterNode1Operator = "or"
)

// Defines values for OrganizationsSortField.
const (
	OrganizationsSortFieldBillingEmail     OrganizationsSortField = "billingEmail"
	OrganizationsSortFieldCreatedAt        OrganizationsSortField = "createdAt"
	OrganizationsSortFieldCredits          OrganizationsSortField = "credits"
	OrganizationsSortFieldId               OrganizationsSortField = "id"
	OrganizationsSortFieldLogo             OrganizationsSortField = "logo"
	OrganizationsSortFieldMetadata         OrganizationsSortField = "metadata"
	OrganizationsSortFieldName             OrganizationsSortField = "name"
	OrganizationsSortFieldPlan             OrganizationsSortField = "plan"
	OrganizationsSortFieldSlug             OrganizationsSortField = "slug"
	OrganizationsSortFieldStripeCustomerId OrganizationsSortField = "stripeCustomerId"
	OrganizationsSortFieldUpdatedAt        OrganizationsSortField = "updatedAt"
)

// Defines values for OrganizationsSortOrder.
const (
	Asc  OrganizationsSortOrder = "asc"
	Desc OrganizationsSortOrder = "desc"
)

// OrganizationEntity Schema for Organization entity
type OrganizationEntity struct {
	// BillingEmail The billing email to use for the organization
	BillingEmail *string `json:"billingEmail"`

	// CreatedAt The date this item was created
	CreatedAt time.Time `json:"createdAt"`

	// Credits The number of credits you have remaining for this organization
	Credits float32 `json:"credits"`

	// Id The ID of the item
	Id openapi_types.UUID `json:"id"`

	// Logo The URL of the organization logo
	Logo *string `json:"logo"`

	// Metadata The metadata for the organization, used for custom data
	Metadata *string `json:"metadata"`

	// Name The name of the organization
	Name string `json:"name"`

	// Plan The plan that the organization is subscribed to
	Plan OrganizationEntityPlan `json:"plan"`

	// Slug The unique slug for the organization, used in URLs
	Slug string `json:"slug"`

	// StripeCustomerId The Stripe customer ID
	StripeCustomerId *string `json:"stripeCustomerId"`

	// UpdatedAt The date this item was last updated
	UpdatedAt time.Time `json:"updatedAt"`
}

// OrganizationEntityPlan The plan that the organization is subscribed to
type OrganizationEntityPlan string

// OrganizationsFilterNode A recursive filter node for organizations entity that can be a condition or group
type OrganizationsFilterNode struct {
	union json.RawMessage
}

// OrganizationsFilterNode0 defines model for .
type OrganizationsFilterNode0 struct {
	Field OrganizationsFilterNode0Field `json:"field"`

	// Operator Supported filter operations
	Operator externalRef0.Operator `json:"operator"`
	Type     string                `json:"type"`

	// Value Value for filter conditions (scalar | array | range | relative)
	Value externalRef0.FilterValue `json:"value"`
}

// OrganizationsFilterNode0Field defines model for OrganizationsFilterNode.0.Field.
type OrganizationsFilterNode0Field string

// OrganizationsFilterNode1 defines model for .
type OrganizationsFilterNode1 struct {
	Children []OrganizationsFilterNode        `json:"children"`
	Operator OrganizationsFilterNode1Operator `json:"operator"`
	Type     string                           `json:"type"`
}

// OrganizationsFilterNode1Operator defines model for OrganizationsFilterNode.1.Operator.
type OrganizationsFilterNode1Operator string

// OrganizationsSort Sorting configuration for organizations entity with field and order
type OrganizationsSort struct {
	Field OrganizationsSortField `json:"field"`
	Order OrganizationsSortOrder `json:"order"`
}

// OrganizationsSortField defines model for OrganizationsSort.Field.
type OrganizationsSortField string

// OrganizationsSortOrder defines model for OrganizationsSort.Order.
type OrganizationsSortOrder string

// AsOrganizationsFilterNode0 returns the union data inside the OrganizationsFilterNode as a OrganizationsFilterNode0
func (t OrganizationsFilterNode) AsOrganizationsFilterNode0() (OrganizationsFilterNode0, error) {
	var body OrganizationsFilterNode0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOrganizationsFilterNode0 overwrites any union data inside the OrganizationsFilterNode as the provided OrganizationsFilterNode0
func (t *OrganizationsFilterNode) FromOrganizationsFilterNode0(v OrganizationsFilterNode0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOrganizationsFilterNode0 performs a merge with any union data inside the OrganizationsFilterNode, using the provided OrganizationsFilterNode0
func (t *OrganizationsFilterNode) MergeOrganizationsFilterNode0(v OrganizationsFilterNode0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsOrganizationsFilterNode1 returns the union data inside the OrganizationsFilterNode as a OrganizationsFilterNode1
func (t OrganizationsFilterNode) AsOrganizationsFilterNode1() (OrganizationsFilterNode1, error) {
	var body OrganizationsFilterNode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOrganizationsFilterNode1 overwrites any union data inside the OrganizationsFilterNode as the provided OrganizationsFilterNode1
func (t *OrganizationsFilterNode) FromOrganizationsFilterNode1(v OrganizationsFilterNode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOrganizationsFilterNode1 performs a merge with any union data inside the OrganizationsFilterNode, using the provided OrganizationsFilterNode1
func (t *OrganizationsFilterNode) MergeOrganizationsFilterNode1(v OrganizationsFilterNode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t OrganizationsFilterNode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OrganizationsFilterNode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
