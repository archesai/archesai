// Package users provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package users

import (
	"encoding/json"
	"time"

	externalRef0 "github.com/archesai/archesai/gen/api/common"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for UsersFilterNode0Field.
const (
	UsersFilterNode0FieldCreatedAt     UsersFilterNode0Field = "createdAt"
	UsersFilterNode0FieldEmail         UsersFilterNode0Field = "email"
	UsersFilterNode0FieldEmailVerified UsersFilterNode0Field = "emailVerified"
	UsersFilterNode0FieldId            UsersFilterNode0Field = "id"
	UsersFilterNode0FieldImage         UsersFilterNode0Field = "image"
	UsersFilterNode0FieldName          UsersFilterNode0Field = "name"
	UsersFilterNode0FieldUpdatedAt     UsersFilterNode0Field = "updatedAt"
)

// Defines values for UsersFilterNode1Operator.
const (
	And UsersFilterNode1Operator = "and"
	Or  UsersFilterNode1Operator = "or"
)

// Defines values for UsersSortField.
const (
	UsersSortFieldCreatedAt     UsersSortField = "createdAt"
	UsersSortFieldEmail         UsersSortField = "email"
	UsersSortFieldEmailVerified UsersSortField = "emailVerified"
	UsersSortFieldId            UsersSortField = "id"
	UsersSortFieldImage         UsersSortField = "image"
	UsersSortFieldName          UsersSortField = "name"
	UsersSortFieldUpdatedAt     UsersSortField = "updatedAt"
)

// Defines values for UsersSortOrder.
const (
	Asc  UsersSortOrder = "asc"
	Desc UsersSortOrder = "desc"
)

// UserEntity Schema for User entity
type UserEntity struct {
	// CreatedAt The date this item was created
	CreatedAt time.Time `json:"createdAt"`

	// Email The user's e-mail
	Email string `json:"email"`

	// EmailVerified Whether or not the user's e-mail has been verified
	EmailVerified bool `json:"emailVerified"`

	// Id The ID of the item
	Id openapi_types.UUID `json:"id"`

	// Image The user's avatar image URL
	Image *string `json:"image"`

	// Name The user's name
	Name string `json:"name"`

	// UpdatedAt The date this item was last updated
	UpdatedAt time.Time `json:"updatedAt"`
}

// UsersFilterNode A recursive filter node for users entity that can be a condition or group
type UsersFilterNode struct {
	union json.RawMessage
}

// UsersFilterNode0 defines model for .
type UsersFilterNode0 struct {
	Field UsersFilterNode0Field `json:"field"`

	// Operator Supported filter operations
	Operator externalRef0.Operator `json:"operator"`
	Type     string                `json:"type"`

	// Value Value for filter conditions (scalar | array | range | relative)
	Value externalRef0.FilterValue `json:"value"`
}

// UsersFilterNode0Field defines model for UsersFilterNode.0.Field.
type UsersFilterNode0Field string

// UsersFilterNode1 defines model for .
type UsersFilterNode1 struct {
	Children []UsersFilterNode        `json:"children"`
	Operator UsersFilterNode1Operator `json:"operator"`
	Type     string                   `json:"type"`
}

// UsersFilterNode1Operator defines model for UsersFilterNode.1.Operator.
type UsersFilterNode1Operator string

// UsersSort Sorting configuration for users entity with field and order
type UsersSort struct {
	Field UsersSortField `json:"field"`
	Order UsersSortOrder `json:"order"`
}

// UsersSortField defines model for UsersSort.Field.
type UsersSortField string

// UsersSortOrder defines model for UsersSort.Order.
type UsersSortOrder string

// AsUsersFilterNode0 returns the union data inside the UsersFilterNode as a UsersFilterNode0
func (t UsersFilterNode) AsUsersFilterNode0() (UsersFilterNode0, error) {
	var body UsersFilterNode0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUsersFilterNode0 overwrites any union data inside the UsersFilterNode as the provided UsersFilterNode0
func (t *UsersFilterNode) FromUsersFilterNode0(v UsersFilterNode0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUsersFilterNode0 performs a merge with any union data inside the UsersFilterNode, using the provided UsersFilterNode0
func (t *UsersFilterNode) MergeUsersFilterNode0(v UsersFilterNode0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsUsersFilterNode1 returns the union data inside the UsersFilterNode as a UsersFilterNode1
func (t UsersFilterNode) AsUsersFilterNode1() (UsersFilterNode1, error) {
	var body UsersFilterNode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUsersFilterNode1 overwrites any union data inside the UsersFilterNode as the provided UsersFilterNode1
func (t *UsersFilterNode) FromUsersFilterNode1(v UsersFilterNode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUsersFilterNode1 performs a merge with any union data inside the UsersFilterNode, using the provided UsersFilterNode1
func (t *UsersFilterNode) MergeUsersFilterNode1(v UsersFilterNode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t UsersFilterNode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *UsersFilterNode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
