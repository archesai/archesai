// Package invitations provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package invitations

import (
	"encoding/json"
	"time"

	externalRef0 "github.com/archesai/archesai/gen/api/common"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for InvitationEntityRole.
const (
	Admin  InvitationEntityRole = "admin"
	Member InvitationEntityRole = "member"
	Owner  InvitationEntityRole = "owner"
)

// Defines values for InvitationsFilterNode0Field.
const (
	InvitationsFilterNode0FieldCreatedAt      InvitationsFilterNode0Field = "createdAt"
	InvitationsFilterNode0FieldEmail          InvitationsFilterNode0Field = "email"
	InvitationsFilterNode0FieldExpiresAt      InvitationsFilterNode0Field = "expiresAt"
	InvitationsFilterNode0FieldId             InvitationsFilterNode0Field = "id"
	InvitationsFilterNode0FieldInviterId      InvitationsFilterNode0Field = "inviterId"
	InvitationsFilterNode0FieldOrganizationId InvitationsFilterNode0Field = "organizationId"
	InvitationsFilterNode0FieldRole           InvitationsFilterNode0Field = "role"
	InvitationsFilterNode0FieldStatus         InvitationsFilterNode0Field = "status"
	InvitationsFilterNode0FieldUpdatedAt      InvitationsFilterNode0Field = "updatedAt"
)

// Defines values for InvitationsFilterNode1Operator.
const (
	And InvitationsFilterNode1Operator = "and"
	Or  InvitationsFilterNode1Operator = "or"
)

// Defines values for InvitationsSortField.
const (
	InvitationsSortFieldCreatedAt      InvitationsSortField = "createdAt"
	InvitationsSortFieldEmail          InvitationsSortField = "email"
	InvitationsSortFieldExpiresAt      InvitationsSortField = "expiresAt"
	InvitationsSortFieldId             InvitationsSortField = "id"
	InvitationsSortFieldInviterId      InvitationsSortField = "inviterId"
	InvitationsSortFieldOrganizationId InvitationsSortField = "organizationId"
	InvitationsSortFieldRole           InvitationsSortField = "role"
	InvitationsSortFieldStatus         InvitationsSortField = "status"
	InvitationsSortFieldUpdatedAt      InvitationsSortField = "updatedAt"
)

// Defines values for InvitationsSortOrder.
const (
	Asc  InvitationsSortOrder = "asc"
	Desc InvitationsSortOrder = "desc"
)

// InvitationEntity Schema for Invitation entity
type InvitationEntity struct {
	// CreatedAt The date this item was created
	CreatedAt time.Time `json:"createdAt"`

	// Email The email of the invitated user
	Email string `json:"email"`

	// ExpiresAt The date and time when the invitation expires
	ExpiresAt string `json:"expiresAt"`

	// Id The ID of the item
	Id openapi_types.UUID `json:"id"`

	// InviterId The user id of the inviter
	InviterId string `json:"inviterId"`

	// OrganizationId The name of the organization the token belongs to
	OrganizationId string `json:"organizationId"`

	// Role The role of the invitation
	Role InvitationEntityRole `json:"role"`

	// Status The status of the invitation, e.g., pending, accepted, declined
	Status string `json:"status"`

	// UpdatedAt The date this item was last updated
	UpdatedAt time.Time `json:"updatedAt"`
}

// InvitationEntityRole The role of the invitation
type InvitationEntityRole string

// InvitationsFilterNode A recursive filter node for invitations entity that can be a condition or group
type InvitationsFilterNode struct {
	union json.RawMessage
}

// InvitationsFilterNode0 defines model for .
type InvitationsFilterNode0 struct {
	Field InvitationsFilterNode0Field `json:"field"`

	// Operator Supported filter operations
	Operator externalRef0.Operator `json:"operator"`
	Type     string                `json:"type"`

	// Value Value for filter conditions (scalar | array | range | relative)
	Value externalRef0.FilterValue `json:"value"`
}

// InvitationsFilterNode0Field defines model for InvitationsFilterNode.0.Field.
type InvitationsFilterNode0Field string

// InvitationsFilterNode1 defines model for .
type InvitationsFilterNode1 struct {
	Children []InvitationsFilterNode        `json:"children"`
	Operator InvitationsFilterNode1Operator `json:"operator"`
	Type     string                         `json:"type"`
}

// InvitationsFilterNode1Operator defines model for InvitationsFilterNode.1.Operator.
type InvitationsFilterNode1Operator string

// InvitationsSort Sorting configuration for invitations entity with field and order
type InvitationsSort struct {
	Field InvitationsSortField `json:"field"`
	Order InvitationsSortOrder `json:"order"`
}

// InvitationsSortField defines model for InvitationsSort.Field.
type InvitationsSortField string

// InvitationsSortOrder defines model for InvitationsSort.Order.
type InvitationsSortOrder string

// AsInvitationsFilterNode0 returns the union data inside the InvitationsFilterNode as a InvitationsFilterNode0
func (t InvitationsFilterNode) AsInvitationsFilterNode0() (InvitationsFilterNode0, error) {
	var body InvitationsFilterNode0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvitationsFilterNode0 overwrites any union data inside the InvitationsFilterNode as the provided InvitationsFilterNode0
func (t *InvitationsFilterNode) FromInvitationsFilterNode0(v InvitationsFilterNode0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvitationsFilterNode0 performs a merge with any union data inside the InvitationsFilterNode, using the provided InvitationsFilterNode0
func (t *InvitationsFilterNode) MergeInvitationsFilterNode0(v InvitationsFilterNode0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsInvitationsFilterNode1 returns the union data inside the InvitationsFilterNode as a InvitationsFilterNode1
func (t InvitationsFilterNode) AsInvitationsFilterNode1() (InvitationsFilterNode1, error) {
	var body InvitationsFilterNode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromInvitationsFilterNode1 overwrites any union data inside the InvitationsFilterNode as the provided InvitationsFilterNode1
func (t *InvitationsFilterNode) FromInvitationsFilterNode1(v InvitationsFilterNode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeInvitationsFilterNode1 performs a merge with any union data inside the InvitationsFilterNode, using the provided InvitationsFilterNode1
func (t *InvitationsFilterNode) MergeInvitationsFilterNode1(v InvitationsFilterNode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t InvitationsFilterNode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *InvitationsFilterNode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
