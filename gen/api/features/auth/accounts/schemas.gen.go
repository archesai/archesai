// Package accounts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package accounts

import (
	"encoding/json"
	"time"

	externalRef0 "github.com/archesai/archesai/gen/api/common"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AccountsFilterNode0Field.
const (
	AccountsFilterNode0FieldAccessToken           AccountsFilterNode0Field = "accessToken"
	AccountsFilterNode0FieldAccessTokenExpiresAt  AccountsFilterNode0Field = "accessTokenExpiresAt"
	AccountsFilterNode0FieldAccountId             AccountsFilterNode0Field = "accountId"
	AccountsFilterNode0FieldCreatedAt             AccountsFilterNode0Field = "createdAt"
	AccountsFilterNode0FieldId                    AccountsFilterNode0Field = "id"
	AccountsFilterNode0FieldIdToken               AccountsFilterNode0Field = "idToken"
	AccountsFilterNode0FieldPassword              AccountsFilterNode0Field = "password"
	AccountsFilterNode0FieldProviderId            AccountsFilterNode0Field = "providerId"
	AccountsFilterNode0FieldRefreshToken          AccountsFilterNode0Field = "refreshToken"
	AccountsFilterNode0FieldRefreshTokenExpiresAt AccountsFilterNode0Field = "refreshTokenExpiresAt"
	AccountsFilterNode0FieldScope                 AccountsFilterNode0Field = "scope"
	AccountsFilterNode0FieldUpdatedAt             AccountsFilterNode0Field = "updatedAt"
	AccountsFilterNode0FieldUserId                AccountsFilterNode0Field = "userId"
)

// Defines values for AccountsFilterNode1Operator.
const (
	And AccountsFilterNode1Operator = "and"
	Or  AccountsFilterNode1Operator = "or"
)

// Defines values for AccountsSortField.
const (
	AccountsSortFieldAccessToken           AccountsSortField = "accessToken"
	AccountsSortFieldAccessTokenExpiresAt  AccountsSortField = "accessTokenExpiresAt"
	AccountsSortFieldAccountId             AccountsSortField = "accountId"
	AccountsSortFieldCreatedAt             AccountsSortField = "createdAt"
	AccountsSortFieldId                    AccountsSortField = "id"
	AccountsSortFieldIdToken               AccountsSortField = "idToken"
	AccountsSortFieldPassword              AccountsSortField = "password"
	AccountsSortFieldProviderId            AccountsSortField = "providerId"
	AccountsSortFieldRefreshToken          AccountsSortField = "refreshToken"
	AccountsSortFieldRefreshTokenExpiresAt AccountsSortField = "refreshTokenExpiresAt"
	AccountsSortFieldScope                 AccountsSortField = "scope"
	AccountsSortFieldUpdatedAt             AccountsSortField = "updatedAt"
	AccountsSortFieldUserId                AccountsSortField = "userId"
)

// Defines values for AccountsSortOrder.
const (
	Asc  AccountsSortOrder = "asc"
	Desc AccountsSortOrder = "desc"
)

// AccountEntity Schema for Account entity
type AccountEntity struct {
	// AccessToken The access token
	AccessToken *string `json:"accessToken"`

	// AccessTokenExpiresAt The expiration date
	AccessTokenExpiresAt *string `json:"accessTokenExpiresAt"`

	// AccountId The unique identifier for the account
	AccountId string `json:"accountId"`

	// CreatedAt The date this item was created
	CreatedAt time.Time `json:"createdAt"`

	// Id The ID of the item
	Id openapi_types.UUID `json:"id"`

	// IdToken The ID token
	IdToken *string `json:"idToken"`

	// Password The hashed password for local authentication
	Password *string `json:"password"`

	// ProviderId The provider ID associated with the auth provider
	ProviderId string `json:"providerId"`

	// RefreshToken The refresh token
	RefreshToken *string `json:"refreshToken"`

	// RefreshTokenExpiresAt The refresh token expiration date
	RefreshTokenExpiresAt *string `json:"refreshTokenExpiresAt"`

	// Scope The scope of the access token
	Scope *string `json:"scope"`

	// UpdatedAt The date this item was last updated
	UpdatedAt time.Time `json:"updatedAt"`

	// UserId The user ID associated with the auth provider
	UserId string `json:"userId"`
}

// AccountsFilterNode A recursive filter node for accounts entity that can be a condition or group
type AccountsFilterNode struct {
	union json.RawMessage
}

// AccountsFilterNode0 defines model for .
type AccountsFilterNode0 struct {
	Field AccountsFilterNode0Field `json:"field"`

	// Operator Supported filter operations
	Operator externalRef0.Operator `json:"operator"`
	Type     string                `json:"type"`

	// Value Value for filter conditions (scalar | array | range | relative)
	Value externalRef0.FilterValue `json:"value"`
}

// AccountsFilterNode0Field defines model for AccountsFilterNode.0.Field.
type AccountsFilterNode0Field string

// AccountsFilterNode1 defines model for .
type AccountsFilterNode1 struct {
	Children []AccountsFilterNode        `json:"children"`
	Operator AccountsFilterNode1Operator `json:"operator"`
	Type     string                      `json:"type"`
}

// AccountsFilterNode1Operator defines model for AccountsFilterNode.1.Operator.
type AccountsFilterNode1Operator string

// AccountsSort Sorting configuration for accounts entity with field and order
type AccountsSort struct {
	Field AccountsSortField `json:"field"`
	Order AccountsSortOrder `json:"order"`
}

// AccountsSortField defines model for AccountsSort.Field.
type AccountsSortField string

// AccountsSortOrder defines model for AccountsSort.Order.
type AccountsSortOrder string

// AsAccountsFilterNode0 returns the union data inside the AccountsFilterNode as a AccountsFilterNode0
func (t AccountsFilterNode) AsAccountsFilterNode0() (AccountsFilterNode0, error) {
	var body AccountsFilterNode0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAccountsFilterNode0 overwrites any union data inside the AccountsFilterNode as the provided AccountsFilterNode0
func (t *AccountsFilterNode) FromAccountsFilterNode0(v AccountsFilterNode0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAccountsFilterNode0 performs a merge with any union data inside the AccountsFilterNode, using the provided AccountsFilterNode0
func (t *AccountsFilterNode) MergeAccountsFilterNode0(v AccountsFilterNode0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsAccountsFilterNode1 returns the union data inside the AccountsFilterNode as a AccountsFilterNode1
func (t AccountsFilterNode) AsAccountsFilterNode1() (AccountsFilterNode1, error) {
	var body AccountsFilterNode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAccountsFilterNode1 overwrites any union data inside the AccountsFilterNode as the provided AccountsFilterNode1
func (t *AccountsFilterNode) FromAccountsFilterNode1(v AccountsFilterNode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAccountsFilterNode1 performs a merge with any union data inside the AccountsFilterNode, using the provided AccountsFilterNode1
func (t *AccountsFilterNode) MergeAccountsFilterNode1(v AccountsFilterNode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t AccountsFilterNode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AccountsFilterNode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
