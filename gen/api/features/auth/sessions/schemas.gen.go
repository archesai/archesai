// Package sessions provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package sessions

import (
	"encoding/json"
	"time"

	externalRef0 "github.com/archesai/archesai/gen/api/common"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for SessionsFilterNode0Field.
const (
	SessionsFilterNode0FieldActiveOrganizationId SessionsFilterNode0Field = "activeOrganizationId"
	SessionsFilterNode0FieldCreatedAt            SessionsFilterNode0Field = "createdAt"
	SessionsFilterNode0FieldExpiresAt            SessionsFilterNode0Field = "expiresAt"
	SessionsFilterNode0FieldId                   SessionsFilterNode0Field = "id"
	SessionsFilterNode0FieldIpAddress            SessionsFilterNode0Field = "ipAddress"
	SessionsFilterNode0FieldToken                SessionsFilterNode0Field = "token"
	SessionsFilterNode0FieldUpdatedAt            SessionsFilterNode0Field = "updatedAt"
	SessionsFilterNode0FieldUserAgent            SessionsFilterNode0Field = "userAgent"
	SessionsFilterNode0FieldUserId               SessionsFilterNode0Field = "userId"
)

// Defines values for SessionsFilterNode1Operator.
const (
	And SessionsFilterNode1Operator = "and"
	Or  SessionsFilterNode1Operator = "or"
)

// Defines values for SessionsSortField.
const (
	SessionsSortFieldActiveOrganizationId SessionsSortField = "activeOrganizationId"
	SessionsSortFieldCreatedAt            SessionsSortField = "createdAt"
	SessionsSortFieldExpiresAt            SessionsSortField = "expiresAt"
	SessionsSortFieldId                   SessionsSortField = "id"
	SessionsSortFieldIpAddress            SessionsSortField = "ipAddress"
	SessionsSortFieldToken                SessionsSortField = "token"
	SessionsSortFieldUpdatedAt            SessionsSortField = "updatedAt"
	SessionsSortFieldUserAgent            SessionsSortField = "userAgent"
	SessionsSortFieldUserId               SessionsSortField = "userId"
)

// Defines values for SessionsSortOrder.
const (
	Asc  SessionsSortOrder = "asc"
	Desc SessionsSortOrder = "desc"
)

// SessionEntity Schema for Session entity
type SessionEntity struct {
	// ActiveOrganizationId The active organization ID
	ActiveOrganizationId *string `json:"activeOrganizationId"`

	// CreatedAt The date this item was created
	CreatedAt time.Time `json:"createdAt"`

	// ExpiresAt The expiration date of the session
	ExpiresAt string `json:"expiresAt"`

	// Id The ID of the item
	Id openapi_types.UUID `json:"id"`

	// IpAddress The IP address of the session
	IpAddress *string `json:"ipAddress"`

	// Token The session token
	Token string `json:"token"`

	// UpdatedAt The date this item was last updated
	UpdatedAt time.Time `json:"updatedAt"`

	// UserAgent The user agent of the session
	UserAgent *string `json:"userAgent"`

	// UserId The ID of the user associated with the session
	UserId string `json:"userId"`
}

// SessionsFilterNode A recursive filter node for sessions entity that can be a condition or group
type SessionsFilterNode struct {
	union json.RawMessage
}

// SessionsFilterNode0 defines model for .
type SessionsFilterNode0 struct {
	Field SessionsFilterNode0Field `json:"field"`

	// Operator Supported filter operations
	Operator externalRef0.Operator `json:"operator"`
	Type     string                `json:"type"`

	// Value Value for filter conditions (scalar | array | range | relative)
	Value externalRef0.FilterValue `json:"value"`
}

// SessionsFilterNode0Field defines model for SessionsFilterNode.0.Field.
type SessionsFilterNode0Field string

// SessionsFilterNode1 defines model for .
type SessionsFilterNode1 struct {
	Children []SessionsFilterNode        `json:"children"`
	Operator SessionsFilterNode1Operator `json:"operator"`
	Type     string                      `json:"type"`
}

// SessionsFilterNode1Operator defines model for SessionsFilterNode.1.Operator.
type SessionsFilterNode1Operator string

// SessionsSort Sorting configuration for sessions entity with field and order
type SessionsSort struct {
	Field SessionsSortField `json:"field"`
	Order SessionsSortOrder `json:"order"`
}

// SessionsSortField defines model for SessionsSort.Field.
type SessionsSortField string

// SessionsSortOrder defines model for SessionsSort.Order.
type SessionsSortOrder string

// AsSessionsFilterNode0 returns the union data inside the SessionsFilterNode as a SessionsFilterNode0
func (t SessionsFilterNode) AsSessionsFilterNode0() (SessionsFilterNode0, error) {
	var body SessionsFilterNode0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSessionsFilterNode0 overwrites any union data inside the SessionsFilterNode as the provided SessionsFilterNode0
func (t *SessionsFilterNode) FromSessionsFilterNode0(v SessionsFilterNode0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSessionsFilterNode0 performs a merge with any union data inside the SessionsFilterNode, using the provided SessionsFilterNode0
func (t *SessionsFilterNode) MergeSessionsFilterNode0(v SessionsFilterNode0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSessionsFilterNode1 returns the union data inside the SessionsFilterNode as a SessionsFilterNode1
func (t SessionsFilterNode) AsSessionsFilterNode1() (SessionsFilterNode1, error) {
	var body SessionsFilterNode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSessionsFilterNode1 overwrites any union data inside the SessionsFilterNode as the provided SessionsFilterNode1
func (t *SessionsFilterNode) FromSessionsFilterNode1(v SessionsFilterNode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSessionsFilterNode1 performs a merge with any union data inside the SessionsFilterNode, using the provided SessionsFilterNode1
func (t *SessionsFilterNode) MergeSessionsFilterNode1(v SessionsFilterNode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t SessionsFilterNode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *SessionsFilterNode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
