// Package members provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package members

import (
	"encoding/json"
	"time"

	externalRef0 "github.com/archesai/archesai/gen/api/common"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for MemberEntityRole.
const (
	Admin  MemberEntityRole = "admin"
	Member MemberEntityRole = "member"
	Owner  MemberEntityRole = "owner"
)

// Defines values for MembersFilterNode0Field.
const (
	MembersFilterNode0FieldCreatedAt      MembersFilterNode0Field = "createdAt"
	MembersFilterNode0FieldId             MembersFilterNode0Field = "id"
	MembersFilterNode0FieldOrganizationId MembersFilterNode0Field = "organizationId"
	MembersFilterNode0FieldRole           MembersFilterNode0Field = "role"
	MembersFilterNode0FieldUpdatedAt      MembersFilterNode0Field = "updatedAt"
	MembersFilterNode0FieldUserId         MembersFilterNode0Field = "userId"
)

// Defines values for MembersFilterNode1Operator.
const (
	And MembersFilterNode1Operator = "and"
	Or  MembersFilterNode1Operator = "or"
)

// Defines values for MembersSortField.
const (
	MembersSortFieldCreatedAt      MembersSortField = "createdAt"
	MembersSortFieldId             MembersSortField = "id"
	MembersSortFieldOrganizationId MembersSortField = "organizationId"
	MembersSortFieldRole           MembersSortField = "role"
	MembersSortFieldUpdatedAt      MembersSortField = "updatedAt"
	MembersSortFieldUserId         MembersSortField = "userId"
)

// Defines values for MembersSortOrder.
const (
	Asc  MembersSortOrder = "asc"
	Desc MembersSortOrder = "desc"
)

// MemberEntity Schema for Member entity
type MemberEntity struct {
	// CreatedAt The date this item was created
	CreatedAt time.Time `json:"createdAt"`

	// Id The ID of the item
	Id openapi_types.UUID `json:"id"`

	// OrganizationId The organization name
	OrganizationId string `json:"organizationId"`

	// Role The role of the member
	Role MemberEntityRole `json:"role"`

	// UpdatedAt The date this item was last updated
	UpdatedAt time.Time `json:"updatedAt"`

	// UserId The user id
	UserId string `json:"userId"`
}

// MemberEntityRole The role of the member
type MemberEntityRole string

// MembersFilterNode A recursive filter node for members entity that can be a condition or group
type MembersFilterNode struct {
	union json.RawMessage
}

// MembersFilterNode0 defines model for .
type MembersFilterNode0 struct {
	Field MembersFilterNode0Field `json:"field"`

	// Operator Supported filter operations
	Operator externalRef0.Operator `json:"operator"`
	Type     string                `json:"type"`

	// Value Value for filter conditions (scalar | array | range | relative)
	Value externalRef0.FilterValue `json:"value"`
}

// MembersFilterNode0Field defines model for MembersFilterNode.0.Field.
type MembersFilterNode0Field string

// MembersFilterNode1 defines model for .
type MembersFilterNode1 struct {
	Children []MembersFilterNode        `json:"children"`
	Operator MembersFilterNode1Operator `json:"operator"`
	Type     string                     `json:"type"`
}

// MembersFilterNode1Operator defines model for MembersFilterNode.1.Operator.
type MembersFilterNode1Operator string

// MembersSort Sorting configuration for members entity with field and order
type MembersSort struct {
	Field MembersSortField `json:"field"`
	Order MembersSortOrder `json:"order"`
}

// MembersSortField defines model for MembersSort.Field.
type MembersSortField string

// MembersSortOrder defines model for MembersSort.Order.
type MembersSortOrder string

// AsMembersFilterNode0 returns the union data inside the MembersFilterNode as a MembersFilterNode0
func (t MembersFilterNode) AsMembersFilterNode0() (MembersFilterNode0, error) {
	var body MembersFilterNode0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMembersFilterNode0 overwrites any union data inside the MembersFilterNode as the provided MembersFilterNode0
func (t *MembersFilterNode) FromMembersFilterNode0(v MembersFilterNode0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMembersFilterNode0 performs a merge with any union data inside the MembersFilterNode, using the provided MembersFilterNode0
func (t *MembersFilterNode) MergeMembersFilterNode0(v MembersFilterNode0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsMembersFilterNode1 returns the union data inside the MembersFilterNode as a MembersFilterNode1
func (t MembersFilterNode) AsMembersFilterNode1() (MembersFilterNode1, error) {
	var body MembersFilterNode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromMembersFilterNode1 overwrites any union data inside the MembersFilterNode as the provided MembersFilterNode1
func (t *MembersFilterNode) FromMembersFilterNode1(v MembersFilterNode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeMembersFilterNode1 performs a merge with any union data inside the MembersFilterNode, using the provided MembersFilterNode1
func (t *MembersFilterNode) MergeMembersFilterNode1(v MembersFilterNode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t MembersFilterNode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *MembersFilterNode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
