// Package artifacts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package artifacts

import (
	"encoding/json"
	"time"

	externalRef0 "github.com/archesai/archesai/gen/api/common"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ArtifactsFilterNode0Field.
const (
	ArtifactsFilterNode0FieldCreatedAt      ArtifactsFilterNode0Field = "createdAt"
	ArtifactsFilterNode0FieldCredits        ArtifactsFilterNode0Field = "credits"
	ArtifactsFilterNode0FieldDescription    ArtifactsFilterNode0Field = "description"
	ArtifactsFilterNode0FieldId             ArtifactsFilterNode0Field = "id"
	ArtifactsFilterNode0FieldMimeType       ArtifactsFilterNode0Field = "mimeType"
	ArtifactsFilterNode0FieldName           ArtifactsFilterNode0Field = "name"
	ArtifactsFilterNode0FieldOrganizationId ArtifactsFilterNode0Field = "organizationId"
	ArtifactsFilterNode0FieldPreviewImage   ArtifactsFilterNode0Field = "previewImage"
	ArtifactsFilterNode0FieldProducerId     ArtifactsFilterNode0Field = "producerId"
	ArtifactsFilterNode0FieldText           ArtifactsFilterNode0Field = "text"
	ArtifactsFilterNode0FieldUpdatedAt      ArtifactsFilterNode0Field = "updatedAt"
	ArtifactsFilterNode0FieldUrl            ArtifactsFilterNode0Field = "url"
)

// Defines values for ArtifactsFilterNode1Operator.
const (
	And ArtifactsFilterNode1Operator = "and"
	Or  ArtifactsFilterNode1Operator = "or"
)

// Defines values for ArtifactsSortField.
const (
	ArtifactsSortFieldCreatedAt      ArtifactsSortField = "createdAt"
	ArtifactsSortFieldCredits        ArtifactsSortField = "credits"
	ArtifactsSortFieldDescription    ArtifactsSortField = "description"
	ArtifactsSortFieldId             ArtifactsSortField = "id"
	ArtifactsSortFieldMimeType       ArtifactsSortField = "mimeType"
	ArtifactsSortFieldName           ArtifactsSortField = "name"
	ArtifactsSortFieldOrganizationId ArtifactsSortField = "organizationId"
	ArtifactsSortFieldPreviewImage   ArtifactsSortField = "previewImage"
	ArtifactsSortFieldProducerId     ArtifactsSortField = "producerId"
	ArtifactsSortFieldText           ArtifactsSortField = "text"
	ArtifactsSortFieldUpdatedAt      ArtifactsSortField = "updatedAt"
	ArtifactsSortFieldUrl            ArtifactsSortField = "url"
)

// Defines values for ArtifactsSortOrder.
const (
	Asc  ArtifactsSortOrder = "asc"
	Desc ArtifactsSortOrder = "desc"
)

// ArtifactEntity Schema for Artifact entity
type ArtifactEntity struct {
	// CreatedAt The date this item was created
	CreatedAt time.Time `json:"createdAt"`

	// Credits The number of credits required to access this artifact. This is used for metering and billing purposes.
	Credits float32 `json:"credits"`

	// Description The artifact's description
	Description *string `json:"description"`

	// Id The ID of the item
	Id openapi_types.UUID `json:"id"`

	// MimeType The MIME type of the artifact, e.g. image/png
	MimeType string `json:"mimeType"`

	// Name The name of the artifact, used for display purposes
	Name *string `json:"name"`

	// OrganizationId The organization name
	OrganizationId string `json:"organizationId"`

	// PreviewImage The URL of the preview image for this artifact. This is used for displaying a thumbnail in the UI.
	PreviewImage *string `json:"previewImage"`

	// ProducerId The ID of the run that produced this artifact, if applicable
	ProducerId *string `json:"producerId"`

	// Text The artifact text
	Text *string `json:"text"`

	// UpdatedAt The date this item was last updated
	UpdatedAt time.Time `json:"updatedAt"`

	// Url The artifact URL
	Url *string `json:"url"`
}

// ArtifactsFilterNode A recursive filter node for artifacts entity that can be a condition or group
type ArtifactsFilterNode struct {
	union json.RawMessage
}

// ArtifactsFilterNode0 defines model for .
type ArtifactsFilterNode0 struct {
	Field ArtifactsFilterNode0Field `json:"field"`

	// Operator Supported filter operations
	Operator externalRef0.Operator `json:"operator"`
	Type     string                `json:"type"`

	// Value Value for filter conditions (scalar | array | range | relative)
	Value externalRef0.FilterValue `json:"value"`
}

// ArtifactsFilterNode0Field defines model for ArtifactsFilterNode.0.Field.
type ArtifactsFilterNode0Field string

// ArtifactsFilterNode1 defines model for .
type ArtifactsFilterNode1 struct {
	Children []ArtifactsFilterNode        `json:"children"`
	Operator ArtifactsFilterNode1Operator `json:"operator"`
	Type     string                       `json:"type"`
}

// ArtifactsFilterNode1Operator defines model for ArtifactsFilterNode.1.Operator.
type ArtifactsFilterNode1Operator string

// ArtifactsSort Sorting configuration for artifacts entity with field and order
type ArtifactsSort struct {
	Field ArtifactsSortField `json:"field"`
	Order ArtifactsSortOrder `json:"order"`
}

// ArtifactsSortField defines model for ArtifactsSort.Field.
type ArtifactsSortField string

// ArtifactsSortOrder defines model for ArtifactsSort.Order.
type ArtifactsSortOrder string

// AsArtifactsFilterNode0 returns the union data inside the ArtifactsFilterNode as a ArtifactsFilterNode0
func (t ArtifactsFilterNode) AsArtifactsFilterNode0() (ArtifactsFilterNode0, error) {
	var body ArtifactsFilterNode0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArtifactsFilterNode0 overwrites any union data inside the ArtifactsFilterNode as the provided ArtifactsFilterNode0
func (t *ArtifactsFilterNode) FromArtifactsFilterNode0(v ArtifactsFilterNode0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArtifactsFilterNode0 performs a merge with any union data inside the ArtifactsFilterNode, using the provided ArtifactsFilterNode0
func (t *ArtifactsFilterNode) MergeArtifactsFilterNode0(v ArtifactsFilterNode0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsArtifactsFilterNode1 returns the union data inside the ArtifactsFilterNode as a ArtifactsFilterNode1
func (t ArtifactsFilterNode) AsArtifactsFilterNode1() (ArtifactsFilterNode1, error) {
	var body ArtifactsFilterNode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromArtifactsFilterNode1 overwrites any union data inside the ArtifactsFilterNode as the provided ArtifactsFilterNode1
func (t *ArtifactsFilterNode) FromArtifactsFilterNode1(v ArtifactsFilterNode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeArtifactsFilterNode1 performs a merge with any union data inside the ArtifactsFilterNode, using the provided ArtifactsFilterNode1
func (t *ArtifactsFilterNode) MergeArtifactsFilterNode1(v ArtifactsFilterNode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ArtifactsFilterNode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ArtifactsFilterNode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
