// Package runs provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package runs

import (
	"encoding/json"
	"time"

	externalRef0 "github.com/archesai/archesai/gen/api/common"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for RunEntityStatus.
const (
	COMPLETED  RunEntityStatus = "COMPLETED"
	FAILED     RunEntityStatus = "FAILED"
	PROCESSING RunEntityStatus = "PROCESSING"
	QUEUED     RunEntityStatus = "QUEUED"
)

// Defines values for RunsFilterNode0Field.
const (
	RunsFilterNode0FieldCompletedAt    RunsFilterNode0Field = "completedAt"
	RunsFilterNode0FieldCreatedAt      RunsFilterNode0Field = "createdAt"
	RunsFilterNode0FieldError          RunsFilterNode0Field = "error"
	RunsFilterNode0FieldId             RunsFilterNode0Field = "id"
	RunsFilterNode0FieldOrganizationId RunsFilterNode0Field = "organizationId"
	RunsFilterNode0FieldPipelineId     RunsFilterNode0Field = "pipelineId"
	RunsFilterNode0FieldProgress       RunsFilterNode0Field = "progress"
	RunsFilterNode0FieldStartedAt      RunsFilterNode0Field = "startedAt"
	RunsFilterNode0FieldStatus         RunsFilterNode0Field = "status"
	RunsFilterNode0FieldToolId         RunsFilterNode0Field = "toolId"
	RunsFilterNode0FieldUpdatedAt      RunsFilterNode0Field = "updatedAt"
)

// Defines values for RunsFilterNode1Operator.
const (
	And RunsFilterNode1Operator = "and"
	Or  RunsFilterNode1Operator = "or"
)

// Defines values for RunsSortField.
const (
	RunsSortFieldCompletedAt    RunsSortField = "completedAt"
	RunsSortFieldCreatedAt      RunsSortField = "createdAt"
	RunsSortFieldError          RunsSortField = "error"
	RunsSortFieldId             RunsSortField = "id"
	RunsSortFieldOrganizationId RunsSortField = "organizationId"
	RunsSortFieldPipelineId     RunsSortField = "pipelineId"
	RunsSortFieldProgress       RunsSortField = "progress"
	RunsSortFieldStartedAt      RunsSortField = "startedAt"
	RunsSortFieldStatus         RunsSortField = "status"
	RunsSortFieldToolId         RunsSortField = "toolId"
	RunsSortFieldUpdatedAt      RunsSortField = "updatedAt"
)

// Defines values for RunsSortOrder.
const (
	Asc  RunsSortOrder = "asc"
	Desc RunsSortOrder = "desc"
)

// RunEntity Schema for Run entity
type RunEntity struct {
	// CompletedAt The timestamp when the run completed
	CompletedAt *time.Time `json:"completedAt"`

	// CreatedAt The date this item was created
	CreatedAt time.Time `json:"createdAt"`

	// Error The error message
	Error *string `json:"error"`

	// Id The ID of the item
	Id openapi_types.UUID `json:"id"`

	// OrganizationId The organization name
	OrganizationId string `json:"organizationId"`

	// PipelineId The pipeline ID associated with the run
	PipelineId *string `json:"pipelineId"`

	// Progress The percent progress of the run
	Progress float32 `json:"progress"`

	// StartedAt The timestamp when the run started
	StartedAt *time.Time      `json:"startedAt"`
	Status    RunEntityStatus `json:"status"`

	// ToolId The tool ID associated with the run
	ToolId string `json:"toolId"`

	// UpdatedAt The date this item was last updated
	UpdatedAt time.Time `json:"updatedAt"`
}

// RunEntityStatus defines model for RunEntity.Status.
type RunEntityStatus string

// RunsFilterNode A recursive filter node for runs entity that can be a condition or group
type RunsFilterNode struct {
	union json.RawMessage
}

// RunsFilterNode0 defines model for .
type RunsFilterNode0 struct {
	Field RunsFilterNode0Field `json:"field"`

	// Operator Supported filter operations
	Operator externalRef0.Operator `json:"operator"`
	Type     string                `json:"type"`

	// Value Value for filter conditions (scalar | array | range | relative)
	Value externalRef0.FilterValue `json:"value"`
}

// RunsFilterNode0Field defines model for RunsFilterNode.0.Field.
type RunsFilterNode0Field string

// RunsFilterNode1 defines model for .
type RunsFilterNode1 struct {
	Children []RunsFilterNode        `json:"children"`
	Operator RunsFilterNode1Operator `json:"operator"`
	Type     string                  `json:"type"`
}

// RunsFilterNode1Operator defines model for RunsFilterNode.1.Operator.
type RunsFilterNode1Operator string

// RunsSort Sorting configuration for runs entity with field and order
type RunsSort struct {
	Field RunsSortField `json:"field"`
	Order RunsSortOrder `json:"order"`
}

// RunsSortField defines model for RunsSort.Field.
type RunsSortField string

// RunsSortOrder defines model for RunsSort.Order.
type RunsSortOrder string

// AsRunsFilterNode0 returns the union data inside the RunsFilterNode as a RunsFilterNode0
func (t RunsFilterNode) AsRunsFilterNode0() (RunsFilterNode0, error) {
	var body RunsFilterNode0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunsFilterNode0 overwrites any union data inside the RunsFilterNode as the provided RunsFilterNode0
func (t *RunsFilterNode) FromRunsFilterNode0(v RunsFilterNode0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunsFilterNode0 performs a merge with any union data inside the RunsFilterNode, using the provided RunsFilterNode0
func (t *RunsFilterNode) MergeRunsFilterNode0(v RunsFilterNode0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsRunsFilterNode1 returns the union data inside the RunsFilterNode as a RunsFilterNode1
func (t RunsFilterNode) AsRunsFilterNode1() (RunsFilterNode1, error) {
	var body RunsFilterNode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRunsFilterNode1 overwrites any union data inside the RunsFilterNode as the provided RunsFilterNode1
func (t *RunsFilterNode) FromRunsFilterNode1(v RunsFilterNode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRunsFilterNode1 performs a merge with any union data inside the RunsFilterNode, using the provided RunsFilterNode1
func (t *RunsFilterNode) MergeRunsFilterNode1(v RunsFilterNode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RunsFilterNode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RunsFilterNode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
