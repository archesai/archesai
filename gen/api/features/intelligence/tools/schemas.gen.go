// Package tools provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package tools

import (
	"encoding/json"
	"time"

	externalRef0 "github.com/archesai/archesai/gen/api/common"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ToolsFilterNode0Field.
const (
	ToolsFilterNode0FieldCreatedAt      ToolsFilterNode0Field = "createdAt"
	ToolsFilterNode0FieldDescription    ToolsFilterNode0Field = "description"
	ToolsFilterNode0FieldId             ToolsFilterNode0Field = "id"
	ToolsFilterNode0FieldInputMimeType  ToolsFilterNode0Field = "inputMimeType"
	ToolsFilterNode0FieldName           ToolsFilterNode0Field = "name"
	ToolsFilterNode0FieldOrganizationId ToolsFilterNode0Field = "organizationId"
	ToolsFilterNode0FieldOutputMimeType ToolsFilterNode0Field = "outputMimeType"
	ToolsFilterNode0FieldUpdatedAt      ToolsFilterNode0Field = "updatedAt"
)

// Defines values for ToolsFilterNode1Operator.
const (
	And ToolsFilterNode1Operator = "and"
	Or  ToolsFilterNode1Operator = "or"
)

// Defines values for ToolsSortField.
const (
	ToolsSortFieldCreatedAt      ToolsSortField = "createdAt"
	ToolsSortFieldDescription    ToolsSortField = "description"
	ToolsSortFieldId             ToolsSortField = "id"
	ToolsSortFieldInputMimeType  ToolsSortField = "inputMimeType"
	ToolsSortFieldName           ToolsSortField = "name"
	ToolsSortFieldOrganizationId ToolsSortField = "organizationId"
	ToolsSortFieldOutputMimeType ToolsSortField = "outputMimeType"
	ToolsSortFieldUpdatedAt      ToolsSortField = "updatedAt"
)

// Defines values for ToolsSortOrder.
const (
	Asc  ToolsSortOrder = "asc"
	Desc ToolsSortOrder = "desc"
)

// ToolEntity Schema for Tool entity
type ToolEntity struct {
	// CreatedAt The date this item was created
	CreatedAt time.Time `json:"createdAt"`

	// Description The tool description
	Description string `json:"description"`

	// Id The ID of the item
	Id openapi_types.UUID `json:"id"`

	// InputMimeType The MIME type of the input for the tool, e.g. text/plain
	InputMimeType string `json:"inputMimeType"`

	// Name The name of the tool
	Name string `json:"name"`

	// OrganizationId The organization name
	OrganizationId string `json:"organizationId"`

	// OutputMimeType The MIME type of the output for the tool, e.g. text/plain
	OutputMimeType string `json:"outputMimeType"`

	// UpdatedAt The date this item was last updated
	UpdatedAt time.Time `json:"updatedAt"`
}

// ToolsFilterNode A recursive filter node for tools entity that can be a condition or group
type ToolsFilterNode struct {
	union json.RawMessage
}

// ToolsFilterNode0 defines model for .
type ToolsFilterNode0 struct {
	Field ToolsFilterNode0Field `json:"field"`

	// Operator Supported filter operations
	Operator externalRef0.Operator `json:"operator"`
	Type     string                `json:"type"`

	// Value Value for filter conditions (scalar | array | range | relative)
	Value externalRef0.FilterValue `json:"value"`
}

// ToolsFilterNode0Field defines model for ToolsFilterNode.0.Field.
type ToolsFilterNode0Field string

// ToolsFilterNode1 defines model for .
type ToolsFilterNode1 struct {
	Children []ToolsFilterNode        `json:"children"`
	Operator ToolsFilterNode1Operator `json:"operator"`
	Type     string                   `json:"type"`
}

// ToolsFilterNode1Operator defines model for ToolsFilterNode.1.Operator.
type ToolsFilterNode1Operator string

// ToolsSort Sorting configuration for tools entity with field and order
type ToolsSort struct {
	Field ToolsSortField `json:"field"`
	Order ToolsSortOrder `json:"order"`
}

// ToolsSortField defines model for ToolsSort.Field.
type ToolsSortField string

// ToolsSortOrder defines model for ToolsSort.Order.
type ToolsSortOrder string

// AsToolsFilterNode0 returns the union data inside the ToolsFilterNode as a ToolsFilterNode0
func (t ToolsFilterNode) AsToolsFilterNode0() (ToolsFilterNode0, error) {
	var body ToolsFilterNode0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromToolsFilterNode0 overwrites any union data inside the ToolsFilterNode as the provided ToolsFilterNode0
func (t *ToolsFilterNode) FromToolsFilterNode0(v ToolsFilterNode0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeToolsFilterNode0 performs a merge with any union data inside the ToolsFilterNode, using the provided ToolsFilterNode0
func (t *ToolsFilterNode) MergeToolsFilterNode0(v ToolsFilterNode0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsToolsFilterNode1 returns the union data inside the ToolsFilterNode as a ToolsFilterNode1
func (t ToolsFilterNode) AsToolsFilterNode1() (ToolsFilterNode1, error) {
	var body ToolsFilterNode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromToolsFilterNode1 overwrites any union data inside the ToolsFilterNode as the provided ToolsFilterNode1
func (t *ToolsFilterNode) FromToolsFilterNode1(v ToolsFilterNode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeToolsFilterNode1 performs a merge with any union data inside the ToolsFilterNode, using the provided ToolsFilterNode1
func (t *ToolsFilterNode) MergeToolsFilterNode1(v ToolsFilterNode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ToolsFilterNode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ToolsFilterNode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
