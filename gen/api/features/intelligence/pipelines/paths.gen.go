// Package pipelines provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package pipelines

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	externalRef0 "github.com/archesai/archesai/gen/api/common"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// FindManyPipelinesParams defines parameters for FindManyPipelines.
type FindManyPipelinesParams struct {
	Filter *PipelinesFilterNode `form:"filter,omitempty" json:"filter,omitempty"`
	Page   *externalRef0.Page   `form:"page,omitempty" json:"page,omitempty"`
	Sort   *[]PipelinesSort     `form:"sort,omitempty" json:"sort,omitempty"`
}

// CreatePipelineJSONBody defines parameters for CreatePipeline.
type CreatePipelineJSONBody struct {
	// Description The pipeline description
	Description *string `json:"description"`

	// Name The pipeline name
	Name *string `json:"name"`
}

// UpdatePipelineJSONBody defines parameters for UpdatePipeline.
type UpdatePipelineJSONBody struct {
	// Description The pipeline description
	Description *string `json:"description"`

	// Name The pipeline name
	Name *string `json:"name"`
}

// CreatePipelineJSONRequestBody defines body for CreatePipeline for application/json ContentType.
type CreatePipelineJSONRequestBody CreatePipelineJSONBody

// UpdatePipelineJSONRequestBody defines body for UpdatePipeline for application/json ContentType.
type UpdatePipelineJSONRequestBody UpdatePipelineJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Find many pipelines
	// (GET /pipelines)
	FindManyPipelines(ctx echo.Context, params FindManyPipelinesParams) error
	// Create a new pipeline
	// (POST /pipelines)
	CreatePipeline(ctx echo.Context) error
	// Delete a pipeline
	// (DELETE /pipelines/{id})
	DeletePipeline(ctx echo.Context, id openapi_types.UUID) error
	// Find a pipeline
	// (GET /pipelines/{id})
	GetOnePipeline(ctx echo.Context, id openapi_types.UUID) error
	// Update a pipeline
	// (PATCH /pipelines/{id})
	UpdatePipeline(ctx echo.Context, id openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// FindManyPipelines converts echo context to params.
func (w *ServerInterfaceWrapper) FindManyPipelines(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindManyPipelinesParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindManyPipelines(ctx, params)
	return err
}

// CreatePipeline converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePipeline(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreatePipeline(ctx)
	return err
}

// DeletePipeline converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePipeline(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePipeline(ctx, id)
	return err
}

// GetOnePipeline converts echo context to params.
func (w *ServerInterfaceWrapper) GetOnePipeline(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOnePipeline(ctx, id)
	return err
}

// UpdatePipeline converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePipeline(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdatePipeline(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/pipelines", wrapper.FindManyPipelines)
	router.POST(baseURL+"/pipelines", wrapper.CreatePipeline)
	router.DELETE(baseURL+"/pipelines/:id", wrapper.DeletePipeline)
	router.GET(baseURL+"/pipelines/:id", wrapper.GetOnePipeline)
	router.PATCH(baseURL+"/pipelines/:id", wrapper.UpdatePipeline)

}

type FindManyPipelinesRequestObject struct {
	Params FindManyPipelinesParams
}

type FindManyPipelinesResponseObject interface {
	VisitFindManyPipelinesResponse(w http.ResponseWriter) error
}

type FindManyPipelines200JSONResponse struct {
	Data []PipelineEntity `json:"data"`
	Meta struct {
		// Total Total number of items in the collection
		Total float32 `json:"total"`
	} `json:"meta"`
}

func (response FindManyPipelines200JSONResponse) VisitFindManyPipelinesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreatePipelineRequestObject struct {
	Body *CreatePipelineJSONRequestBody
}

type CreatePipelineResponseObject interface {
	VisitCreatePipelineResponse(w http.ResponseWriter) error
}

type CreatePipeline201JSONResponse struct {
	// Data Schema for Pipeline entity
	Data PipelineEntity `json:"data"`
}

func (response CreatePipeline201JSONResponse) VisitCreatePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeletePipelineRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeletePipelineResponseObject interface {
	VisitDeletePipelineResponse(w http.ResponseWriter) error
}

type DeletePipeline200JSONResponse struct {
	// Data Schema for Pipeline entity
	Data PipelineEntity `json:"data"`
}

func (response DeletePipeline200JSONResponse) VisitDeletePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeletePipeline404JSONResponse struct{ externalRef0.NotFound }

func (response DeletePipeline404JSONResponse) VisitDeletePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetOnePipelineRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetOnePipelineResponseObject interface {
	VisitGetOnePipelineResponse(w http.ResponseWriter) error
}

type GetOnePipeline200JSONResponse struct {
	// Data Schema for Pipeline entity
	Data PipelineEntity `json:"data"`
}

func (response GetOnePipeline200JSONResponse) VisitGetOnePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetOnePipeline404JSONResponse struct{ externalRef0.NotFound }

func (response GetOnePipeline404JSONResponse) VisitGetOnePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePipelineRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *UpdatePipelineJSONRequestBody
}

type UpdatePipelineResponseObject interface {
	VisitUpdatePipelineResponse(w http.ResponseWriter) error
}

type UpdatePipeline200JSONResponse struct {
	// Data Schema for Pipeline entity
	Data PipelineEntity `json:"data"`
}

func (response UpdatePipeline200JSONResponse) VisitUpdatePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdatePipeline404JSONResponse struct{ externalRef0.NotFound }

func (response UpdatePipeline404JSONResponse) VisitUpdatePipelineResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Find many pipelines
	// (GET /pipelines)
	FindManyPipelines(ctx context.Context, request FindManyPipelinesRequestObject) (FindManyPipelinesResponseObject, error)
	// Create a new pipeline
	// (POST /pipelines)
	CreatePipeline(ctx context.Context, request CreatePipelineRequestObject) (CreatePipelineResponseObject, error)
	// Delete a pipeline
	// (DELETE /pipelines/{id})
	DeletePipeline(ctx context.Context, request DeletePipelineRequestObject) (DeletePipelineResponseObject, error)
	// Find a pipeline
	// (GET /pipelines/{id})
	GetOnePipeline(ctx context.Context, request GetOnePipelineRequestObject) (GetOnePipelineResponseObject, error)
	// Update a pipeline
	// (PATCH /pipelines/{id})
	UpdatePipeline(ctx context.Context, request UpdatePipelineRequestObject) (UpdatePipelineResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// FindManyPipelines operation middleware
func (sh *strictHandler) FindManyPipelines(ctx echo.Context, params FindManyPipelinesParams) error {
	var request FindManyPipelinesRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.FindManyPipelines(ctx.Request().Context(), request.(FindManyPipelinesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "FindManyPipelines")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(FindManyPipelinesResponseObject); ok {
		return validResponse.VisitFindManyPipelinesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreatePipeline operation middleware
func (sh *strictHandler) CreatePipeline(ctx echo.Context) error {
	var request CreatePipelineRequestObject

	var body CreatePipelineJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreatePipeline(ctx.Request().Context(), request.(CreatePipelineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreatePipeline")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreatePipelineResponseObject); ok {
		return validResponse.VisitCreatePipelineResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeletePipeline operation middleware
func (sh *strictHandler) DeletePipeline(ctx echo.Context, id openapi_types.UUID) error {
	var request DeletePipelineRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeletePipeline(ctx.Request().Context(), request.(DeletePipelineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeletePipeline")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeletePipelineResponseObject); ok {
		return validResponse.VisitDeletePipelineResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetOnePipeline operation middleware
func (sh *strictHandler) GetOnePipeline(ctx echo.Context, id openapi_types.UUID) error {
	var request GetOnePipelineRequestObject

	request.Id = id

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetOnePipeline(ctx.Request().Context(), request.(GetOnePipelineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOnePipeline")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetOnePipelineResponseObject); ok {
		return validResponse.VisitGetOnePipelineResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdatePipeline operation middleware
func (sh *strictHandler) UpdatePipeline(ctx echo.Context, id openapi_types.UUID) error {
	var request UpdatePipelineRequestObject

	request.Id = id

	var body UpdatePipelineJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdatePipeline(ctx.Request().Context(), request.(UpdatePipelineRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdatePipeline")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdatePipelineResponseObject); ok {
		return validResponse.VisitUpdatePipelineResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
