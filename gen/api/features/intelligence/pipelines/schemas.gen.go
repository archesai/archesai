// Package pipelines provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package pipelines

import (
	"encoding/json"
	"time"

	externalRef0 "github.com/archesai/archesai/gen/api/common"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for PipelinesFilterNode0Field.
const (
	PipelinesFilterNode0FieldCreatedAt      PipelinesFilterNode0Field = "createdAt"
	PipelinesFilterNode0FieldDescription    PipelinesFilterNode0Field = "description"
	PipelinesFilterNode0FieldId             PipelinesFilterNode0Field = "id"
	PipelinesFilterNode0FieldName           PipelinesFilterNode0Field = "name"
	PipelinesFilterNode0FieldOrganizationId PipelinesFilterNode0Field = "organizationId"
	PipelinesFilterNode0FieldUpdatedAt      PipelinesFilterNode0Field = "updatedAt"
)

// Defines values for PipelinesFilterNode1Operator.
const (
	And PipelinesFilterNode1Operator = "and"
	Or  PipelinesFilterNode1Operator = "or"
)

// Defines values for PipelinesSortField.
const (
	PipelinesSortFieldCreatedAt      PipelinesSortField = "createdAt"
	PipelinesSortFieldDescription    PipelinesSortField = "description"
	PipelinesSortFieldId             PipelinesSortField = "id"
	PipelinesSortFieldName           PipelinesSortField = "name"
	PipelinesSortFieldOrganizationId PipelinesSortField = "organizationId"
	PipelinesSortFieldUpdatedAt      PipelinesSortField = "updatedAt"
)

// Defines values for PipelinesSortOrder.
const (
	Asc  PipelinesSortOrder = "asc"
	Desc PipelinesSortOrder = "desc"
)

// PipelineEntity Schema for Pipeline entity
type PipelineEntity struct {
	// CreatedAt The date this item was created
	CreatedAt time.Time `json:"createdAt"`

	// Description The pipeline description
	Description *string `json:"description"`

	// Id The ID of the item
	Id openapi_types.UUID `json:"id"`

	// Name The pipeline name
	Name *string `json:"name"`

	// OrganizationId The organization id
	OrganizationId string `json:"organizationId"`

	// UpdatedAt The date this item was last updated
	UpdatedAt time.Time `json:"updatedAt"`
}

// PipelineStepEntity Schema for Pipeline Step entity
type PipelineStepEntity struct {
	// CreatedAt The date this item was created
	CreatedAt  time.Time `json:"createdAt"`
	Dependents []struct {
		PipelineStepId string `json:"pipelineStepId"`
	} `json:"dependents"`

	// Id The ID of the item
	Id            openapi_types.UUID `json:"id"`
	PipelineId    string             `json:"pipelineId"`
	Prerequisites []struct {
		PipelineStepId string `json:"pipelineStepId"`
	} `json:"prerequisites"`
	ToolId string `json:"toolId"`

	// UpdatedAt The date this item was last updated
	UpdatedAt time.Time `json:"updatedAt"`
}

// PipelinesFilterNode A recursive filter node for pipelines entity that can be a condition or group
type PipelinesFilterNode struct {
	union json.RawMessage
}

// PipelinesFilterNode0 defines model for .
type PipelinesFilterNode0 struct {
	Field PipelinesFilterNode0Field `json:"field"`

	// Operator Supported filter operations
	Operator externalRef0.Operator `json:"operator"`
	Type     string                `json:"type"`

	// Value Value for filter conditions (scalar | array | range | relative)
	Value externalRef0.FilterValue `json:"value"`
}

// PipelinesFilterNode0Field defines model for PipelinesFilterNode.0.Field.
type PipelinesFilterNode0Field string

// PipelinesFilterNode1 defines model for .
type PipelinesFilterNode1 struct {
	Children []PipelinesFilterNode        `json:"children"`
	Operator PipelinesFilterNode1Operator `json:"operator"`
	Type     string                       `json:"type"`
}

// PipelinesFilterNode1Operator defines model for PipelinesFilterNode.1.Operator.
type PipelinesFilterNode1Operator string

// PipelinesSort Sorting configuration for pipelines entity with field and order
type PipelinesSort struct {
	Field PipelinesSortField `json:"field"`
	Order PipelinesSortOrder `json:"order"`
}

// PipelinesSortField defines model for PipelinesSort.Field.
type PipelinesSortField string

// PipelinesSortOrder defines model for PipelinesSort.Order.
type PipelinesSortOrder string

// AsPipelinesFilterNode0 returns the union data inside the PipelinesFilterNode as a PipelinesFilterNode0
func (t PipelinesFilterNode) AsPipelinesFilterNode0() (PipelinesFilterNode0, error) {
	var body PipelinesFilterNode0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPipelinesFilterNode0 overwrites any union data inside the PipelinesFilterNode as the provided PipelinesFilterNode0
func (t *PipelinesFilterNode) FromPipelinesFilterNode0(v PipelinesFilterNode0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePipelinesFilterNode0 performs a merge with any union data inside the PipelinesFilterNode, using the provided PipelinesFilterNode0
func (t *PipelinesFilterNode) MergePipelinesFilterNode0(v PipelinesFilterNode0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPipelinesFilterNode1 returns the union data inside the PipelinesFilterNode as a PipelinesFilterNode1
func (t PipelinesFilterNode) AsPipelinesFilterNode1() (PipelinesFilterNode1, error) {
	var body PipelinesFilterNode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPipelinesFilterNode1 overwrites any union data inside the PipelinesFilterNode as the provided PipelinesFilterNode1
func (t *PipelinesFilterNode) FromPipelinesFilterNode1(v PipelinesFilterNode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePipelinesFilterNode1 performs a merge with any union data inside the PipelinesFilterNode, using the provided PipelinesFilterNode1
func (t *PipelinesFilterNode) MergePipelinesFilterNode1(v PipelinesFilterNode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PipelinesFilterNode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PipelinesFilterNode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
