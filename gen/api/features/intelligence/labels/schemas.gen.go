// Package labels provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package labels

import (
	"encoding/json"
	"time"

	externalRef0 "github.com/archesai/archesai/gen/api/common"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for LabelsFilterNode0Field.
const (
	LabelsFilterNode0FieldCreatedAt      LabelsFilterNode0Field = "createdAt"
	LabelsFilterNode0FieldId             LabelsFilterNode0Field = "id"
	LabelsFilterNode0FieldName           LabelsFilterNode0Field = "name"
	LabelsFilterNode0FieldOrganizationId LabelsFilterNode0Field = "organizationId"
	LabelsFilterNode0FieldUpdatedAt      LabelsFilterNode0Field = "updatedAt"
)

// Defines values for LabelsFilterNode1Operator.
const (
	And LabelsFilterNode1Operator = "and"
	Or  LabelsFilterNode1Operator = "or"
)

// Defines values for LabelsSortField.
const (
	LabelsSortFieldCreatedAt      LabelsSortField = "createdAt"
	LabelsSortFieldId             LabelsSortField = "id"
	LabelsSortFieldName           LabelsSortField = "name"
	LabelsSortFieldOrganizationId LabelsSortField = "organizationId"
	LabelsSortFieldUpdatedAt      LabelsSortField = "updatedAt"
)

// Defines values for LabelsSortOrder.
const (
	Asc  LabelsSortOrder = "asc"
	Desc LabelsSortOrder = "desc"
)

// LabelEntity Schema for Label entity
type LabelEntity struct {
	// CreatedAt The date this item was created
	CreatedAt time.Time `json:"createdAt"`

	// Id The ID of the item
	Id openapi_types.UUID `json:"id"`

	// Name The name of the label
	Name string `json:"name"`

	// OrganizationId The organization name
	OrganizationId string `json:"organizationId"`

	// UpdatedAt The date this item was last updated
	UpdatedAt time.Time `json:"updatedAt"`
}

// LabelsFilterNode A recursive filter node for labels entity that can be a condition or group
type LabelsFilterNode struct {
	union json.RawMessage
}

// LabelsFilterNode0 defines model for .
type LabelsFilterNode0 struct {
	Field LabelsFilterNode0Field `json:"field"`

	// Operator Supported filter operations
	Operator externalRef0.Operator `json:"operator"`
	Type     string                `json:"type"`

	// Value Value for filter conditions (scalar | array | range | relative)
	Value externalRef0.FilterValue `json:"value"`
}

// LabelsFilterNode0Field defines model for LabelsFilterNode.0.Field.
type LabelsFilterNode0Field string

// LabelsFilterNode1 defines model for .
type LabelsFilterNode1 struct {
	Children []LabelsFilterNode        `json:"children"`
	Operator LabelsFilterNode1Operator `json:"operator"`
	Type     string                    `json:"type"`
}

// LabelsFilterNode1Operator defines model for LabelsFilterNode.1.Operator.
type LabelsFilterNode1Operator string

// LabelsSort Sorting configuration for labels entity with field and order
type LabelsSort struct {
	Field LabelsSortField `json:"field"`
	Order LabelsSortOrder `json:"order"`
}

// LabelsSortField defines model for LabelsSort.Field.
type LabelsSortField string

// LabelsSortOrder defines model for LabelsSort.Order.
type LabelsSortOrder string

// AsLabelsFilterNode0 returns the union data inside the LabelsFilterNode as a LabelsFilterNode0
func (t LabelsFilterNode) AsLabelsFilterNode0() (LabelsFilterNode0, error) {
	var body LabelsFilterNode0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLabelsFilterNode0 overwrites any union data inside the LabelsFilterNode as the provided LabelsFilterNode0
func (t *LabelsFilterNode) FromLabelsFilterNode0(v LabelsFilterNode0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLabelsFilterNode0 performs a merge with any union data inside the LabelsFilterNode, using the provided LabelsFilterNode0
func (t *LabelsFilterNode) MergeLabelsFilterNode0(v LabelsFilterNode0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLabelsFilterNode1 returns the union data inside the LabelsFilterNode as a LabelsFilterNode1
func (t LabelsFilterNode) AsLabelsFilterNode1() (LabelsFilterNode1, error) {
	var body LabelsFilterNode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLabelsFilterNode1 overwrites any union data inside the LabelsFilterNode as the provided LabelsFilterNode1
func (t *LabelsFilterNode) FromLabelsFilterNode1(v LabelsFilterNode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLabelsFilterNode1 performs a merge with any union data inside the LabelsFilterNode, using the provided LabelsFilterNode1
func (t *LabelsFilterNode) MergeLabelsFilterNode1(v LabelsFilterNode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t LabelsFilterNode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LabelsFilterNode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
