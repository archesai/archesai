// Package common provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package common

import (
	"encoding/json"

	"github.com/oapi-codegen/runtime"
)

// Defines values for FilterNode1Operator.
const (
	And FilterNode1Operator = "and"
	Or  FilterNode1Operator = "or"
)

// Defines values for FilterValue5Unit.
const (
	Days   FilterValue5Unit = "days"
	Months FilterValue5Unit = "months"
	Weeks  FilterValue5Unit = "weeks"
	Years  FilterValue5Unit = "years"
)

// Defines values for Operator.
const (
	Eq                Operator = "eq"
	Gt                Operator = "gt"
	Gte               Operator = "gte"
	ILike             Operator = "iLike"
	InArray           Operator = "inArray"
	IsBetween         Operator = "isBetween"
	IsEmpty           Operator = "isEmpty"
	IsNotEmpty        Operator = "isNotEmpty"
	IsRelativeToToday Operator = "isRelativeToToday"
	Lt                Operator = "lt"
	Lte               Operator = "lte"
	Ne                Operator = "ne"
	NotILike          Operator = "notILike"
	NotInArray        Operator = "notInArray"
)

// Defines values for SortOrder.
const (
	Asc  SortOrder = "asc"
	Desc SortOrder = "desc"
)

// FilterCondition A single filter condition with field, operator, and value
type FilterCondition struct {
	Field string `json:"field"`

	// Operator Supported filter operations
	Operator Operator    `json:"operator"`
	Type     interface{} `json:"type"`

	// Value Value for filter conditions (scalar | array | range | relative)
	Value FilterValue `json:"value"`
}

// FilterNode A recursive filter node that can be a condition or group
type FilterNode struct {
	union json.RawMessage
}

// FilterNode1 A logical group of filter conditions or other groups
type FilterNode1 struct {
	Children []FilterNode        `json:"children"`
	Operator FilterNode1Operator `json:"operator"`
	Type     interface{}         `json:"type"`
}

// FilterNode1Operator defines model for FilterNode.1.Operator.
type FilterNode1Operator string

// FilterValue Value for filter conditions (scalar | array | range | relative)
type FilterValue struct {
	union json.RawMessage
}

// FilterValue0 defines model for .
type FilterValue0 = string

// FilterValue1 defines model for .
type FilterValue1 = float32

// FilterValue2 defines model for .
type FilterValue2 = bool

// FilterValue3 defines model for .
type FilterValue3 = []FilterValue_3_Item

// FilterValue30 defines model for .
type FilterValue30 = string

// FilterValue31 defines model for .
type FilterValue31 = float32

// FilterValue32 defines model for .
type FilterValue32 = bool

// FilterValue_3_Item defines model for FilterValue.3.Item.
type FilterValue_3_Item struct {
	union json.RawMessage
}

// FilterValue4 defines model for .
type FilterValue4 struct {
	From FilterValue_4_From `json:"from"`
	To   FilterValue_4_To   `json:"to"`
}

// FilterValue4From0 defines model for .
type FilterValue4From0 = string

// FilterValue4From1 defines model for .
type FilterValue4From1 = float32

// FilterValue_4_From defines model for FilterValue.4.From.
type FilterValue_4_From struct {
	union json.RawMessage
}

// FilterValue4To0 defines model for .
type FilterValue4To0 = string

// FilterValue4To1 defines model for .
type FilterValue4To1 = float32

// FilterValue_4_To defines model for FilterValue.4.To.
type FilterValue_4_To struct {
	union json.RawMessage
}

// FilterValue5 defines model for .
type FilterValue5 struct {
	Unit  FilterValue5Unit `json:"unit"`
	Value float32          `json:"value"`
}

// FilterValue5Unit defines model for FilterValue.5.Unit.
type FilterValue5Unit string

// Operator Supported filter operations
type Operator string

// Page Pagination (page number & size)
type Page struct {
	Number *int `json:"number,omitempty"`
	Size   *int `json:"size,omitempty"`
}

// SearchQuery Complete search query with nested filters, pagination, and sorting
type SearchQuery struct {
	// Filter A recursive filter node that can be a condition or group
	Filter *FilterNode `json:"filter,omitempty"`

	// Page Pagination (page number & size)
	Page *Page   `json:"page,omitempty"`
	Sort *[]Sort `json:"sort,omitempty"`
}

// Sort Sorting configuration with field and order
type Sort struct {
	Field string    `json:"field"`
	Order SortOrder `json:"order"`
}

// SortOrder defines model for Sort.Order.
type SortOrder string

// AsFilterCondition returns the union data inside the FilterNode as a FilterCondition
func (t FilterNode) AsFilterCondition() (FilterCondition, error) {
	var body FilterCondition
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilterCondition overwrites any union data inside the FilterNode as the provided FilterCondition
func (t *FilterNode) FromFilterCondition(v FilterCondition) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilterCondition performs a merge with any union data inside the FilterNode, using the provided FilterCondition
func (t *FilterNode) MergeFilterCondition(v FilterCondition) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFilterNode1 returns the union data inside the FilterNode as a FilterNode1
func (t FilterNode) AsFilterNode1() (FilterNode1, error) {
	var body FilterNode1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilterNode1 overwrites any union data inside the FilterNode as the provided FilterNode1
func (t *FilterNode) FromFilterNode1(v FilterNode1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilterNode1 performs a merge with any union data inside the FilterNode, using the provided FilterNode1
func (t *FilterNode) MergeFilterNode1(v FilterNode1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FilterNode) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FilterNode) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFilterValue0 returns the union data inside the FilterValue as a FilterValue0
func (t FilterValue) AsFilterValue0() (FilterValue0, error) {
	var body FilterValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilterValue0 overwrites any union data inside the FilterValue as the provided FilterValue0
func (t *FilterValue) FromFilterValue0(v FilterValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilterValue0 performs a merge with any union data inside the FilterValue, using the provided FilterValue0
func (t *FilterValue) MergeFilterValue0(v FilterValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFilterValue1 returns the union data inside the FilterValue as a FilterValue1
func (t FilterValue) AsFilterValue1() (FilterValue1, error) {
	var body FilterValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilterValue1 overwrites any union data inside the FilterValue as the provided FilterValue1
func (t *FilterValue) FromFilterValue1(v FilterValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilterValue1 performs a merge with any union data inside the FilterValue, using the provided FilterValue1
func (t *FilterValue) MergeFilterValue1(v FilterValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFilterValue2 returns the union data inside the FilterValue as a FilterValue2
func (t FilterValue) AsFilterValue2() (FilterValue2, error) {
	var body FilterValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilterValue2 overwrites any union data inside the FilterValue as the provided FilterValue2
func (t *FilterValue) FromFilterValue2(v FilterValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilterValue2 performs a merge with any union data inside the FilterValue, using the provided FilterValue2
func (t *FilterValue) MergeFilterValue2(v FilterValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFilterValue3 returns the union data inside the FilterValue as a FilterValue3
func (t FilterValue) AsFilterValue3() (FilterValue3, error) {
	var body FilterValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilterValue3 overwrites any union data inside the FilterValue as the provided FilterValue3
func (t *FilterValue) FromFilterValue3(v FilterValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilterValue3 performs a merge with any union data inside the FilterValue, using the provided FilterValue3
func (t *FilterValue) MergeFilterValue3(v FilterValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFilterValue4 returns the union data inside the FilterValue as a FilterValue4
func (t FilterValue) AsFilterValue4() (FilterValue4, error) {
	var body FilterValue4
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilterValue4 overwrites any union data inside the FilterValue as the provided FilterValue4
func (t *FilterValue) FromFilterValue4(v FilterValue4) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilterValue4 performs a merge with any union data inside the FilterValue, using the provided FilterValue4
func (t *FilterValue) MergeFilterValue4(v FilterValue4) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFilterValue5 returns the union data inside the FilterValue as a FilterValue5
func (t FilterValue) AsFilterValue5() (FilterValue5, error) {
	var body FilterValue5
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilterValue5 overwrites any union data inside the FilterValue as the provided FilterValue5
func (t *FilterValue) FromFilterValue5(v FilterValue5) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilterValue5 performs a merge with any union data inside the FilterValue, using the provided FilterValue5
func (t *FilterValue) MergeFilterValue5(v FilterValue5) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FilterValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FilterValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFilterValue30 returns the union data inside the FilterValue_3_Item as a FilterValue30
func (t FilterValue_3_Item) AsFilterValue30() (FilterValue30, error) {
	var body FilterValue30
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilterValue30 overwrites any union data inside the FilterValue_3_Item as the provided FilterValue30
func (t *FilterValue_3_Item) FromFilterValue30(v FilterValue30) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilterValue30 performs a merge with any union data inside the FilterValue_3_Item, using the provided FilterValue30
func (t *FilterValue_3_Item) MergeFilterValue30(v FilterValue30) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFilterValue31 returns the union data inside the FilterValue_3_Item as a FilterValue31
func (t FilterValue_3_Item) AsFilterValue31() (FilterValue31, error) {
	var body FilterValue31
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilterValue31 overwrites any union data inside the FilterValue_3_Item as the provided FilterValue31
func (t *FilterValue_3_Item) FromFilterValue31(v FilterValue31) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilterValue31 performs a merge with any union data inside the FilterValue_3_Item, using the provided FilterValue31
func (t *FilterValue_3_Item) MergeFilterValue31(v FilterValue31) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFilterValue32 returns the union data inside the FilterValue_3_Item as a FilterValue32
func (t FilterValue_3_Item) AsFilterValue32() (FilterValue32, error) {
	var body FilterValue32
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilterValue32 overwrites any union data inside the FilterValue_3_Item as the provided FilterValue32
func (t *FilterValue_3_Item) FromFilterValue32(v FilterValue32) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilterValue32 performs a merge with any union data inside the FilterValue_3_Item, using the provided FilterValue32
func (t *FilterValue_3_Item) MergeFilterValue32(v FilterValue32) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FilterValue_3_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FilterValue_3_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFilterValue4From0 returns the union data inside the FilterValue_4_From as a FilterValue4From0
func (t FilterValue_4_From) AsFilterValue4From0() (FilterValue4From0, error) {
	var body FilterValue4From0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilterValue4From0 overwrites any union data inside the FilterValue_4_From as the provided FilterValue4From0
func (t *FilterValue_4_From) FromFilterValue4From0(v FilterValue4From0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilterValue4From0 performs a merge with any union data inside the FilterValue_4_From, using the provided FilterValue4From0
func (t *FilterValue_4_From) MergeFilterValue4From0(v FilterValue4From0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFilterValue4From1 returns the union data inside the FilterValue_4_From as a FilterValue4From1
func (t FilterValue_4_From) AsFilterValue4From1() (FilterValue4From1, error) {
	var body FilterValue4From1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilterValue4From1 overwrites any union data inside the FilterValue_4_From as the provided FilterValue4From1
func (t *FilterValue_4_From) FromFilterValue4From1(v FilterValue4From1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilterValue4From1 performs a merge with any union data inside the FilterValue_4_From, using the provided FilterValue4From1
func (t *FilterValue_4_From) MergeFilterValue4From1(v FilterValue4From1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FilterValue_4_From) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FilterValue_4_From) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFilterValue4To0 returns the union data inside the FilterValue_4_To as a FilterValue4To0
func (t FilterValue_4_To) AsFilterValue4To0() (FilterValue4To0, error) {
	var body FilterValue4To0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilterValue4To0 overwrites any union data inside the FilterValue_4_To as the provided FilterValue4To0
func (t *FilterValue_4_To) FromFilterValue4To0(v FilterValue4To0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilterValue4To0 performs a merge with any union data inside the FilterValue_4_To, using the provided FilterValue4To0
func (t *FilterValue_4_To) MergeFilterValue4To0(v FilterValue4To0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsFilterValue4To1 returns the union data inside the FilterValue_4_To as a FilterValue4To1
func (t FilterValue_4_To) AsFilterValue4To1() (FilterValue4To1, error) {
	var body FilterValue4To1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFilterValue4To1 overwrites any union data inside the FilterValue_4_To as the provided FilterValue4To1
func (t *FilterValue_4_To) FromFilterValue4To1(v FilterValue4To1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFilterValue4To1 performs a merge with any union data inside the FilterValue_4_To, using the provided FilterValue4To1
func (t *FilterValue_4_To) MergeFilterValue4To1(v FilterValue4To1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t FilterValue_4_To) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *FilterValue_4_To) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
