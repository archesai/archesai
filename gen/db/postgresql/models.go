// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package postgresql

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

type PlanType string

const (
	PlanTypeBASIC     PlanType = "BASIC"
	PlanTypeFREE      PlanType = "FREE"
	PlanTypePREMIUM   PlanType = "PREMIUM"
	PlanTypeSTANDARD  PlanType = "STANDARD"
	PlanTypeUNLIMITED PlanType = "UNLIMITED"
)

func (e *PlanType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PlanType(s)
	case string:
		*e = PlanType(s)
	default:
		return fmt.Errorf("unsupported scan type for PlanType: %T", src)
	}
	return nil
}

type NullPlanType struct {
	PlanType PlanType `json:"plan_type"`
	Valid    bool     `json:"valid"` // Valid is true if PlanType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPlanType) Scan(value interface{}) error {
	if value == nil {
		ns.PlanType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PlanType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPlanType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PlanType), nil
}

func (e PlanType) Valid() bool {
	switch e {
	case PlanTypeBASIC,
		PlanTypeFREE,
		PlanTypePREMIUM,
		PlanTypeSTANDARD,
		PlanTypeUNLIMITED:
		return true
	}
	return false
}

func AllPlanTypeValues() []PlanType {
	return []PlanType{
		PlanTypeBASIC,
		PlanTypeFREE,
		PlanTypePREMIUM,
		PlanTypeSTANDARD,
		PlanTypeUNLIMITED,
	}
}

type Role string

const (
	RoleAdmin  Role = "admin"
	RoleOwner  Role = "owner"
	RoleMember Role = "member"
)

func (e *Role) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Role(s)
	case string:
		*e = Role(s)
	default:
		return fmt.Errorf("unsupported scan type for Role: %T", src)
	}
	return nil
}

type NullRole struct {
	Role  Role `json:"role"`
	Valid bool `json:"valid"` // Valid is true if Role is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRole) Scan(value interface{}) error {
	if value == nil {
		ns.Role, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Role.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Role), nil
}

func (e Role) Valid() bool {
	switch e {
	case RoleAdmin,
		RoleOwner,
		RoleMember:
		return true
	}
	return false
}

func AllRoleValues() []Role {
	return []Role{
		RoleAdmin,
		RoleOwner,
		RoleMember,
	}
}

type RunStatus string

const (
	RunStatusCOMPLETED  RunStatus = "COMPLETED"
	RunStatusFAILED     RunStatus = "FAILED"
	RunStatusPROCESSING RunStatus = "PROCESSING"
	RunStatusQUEUED     RunStatus = "QUEUED"
)

func (e *RunStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RunStatus(s)
	case string:
		*e = RunStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for RunStatus: %T", src)
	}
	return nil
}

type NullRunStatus struct {
	RunStatus RunStatus `json:"run_status"`
	Valid     bool      `json:"valid"` // Valid is true if RunStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRunStatus) Scan(value interface{}) error {
	if value == nil {
		ns.RunStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RunStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRunStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RunStatus), nil
}

func (e RunStatus) Valid() bool {
	switch e {
	case RunStatusCOMPLETED,
		RunStatusFAILED,
		RunStatusPROCESSING,
		RunStatusQUEUED:
		return true
	}
	return false
}

func AllRunStatusValues() []RunStatus {
	return []RunStatus{
		RunStatusCOMPLETED,
		RunStatusFAILED,
		RunStatusPROCESSING,
		RunStatusQUEUED,
	}
}

type Account struct {
	ID                    string             `json:"id"`
	CreatedAt             time.Time          `json:"created_at"`
	UpdatedAt             time.Time          `json:"updated_at"`
	AccessToken           *string            `json:"access_token"`
	AccessTokenExpiresAt  pgtype.Timestamptz `json:"access_token_expires_at"`
	AccountID             string             `json:"account_id"`
	IDToken               *string            `json:"id_token"`
	Password              *string            `json:"password"`
	ProviderID            string             `json:"provider_id"`
	RefreshToken          *string            `json:"refresh_token"`
	RefreshTokenExpiresAt pgtype.Timestamptz `json:"refresh_token_expires_at"`
	Scope                 *string            `json:"scope"`
	UserID                string             `json:"user_id"`
}

type ApiToken struct {
	ID                  string             `json:"id"`
	CreatedAt           time.Time          `json:"created_at"`
	UpdatedAt           time.Time          `json:"updated_at"`
	Enabled             bool               `json:"enabled"`
	ExpiresAt           pgtype.Timestamptz `json:"expires_at"`
	Key                 string             `json:"key"`
	LastRefill          pgtype.Timestamptz `json:"last_refill"`
	LastRequest         pgtype.Timestamptz `json:"last_request"`
	Metadata            []byte             `json:"metadata"`
	Name                *string            `json:"name"`
	Permissions         *string            `json:"permissions"`
	Prefix              *string            `json:"prefix"`
	RateLimitEnabled    bool               `json:"rate_limit_enabled"`
	RateLimitMax        pgtype.Int4        `json:"rate_limit_max"`
	RateLimitTimeWindow pgtype.Int4        `json:"rate_limit_time_window"`
	RefillAmount        pgtype.Int4        `json:"refill_amount"`
	RefillInterval      pgtype.Int4        `json:"refill_interval"`
	Remaining           pgtype.Int4        `json:"remaining"`
	RequestCount        int32              `json:"request_count"`
	Start               *string            `json:"start"`
	UserID              string             `json:"user_id"`
}

type Artifact struct {
	ID             string    `json:"id"`
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
	Credits        int32     `json:"credits"`
	Description    *string   `json:"description"`
	MimeType       string    `json:"mime_type"`
	Name           *string   `json:"name"`
	OrganizationID string    `json:"organization_id"`
	PreviewImage   *string   `json:"preview_image"`
	ProducerID     *string   `json:"producer_id"`
	Text           *string   `json:"text"`
	Url            *string   `json:"url"`
}

type Invitation struct {
	ID             string    `json:"id"`
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
	Email          string    `json:"email"`
	ExpiresAt      time.Time `json:"expires_at"`
	InviterID      string    `json:"inviter_id"`
	OrganizationID string    `json:"organization_id"`
	Role           Role      `json:"role"`
	Status         string    `json:"status"`
}

type Label struct {
	ID             string    `json:"id"`
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
	Name           string    `json:"name"`
	OrganizationID string    `json:"organization_id"`
}

type LabelToArtifact struct {
	LabelID    string `json:"label_id"`
	ArtifactID string `json:"artifact_id"`
}

type Member struct {
	ID             string    `json:"id"`
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
	OrganizationID string    `json:"organization_id"`
	Role           Role      `json:"role"`
	UserID         string    `json:"user_id"`
}

type Organization struct {
	ID               string    `json:"id"`
	CreatedAt        time.Time `json:"created_at"`
	UpdatedAt        time.Time `json:"updated_at"`
	BillingEmail     *string   `json:"billing_email"`
	Credits          int32     `json:"credits"`
	Logo             *string   `json:"logo"`
	Metadata         *string   `json:"metadata"`
	Name             string    `json:"name"`
	Plan             PlanType  `json:"plan"`
	StripeCustomerID *string   `json:"stripe_customer_id"`
}

type Pipeline struct {
	ID             string    `json:"id"`
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
	Description    *string   `json:"description"`
	Name           *string   `json:"name"`
	OrganizationID string    `json:"organization_id"`
}

type PipelineStep struct {
	ID         string    `json:"id"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
	PipelineID string    `json:"pipeline_id"`
	ToolID     string    `json:"tool_id"`
}

type PipelineStepToDependency struct {
	PipelineStepID string `json:"pipeline_step_id"`
	PrerequisiteID string `json:"prerequisite_id"`
}

type Run struct {
	ID             string             `json:"id"`
	CreatedAt      time.Time          `json:"created_at"`
	UpdatedAt      time.Time          `json:"updated_at"`
	CompletedAt    pgtype.Timestamptz `json:"completed_at"`
	Error          *string            `json:"error"`
	OrganizationID string             `json:"organization_id"`
	PipelineID     *string            `json:"pipeline_id"`
	Progress       float64            `json:"progress"`
	StartedAt      pgtype.Timestamptz `json:"started_at"`
	Status         RunStatus          `json:"status"`
	ToolID         string             `json:"tool_id"`
}

type RunToArtifact struct {
	RunID      string `json:"run_id"`
	ArtifactID string `json:"artifact_id"`
}

type Session struct {
	ID                   string    `json:"id"`
	CreatedAt            time.Time `json:"created_at"`
	UpdatedAt            time.Time `json:"updated_at"`
	ActiveOrganizationID *string   `json:"active_organization_id"`
	ExpiresAt            time.Time `json:"expires_at"`
	IpAddress            *string   `json:"ip_address"`
	Token                string    `json:"token"`
	UserAgent            *string   `json:"user_agent"`
	UserID               string    `json:"user_id"`
}

type Tool struct {
	ID             string    `json:"id"`
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
	Description    string    `json:"description"`
	InputMimeType  string    `json:"input_mime_type"`
	Name           string    `json:"name"`
	OrganizationID string    `json:"organization_id"`
	OutputMimeType string    `json:"output_mime_type"`
}

type User struct {
	ID            string    `json:"id"`
	CreatedAt     time.Time `json:"created_at"`
	UpdatedAt     time.Time `json:"updated_at"`
	Email         string    `json:"email"`
	EmailVerified bool      `json:"email_verified"`
	Image         *string   `json:"image"`
	Name          string    `json:"name"`
}

type VerificationToken struct {
	ID         string    `json:"id"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
	ExpiresAt  time.Time `json:"expires_at"`
	Identifier string    `json:"identifier"`
	Value      string    `json:"value"`
}
