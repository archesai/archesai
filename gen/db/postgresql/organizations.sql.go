// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: organizations.sql

package postgresql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO organization (
    name,
    billing_email,
    plan,
    credits,
    logo,
    metadata,
    stripe_customer_id
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, created_at, updated_at, billing_email, credits, logo, metadata, name, plan, stripe_customer_id
`

type CreateOrganizationParams struct {
	Name             string   `json:"name"`
	BillingEmail     *string  `json:"billing_email"`
	Plan             PlanType `json:"plan"`
	Credits          int32    `json:"credits"`
	Logo             *string  `json:"logo"`
	Metadata         *string  `json:"metadata"`
	StripeCustomerID *string  `json:"stripe_customer_id"`
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, createOrganization,
		arg.Name,
		arg.BillingEmail,
		arg.Plan,
		arg.Credits,
		arg.Logo,
		arg.Metadata,
		arg.StripeCustomerID,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BillingEmail,
		&i.Credits,
		&i.Logo,
		&i.Metadata,
		&i.Name,
		&i.Plan,
		&i.StripeCustomerID,
	)
	return i, err
}

const deleteOrganization = `-- name: DeleteOrganization :exec
DELETE FROM organization
WHERE id = $1
`

func (q *Queries) DeleteOrganization(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteOrganization, id)
	return err
}

const getOrganization = `-- name: GetOrganization :one
SELECT id, created_at, updated_at, billing_email, credits, logo, metadata, name, plan, stripe_customer_id FROM organization
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetOrganization(ctx context.Context, id string) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrganization, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BillingEmail,
		&i.Credits,
		&i.Logo,
		&i.Metadata,
		&i.Name,
		&i.Plan,
		&i.StripeCustomerID,
	)
	return i, err
}

const listOrganizations = `-- name: ListOrganizations :many
SELECT id, created_at, updated_at, billing_email, credits, logo, metadata, name, plan, stripe_customer_id FROM organization
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListOrganizationsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrganizations(ctx context.Context, arg ListOrganizationsParams) ([]Organization, error) {
	rows, err := q.db.Query(ctx, listOrganizations, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.BillingEmail,
			&i.Credits,
			&i.Logo,
			&i.Metadata,
			&i.Name,
			&i.Plan,
			&i.StripeCustomerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrganization = `-- name: UpdateOrganization :one
UPDATE organization
SET 
    name = COALESCE($2, name),
    billing_email = COALESCE($3, billing_email),
    plan = COALESCE($4, plan),
    credits = COALESCE($5, credits),
    logo = COALESCE($6, logo),
    metadata = COALESCE($7, metadata),
    stripe_customer_id = COALESCE($8, stripe_customer_id)
WHERE id = $1
RETURNING id, created_at, updated_at, billing_email, credits, logo, metadata, name, plan, stripe_customer_id
`

type UpdateOrganizationParams struct {
	ID               string       `json:"id"`
	Name             *string      `json:"name"`
	BillingEmail     *string      `json:"billing_email"`
	Plan             NullPlanType `json:"plan"`
	Credits          pgtype.Int4  `json:"credits"`
	Logo             *string      `json:"logo"`
	Metadata         *string      `json:"metadata"`
	StripeCustomerID *string      `json:"stripe_customer_id"`
}

func (q *Queries) UpdateOrganization(ctx context.Context, arg UpdateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, updateOrganization,
		arg.ID,
		arg.Name,
		arg.BillingEmail,
		arg.Plan,
		arg.Credits,
		arg.Logo,
		arg.Metadata,
		arg.StripeCustomerID,
	)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.BillingEmail,
		&i.Credits,
		&i.Logo,
		&i.Metadata,
		&i.Name,
		&i.Plan,
		&i.StripeCustomerID,
	)
	return i, err
}
