/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type $defs = Record<string, never>
export interface components {
  headers: never
  parameters: never
  pathItems: never
  requestBodies: never
  responses: never
  schemas: {
    AggregateFieldQuery: {
      /** @description Field to aggregate by */
      field: string
    }
    AggregateFieldResult: {
      /** @description Field to aggregate by */
      field: string
      /**
       * @description The value of the aggregate
       * @example 10
       */
      value: number
    }
    ConfirmationTokenDto: {
      /**
       * @description The token used to verify your authorization event. This token is generated by the server and sent to the user's email.
       * @example supersecre
       */
      token: string
    }
    ConfirmationTokenWithNewPasswordDto: {
      /**
       * @description The new password
       * @example newPassword
       */
      newPassword: string
      /**
       * @description The token used to verify your authorization event. This token is generated by the server and sent to the user's email.
       * @example supersecre
       */
      token: string
    }
    CreateApiTokenDto: Record<string, never>
    CreateOrganizationDto: {
      /**
       * @description The billing email to use for the organization
       * @example example@test.com
       */
      billingEmail: string
      /**
       * @description The name of the organization to create
       * @example organization-name
       */
      orgname: string
    }
    EmailRequestDto: {
      /**
       * @description The e-mail to send the confirmation token to
       * @example user@archesai.com
       */
      email: string
    }
    FieldFieldQuery: {
      /** @description Field to filter by */
      field: string
      /**
       * @description Operator to use for filtering
       * @enum {string}
       */
      operator?: 'contains' | 'endsWith' | 'equals' | 'every' | 'in' | 'none' | 'not' | 'some' | 'startsWith'
      /** @description Value to filter for */
      value: string | string[]
    }
    LoginDto: {
      /**
       * @description The user's e-mail
       * @example example@archesai.com
       */
      email: string
      /**
       * @description The password to create and/or login to an account
       * @example password
       */
      password: string
    }
    Metadata: {
      /**
       * @description The number of results per page
       * @example 10
       */
      limit: number
      /**
       * @description The current page
       * @example 1
       */
      offset: number
      /**
       * @description The total number of results
       * @example 100
       */
      totalResults: number
    }
    PathDto: {
      /**
       * @description Whether or not this path points to a directory
       * @default false
       * @example false
       */
      isDir: boolean
      /**
       * @description The path that the file should upload to
       * @example /location/in/storage
       */
      path: string
    }
    ReadUrlDto: {
      /**
       * @description A read-only url that you can use to download the file from secure storage
       * @example www.example.com?token=read-token
       */
      read: string
    }
    RegisterDto: {
      /**
       * @description The user's e-mail
       * @example example@archesai.com
       */
      email: string
      /**
       * @description The password to create and/or login to an account
       * @example password
       */
      password: string
    }
    StorageItemDto: {
      /**
       * Format: date-time
       * @description Whether or not this is a directory
       * @example true
       */
      createdAt: string
      /**
       * @description The id of the storage item
       * @example 14
       */
      id: string
      /**
       * @description Whether or not this is a directory
       * @example true
       */
      isDir: boolean
      /**
       * @description The path that the file is located in
       * @example /location/in/storage
       */
      name: string
      /**
       * @description The size of the item in bytes
       * @example 12341234
       */
      size: number
    }
    UpdateOrganizationDto: {
      /**
       * @description The billing email to use for the organization
       * @example example@test.com
       */
      billingEmail: string
    }
    UpdateUserDto: {
      /**
       * @description The user's default organization name
       * @example my-organization
       */
      defaultOrgname?: string
      /**
       * @description The user's first name
       * @example John
       */
      firstName?: string
      /**
       * @description The user's last name
       * @example Smith
       */
      lastName?: string
    }
    WriteUrlDto: {
      /**
       * @description A write-only url that you can use to upload a file to secure storage
       * @example www.example.com?token=write-token
       */
      write: string
    }
  }
}
export interface operations {
  ApiTokensController_create: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        orgname: string
      }
      query?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateApiTokenDto']
      }
    }
    responses: {
      201: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  ApiTokensController_findAll: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        orgname: string
      }
      query?: {
        /** @description Aggregates to collect for the search results */
        aggregates?: unknown[]
        /** @description Filter fields and values */
        filters?: unknown[]
        /** @description The limit of the number of results returned */
        limit?: number
      }
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  ApiTokensController_findOne: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        id: string
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  ApiTokensController_remove: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        id: string
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  ApiTokensController_update: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        id: string
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  AuthController_emailChangeConfirm: {
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ConfirmationTokenDto']
      }
    }
    responses: {
      201: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  AuthController_emailChangeRequest: {
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['EmailRequestDto']
      }
    }
    responses: {
      201: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  AuthController_emailVerificationConfirm: {
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ConfirmationTokenDto']
      }
    }
    responses: {
      201: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  AuthController_emailVerificationRequest: {
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    requestBody?: never
    responses: {
      201: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  AuthController_login: {
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['LoginDto']
      }
    }
    responses: {
      201: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  AuthController_logout: {
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    requestBody?: never
    responses: {
      201: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  AuthController_passwordResetConfirm: {
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ConfirmationTokenWithNewPasswordDto']
      }
    }
    responses: {
      201: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  AuthController_passwordResetRequest: {
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['EmailRequestDto']
      }
    }
    responses: {
      201: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  AuthController_refreshToken: {
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    requestBody?: never
    responses: {
      201: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  AuthController_register: {
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['RegisterDto']
      }
    }
    responses: {
      201: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  BillingController_cancelSubscriptionPlan: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      201: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  BillingController_changeSubscriptionPlan: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        orgname: string
      }
      query: {
        planId: string
      }
    }
    requestBody?: never
    responses: {
      201: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  BillingController_createBillingPortal: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      201: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  BillingController_createCheckoutSession: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        orgname: string
      }
      query: {
        planId: string
      }
    }
    requestBody?: never
    responses: {
      201: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  BillingController_getPlans: {
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  BillingController_listPaymentMethods: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  BillingController_removePaymentMethod: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        orgname: string
        paymentMethodId: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  ContentController_create: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      201: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  ContentController_findAll: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        orgname: string
      }
      query?: {
        /** @description Aggregates to collect for the search results */
        aggregates?: unknown[]
        /** @description Filter fields and values */
        filters?: unknown[]
        /** @description The limit of the number of results returned */
        limit?: number
      }
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  ContentController_findOne: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        id: string
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  ContentController_remove: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        id: string
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  ContentController_update: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        id: string
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  LabelsController_create: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      201: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  LabelsController_findAll: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        orgname: string
      }
      query?: {
        /** @description Aggregates to collect for the search results */
        aggregates?: unknown[]
        /** @description Filter fields and values */
        filters?: unknown[]
        /** @description The limit of the number of results returned */
        limit?: number
      }
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  LabelsController_findOne: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        id: string
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  LabelsController_remove: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        id: string
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  LabelsController_update: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        id: string
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  MembersController_create: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      201: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  MembersController_findAll: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        orgname: string
      }
      query?: {
        /** @description Aggregates to collect for the search results */
        aggregates?: unknown[]
        /** @description Filter fields and values */
        filters?: unknown[]
        /** @description The limit of the number of results returned */
        limit?: number
      }
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  MembersController_findOne: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        id: string
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  MembersController_join: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      201: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  MembersController_remove: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        id: string
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  MembersController_update: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        id: string
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  OrganizationsController_create: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        orgname: string
      }
      query?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateOrganizationDto']
      }
    }
    responses: {
      201: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  OrganizationsController_findAll: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        orgname: string
      }
      query?: {
        /** @description Aggregates to collect for the search results */
        aggregates?: unknown[]
        /** @description Filter fields and values */
        filters?: unknown[]
        /** @description The limit of the number of results returned */
        limit?: number
      }
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  OrganizationsController_findOne: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        id: string
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  OrganizationsController_remove: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        id: string
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  OrganizationsController_update: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        id: string
        orgname: string
      }
      query?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateOrganizationDto']
      }
    }
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  PipelinesController_create: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      201: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  PipelinesController_findAll: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        orgname: string
      }
      query?: {
        /** @description Aggregates to collect for the search results */
        aggregates?: unknown[]
        /** @description Filter fields and values */
        filters?: unknown[]
        /** @description The limit of the number of results returned */
        limit?: number
      }
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  PipelinesController_findOne: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        id: string
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  PipelinesController_remove: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        id: string
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  PipelinesController_update: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        id: string
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  RunsController_create: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      201: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  RunsController_findAll: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        orgname: string
      }
      query?: {
        /** @description Aggregates to collect for the search results */
        aggregates?: unknown[]
        /** @description Filter fields and values */
        filters?: unknown[]
        /** @description The limit of the number of results returned */
        limit?: number
      }
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  RunsController_findOne: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        id: string
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  RunsController_remove: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        id: string
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  RunsController_update: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        id: string
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  StorageController_delete: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        orgname: string
      }
      query: {
        path: string
      }
    }
    requestBody?: never
    responses: {
      /** @description Path was successfully deleted */
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
      /** @description Unauthorized */
      401: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
      /** @description Forbidden */
      403: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
      /** @description Not Found */
      404: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  StorageController_getReadUrl: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        orgname: string
      }
      query?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PathDto']
      }
    }
    responses: {
      /** @description Read  url was successfully created */
      201: {
        content: {
          'application/json': components['schemas']['ReadUrlDto']
        }
        headers: {
          [name: string]: unknown
        }
      }
      /** @description Unauthorized */
      401: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
      /** @description Forbidden */
      403: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
      /** @description Not Found */
      404: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  StorageController_getWriteUrl: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        orgname: string
      }
      query?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PathDto']
      }
    }
    responses: {
      /** @description Write urls was successfully created */
      201: {
        content: {
          'application/json': components['schemas']['WriteUrlDto']
        }
        headers: {
          [name: string]: unknown
        }
      }
      /** @description Unauthorized */
      401: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
      /** @description Forbidden */
      403: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
      /** @description Not Found */
      404: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  StorageController_listDirectory: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        orgname: string
      }
      query: {
        path: string
      }
    }
    requestBody?: never
    responses: {
      /** @description Path was successfully retrieved */
      200: {
        content: {
          'application/json': components['schemas']['StorageItemDto'][]
        }
        headers: {
          [name: string]: unknown
        }
      }
      /** @description Unauthorized */
      401: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
      /** @description Forbidden */
      403: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
      /** @description Not Found */
      404: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  ToolsController_create: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      201: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  ToolsController_findAll: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        orgname: string
      }
      query?: {
        /** @description Aggregates to collect for the search results */
        aggregates?: unknown[]
        /** @description Filter fields and values */
        filters?: unknown[]
        /** @description The limit of the number of results returned */
        limit?: number
      }
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  ToolsController_findOne: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        id: string
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  ToolsController_remove: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        id: string
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  ToolsController_update: {
    parameters: {
      cookie?: never
      header?: never
      path: {
        id: string
        orgname: string
      }
      query?: never
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  UsersController_deactivate: {
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    requestBody?: never
    responses: {
      201: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  UsersController_findOne: {
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    requestBody?: never
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
  UsersController_update: {
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['UpdateUserDto']
      }
    }
    responses: {
      200: {
        content?: never
        headers: {
          [name: string]: unknown
        }
      }
    }
  }
}
export interface paths {
  '/auth/email-change/confirm': {
    delete?: never
    get?: never
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post: operations['AuthController_emailChangeConfirm']
    put?: never
    trace?: never
  }
  '/auth/email-change/request': {
    delete?: never
    get?: never
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post: operations['AuthController_emailChangeRequest']
    put?: never
    trace?: never
  }
  '/auth/email-verification/confirm': {
    delete?: never
    get?: never
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post: operations['AuthController_emailVerificationConfirm']
    put?: never
    trace?: never
  }
  '/auth/email-verification/request': {
    delete?: never
    get?: never
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post: operations['AuthController_emailVerificationRequest']
    put?: never
    trace?: never
  }
  '/auth/login': {
    delete?: never
    get?: never
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post: operations['AuthController_login']
    put?: never
    trace?: never
  }
  '/auth/logout': {
    delete?: never
    get?: never
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post: operations['AuthController_logout']
    put?: never
    trace?: never
  }
  '/auth/password-reset/confirm': {
    delete?: never
    get?: never
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post: operations['AuthController_passwordResetConfirm']
    put?: never
    trace?: never
  }
  '/auth/password-reset/request': {
    delete?: never
    get?: never
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post: operations['AuthController_passwordResetRequest']
    put?: never
    trace?: never
  }
  '/auth/refresh-token': {
    delete?: never
    get?: never
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post: operations['AuthController_refreshToken']
    put?: never
    trace?: never
  }
  '/auth/register': {
    delete?: never
    get?: never
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post: operations['AuthController_register']
    put?: never
    trace?: never
  }
  '/organizations': {
    delete?: never
    get: operations['OrganizationsController_findAll']
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post: operations['OrganizationsController_create']
    put?: never
    trace?: never
  }
  '/organizations/{id}': {
    delete: operations['OrganizationsController_remove']
    get: operations['OrganizationsController_findOne']
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post?: never
    put?: never
    trace?: never
  }
  '/organizations/{orgname}': {
    delete?: never
    get?: never
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch: operations['OrganizationsController_update']
    post?: never
    put?: never
    trace?: never
  }
  '/organizations/{orgname}/api-tokens': {
    delete?: never
    get: operations['ApiTokensController_findAll']
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post: operations['ApiTokensController_create']
    put?: never
    trace?: never
  }
  '/organizations/{orgname}/api-tokens/{id}': {
    delete: operations['ApiTokensController_remove']
    get: operations['ApiTokensController_findOne']
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch: operations['ApiTokensController_update']
    post?: never
    put?: never
    trace?: never
  }
  '/organizations/{orgname}/billing/checkout': {
    delete?: never
    get?: never
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post: operations['BillingController_createCheckoutSession']
    put?: never
    trace?: never
  }
  '/organizations/{orgname}/billing/payment-methods': {
    delete?: never
    get: operations['BillingController_listPaymentMethods']
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post?: never
    put?: never
    trace?: never
  }
  '/organizations/{orgname}/billing/payment-methods/{paymentMethodId}': {
    delete: operations['BillingController_removePaymentMethod']
    get?: never
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post?: never
    put?: never
    trace?: never
  }
  '/organizations/{orgname}/billing/portal': {
    delete?: never
    get?: never
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post: operations['BillingController_createBillingPortal']
    put?: never
    trace?: never
  }
  '/organizations/{orgname}/billing/subscription': {
    delete?: never
    get?: never
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post: operations['BillingController_changeSubscriptionPlan']
    put?: never
    trace?: never
  }
  '/organizations/{orgname}/billing/subscription/cancel': {
    delete?: never
    get?: never
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post: operations['BillingController_cancelSubscriptionPlan']
    put?: never
    trace?: never
  }
  '/organizations/{orgname}/content': {
    delete?: never
    get: operations['ContentController_findAll']
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post: operations['ContentController_create']
    put?: never
    trace?: never
  }
  '/organizations/{orgname}/content/{id}': {
    delete: operations['ContentController_remove']
    get: operations['ContentController_findOne']
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch: operations['ContentController_update']
    post?: never
    put?: never
    trace?: never
  }
  '/organizations/{orgname}/labels': {
    delete?: never
    get: operations['LabelsController_findAll']
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post: operations['LabelsController_create']
    put?: never
    trace?: never
  }
  '/organizations/{orgname}/labels/{id}': {
    delete: operations['LabelsController_remove']
    get: operations['LabelsController_findOne']
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch: operations['LabelsController_update']
    post?: never
    put?: never
    trace?: never
  }
  '/organizations/{orgname}/members': {
    delete?: never
    get: operations['MembersController_findAll']
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post: operations['MembersController_create']
    put?: never
    trace?: never
  }
  '/organizations/{orgname}/members/join': {
    delete?: never
    get?: never
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post: operations['MembersController_join']
    put?: never
    trace?: never
  }
  '/organizations/{orgname}/members/{id}': {
    delete: operations['MembersController_remove']
    get: operations['MembersController_findOne']
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch: operations['MembersController_update']
    post?: never
    put?: never
    trace?: never
  }
  '/organizations/{orgname}/pipelines': {
    delete?: never
    get: operations['PipelinesController_findAll']
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post: operations['PipelinesController_create']
    put?: never
    trace?: never
  }
  '/organizations/{orgname}/pipelines/{id}': {
    delete: operations['PipelinesController_remove']
    get: operations['PipelinesController_findOne']
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch: operations['PipelinesController_update']
    post?: never
    put?: never
    trace?: never
  }
  '/organizations/{orgname}/runs': {
    delete?: never
    get: operations['RunsController_findAll']
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post: operations['RunsController_create']
    put?: never
    trace?: never
  }
  '/organizations/{orgname}/runs/{id}': {
    delete: operations['RunsController_remove']
    get: operations['RunsController_findOne']
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch: operations['RunsController_update']
    post?: never
    put?: never
    trace?: never
  }
  '/organizations/{orgname}/storage/delete': {
    /**
     * Delete file or directory
     * @description This endpoint will delete a file or directory in the organization's secure storage at the specified path. ADMIN ONLY.
     */
    delete: operations['StorageController_delete']
    get?: never
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post?: never
    put?: never
    trace?: never
  }
  '/organizations/{orgname}/storage/items': {
    delete?: never
    /**
     * Show directory
     * @description This endpoint will return a list of files and directories in the organization's secure storage at the specified path. ADMIN ONLY.
     */
    get: operations['StorageController_listDirectory']
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post?: never
    put?: never
    trace?: never
  }
  '/organizations/{orgname}/storage/read': {
    delete?: never
    get?: never
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    /**
     * Read file
     * @description This endpoint will return a url for reading a file in the organization's secure storage. It will be valid for 15 minutes. ADMIN ONLY.
     */
    post: operations['StorageController_getReadUrl']
    put?: never
    trace?: never
  }
  '/organizations/{orgname}/storage/write': {
    delete?: never
    get?: never
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    /**
     * Write file
     * @description This endpoint will return a url for writing to a file location in the organization's secure storage. You must write your file to the url returned by this endpoint. If you use is isDir param, it will create a directory instead of a file and you do not need to write to the url. ADMIN ONLY.
     */
    post: operations['StorageController_getWriteUrl']
    put?: never
    trace?: never
  }
  '/organizations/{orgname}/tools': {
    delete?: never
    get: operations['ToolsController_findAll']
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post: operations['ToolsController_create']
    put?: never
    trace?: never
  }
  '/organizations/{orgname}/tools/{id}': {
    delete: operations['ToolsController_remove']
    get: operations['ToolsController_findOne']
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch: operations['ToolsController_update']
    post?: never
    put?: never
    trace?: never
  }
  '/plans': {
    delete?: never
    get: operations['BillingController_getPlans']
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post?: never
    put?: never
    trace?: never
  }
  '/user': {
    delete?: never
    get: operations['UsersController_findOne']
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch: operations['UsersController_update']
    post?: never
    put?: never
    trace?: never
  }
  '/user/deactivate': {
    delete?: never
    get?: never
    head?: never
    options?: never
    parameters: {
      cookie?: never
      header?: never
      path?: never
      query?: never
    }
    patch?: never
    post: operations['UsersController_deactivate']
    put?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
