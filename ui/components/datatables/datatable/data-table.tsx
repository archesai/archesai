'use client'

import { DataTablePagination } from '@/components/datatables/datatable/data-table-pagination'
import { DataTableToolbar } from '@/components/datatables/datatable/data-table-toolbar'
import { DeleteItems } from '@/components/datatables/datatable/delete-items'
import { GridView } from '@/components/datatables/datatable/grid-view'
import { TableView } from '@/components/datatables/datatable/table-view'
import { Button } from '@/components/ui/button'
import { Checkbox } from '@/components/ui/checkbox'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogTitle
} from '@/components/ui/dialog'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger
} from '@/components/ui/dropdown-menu'
import { FieldFilter } from '@/generated/archesApiSchemas'
import { useDebounce } from '@/hooks/use-debounce'
import { useFilterItems } from '@/hooks/useFilterItems'
import { useSelectItems } from '@/hooks/useSelectItems'
import { useToggleView } from '@/hooks/useToggleView'
import { DotsHorizontalIcon } from '@radix-ui/react-icons'
import * as VisuallyHidden from '@radix-ui/react-visually-hidden'
import {
  AccessorKeyColumnDef,
  ColumnDef,
  ColumnFiltersState,
  getCoreRowModel,
  SortingState,
  useReactTable,
  VisibilityState
} from '@tanstack/react-table'
import { endOfDay } from 'date-fns'
import { type JSX, useEffect, useMemo, useState } from 'react'
import { DataTableColumnHeader } from './data-table-column-header'
import { toSentenceCase } from '@/lib/utils'

export interface BaseItem {
  id: string
  name?: string
}

interface DataTableProps<
  TItem extends BaseItem,
  TFindAllPathParams,
  TDeleteVariables
> {
  columns: AccessorKeyColumnDef<TItem, TDeleteVariables>[]
  content?: (item: TItem) => JSX.Element
  createForm?: React.ReactNode
  customFilters?: FieldFilter[]
  dataIcon: JSX.Element
  defaultView?: 'grid' | 'table'
  filterField?: string
  findAllPathParams: TFindAllPathParams
  findAllQueryParams?: object
  getDeleteVariablesFromItem?: (item: TItem) => TDeleteVariables
  getEditFormFromItem?: (item: TItem) => React.ReactNode
  handleSelect: (item: TItem) => void
  hoverContent?: (item: TItem) => JSX.Element
  itemType: string
  minimal?: boolean
  readonly?: boolean
  useFindAll: (s: any) => {
    data:
      | undefined
      | {
          metadata: {
            limit: number
            offset: number
            totalResults: number
          }
          results: TItem[]
        }
    isLoading: boolean
    isFetched: boolean
    isPlaceholderData: boolean
  }
  useRemove: () => {
    mutateAsync: (vars: TDeleteVariables) => Promise<void>
  }
}

export function DataTable<
  TItem extends BaseItem,
  TFindAllPathParams,
  TDeleteVariables
>({
  columns,
  content,
  createForm,
  customFilters,
  dataIcon: DataIcon,
  defaultView = 'table',
  filterField = 'name',
  findAllPathParams,
  findAllQueryParams,
  getDeleteVariablesFromItem,
  getEditFormFromItem,
  handleSelect,
  hoverContent,
  itemType,
  minimal,
  readonly = false,
  useFindAll,
  useRemove
}: DataTableProps<TItem, TFindAllPathParams, TDeleteVariables>) {
  const {
    limit,
    page,
    query,
    range,
    setSortBy,
    setSortDirection,
    sortBy,
    sortDirection
  } = useFilterItems()

  // Use the useDebounce hook to debounce the query
  const debouncedQuery = useDebounce(query, 200) // 500ms delay

  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({})
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([])
  const [sorting, setSorting] = useState<SortingState>([
    {
      desc: true,
      id: 'createdAt'
    }
  ])
  const [formOpen, setFormOpen] = useState(false)
  const [finalForm, setFinalForm] = useState<React.ReactNode | undefined>(
    createForm
  )

  useEffect(() => {
    setSortDirection(sorting[0]?.desc ? 'desc' : 'asc')
    setSortBy(sorting[0]?.id || 'createdAt')
  }, [sorting, setSortDirection, setSortBy])

  const { setView, view } = useToggleView()

  useEffect(() => {
    if (defaultView) {
      setView(defaultView)
    }
  }, [defaultView, setView])

  const { data, isFetched } = useFindAll({
    pathParams: findAllPathParams,
    queryParams: {
      ...(range?.to
        ? { endDate: range?.to && endOfDay(range.to).toISOString() }
        : {}),
      ...(range?.from
        ? { startDate: range?.from && range.from.toISOString() }
        : {}),
      filters: JSON.stringify([
        {
          field: filterField,
          operator: 'contains',
          value: debouncedQuery // Use debouncedQuery here
        },
        ...(customFilters || [])
      ]),
      limit,
      offset: page * limit,
      sortBy: sortBy as 'createdAt',
      sortDirection: sortDirection,
      ...findAllQueryParams
    }
  })

  const autoGeneratedColumns = useMemo(
    () =>
      columns.map((column) => ({
        ...column,
        header:
          column.header ||
          (({ column: col }) => (
            <DataTableColumnHeader
              column={col}
              title={toSentenceCase(column.accessorKey.toString())}
            />
          ))
      })),
    [columns]
  )

  const memoizedData = useMemo(() => data?.results || [], [data])

  const { mutateAsync: deleteItem } = useRemove()

  const { selectedItems, setSelectedItems, toggleSelection } = useSelectItems({
    items: data?.results || []
  })

  const table = useReactTable({
    columns: [
      // Checkbox column
      ...(!readonly
        ? [
            {
              cell: ({ row }) => (
                <div className='flex'>
                  <Checkbox
                    aria-label='Select row'
                    checked={selectedItems.includes(row.original.id)}
                    className='justify-self-center'
                    onCheckedChange={() => toggleSelection(row.original.id)}
                  />
                </div>
              ),
              enableHiding: false,
              enableSorting: false,
              id: 'select'
            } as ColumnDef<TItem, TDeleteVariables>
          ]
        : []),
      // Data columns
      ...autoGeneratedColumns,
      // Actions column
      ...(!readonly
        ? [
            {
              cell: ({ row }) => (
                <div className='flex justify-end'>
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button
                        className='flex h-8 w-8 p-0 data-[state=open]:bg-muted'
                        variant='ghost'
                        aria-label='Expand row options'
                      >
                        <DotsHorizontalIcon className='h-5 w-5' />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent
                      align='end'
                      className='w-[160px]'
                    >
                      {getEditFormFromItem ? (
                        <>
                          <DropdownMenuItem
                            onClick={() => {
                              setFinalForm(getEditFormFromItem?.(row.original))
                              setFormOpen(true)
                            }}
                          >
                            Edit
                          </DropdownMenuItem>
                          <DropdownMenuSeparator />
                        </>
                      ) : null}
                      {getDeleteVariablesFromItem ? (
                        <>
                          <DropdownMenuItem
                            onSelect={(e) => e.preventDefault()} // Prevent closing on select
                          >
                            <DeleteItems
                              deleteFunction={async (vars) => {
                                await deleteItem(vars)
                                setSelectedItems([])
                              }}
                              deleteVariables={[
                                getDeleteVariablesFromItem(row.original)
                              ]}
                              items={[
                                {
                                  id: row.original.id,
                                  name: row.original.name || row.original.id
                                }
                              ]}
                              itemType={itemType}
                              variant='md'
                            />
                          </DropdownMenuItem>
                        </>
                      ) : null}
                    </DropdownMenuContent>
                  </DropdownMenu>
                </div>
              ),
              id: 'actions'
            } as ColumnDef<TItem, TDeleteVariables>
          ]
        : [])
    ],
    data: data?.results || [],
    enableRowSelection: true,
    getCoreRowModel: getCoreRowModel(),
    manualFiltering: true,
    manualPagination: true,
    manualSorting: true,
    onColumnFiltersChange: setColumnFilters,
    onColumnVisibilityChange: setColumnVisibility,
    onSortingChange: setSorting,
    state: {
      columnFilters,
      columnVisibility,
      sorting
    }
  })

  return (
    <div className='flex h-full flex-col gap-3'>
      {/* SEARCH TOOLBAR */}
      {!minimal && (
        <DataTableToolbar
          createForm={createForm}
          data={data?.results || []}
          itemType={itemType}
          readonly={readonly}
          setFormOpen={setFormOpen}
          table={table}
        />
      )}

      {/* DELETE ITEMS BUTTON */}
      {selectedItems.length > 0 &&
        (getDeleteVariablesFromItem ? (
          <DeleteItems
            deleteFunction={async (vars) => {
              await deleteItem(vars)
              setSelectedItems([])
            }}
            deleteVariables={selectedItems.map((id) =>
              getDeleteVariablesFromItem(
                data?.results.find((i) => i.id === id) as TItem
              )
            )}
            items={selectedItems.map((id) => {
              const item = data?.results.find((i) => i.id === id)
              return {
                id: item?.id || '',
                name: item?.name || ''
              }
            })}
            itemType={itemType}
            variant='lg'
          />
        ) : null)}

      {/* DATA TABLE - EITHER GRID OR TABLE VIEW*/}
      <div className='flex-1 overflow-auto'>
        {view === 'grid' ? (
          <GridView
            content={content}
            createForm={createForm}
            data={memoizedData}
            DataIcon={DataIcon}
            deleteItem={deleteItem}
            getDeleteVariablesFromItem={getDeleteVariablesFromItem}
            getEditFormFromItem={getEditFormFromItem}
            handleSelect={handleSelect}
            hoverContent={hoverContent}
            itemType={itemType}
            readonly={readonly}
            selectedItems={selectedItems}
            setFinalForm={setFinalForm}
            setFormOpen={setFormOpen}
            toggleSelection={toggleSelection}
          />
        ) : (
          <TableView
            isFetched={isFetched}
            columns={columns}
            itemType={itemType}
            table={table}
          />
        )}
      </div>

      {/* PAGINATION */}
      {!minimal && (
        <div className='self-auto'>
          <DataTablePagination data={data as any} />
        </div>
      )}

      {/* THIS IS THE FORM DIALOG */}
      <Dialog
        onOpenChange={(o) => {
          setFormOpen(o)
          if (!o) {
            setFinalForm(createForm)
          }
        }}
        open={formOpen}
      >
        <VisuallyHidden.Root>
          <DialogDescription />
          <DialogTitle>
            {finalForm ? 'Edit' : 'Create'} {itemType}
          </DialogTitle>
        </VisuallyHidden.Root>
        <DialogContent
          aria-description='Create/Edit'
          className='p-0'
          title='Create/Edit'
        >
          {finalForm}
        </DialogContent>
      </Dialog>
    </div>
  )
}
