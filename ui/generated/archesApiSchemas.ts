/**
 * Generated by @openapi-codegen
 *
 * @version v1
 */
export type CreatePipelineStepDto = {
  /**
   * An array of steps that this step depends on
   *
   * @example step-id
   * @example step-id-2
   */
  dependsOn: string[];
  /**
   * This is the ID of the tool that this step uses.
   *
   * @example tool-id
   */
  toolId: string;
  /**
   * The ID of the item
   *
   * @example item-id
   */
  id: string;
};

export type CreatePipelineDto = {
  /**
   * An array of pipeline tools to be added to the pipeline
   */
  pipelineSteps: CreatePipelineStepDto[];
  /**
   * The name of the pipeline
   *
   * @example my-pipeline
   */
  name: string;
  /**
   * The description of the pipeline
   *
   * @example This pipeline does something
   */
  description: string | null;
};

export type SubItemEntity = {
  /**
   * The id of the item
   *
   * @example item-id
   */
  id: string;
  /**
   * The name of the item
   *
   * @example item-name
   */
  name: string;
};

export type ToolEntity = {
  /**
   * The tool description
   *
   * @example This tool converts a file to text, regardless of the file type.
   */
  description: string;
  /**
   * The tools input type
   *
   * @example FILE
   */
  inputType: "TEXT" | "IMAGE" | "VIDEO" | "AUDIO";
  /**
   * The tool's name
   *
   * @example extract-text
   */
  name: string;
  /**
   * The organization name
   *
   * @example my-organization
   */
  orgname: string;
  /**
   * The tools output type
   *
   * @example TEXT
   */
  outputType: "TEXT" | "IMAGE" | "VIDEO" | "AUDIO";
  /**
   * The tool's base path
   *
   * @example extract-text
   */
  toolBase: string;
  /**
   * The date that this item was created
   *
   * @format date-time
   * @example 2023-07-11T21:09:20.895Z
   */
  createdAt: string;
  /**
   * The ID of the item
   *
   * @example item-id
   */
  id: string;
};

export type PipelineStepEntity = {
  /**
   * The order of the step in the pipeline
   */
  dependents: SubItemEntity[];
  /**
   * These are the steps that this step depends on.
   */
  dependsOn: SubItemEntity[];
  /**
   * The ID of the pipelin that this step belongs to
   *
   * @example pipeline-id
   */
  pipelineId: string;
  /**
   * The name of the tool that this step uses.
   */
  tool: ToolEntity;
  /**
   * This is the ID of the tool that this step uses.
   *
   * @example tool-id
   */
  toolId: string;
  /**
   * The date that this item was created
   *
   * @format date-time
   * @example 2023-07-11T21:09:20.895Z
   */
  createdAt: string;
  /**
   * The ID of the item
   *
   * @example item-id
   */
  id: string;
};

export type PipelineEntity = {
  /**
   * The description of the pipeline
   *
   * @example This pipeline does something
   */
  description: string | null;
  /**
   * The name of the pipeline
   *
   * @example my-pipeline
   */
  name: string;
  /**
   * The name of the organization that this pipeline belongs to
   *
   * @example my-org
   */
  orgname: string;
  /**
   * The steps in the pipeline
   */
  pipelineSteps: PipelineStepEntity[];
  /**
   * The date that this item was created
   *
   * @format date-time
   * @example 2023-07-11T21:09:20.895Z
   */
  createdAt: string;
  /**
   * The ID of the item
   *
   * @example item-id
   */
  id: string;
};

export type UpdatePipelineDto = {
  /**
   * The name of the pipeline
   *
   * @example my-pipeline
   */
  name?: string;
  /**
   * The description of the pipeline
   *
   * @example This pipeline does something
   */
  description?: string | null;
  /**
   * An array of pipeline tools to be added to the pipeline
   */
  pipelineSteps?: CreatePipelineStepDto[];
};

export type ConfirmationTokenDto = {
  /**
   * The token used to verify your authorization event. This token is generated by the server and sent to the user's email.
   *
   * @example supersecre
   */
  token: string;
};

export type TokenDto = {
  /**
   * The authorization token that can be used to access Arches AI
   *
   * @example supersecretauthorizationtoken
   */
  accessToken: string;
  /**
   * The refresh token that can be used to get a new access token
   *
   * @example supersecretauthorizationtoken
   */
  refreshToken: string;
};

export type EmailRequestDto = {
  /**
   * The e-mail to send the confirmation token to
   *
   * @example user@archesai.com
   */
  email: string;
};

export type LoginDto = {
  /**
   * The user's e-mail
   *
   * @example example@archesai.com
   */
  email: string;
  /**
   * The password to create and/or login to an account
   *
   * @minLength 7
   * @example password
   */
  password: string;
};

export type ConfirmationTokenWithNewPasswordDto = {
  /**
   * The token used to verify your authorization event. This token is generated by the server and sent to the user's email.
   *
   * @example supersecre
   */
  token: string;
  /**
   * The new password
   *
   * @example newPassword
   */
  newPassword: string;
};

export type RegisterDto = {
  /**
   * The user's e-mail
   *
   * @example example@archesai.com
   */
  email: string;
  /**
   * The password to create and/or login to an account
   *
   * @minLength 7
   * @example password
   */
  password: string;
};

export type AuthProviderEntity = {
  /**
   * The auth provider's provider
   */
  provider: "LOCAL" | "FIREBASE" | "TWITTER";
  /**
   * The auth provider's provider ID
   */
  providerId: string;
  /**
   * The auth provider's user ID
   */
  userId: string;
  /**
   * The date that this item was created
   *
   * @format date-time
   * @example 2023-07-11T21:09:20.895Z
   */
  createdAt: string;
  /**
   * The ID of the item
   *
   * @example item-id
   */
  id: string;
};

export type MemberEntity = {
  /**
   * Whether the invite was accepted
   *
   * @example false
   */
  inviteAccepted: boolean;
  /**
   * The invited email of this member
   *
   * @example invited-user@archesai.com
   */
  inviteEmail: string;
  /**
   * The organization name
   *
   * @example my-organization
   */
  orgname: string;
  /**
   * The role of the member
   */
  role: "USER" | "ADMIN";
  /**
   * The username of this member
   *
   * @example jonathan
   */
  username?: string | null;
  /**
   * The date that this item was created
   *
   * @format date-time
   * @example 2023-07-11T21:09:20.895Z
   */
  createdAt: string;
  /**
   * The ID of the item
   *
   * @example item-id
   */
  id: string;
};

export type UserEntity = {
  /**
   * The memberships of the currently signed in user
   */
  authProviders: AuthProviderEntity[];
  /**
   * Whether or not the user is deactivated
   *
   * @example false
   */
  deactivated: boolean;
  /**
   * The user's default organization name
   *
   * @example my-organization
   */
  defaultOrgname: string;
  /**
   * The user's display name
   *
   * @example John Smith
   */
  displayName: string;
  /**
   * The user's e-mail
   *
   * @example example@archesai.com
   */
  email: string;
  /**
   * Whether or not the user's e-mail has been verified
   */
  emailVerified: boolean;
  /**
   * The user's first name
   *
   * @example John
   */
  firstName: string;
  /**
   * The user's last name
   *
   * @example Smith
   */
  lastName: string;
  /**
   * The memberships of the currently signed in user
   */
  memberships: MemberEntity[];
  /**
   * The user's photo url
   *
   * @example /avatar.png
   */
  photoUrl: string;
  /**
   * The user's username
   *
   * @minLength 5
   * @example jonathan
   */
  username: string;
  /**
   * The date that this item was created
   *
   * @format date-time
   * @example 2023-07-11T21:09:20.895Z
   */
  createdAt: string;
  /**
   * The ID of the item
   *
   * @example item-id
   */
  id: string;
};

export type UpdateUserDto = {
  /**
   * The user's default organization name
   *
   * @example my-organization
   */
  defaultOrgname?: string;
  /**
   * The user's first name
   *
   * @example John
   */
  firstName?: string;
  /**
   * The user's last name
   *
   * @example Smith
   */
  lastName?: string;
};

export type CreateOrganizationDto = {
  /**
   * The billing email to use for the organization
   *
   * @example example@test.com
   */
  billingEmail: string;
  /**
   * The name of the organization to create
   *
   * @example organization-name
   */
  orgname: string;
};

export type OrganizationEntity = {
  /**
   * The billing email to use for the organization
   *
   * @example example@test.com
   */
  billingEmail: string;
  /**
   * The number of credits you have remaining for this organization
   *
   * @example 500000
   */
  credits: number;
  /**
   * The name of the organization to create
   *
   * @example organization-name
   */
  orgname: string;
  /**
   * The plan that the organization is subscribed to
   *
   * @example FREE
   */
  plan: "FREE" | "BASIC" | "STANDARD" | "PREMIUM" | "UNLIMITED";
  /**
   * The date that this item was created
   *
   * @format date-time
   * @example 2023-07-11T21:09:20.895Z
   */
  createdAt: string;
  /**
   * The ID of the item
   *
   * @example item-id
   */
  id: string;
};

export type UpdateOrganizationDto = {
  /**
   * The billing email to use for the organization
   *
   * @example example@test.com
   */
  billingEmail: string;
};

export type BillingUrlEntity = {
  /**
   * The url that will bring you to the necessary stripe page
   *
   * @example www.stripe.com/checkout/filchat-io
   */
  url: string;
};

export type PlanEntity = {
  /**
   * The currency of the plan
   *
   * @example usd
   */
  currency: string;
  /**
   * @example A plan for a small business
   */
  description?: string | null;
  /**
   * The ID of the plan
   *
   * @example prod_1234567890
   */
  id: string;
  metadata?: Record<string, any>;
  /**
   * The name of the plan
   *
   * @example Small Business Plan
   */
  name: string;
  /**
   * The ID of the price associated with the plan
   *
   * @example price_1234567890
   */
  priceId: string;
  priceMetadata?: Record<string, any>;
  recurring?: Record<string, any> | null;
  /**
   * The amount in cents to be charged on the interval specified
   *
   * @example 1000
   */
  unitAmount: number;
};

export type Address = {
  /**
   * City/District/Suburb/Town/Village.
   *
   * @example San Francisco
   */
  city: Record<string, any> | null;
  /**
   * Two-letter country code (ISO 3166-1 alpha-2).
   *
   * @example US
   */
  country: Record<string, any> | null;
  /**
   * Address line 1 (e.g., street, PO Box, or company name).
   *
   * @example 123 Main Street
   */
  line1: Record<string, any> | null;
  /**
   * Address line 2 (e.g., apartment, suite, unit, or building).
   *
   * @example Apt 4B
   */
  line2: Record<string, any> | null;
  /**
   * ZIP or postal code.
   *
   * @example 94111
   */
  postal_code: Record<string, any> | null;
  /**
   * State/County/Province/Region.
   *
   * @example CA
   */
  state: Record<string, any> | null;
};

export type BillingDetails = {
  /**
   * Billing address associated with the payment method.
   */
  address: Address;
  /**
   * Email address associated with the payment method.
   *
   * @example customer@example.com
   */
  email: Record<string, any> | null;
  /**
   * Full name associated with the payment method.
   *
   * @example Jane Doe
   */
  name: Record<string, any> | null;
  /**
   * Phone number associated with the payment method.
   *
   * @example +1234567890
   */
  phone: Record<string, any> | null;
};

export type CardDetails = {
  /**
   * Card brand (e.g., Visa, MasterCard).
   *
   * @example visa
   */
  brand: string;
  /**
   * Two-letter ISO code representing the country of the card.
   *
   * @example US
   */
  country: string;
  /**
   * Two-digit number representing the card’s expiration month.
   *
   * @example 12
   */
  exp_month: number;
  /**
   * Four-digit number representing the card’s expiration year.
   *
   * @example 2024
   */
  exp_year: number;
  /**
   * Unencrypted PAN tokens (optional, sensitive).
   */
  fingerprint: Record<string, any> | null;
  /**
   * Card funding type (credit, debit, prepaid, unknown).
   *
   * @example credit
   */
  funding: string;
  /**
   * The last four digits of the card.
   *
   * @example 4242
   */
  last4: string;
};

export type PaymentMethodEntity = {
  /**
   * Billing details associated with the payment method.
   */
  billing_details: BillingDetails;
  /**
   * If the PaymentMethod is a card, this contains the card details.
   */
  card: CardDetails;
  /**
   * ID of the customer this payment method is saved to.
   *
   * @example cus_J0a1b2c3d4e5f6g7h8i9
   */
  customer: Record<string, any> | null;
  /**
   * Unique identifier for the payment method
   *
   * @example pm_1J2Y3A4B5C6D7E8F9G0H
   */
  id: string;
  /**
   * The type of the PaymentMethod. An example value is "card".
   *
   * @example card
   */
  type: string;
};

export type CreateToolDto = {
  /**
   * The tool description
   *
   * @example This tool converts a file to text, regardless of the file type.
   */
  description: string;
  /**
   * The tools input type
   *
   * @example FILE
   */
  inputType: "TEXT" | "IMAGE" | "VIDEO" | "AUDIO";
  /**
   * The tool's name
   *
   * @example extract-text
   */
  name: string;
  /**
   * The tools output type
   *
   * @example TEXT
   */
  outputType: "TEXT" | "IMAGE" | "VIDEO" | "AUDIO";
  /**
   * The tool's base path
   *
   * @example extract-text
   */
  toolBase: string;
};

export type UpdateToolDto = {
  /**
   * The tool description
   *
   * @example This tool converts a file to text, regardless of the file type.
   */
  description?: string;
  /**
   * The tools input type
   *
   * @example FILE
   */
  inputType?: "TEXT" | "IMAGE" | "VIDEO" | "AUDIO";
  /**
   * The tool's name
   *
   * @example extract-text
   */
  name?: string;
  /**
   * The tools output type
   *
   * @example TEXT
   */
  outputType?: "TEXT" | "IMAGE" | "VIDEO" | "AUDIO";
  /**
   * The tool's base path
   *
   * @example extract-text
   */
  toolBase?: string;
};

export type CreateApiTokenDto = {
  /**
   * The domains that can access this API token
   *
   * @default *
   * @example archesai.com,localhost:3000
   */
  domains: string;
  /**
   * The name of the API token
   *
   * @example My Token
   */
  name: string;
  /**
   * The role of the API token
   */
  role: "USER" | "ADMIN";
};

export type ApiTokenEntity = {
  /**
   * The domains that can access this API token
   *
   * @default *
   * @example archesai.com,localhost:3000
   */
  domains: string;
  /**
   * The API token key. This will only be shown once
   *
   * @example ********1234567890
   */
  key: string;
  /**
   * The name of the API token
   *
   * @example My Token
   */
  name: string;
  /**
   * The organization name
   *
   * @example my-organization
   */
  orgname: string;
  /**
   * The role of the API token
   */
  role: "USER" | "ADMIN";
  /**
   * The username of the user who owns this API token
   *
   * @example jonathan
   */
  username: string;
  /**
   * The date that this item was created
   *
   * @format date-time
   * @example 2023-07-11T21:09:20.895Z
   */
  createdAt: string;
  /**
   * The ID of the item
   *
   * @example item-id
   */
  id: string;
};

export type UpdateApiTokenDto = {
  /**
   * The domains that can access this API token
   *
   * @default *
   * @example archesai.com,localhost:3000
   */
  domains?: string;
  /**
   * The name of the API token
   *
   * @example My Token
   */
  name?: string;
  /**
   * The role of the API token
   */
  role?: "USER" | "ADMIN";
};

export type CreateMemberDto = {
  /**
   * The invited email of this member
   *
   * @example invited-user@archesai.com
   */
  inviteEmail: string;
  /**
   * The role of the member
   */
  role: "USER" | "ADMIN";
};

export type UpdateMemberDto = {
  /**
   * The invited email of this member
   *
   * @example invited-user@archesai.com
   */
  inviteEmail?: string;
  /**
   * The role of the member
   */
  role?: "USER" | "ADMIN";
};

export type CreateLabelDto = {
  /**
   * The chat label name
   *
   * @default New Chat
   * @example What are the morals of the story in Aesop's Fables?
   */
  name?: string;
};

export type LabelEntity = {
  /**
   * The chat label name
   *
   * @default New Chat
   * @example What are the morals of the story in Aesop's Fables?
   */
  name?: string;
  /**
   * The organization name
   *
   * @example my-organization
   */
  orgname: string;
  /**
   * The date that this item was created
   *
   * @format date-time
   * @example 2023-07-11T21:09:20.895Z
   */
  createdAt: string;
  /**
   * The ID of the item
   *
   * @example item-id
   */
  id: string;
};

export type UpdateLabelDto = {
  /**
   * The chat label name
   *
   * @default New Chat
   * @example What are the morals of the story in Aesop's Fables?
   */
  name?: string;
};

export type PathDto = {
  /**
   * Whether or not this path points to a directory
   *
   * @default false
   * @example false
   */
  isDir?: boolean;
  /**
   * The path that the file should upload to
   *
   * @example /location/in/storage
   */
  path: string;
};

export type ReadUrlDto = {
  /**
   * A read-only url that you can use to download the file from secure storage
   *
   * @example www.example.com?token=read-token
   */
  read: string;
};

export type WriteUrlDto = {
  /**
   * A write-only url that you can use to upload a file to secure storage
   *
   * @example www.example.com?token=write-token
   */
  write: string;
};

export type StorageItemDto = {
  /**
   * Whether or not this is a directory
   *
   * @format date-time
   * @example true
   */
  createdAt: string;
  /**
   * The id of the storage item
   *
   * @example 14
   */
  id: string;
  /**
   * Whether or not this is a directory
   *
   * @example true
   */
  isDir: boolean;
  /**
   * The path that the file is located in
   *
   * @example /location/in/storage
   */
  name: string;
  /**
   * The size of the item in bytes
   *
   * @example 12341234
   */
  size: number;
};

export type CreateContentDto = {
  /**
   * The content's name
   *
   * @example my-file.pdf
   */
  name: string;
  /**
   * The content's text, if TEXT content
   *
   * @example Hello world. I am a text.
   */
  text?: string | null;
  /**
   * The URL of the content, if AUDIO, VIDEO, IMAGE, or FILE content
   *
   * @example https://example.com/example.mp4
   */
  url?: string | null;
  /**
   * The labels to associate with the content
   *
   * @example label-1
   * @example label-2
   */
  labels?: string[];
};

export type ContentEntity = {
  /**
   * The child content, if any
   */
  children?: SubItemEntity[];
  /**
   * The tool runs that consumed this content, if any
   */
  consumedBy?: SubItemEntity[];
  /**
   * The number of credits used to process this content
   *
   * @example 0
   */
  credits: number;
  /**
   * The content's description
   *
   * @example my-file.pdf
   */
  description?: string | null;
  /**
   * The content's labels
   */
  labels?: SubItemEntity[];
  /**
   * The MIME type of the content
   *
   * @example application/pdf
   */
  mimeType?: string | null;
  /**
   * The content's name
   *
   * @example my-file.pdf
   */
  name: string;
  /**
   * The organization name
   *
   * @example my-organization
   */
  orgname: string;
  /**
   * The parent content, if any
   */
  parent?: SubItemEntity;
  /**
   * The parent content ID, if this content is a child of another content
   *
   * @example content-id
   */
  parentId?: string | null;
  /**
   * The preview image of the content
   *
   * @example https://preview-image.com/example.png
   */
  previewImage?: string | null;
  /**
   * The toolRun that produced this content, if any
   */
  producedBy?: SubItemEntity;
  /**
   * The ID of the toolRun that produced this content, if any
   *
   * @example toolRun-id
   */
  producedById?: string | null;
  /**
   * The content's text, if TEXT content
   *
   * @example Hello world. I am a text.
   */
  text?: string | null;
  /**
   * The URL of the content, if AUDIO, VIDEO, IMAGE, or FILE content
   *
   * @example https://example.com/example.mp4
   */
  url?: string | null;
  /**
   * The date that this item was created
   *
   * @format date-time
   * @example 2023-07-11T21:09:20.895Z
   */
  createdAt: string;
  /**
   * The ID of the item
   *
   * @example item-id
   */
  id: string;
};

export type UpdateContentDto = {
  /**
   * The content's name
   *
   * @example my-file.pdf
   */
  name?: string;
  /**
   * The content's text, if TEXT content
   *
   * @example Hello world. I am a text.
   */
  text?: string | null;
  /**
   * The URL of the content, if AUDIO, VIDEO, IMAGE, or FILE content
   *
   * @example https://example.com/example.mp4
   */
  url?: string | null;
  /**
   * The labels to associate with the content
   *
   * @example label-1
   * @example label-2
   */
  labels?: string[];
};

export type CreateRunDto = {
  /**
   * The type of run, either an individual tool run or a pipeline run
   */
  runType: "PIPELINE_RUN" | "TOOL_RUN";
  /**
   * The pipeline ID associated with the run, if applicable
   *
   * @example 123e4567-e89b-12d3-a456-426614174000
   */
  pipelineId?: string | null;
  /**
   * The tool ID associated with the run, if applicable
   *
   * @example 123e4567-e89b-12d3-a456-426614174000
   */
  toolId?: string | null;
  /**
   * If using already created content, specify the content IDs to use as input for the run.
   *
   * @example content-id-1
   * @example content-id-2
   */
  contentIds?: string[];
  /**
   * If using direct text input, specify the text to use as input for the run. It will automatically be added as content.
   *
   * @example This is the text to use as input for the run.
   */
  text?: string;
  /**
   * If using direct text input, specify the text to use as input for the run. It will automatically be added as content.
   *
   * @example This is a url to use as input for the run.
   */
  url?: string;
};

export type RunEntity = {
  /**
   * The timestamp when the run completed
   *
   * @format date-time
   * @example 2024-11-05T11:42:02.258Z
   */
  completedAt?: string | null;
  /**
   * The error message, if any, associated with the run
   *
   * @example An unexpected error occurred.
   */
  error?: string | null;
  /**
   * The inputs associated with the run
   */
  inputs: SubItemEntity[];
  /**
   * The name of the run
   *
   * @example Data Processing PipelineRun
   */
  name?: string | null;
  /**
   * The outputs associated with the run
   */
  outputs?: SubItemEntity[];
  /**
   * The pipeline ID associated with the run, if applicable
   *
   * @example 123e4567-e89b-12d3-a456-426614174000
   */
  pipelineId?: string | null;
  /**
   * The progress of the run as a percentage
   *
   * @default 0
   * @example 50.5
   */
  progress: number;
  /**
   * The type of run, either an individual tool run or a pipeline run
   */
  runType: "PIPELINE_RUN" | "TOOL_RUN";
  /**
   * The timestamp when the run started
   *
   * @format date-time
   * @example 2024-11-05T11:42:02.258Z
   */
  startedAt?: string | null;
  /**
   * The status of the run
   *
   * @default QUEUED
   */
  status: "QUEUED" | "PROCESSING" | "COMPLETE" | "ERROR";
  /**
   * The tool ID associated with the run, if applicable
   *
   * @example 123e4567-e89b-12d3-a456-426614174000
   */
  toolId?: string | null;
  /**
   * The date that this item was created
   *
   * @format date-time
   * @example 2023-07-11T21:09:20.895Z
   */
  createdAt: string;
  /**
   * The ID of the item
   *
   * @example item-id
   */
  id: string;
};

export type FieldFieldQuery = {
  /**
   * Field to filter by
   */
  field: string;
  /**
   * Operator to use for filtering
   */
  operator?:
    | "contains"
    | "endsWith"
    | "equals"
    | "every"
    | "in"
    | "none"
    | "not"
    | "some"
    | "startsWith";
  /**
   * Value to filter for
   */
  value: string | string[];
};

export type AggregateFieldQuery = {
  /**
   * Field to aggregate by
   */
  field: string;
  /**
   * The granularity to use for ranged aggregates
   */
  granularity?: "day" | "month" | "week" | "year";
  /**
   * Type of aggregate to perform
   */
  type: "count" | "sum";
};

export type AggregateFieldResult = {
  /**
   * Field to aggregate by
   */
  field: string;
  /**
   * The granularity to use for ranged aggregates
   */
  granularity?: "day" | "month" | "week" | "year";
  /**
   * Type of aggregate to perform
   */
  type: "count" | "sum";
  /**
   * The value of the aggregate
   *
   * @example 10
   */
  value: number;
};

export type Metadata = {
  /**
   * The number of results per page
   *
   * @example 10
   */
  limit: number;
  /**
   * The current page
   *
   * @example 1
   */
  offset: number;
  /**
   * The total number of results
   *
   * @example 100
   */
  totalResults: number;
};
