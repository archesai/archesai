/**
 * Generated by @openapi-codegen
 *
 * @version v1
 */
export type LoginDto = {
  /**
   * The user's e-mail
   *
   * @example example@archesai.com
   */
  email: string;
  /**
   * The password to create and/or login to an account
   *
   * @example password
   * @minLength 7
   */
  password: string;
};

export type TokenDto = {
  /**
   * The authorization token that can be used to access Arches AI
   *
   * @example supersecretauthorizationtoken
   */
  accessToken: string;
  /**
   * The refresh token that can be used to get a new access token
   *
   * @example supersecretauthorizationtoken
   */
  refreshToken: string;
};

export type RegisterDto = {
  /**
   * The user's e-mail
   *
   * @example example@archesai.com
   */
  email: string;
  /**
   * The user's username
   *
   * @example jonathan
   * @minLength 5
   */
  username: string;
  /**
   * The password to create and/or login to an account
   *
   * @example password
   * @minLength 7
   */
  password: string;
};

export type MemberEntity = {
  /**
   * The creation date of this item
   *
   * @format date-time
   * @example 2023-07-11T21:09:20.895Z
   */
  createdAt: string;
  /**
   * The item's unique identifier
   *
   * @example 32411590-a8e0-11ed-afa1-0242ac120002
   */
  id: string;
  /**
   * Whether the invite was accepted
   *
   * @example false
   */
  inviteAccepted: boolean;
  /**
   * The invited email of this member
   *
   * @example invited-user@archesai.com
   */
  inviteEmail: string;
  /**
   * The name of this member
   *
   * @example jonathan
   */
  name: string;
  /**
   * The organization name
   *
   * @example my-organization
   */
  orgname: string;
  /**
   * The role of the member
   */
  role: "USER" | "ADMIN";
  /**
   * The username of this member
   *
   * @example jonathan
   */
  username: string;
};

export type UserEntity = {
  /**
   * The creation date of this item
   *
   * @format date-time
   * @example 2023-07-11T21:09:20.895Z
   */
  createdAt: string;
  /**
   * The item's unique identifier
   *
   * @example 32411590-a8e0-11ed-afa1-0242ac120002
   */
  id: string;
  /**
   * The user's default organization name
   *
   * @example my-organization
   */
  defaultOrg: string;
  /**
   * The user's display name
   *
   * @example John Smith
   */
  displayName: string;
  /**
   * The user's e-mail
   *
   * @example example@archesai.com
   */
  email: string;
  /**
   * Whether or not the user's e-mail has been verified
   */
  emailVerified: boolean;
  /**
   * The user's first name
   *
   * @example John
   */
  firstName: string;
  /**
   * The user's last name
   *
   * @example Smith
   */
  lastName: string;
  /**
   * The memberships of the currently signed in user
   */
  memberships: MemberEntity[];
  /**
   * The user's photo url
   *
   * @example /avatar.png
   */
  photoUrl: string;
  /**
   * The user's username
   *
   * @example jonathan
   * @minLength 5
   */
  username: string;
};

export type UpdateUserDto = {
  /**
   * The user's default organization name
   *
   * @example my-organization
   */
  defaultOrg?: string;
  /**
   * The user's first name
   *
   * @example John
   */
  firstName?: string;
  /**
   * The user's last name
   *
   * @example Smith
   */
  lastName?: string;
  /**
   * The user's username
   *
   * @example jonathan
   * @minLength 5
   */
  username?: string;
};

export type CreateOrganizationDto = {
  /**
   * The billing email to use for the organization
   *
   * @example example@test.com
   */
  billingEmail: string;
  /**
   * The name of the organization to create
   *
   * @example organization-name
   */
  orgname: string;
};

export type OrganizationEntity = {
  /**
   * The creation date of this item
   *
   * @format date-time
   * @example 2023-07-11T21:09:20.895Z
   */
  createdAt: string;
  /**
   * The item's unique identifier
   *
   * @example 32411590-a8e0-11ed-afa1-0242ac120002
   */
  id: string;
  /**
   * The billing email to use for the organization
   *
   * @example example@test.com
   */
  billingEmail: string;
  /**
   * The number of credits you have remaining for this organization
   *
   * @example 500000
   */
  credits: number;
  /**
   * The name of the organization to create
   *
   * @example organization-name
   */
  orgname: string;
  /**
   * The plan that the organization is subscribed to
   *
   * @example FREE
   */
  plan: "FREE" | "BASIC" | "STANDARD" | "PREMIUM" | "API";
};

export type UpdateOrganizationDto = {
  /**
   * The billing email to use for the organization
   *
   * @example example@test.com
   */
  billingEmail: string;
};

export type BillingUrlEntity = {
  /**
   * The url that will bring you to the necessary stripe page
   *
   * @example www.stripe.com/checkout/filchat-io
   */
  url: string;
};

export type PlanEntity = {
  /**
   * The currency of the plan
   *
   * @example usd
   */
  currency: string;
  /**
   * @example A plan for a small business
   */
  description?: Record<string, any>;
  /**
   * The ID of the plan
   *
   * @example prod_1234567890
   */
  id: string;
  metadata?: Record<string, any>;
  /**
   * The name of the plan
   *
   * @example Small Business Plan
   */
  name: string;
  /**
   * The ID of the price associated with the plan
   *
   * @example price_1234567890
   */
  priceId: string;
  priceMetadata?: Record<string, any>;
  recurring?: Record<string, any>;
  /**
   * The amount in cents to be charged on the interval specified
   *
   * @example 1000
   */
  unitAmount: number;
};

export type Address = {
  /**
   * City/District/Suburb/Town/Village.
   *
   * @example San Francisco
   */
  city: Record<string, any> | null;
  /**
   * Two-letter country code (ISO 3166-1 alpha-2).
   *
   * @example US
   */
  country: Record<string, any> | null;
  /**
   * Address line 1 (e.g., street, PO Box, or company name).
   *
   * @example 123 Main Street
   */
  line1: Record<string, any> | null;
  /**
   * Address line 2 (e.g., apartment, suite, unit, or building).
   *
   * @example Apt 4B
   */
  line2: Record<string, any> | null;
  /**
   * ZIP or postal code.
   *
   * @example 94111
   */
  postal_code: Record<string, any> | null;
  /**
   * State/County/Province/Region.
   *
   * @example CA
   */
  state: Record<string, any> | null;
};

export type BillingDetails = {
  /**
   * Billing address associated with the payment method.
   */
  address: Address;
  /**
   * Email address associated with the payment method.
   *
   * @example customer@example.com
   */
  email: Record<string, any> | null;
  /**
   * Full name associated with the payment method.
   *
   * @example Jane Doe
   */
  name: Record<string, any> | null;
  /**
   * Phone number associated with the payment method.
   *
   * @example +1234567890
   */
  phone: Record<string, any> | null;
};

export type CardDetails = {
  /**
   * Card brand (e.g., Visa, MasterCard).
   *
   * @example visa
   */
  brand: string;
  /**
   * Two-letter ISO code representing the country of the card.
   *
   * @example US
   */
  country: string;
  /**
   * Two-digit number representing the card’s expiration month.
   *
   * @example 12
   */
  exp_month: number;
  /**
   * Four-digit number representing the card’s expiration year.
   *
   * @example 2024
   */
  exp_year: number;
  /**
   * Unencrypted PAN tokens (optional, sensitive).
   */
  fingerprint: Record<string, any> | null;
  /**
   * Card funding type (credit, debit, prepaid, unknown).
   *
   * @example credit
   */
  funding: string;
  /**
   * The last four digits of the card.
   *
   * @example 4242
   */
  last4: string;
};

export type PaymentMethodEntity = {
  /**
   * Billing details associated with the payment method.
   */
  billing_details: BillingDetails;
  /**
   * If the PaymentMethod is a card, this contains the card details.
   */
  card: CardDetails;
  /**
   * ID of the customer this payment method is saved to.
   *
   * @example cus_J0a1b2c3d4e5f6g7h8i9
   */
  customer: Record<string, any> | null;
  /**
   * Unique identifier for the payment method
   *
   * @example pm_1J2Y3A4B5C6D7E8F9G0H
   */
  id: string;
  /**
   * The type of the PaymentMethod. An example value is "card".
   *
   * @example card
   */
  type: string;
};

export type CreateApiTokenDto = {
  /**
   * The domains that can access this API token
   *
   * @default *
   * @example archesai.com,localhost:3000
   */
  domains?: string;
  /**
   * The name of the API token
   *
   * @example My Token
   */
  name: string;
  /**
   * The role of the API token
   */
  role: "USER" | "ADMIN";
  /**
   * The ids of the agent this token will have access to. This can not be changed later.
   *
   * @example agent1
   * @example agent2
   */
  chatbotIds?: string[];
};

export type AgentsFieldItem = {
  /**
   * The item's unique identifier
   *
   * @example 32411590-a8e0-11ed-afa1-0242ac120002
   */
  id: string;
  /**
   * The chatbot name
   *
   * @example Arches AI Documentation Chatbot
   */
  name: string;
};

export type ApiTokenEntity = {
  /**
   * The creation date of this item
   *
   * @format date-time
   * @example 2023-07-11T21:09:20.895Z
   */
  createdAt: string;
  /**
   * The item's unique identifier
   *
   * @example 32411590-a8e0-11ed-afa1-0242ac120002
   */
  id: string;
  /**
   * The chatbots this API token has access to
   *
   * @example {"id":"uuid-uuid-uuid-uuid","name":"Arches API Documentation Agent"}
   */
  chatbots: AgentsFieldItem[];
  /**
   * The domains that can access this API token
   *
   * @default *
   * @example archesai.com,localhost:3000
   */
  domains?: string;
  /**
   * The API token key. This will only be shown once
   *
   * @example ********1234567890
   */
  key: string;
  /**
   * The name of the API token
   *
   * @example My Token
   */
  name: string;
  /**
   * The organization name
   *
   * @example my-organization
   */
  orgname: string;
  /**
   * The role of the API token
   */
  role: "USER" | "ADMIN";
  /**
   * The username of the user who owns this API token
   *
   * @example jonathan
   */
  username: string;
};

export type CreateMemberDto = {
  /**
   * The invited email of this member
   *
   * @example invited-user@archesai.com
   */
  inviteEmail: string;
  /**
   * The role of the member
   */
  role: "USER" | "ADMIN";
};

export type UpdateMemberDto = {
  /**
   * The invited email of this member
   *
   * @example invited-user@archesai.com
   */
  inviteEmail?: string;
  /**
   * The role of the member
   */
  role?: "USER" | "ADMIN";
};

export type ConfirmEmailVerificationDto = {
  /**
   * The token used to verify the e-mail. This should have been provided in an e-mail
   *
   * @example supersecre
   */
  token: string;
};

export type CreateThreadDto = {
  /**
   * The chat thread name
   *
   * @default New Chat
   * @example What are the morals of the story in Aesop's Fables?
   */
  name?: string;
  /**
   * Optional. The id to use as the chat id. If taken, this endpoint will return a 409.
   *
   * @example chatId1
   */
  id?: string;
};

export type ThreadEntity = {
  /**
   * The creation date of this item
   *
   * @format date-time
   * @example 2023-07-11T21:09:20.895Z
   */
  createdAt: string;
  /**
   * The item's unique identifier
   *
   * @example 32411590-a8e0-11ed-afa1-0242ac120002
   */
  id: string;
  /**
   * The total number of credits used in this chat
   *
   * @example 10000
   */
  credits: number;
  /**
   * The chat thread name
   *
   * @default New Chat
   * @example What are the morals of the story in Aesop's Fables?
   */
  name: string;
  /**
   * The total number of messages in this chat
   *
   * @example 10000
   */
  numMessages: number;
  /**
   * The organization name
   *
   * @example my-organization
   */
  orgname: string;
};

export type PathDto = {
  /**
   * Whether or not this path points to a directory
   *
   * @default false
   * @example false
   */
  isDir?: boolean;
  /**
   * The path that the file should upload to
   *
   * @example /location/in/storage
   */
  path: string;
};

export type ReadUrlDto = {
  /**
   * A read-only url that you can use to download the file from secure storage
   *
   * @example www.example.com?token=read-token
   */
  read: string;
};

export type WriteUrlDto = {
  /**
   * A write-only url that you can use to upload a file to secure storage
   *
   * @example www.example.com?token=write-token
   */
  write: string;
};

export type StorageItemDto = {
  /**
   * Whether or not this is a directory
   *
   * @format date-time
   * @example true
   */
  createdAt: string;
  /**
   * The id of the storage item
   *
   * @example 14
   */
  id: string;
  /**
   * Whether or not this is a directory
   *
   * @example true
   */
  isDir: boolean;
  /**
   * The path that the file is located in
   *
   * @example /location/in/storage
   */
  name: string;
  /**
   * The size of the item in bytes
   *
   * @example 12341234
   */
  size: number;
};

export type CreateChatbotDto = {
  /**
   * The chatbot description
   *
   * @example You are a chatbot designed to answer questions about Arches AI
   */
  description: string;
  /**
   * The base LLM that the chatbot will use
   *
   * @default GPT_3_5_TURBO_16_K
   */
  llmBase?: string;
  /**
   * The chatbot name
   *
   * @example Arches AI Documentation Chatbot
   */
  name: string;
};

export type ContentFieldItem = {
  /**
   * The item's unique identifier
   *
   * @example 32411590-a8e0-11ed-afa1-0242ac120002
   */
  id: string;
  /**
   * The animation's name
   *
   * @example my-file.pdf
   */
  name: string;
};

export type ChatbotEntity = {
  /**
   * The creation date of this item
   *
   * @format date-time
   * @example 2023-07-11T21:09:20.895Z
   */
  createdAt: string;
  /**
   * The item's unique identifier
   *
   * @example 32411590-a8e0-11ed-afa1-0242ac120002
   */
  id: string;
  /**
   * The chatbot description
   *
   * @example You are a chatbot designed to answer questions about Arches AI
   */
  description: string;
  /**
   * The documents this chatbot has access to
   *
   * @example {"id":"417221d3-2b96-4157-a79b-f1866df7743b","name":"Arches API Documentation"}
   */
  documents: ContentFieldItem[];
  /**
   * The base LLM that the chatbot will use
   *
   * @default GPT_3_5_TURBO_16_K
   */
  llmBase?: string;
  /**
   * The chatbot name
   *
   * @example Arches AI Documentation Chatbot
   */
  name: string;
  /**
   * The organization name
   *
   * @example my-organization
   */
  orgname: string;
};

export type UpdateChatbotDto = {
  /**
   * The chatbot description
   *
   * @example You are a chatbot designed to answer questions about Arches AI
   */
  description?: string;
  /**
   * The base LLM that the chatbot will use
   *
   * @default GPT_3_5_TURBO_16_K
   */
  llmBase?: string;
  /**
   * The chatbot name
   *
   * @example Arches AI Documentation Chatbot
   */
  name?: string;
};

export type CreateMessageDto = {
  /**
   * The max length of the answer given by the bot
   *
   * @default 240
   * @example 240
   */
  answerLength?: number;
  /**
   * The max length of the context given to the bot
   *
   * @default 1000
   * @example 3000
   */
  contextLength?: number;
  /**
   * The question in this message
   *
   * @example What is the name of this document?
   */
  question: string;
  /**
   * The sililarity cutoff used in this message
   *
   * @default 0.7
   * @example 0.7
   */
  similarityCutoff?: number;
  /**
   * The temperature for the LLM
   *
   * @default 0.7
   * @example 0.7
   */
  temperature?: number;
  /**
   * The max number of sources returned included in the context
   *
   * @default 5
   * @example 10
   */
  topK?: number;
};

export type CitationEntity = {
  /**
   * The similarity of this source to the query
   *
   * @example 0.82
   */
  similarity: number;
};

export type MessageEntity = {
  /**
   * The creation date of this item
   *
   * @format date-time
   * @example 2023-07-11T21:09:20.895Z
   */
  createdAt: string;
  /**
   * The item's unique identifier
   *
   * @example 32411590-a8e0-11ed-afa1-0242ac120002
   */
  id: string;
  /**
   * The answer given by the bot
   *
   * @example The name of this document is Aesop's Fables
   */
  answer: string;
  /**
   * The max length of the answer given by the bot
   *
   * @default 240
   * @example 240
   */
  answerLength?: number;
  /**
   * The sources used in this message
   */
  citations: CitationEntity[];
  /**
   * The max length of the context given to the bot
   *
   * @default 1000
   * @example 3000
   */
  contextLength?: number;
  /**
   * The number of credits used in this message
   *
   * @example 14
   */
  credits: number;
  /**
   * The question in this message
   *
   * @example What is the name of this document?
   */
  question: string;
  /**
   * The sililarity cutoff used in this message
   *
   * @default 0.7
   * @example 0.7
   */
  similarityCutoff?: number;
  /**
   * The temperature for the LLM
   *
   * @default 0.7
   * @example 0.7
   */
  temperature?: number;
  /**
   * The id of the thread this message belongs to
   *
   * @example thread1
   */
  threadId: string;
  /**
   * The max number of sources returned included in the context
   *
   * @default 5
   * @example 10
   */
  topK?: number;
};

export type CreateContentDto = {
  buildArgs: Record<string, any>;
  /**
   * The animation's name
   *
   * @example my-file.pdf
   */
  name: string;
  /**
   * @example video/mp4
   */
  type: "DOCUMENT" | "ANIMATION" | "IMAGE";
  /**
   * @example https://example.com/example.mp4
   */
  url: string;
};

export type JobEntity = {
  /**
   * The creation date of this item
   *
   * @format date-time
   * @example 2023-07-11T21:09:20.895Z
   */
  createdAt: string;
  /**
   * The item's unique identifier
   *
   * @example 32411590-a8e0-11ed-afa1-0242ac120002
   */
  id: string;
  /**
   * The time that the job was completed
   *
   * @format date-time
   * @example 2023-07-11T21:09:20.895Z
   */
  completedAt: string;
  /**
   * The type of job that is being processed
   *
   * @example DOCUMENT
   */
  jobType: string;
  /**
   * The percent progress of the current job
   *
   * @example 0.9
   */
  progress: number;
  /**
   * The link to the resource that is being processed
   *
   * @example /organizations/archesai/documents/documentId
   */
  resourceLink: string;
  /**
   * The time that the job was started
   *
   * @format date-time
   * @example 2023-07-11T21:09:20.895Z
   */
  startedAt: string;
  /**
   * The status of the current animation processing
   *
   * @example COMPLETE
   */
  status: "QUEUED" | "PROCESSING" | "COMPLETE" | "ERROR";
};

export type ContentEntity = {
  /**
   * The creation date of this item
   *
   * @format date-time
   * @example 2023-07-11T21:09:20.895Z
   */
  createdAt: string;
  /**
   * The item's unique identifier
   *
   * @example 32411590-a8e0-11ed-afa1-0242ac120002
   */
  id: string;
  /**
   * The content's annotations
   *
   * @example {"key":"value"}
   */
  annotations: Record<string, any>;
  buildArgs: Record<string, any>;
  /**
   * The number of credits used to process this content
   *
   * @example 0
   */
  credits: number;
  /**
   * The animation's name
   *
   * @example my-file.pdf
   */
  description: string;
  /**
   * This job associated with this content's build process
   */
  job: JobEntity;
  /**
   * @example application/pdf
   */
  mimeType: string;
  /**
   * The animation's name
   *
   * @example my-file.pdf
   */
  name: string;
  /**
   * The organization name
   *
   * @example my-organization
   */
  orgname: string;
  /**
   * The preview image of the animation
   *
   * @example https://preview-image.com/example.png
   */
  previewImage: string;
  /**
   * The content's text
   *
   * @example Hello, world!
   */
  text: string;
  /**
   * @example video/mp4
   */
  type: "DOCUMENT" | "ANIMATION" | "IMAGE";
  /**
   * @example https://example.com/example.mp4
   */
  url: string;
};

export type UpdateContentDto = {
  buildArgs: Record<string, any>;
  /**
   * The animation's name
   *
   * @example my-file.pdf
   */
  name: string;
  /**
   * @example video/mp4
   */
  type: "DOCUMENT" | "ANIMATION" | "IMAGE";
  /**
   * @example https://example.com/example.mp4
   */
  url: string;
};

export type VectorRecordEntity = {
  /**
   * The creation date of this item
   *
   * @format date-time
   * @example 2023-07-11T21:09:20.895Z
   */
  createdAt: string;
  /**
   * The item's unique identifier
   *
   * @example 32411590-a8e0-11ed-afa1-0242ac120002
   */
  id: string;
  /**
   * The job that created this vector record
   */
  text: string;
};

export type ConfirmPasswordResetDto = {
  /**
   * The new password
   *
   * @example newPassword
   */
  newPassword: string;
  /**
   * The token used to reset the password. This should have been provided in an e-mail
   *
   * @example supersecre
   */
  token: string;
};

export type RequestPasswordResetDto = {
  /**
   * The e-mail address to send the password reset link to
   *
   * @example user@archesai.com
   */
  email: string;
};

export type ConfirmEmailChangeDto = {
  /**
   * The token used to change the e-mail. This should have been provided in an e-mail
   *
   * @example supersecre
   */
  token: string;
};

export type RequestEmailChangeDto = {
  /**
   * The e-mail address to update to
   *
   * @example user@archesai.com
   */
  email: string;
};

export type Metadata = {
  /**
   * The number of results per page
   *
   * @example 10
   */
  limit: number;
  /**
   * The current page
   *
   * @example 1
   */
  offset: number;
  /**
   * The total number of results
   *
   * @example 100
   */
  totalResults: number;
};

export type PaginatedDto = {
  /**
   * The metadata for the paginated results
   */
  metadata: Metadata;
};

export type GranularSum = {
  /**
   * @format date-time
   */
  from: string;
  sum: number;
  /**
   * @format date-time
   */
  to: string;
};

export type GranularCount = {
  count: number;
  /**
   * @format date-time
   */
  from: string;
  /**
   * @format date-time
   */
  to: string;
};

export type ThreadAggregates = {
  /**
   * The number of credits used in chat threads over specific timeframes
   */
  credits?: GranularSum[];
  /**
   * The number of threads created over specific timeframes
   */
  threadsCreated?: GranularCount[];
};
