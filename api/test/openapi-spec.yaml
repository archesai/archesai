openapi: 3.0.0
paths:
  /organizations/{orgname}/pipelines:
    post:
      operationId: PipelinesController_create
      summary: Create a new pipeline
      description: Create a new pipeline. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePipelineDto'
      responses:
        '201':
          description: Successfully created a new pipeline
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineEntity'
        '400':
          description: Bad request when creating the pipeline
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Pipelines
      security:
        - bearer: []
    get:
      operationId: PipelinesController_findAll
      summary: Get all pipelines
      description: Get all pipelines. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: aggregates
          required: false
          in: query
          description: Aggregates to collect for the search results
          schema:
            default: []
            type: array
            items:
              $ref: '#/components/schemas/AggregateFieldQuery'
        - name: endDate
          required: false
          in: query
          description: The end date to search to
          schema:
            type: string
        - name: filters
          required: false
          in: query
          description: Filter fields and values
          schema:
            default: []
            type: array
            items:
              $ref: '#/components/schemas/FieldFieldQuery'
        - name: limit
          required: false
          in: query
          description: The limit of the number of results returned
          schema:
            minimum: 1
            default: 10
            type: number
        - name: offset
          required: false
          in: query
          description: The offset of the returned results
          schema:
            default: 0
            type: number
        - name: sortBy
          required: false
          in: query
          description: The field to sort the results by
          schema:
            default: createdAt
            type: string
        - name: sortDirection
          required: false
          in: query
          description: The direction to sort the results by
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - name: startDate
          required: false
          in: query
          description: The start date to search from
          schema:
            type: string
      responses:
        '200':
          description: Successfully returned paginated results
          content:
            application/json:
              schema:
                allOf:
                  - properties:
                      aggregates:
                        items:
                          $ref: '#/components/schemas/AggregateFieldResult'
                        type: array
                      metadata:
                        $ref: '#/components/schemas/Metadata'
                      results:
                        items:
                          $ref: '#/components/schemas/PipelineEntity'
                        type: array
                title: PaginatedResponseOfPipelineEntity
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Pipelines
      security:
        - bearer: []
  /organizations/{orgname}/pipelines/{pipelineId}:
    get:
      operationId: PipelinesController_findOne
      summary: Get a pipeline
      description: Get a pipeline. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: pipelineId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved the pipeline
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineEntity'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Pipelines
      security:
        - bearer: []
    delete:
      operationId: PipelinesController_remove
      summary: Delete a pipeline
      description: Delete a pipeline. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: pipelineId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted the pipeline
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Pipelines
      security:
        - bearer: []
    patch:
      operationId: PipelinesController_update
      summary: Update a pipeline
      description: Update a pipeline. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: pipelineId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePipelineDto'
      responses:
        '200':
          description: Successfully updated the pipeline
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineEntity'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Pipelines
      security:
        - bearer: []
  /auth/email-change/confirm:
    post:
      operationId: AuthController_emailChangeConfirm
      summary: Confirm e-mail change
      description: This endpoint will confirm your e-mail change with a token
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmationTokenDto'
      responses:
        '201':
          description: E-mail change confirmed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenDto'
        '400':
          description: ''
      tags:
        - Authentication
  /auth/email-change/request:
    post:
      operationId: AuthController_emailChangeRequest
      summary: Confirm e-mail change
      description: This endpoint will request your e-mail change with a token
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailRequestDto'
      responses:
        '201':
          description: ''
      tags:
        - Authentication
      security:
        - bearer: []
  /auth/email-verification/confirm:
    post:
      operationId: AuthController_emailVerificationConfirm
      summary: Confirm e-mail verification
      description: This endpoint will confirm your e-mail with a token
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmationTokenDto'
      responses:
        '201':
          description: E-mail verification confirmed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenDto'
        '400':
          description: ''
        '401':
          description: ''
      tags:
        - Authentication
  /auth/email-verification/request:
    post:
      operationId: AuthController_emailVerificationRequest
      summary: Resend e-mail verification
      description: This endpoint will send an e-mail verification link to you. ADMIN ONLY.
      parameters: []
      responses:
        '201':
          description: E-mail verification link sent
        '400':
          description: Already Verified
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      tags:
        - Authentication
      security:
        - bearer: []
  /auth/login:
    post:
      operationId: AuthController_login
      summary: Login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenDto'
        '401':
          description: Invalid credentials
      tags:
        - Authentication
  /auth/logout:
    post:
      operationId: AuthController_logout
      summary: Logout
      description: Log out of the current session
      parameters: []
      responses:
        '201':
          description: ''
      tags:
        - Authentication
  /auth/password-reset/confirm:
    post:
      operationId: AuthController_passwordResetConfirm
      summary: Confirm password change
      description: This endpoint will confirm your password change with a token
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmationTokenWithNewPasswordDto'
      responses:
        '201':
          description: Password change confirmed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenDto'
      tags:
        - Authentication
  /auth/password-reset/request:
    post:
      operationId: AuthController_passwordResetRequest
      summary: Request password reset
      description: This endpoint will request a password reset link
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailRequestDto'
      responses:
        '201':
          description: ''
      tags:
        - Authentication
  /auth/refresh-token:
    post:
      operationId: AuthController_refreshToken
      summary: Refresh Access Token
      parameters: []
      responses:
        '201':
          description: The new access token has been generated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenDto'
        '401':
          description: Invalid refresh token
      tags:
        - Authentication
  /auth/register:
    post:
      operationId: AuthController_register
      summary: Register
      description: >-
        This endpoint will register a new account and return a JWT token which
        should be provided in your auth headers
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
      responses:
        '201':
          description: User was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenDto'
        '409':
          description: User already exists with provided email
      tags:
        - Authentication
  /user/deactivate:
    post:
      operationId: UserController_deactivate
      summary: Deactivate
      parameters: []
      responses:
        '201':
          description: User was deleted successfully
        '401':
          description: Unauthorized
      tags:
        - User
      security:
        - bearer: []
  /user:
    get:
      operationId: UserController_findOne
      summary: Get a user
      description: Get a user. ADMIN ONLY.
      parameters: []
      responses:
        '200':
          description: Successfully retrieved the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - User
      security:
        - bearer: []
    patch:
      operationId: UserController_update
      summary: Update a user
      description: Update a user. ADMIN ONLY.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: Successfully updated the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - User
      security:
        - bearer: []
  /organizations:
    post:
      operationId: OrganizationsController_create
      summary: Create a new organization
      description: Create a new organization. ADMIN ONLY.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationDto'
      responses:
        '201':
          description: Successfully created a new organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationEntity'
        '400':
          description: Bad request when creating the organization
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Organization
      security:
        - bearer: []
  /organizations/{orgname}:
    delete:
      operationId: OrganizationsController_delete
      summary: Delete a organization
      description: Delete a organization. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted the organization
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Organization
      security:
        - bearer: []
    get:
      operationId: OrganizationsController_findOne
      summary: Get a organization
      description: Get a organization. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved the organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationEntity'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Organization
      security:
        - bearer: []
    patch:
      operationId: OrganizationsController_update
      summary: Update a organization
      description: Update a organization. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationDto'
      responses:
        '200':
          description: Successfully updated the organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationEntity'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Organization
      security:
        - bearer: []
  /organizations/{orgname}/billing/subscription/cancel:
    post:
      operationId: BillingController_cancelSubscriptionPlan
      summary: Cancel subscription plan
      description: Cancel the subscription plan for an organization
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Successfully canceled subscription plan
      tags:
        - Organization - Billing
      security:
        - bearer: []
  /organizations/{orgname}/billing/subscription:
    post:
      operationId: BillingController_changeSubscriptionPlan
      summary: Switch subscription plan
      description: Switch subscription plan for an organization
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: planId
          required: true
          in: query
          schema:
            type: string
      responses:
        '201':
          description: Successfully switched subscription plan
      tags:
        - Organization - Billing
      security:
        - bearer: []
  /organizations/{orgname}/billing/portal:
    post:
      operationId: BillingController_createBillingPortal
      summary: Create a billing portal for an organization
      description: >-
        This endpoint will create a billing portal for an organization to edit
        their subscription and billing information. Only available on
        archesai.com. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Successfully created URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingUrlEntity'
      tags:
        - Organization - Billing
      security:
        - bearer: []
  /organizations/{orgname}/billing/checkout:
    post:
      operationId: BillingController_createCheckoutSession
      summary: Create a checkout session for an organization
      description: >-
        This endpoint will create a checkout session for an organization to
        purchase a subscription or one-time product. Only available on
        archesai.com. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: planId
          required: true
          in: query
          schema:
            type: string
      responses:
        '201':
          description: Successfully created checkout session URL
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingUrlEntity'
      tags:
        - Organization - Billing
      security:
        - bearer: []
  /plans:
    get:
      operationId: BillingController_getPlans
      summary: List billing plans
      description: Get a list of available billing plans
      parameters: []
      responses:
        '200':
          description: List of plans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlanEntity'
      tags:
        - Organization - Billing
        - Plans
      security:
        - bearer: []
  /organizations/{orgname}/billing/payment-methods:
    get:
      operationId: BillingController_listPaymentMethods
      summary: List payment methods
      description: List payment methods for an organization
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: List of payment methods
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentMethodEntity'
      tags:
        - Organization - Billing
      security:
        - bearer: []
  /organizations/{orgname}/billing/payment-methods/{paymentMethodId}:
    delete:
      operationId: BillingController_removePaymentMethod
      summary: Remove payment method
      description: Remove a payment method from an organization
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: paymentMethodId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
      tags:
        - Organization - Billing
      security:
        - bearer: []
  /organizations/{orgname}/tools:
    post:
      operationId: ToolsController_create
      summary: Create a new tool
      description: Create a new tool. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateToolDto'
      responses:
        '201':
          description: Successfully created a new tool
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolEntity'
        '400':
          description: Bad request when creating the tool
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Tools
      security:
        - bearer: []
    get:
      operationId: ToolsController_findAll
      summary: Get all tools
      description: Get all tools. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: aggregates
          required: false
          in: query
          description: Aggregates to collect for the search results
          schema:
            default: []
            type: array
            items:
              $ref: '#/components/schemas/AggregateFieldQuery'
        - name: endDate
          required: false
          in: query
          description: The end date to search to
          schema:
            type: string
        - name: filters
          required: false
          in: query
          description: Filter fields and values
          schema:
            default: []
            type: array
            items:
              $ref: '#/components/schemas/FieldFieldQuery'
        - name: limit
          required: false
          in: query
          description: The limit of the number of results returned
          schema:
            minimum: 1
            default: 10
            type: number
        - name: offset
          required: false
          in: query
          description: The offset of the returned results
          schema:
            default: 0
            type: number
        - name: sortBy
          required: false
          in: query
          description: The field to sort the results by
          schema:
            default: createdAt
            type: string
        - name: sortDirection
          required: false
          in: query
          description: The direction to sort the results by
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - name: startDate
          required: false
          in: query
          description: The start date to search from
          schema:
            type: string
      responses:
        '200':
          description: Successfully returned paginated results
          content:
            application/json:
              schema:
                allOf:
                  - properties:
                      aggregates:
                        items:
                          $ref: '#/components/schemas/AggregateFieldResult'
                        type: array
                      metadata:
                        $ref: '#/components/schemas/Metadata'
                      results:
                        items:
                          $ref: '#/components/schemas/ToolEntity'
                        type: array
                title: PaginatedResponseOfToolEntity
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Tools
      security:
        - bearer: []
  /organizations/{orgname}/tools/{toolId}:
    get:
      operationId: ToolsController_findOne
      summary: Get a tool
      description: Get a tool. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: toolId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved the tool
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolEntity'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Tools
      security:
        - bearer: []
    delete:
      operationId: ToolsController_remove
      summary: Delete a tool
      description: Delete a tool. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: toolId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted the tool
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Tools
      security:
        - bearer: []
    patch:
      operationId: ToolsController_update
      summary: Update a tool
      description: Update a tool. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: toolId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateToolDto'
      responses:
        '200':
          description: Successfully updated the tool
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolEntity'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Tools
      security:
        - bearer: []
  /organizations/{orgname}/api-tokens:
    post:
      operationId: ApiTokensController_create
      summary: Create a new API token
      description: Create a new API token. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiTokenDto'
      responses:
        '201':
          description: Successfully created a new API token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiTokenEntity'
        '400':
          description: Bad request when creating the API token
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - API Tokens
      security:
        - bearer: []
    get:
      operationId: ApiTokensController_findAll
      summary: Get all API tokens
      description: Get all API tokens. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: aggregates
          required: false
          in: query
          description: Aggregates to collect for the search results
          schema:
            default: []
            type: array
            items:
              $ref: '#/components/schemas/AggregateFieldQuery'
        - name: endDate
          required: false
          in: query
          description: The end date to search to
          schema:
            type: string
        - name: filters
          required: false
          in: query
          description: Filter fields and values
          schema:
            default: []
            type: array
            items:
              $ref: '#/components/schemas/FieldFieldQuery'
        - name: limit
          required: false
          in: query
          description: The limit of the number of results returned
          schema:
            minimum: 1
            default: 10
            type: number
        - name: offset
          required: false
          in: query
          description: The offset of the returned results
          schema:
            default: 0
            type: number
        - name: sortBy
          required: false
          in: query
          description: The field to sort the results by
          schema:
            default: createdAt
            type: string
        - name: sortDirection
          required: false
          in: query
          description: The direction to sort the results by
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - name: startDate
          required: false
          in: query
          description: The start date to search from
          schema:
            type: string
      responses:
        '200':
          description: Successfully returned paginated results
          content:
            application/json:
              schema:
                allOf:
                  - properties:
                      aggregates:
                        items:
                          $ref: '#/components/schemas/AggregateFieldResult'
                        type: array
                      metadata:
                        $ref: '#/components/schemas/Metadata'
                      results:
                        items:
                          $ref: '#/components/schemas/ApiTokenEntity'
                        type: array
                title: PaginatedResponseOfApiTokenEntity
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - API Tokens
      security:
        - bearer: []
  /organizations/{orgname}/api-tokens/{id}:
    get:
      operationId: ApiTokensController_findOne
      summary: Get a API token
      description: Get a API token. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved the API token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiTokenEntity'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - API Tokens
      security:
        - bearer: []
    delete:
      operationId: ApiTokensController_remove
      summary: Delete a API token
      description: Delete a API token. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted the API token
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - API Tokens
      security:
        - bearer: []
    patch:
      operationId: ApiTokensController_update
      summary: Update a API token
      description: Update a API token. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiTokenDto'
      responses:
        '200':
          description: Successfully updated the API token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiTokenEntity'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - API Tokens
      security:
        - bearer: []
  /organizations/{orgname}/members:
    post:
      operationId: MembersController_create
      summary: Create a new member
      description: Create a new member. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMemberDto'
      responses:
        '201':
          description: Successfully created a new member
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberEntity'
        '400':
          description: Bad request when creating the member
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Organization - Members
      security:
        - bearer: []
    get:
      operationId: MembersController_findAll
      summary: Get all members
      description: Get all members. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: aggregates
          required: false
          in: query
          description: Aggregates to collect for the search results
          schema:
            default: []
            type: array
            items:
              $ref: '#/components/schemas/AggregateFieldQuery'
        - name: endDate
          required: false
          in: query
          description: The end date to search to
          schema:
            type: string
        - name: filters
          required: false
          in: query
          description: Filter fields and values
          schema:
            default: []
            type: array
            items:
              $ref: '#/components/schemas/FieldFieldQuery'
        - name: limit
          required: false
          in: query
          description: The limit of the number of results returned
          schema:
            minimum: 1
            default: 10
            type: number
        - name: offset
          required: false
          in: query
          description: The offset of the returned results
          schema:
            default: 0
            type: number
        - name: sortBy
          required: false
          in: query
          description: The field to sort the results by
          schema:
            default: createdAt
            type: string
        - name: sortDirection
          required: false
          in: query
          description: The direction to sort the results by
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - name: startDate
          required: false
          in: query
          description: The start date to search from
          schema:
            type: string
      responses:
        '200':
          description: Successfully returned paginated results
          content:
            application/json:
              schema:
                allOf:
                  - properties:
                      aggregates:
                        items:
                          $ref: '#/components/schemas/AggregateFieldResult'
                        type: array
                      metadata:
                        $ref: '#/components/schemas/Metadata'
                      results:
                        items:
                          $ref: '#/components/schemas/MemberEntity'
                        type: array
                title: PaginatedResponseOfMemberEntity
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Organization - Members
      security:
        - bearer: []
  /organizations/{orgname}/members/{memberId}:
    get:
      operationId: MembersController_findOne
      summary: Get a member
      description: Get a member. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: memberId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved the member
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberEntity'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Organization - Members
      security:
        - bearer: []
    delete:
      operationId: MembersController_remove
      summary: Delete a member
      description: Delete a member. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: memberId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted the member
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Organization - Members
      security:
        - bearer: []
    patch:
      operationId: MembersController_update
      summary: Update a member
      description: Update a member. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: memberId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMemberDto'
      responses:
        '200':
          description: Successfully updated the member
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberEntity'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Organization - Members
      security:
        - bearer: []
  /organizations/{orgname}/members/join:
    post:
      operationId: MembersController_join
      summary: Accept invitation to this organization
      description: Accept invitation to this organization. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Member was successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberEntity'
        '401':
          description: Unauthorized
        '403':
          description: Email not verified
        '404':
          description: Not Found
      tags:
        - Organization - Members
      security:
        - bearer: []
  /organizations/{orgname}/labels:
    post:
      operationId: LabelsController_create
      summary: Create a new label
      description: Create a new label. USER and ADMIN can access this endpoint.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLabelDto'
      responses:
        '201':
          description: Successfully created a new label
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelEntity'
        '400':
          description: Bad request when creating the label
        '401':
          description: Unauthorized
        '404':
          description: Not Found
      tags:
        - Labels
      security:
        - bearer: []
    get:
      operationId: LabelsController_findAll
      summary: Get all labels
      description: Get all labels. ADMIN ONLY.
      parameters:
        - name: aggregates
          required: false
          in: query
          description: Aggregates to collect for the search results
          schema:
            default: []
            type: array
            items:
              $ref: '#/components/schemas/AggregateFieldQuery'
        - name: endDate
          required: false
          in: query
          description: The end date to search to
          schema:
            type: string
        - name: filters
          required: false
          in: query
          description: Filter fields and values
          schema:
            default: []
            type: array
            items:
              $ref: '#/components/schemas/FieldFieldQuery'
        - name: limit
          required: false
          in: query
          description: The limit of the number of results returned
          schema:
            minimum: 1
            default: 10
            type: number
        - name: offset
          required: false
          in: query
          description: The offset of the returned results
          schema:
            default: 0
            type: number
        - name: sortBy
          required: false
          in: query
          description: The field to sort the results by
          schema:
            default: createdAt
            type: string
        - name: sortDirection
          required: false
          in: query
          description: The direction to sort the results by
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - name: startDate
          required: false
          in: query
          description: The start date to search from
          schema:
            type: string
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully returned paginated results
          content:
            application/json:
              schema:
                allOf:
                  - properties:
                      aggregates:
                        items:
                          $ref: '#/components/schemas/AggregateFieldResult'
                        type: array
                      metadata:
                        $ref: '#/components/schemas/Metadata'
                      results:
                        items:
                          $ref: '#/components/schemas/LabelEntity'
                        type: array
                title: PaginatedResponseOfLabelEntity
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Labels
      security:
        - bearer: []
  /organizations/{orgname}/labels/{labelId}:
    get:
      operationId: LabelsController_findOne
      summary: Get a label
      description: Get a label. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: labelId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved the label
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelEntity'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Labels
      security:
        - bearer: []
    delete:
      operationId: LabelsController_remove
      summary: Delete a label
      description: Delete a label. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: labelId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted the label
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Labels
      security:
        - bearer: []
    patch:
      operationId: LabelsController_update
      summary: Update a label
      description: Update a label. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: labelId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLabelDto'
      responses:
        '200':
          description: Successfully updated the label
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelEntity'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Labels
      security:
        - bearer: []
  /organizations/{orgname}/storage/delete:
    delete:
      operationId: StorageController_delete
      summary: Delete file or directory
      description: >-
        This endpoint will delete a file or directory in the organization's
        secure storage at the specified path. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: path
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Path was successfully deleted
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Storage
      security:
        - bearer: []
  /organizations/{orgname}/storage/read:
    post:
      operationId: StorageController_getReadUrl
      summary: Read file
      description: >-
        This endpoint will return a url for reading a file in the organization's
        secure storage. It will be valid for 15 minutes. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PathDto'
      responses:
        '201':
          description: Read  url was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadUrlDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Storage
      security:
        - bearer: []
  /organizations/{orgname}/storage/write:
    post:
      operationId: StorageController_getWriteUrl
      summary: Write file
      description: >-
        This endpoint will return a url for writing to a file location in the
        organization's secure storage. You must write your file to the url
        returned by this endpoint. If you use is isDir param, it will create a
        directory instead of a file and you do not need to write to the url.
        ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PathDto'
      responses:
        '201':
          description: Write urls was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WriteUrlDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Storage
      security:
        - bearer: []
  /organizations/{orgname}/storage/items:
    get:
      operationId: StorageController_listDirectory
      summary: Show directory
      description: >-
        This endpoint will return a list of files and directories in the
        organization's secure storage at the specified path. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: path
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Path was successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StorageItemDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Storage
      security:
        - bearer: []
  /organizations/{orgname}/content:
    post:
      operationId: ContentController_create
      summary: Create a new content
      description: Create a new content. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContentDto'
      responses:
        '201':
          description: Successfully created a new content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentEntity'
        '400':
          description: Bad request when creating the content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Content
      security:
        - bearer: []
    get:
      operationId: ContentController_findAll
      summary: Get all contents
      description: Get all contents. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: aggregates
          required: false
          in: query
          description: Aggregates to collect for the search results
          schema:
            default: []
            type: array
            items:
              $ref: '#/components/schemas/AggregateFieldQuery'
        - name: endDate
          required: false
          in: query
          description: The end date to search to
          schema:
            type: string
        - name: filters
          required: false
          in: query
          description: Filter fields and values
          schema:
            default: []
            type: array
            items:
              $ref: '#/components/schemas/FieldFieldQuery'
        - name: limit
          required: false
          in: query
          description: The limit of the number of results returned
          schema:
            minimum: 1
            default: 10
            type: number
        - name: offset
          required: false
          in: query
          description: The offset of the returned results
          schema:
            default: 0
            type: number
        - name: sortBy
          required: false
          in: query
          description: The field to sort the results by
          schema:
            default: createdAt
            type: string
        - name: sortDirection
          required: false
          in: query
          description: The direction to sort the results by
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - name: startDate
          required: false
          in: query
          description: The start date to search from
          schema:
            type: string
      responses:
        '200':
          description: Successfully returned paginated results
          content:
            application/json:
              schema:
                allOf:
                  - properties:
                      aggregates:
                        items:
                          $ref: '#/components/schemas/AggregateFieldResult'
                        type: array
                      metadata:
                        $ref: '#/components/schemas/Metadata'
                      results:
                        items:
                          $ref: '#/components/schemas/ContentEntity'
                        type: array
                title: PaginatedResponseOfContentEntity
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Content
      security:
        - bearer: []
  /organizations/{orgname}/content/{contentId}:
    get:
      operationId: ContentController_findOne
      summary: Get a content
      description: Get a content. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: contentId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved the content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentEntity'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Content
      security:
        - bearer: []
    delete:
      operationId: ContentController_remove
      summary: Delete a content
      description: Delete a content. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: contentId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted the content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Content
      security:
        - bearer: []
    patch:
      operationId: ContentController_update
      summary: Update a content
      description: Update a content. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: contentId
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContentDto'
      responses:
        '200':
          description: Successfully updated the content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentEntity'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Content
      security:
        - bearer: []
  /organizations/{orgname}/runs:
    post:
      operationId: RunsController_create
      summary: Create a new run
      description: Create a new run. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRunDto'
      responses:
        '201':
          description: Successfully created a new run
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunEntity'
        '400':
          description: Bad request when creating the run
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Runs
      security:
        - bearer: []
    get:
      operationId: RunsController_findAll
      summary: Get all runs
      description: Get all runs. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: aggregates
          required: false
          in: query
          description: Aggregates to collect for the search results
          schema:
            default: []
            type: array
            items:
              $ref: '#/components/schemas/AggregateFieldQuery'
        - name: endDate
          required: false
          in: query
          description: The end date to search to
          schema:
            type: string
        - name: filters
          required: false
          in: query
          description: Filter fields and values
          schema:
            default: []
            type: array
            items:
              $ref: '#/components/schemas/FieldFieldQuery'
        - name: limit
          required: false
          in: query
          description: The limit of the number of results returned
          schema:
            minimum: 1
            default: 10
            type: number
        - name: offset
          required: false
          in: query
          description: The offset of the returned results
          schema:
            default: 0
            type: number
        - name: sortBy
          required: false
          in: query
          description: The field to sort the results by
          schema:
            default: createdAt
            type: string
        - name: sortDirection
          required: false
          in: query
          description: The direction to sort the results by
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - name: startDate
          required: false
          in: query
          description: The start date to search from
          schema:
            type: string
      responses:
        '200':
          description: Successfully returned paginated results
          content:
            application/json:
              schema:
                allOf:
                  - properties:
                      aggregates:
                        items:
                          $ref: '#/components/schemas/AggregateFieldResult'
                        type: array
                      metadata:
                        $ref: '#/components/schemas/Metadata'
                      results:
                        items:
                          $ref: '#/components/schemas/RunEntity'
                        type: array
                title: PaginatedResponseOfRunEntity
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Runs
      security:
        - bearer: []
  /organizations/{orgname}/runs/{runId}:
    get:
      operationId: RunsController_findOne
      summary: Get a run
      description: Get a run. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: runId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved the run
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunEntity'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Runs
      security:
        - bearer: []
    delete:
      operationId: RunsController_remove
      summary: Delete a run
      description: Delete a run. ADMIN ONLY.
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: runId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Successfully deleted the run
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      tags:
        - Runs
      security:
        - bearer: []
info:
  title: Arches AI API
  description: The Arches AI API
  version: v1
  contact: {}
tags: []
servers:
  - url: http://bob:3001
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    CreatePipelineStepDto:
      type: object
      properties:
        dependsOn:
          description: An array of steps that this step depends on
          example:
            - step-id
            - step-id-2
          type: array
          items:
            type: string
        toolId:
          type: string
          description: This is the ID of the tool that this step uses.
          example: tool-id
        id:
          type: string
          description: The ID of the item
          example: item-id
      required:
        - dependsOn
        - toolId
        - id
    CreatePipelineDto:
      type: object
      properties:
        pipelineSteps:
          description: An array of pipeline tools to be added to the pipeline
          type: array
          items:
            $ref: '#/components/schemas/CreatePipelineStepDto'
        name:
          type: string
          description: The name of the pipeline
          example: my-pipeline
        description:
          type: string
          nullable: true
          description: The description of the pipeline
          example: This pipeline does something
      required:
        - pipelineSteps
        - name
        - description
    SubItemEntity:
      type: object
      properties:
        id:
          type: string
          description: The id of the item
          example: item-id
        name:
          type: string
          description: The name of the item
          example: item-name
      required:
        - id
        - name
    ToolEntity:
      type: object
      properties:
        description:
          type: string
          description: The tool description
          example: This tool converts a file to text, regardless of the file type.
        inputType:
          type: string
          description: The tools input type
          enum:
            - TEXT
            - IMAGE
            - VIDEO
            - AUDIO
          example: FILE
        name:
          type: string
          description: The tool's name
          example: extract-text
        orgname:
          type: string
          description: The organization name
          example: my-organization
        outputType:
          type: string
          description: The tools output type
          enum:
            - TEXT
            - IMAGE
            - VIDEO
            - AUDIO
          example: TEXT
        toolBase:
          type: string
          description: The tool's base path
          example: extract-text
        createdAt:
          format: date-time
          type: string
          description: The date that this item was created
          example: '2023-07-11T21:09:20.895Z'
        id:
          type: string
          description: The ID of the item
          example: item-id
      required:
        - description
        - inputType
        - name
        - orgname
        - outputType
        - toolBase
        - createdAt
        - id
    PipelineStepEntity:
      type: object
      properties:
        dependents:
          description: The order of the step in the pipeline
          type: array
          items:
            $ref: '#/components/schemas/SubItemEntity'
        dependsOn:
          description: These are the steps that this step depends on.
          type: array
          items:
            $ref: '#/components/schemas/SubItemEntity'
        pipelineId:
          type: string
          description: The ID of the pipelin that this step belongs to
          example: pipeline-id
        tool:
          description: The name of the tool that this step uses.
          allOf:
            - $ref: '#/components/schemas/ToolEntity'
        toolId:
          type: string
          description: This is the ID of the tool that this step uses.
          example: tool-id
        createdAt:
          format: date-time
          type: string
          description: The date that this item was created
          example: '2023-07-11T21:09:20.895Z'
        id:
          type: string
          description: The ID of the item
          example: item-id
      required:
        - dependents
        - dependsOn
        - pipelineId
        - tool
        - toolId
        - createdAt
        - id
    PipelineEntity:
      type: object
      properties:
        description:
          type: string
          nullable: true
          description: The description of the pipeline
          example: This pipeline does something
        name:
          type: string
          description: The name of the pipeline
          example: my-pipeline
        orgname:
          type: string
          description: The name of the organization that this pipeline belongs to
          example: my-org
        pipelineSteps:
          description: The steps in the pipeline
          type: array
          items:
            $ref: '#/components/schemas/PipelineStepEntity'
        createdAt:
          format: date-time
          type: string
          description: The date that this item was created
          example: '2023-07-11T21:09:20.895Z'
        id:
          type: string
          description: The ID of the item
          example: item-id
      required:
        - description
        - name
        - orgname
        - pipelineSteps
        - createdAt
        - id
    UpdatePipelineDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the pipeline
          example: my-pipeline
        description:
          type: string
          nullable: true
          description: The description of the pipeline
          example: This pipeline does something
        pipelineSteps:
          description: An array of pipeline tools to be added to the pipeline
          type: array
          items:
            $ref: '#/components/schemas/CreatePipelineStepDto'
    ConfirmationTokenDto:
      type: object
      properties:
        token:
          type: string
          description: >-
            The token used to verify your authorization event. This token is
            generated by the server and sent to the user's email.
          example: supersecre
      required:
        - token
    TokenDto:
      type: object
      properties:
        accessToken:
          type: string
          description: The authorization token that can be used to access Arches AI
          example: supersecretauthorizationtoken
        refreshToken:
          type: string
          description: The refresh token that can be used to get a new access token
          example: supersecretauthorizationtoken
      required:
        - accessToken
        - refreshToken
    EmailRequestDto:
      type: object
      properties:
        email:
          type: string
          description: The e-mail to send the confirmation token to
          example: user@archesai.com
      required:
        - email
    LoginDto:
      type: object
      properties:
        email:
          type: string
          description: The user's e-mail
          example: example@archesai.com
        password:
          type: string
          minLength: 7
          description: The password to create and/or login to an account
          example: password
      required:
        - email
        - password
    ConfirmationTokenWithNewPasswordDto:
      type: object
      properties:
        token:
          type: string
          description: >-
            The token used to verify your authorization event. This token is
            generated by the server and sent to the user's email.
          example: supersecre
        newPassword:
          type: string
          description: The new password
          example: newPassword
      required:
        - token
        - newPassword
    RegisterDto:
      type: object
      properties:
        email:
          type: string
          description: The user's e-mail
          example: example@archesai.com
        password:
          type: string
          minLength: 7
          description: The password to create and/or login to an account
          example: password
      required:
        - email
        - password
    AuthProviderEntity:
      type: object
      properties:
        provider:
          type: string
          description: The auth provider's provider
          enum:
            - LOCAL
            - FIREBASE
            - TWITTER
        providerId:
          type: string
          description: The auth provider's provider ID
        userId:
          type: string
          description: The auth provider's user ID
        createdAt:
          format: date-time
          type: string
          description: The date that this item was created
          example: '2023-07-11T21:09:20.895Z'
        id:
          type: string
          description: The ID of the item
          example: item-id
      required:
        - provider
        - providerId
        - userId
        - createdAt
        - id
    MemberEntity:
      type: object
      properties:
        inviteAccepted:
          type: boolean
          description: Whether the invite was accepted
          example: false
        inviteEmail:
          type: string
          description: The invited email of this member
          example: invited-user@archesai.com
        orgname:
          type: string
          description: The organization name
          example: my-organization
        role:
          type: string
          description: The role of the member
          enum:
            - USER
            - ADMIN
        username:
          type: string
          nullable: true
          description: The username of this member
          example: jonathan
        createdAt:
          format: date-time
          type: string
          description: The date that this item was created
          example: '2023-07-11T21:09:20.895Z'
        id:
          type: string
          description: The ID of the item
          example: item-id
      required:
        - inviteAccepted
        - inviteEmail
        - orgname
        - role
        - createdAt
        - id
    UserEntity:
      type: object
      properties:
        authProviders:
          description: The memberships of the currently signed in user
          type: array
          items:
            $ref: '#/components/schemas/AuthProviderEntity'
        deactivated:
          type: boolean
          description: Whether or not the user is deactivated
          example: false
        defaultOrgname:
          type: string
          description: The user's default organization name
          example: my-organization
        displayName:
          type: string
          description: The user's display name
          example: John Smith
        email:
          type: string
          description: The user's e-mail
          example: example@archesai.com
        emailVerified:
          type: boolean
          description: Whether or not the user's e-mail has been verified
        firstName:
          type: string
          description: The user's first name
          example: John
        lastName:
          type: string
          description: The user's last name
          example: Smith
        memberships:
          description: The memberships of the currently signed in user
          type: array
          items:
            $ref: '#/components/schemas/MemberEntity'
        photoUrl:
          type: string
          description: The user's photo url
          example: /avatar.png
        username:
          type: string
          minLength: 5
          description: The user's username
          example: jonathan
        createdAt:
          format: date-time
          type: string
          description: The date that this item was created
          example: '2023-07-11T21:09:20.895Z'
        id:
          type: string
          description: The ID of the item
          example: item-id
      required:
        - authProviders
        - deactivated
        - defaultOrgname
        - displayName
        - email
        - emailVerified
        - firstName
        - lastName
        - memberships
        - photoUrl
        - username
        - createdAt
        - id
    UpdateUserDto:
      type: object
      properties:
        defaultOrgname:
          type: string
          description: The user's default organization name
          example: my-organization
        firstName:
          type: string
          description: The user's first name
          example: John
        lastName:
          type: string
          description: The user's last name
          example: Smith
    CreateOrganizationDto:
      type: object
      properties:
        billingEmail:
          type: string
          description: The billing email to use for the organization
          example: example@test.com
        orgname:
          type: string
          description: The name of the organization to create
          example: organization-name
      required:
        - billingEmail
        - orgname
    OrganizationEntity:
      type: object
      properties:
        billingEmail:
          type: string
          description: The billing email to use for the organization
          example: example@test.com
        credits:
          type: number
          description: The number of credits you have remaining for this organization
          example: 500000
        orgname:
          type: string
          description: The name of the organization to create
          example: organization-name
        plan:
          type: string
          description: The plan that the organization is subscribed to
          enum:
            - FREE
            - BASIC
            - STANDARD
            - PREMIUM
            - UNLIMITED
          example: FREE
        createdAt:
          format: date-time
          type: string
          description: The date that this item was created
          example: '2023-07-11T21:09:20.895Z'
        id:
          type: string
          description: The ID of the item
          example: item-id
      required:
        - billingEmail
        - credits
        - orgname
        - plan
        - createdAt
        - id
    UpdateOrganizationDto:
      type: object
      properties:
        billingEmail:
          type: string
          description: The billing email to use for the organization
          example: example@test.com
      required:
        - billingEmail
    BillingUrlEntity:
      type: object
      properties:
        url:
          type: string
          description: The url that will bring you to the necessary stripe page
          example: www.stripe.com/checkout/filchat-io
      required:
        - url
    PlanEntity:
      type: object
      properties:
        currency:
          type: string
          description: The currency of the plan
          example: usd
        description:
          type: string
          nullable: true
          example: A plan for a small business
        id:
          type: string
          description: The ID of the plan
          example: prod_1234567890
        metadata:
          type: object
        name:
          type: string
          description: The name of the plan
          example: Small Business Plan
        priceId:
          type: string
          description: The ID of the price associated with the plan
          example: price_1234567890
        priceMetadata:
          type: object
        recurring:
          type: object
          nullable: true
        unitAmount:
          type: number
          description: The amount in cents to be charged on the interval specified
          example: 1000
      required:
        - currency
        - id
        - name
        - priceId
        - unitAmount
    Address:
      type: object
      properties:
        city:
          type: object
          nullable: true
          description: City/District/Suburb/Town/Village.
          example: San Francisco
        country:
          type: object
          nullable: true
          description: Two-letter country code (ISO 3166-1 alpha-2).
          example: US
        line1:
          type: object
          nullable: true
          description: Address line 1 (e.g., street, PO Box, or company name).
          example: 123 Main Street
        line2:
          type: object
          nullable: true
          description: Address line 2 (e.g., apartment, suite, unit, or building).
          example: Apt 4B
        postal_code:
          type: object
          nullable: true
          description: ZIP or postal code.
          example: '94111'
        state:
          type: object
          nullable: true
          description: State/County/Province/Region.
          example: CA
      required:
        - city
        - country
        - line1
        - line2
        - postal_code
        - state
    BillingDetails:
      type: object
      properties:
        address:
          description: Billing address associated with the payment method.
          allOf:
            - $ref: '#/components/schemas/Address'
        email:
          type: object
          nullable: true
          description: Email address associated with the payment method.
          example: customer@example.com
        name:
          type: object
          nullable: true
          description: Full name associated with the payment method.
          example: Jane Doe
        phone:
          type: object
          nullable: true
          description: Phone number associated with the payment method.
          example: '+1234567890'
      required:
        - address
        - email
        - name
        - phone
    CardDetails:
      type: object
      properties:
        brand:
          type: string
          description: Card brand (e.g., Visa, MasterCard).
          example: visa
        country:
          type: string
          description: Two-letter ISO code representing the country of the card.
          example: US
        exp_month:
          type: number
          description: Two-digit number representing the card’s expiration month.
          example: 12
        exp_year:
          type: number
          description: Four-digit number representing the card’s expiration year.
          example: 2024
        fingerprint:
          type: object
          nullable: true
          description: Unencrypted PAN tokens (optional, sensitive).
        funding:
          type: string
          description: Card funding type (credit, debit, prepaid, unknown).
          example: credit
        last4:
          type: string
          description: The last four digits of the card.
          example: '4242'
      required:
        - brand
        - country
        - exp_month
        - exp_year
        - fingerprint
        - funding
        - last4
    PaymentMethodEntity:
      type: object
      properties:
        billing_details:
          description: Billing details associated with the payment method.
          allOf:
            - $ref: '#/components/schemas/BillingDetails'
        card:
          nullable: true
          description: If the PaymentMethod is a card, this contains the card details.
          allOf:
            - $ref: '#/components/schemas/CardDetails'
        customer:
          type: object
          nullable: true
          description: ID of the customer this payment method is saved to.
          example: cus_J0a1b2c3d4e5f6g7h8i9
        id:
          type: string
          description: Unique identifier for the payment method
          example: pm_1J2Y3A4B5C6D7E8F9G0H
        type:
          type: string
          description: The type of the PaymentMethod. An example value is "card".
          example: card
      required:
        - billing_details
        - card
        - customer
        - id
        - type
    CreateToolDto:
      type: object
      properties:
        description:
          type: string
          description: The tool description
          example: This tool converts a file to text, regardless of the file type.
        inputType:
          type: string
          description: The tools input type
          enum:
            - TEXT
            - IMAGE
            - VIDEO
            - AUDIO
          example: FILE
        name:
          type: string
          description: The tool's name
          example: extract-text
        outputType:
          type: string
          description: The tools output type
          enum:
            - TEXT
            - IMAGE
            - VIDEO
            - AUDIO
          example: TEXT
        toolBase:
          type: string
          description: The tool's base path
          example: extract-text
      required:
        - description
        - inputType
        - name
        - outputType
        - toolBase
    UpdateToolDto:
      type: object
      properties:
        description:
          type: string
          description: The tool description
          example: This tool converts a file to text, regardless of the file type.
        inputType:
          type: string
          description: The tools input type
          enum:
            - TEXT
            - IMAGE
            - VIDEO
            - AUDIO
          example: FILE
        name:
          type: string
          description: The tool's name
          example: extract-text
        outputType:
          type: string
          description: The tools output type
          enum:
            - TEXT
            - IMAGE
            - VIDEO
            - AUDIO
          example: TEXT
        toolBase:
          type: string
          description: The tool's base path
          example: extract-text
    CreateApiTokenDto:
      type: object
      properties:
        domains:
          type: string
          default: '*'
          description: The domains that can access this API token
          example: archesai.com,localhost:3000
        name:
          type: string
          description: The name of the API token
          example: My Token
        role:
          type: string
          description: The role of the API token
          enum:
            - USER
            - ADMIN
      required:
        - domains
        - name
        - role
    ApiTokenEntity:
      type: object
      properties:
        domains:
          type: string
          default: '*'
          description: The domains that can access this API token
          example: archesai.com,localhost:3000
        key:
          type: string
          description: The API token key. This will only be shown once
          example: '********1234567890'
        name:
          type: string
          description: The name of the API token
          example: My Token
        orgname:
          type: string
          description: The organization name
          example: my-organization
        role:
          type: string
          description: The role of the API token
          enum:
            - USER
            - ADMIN
        username:
          type: string
          description: The username of the user who owns this API token
          example: jonathan
        createdAt:
          format: date-time
          type: string
          description: The date that this item was created
          example: '2023-07-11T21:09:20.895Z'
        id:
          type: string
          description: The ID of the item
          example: item-id
      required:
        - domains
        - key
        - name
        - orgname
        - role
        - username
        - createdAt
        - id
    UpdateApiTokenDto:
      type: object
      properties:
        domains:
          type: string
          default: '*'
          description: The domains that can access this API token
          example: archesai.com,localhost:3000
        name:
          type: string
          description: The name of the API token
          example: My Token
        role:
          type: string
          description: The role of the API token
          enum:
            - USER
            - ADMIN
    CreateMemberDto:
      type: object
      properties:
        inviteEmail:
          type: string
          description: The invited email of this member
          example: invited-user@archesai.com
        role:
          type: string
          description: The role of the member
          enum:
            - USER
            - ADMIN
      required:
        - inviteEmail
        - role
    UpdateMemberDto:
      type: object
      properties:
        inviteEmail:
          type: string
          description: The invited email of this member
          example: invited-user@archesai.com
        role:
          type: string
          description: The role of the member
          enum:
            - USER
            - ADMIN
    CreateLabelDto:
      type: object
      properties:
        name:
          type: string
          default: New Chat
          description: The chat label name
          example: What are the morals of the story in Aesop's Fables?
    LabelEntity:
      type: object
      properties:
        name:
          type: string
          default: New Chat
          description: The chat label name
          example: What are the morals of the story in Aesop's Fables?
        orgname:
          type: string
          description: The organization name
          example: my-organization
        createdAt:
          format: date-time
          type: string
          description: The date that this item was created
          example: '2023-07-11T21:09:20.895Z'
        id:
          type: string
          description: The ID of the item
          example: item-id
      required:
        - orgname
        - createdAt
        - id
    UpdateLabelDto:
      type: object
      properties:
        name:
          type: string
          default: New Chat
          description: The chat label name
          example: What are the morals of the story in Aesop's Fables?
    PathDto:
      type: object
      properties:
        isDir:
          type: boolean
          default: false
          description: Whether or not this path points to a directory
          example: false
        path:
          type: string
          description: The path that the file should upload to
          example: /location/in/storage
      required:
        - path
    ReadUrlDto:
      type: object
      properties:
        read:
          type: string
          description: >-
            A read-only url that you can use to download the file from secure
            storage
          example: www.example.com?token=read-token
      required:
        - read
    WriteUrlDto:
      type: object
      properties:
        write:
          type: string
          description: A write-only url that you can use to upload a file to secure storage
          example: www.example.com?token=write-token
      required:
        - write
    StorageItemDto:
      type: object
      properties:
        createdAt:
          format: date-time
          type: string
          description: Whether or not this is a directory
          example: true
        id:
          type: string
          description: The id of the storage item
          example: '14'
        isDir:
          type: boolean
          description: Whether or not this is a directory
          example: true
        name:
          type: string
          description: The path that the file is located in
          example: /location/in/storage
        size:
          type: number
          description: The size of the item in bytes
          example: 12341234
      required:
        - createdAt
        - id
        - isDir
        - name
        - size
    CreateContentDto:
      type: object
      properties:
        name:
          type: string
          description: The content's name
          example: my-file.pdf
        text:
          type: string
          nullable: true
          description: The content's text, if TEXT content
          example: Hello world. I am a text.
        url:
          type: string
          nullable: true
          description: The URL of the content, if AUDIO, VIDEO, IMAGE, or FILE content
          example: https://example.com/example.mp4
        labels:
          description: The labels to associate with the content
          example:
            - label-1
            - label-2
          type: array
          items:
            type: string
      required:
        - name
    ContentEntity:
      type: object
      properties:
        children:
          description: The child content, if any
          type: array
          items:
            $ref: '#/components/schemas/SubItemEntity'
        consumedBy:
          description: The tool runs that consumed this content, if any
          type: array
          items:
            $ref: '#/components/schemas/SubItemEntity'
        credits:
          type: number
          description: The number of credits used to process this content
          example: 0
        description:
          type: string
          nullable: true
          description: The content's description
          example: my-file.pdf
        labels:
          description: The content's labels
          type: array
          items:
            $ref: '#/components/schemas/SubItemEntity'
        mimeType:
          type: string
          nullable: true
          description: The MIME type of the content
          example: application/pdf
        name:
          type: string
          description: The content's name
          example: my-file.pdf
        orgname:
          type: string
          description: The organization name
          example: my-organization
        parent:
          nullable: true
          description: The parent content, if any
          allOf:
            - $ref: '#/components/schemas/SubItemEntity'
        parentId:
          type: string
          nullable: true
          description: The parent content ID, if this content is a child of another content
          example: content-id
        previewImage:
          type: string
          nullable: true
          description: The preview image of the content
          example: https://preview-image.com/example.png
        producedBy:
          nullable: true
          description: The toolRun that produced this content, if any
          allOf:
            - $ref: '#/components/schemas/SubItemEntity'
        producedById:
          type: string
          nullable: true
          description: The ID of the toolRun that produced this content, if any
          example: toolRun-id
        text:
          type: string
          nullable: true
          description: The content's text, if TEXT content
          example: Hello world. I am a text.
        url:
          type: string
          nullable: true
          description: The URL of the content, if AUDIO, VIDEO, IMAGE, or FILE content
          example: https://example.com/example.mp4
        createdAt:
          format: date-time
          type: string
          description: The date that this item was created
          example: '2023-07-11T21:09:20.895Z'
        id:
          type: string
          description: The ID of the item
          example: item-id
      required:
        - credits
        - name
        - orgname
        - createdAt
        - id
    UpdateContentDto:
      type: object
      properties:
        name:
          type: string
          description: The content's name
          example: my-file.pdf
        text:
          type: string
          nullable: true
          description: The content's text, if TEXT content
          example: Hello world. I am a text.
        url:
          type: string
          nullable: true
          description: The URL of the content, if AUDIO, VIDEO, IMAGE, or FILE content
          example: https://example.com/example.mp4
        labels:
          description: The labels to associate with the content
          example:
            - label-1
            - label-2
          type: array
          items:
            type: string
    CreateRunDto:
      type: object
      properties:
        runType:
          type: string
          description: The type of run, either an individual tool run or a pipeline run
          enum:
            - PIPELINE_RUN
            - TOOL_RUN
        pipelineId:
          type: string
          nullable: true
          description: The pipeline ID associated with the run, if applicable
          example: 123e4567-e89b-12d3-a456-426614174000
        toolId:
          type: string
          nullable: true
          description: The tool ID associated with the run, if applicable
          example: 123e4567-e89b-12d3-a456-426614174000
        contentIds:
          description: >-
            If using already created content, specify the content IDs to use as
            input for the run.
          example:
            - content-id-1
            - content-id-2
          type: array
          items:
            type: string
        text:
          type: string
          description: >-
            If using direct text input, specify the text to use as input for the
            run. It will automatically be added as content.
          example: This is the text to use as input for the run.
        url:
          type: string
          description: >-
            If using direct text input, specify the text to use as input for the
            run. It will automatically be added as content.
          example: This is a url to use as input for the run.
      required:
        - runType
    RunEntity:
      type: object
      properties:
        completedAt:
          format: date-time
          type: string
          nullable: true
          description: The timestamp when the run completed
          example: '2024-11-05T11:42:02.258Z'
        error:
          type: string
          nullable: true
          description: The error message, if any, associated with the run
          example: An unexpected error occurred.
        inputs:
          description: The inputs associated with the run
          type: array
          items:
            $ref: '#/components/schemas/SubItemEntity'
        name:
          type: string
          nullable: true
          description: The name of the run
          example: Data Processing PipelineRun
        outputs:
          description: The outputs associated with the run
          type: array
          items:
            $ref: '#/components/schemas/SubItemEntity'
        pipelineId:
          type: string
          nullable: true
          description: The pipeline ID associated with the run, if applicable
          example: 123e4567-e89b-12d3-a456-426614174000
        progress:
          type: number
          default: 0
          description: The progress of the run as a percentage
          example: 50.5
        runType:
          type: string
          description: The type of run, either an individual tool run or a pipeline run
          enum:
            - PIPELINE_RUN
            - TOOL_RUN
        startedAt:
          format: date-time
          type: string
          nullable: true
          description: The timestamp when the run started
          example: '2024-11-05T11:42:02.258Z'
        status:
          type: string
          default: QUEUED
          description: The status of the run
          enum:
            - QUEUED
            - PROCESSING
            - COMPLETE
            - ERROR
        toolId:
          type: string
          nullable: true
          description: The tool ID associated with the run, if applicable
          example: 123e4567-e89b-12d3-a456-426614174000
        createdAt:
          format: date-time
          type: string
          description: The date that this item was created
          example: '2023-07-11T21:09:20.895Z'
        id:
          type: string
          description: The ID of the item
          example: item-id
      required:
        - inputs
        - progress
        - runType
        - status
        - createdAt
        - id
    FieldFieldQuery:
      type: object
      properties:
        field:
          type: string
          description: Field to filter by
        operator:
          enum:
            - contains
            - endsWith
            - equals
            - every
            - in
            - none
            - not
            - some
            - startsWith
          type: string
          description: Operator to use for filtering
        value:
          description: Value to filter for
          oneOf:
            - type: string
            - items:
                type: string
              type: array
      required:
        - field
        - value
    AggregateFieldQuery:
      type: object
      properties:
        field:
          type: string
          description: Field to aggregate by
        granularity:
          enum:
            - day
            - month
            - week
            - year
          type: string
          description: The granularity to use for ranged aggregates
        type:
          type: string
          description: Type of aggregate to perform
          enum:
            - count
            - sum
      required:
        - field
        - type
    AggregateFieldResult:
      type: object
      properties:
        field:
          type: string
          description: Field to aggregate by
        granularity:
          enum:
            - day
            - month
            - week
            - year
          type: string
          description: The granularity to use for ranged aggregates
        type:
          type: string
          description: Type of aggregate to perform
          enum:
            - count
            - sum
        value:
          type: number
          description: The value of the aggregate
          example: 10
      required:
        - field
        - type
        - value
    Metadata:
      type: object
      properties:
        limit:
          type: number
          description: The number of results per page
          example: 10
        offset:
          type: number
          description: The current page
          example: 1
        totalResults:
          type: number
          description: The total number of results
          example: 100
      required:
        - limit
        - offset
        - totalResults
