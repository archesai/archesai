// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["linux-musl-openssl-3.0.x"]
  previewFeatures = ["postgresqlExtensions"]
}

enum RoleType {
  USER
  ADMIN
}

enum AuthProviderType {
  LOCAL
  FIREBASE
  TWITTER
}

enum ToolIOType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
}

enum RunType {
  TOOL_RUN
  PIPELINE_RUN
}

enum RunStatus {
  QUEUED
  PROCESSING
  COMPLETE
  ERROR
}

enum PlanType {
  FREE
  BASIC
  STANDARD
  PREMIUM
  UNLIMITED
}

model Content {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?

  url          String?
  credits      Int     @default(0)
  mimeType     String?
  previewImage String?

  organization Organization @relation(fields: [orgname], references: [orgname], onDelete: Cascade)
  orgname      String

  textChunks TextChunk[]
  citations  Citation[]

  runInputs  RunInputContent[]
  runOutputs RunOutputContent[]
}

model RunInputContent {
  runId     String
  contentId String

  run     Run     @relation(fields: [runId], references: [id], onDelete: Cascade)
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@id([runId, contentId])
}

model RunOutputContent {
  runId     String
  contentId String

  run     Run     @relation(fields: [runId], references: [id], onDelete: Cascade)
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@id([runId, contentId])
}

model Run {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name   String
  type   RunType
  status RunStatus @default(QUEUED)

  startedAt   DateTime?
  completedAt DateTime?
  progress    Float     @default(0)
  error       String?

  organization Organization @relation(fields: [orgname], references: [orgname], onDelete: Cascade)
  orgname      String

  // if using tool
  tool   Tool?   @relation(fields: [toolId], references: [id])
  toolId String?

  // if using pipeline
  pipeline    Pipeline? @relation(fields: [pipelineId], references: [id])
  pipelineId  String?
  parentRun   Run?      @relation("ParentChildRuns", fields: [parentRunId], references: [id])
  parentRunId String?
  childRuns   Run[]     @relation("ParentChildRuns")

  // Relations to Content via join tables
  inputContents  RunInputContent[]
  outputContents RunOutputContent[]
}

model Tool {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?

  inputType  ToolIOType
  outputType ToolIOType

  toolBase String

  organization Organization @relation(fields: [orgname], references: [orgname], onDelete: Cascade)
  orgname      String

  pipelineTools PipelineTool[]
  runs          Run[]
}

model Pipeline {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?

  organization Organization @relation(fields: [orgname], references: [orgname], onDelete: Cascade)
  orgname      String

  pipelineTools PipelineTool[]
  runs          Run[]
}

model PipelineTool {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pipeline   Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  pipelineId String

  tool   Tool   @relation(fields: [toolId], references: [id], onDelete: Cascade)
  toolId String

  dependsOn   PipelineTool?  @relation("ToolDependencies", fields: [dependsOnId], references: [id])
  dependsOnId String?
  dependents  PipelineTool[] @relation("ToolDependencies")
}

model Chatbot {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String  @default("Default Search Chatbot")
  llmBase     String
  description String? @default("You are an AI-powered search chatbot. You can answer questions about documents.")

  organization Organization @relation(fields: [orgname], references: [orgname], onDelete: Cascade)
  orgname      String

  threads   Thread[]
  apiTokens ApiToken[]
}

model Thread {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String @default("New Thread")
  credits Int    @default(0)

  organization Organization @relation(fields: [orgname], references: [orgname], onDelete: Cascade)
  orgname      String
  chatbot      Chatbot      @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  chatbotId    String

  messages Message[]
}

model Message {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  question         String
  answer           String
  contextLength    Int
  answerLength     Int
  topK             Int
  similarityCutoff Float  @default(0.7)
  temperature      Float  @default(0)
  credits          Int    @default(0)

  thread   Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId String

  citations Citation[]
}

model Citation {
  id         String @id @default(uuid())
  similarity Float

  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String

  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId String
}

model AuthProvider {
  id         String           @id @default(uuid())
  provider   AuthProviderType
  providerId String
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  createdAt  DateTime         @default(now())

  @@unique([provider, providerId])
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username       String  @unique
  email          String  @unique
  firstName      String  @default("")
  lastName       String  @default("")
  emailVerified  Boolean @default(false)
  deactivated    Boolean @default(false)
  photoUrl       String?
  defaultOrgname String?
  password       String?

  refreshToken String?

  memberships   Member[]
  apiTokens     ApiToken[]
  authProviders AuthProvider[]
  arTokens      ARToken[]
}

model TextChunk {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text      String
  embedding Unsupported("vector")?

  organization Organization @relation(fields: [orgname], references: [orgname], onDelete: Cascade)
  orgname      String

  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentId String
}

model Organization {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stripeCustomerId String   @unique
  orgname          String   @unique
  billingEmail     String
  credits          Int      @default(0)
  plan             PlanType @default(FREE)

  members   Member[]
  apiTokens ApiToken[]

  content    Content[]
  textChunks TextChunk[]

  chatbots Chatbot[]
  threads  Thread[]

  tools     Tool[]
  pipelines Pipeline[]
  runs      Run[]
}

model Member {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inviteAccepted Boolean  @default(false)
  inviteEmail    String
  role           RoleType @default(USER)

  organization Organization @relation(fields: [orgname], references: [orgname], onDelete: Cascade)
  orgname      String
  user         User?        @relation(fields: [username], references: [username], onDelete: Cascade)
  username     String?

  @@unique([inviteEmail, orgname])
  @@unique([username, orgname])
}

model ApiToken {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String   @default("")
  role    RoleType @default(USER)
  key     String
  domains String   @default("*")

  organization Organization @relation(fields: [orgname], references: [orgname], onDelete: Cascade)
  orgname      String
  user         User?        @relation(fields: [username], references: [username], onDelete: Cascade)
  username     String?

  chatbots Chatbot[]
}

model ARToken {
  id        String      @id @default(uuid())
  type      ARTokenType
  token     String // Hashed token
  expiresAt DateTime
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  newEmail  String? // For email change tokens
}

enum ARTokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  EMAIL_CHANGE
}
