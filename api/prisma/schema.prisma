// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["linux-musl-openssl-3.0.x"]
  previewFeatures = ["postgresqlExtensions"]
}

enum RoleType {
  USER
  ADMIN
}

enum AuthProviderType {
  LOCAL
  FIREBASE
  TWITTER
}

enum ToolIOType {
  TEXT
  IMAGE
  VIDEO
  AUDIO
}

enum RunRole {
  INPUT
  OUTPUT
}

enum RunStatus {
  QUEUED
  PROCESSING
  COMPLETE
  ERROR
}

enum PlanType {
  FREE
  BASIC
  STANDARD
  PREMIUM
  UNLIMITED
}

model Content {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url  String?
  text String?

  name        String
  description String?
  embedding   Unsupported("vector")?

  credits      Int     @default(0)
  mimeType     String?
  previewImage String?

  organization Organization @relation(fields: [orgname], references: [orgname], onDelete: Cascade)
  orgname      String

  // Parent-Child Relations
  parent   Content?  @relation("ContentParentChildren", fields: [parentId], references: [id])
  parentId String?
  children Content[] @relation("ContentParentChildren")

  // Data lineage fields
  producedBy   Transformation?  @relation("ContentProducedBy", fields: [producedById], references: [id])
  producedById String?
  consumedBy   Transformation[] @relation("ContentConsumedBy")

  labels Label[]
}

model PipelineRun {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name   String
  status RunStatus @default(QUEUED)

  startedAt   DateTime?
  completedAt DateTime?
  progress    Float     @default(0)
  error       String?

  organization Organization @relation(fields: [orgname], references: [orgname], onDelete: Cascade)
  orgname      String

  // Pipeline Association
  pipeline   Pipeline @relation(fields: [pipelineId], references: [id])
  pipelineId String

  // Pipeline Step Runs
  transformations Transformation[]
}

model Transformation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name   String
  status RunStatus @default(QUEUED)

  startedAt   DateTime?
  completedAt DateTime?
  progress    Float     @default(0)
  error       String?

  // PipelineRun Relation
  pipelineRun   PipelineRun @relation(fields: [pipelineRunId], references: [id], onDelete: Cascade)
  pipelineRunId String

  // PipelineStep Relation
  pipelineStep   PipelineStep @relation(fields: [pipelineStepId], references: [id], onDelete: Cascade)
  pipelineStepId String

  // Data lineage fields
  inputs  Content[] @relation("ContentConsumedBy")
  outputs Content[] @relation("ContentProducedBy")

  @@unique([pipelineRunId, pipelineStepId])
}

model Tool {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?

  inputType  ToolIOType
  outputType ToolIOType

  toolBase String

  organization Organization @relation(fields: [orgname], references: [orgname], onDelete: Cascade)
  orgname      String

  pipelineSteps PipelineStep[]
}

model Pipeline {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?

  organization Organization @relation(fields: [orgname], references: [orgname], onDelete: Cascade)
  orgname      String

  pipelineSteps PipelineStep[]
  runs          PipelineRun[]
}

model PipelineStep {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  pipeline   Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  pipelineId String

  tool   Tool   @relation(fields: [toolId], references: [id], onDelete: Cascade)
  toolId String

  dependsOn   PipelineStep?  @relation("ToolDependencies", fields: [dependsOnId], references: [id])
  dependsOnId String?
  dependents  PipelineStep[] @relation("ToolDependencies")

  transformations Transformation[]
}

model Label {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  organization Organization @relation(fields: [orgname], references: [orgname], onDelete: Cascade)
  orgname      String
  contents     Content[]

  @@unique([name, orgname])
}

model AuthProvider {
  id         String           @id @default(uuid())
  provider   AuthProviderType
  providerId String
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  createdAt  DateTime         @default(now())

  @@unique([provider, providerId])
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username       String  @unique
  email          String  @unique
  firstName      String  @default("")
  lastName       String  @default("")
  emailVerified  Boolean @default(false)
  deactivated    Boolean @default(false)
  photoUrl       String?
  defaultOrgname String?
  password       String?

  refreshToken String?

  memberships   Member[]
  apiTokens     ApiToken[]
  authProviders AuthProvider[]
  arTokens      ARToken[]
}

model Organization {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stripeCustomerId String   @unique
  orgname          String   @unique
  billingEmail     String
  credits          Int      @default(0)
  plan             PlanType @default(FREE)

  members   Member[]
  apiTokens ApiToken[]
  content   Content[]
  labels    Label[]
  tools     Tool[]
  pipelines Pipeline[]
  runs      PipelineRun[]
}

model Member {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inviteAccepted Boolean  @default(false)
  inviteEmail    String
  role           RoleType @default(USER)

  organization Organization @relation(fields: [orgname], references: [orgname], onDelete: Cascade)
  orgname      String
  user         User?        @relation(fields: [username], references: [username], onDelete: Cascade)
  username     String?

  @@unique([inviteEmail, orgname])
  @@unique([username, orgname])
}

model ApiToken {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String   @default("")
  role    RoleType @default(USER)
  key     String
  domains String   @default("*")

  organization Organization @relation(fields: [orgname], references: [orgname], onDelete: Cascade)
  orgname      String
  user         User?        @relation(fields: [username], references: [username], onDelete: Cascade)
  username     String?
}

model ARToken {
  id        String      @id @default(uuid())
  type      ARTokenType
  token     String // Hashed token
  expiresAt DateTime
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  newEmail  String? // For email change tokens
}

enum ARTokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  EMAIL_CHANGE
}
