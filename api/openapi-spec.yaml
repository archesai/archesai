openapi: 3.0.0
paths:
  /organizations/{orgname}/pipelines:
    post:
      operationId: PipelinesController_create
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePipelineDto'
      responses:
        '201':
          description: pipeline created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineEntity'
      security:
        - bearer: []
      summary: Create a new pipeline
      tags:
        - Pipelines
    get:
      operationId: PipelinesController_findAll
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: aggregates
          required: false
          in: query
          description: Aggregates to collect for the search results
          schema:
            type: array
            items:
              $ref: '#/components/schemas/FieldAggregate'
        - name: filters
          required: false
          in: query
          description: Filters to apply to the search results
          schema:
            type: array
            items:
              $ref: '#/components/schemas/FieldFilter'
        - name: endDate
          required: false
          in: query
          description: The end date to search to
          schema:
            format: date-time
            example: '2022-01-01'
            type: string
        - name: limit
          required: false
          in: query
          description: The limit of the number of results returned
          schema:
            default: 10
            example: 10
            type: number
        - name: offset
          required: false
          in: query
          description: The offset of the returned results
          schema:
            default: 0
            example: 0
            type: number
        - name: sortBy
          required: false
          in: query
          description: The field to sort the results by
          schema:
            default: createdAt
            example: createdAt
            type: string
        - name: sortDirection
          required: false
          in: query
          description: The direction to sort the results by
          schema:
            default: desc
            example: desc
            enum:
              - asc
              - desc
            type: string
        - name: startDate
          required: false
          in: query
          description: The start date to search from
          schema:
            format: date-time
            example: '2021-01-01'
            type: string
      responses:
        '200':
          description: Successfully returned paginated results
          content:
            application/json:
              schema:
                allOf:
                  - properties:
                      aggregates:
                        items:
                          $ref: '#/components/schemas/AggregateFieldResult'
                        type: array
                      metadata:
                        $ref: '#/components/schemas/Metadata'
                      results:
                        items:
                          $ref: '#/components/schemas/PipelineEntity'
                        type: array
                    required:
                      - metadata
                      - results
                title: PaginatedResponseOfPipelineEntity
      security:
        - bearer: []
      summary: Get all pipelines
      tags:
        - Pipelines
  /organizations/{orgname}/pipelines/{id}:
    get:
      operationId: PipelinesController_findOne
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: pipeline found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineEntity'
      security:
        - bearer: []
      summary: Get a single pipeline
      tags:
        - Pipelines
    delete:
      operationId: PipelinesController_remove
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: pipeline deleted successfully.
      security:
        - bearer: []
      summary: Delete a pipeline
      tags:
        - Pipelines
    patch:
      operationId: PipelinesController_update
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePipelineDto'
      responses:
        '200':
          description: pipeline updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PipelineEntity'
      security:
        - bearer: []
      summary: Update a pipeline
      tags:
        - Pipelines
  /auth/email-change/confirm:
    post:
      description: This endpoint will confirm your e-mail change with a token
      operationId: AuthController_emailChangeConfirm
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmationTokenDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenDto'
        '400':
          description: BadRequestException
      summary: Confirm e-mail change with a token
      tags:
        - Authentication
  /auth/email-change/request:
    post:
      description: This endpoint will request your e-mail change with a token
      operationId: AuthController_emailChangeRequest
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailRequestDto'
      responses:
        '201':
          description: ''
      security:
        - bearer: []
      summary: Request e-mail change with a token
      tags:
        - Authentication
  /auth/email-verification/confirm:
    post:
      description: This endpoint will confirm your e-mail with a token
      operationId: AuthController_emailVerificationConfirm
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmationTokenDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenDto'
        '400':
          description: BadRequestException
        '401':
          description: UnauthorizedException
      summary: Confirm e-mail verification with a token
      tags:
        - Authentication
  /auth/email-verification/request:
    post:
      description: This endpoint will send an e-mail verification link to you. ADMIN ONLY.
      operationId: AuthController_emailVerificationRequest
      parameters: []
      responses:
        '201':
          description: ''
        '400':
          description: BadRequestException
        '401':
          description: UnauthorizedException
        '403':
          description: ForbiddenException
      security:
        - bearer: []
      summary: Request e-mail verification
      tags:
        - Authentication
  /auth/login:
    post:
      description: This endpoint will log you in with your e-mail and password
      operationId: AuthController_login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenDto'
        '400':
          description: BadRequestException
        '401':
          description: UnauthorizedException
      summary: Login with e-mail and password
      tags:
        - Authentication
  /auth/logout:
    post:
      description: This endpoint will log you out of the current session
      operationId: AuthController_logout
      parameters: []
      responses:
        '201':
          description: ''
        '401':
          description: UnauthorizedException
      summary: Logout of the current session
      tags:
        - Authentication
  /auth/password-reset/confirm:
    post:
      description: This endpoint will confirm your password change with a token
      operationId: AuthController_passwordResetConfirm
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmationTokenWithNewPasswordDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenDto'
        '400':
          description: BadRequestException
        '401':
          description: UnauthorizedException
      summary: Confirm password change with a token
      tags:
        - Authentication
  /auth/password-reset/request:
    post:
      description: This endpoint will request a password reset link
      operationId: AuthController_passwordResetRequest
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailRequestDto'
      responses:
        '201':
          description: ''
      summary: Request password reset
      tags:
        - Authentication
  /auth/refresh-token:
    post:
      description: This endpoint will refresh your access token
      operationId: AuthController_refreshToken
      parameters: []
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenDto'
        '401':
          description: UnauthorizedException
      summary: Refresh access token
      tags:
        - Authentication
  /auth/register:
    post:
      description: >-
        This endpoint will register a new account and return a JWT token which
        should be provided in your auth headers
      operationId: AuthController_register
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenDto'
        '409':
          description: ConflictException
      summary: Register a new user
      tags:
        - Authentication
  /user/deactivate:
    post:
      description: This endpoint deactivates a user.
      operationId: UsersController_deactivate
      parameters: []
      responses:
        '201':
          description: ''
        '400':
          description: Bad Request.
        '401':
          description: Unauthorized.
      security:
        - bearer: []
      summary: Deactivate a user
      tags:
        - User
  /user:
    get:
      description: This endpoint returns a user.
      operationId: UsersController_findOne
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '401':
          description: UnauthorizedException
        '404':
          description: NotFoundException
      security:
        - bearer: []
      summary: Get a user
      tags:
        - User
    patch:
      operationId: UsersController_update
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntity'
        '400':
          description: BadRequestException
        '401':
          description: UnauthorizedException
        '404':
          description: NotFoundException
      security:
        - bearer: []
      summary: Update a user
      tags:
        - User
  /organizations:
    post:
      operationId: OrganizationsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationEntity'
        '400':
          description: BadRequestException
        '401':
          description: UnauthorizedException
        '404':
          description: NotFoundException
      security:
        - bearer: []
      summary: Create a new organization
      tags:
        - Organizations
  /organizations/{orgname}:
    delete:
      operationId: OrganizationsController_delete
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
        '401':
          description: UnauthorizedException
        '404':
          description: NotFoundException
      security:
        - bearer: []
      summary: Delete an organization
      tags:
        - Organizations
    get:
      operationId: OrganizationsController_findOne
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationEntity'
        '401':
          description: UnauthorizedException
        '404':
          description: NotFoundException
      security:
        - bearer: []
      summary: Get an organization
      tags:
        - Organizations
    patch:
      operationId: OrganizationsController_update
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationEntity'
        '400':
          description: BadRequestException
        '401':
          description: UnauthorizedException
        '404':
          description: NotFoundException
      security:
        - bearer: []
      summary: Update an organization
      tags:
        - Organizations
  /organizations/{orgname}/billing/subscription/cancel:
    post:
      description: This endpoint will cancel the subscription plan for an organization
      operationId: BillingController_cancelSubscriptionPlan
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
        '403':
          description: ForbiddenException
      security:
        - bearer: []
      summary: Cancel subscription plan
      tags:
        - Organization - Billing
  /organizations/{orgname}/billing/subscription:
    post:
      description: This endpoint will change the subscription plan for an organization
      operationId: BillingController_changeSubscriptionPlan
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: planId
          required: true
          in: query
          schema:
            type: string
      responses:
        '201':
          description: ''
        '400':
          description: BadRequestException
        '403':
          description: ForbiddenException
      security:
        - bearer: []
      summary: Change subscription plan
      tags:
        - Organization - Billing
  /organizations/{orgname}/billing/portal:
    post:
      description: >-
        This endpoint will create a billing portal for an organization to edit
        their subscription and billing information
      operationId: BillingController_createBillingPortal
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingUrlEntity'
        '403':
          description: ForbiddenException
      security:
        - bearer: []
      summary: Create billing portal
      tags:
        - Organization - Billing
  /organizations/{orgname}/billing/checkout:
    post:
      description: >-
        This endpoint will create a checkout session for an organization to
        purchase a subscription or one-time product
      operationId: BillingController_createCheckoutSession
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: planId
          required: true
          in: query
          schema:
            type: string
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingUrlEntity'
        '400':
          description: BadRequestException
        '403':
          description: ForbiddenException
      security:
        - bearer: []
      summary: Create checkout session
      tags:
        - Organization - Billing
  /plans:
    get:
      description: This endpoint will return a list of available billing plans
      operationId: BillingController_getPlans
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlanEntity'
      security:
        - bearer: []
      summary: Get plans
      tags:
        - Organization - Billing
  /organizations/{orgname}/billing/payment-methods:
    get:
      description: This endpoint will return a list of payment methods for an organization
      operationId: BillingController_listPaymentMethods
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaymentMethodEntity'
      security:
        - bearer: []
      summary: List payment methods
      tags:
        - Organization - Billing
  /organizations/{orgname}/billing/payment-methods/{paymentMethodId}:
    delete:
      description: This endpoint will remove a payment method from an organization
      operationId: BillingController_removePaymentMethod
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: paymentMethodId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
        '404':
          description: NotFoundException
      security:
        - bearer: []
      summary: Remove payment method
      tags:
        - Organization - Billing
  /organizations/{orgname}/tools:
    post:
      operationId: ToolsController_create
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateToolDto'
      responses:
        '201':
          description: tool created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolEntity'
      security:
        - bearer: []
      summary: Create a new tool
      tags:
        - Tools
    get:
      operationId: ToolsController_findAll
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: aggregates
          required: false
          in: query
          description: Aggregates to collect for the search results
          schema:
            type: array
            items:
              $ref: '#/components/schemas/FieldAggregate'
        - name: filters
          required: false
          in: query
          description: Filters to apply to the search results
          schema:
            type: array
            items:
              $ref: '#/components/schemas/FieldFilter'
        - name: endDate
          required: false
          in: query
          description: The end date to search to
          schema:
            format: date-time
            example: '2022-01-01'
            type: string
        - name: limit
          required: false
          in: query
          description: The limit of the number of results returned
          schema:
            default: 10
            example: 10
            type: number
        - name: offset
          required: false
          in: query
          description: The offset of the returned results
          schema:
            default: 0
            example: 0
            type: number
        - name: sortBy
          required: false
          in: query
          description: The field to sort the results by
          schema:
            default: createdAt
            example: createdAt
            type: string
        - name: sortDirection
          required: false
          in: query
          description: The direction to sort the results by
          schema:
            default: desc
            example: desc
            enum:
              - asc
              - desc
            type: string
        - name: startDate
          required: false
          in: query
          description: The start date to search from
          schema:
            format: date-time
            example: '2021-01-01'
            type: string
      responses:
        '200':
          description: Successfully returned paginated results
          content:
            application/json:
              schema:
                allOf:
                  - properties:
                      aggregates:
                        items:
                          $ref: '#/components/schemas/AggregateFieldResult'
                        type: array
                      metadata:
                        $ref: '#/components/schemas/Metadata'
                      results:
                        items:
                          $ref: '#/components/schemas/ToolEntity'
                        type: array
                    required:
                      - metadata
                      - results
                title: PaginatedResponseOfToolEntity
      security:
        - bearer: []
      summary: Get all tools
      tags:
        - Tools
  /organizations/{orgname}/tools/{id}:
    get:
      operationId: ToolsController_findOne
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: tool found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolEntity'
      security:
        - bearer: []
      summary: Get a single tool
      tags:
        - Tools
    delete:
      operationId: ToolsController_remove
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: tool deleted successfully.
      security:
        - bearer: []
      summary: Delete a tool
      tags:
        - Tools
    patch:
      operationId: ToolsController_update
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateToolDto'
      responses:
        '200':
          description: tool updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToolEntity'
      security:
        - bearer: []
      summary: Update a tool
      tags:
        - Tools
  /organizations/{orgname}/api-tokens:
    post:
      description: This endpoint requires the user to be authenticated
      operationId: ApiTokensController_create
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiTokenDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiTokenEntity'
      security:
        - bearer: []
      summary: Create a new API token
      tags:
        - API Tokens
    get:
      operationId: ApiTokensController_findAll
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: aggregates
          required: false
          in: query
          description: Aggregates to collect for the search results
          schema:
            type: array
            items:
              $ref: '#/components/schemas/FieldAggregate'
        - name: filters
          required: false
          in: query
          description: Filters to apply to the search results
          schema:
            type: array
            items:
              $ref: '#/components/schemas/FieldFilter'
        - name: endDate
          required: false
          in: query
          description: The end date to search to
          schema:
            format: date-time
            example: '2022-01-01'
            type: string
        - name: limit
          required: false
          in: query
          description: The limit of the number of results returned
          schema:
            default: 10
            example: 10
            type: number
        - name: offset
          required: false
          in: query
          description: The offset of the returned results
          schema:
            default: 0
            example: 0
            type: number
        - name: sortBy
          required: false
          in: query
          description: The field to sort the results by
          schema:
            default: createdAt
            example: createdAt
            type: string
        - name: sortDirection
          required: false
          in: query
          description: The direction to sort the results by
          schema:
            default: desc
            example: desc
            enum:
              - asc
              - desc
            type: string
        - name: startDate
          required: false
          in: query
          description: The start date to search from
          schema:
            format: date-time
            example: '2021-01-01'
            type: string
      responses:
        '200':
          description: Successfully returned paginated results
          content:
            application/json:
              schema:
                allOf:
                  - properties:
                      aggregates:
                        items:
                          $ref: '#/components/schemas/AggregateFieldResult'
                        type: array
                      metadata:
                        $ref: '#/components/schemas/Metadata'
                      results:
                        items:
                          $ref: '#/components/schemas/ApiTokenEntity'
                        type: array
                    required:
                      - metadata
                      - results
                title: PaginatedResponseOfApiTokenEntity
      security:
        - bearer: []
      summary: Get all apitokens
      tags:
        - API Tokens
  /organizations/{orgname}/api-tokens/{id}:
    get:
      operationId: ApiTokensController_findOne
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: apitoken found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiTokenEntity'
      security:
        - bearer: []
      summary: Get a single apitoken
      tags:
        - API Tokens
    delete:
      operationId: ApiTokensController_remove
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: apitoken deleted successfully.
      security:
        - bearer: []
      summary: Delete a apitoken
      tags:
        - API Tokens
    patch:
      operationId: ApiTokensController_update
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApiTokenDto'
      responses:
        '200':
          description: apitoken updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiTokenEntity'
      security:
        - bearer: []
      summary: Update a apitoken
      tags:
        - API Tokens
  /organizations/{orgname}/members/join:
    post:
      description: This endpoint requires the user to be authenticated
      operationId: MembersController_join
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberEntity'
        '401':
          description: Unauthorized
        '403':
          description: Email not verified
        '404':
          description: Not Found
      security:
        - bearer: []
      summary: Accept invitation to this organization
      tags:
        - Members
  /organizations/{orgname}/members:
    post:
      operationId: MembersController_create
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMemberDto'
      responses:
        '201':
          description: member created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberEntity'
      security:
        - bearer: []
      summary: Create a new member
      tags:
        - Members
    get:
      operationId: MembersController_findAll
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: aggregates
          required: false
          in: query
          description: Aggregates to collect for the search results
          schema:
            type: array
            items:
              $ref: '#/components/schemas/FieldAggregate'
        - name: filters
          required: false
          in: query
          description: Filters to apply to the search results
          schema:
            type: array
            items:
              $ref: '#/components/schemas/FieldFilter'
        - name: endDate
          required: false
          in: query
          description: The end date to search to
          schema:
            format: date-time
            example: '2022-01-01'
            type: string
        - name: limit
          required: false
          in: query
          description: The limit of the number of results returned
          schema:
            default: 10
            example: 10
            type: number
        - name: offset
          required: false
          in: query
          description: The offset of the returned results
          schema:
            default: 0
            example: 0
            type: number
        - name: sortBy
          required: false
          in: query
          description: The field to sort the results by
          schema:
            default: createdAt
            example: createdAt
            type: string
        - name: sortDirection
          required: false
          in: query
          description: The direction to sort the results by
          schema:
            default: desc
            example: desc
            enum:
              - asc
              - desc
            type: string
        - name: startDate
          required: false
          in: query
          description: The start date to search from
          schema:
            format: date-time
            example: '2021-01-01'
            type: string
      responses:
        '200':
          description: Successfully returned paginated results
          content:
            application/json:
              schema:
                allOf:
                  - properties:
                      aggregates:
                        items:
                          $ref: '#/components/schemas/AggregateFieldResult'
                        type: array
                      metadata:
                        $ref: '#/components/schemas/Metadata'
                      results:
                        items:
                          $ref: '#/components/schemas/MemberEntity'
                        type: array
                    required:
                      - metadata
                      - results
                title: PaginatedResponseOfMemberEntity
      security:
        - bearer: []
      summary: Get all members
      tags:
        - Members
  /organizations/{orgname}/members/{id}:
    get:
      operationId: MembersController_findOne
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: member found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberEntity'
      security:
        - bearer: []
      summary: Get a single member
      tags:
        - Members
    delete:
      operationId: MembersController_remove
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: member deleted successfully.
      security:
        - bearer: []
      summary: Delete a member
      tags:
        - Members
    patch:
      operationId: MembersController_update
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMemberDto'
      responses:
        '200':
          description: member updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberEntity'
      security:
        - bearer: []
      summary: Update a member
      tags:
        - Members
  /organizations/{orgname}/labels:
    post:
      operationId: LabelsController_create
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateLabelDto'
      responses:
        '201':
          description: label created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelEntity'
      security:
        - bearer: []
      summary: Create a new label
      tags:
        - Labels
    get:
      operationId: LabelsController_findAll
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: aggregates
          required: false
          in: query
          description: Aggregates to collect for the search results
          schema:
            type: array
            items:
              $ref: '#/components/schemas/FieldAggregate'
        - name: filters
          required: false
          in: query
          description: Filters to apply to the search results
          schema:
            type: array
            items:
              $ref: '#/components/schemas/FieldFilter'
        - name: endDate
          required: false
          in: query
          description: The end date to search to
          schema:
            format: date-time
            example: '2022-01-01'
            type: string
        - name: limit
          required: false
          in: query
          description: The limit of the number of results returned
          schema:
            default: 10
            example: 10
            type: number
        - name: offset
          required: false
          in: query
          description: The offset of the returned results
          schema:
            default: 0
            example: 0
            type: number
        - name: sortBy
          required: false
          in: query
          description: The field to sort the results by
          schema:
            default: createdAt
            example: createdAt
            type: string
        - name: sortDirection
          required: false
          in: query
          description: The direction to sort the results by
          schema:
            default: desc
            example: desc
            enum:
              - asc
              - desc
            type: string
        - name: startDate
          required: false
          in: query
          description: The start date to search from
          schema:
            format: date-time
            example: '2021-01-01'
            type: string
      responses:
        '200':
          description: Successfully returned paginated results
          content:
            application/json:
              schema:
                allOf:
                  - properties:
                      aggregates:
                        items:
                          $ref: '#/components/schemas/AggregateFieldResult'
                        type: array
                      metadata:
                        $ref: '#/components/schemas/Metadata'
                      results:
                        items:
                          $ref: '#/components/schemas/LabelEntity'
                        type: array
                    required:
                      - metadata
                      - results
                title: PaginatedResponseOfLabelEntity
      security:
        - bearer: []
      summary: Get all labels
      tags:
        - Labels
  /organizations/{orgname}/labels/{id}:
    get:
      operationId: LabelsController_findOne
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: label found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelEntity'
      security:
        - bearer: []
      summary: Get a single label
      tags:
        - Labels
    delete:
      operationId: LabelsController_remove
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: label deleted successfully.
      security:
        - bearer: []
      summary: Delete a label
      tags:
        - Labels
    patch:
      operationId: LabelsController_update
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLabelDto'
      responses:
        '200':
          description: label updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LabelEntity'
      security:
        - bearer: []
      summary: Update a label
      tags:
        - Labels
  /organizations/{orgname}/storage/delete:
    delete:
      description: >-
        This endpoint will delete a file or directory in the organization's
        secure storage at the specified path. ADMIN ONLY.
      operationId: StorageController_delete
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: path
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Path was successfully deleted
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - bearer: []
      summary: Delete file or directory
      tags:
        - Storage
  /organizations/{orgname}/storage/read:
    post:
      description: >-
        This endpoint will return a url for reading a file in the organization's
        secure storage. It will be valid for 15 minutes. ADMIN ONLY.
      operationId: StorageController_getReadUrl
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PathDto'
      responses:
        '201':
          description: Read  url was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadUrlDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - bearer: []
      summary: Read file
      tags:
        - Storage
  /organizations/{orgname}/storage/write:
    post:
      description: >-
        This endpoint will return a url for writing to a file location in the
        organization's secure storage. You must write your file to the url
        returned by this endpoint. If you use is isDir param, it will create a
        directory instead of a file and you do not need to write to the url.
        ADMIN ONLY.
      operationId: StorageController_getWriteUrl
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PathDto'
      responses:
        '201':
          description: Write urls was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WriteUrlDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - bearer: []
      summary: Write file
      tags:
        - Storage
  /organizations/{orgname}/storage/items:
    get:
      description: >-
        This endpoint will return a list of files and directories in the
        organization's secure storage at the specified path. ADMIN ONLY.
      operationId: StorageController_listDirectory
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: path
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Path was successfully retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StorageItemDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      security:
        - bearer: []
      summary: Show directory
      tags:
        - Storage
  /organizations/{orgname}/content:
    post:
      operationId: ContentController_create
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContentDto'
      responses:
        '201':
          description: content created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentEntity'
      security:
        - bearer: []
      summary: Create a new content
      tags:
        - Content
    get:
      operationId: ContentController_findAll
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: aggregates
          required: false
          in: query
          description: Aggregates to collect for the search results
          schema:
            type: array
            items:
              $ref: '#/components/schemas/FieldAggregate'
        - name: filters
          required: false
          in: query
          description: Filters to apply to the search results
          schema:
            type: array
            items:
              $ref: '#/components/schemas/FieldFilter'
        - name: endDate
          required: false
          in: query
          description: The end date to search to
          schema:
            format: date-time
            example: '2022-01-01'
            type: string
        - name: limit
          required: false
          in: query
          description: The limit of the number of results returned
          schema:
            default: 10
            example: 10
            type: number
        - name: offset
          required: false
          in: query
          description: The offset of the returned results
          schema:
            default: 0
            example: 0
            type: number
        - name: sortBy
          required: false
          in: query
          description: The field to sort the results by
          schema:
            default: createdAt
            example: createdAt
            type: string
        - name: sortDirection
          required: false
          in: query
          description: The direction to sort the results by
          schema:
            default: desc
            example: desc
            enum:
              - asc
              - desc
            type: string
        - name: startDate
          required: false
          in: query
          description: The start date to search from
          schema:
            format: date-time
            example: '2021-01-01'
            type: string
      responses:
        '200':
          description: Successfully returned paginated results
          content:
            application/json:
              schema:
                allOf:
                  - properties:
                      aggregates:
                        items:
                          $ref: '#/components/schemas/AggregateFieldResult'
                        type: array
                      metadata:
                        $ref: '#/components/schemas/Metadata'
                      results:
                        items:
                          $ref: '#/components/schemas/ContentEntity'
                        type: array
                    required:
                      - metadata
                      - results
                title: PaginatedResponseOfContentEntity
      security:
        - bearer: []
      summary: Get all contents
      tags:
        - Content
  /organizations/{orgname}/content/{id}:
    get:
      operationId: ContentController_findOne
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: content found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentEntity'
      security:
        - bearer: []
      summary: Get a single content
      tags:
        - Content
    delete:
      operationId: ContentController_remove
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: content deleted successfully.
      security:
        - bearer: []
      summary: Delete a content
      tags:
        - Content
    patch:
      operationId: ContentController_update
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContentDto'
      responses:
        '200':
          description: content updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentEntity'
      security:
        - bearer: []
      summary: Update a content
      tags:
        - Content
  /organizations/{orgname}/runs:
    post:
      operationId: RunsController_create
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRunDto'
      responses:
        '201':
          description: run created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunEntity'
      security:
        - bearer: []
      summary: Create a new run
      tags:
        - Runs
    get:
      operationId: RunsController_findAll
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: aggregates
          required: false
          in: query
          description: Aggregates to collect for the search results
          schema:
            type: array
            items:
              $ref: '#/components/schemas/FieldAggregate'
        - name: filters
          required: false
          in: query
          description: Filters to apply to the search results
          schema:
            type: array
            items:
              $ref: '#/components/schemas/FieldFilter'
        - name: endDate
          required: false
          in: query
          description: The end date to search to
          schema:
            format: date-time
            example: '2022-01-01'
            type: string
        - name: limit
          required: false
          in: query
          description: The limit of the number of results returned
          schema:
            default: 10
            example: 10
            type: number
        - name: offset
          required: false
          in: query
          description: The offset of the returned results
          schema:
            default: 0
            example: 0
            type: number
        - name: sortBy
          required: false
          in: query
          description: The field to sort the results by
          schema:
            default: createdAt
            example: createdAt
            type: string
        - name: sortDirection
          required: false
          in: query
          description: The direction to sort the results by
          schema:
            default: desc
            example: desc
            enum:
              - asc
              - desc
            type: string
        - name: startDate
          required: false
          in: query
          description: The start date to search from
          schema:
            format: date-time
            example: '2021-01-01'
            type: string
      responses:
        '200':
          description: Successfully returned paginated results
          content:
            application/json:
              schema:
                allOf:
                  - properties:
                      aggregates:
                        items:
                          $ref: '#/components/schemas/AggregateFieldResult'
                        type: array
                      metadata:
                        $ref: '#/components/schemas/Metadata'
                      results:
                        items:
                          $ref: '#/components/schemas/RunEntity'
                        type: array
                    required:
                      - metadata
                      - results
                title: PaginatedResponseOfRunEntity
      security:
        - bearer: []
      summary: Get all runs
      tags:
        - Runs
  /organizations/{orgname}/runs/{id}:
    get:
      operationId: RunsController_findOne
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: run found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunEntity'
      security:
        - bearer: []
      summary: Get a single run
      tags:
        - Runs
    delete:
      operationId: RunsController_remove
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: run deleted successfully.
      security:
        - bearer: []
      summary: Delete a run
      tags:
        - Runs
    patch:
      operationId: RunsController_update
      parameters:
        - name: orgname
          required: true
          in: path
          schema:
            type: string
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: run updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunEntity'
      security:
        - bearer: []
      summary: Update a run
      tags:
        - Runs
  /health:
    get:
      operationId: HealthController_check
      parameters: []
      responses:
        '200':
          description: The Health Check is successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  info:
                    type: object
                    example:
                      database:
                        status: up
                    additionalProperties:
                      type: object
                      required:
                        - status
                      properties:
                        status:
                          type: string
                      additionalProperties: true
                    nullable: true
                  error:
                    type: object
                    example: {}
                    additionalProperties:
                      type: object
                      required:
                        - status
                      properties:
                        status:
                          type: string
                      additionalProperties: true
                    nullable: true
                  details:
                    type: object
                    example:
                      database:
                        status: up
                    additionalProperties:
                      type: object
                      required:
                        - status
                      properties:
                        status:
                          type: string
                      additionalProperties: true
        '503':
          description: The Health Check is not successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  info:
                    type: object
                    example:
                      database:
                        status: up
                    additionalProperties:
                      type: object
                      required:
                        - status
                      properties:
                        status:
                          type: string
                      additionalProperties: true
                    nullable: true
                  error:
                    type: object
                    example:
                      redis:
                        status: down
                        message: Could not connect
                    additionalProperties:
                      type: object
                      required:
                        - status
                      properties:
                        status:
                          type: string
                      additionalProperties: true
                    nullable: true
                  details:
                    type: object
                    example:
                      database:
                        status: up
                      redis:
                        status: down
                        message: Could not connect
                    additionalProperties:
                      type: object
                      required:
                        - status
                      properties:
                        status:
                          type: string
                      additionalProperties: true
      tags:
        - Health
info:
  title: Arches AI API
  description: The Arches AI API
  version: v1
  contact: {}
tags: []
servers:
  - url: https://api.archesai.test
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    CreatePipelineStepDto:
      type: object
      properties:
        dependsOn:
          description: An array of steps that this step depends on
          example:
            - step-id
            - step-id-2
          type: array
          items:
            type: string
        toolId:
          type: string
          description: This is the ID of the tool that this step uses.
          example: tool-id
        id:
          type: string
          description: The ID of the item
          example: item-id
        name:
          type: string
          description: >-
            The name of the step in the pipeline. It must be unique within the
            pipeline.
      required:
        - dependsOn
        - toolId
        - id
        - name
    CreatePipelineDto:
      type: object
      properties:
        pipelineSteps:
          description: An array of pipeline tools to be added to the pipeline
          type: array
          items:
            $ref: '#/components/schemas/CreatePipelineStepDto'
        name:
          type: string
          description: The name of the pipeline
          example: my-pipeline
        description:
          type: string
          nullable: true
          description: The description of the pipeline
          example: This pipeline does something
      required:
        - pipelineSteps
        - name
        - description
    SubItemEntity:
      type: object
      properties:
        id:
          type: string
          description: The id of the item
          example: item-id
        name:
          type: string
          description: The name of the item
          example: item-name
      required:
        - id
        - name
    ToolEntity:
      type: object
      properties:
        description:
          type: string
          description: The tool description
        inputType:
          description: The tools input type
          example: TEXT
          enum:
            - TEXT
            - IMAGE
            - AUDIO
            - VIDEO
          type: string
        name:
          type: string
          description: The tool name
          example: extract-text
        orgname:
          type: string
          description: The organization name
          example: my-organization
        outputType:
          description: The tools output type
          example: TEXT
          enum:
            - TEXT
            - IMAGE
            - AUDIO
            - VIDEO
          type: string
        toolBase:
          type: string
          description: The base of the tool
          example: extract-text
        createdAt:
          format: date-time
          type: string
          description: The date that this item was created
          example: '2023-07-11T21:09:20.895Z'
        id:
          type: string
          description: The ID of the item
          example: item-id
      required:
        - description
        - inputType
        - name
        - orgname
        - outputType
        - toolBase
        - createdAt
        - id
    PipelineStepEntity:
      type: object
      properties:
        dependents:
          description: The order of the step in the pipeline
          type: array
          items:
            $ref: '#/components/schemas/SubItemEntity'
        dependsOn:
          description: These are the steps that this step depends on.
          type: array
          items:
            $ref: '#/components/schemas/SubItemEntity'
        name:
          type: string
          description: >-
            The name of the step in the pipeline. It must be unique within the
            pipeline.
        pipelineId:
          type: string
          description: The ID of the pipelin that this step belongs to
          example: pipeline-id
        tool:
          description: The name of the tool that this step uses.
          allOf:
            - $ref: '#/components/schemas/ToolEntity'
        toolId:
          type: string
          description: This is the ID of the tool that this step uses.
          example: tool-id
        createdAt:
          format: date-time
          type: string
          description: The date that this item was created
          example: '2023-07-11T21:09:20.895Z'
        id:
          type: string
          description: The ID of the item
          example: item-id
      required:
        - dependents
        - dependsOn
        - name
        - pipelineId
        - tool
        - toolId
        - createdAt
        - id
    PipelineEntity:
      type: object
      properties:
        description:
          type: string
          nullable: true
          description: The description of the pipeline
          example: This pipeline does something
        name:
          type: string
          description: The name of the pipeline
          example: my-pipeline
        orgname:
          type: string
          description: The name of the organization that this pipeline belongs to
          example: my-org
        pipelineSteps:
          description: The steps in the pipeline
          type: array
          items:
            $ref: '#/components/schemas/PipelineStepEntity'
        createdAt:
          format: date-time
          type: string
          description: The date that this item was created
          example: '2023-07-11T21:09:20.895Z'
        id:
          type: string
          description: The ID of the item
          example: item-id
      required:
        - description
        - name
        - orgname
        - pipelineSteps
        - createdAt
        - id
    FieldAggregate:
      type: object
      properties:
        field:
          type: string
          description: The field to aggregate by
          example: createdAt
        granularity:
          description: The granularity to use for ranged aggregates
          example: day
          enum:
            - day
            - month
            - week
            - year
          type: string
        type:
          description: The type of aggregate to perform
          example: count
          enum:
            - count
            - sum
          type: string
      required:
        - field
        - granularity
        - type
    FieldFilter:
      type: object
      properties:
        field:
          type: string
          description: The field to filter by
          example: createdAt
        operator:
          description: The operator to use for filtering
          example: contains
          enum:
            - contains
            - endsWith
            - equals
            - every
            - in
            - none
            - not
            - some
            - startsWith
          type: string
        value:
          type: object
          description: The value to filter by
          example: '2021-01-01'
      required:
        - field
        - operator
        - value
    UpdatePipelineDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the pipeline
          example: my-pipeline
        description:
          type: string
          nullable: true
          description: The description of the pipeline
          example: This pipeline does something
        pipelineSteps:
          description: An array of pipeline tools to be added to the pipeline
          type: array
          items:
            $ref: '#/components/schemas/CreatePipelineStepDto'
    ConfirmationTokenDto:
      type: object
      properties:
        token:
          type: string
          description: >-
            The token used to verify your authorization event. This token is
            generated by the server and sent to the user's email.
          example: supersecre
      required:
        - token
    TokenDto:
      type: object
      properties:
        accessToken:
          type: string
          description: The authorization token that can be used to access Arches AI
          example: supersecretauthorizationtoken
        refreshToken:
          type: string
          description: The refresh token that can be used to get a new access token
          example: supersecretauthorizationtoken
      required:
        - accessToken
        - refreshToken
    EmailRequestDto:
      type: object
      properties:
        email:
          type: string
          description: The e-mail to send the confirmation token to
          example: user@archesai.com
          format: email
      required:
        - email
    LoginDto:
      type: object
      properties:
        password:
          type: string
          description: The password to create and/or login to an account
          example: password
          minLength: 7
        email:
          type: string
          description: The user's e-mail
          example: example@archesai.com
          format: email
      required:
        - password
        - email
    ConfirmationTokenWithNewPasswordDto:
      type: object
      properties:
        token:
          type: string
          description: >-
            The token used to verify your authorization event. This token is
            generated by the server and sent to the user's email.
          example: supersecre
        newPassword:
          type: string
          description: The new password
          example: newPassword
      required:
        - token
        - newPassword
    RegisterDto:
      type: object
      properties:
        password:
          type: string
          description: The password to create and/or login to an account
          example: password
          minLength: 7
        email:
          type: string
          description: The user's e-mail
          example: example@archesai.com
          format: email
      required:
        - password
        - email
    AuthProviderEntity:
      type: object
      properties:
        provider:
          type: string
          description: The auth provider's provider
          example: LOCAL
          enum:
            - LOCAL
            - FIREBASE
            - TWITTER
        providerId:
          type: string
          description: The provider ID associated with the auth provider
        userId:
          type: string
          description: The user ID associated with the auth provider
          example: '123456'
        createdAt:
          format: date-time
          type: string
          description: The date that this item was created
          example: '2023-07-11T21:09:20.895Z'
        id:
          type: string
          description: The ID of the item
          example: item-id
      required:
        - provider
        - providerId
        - userId
        - createdAt
        - id
    MemberEntity:
      type: object
      properties:
        inviteAccepted:
          type: boolean
          description: Whether the invite was accepted
          example: false
        inviteEmail:
          type: string
          description: The email of the invited member
          example: invited-user@archesai.com
          format: email
        orgname:
          type: string
          description: The organization name
          example: my-organization
        role:
          description: The role of the member
          example: ADMIN
          enum:
            - ADMIN
            - USER
          type: string
        username:
          type: string
          nullable: true
          description: The username of this member
          example: jonathan
        createdAt:
          format: date-time
          type: string
          description: The date that this item was created
          example: '2023-07-11T21:09:20.895Z'
        id:
          type: string
          description: The ID of the item
          example: item-id
      required:
        - inviteAccepted
        - inviteEmail
        - orgname
        - role
        - username
        - createdAt
        - id
    UserEntity:
      type: object
      properties:
        authProviders:
          description: The memberships of the currently signed-in user
          type: array
          items:
            $ref: '#/components/schemas/AuthProviderEntity'
        deactivated:
          type: boolean
          description: Whether or not the user is deactivated
          example: false
        defaultOrgname:
          type: string
          description: The user's default organization name
          example: my-organization
        displayName:
          type: string
          description: The user's display name
          example: John Smith
        email:
          type: string
          description: The user's e-mail
          example: example@archesai.com
          format: email
        emailVerified:
          type: boolean
          description: Whether or not the user's e-mail has been verified
        firstName:
          type: string
          description: The user's first name
          example: John
        lastName:
          type: string
          description: The user's last name
          example: Smith
        memberships:
          description: The memberships of the currently signed-in user
          type: array
          items:
            $ref: '#/components/schemas/MemberEntity'
        photoUrl:
          type: string
          description: The user's photo URL
          example: /avatar.png
        username:
          type: string
          description: The user's username
          example: jonathan
          minLength: 5
        createdAt:
          format: date-time
          type: string
          description: The date that this item was created
          example: '2023-07-11T21:09:20.895Z'
        id:
          type: string
          description: The ID of the item
          example: item-id
      required:
        - authProviders
        - deactivated
        - defaultOrgname
        - displayName
        - email
        - emailVerified
        - firstName
        - lastName
        - memberships
        - photoUrl
        - username
        - createdAt
        - id
    UpdateUserDto:
      type: object
      properties:
        defaultOrgname:
          type: string
          description: The user's default organization name
          example: my-organization
        firstName:
          type: string
          description: The user's first name
          example: John
        lastName:
          type: string
          description: The user's last name
          example: Smith
    CreateOrganizationDto:
      type: object
      properties:
        orgname:
          type: string
          description: The name of the organization
          example: organization-name
        billingEmail:
          type: string
          description: The billing email to use for the organization
          example: example@test.com
          format: email
      required:
        - orgname
        - billingEmail
    OrganizationEntity:
      type: object
      properties:
        billingEmail:
          type: string
          description: The billing email to use for the organization
          example: example@test.com
          format: email
        credits:
          type: number
          description: The number of credits you have remaining for this organization
          example: 500000
        orgname:
          type: string
          description: The name of the organization
          example: organization-name
        plan:
          description: The plan that the organization is subscribed to
          example: FREE
          enum:
            - FREE
            - BASIC
            - STANDARD
            - PREMIUM
            - UNLIMITED
          type: string
        createdAt:
          format: date-time
          type: string
          description: The date that this item was created
          example: '2023-07-11T21:09:20.895Z'
        id:
          type: string
          description: The ID of the item
          example: item-id
      required:
        - billingEmail
        - credits
        - orgname
        - plan
        - createdAt
        - id
    UpdateOrganizationDto:
      type: object
      properties:
        billingEmail:
          type: string
          description: The billing email to use for the organization
          example: example@test.com
          format: email
      required:
        - billingEmail
    BillingUrlEntity:
      type: object
      properties:
        url:
          type: string
          description: The url that will bring you to the necessary stripe page
          example: www.stripe.com/checkout/filchat-io
      required:
        - url
    PlanMetadata:
      type: object
      properties:
        key:
          type: string
          description: The key of the metadata
          example: STANDARD
          enum:
            - FREE
            - BASIC
            - STANDARD
            - PREMIUM
            - UNLIMITED
    PlanEntity:
      type: object
      properties:
        currency:
          type: string
          description: The currency of the plan
          example: usd
        description:
          type: string
          nullable: true
          description: The description of the plan
          example: A plan for a small business
        id:
          type: string
          description: The ID of the plan
          example: prod_1234567890
        metadata:
          description: The metadata of the plan
          allOf:
            - $ref: '#/components/schemas/PlanMetadata'
        name:
          type: string
          description: The name of the plan
          example: Small Business Plan
        priceId:
          type: string
          description: The ID of the price associated with the plan
          example: price_1234567890
        recurring:
          type: object
          nullable: true
          description: The interval of the plan
        unitAmount:
          type: number
          description: The amount in cents to be charged on the interval specified
          example: 1000
      required:
        - currency
        - description
        - id
        - metadata
        - name
        - priceId
        - recurring
        - unitAmount
    Address:
      type: object
      properties:
        city:
          type: string
          nullable: true
          description: City/District/Suburb/Town/Village.
          example: San Francisco
        country:
          type: string
          nullable: true
          description: Two-letter country code (ISO 3166-1 alpha-2).
          example: US
        line1:
          type: string
          nullable: true
          description: Address line 1 (e.g., street, PO Box, or company name).
          example: 123 Main Street
        line2:
          type: string
          nullable: true
          description: Address line 2 (e.g., apartment, suite, unit, or building).
          example: Apt 4B
        postal_code:
          type: string
          nullable: true
          description: ZIP or postal code.
          example: '94111'
        state:
          type: string
          nullable: true
          description: State/County/Province/Region.
          example: CA
      required:
        - city
        - country
        - line1
        - line2
        - postal_code
        - state
    BillingDetails:
      type: object
      properties:
        address:
          description: Billing address associated with the payment method.
          allOf:
            - $ref: '#/components/schemas/Address'
        email:
          type: string
          nullable: true
          description: Email address associated with the payment method.
          example: customer@example.com
        name:
          type: string
          nullable: true
          description: Full name associated with the payment method.
          example: Jane Doe
        phone:
          type: string
          nullable: true
          description: Phone number associated with the payment method.
          example: '+1234567890'
      required:
        - address
        - email
        - name
        - phone
    CardDetails:
      type: object
      properties:
        brand:
          type: string
          description: Card brand (e.g., Visa, MasterCard).
          example: visa
        country:
          type: string
          nullable: true
          description: Two-letter ISO code representing the country of the card.
          example: US
        exp_month:
          type: number
          description: Two-digit number representing the card’s expiration month.
          example: 12
        exp_year:
          type: number
          description: Four-digit number representing the card’s expiration year.
          example: 2024
        fingerprint:
          type: string
          nullable: true
          description: Unencrypted PAN tokens (optional, sensitive).
        funding:
          type: string
          description: Card funding type (credit, debit, prepaid, unknown).
          example: credit
        last4:
          type: string
          description: The last four digits of the card.
          example: '4242'
      required:
        - brand
        - country
        - exp_month
        - exp_year
        - fingerprint
        - funding
        - last4
    PaymentMethodEntity:
      type: object
      properties:
        billing_details:
          description: Billing details associated with the payment method.
          allOf:
            - $ref: '#/components/schemas/BillingDetails'
        card:
          nullable: true
          description: If the PaymentMethod is a card, this contains the card details.
          allOf:
            - $ref: '#/components/schemas/CardDetails'
        customer:
          type: string
          nullable: true
          description: ID of the customer this payment method is saved to.
          example: cus_J0a1b2c3d4e5f6g7h8i9
        id:
          type: string
          description: Unique identifier for the payment method.
          example: pm_1J2Y3A4B5C6D7E8F9G0H
        type:
          type: string
          description: The type of the PaymentMethod. An example value is "card".
          example: card
      required:
        - billing_details
        - card
        - customer
        - id
        - type
    CreateToolDto:
      type: object
      properties:
        name:
          type: string
          description: The tool name
          example: extract-text
        description:
          type: string
          description: The tool description
        inputType:
          type: string
          description: The tools input type
          example: TEXT
          enum:
            - TEXT
            - IMAGE
            - AUDIO
            - VIDEO
        outputType:
          type: string
          description: The tools output type
          example: TEXT
          enum:
            - TEXT
            - IMAGE
            - AUDIO
            - VIDEO
        toolBase:
          type: string
          description: The base of the tool
          example: extract-text
      required:
        - name
        - description
        - inputType
        - outputType
        - toolBase
    UpdateToolDto:
      type: object
      properties:
        name:
          type: string
          description: The tool name
          example: extract-text
        description:
          type: string
          description: The tool description
        inputType:
          type: string
          description: The tools input type
          example: TEXT
          enum:
            - TEXT
            - IMAGE
            - AUDIO
            - VIDEO
        outputType:
          type: string
          description: The tools output type
          example: TEXT
          enum:
            - TEXT
            - IMAGE
            - AUDIO
            - VIDEO
        toolBase:
          type: string
          description: The base of the tool
          example: extract-text
    CreateApiTokenDto:
      type: object
      properties:
        role:
          type: string
          description: The role of the API token
          example: ADMIN
          enum:
            - ADMIN
            - USER
        domains:
          type: string
          description: The domains that can access this API token
          example: archesai.com,localhost:3000
        name:
          type: string
          description: The name of the API token
      required:
        - role
        - domains
        - name
    ApiTokenEntity:
      type: object
      properties:
        domains:
          type: string
          description: The domains that can access this API token
          example: archesai.com,localhost:3000
        key:
          type: string
          description: The API token key. This will only be shown once
          example: '********1234567890'
        name:
          type: string
          description: The name of the API token
        orgname:
          type: string
          description: The organization name
          example: my-organization
        role:
          description: The role of the API token
          example: ADMIN
          enum:
            - ADMIN
            - USER
          type: string
        username:
          type: string
          description: The username of the user who owns this API token
          example: jonathan
        createdAt:
          format: date-time
          type: string
          description: The date that this item was created
          example: '2023-07-11T21:09:20.895Z'
        id:
          type: string
          description: The ID of the item
          example: item-id
      required:
        - domains
        - key
        - name
        - orgname
        - role
        - username
        - createdAt
        - id
    UpdateApiTokenDto:
      type: object
      properties:
        role:
          type: string
          description: The role of the API token
          example: ADMIN
          enum:
            - ADMIN
            - USER
        domains:
          type: string
          description: The domains that can access this API token
          example: archesai.com,localhost:3000
        name:
          type: string
          description: The name of the API token
    CreateMemberDto:
      type: object
      properties:
        inviteEmail:
          type: string
          description: The email of the invited member
          example: invited-user@archesai.com
          format: email
        role:
          type: string
          description: The role of the member
          example: ADMIN
          enum:
            - ADMIN
            - USER
      required:
        - inviteEmail
        - role
    UpdateMemberDto:
      type: object
      properties:
        role:
          type: string
          description: The role of the member
          example: ADMIN
          enum:
            - ADMIN
            - USER
        inviteEmail:
          type: string
          description: The email of the invited member
          example: invited-user@archesai.com
          format: email
    CreateLabelDto:
      type: object
      properties:
        name:
          type: string
          description: The chat label name
          example: What are the morals of the story in Aesops Fables?
      required:
        - name
    LabelEntity:
      type: object
      properties:
        name:
          type: string
          description: The chat label name
          example: What are the morals of the story in Aesops Fables?
        orgname:
          type: string
          description: The organization name
          example: my-organization
        createdAt:
          format: date-time
          type: string
          description: The date that this item was created
          example: '2023-07-11T21:09:20.895Z'
        id:
          type: string
          description: The ID of the item
          example: item-id
      required:
        - name
        - orgname
        - createdAt
        - id
    UpdateLabelDto:
      type: object
      properties:
        name:
          type: string
          description: The chat label name
          example: What are the morals of the story in Aesops Fables?
    PathDto:
      type: object
      properties:
        isDir:
          type: boolean
          description: Whether or not this path points to a directory
          example: false
          default: false
        path:
          type: string
          description: The path that the file should upload to
          example: /location/in/storage
      required:
        - isDir
        - path
    ReadUrlDto:
      type: object
      properties:
        read:
          type: string
          description: >-
            The read-only url that you can use to download the file from secure
            storage
          example: www.example.com?token=read-token
      required:
        - read
    WriteUrlDto:
      type: object
      properties:
        write:
          type: string
          description: A write-only url that you can use to upload a file to secure storage
          example: www.example.com?token=write-token
      required:
        - write
    StorageItemDto:
      type: object
      properties:
        isDir:
          type: boolean
          description: Whether or not this is a directory
          example: true
        name:
          type: string
          description: The path of the storage item
          example: /location/in/storage
        size:
          type: number
          description: The size of the item in bytes
          example: 12341234
        createdAt:
          format: date-time
          type: string
          description: The date that this item was created
          example: '2023-07-11T21:09:20.895Z'
        id:
          type: string
          description: The ID of the item
          example: item-id
      required:
        - isDir
        - name
        - size
        - createdAt
        - id
    CreateContentDto:
      type: object
      properties:
        labels:
          description: The labels to associate with the content
          example:
            - label-1
            - label-2
          default: []
          type: array
          items:
            type: string
        name:
          type: string
          description: The content's name
          example: my-file.pdf
        url:
          type: string
          nullable: true
          description: The URL of the content, if AUDIO, VIDEO, IMAGE, or FILE content
          example: https://example.com/example.mp4
        text:
          type: string
          nullable: true
          description: The content's text, if TEXT content
          example: Hello world. I am a text.
      required:
        - labels
        - name
    ContentEntity:
      type: object
      properties:
        children:
          description: The child content, if any
          type: array
          items:
            $ref: '#/components/schemas/SubItemEntity'
        consumedBy:
          description: The tool runs that consumed this content, if any
          type: array
          items:
            $ref: '#/components/schemas/SubItemEntity'
        credits:
          type: number
          description: The number of credits used to process this content
          example: 0
        description:
          type: string
          nullable: true
          description: The content's description
          example: my-file.pdf
        labels:
          description: The content's labels
          type: array
          items:
            $ref: '#/components/schemas/SubItemEntity'
        mimeType:
          type: string
          nullable: true
          description: The MIME type of the content
          example: application/pdf
        name:
          type: string
          description: The content's name
          example: my-file.pdf
        orgname:
          type: string
          description: The organization name
          example: my-organization
        parent:
          nullable: true
          description: The parent content, if any
          allOf:
            - $ref: '#/components/schemas/SubItemEntity'
        parentId:
          type: string
          nullable: true
          description: The parent content ID, if this content is a child of another content
          example: content-id
        previewImage:
          type: string
          nullable: true
          description: The preview image of the content
          example: https://preview-image.com/example.png
        producedBy:
          nullable: true
          description: The toolRun that produced this content, if any
          allOf:
            - $ref: '#/components/schemas/SubItemEntity'
        producedById:
          type: string
          nullable: true
          description: The ID of the toolRun that produced this content, if any
          example: toolRun-id
        text:
          type: string
          nullable: true
          description: The content's text, if TEXT content
          example: Hello world. I am a text.
        url:
          type: string
          nullable: true
          description: The URL of the content, if AUDIO, VIDEO, IMAGE, or FILE content
          example: https://example.com/example.mp4
        createdAt:
          format: date-time
          type: string
          description: The date that this item was created
          example: '2023-07-11T21:09:20.895Z'
        id:
          type: string
          description: The ID of the item
          example: item-id
      required:
        - children
        - consumedBy
        - credits
        - description
        - labels
        - mimeType
        - name
        - orgname
        - parent
        - parentId
        - previewImage
        - producedBy
        - producedById
        - text
        - url
        - createdAt
        - id
    UpdateContentDto:
      type: object
      properties:
        name:
          type: string
          description: The content's name
          example: my-file.pdf
        url:
          type: string
          nullable: true
          description: The URL of the content, if AUDIO, VIDEO, IMAGE, or FILE content
          example: https://example.com/example.mp4
        text:
          type: string
          nullable: true
          description: The content's text, if TEXT content
          example: Hello world. I am a text.
        labels:
          description: The labels to associate with the content
          example:
            - label-1
            - label-2
          default: []
          type: array
          items:
            type: string
    CreateRunDto:
      type: object
      properties:
        contentIds:
          description: >-
            If using already created content, specify the content IDs to use as
            input for the run.

            example: ['content-id-1', 'content-id-2']
          type: array
          items:
            type: string
        text:
          type: string
          description: >-
            If using direct text input, specify the text to use as input for the
            run. It will automatically be added as content.

            example: 'This is the text to use as input for the run.'
        url:
          type: string
          description: >-
            If using a URL as input, specify the URL to use as input for the
            run. It will automatically be added as content.

            example: 'https://example.com'
        runType:
          type: string
          description: The type of run, either an individual tool run or a pipeline run
          example: TOOL_RUN
          enum:
            - TOOL_RUN
            - PIPELINE_RUN
        pipelineId:
          type: string
          nullable: true
          description: The pipeline ID associated with the run, if applicable
          example: 123e4567-e89b-12d3-a456-426614174000
        toolId:
          type: string
          nullable: true
          description: The tool ID associated with the run, if applicable
          example: 123e4567-e89b-12d3-a456-426614174000
      required:
        - runType
    RunEntity:
      type: object
      properties:
        completedAt:
          format: date-time
          type: string
          nullable: true
          description: The timestamp when the run completed
          example: '2024-11-05T11:42:02.258Z'
        error:
          type: string
          nullable: true
          description: The error message, if any, associated with the run
          example: An unexpected error occurred.
        inputs:
          description: The inputs associated with the run
          type: array
          items:
            $ref: '#/components/schemas/SubItemEntity'
        name:
          type: string
          description: The name of the run
          example: Data Processing PipelineRun
        outputs:
          description: The outputs associated with the run
          type: array
          items:
            $ref: '#/components/schemas/SubItemEntity'
        pipelineId:
          type: string
          nullable: true
          description: The pipeline ID associated with the run, if applicable
          example: 123e4567-e89b-12d3-a456-426614174000
        progress:
          type: number
          description: The progress of the run as a percentage
          example: 50.5
        runType:
          description: The type of run, either an individual tool run or a pipeline run
          example: TOOL_RUN
          enum:
            - TOOL_RUN
            - PIPELINE_RUN
          type: string
        startedAt:
          format: date-time
          type: string
          nullable: true
          description: The timestamp when the run started
          example: '2024-11-05T11:42:02.258Z'
        status:
          description: The status of the run
          example: QUEUED
          enum:
            - QUEUED
            - PROCESSING
            - COMPLETE
            - ERROR
          type: string
        toolId:
          type: string
          nullable: true
          description: The tool ID associated with the run, if applicable
          example: 123e4567-e89b-12d3-a456-426614174000
        createdAt:
          format: date-time
          type: string
          description: The date that this item was created
          example: '2023-07-11T21:09:20.895Z'
        id:
          type: string
          description: The ID of the item
          example: item-id
      required:
        - completedAt
        - error
        - inputs
        - name
        - outputs
        - pipelineId
        - progress
        - runType
        - startedAt
        - status
        - toolId
        - createdAt
        - id
    AggregateFieldResult:
      type: object
      properties:
        field:
          type: string
          description: The field to aggregate by
          example: createdAt
        granularity:
          description: The granularity to use for ranged aggregates
          example: day
          enum:
            - day
            - month
            - week
            - year
          type: string
        type:
          description: The type of aggregate to perform
          example: count
          enum:
            - count
            - sum
          type: string
        value:
          type: number
          description: The value of the aggregate
          example: 10
      required:
        - field
        - granularity
        - type
        - value
    Metadata:
      type: object
      properties:
        limit:
          type: number
          description: The number of results per page
          example: 10
        offset:
          type: number
          description: The current page
          example: 1
        totalResults:
          type: number
          description: The total number of results
          example: 100
      required:
        - limit
        - offset
        - totalResults
