components:
  schemas:
    FilterValue:
      description: Value for filter conditions (scalar | array | range | relative)
      anyOf:
        - { type: string }
        - { type: number }
        - { type: boolean }
        - type: array
          items:
            anyOf: [{ type: string }, { type: number }, { type: boolean }]
        - type: object # range
          additionalProperties: false
          required: [from, to]
          properties:
            from: { anyOf: [{ type: string }, { type: number }] }
            to: { anyOf: [{ type: string }, { type: number }] }
        - type: object # relative to today
          additionalProperties: false
          required: [unit, value]
          properties:
            unit: { type: string, enum: [days, weeks, months, years] }
            value: { type: number }

    Operator:
      description: Supported filter operations
      type: string
      enum:
        - eq
        - ne
        - lt
        - lte
        - gt
        - gte
        - iLike
        - notILike
        - inArray
        - notInArray
        - isEmpty
        - isNotEmpty
        - isBetween
        - isRelativeToToday

    FilterCondition:
      description: A single filter condition with field, operator, and value
      type: object
      additionalProperties: false
      required: [type, field, operator, value]
      properties:
        type: { const: condition }
        field: { type: string }
        operator: { $ref: '#/components/schemas/Operator' }
        value: { $ref: '#/components/schemas/FilterValue' }

    FilterNode:
      description: A recursive filter node that can be a condition or group
      anyOf:
        - $ref: '#/components/schemas/FilterCondition'
        - type: object
          description: A logical group of filter conditions or other groups
          additionalProperties: false
          required: [type, operator, children]
          properties:
            type: { const: group }
            operator: { type: string, enum: [and, or] }
            children:
              type: array
              items: { $ref: '#/components/schemas/FilterNode' }

    Page:
      description: Pagination (page number & size)
      type: object
      additionalProperties: false
      properties:
        number:
          { type: integer, minimum: 1, default: 1, maximum: 9007199254740991 }
        size: { type: integer, minimum: 1, default: 10, maximum: 100 }

    Sort:
      description: Sorting configuration with field and order
      type: object
      additionalProperties: false
      required: [field, order]
      properties:
        field: { type: string }
        order: { type: string, enum: [asc, desc] }

    SearchQuery:
      description: Complete search query with nested filters, pagination, and sorting
      type: object
      additionalProperties: false
      properties:
        filter: { $ref: '#/components/schemas/FilterNode' }
        page: { $ref: '#/components/schemas/Page' }
        sort:
          type: array
          items: { $ref: '#/components/schemas/Sort' }
