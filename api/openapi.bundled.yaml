openapi: 3.0.3
info:
  title: Arches AI API
  description: The Arches AI API
  version: v0.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  contact:
    name: Arches AI Support
    email: support@archesai.com
    url: https://archesai.com/support
servers:
  - url: https://api.archesai.dev
    description: Remote development server
  - url: https://api.archesai.com
    description: Production server
security:
  - bearerAuth: []
  - sessionCookie: []
tags:
  - name: Accounts
    description: Account management operations
  - name: Artifacts
    description: Intelligence artifact operations
  - name: Auth
    description: Authentication and authorization operations
  - name: Config
    description: Configuration management
  - name: Health
    description: Health check operations
  - name: Infrastructure
    description: Infrastructure management operations
  - name: Intelligence
    description: AI and intelligence operations
  - name: Invitations
    description: User invitation management
  - name: Labels
    description: Label management operations
  - name: Members
    description: Organization member management
  - name: Organizations
    description: Organization management operations
  - name: Pipelines
    description: Pipeline management operations
  - name: Runs
    description: Pipeline run operations
  - name: Sessions
    description: Session management operations
  - name: Tools
    description: Tool management operations
  - name: Users
    description: User management operations
paths:
  /auth/accounts:
    get:
      operationId: accounts_findMany
      summary: Find many accounts
      tags:
        - Accounts
      parameters:
        - $ref: '#/components/parameters/AccountsFilter'
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/AccountsSort'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of accounts
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                  - meta
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AccountEntity'
                  meta:
                    type: object
                    additionalProperties: false
                    required:
                      - total
                    properties:
                      total:
                        type: number
                        example: 42
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
      description: Find many accounts
  /auth/accounts/{id}:
    get:
      operationId: accounts_getOne
      summary: Find an account
      tags:
        - Accounts
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
            pattern: ^(?:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          description: The unique identifier of the resource
      security:
        - bearerAuth: []
      responses:
        '200':
          description: The account
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/AccountEntity'
        '404':
          $ref: '#/components/responses/NotFound'
      description: Find an account
    delete:
      operationId: accounts_delete
      summary: Delete an account
      tags:
        - Accounts
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
            pattern: ^(?:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          description: The unique identifier of the resource
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Deleted account
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/AccountEntity'
        '404':
          $ref: '#/components/responses/NotFound'
      description: Delete an account
  /auth/sign-up:
    post:
      operationId: register
      summary: Register
      tags:
        - Auth
      description: This endpoint will register you with your e-mail and password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: The email address associated with the account
                  type: string
                  format: email
                  pattern: ^(?!\.)(?!.*\.\.)([A-Za-z0-9_'+\-\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\-]*\.)+[A-Za-z]{2,}$
                  example: user@example.com
                  minLength: 1
                name:
                  description: The name of the user creating the account
                  type: string
                  minLength: 1
                  example: Example Name
                password:
                  description: The password for the account
                  type: string
                  minLength: 1
                  example: example-string
              required:
                - email
                - name
                - password
        required: true
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserEntity'
                required:
                  - data
                additionalProperties: false
        '401':
          $ref: '#/components/responses/Unauthorized'
  /auth/sign-in:
    post:
      operationId: login
      summary: Login
      tags:
        - Auth
      description: This endpoint will log you in with your e-mail and password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: The email address associated with the account
                  type: string
                  format: email
                  pattern: ^(?!\.)(?!.*\.\.)([A-Za-z0-9_'+\-\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\-]*\.)+[A-Za-z]{2,}$
                  example: user@example.com
                  minLength: 1
                password:
                  description: The password for the account
                  type: string
                  minLength: 1
                  example: example-string
              required:
                - email
                - password
        required: true
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserEntity'
                required:
                  - data
                additionalProperties: false
        '401':
          $ref: '#/components/responses/Unauthorized'
  /auth/sign-out:
    post:
      operationId: logout
      summary: Logout
      tags:
        - Auth
      description: This endpoint will log you out of the current session
      responses:
        '204':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /auth/email-verification/verify:
    post:
      operationId: confirmEmailVerification
      summary: Confirm e-mail verification
      tags:
        - Auth
      description: This endpoint will confirm your e-mail with a token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  description: The password reset token
                  type: string
                  minLength: 1
                  example: example-string
              required:
                - token
        required: true
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  session:
                    $ref: '#/components/schemas/SessionEntity'
                  user:
                    $ref: '#/components/schemas/UserEntity'
                required:
                  - session
                  - user
                additionalProperties: false
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /auth/email-verification/request:
    post:
      operationId: requestEmailVerification
      summary: Request e-mail verification
      tags:
        - Auth
      description: This endpoint will send an e-mail verification link to you. ADMIN ONLY.
      security:
        - bearerAuth: []
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /auth/password-reset/request:
    post:
      operationId: requestPasswordReset
      summary: Request password reset
      tags:
        - Auth
      description: This endpoint will request a password reset link
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: The e-mail to send the password reset token to
                  type: string
                  minLength: 1
                  example: example-string
              required:
                - email
        required: true
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
  /auth/password-reset/verify:
    post:
      operationId: confirmPasswordReset
      summary: Verify password reset
      tags:
        - Auth
      description: This endpoint will verify your password change with a token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  description: The new password
                  type: string
                  minLength: 1
                  example: example-string
                token:
                  description: The password reset token
                  type: string
                  minLength: 1
                  example: example-string
              required:
                - newPassword
                - token
        required: true
      responses:
        '204':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /auth/email-change/request:
    post:
      operationId: requestEmailChange
      summary: Request e-mail change
      tags:
        - Auth
      description: This endpoint will request your e-mail change with a token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newEmail:
                  description: The e-mail to send the confirmation token to
                  type: string
                  format: email
                  pattern: ^(?!\.)(?!.*\.\.)([A-Za-z0-9_'+\-\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\-]*\.)+[A-Za-z]{2,}$
                  example: user@example.com
                  minLength: 1
                userId:
                  description: The user ID of the user requesting the email change
                  type: string
                  format: uuid
                  pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
                  example: 550e8400-e29b-41d4-a716-446655440000
                  minLength: 36
              required:
                - newEmail
                - userId
        required: true
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /auth/email-change/verify:
    post:
      operationId: confirmEmailChange
      summary: Verify e-mail change
      tags:
        - Auth
      description: This endpoint will verify your e-mail change with a token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newEmail:
                  description: The e-mail to send the confirmation token to
                  type: string
                  format: email
                  pattern: ^(?!\.)(?!.*\.\.)([A-Za-z0-9_'+\-\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\-]*\.)+[A-Za-z]{2,}$
                  example: user@example.com
                  minLength: 1
                token:
                  description: The password reset token
                  type: string
                  minLength: 1
                  example: example-string
                userId:
                  description: The user ID of the user requesting the email change
                  type: string
                  format: uuid
                  pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
                  example: 550e8400-e29b-41d4-a716-446655440000
                  minLength: 36
              required:
                - newEmail
                - token
                - userId
        required: true
      responses:
        '204':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /auth/invitations:
    post:
      operationId: createInvitation
      summary: Create a new invitation
      tags:
        - Invitations
      description: Create a new invitation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: The email of the invitated user
                  type: string
                  example: example-string
                  minLength: 1
                role:
                  description: The role of the invitation
                  type: string
                  enum:
                    - admin
                    - owner
                    - member
                  example: admin
                  minLength: 1
              required:
                - email
                - role
        required: true
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/InvitationEntity'
                required:
                  - data
                additionalProperties: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      operationId: findManyInvitations
      summary: Find many invitations
      tags:
        - Invitations
      description: Find many invitations
      parameters:
        - $ref: '#/components/parameters/InvitationsFilter'
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/InvitationsSort'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/InvitationEntity'
                  meta:
                    type: object
                    properties:
                      total:
                        description: Total number of items in the collection
                        type: number
                        example: 42
                    required:
                      - total
                    additionalProperties: false
                required:
                  - data
                  - meta
                additionalProperties: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /auth/invitations/{id}:
    delete:
      operationId: deleteInvitation
      summary: Delete an invitation
      tags:
        - Invitations
      description: Delete an invitation
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/InvitationEntity'
                required:
                  - data
                additionalProperties: false
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      operationId: getOneInvitation
      summary: Find an invitation
      tags:
        - Invitations
      description: Find an invitation
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/InvitationEntity'
                required:
                  - data
                additionalProperties: false
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      operationId: updateInvitation
      summary: Update an invitation
      tags:
        - Invitations
      description: Update an invitation
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: The email of the invitated user
                  type: string
                  example: example-string
                role:
                  description: The role of the invitation
                  type: string
                  enum:
                    - admin
                    - owner
                    - member
                  example: admin
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/InvitationEntity'
                required:
                  - data
                additionalProperties: false
        '404':
          $ref: '#/components/responses/NotFound'
  /auth/members:
    post:
      operationId: createMember
      summary: Create a new member
      tags:
        - Members
      description: Create a new member
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  description: The role of the member
                  type: string
                  enum:
                    - admin
                    - owner
                    - member
                  example: admin
                  minLength: 1
              required:
                - role
        required: true
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/MemberEntity'
                required:
                  - data
                additionalProperties: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      operationId: findManyMembers
      summary: Find many members
      tags:
        - Members
      description: Find many members
      parameters:
        - $ref: '#/components/parameters/MembersFilter'
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/MembersSort'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/MemberEntity'
                  meta:
                    type: object
                    properties:
                      total:
                        description: Total number of items in the collection
                        type: number
                        example: 42
                    required:
                      - total
                    additionalProperties: false
                required:
                  - data
                  - meta
                additionalProperties: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /auth/members/{id}:
    delete:
      operationId: deleteMember
      summary: Delete a member
      tags:
        - Members
      description: Delete a member
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/MemberEntity'
                required:
                  - data
                additionalProperties: false
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      operationId: getOneMember
      summary: Find a member
      tags:
        - Members
      description: Find a member
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/MemberEntity'
                required:
                  - data
                additionalProperties: false
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      operationId: updateMember
      summary: Update a member
      tags:
        - Members
      description: Update a member
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  description: The role of the member
                  type: string
                  enum:
                    - admin
                    - owner
                    - member
                  example: admin
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/MemberEntity'
                required:
                  - data
                additionalProperties: false
        '404':
          $ref: '#/components/responses/NotFound'
  /auth/organizations:
    post:
      operationId: createOrganization
      summary: Create a new organization
      tags:
        - Organizations
      description: Create a new organization
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                billingEmail:
                  description: The billing email to use for the organization
                  type: string
                  nullable: true
                  example: example-string
                  minLength: 1
                organizationId:
                  description: The ID of the item
                  type: string
                  format: uuid
                  pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
                  example: 550e8400-e29b-41d4-a716-446655440000
                  minLength: 36
              required:
                - billingEmail
                - organizationId
        required: true
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/OrganizationEntity'
                required:
                  - data
                additionalProperties: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      operationId: findManyOrganizations
      summary: Find many organizations
      tags:
        - Organizations
      description: Find many organizations
      parameters:
        - $ref: '#/components/parameters/OrganizationsFilter'
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/OrganizationsSort'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/OrganizationEntity'
                  meta:
                    type: object
                    properties:
                      total:
                        description: Total number of items in the collection
                        type: number
                        example: 42
                    required:
                      - total
                    additionalProperties: false
                required:
                  - data
                  - meta
                additionalProperties: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /auth/organizations/{id}:
    delete:
      operationId: deleteOrganization
      summary: Delete an organization
      tags:
        - Organizations
      description: Delete an organization
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/OrganizationEntity'
                required:
                  - data
                additionalProperties: false
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      operationId: getOneOrganization
      summary: Find an organization
      tags:
        - Organizations
      description: Find an organization
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/OrganizationEntity'
                required:
                  - data
                additionalProperties: false
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      operationId: updateOrganization
      summary: Update an organization
      tags:
        - Organizations
      description: Update an organization
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                billingEmail:
                  description: The billing email to use for the organization
                  type: string
                  nullable: true
                  example: example-string
                organizationId:
                  description: The ID of the item
                  type: string
                  format: uuid
                  pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
                  example: 550e8400-e29b-41d4-a716-446655440000
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/OrganizationEntity'
                required:
                  - data
                additionalProperties: false
        '404':
          $ref: '#/components/responses/NotFound'
  /auth/sessions:
    get:
      operationId: findManySessions
      summary: Find many sessions
      tags:
        - Sessions
      description: Find many sessions
      parameters:
        - $ref: '#/components/parameters/SessionsFilter'
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/SessionsSort'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/SessionEntity'
                  meta:
                    type: object
                    properties:
                      total:
                        description: Total number of items in the collection
                        type: number
                        example: 42
                    required:
                      - total
                    additionalProperties: false
                required:
                  - data
                  - meta
                additionalProperties: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /auth/sessions/{id}:
    delete:
      operationId: deleteSession
      summary: Delete a session
      tags:
        - Sessions
      description: Delete a session
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SessionEntity'
                required:
                  - data
                additionalProperties: false
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      operationId: getOneSession
      summary: Find a session
      tags:
        - Sessions
      description: Find a session
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SessionEntity'
                required:
                  - data
                additionalProperties: false
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      operationId: updateSession
      summary: Update Session
      tags:
        - Sessions
      description: This endpoint will update the active organization for the current session
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                activeOrganizationId:
                  description: The active organization ID
                  type: string
                  nullable: true
                  example: example-id-123
                  minLength: 1
              required:
                - activeOrganizationId
        required: true
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/SessionEntity'
                required:
                  - data
                additionalProperties: false
        '401':
          $ref: '#/components/responses/Unauthorized'
  /auth/users:
    get:
      operationId: findManyUsers
      summary: Find many users
      tags:
        - Users
      description: Find many users
      parameters:
        - $ref: '#/components/parameters/UsersFilter'
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/UsersSort'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserEntity'
                  meta:
                    type: object
                    properties:
                      total:
                        description: Total number of items in the collection
                        type: number
                        example: 42
                    required:
                      - total
                    additionalProperties: false
                required:
                  - data
                  - meta
                additionalProperties: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /auth/users/{id}:
    delete:
      operationId: deleteUser
      summary: Delete an user
      tags:
        - Users
      description: Delete an user
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserEntity'
                required:
                  - data
                additionalProperties: false
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      operationId: getOneUser
      summary: Find an user
      tags:
        - Users
      description: Find an user
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserEntity'
                required:
                  - data
                additionalProperties: false
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      operationId: updateUser
      summary: Update an user
      tags:
        - Users
      description: Update an user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: The user's e-mail
                  type: string
                  minLength: 1
                  example: example-string
                image:
                  description: The user's avatar image URL
                  type: string
                  nullable: true
                  example: example-string
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserEntity'
                required:
                  - data
                additionalProperties: false
        '404':
          $ref: '#/components/responses/NotFound'
  /intelligence/artifacts:
    post:
      operationId: createArtifact
      summary: Create a new artifact
      tags:
        - Artifacts
      description: Create a new artifact
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The name of the artifact
                  type: string
                  minLength: 1
                  example: Example Name
                text:
                  description: The artifact text
                  type: string
                  nullable: true
                  example: example-string
                  minLength: 1
                url:
                  description: The artifact URL
                  type: string
                  nullable: true
                  example: example-string
                  minLength: 1
              required:
                - name
                - text
                - url
        required: true
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ArtifactEntity'
                required:
                  - data
                additionalProperties: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      operationId: findManyArtifacts
      summary: Find many artifacts
      tags:
        - Artifacts
      description: Find many artifacts
      parameters:
        - $ref: '#/components/parameters/ArtifactsFilter'
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/ArtifactsSort'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ArtifactEntity'
                  meta:
                    type: object
                    properties:
                      total:
                        description: Total number of items in the collection
                        type: number
                        example: 42
                    required:
                      - total
                    additionalProperties: false
                required:
                  - data
                  - meta
                additionalProperties: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /intelligence/artifacts/{id}:
    delete:
      operationId: deleteArtifact
      summary: Delete an artifact
      tags:
        - Artifacts
      description: Delete an artifact
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ArtifactEntity'
                required:
                  - data
                additionalProperties: false
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      operationId: getOneArtifact
      summary: Find an artifact
      tags:
        - Artifacts
      description: Find an artifact
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ArtifactEntity'
                required:
                  - data
                additionalProperties: false
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      operationId: updateArtifact
      summary: Update an artifact
      tags:
        - Artifacts
      description: Update an artifact
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The name of the artifact
                  type: string
                  minLength: 1
                  example: Example Name
                text:
                  description: The artifact text
                  type: string
                  nullable: true
                  example: example-string
                url:
                  description: The artifact URL
                  type: string
                  nullable: true
                  example: example-string
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ArtifactEntity'
                required:
                  - data
                additionalProperties: false
        '404':
          $ref: '#/components/responses/NotFound'
  /intelligence/labels:
    post:
      operationId: createLabel
      summary: Create a new label
      tags:
        - Labels
      description: Create a new label
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The name of the label
                  type: string
                  minLength: 1
                  example: Example Name
              required:
                - name
        required: true
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/LabelEntity'
                required:
                  - data
                additionalProperties: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      operationId: findManyLabels
      summary: Find many labels
      tags:
        - Labels
      description: Find many labels
      parameters:
        - $ref: '#/components/parameters/LabelsFilter'
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/LabelsSort'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LabelEntity'
                  meta:
                    type: object
                    properties:
                      total:
                        description: Total number of items in the collection
                        type: number
                        example: 42
                    required:
                      - total
                    additionalProperties: false
                required:
                  - data
                  - meta
                additionalProperties: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /intelligence/labels/{id}:
    delete:
      operationId: deleteLabel
      summary: Delete a label
      tags:
        - Labels
      description: Delete a label
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/LabelEntity'
                required:
                  - data
                additionalProperties: false
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      operationId: getOneLabel
      summary: Find a label
      tags:
        - Labels
      description: Find a label
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/LabelEntity'
                required:
                  - data
                additionalProperties: false
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      operationId: updateLabel
      summary: Update a label
      tags:
        - Labels
      description: Update a label
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The name of the label
                  type: string
                  minLength: 1
                  example: Example Name
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/LabelEntity'
                required:
                  - data
                additionalProperties: false
        '404':
          $ref: '#/components/responses/NotFound'
  /intelligence/pipelines:
    post:
      operationId: createPipeline
      summary: Create a new pipeline
      tags:
        - Pipelines
      description: Create a new pipeline
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  description: The pipeline description
                  type: string
                  nullable: true
                  example: Example description text
                  minLength: 1
                name:
                  description: The pipeline name
                  type: string
                  nullable: true
                  example: Example Name
                  minLength: 1
              required:
                - description
                - name
        required: true
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PipelineEntity'
                required:
                  - data
                additionalProperties: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      operationId: findManyPipelines
      summary: Find many pipelines
      tags:
        - Pipelines
      description: Find many pipelines
      parameters:
        - $ref: '#/components/parameters/PipelinesFilter'
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/PipelinesSort'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PipelineEntity'
                  meta:
                    type: object
                    properties:
                      total:
                        description: Total number of items in the collection
                        type: number
                        example: 42
                    required:
                      - total
                    additionalProperties: false
                required:
                  - data
                  - meta
                additionalProperties: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /intelligence/pipelines/{id}:
    delete:
      operationId: deletePipeline
      summary: Delete a pipeline
      tags:
        - Pipelines
      description: Delete a pipeline
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PipelineEntity'
                required:
                  - data
                additionalProperties: false
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      operationId: getOnePipeline
      summary: Find a pipeline
      tags:
        - Pipelines
      description: Find a pipeline
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PipelineEntity'
                required:
                  - data
                additionalProperties: false
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      operationId: updatePipeline
      summary: Update a pipeline
      tags:
        - Pipelines
      description: Update a pipeline
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  description: The pipeline description
                  type: string
                  nullable: true
                  example: Example description text
                name:
                  description: The pipeline name
                  type: string
                  nullable: true
                  example: Example Name
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PipelineEntity'
                required:
                  - data
                additionalProperties: false
        '404':
          $ref: '#/components/responses/NotFound'
  /intelligence/runs:
    post:
      operationId: createRun
      summary: Create a new run
      tags:
        - Runs
      description: Create a new run
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pipelineId:
                  description: The pipeline ID associated with the run
                  type: string
                  nullable: true
                  example: example-id-123
                  minLength: 1
              required:
                - pipelineId
        required: true
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RunEntity'
                required:
                  - data
                additionalProperties: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      operationId: findManyRuns
      summary: Find many runs
      tags:
        - Runs
      description: Find many runs
      parameters:
        - $ref: '#/components/parameters/RunsFilter'
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/RunsSort'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/RunEntity'
                  meta:
                    type: object
                    properties:
                      total:
                        description: Total number of items in the collection
                        type: number
                        example: 42
                    required:
                      - total
                    additionalProperties: false
                required:
                  - data
                  - meta
                additionalProperties: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /intelligence/runs/{id}:
    delete:
      operationId: deleteRun
      summary: Delete a run
      tags:
        - Runs
      description: Delete a run
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RunEntity'
                required:
                  - data
                additionalProperties: false
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      operationId: getOneRun
      summary: Find a run
      tags:
        - Runs
      description: Find a run
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RunEntity'
                required:
                  - data
                additionalProperties: false
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      operationId: updateRun
      summary: Update a run
      tags:
        - Runs
      description: Update a run
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                pipelineId:
                  description: The pipeline ID associated with the run
                  type: string
                  nullable: true
                  example: example-id-123
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/RunEntity'
                required:
                  - data
                additionalProperties: false
        '404':
          $ref: '#/components/responses/NotFound'
  /intelligence/tools:
    post:
      operationId: createTool
      summary: Create a new tool
      tags:
        - Tools
      description: Create a new tool
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  description: The tool description
                  type: string
                  minLength: 1
                  example: Example description text
                name:
                  description: The name of the tool
                  type: string
                  minLength: 1
                  example: Example Name
              required:
                - description
                - name
        required: true
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ToolEntity'
                required:
                  - data
                additionalProperties: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    get:
      operationId: findManyTools
      summary: Find many tools
      tags:
        - Tools
      description: Find many tools
      parameters:
        - $ref: '#/components/parameters/ToolsFilter'
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/ToolsSort'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ToolEntity'
                  meta:
                    type: object
                    properties:
                      total:
                        description: Total number of items in the collection
                        type: number
                        example: 42
                    required:
                      - total
                    additionalProperties: false
                required:
                  - data
                  - meta
                additionalProperties: false
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /intelligence/tools/{id}:
    delete:
      operationId: deleteTool
      summary: Delete a tool
      tags:
        - Tools
      description: Delete a tool
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ToolEntity'
                required:
                  - data
                additionalProperties: false
        '404':
          $ref: '#/components/responses/NotFound'
    get:
      operationId: getOneTool
      summary: Find a tool
      tags:
        - Tools
      description: Find a tool
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ToolEntity'
                required:
                  - data
                additionalProperties: false
        '404':
          $ref: '#/components/responses/NotFound'
    patch:
      operationId: updateTool
      summary: Update a tool
      tags:
        - Tools
      description: Update a tool
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  description: The tool description
                  type: string
                  minLength: 1
                  example: Example description text
                name:
                  description: The name of the tool
                  type: string
                  minLength: 1
                  example: Example Name
      parameters:
        - schema:
            type: string
            format: uuid
            pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
            example: 550e8400-e29b-41d4-a716-446655440000
          in: path
          name: id
          required: true
          description: The unique identifier of the resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ToolEntity'
                required:
                  - data
                additionalProperties: false
        '404':
          $ref: '#/components/responses/NotFound'
  /config:
    get:
      operationId: getConfig
      summary: Get the configuration
      tags:
        - Config
      description: Get the configuration of the application
      responses:
        '200':
          description: Current configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArchesConfig'
        '400':
          $ref: '#/components/responses/BadRequest'
  /health:
    get:
      operationId: getHealth
      summary: Health check endpoint
      tags:
        - Health
      description: Check the health status of the application
      responses:
        '200':
          description: Default Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
components:
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      description: API Token for authenticated requests
      scheme: bearer
      type: http
    sessionCookie:
      description: Session cookie for authenticated requests
      in: cookie
      name: __Secure-better-auth.session_token
      type: apiKey
  schemas:
    FilterNode:
      description: A recursive filter node that can be a condition or group
      type: object
      x-go-type: interface{}
    Page:
      description: Pagination (page number & size)
      type: object
      additionalProperties: false
      properties:
        number:
          type: integer
          minimum: 1
          default: 1
          maximum: 9007199254740991
          example: 2
        size:
          type: integer
          minimum: 1
          default: 10
          maximum: 100
          example: 2
    UUID:
      description: Universally Unique Identifier
      type: string
      format: uuid
      example: 550e8400-e29b-41d4-a716-446655440000
      x-go-type: uuid.UUID
      x-go-import:
        path: github.com/google/uuid
      minLength: 36
    BaseEntity:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        createdAt:
          description: The date and time when the resource was created
          type: string
          format: date-time
          example: '2024-01-15T09:30:00Z'
          x-go-type: time.Time
          minLength: 1
        updatedAt:
          description: The date and time when the resource was last updated
          type: string
          format: date-time
          example: '2024-01-15T10:45:00Z'
          x-go-type: time.Time
          minLength: 1
      required:
        - id
        - createdAt
        - updatedAt
    NullableString:
      type: string
      nullable: true
      x-go-type: '*string'
      x-omitempty: true
      example: example-string
    NullableDateTime:
      type: string
      format: date-time
      nullable: true
      x-go-type: '*time.Time'
      x-omitempty: true
      example: '2024-01-15T09:30:00Z'
      minLength: 1
    AccountEntity:
      description: Schema for Account entity (authentication provider account)
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          properties:
            accountId:
              description: The unique identifier for the account from the provider
              type: string
              example: google_123456789
              x-go-validate: required
              minLength: 1
            userId:
              description: The user ID this account belongs to
              allOf:
                - $ref: '#/components/schemas/UUID'
            providerId:
              description: The authentication provider identifier
              type: string
              enum:
                - local
                - google
                - github
                - microsoft
                - apple
              example: google
              x-go-validate: required,oneof=local google github microsoft apple
              minLength: 1
            accessToken:
              description: The OAuth access token
              allOf:
                - $ref: '#/components/schemas/NullableString'
              x-sensitive: true
            accessTokenExpiresAt:
              description: The access token expiration timestamp
              allOf:
                - $ref: '#/components/schemas/NullableDateTime'
            refreshToken:
              description: The OAuth refresh token
              allOf:
                - $ref: '#/components/schemas/NullableString'
              x-sensitive: true
            refreshTokenExpiresAt:
              description: The refresh token expiration timestamp
              allOf:
                - $ref: '#/components/schemas/NullableDateTime'
            idToken:
              description: The OpenID Connect ID token
              allOf:
                - $ref: '#/components/schemas/NullableString'
              x-sensitive: true
            password:
              description: The hashed password (only for local authentication)
              allOf:
                - $ref: '#/components/schemas/NullableString'
              x-sensitive: true
            scope:
              description: The OAuth scope granted
              allOf:
                - $ref: '#/components/schemas/NullableString'
              example: openid profile email
          required:
            - accountId
            - userId
            - providerId
          additionalProperties: false
    ValidationError:
      description: Individual field validation error
      type: object
      additionalProperties: false
      required:
        - field
        - message
      properties:
        field:
          type: string
          description: The field path that failed validation
          example: email
          minLength: 1
        message:
          type: string
          description: Human-readable error message
          example: must be a valid email address
          minLength: 1
        value:
          description: The invalid value that was provided
          oneOf:
            - type: string
              minLength: 1
              example: example-string
              nullable: true
            - type: number
              example: 42
              nullable: true
            - type: boolean
              example: true
              nullable: true
          example: invalid-email
          x-go-type: interface{}
    Problem:
      description: RFC 7807 (Problem Details) compliant error response
      type: object
      additionalProperties: false
      required:
        - status
        - type
        - title
        - detail
      properties:
        status:
          type: integer
          description: HTTP status code
          minimum: 100
          maximum: 599
          example: 400
        type:
          type: string
          format: uri
          description: URI identifying the problem type
          default: about:blank
          example: https://api.example.com/errors/validation-failed
          minLength: 1
        title:
          type: string
          description: Short, human-readable summary
          example: Validation Failed
          minLength: 1
        detail:
          type: string
          description: Human-readable explanation specific to this occurrence
          example: The request body contains invalid fields
          minLength: 1
        instance:
          type: string
          format: uri
          description: URI identifying the specific occurrence
          example: https://api.example.com/auth/users/123
          x-omitempty: true
        errors:
          description: Additional validation errors for specific fields
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/ValidationError'
          x-omitempty: true
      x-go-name: ProblemDetails
    Email:
      type: string
      format: email
      pattern: ^(?!\.)(?!.*\.\.)([A-Za-z0-9_'+\-\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\-]*\.)+[A-Za-z]{2,}$
      example: user@example.com
      x-go-validate: required,email
    UserEntity:
      description: Schema for User entity
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          properties:
            email:
              description: The user's email address
              allOf:
                - $ref: '#/components/schemas/Email'
            emailVerified:
              description: Whether the user's email has been verified
              type: boolean
              default: false
              example: true
            image:
              description: The user's avatar image URL
              allOf:
                - $ref: '#/components/schemas/NullableString'
              example: https://example.com/avatar.jpg
            name:
              description: The user's display name
              type: string
              minLength: 1
              maxLength: 255
              example: John Doe
              x-go-validate: required,min=1,max=255
          required:
            - email
            - emailVerified
            - name
          additionalProperties: false
    SessionEntity:
      description: Schema for Session entity
      type: object
      properties:
        createdAt:
          description: The date this item was created
          type: string
          format: date-time
          example: '2024-01-15T09:30:00Z'
          minLength: 1
        id:
          description: The ID of the item
          type: string
          format: uuid
          pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
          example: 550e8400-e29b-41d4-a716-446655440000
          minLength: 36
        updatedAt:
          description: The date this item was last updated
          type: string
          format: date-time
          example: '2024-01-15T09:30:00Z'
          minLength: 1
        activeOrganizationId:
          description: The active organization ID
          type: string
          nullable: true
          example: example-id-123
          minLength: 1
        expiresAt:
          description: The expiration date of the session
          type: string
          minLength: 1
          example: example-string
        ipAddress:
          description: The IP address of the session
          type: string
          nullable: true
          example: example-string
          minLength: 1
        token:
          description: The session token
          type: string
          minLength: 1
          example: example-string
        userAgent:
          description: The user agent of the session
          type: string
          nullable: true
          example: example-string
          minLength: 1
        userId:
          description: The ID of the user associated with the session
          type: string
          minLength: 1
          example: example-id-123
      required:
        - createdAt
        - id
        - updatedAt
        - activeOrganizationId
        - expiresAt
        - ipAddress
        - token
        - userAgent
        - userId
      additionalProperties: false
    InvitationEntity:
      description: Schema for Invitation entity
      type: object
      properties:
        createdAt:
          description: The date this item was created
          type: string
          format: date-time
          example: '2024-01-15T09:30:00Z'
          minLength: 1
        id:
          description: The ID of the item
          type: string
          format: uuid
          pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
          example: 550e8400-e29b-41d4-a716-446655440000
          minLength: 36
        updatedAt:
          description: The date this item was last updated
          type: string
          format: date-time
          example: '2024-01-15T09:30:00Z'
          minLength: 1
        email:
          description: The email of the invitated user
          type: string
          example: example-string
          minLength: 1
        expiresAt:
          description: The date and time when the invitation expires
          type: string
          minLength: 1
          example: example-string
        inviterId:
          description: The user id of the inviter
          type: string
          minLength: 1
          example: example-id-123
        organizationId:
          description: The name of the organization the token belongs to
          type: string
          minLength: 1
          example: example-id-123
        role:
          description: The role of the invitation
          type: string
          enum:
            - admin
            - owner
            - member
          example: admin
          minLength: 1
        status:
          description: The status of the invitation, e.g., pending, accepted, declined
          type: string
          minLength: 1
          example: example-string
      required:
        - createdAt
        - id
        - updatedAt
        - email
        - expiresAt
        - inviterId
        - organizationId
        - role
        - status
      additionalProperties: false
    MemberEntity:
      description: Schema for Member entity
      type: object
      properties:
        createdAt:
          description: The date this item was created
          type: string
          format: date-time
          example: '2024-01-15T09:30:00Z'
          minLength: 1
        id:
          description: The ID of the item
          type: string
          format: uuid
          pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
          example: 550e8400-e29b-41d4-a716-446655440000
          minLength: 36
        updatedAt:
          description: The date this item was last updated
          type: string
          format: date-time
          example: '2024-01-15T09:30:00Z'
          minLength: 1
        organizationId:
          description: The organization name
          type: string
          minLength: 1
          example: example-id-123
        role:
          description: The role of the member
          type: string
          enum:
            - admin
            - owner
            - member
          example: admin
          minLength: 1
        userId:
          description: The user id
          type: string
          minLength: 1
          example: example-id-123
      required:
        - createdAt
        - id
        - updatedAt
        - organizationId
        - role
        - userId
      additionalProperties: false
    OrganizationEntity:
      description: Schema for Organization entity
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - type: object
          properties:
            name:
              description: The organization's display name
              type: string
              minLength: 1
              maxLength: 255
              example: Acme Corporation
              x-go-validate: required,min=1,max=255
            slug:
              description: URL-friendly unique identifier for the organization
              type: string
              pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
              minLength: 3
              maxLength: 50
              example: acme-corp
              x-go-validate: required,min=3,max=50,slug
            logo:
              description: The organization's logo URL
              allOf:
                - $ref: '#/components/schemas/NullableString'
              example: https://example.com/org-logo.png
            billingEmail:
              description: Email address for billing communications
              type: string
              format: email
              nullable: true
              example: billing@acme.com
              x-go-type: '*string'
              x-omitempty: true
            plan:
              description: The current subscription plan
              type: string
              enum:
                - FREE
                - BASIC
                - STANDARD
                - PREMIUM
                - UNLIMITED
              default: FREE
              example: STANDARD
              x-go-validate: required,oneof=FREE BASIC STANDARD PREMIUM UNLIMITED
              minLength: 1
            credits:
              description: Available credits for this organization
              type: number
              minimum: 0
              default: 0
              example: 1000
              x-go-type: float64
            metadata:
              description: Custom metadata in JSON format
              allOf:
                - $ref: '#/components/schemas/NullableString'
              x-go-type: '*json.RawMessage'
              x-go-import:
                path: encoding/json
            stripeCustomerId:
              description: Stripe customer identifier
              allOf:
                - $ref: '#/components/schemas/NullableString'
              x-sensitive: true
          required:
            - name
            - slug
            - plan
            - credits
          additionalProperties: false
    ArtifactEntity:
      description: Schema for Artifact entity
      type: object
      properties:
        createdAt:
          description: The date this item was created
          type: string
          format: date-time
          example: '2024-01-15T09:30:00Z'
          minLength: 1
        id:
          description: The ID of the item
          type: string
          format: uuid
          pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
          example: 550e8400-e29b-41d4-a716-446655440000
          minLength: 36
        updatedAt:
          description: The date this item was last updated
          type: string
          format: date-time
          example: '2024-01-15T09:30:00Z'
          minLength: 1
        credits:
          description: The number of credits required to access this artifact. This is used for metering and billing purposes.
          type: number
          example: 42
        description:
          description: The artifact's description
          type: string
          nullable: true
          example: Example description text
          minLength: 1
        mimeType:
          description: The MIME type of the artifact, e.g. image/png
          type: string
          minLength: 1
          example: example-string
        name:
          description: The name of the artifact, used for display purposes
          type: string
          nullable: true
          example: Example Name
          minLength: 1
        organizationId:
          description: The organization name
          type: string
          minLength: 1
          example: example-id-123
        previewImage:
          description: The URL of the preview image for this artifact. This is used for displaying a thumbnail in the UI.
          type: string
          nullable: true
          example: example-string
          minLength: 1
        producerId:
          description: The ID of the run that produced this artifact, if applicable
          type: string
          nullable: true
          example: example-id-123
          minLength: 1
        text:
          description: The artifact text
          type: string
          nullable: true
          example: example-string
          minLength: 1
        url:
          description: The artifact URL
          type: string
          nullable: true
          example: example-string
          minLength: 1
      required:
        - createdAt
        - id
        - updatedAt
        - credits
        - description
        - mimeType
        - name
        - organizationId
        - previewImage
        - producerId
        - text
        - url
      additionalProperties: false
    LabelEntity:
      description: Schema for Label entity
      type: object
      properties:
        createdAt:
          description: The date this item was created
          type: string
          format: date-time
          example: '2024-01-15T09:30:00Z'
          minLength: 1
        id:
          description: The ID of the item
          type: string
          format: uuid
          pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
          example: 550e8400-e29b-41d4-a716-446655440000
          minLength: 36
        updatedAt:
          description: The date this item was last updated
          type: string
          format: date-time
          example: '2024-01-15T09:30:00Z'
          minLength: 1
        name:
          description: The name of the label
          type: string
          minLength: 1
          example: Example Name
        organizationId:
          description: The organization name
          type: string
          minLength: 1
          example: example-id-123
      required:
        - createdAt
        - id
        - updatedAt
        - name
        - organizationId
      additionalProperties: false
    OrganizationReference:
      type: object
      properties:
        organizationId:
          description: The organization identifier
          $ref: '#/components/schemas/UUID'
      required:
        - organizationId
    PipelineEntity:
      description: Schema for Pipeline entity
      allOf:
        - $ref: '#/components/schemas/BaseEntity'
        - $ref: '#/components/schemas/OrganizationReference'
        - type: object
          properties:
            name:
              description: The pipeline's display name
              type: string
              minLength: 1
              maxLength: 255
              example: Data Processing Pipeline
              x-go-validate: required,min=1,max=255
            description:
              description: Detailed description of the pipeline's purpose
              allOf:
                - $ref: '#/components/schemas/NullableString'
              maxLength: 1000
              example: Processes incoming data through validation, transformation, and storage steps
          required:
            - name
          additionalProperties: false
    RunEntity:
      description: Schema for Run entity
      type: object
      properties:
        createdAt:
          description: The date this item was created
          type: string
          format: date-time
          example: '2024-01-15T09:30:00Z'
          minLength: 1
        id:
          description: The ID of the item
          type: string
          format: uuid
          pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
          example: 550e8400-e29b-41d4-a716-446655440000
          minLength: 36
        updatedAt:
          description: The date this item was last updated
          type: string
          format: date-time
          example: '2024-01-15T09:30:00Z'
          minLength: 1
        completedAt:
          description: The timestamp when the run completed
          type: string
          nullable: true
          format: date-time
          example: '2024-01-15T09:30:00Z'
          minLength: 1
        error:
          description: The error message
          type: string
          nullable: true
          example: example-string
          minLength: 1
        organizationId:
          description: The organization name
          type: string
          minLength: 1
          example: example-id-123
        pipelineId:
          description: The pipeline ID associated with the run
          type: string
          nullable: true
          example: example-id-123
          minLength: 1
        progress:
          description: The percent progress of the run
          type: number
          example: 42
        startedAt:
          description: The timestamp when the run started
          type: string
          format: date-time
          nullable: true
          example: '2024-01-15T09:30:00Z'
          minLength: 1
        status:
          type: string
          enum:
            - COMPLETED
            - FAILED
            - PROCESSING
            - QUEUED
          example: COMPLETED
          minLength: 1
        toolId:
          description: The tool ID associated with the run
          type: string
          minLength: 1
          example: example-id-123
      required:
        - createdAt
        - id
        - updatedAt
        - completedAt
        - error
        - organizationId
        - pipelineId
        - progress
        - startedAt
        - status
        - toolId
      additionalProperties: false
    ToolEntity:
      description: Schema for Tool entity
      type: object
      properties:
        createdAt:
          description: The date this item was created
          type: string
          format: date-time
          example: '2024-01-15T09:30:00Z'
          minLength: 1
        id:
          description: The ID of the item
          type: string
          format: uuid
          pattern: ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$
          example: 550e8400-e29b-41d4-a716-446655440000
          minLength: 36
        updatedAt:
          description: The date this item was last updated
          type: string
          format: date-time
          example: '2024-01-15T09:30:00Z'
          minLength: 1
        description:
          description: The tool description
          type: string
          minLength: 1
          example: Example description text
        inputMimeType:
          description: The MIME type of the input for the tool, e.g. text/plain
          type: string
          minLength: 1
          example: example-string
        name:
          description: The name of the tool
          type: string
          minLength: 1
          example: Example Name
        organizationId:
          description: The organization name
          type: string
          minLength: 1
          example: example-id-123
        outputMimeType:
          description: The MIME type of the output for the tool, e.g. text/plain
          type: string
          minLength: 1
          example: example-string
      required:
        - createdAt
        - id
        - updatedAt
        - description
        - inputMimeType
        - name
        - organizationId
        - outputMimeType
      additionalProperties: false
    CORSConfig:
      description: CORS configuration for the API server
      type: object
      properties:
        origins:
          description: A comma-separated list of allowed origins for CORS requests
          type: string
          default: https://platform.archesai.dev
          minLength: 1
          example: example-string
      required:
        - origins
      additionalProperties: false
    EmailConfig:
      description: Email configuration for sending emails
      type: object
      properties:
        enabled:
          description: Enable email functionality
          type: boolean
          default: false
          example: true
        service:
          description: Email service provider (e.g., "gmail", "sendgrid", etc.)
          type: string
          example: example-string
        user:
          description: Username for the email service
          type: string
          example: example-string
        password:
          description: Password for the email service
          type: string
          example: example-string
      required:
        - enabled
      additionalProperties: false
    ImageConfig:
      description: Container image configuration
      type: object
      properties:
        pullPolicy:
          description: Kubernetes image pull policy
          type: string
          enum:
            - Always
            - IfNotPresent
            - Never
          default: IfNotPresent
          example: Always
          minLength: 1
        repository:
          description: Container image repository
          type: string
          minLength: 1
          example: example-string
        tag:
          description: Container image tag
          type: string
          default: latest
          minLength: 1
          example: example-string
      required:
        - pullPolicy
        - repository
        - tag
      additionalProperties: false
    ResourceLimits:
      description: Resource limits
      type: object
      properties:
        cpu:
          description: Maximum CPU allocation
          type: string
          minLength: 1
          example: example-string
        memory:
          description: Maximum memory allocation
          type: string
          minLength: 1
          example: example-string
      required:
        - cpu
        - memory
      additionalProperties: false
    ResourceRequests:
      description: Resource requests
      type: object
      properties:
        cpu:
          description: Requested CPU allocation
          type: string
          minLength: 1
          example: example-string
        memory:
          description: Requested memory allocation
          type: string
          minLength: 1
          example: example-string
      required:
        - cpu
        - memory
      additionalProperties: false
    ResourceConfig:
      description: Kubernetes resource configuration
      type: object
      properties:
        limits:
          $ref: '#/components/schemas/ResourceLimits'
        requests:
          $ref: '#/components/schemas/ResourceRequests'
      required:
        - limits
        - requests
      additionalProperties: false
    APIConfig:
      description: Configuration schema for the API server
      type: object
      properties:
        cors:
          $ref: '#/components/schemas/CORSConfig'
        docs:
          description: Enable or disable API documentation
          type: boolean
          default: true
          example: true
        email:
          $ref: '#/components/schemas/EmailConfig'
        host:
          description: The host address on which the API server will listen
          type: string
          default: 0.0.0.0
          minLength: 1
          example: example-string
        port:
          description: The port on which the API server will listen
          type: number
          default: 3001
          example: 42
        validate:
          description: Enable or disable request validation
          type: boolean
          default: true
          example: true
        image:
          $ref: '#/components/schemas/ImageConfig'
        resources:
          $ref: '#/components/schemas/ResourceConfig'
      required:
        - cors
        - docs
        - email
        - host
        - port
        - validate
        - image
        - resources
      additionalProperties: false
    FirebaseAuth:
      description: Firebase authentication configuration
      type: object
      properties:
        enabled:
          description: Enable Firebase authentication
          type: boolean
          default: false
          example: true
        clientEmail:
          description: Firebase service account client email address
          type: string
          example: example-string
        privateKey:
          description: Firebase service account private key (PEM format)
          type: string
          minLength: 1
          example: example-string
        projectId:
          description: Firebase project ID for authentication
          type: string
          minLength: 1
          example: example-id-123
      required:
        - enabled
      additionalProperties: false
    LocalAuth:
      description: Local username/password authentication
      type: object
      properties:
        enabled:
          description: Enable local authentication
          type: boolean
          default: true
          example: true
      required:
        - enabled
      additionalProperties: false
    TwitterAuth:
      description: Twitter OAuth configuration
      type: object
      properties:
        enabled:
          description: Enable Twitter OAuth
          type: boolean
          default: false
          example: true
        callbackURL:
          description: OAuth callback URL
          type: string
          minLength: 1
          example: example-string
        consumerKey:
          description: Twitter API consumer key
          type: string
          minLength: 1
          example: example-string
        consumerSecret:
          description: Twitter API consumer secret
          type: string
          minLength: 1
          example: example-string
      required:
        - enabled
      additionalProperties: false
    AuthConfig:
      description: Authentication configuration for the API server
      type: object
      properties:
        enabled:
          description: Enable authentication
          type: boolean
          default: true
          example: true
        firebase:
          $ref: '#/components/schemas/FirebaseAuth'
        local:
          $ref: '#/components/schemas/LocalAuth'
        twitter:
          $ref: '#/components/schemas/TwitterAuth'
      required:
        - enabled
      additionalProperties: false
    StripeConfig:
      description: Stripe payment configuration
      type: object
      properties:
        token:
          description: Stripe secret API key
          type: string
          minLength: 1
          example: example-string
        whsec:
          description: Stripe webhook endpoint secret
          type: string
          minLength: 1
          example: example-string
      required:
        - token
        - whsec
      additionalProperties: false
    BillingConfig:
      description: Billing configuration for Stripe
      type: object
      properties:
        enabled:
          description: Enable billing functionality
          type: boolean
          default: false
          example: true
        stripe:
          $ref: '#/components/schemas/StripeConfig'
      required:
        - enabled
      additionalProperties: false
    DatabaseAuth:
      description: Database authentication credentials
      type: object
      properties:
        database:
          description: Database name
          type: string
          default: archesai-db
          minLength: 1
          example: example-string
        password:
          description: Database user password
          type: string
          default: password
          minLength: 1
          example: example-string
      required:
        - database
        - password
      additionalProperties: false
    PersistenceConfig:
      description: Persistent storage configuration
      type: object
      properties:
        enabled:
          description: Enable persistent storage
          type: boolean
          default: true
          example: true
        size:
          description: Size of persistent volume
          type: string
          default: 10Gi
          minLength: 1
          example: example-string
      required:
        - enabled
        - size
      additionalProperties: false
    DatabaseConfig:
      description: Database configuration for PostgreSQL
      type: object
      properties:
        enabled:
          description: Enable database
          type: boolean
          default: true
          example: true
        url:
          description: Database connection URL/string
          type: string
          default: postgresql://admin:password@localhost:5432/archesai-db?schema=public
          minLength: 1
          example: example-string
        type:
          description: Database type (postgresql or sqlite)
          type: string
          enum:
            - postgresql
            - sqlite
          default: postgresql
          example: postgresql
        maxConns:
          description: Maximum number of connections in pool (PostgreSQL)
          type: integer
          minimum: 1
          default: 25
          example: 25
        minConns:
          description: Minimum number of connections in pool (PostgreSQL)
          type: integer
          minimum: 0
          default: 5
          example: 5
        connMaxLifetime:
          description: Maximum connection lifetime (e.g., "30m")
          type: string
          pattern: ^(\d+[smh])+$
          example: 30m
        connMaxIdleTime:
          description: Maximum connection idle time (e.g., "5m")
          type: string
          pattern: ^(\d+[smh])+$
          example: 5m
        healthCheckPeriod:
          description: Health check period for connections (PostgreSQL)
          type: string
          pattern: ^(\d+[smh])+$
          example: 30s
        runMigrations:
          description: Automatically run database migrations on startup
          type: boolean
          default: false
          example: true
        managed:
          description: Use managed database deployment
          type: boolean
          default: false
          example: true
        auth:
          $ref: '#/components/schemas/DatabaseAuth'
        image:
          $ref: '#/components/schemas/ImageConfig'
        persistence:
          $ref: '#/components/schemas/PersistenceConfig'
        resources:
          $ref: '#/components/schemas/ResourceConfig'
      required:
        - enabled
        - url
      additionalProperties: false
    DevServiceConfig:
      description: Development service port forwarding configuration
      type: object
      properties:
        enabled:
          description: Enable dev port forwarding
          type: boolean
          default: false
          example: true
        port:
          description: Local port for forwarding
          type: number
          example: 42
      required:
        - enabled
        - port
      additionalProperties: false
    DevelopmentConfig:
      description: Development environment configuration
      type: object
      properties:
        api:
          $ref: '#/components/schemas/DevServiceConfig'
        hostIP:
          description: Host IP address for dev port forwarding
          type: string
          default: 172.18.0.1
          minLength: 1
          example: example-string
        loki:
          $ref: '#/components/schemas/DevServiceConfig'
        platform:
          $ref: '#/components/schemas/DevServiceConfig'
        postgres:
          $ref: '#/components/schemas/DevServiceConfig'
        redis:
          $ref: '#/components/schemas/DevServiceConfig'
      required:
        - api
        - hostIP
        - loki
        - platform
        - postgres
        - redis
      additionalProperties: false
    ImagesConfig:
      description: Container image configuration
      type: object
      properties:
        imagePullSecrets:
          description: List of Kubernetes secrets for pulling private images
          type: array
          items:
            type: string
            minLength: 1
            example: example-string
          default: []
        imageRegistry:
          description: Custom container registry URL (leave empty for Docker Hub)
          type: string
          default: ''
          minLength: 1
          example: example-string
      required:
        - imagePullSecrets
        - imageRegistry
      additionalProperties: false
    MigrationsConfig:
      description: Database migration configuration
      type: object
      properties:
        enabled:
          description: Enable automatic DB migrations
          type: boolean
          default: false
          example: true
      required:
        - enabled
      additionalProperties: false
    ServiceAccountConfig:
      description: Kubernetes service account configuration
      type: object
      properties:
        create:
          description: Create dedicated service account
          type: boolean
          default: true
          example: true
        name:
          description: Custom service account name
          type: string
          default: ''
          minLength: 1
          example: Example Name
      required:
        - create
        - name
      additionalProperties: false
    InfrastructureConfig:
      description: Infrastructure configuration for Kubernetes deployments
      type: object
      properties:
        development:
          $ref: '#/components/schemas/DevelopmentConfig'
        images:
          $ref: '#/components/schemas/ImagesConfig'
        migrations:
          $ref: '#/components/schemas/MigrationsConfig'
        namespace:
          description: Kubernetes namespace where all resources will be deployed
          type: string
          default: arches-system
          minLength: 1
          example: Example Name
        serviceAccount:
          $ref: '#/components/schemas/ServiceAccountConfig'
      required:
        - development
        - images
        - migrations
        - namespace
        - serviceAccount
      additionalProperties: false
    TLSConfig:
      description: TLS configuration
      type: object
      properties:
        enabled:
          description: Enable TLS/SSL
          type: boolean
          default: true
          example: true
        issuer:
          description: Cert-manager ClusterIssuer
          type: string
          default: letsencrypt-staging
          minLength: 1
          example: example-string
        secretName:
          description: Kubernetes secret name for TLS certificates
          type: string
          default: archesai-tls
          minLength: 1
          example: Example Name
      required:
        - enabled
        - secretName
      additionalProperties: false
    IngressConfig:
      description: Ingress configuration
      type: object
      properties:
        enabled:
          description: Enable ingress
          type: boolean
          default: false
          example: true
        domain:
          description: Primary domain name for ingress routing
          type: string
          default: archesai.dev
          minLength: 1
          example: example-string
        tls:
          $ref: '#/components/schemas/TLSConfig'
      required:
        - enabled
      additionalProperties: false
    EmbeddingConfig:
      description: Configuration for text embedding generation
      type: object
      properties:
        type:
          description: The embedding provider to use for vector embeddings
          type: string
          enum:
            - openai
            - ollama
          default: ollama
          example: openai
          minLength: 1
      required:
        - type
      additionalProperties: false
    LLMConfig:
      description: Large Language Model configuration
      type: object
      properties:
        type:
          description: LLM provider type
          type: string
          enum:
            - ollama
            - openai
          default: ollama
          example: ollama
          minLength: 1
        endpoint:
          description: LLM service endpoint URL
          type: string
          minLength: 1
          example: example-string
        token:
          description: Authentication token for LLM service
          type: string
          minLength: 1
          example: example-string
      required:
        - type
      additionalProperties: false
    RunPodConfig:
      description: RunPod serverless GPU configuration
      type: object
      properties:
        enabled:
          description: Enable RunPod integration
          type: boolean
          default: false
          example: true
        token:
          description: RunPod API token
          type: string
          minLength: 1
          example: example-string
      required:
        - enabled
      additionalProperties: false
    ScraperConfig:
      description: Web scraping service configuration
      type: object
      properties:
        enabled:
          description: Enable scraper service
          type: boolean
          default: false
          example: true
        managed:
          description: Use managed scraper deployment
          type: boolean
          default: false
          example: true
        endpoint:
          description: Web scraper service endpoint URL
          type: string
          minLength: 1
          example: example-string
        image:
          $ref: '#/components/schemas/ImageConfig'
        resources:
          $ref: '#/components/schemas/ResourceConfig'
      required:
        - enabled
      additionalProperties: false
    SpeechConfig:
      description: Speech recognition and TTS services
      type: object
      properties:
        enabled:
          description: Enable speech services
          type: boolean
          default: false
          example: true
        token:
          description: Speech-to-text service API token
          type: string
          minLength: 1
          example: example-string
      required:
        - enabled
      additionalProperties: false
    UnstructuredConfig:
      description: Unstructured.io service for document parsing
      type: object
      properties:
        enabled:
          description: Enable unstructured document parsing
          type: boolean
          default: false
          example: true
        managed:
          description: Use managed unstructured deployment
          type: boolean
          default: false
          example: true
        image:
          $ref: '#/components/schemas/ImageConfig'
        resources:
          $ref: '#/components/schemas/ResourceConfig'
      required:
        - enabled
      additionalProperties: false
    IntelligenceConfig:
      description: Intelligence configuration (LLMs, embeddings, scraper, speech, etc.)
      type: object
      properties:
        embedding:
          $ref: '#/components/schemas/EmbeddingConfig'
        llm:
          $ref: '#/components/schemas/LLMConfig'
        runpod:
          $ref: '#/components/schemas/RunPodConfig'
        scraper:
          $ref: '#/components/schemas/ScraperConfig'
        speech:
          $ref: '#/components/schemas/SpeechConfig'
        unstructured:
          $ref: '#/components/schemas/UnstructuredConfig'
      required:
        - embedding
        - llm
        - runpod
        - scraper
        - speech
        - unstructured
      additionalProperties: false
    LoggingConfig:
      description: Logging configuration
      type: object
      properties:
        level:
          description: Minimum log level to output
          type: string
          enum:
            - fatal
            - error
            - warn
            - info
            - debug
            - trace
            - silent
          default: info
          example: fatal
          minLength: 1
        pretty:
          description: Enable pretty-printed logs for development
          type: boolean
          default: false
          example: true
      required:
        - level
        - pretty
      additionalProperties: false
    GrafanaConfig:
      description: Grafana monitoring dashboard configuration
      type: object
      properties:
        enabled:
          description: Enable Grafana
          type: boolean
          default: false
          example: true
        managed:
          description: Use managed Grafana deployment
          type: boolean
          default: false
          example: true
        image:
          $ref: '#/components/schemas/ImageConfig'
        resources:
          $ref: '#/components/schemas/ResourceConfig'
      required:
        - enabled
      additionalProperties: false
    LokiConfig:
      description: Loki log aggregation service configuration
      type: object
      properties:
        enabled:
          description: Enable Loki
          type: boolean
          default: false
          example: true
        managed:
          description: Use managed Loki deployment
          type: boolean
          default: false
          example: true
        host:
          description: Loki host URL
          type: string
          default: http://localhost:3100
          minLength: 1
          example: example-string
        image:
          $ref: '#/components/schemas/ImageConfig'
        resources:
          $ref: '#/components/schemas/ResourceConfig'
      required:
        - enabled
      additionalProperties: false
    MonitoringConfig:
      description: Monitoring configuration for Grafana and Loki
      type: object
      properties:
        grafana:
          $ref: '#/components/schemas/GrafanaConfig'
        loki:
          $ref: '#/components/schemas/LokiConfig'
      required:
        - grafana
        - loki
      additionalProperties: false
    PlatformConfig:
      description: Platform configuration (host, image, resources)
      type: object
      properties:
        enabled:
          description: Enable platform service
          type: boolean
          default: false
          example: true
        managed:
          description: Use managed platform deployment
          type: boolean
          default: false
          example: true
        host:
          description: Host address where the platform service will be accessible
          type: string
          default: localhost
          minLength: 1
          example: example-string
        image:
          $ref: '#/components/schemas/ImageConfig'
        resources:
          $ref: '#/components/schemas/ResourceConfig'
      required:
        - enabled
      additionalProperties: false
    RedisConfig:
      description: Redis configuration
      type: object
      properties:
        enabled:
          description: Enable Redis
          type: boolean
          default: false
          example: true
        managed:
          description: Use managed Redis deployment
          type: boolean
          default: false
          example: true
        auth:
          description: Redis authentication password
          type: string
          default: password
          minLength: 1
          example: example-string
        ca:
          description: Certificate Authority for TLS (optional)
          type: string
          minLength: 1
          example: example-string
        host:
          description: Redis hostname or IP
          type: string
          default: localhost
          minLength: 1
          example: example-string
        port:
          description: Redis port number
          type: number
          default: 6379
          example: 42
        image:
          $ref: '#/components/schemas/ImageConfig'
        persistence:
          $ref: '#/components/schemas/PersistenceConfig'
        resources:
          $ref: '#/components/schemas/ResourceConfig'
      required:
        - enabled
        - auth
        - host
        - port
      additionalProperties: false
    StorageConfig:
      description: Object storage configuration for MinIO or S3-compatible services
      type: object
      properties:
        enabled:
          description: Enable object storage
          type: boolean
          default: false
          example: true
        managed:
          description: Use managed storage deployment
          type: boolean
          default: false
          example: true
        accesskey:
          description: MinIO/S3 access key ID
          type: string
          default: minioadmin
          minLength: 1
          example: example-string
        bucket:
          description: S3 bucket name
          type: string
          default: archesai
          minLength: 1
          example: example-string
        endpoint:
          description: MinIO server endpoint URL
          type: string
          default: http://localhost:9000
          minLength: 1
          example: example-string
        secretkey:
          description: MinIO/S3 secret access key
          type: string
          default: minioadmin
          minLength: 1
          example: example-string
        image:
          $ref: '#/components/schemas/ImageConfig'
        persistence:
          $ref: '#/components/schemas/PersistenceConfig'
        resources:
          $ref: '#/components/schemas/ResourceConfig'
      required:
        - enabled
        - accesskey
        - bucket
        - endpoint
        - secretkey
      additionalProperties: false
    ArchesConfig:
      description: Arches AI configuration schema
      type: object
      properties:
        api:
          $ref: '#/components/schemas/APIConfig'
        auth:
          $ref: '#/components/schemas/AuthConfig'
        billing:
          $ref: '#/components/schemas/BillingConfig'
        database:
          $ref: '#/components/schemas/DatabaseConfig'
        infrastructure:
          $ref: '#/components/schemas/InfrastructureConfig'
        ingress:
          $ref: '#/components/schemas/IngressConfig'
        intelligence:
          $ref: '#/components/schemas/IntelligenceConfig'
        logging:
          $ref: '#/components/schemas/LoggingConfig'
        monitoring:
          $ref: '#/components/schemas/MonitoringConfig'
        platform:
          $ref: '#/components/schemas/PlatformConfig'
        redis:
          $ref: '#/components/schemas/RedisConfig'
        storage:
          $ref: '#/components/schemas/StorageConfig'
      required:
        - api
        - auth
        - billing
        - database
        - infrastructure
        - ingress
        - intelligence
        - logging
        - monitoring
        - platform
        - redis
        - storage
      additionalProperties: false
    HealthResponse:
      type: object
      properties:
        services:
          type: object
          properties:
            database:
              type: string
              minLength: 1
              example: example-string
            email:
              type: string
              minLength: 1
              example: example-string
            redis:
              type: string
              minLength: 1
              example: example-string
          required:
            - database
            - email
            - redis
          additionalProperties: false
        timestamp:
          type: string
          minLength: 1
          example: example-string
        uptime:
          type: number
          example: 42
      required:
        - services
        - timestamp
        - uptime
      additionalProperties: false
  parameters:
    AccountsFilter:
      in: query
      name: filter
      required: false
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/FilterNode'
      description: |
        Filter accounts by field values. Supported fields:
        - createdAt, id, updatedAt, accessToken, accessTokenExpiresAt
        - accountId, idToken, password, providerId, refreshToken
        - refreshTokenExpiresAt, scope, userId
    PageQuery:
      in: query
      name: page
      required: false
      style: form
      explode: true
      schema:
        $ref: '#/components/schemas/Page'
      description: The page parameter
    AccountsSort:
      in: query
      name: sort
      required: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: object
          required:
            - field
            - order
          properties:
            field:
              type: string
              enum:
                - createdAt
                - id
                - updatedAt
                - accessToken
                - accessTokenExpiresAt
                - accountId
                - idToken
                - password
                - providerId
                - refreshToken
                - refreshTokenExpiresAt
                - scope
                - userId
              example: createdAt
              minLength: 1
            order:
              type: string
              enum:
                - asc
                - desc
              example: asc
              minLength: 1
      description: The sort parameter
    InvitationsFilter:
      in: query
      name: filter
      required: false
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/FilterNode'
      description: |
        Filter invitations by field values. Supported fields:
        - createdAt, id, updatedAt, email, expiresAt
        - inviterId, organizationId, role, status
    InvitationsSort:
      in: query
      name: sort
      required: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: object
          required:
            - field
            - order
          properties:
            field:
              type: string
              enum:
                - createdAt
                - id
                - updatedAt
                - email
                - expiresAt
                - inviterId
                - organizationId
                - role
                - status
              example: createdAt
              minLength: 1
            order:
              type: string
              enum:
                - asc
                - desc
              example: asc
              minLength: 1
      description: The sort parameter
    MembersFilter:
      in: query
      name: filter
      required: false
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/FilterNode'
      description: |
        Filter members by field values. Supported fields:
        - createdAt, id, updatedAt, organizationId, role, userId
    MembersSort:
      in: query
      name: sort
      required: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: object
          required:
            - field
            - order
          properties:
            field:
              type: string
              enum:
                - createdAt
                - id
                - updatedAt
                - organizationId
                - role
                - userId
              example: createdAt
              minLength: 1
            order:
              type: string
              enum:
                - asc
                - desc
              example: asc
              minLength: 1
      description: The sort parameter
    OrganizationsFilter:
      in: query
      name: filter
      required: false
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/FilterNode'
      description: |
        Filter organizations by field values. Supported fields:
        - createdAt, id, updatedAt, billingEmail, credits, logo
        - metadata, name, plan, slug, stripeCustomerId
    OrganizationsSort:
      in: query
      name: sort
      required: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: object
          required:
            - field
            - order
          properties:
            field:
              type: string
              enum:
                - createdAt
                - id
                - updatedAt
                - billingEmail
                - credits
                - logo
                - metadata
                - name
                - plan
                - slug
                - stripeCustomerId
              example: createdAt
              minLength: 1
            order:
              type: string
              enum:
                - asc
                - desc
              example: asc
              minLength: 1
      description: The sort parameter
    SessionsFilter:
      in: query
      name: filter
      required: false
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/FilterNode'
      description: |
        Filter sessions by field values. Supported fields:
        - createdAt, id, updatedAt, activeOrganizationId, expiresAt
        - ipAddress, token, userAgent, userId
    SessionsSort:
      in: query
      name: sort
      required: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: object
          required:
            - field
            - order
          properties:
            field:
              type: string
              enum:
                - createdAt
                - id
                - updatedAt
                - activeOrganizationId
                - expiresAt
                - ipAddress
                - token
                - userAgent
                - userId
              example: createdAt
              minLength: 1
            order:
              type: string
              enum:
                - asc
                - desc
              example: asc
              minLength: 1
      description: The sort parameter
    UsersFilter:
      in: query
      name: filter
      required: false
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/FilterNode'
      description: |
        Filter users by field values. Supported fields:
        - createdAt, id, updatedAt, email, emailVerified, image, name
    UsersSort:
      in: query
      name: sort
      required: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: object
          required:
            - field
            - order
          properties:
            field:
              type: string
              enum:
                - createdAt
                - id
                - updatedAt
                - email
                - emailVerified
                - image
                - name
              example: createdAt
              minLength: 1
            order:
              type: string
              enum:
                - asc
                - desc
              example: asc
              minLength: 1
      description: The sort parameter
    ArtifactsFilter:
      in: query
      name: filter
      required: false
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/FilterNode'
      description: |
        Filter artifacts by field values. Supported fields:
        - createdAt, id, updatedAt, credits, description, mimeType
        - name, organizationId, previewImage, producerId, text, url
    ArtifactsSort:
      in: query
      name: sort
      required: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: object
          required:
            - field
            - order
          properties:
            field:
              type: string
              enum:
                - createdAt
                - id
                - updatedAt
                - credits
                - description
                - mimeType
                - name
                - organizationId
                - previewImage
                - producerId
                - text
                - url
              example: createdAt
              minLength: 1
            order:
              type: string
              enum:
                - asc
                - desc
              example: asc
              minLength: 1
      description: The sort parameter
    LabelsFilter:
      in: query
      name: filter
      required: false
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/FilterNode'
      description: |
        Filter labels by field values. Supported fields:
        - createdAt, id, updatedAt, name, organizationId
    LabelsSort:
      in: query
      name: sort
      required: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: object
          required:
            - field
            - order
          properties:
            field:
              type: string
              enum:
                - createdAt
                - id
                - updatedAt
                - name
                - organizationId
              example: createdAt
              minLength: 1
            order:
              type: string
              enum:
                - asc
                - desc
              example: asc
              minLength: 1
      description: The sort parameter
    PipelinesFilter:
      in: query
      name: filter
      required: false
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/FilterNode'
      description: |
        Filter pipelines by field values. Supported fields:
        - createdAt, id, updatedAt, description, name, organizationId
    PipelinesSort:
      in: query
      name: sort
      required: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: object
          required:
            - field
            - order
          properties:
            field:
              type: string
              enum:
                - createdAt
                - id
                - updatedAt
                - description
                - name
                - organizationId
              example: createdAt
              minLength: 1
            order:
              type: string
              enum:
                - asc
                - desc
              example: asc
              minLength: 1
      description: The sort parameter
    RunsFilter:
      in: query
      name: filter
      required: false
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/FilterNode'
      description: |
        Filter runs by field values. Supported fields:
        - createdAt, id, updatedAt, completedAt, error, organizationId
        - pipelineId, progress, startedAt, status, toolId
    RunsSort:
      in: query
      name: sort
      required: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: object
          required:
            - field
            - order
          properties:
            field:
              type: string
              enum:
                - createdAt
                - id
                - updatedAt
                - completedAt
                - error
                - organizationId
                - pipelineId
                - progress
                - startedAt
                - status
                - toolId
              example: createdAt
              minLength: 1
            order:
              type: string
              enum:
                - asc
                - desc
              example: asc
              minLength: 1
      description: The sort parameter
    ToolsFilter:
      in: query
      name: filter
      required: false
      style: deepObject
      explode: true
      schema:
        $ref: '#/components/schemas/FilterNode'
      description: |
        Filter tools by field values. Supported fields:
        - createdAt, id, updatedAt, description, inputMimeType
        - name, organizationId, outputMimeType
    ToolsSort:
      in: query
      name: sort
      required: false
      style: form
      explode: true
      schema:
        type: array
        items:
          type: object
          required:
            - field
            - order
          properties:
            field:
              type: string
              enum:
                - createdAt
                - id
                - updatedAt
                - description
                - inputMimeType
                - name
                - organizationId
                - outputMimeType
              example: createdAt
              minLength: 1
            order:
              type: string
              enum:
                - asc
                - desc
              example: asc
              minLength: 1
      description: The sort parameter
  responses:
    BadRequest:
      description: 400 Bad Request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    Unauthorized:
      description: 401 Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    NotFound:
      description: 404 Not Found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
    NoContent:
      description: 204 No Content
