/* eslint-disable */
export default async () => {
    const t = {
        ["./billing/entities/payment-method.entity"]: await import("./billing/entities/payment-method.entity"),
        ["./common/paginated.dto"]: await import("./common/paginated.dto"),
        ["./members/entities/member.entity"]: await import("./members/entities/member.entity"),
        ["./api-tokens/entities/api-token.entity"]: await import("./api-tokens/entities/api-token.entity"),
        ["./content/dto/content-query.dto"]: await import("./content/dto/content-query.dto"),
        ["./jobs/entities/job.entity"]: await import("./jobs/entities/job.entity"),
        ["./llm/dto/create-chat-completion.dto"]: await import("./llm/dto/create-chat-completion.dto"),
        ["./members/dto/member-query.dto"]: await import("./members/dto/member-query.dto"),
        ["./common/aggregated-field.dto"]: await import("./common/aggregated-field.dto"),
        ["./threads/dto/thread-query.dto"]: await import("./threads/dto/thread-query.dto"),
        ["./messages/dto/message-query.dto"]: await import("./messages/dto/message-query.dto"),
        ["./billing/entities/billing-url.entity"]: await import("./billing/entities/billing-url.entity"),
        ["./billing/entities/plan.entity"]: await import("./billing/entities/plan.entity"),
        ["./organizations/entities/organization.entity"]: await import("./organizations/entities/organization.entity"),
        ["./users/entities/user.entity"]: await import("./users/entities/user.entity"),
        ["./auth/dto/token.dto"]: await import("./auth/dto/token.dto"),
        ["./storage/dto/read-url.dto"]: await import("./storage/dto/read-url.dto"),
        ["./storage/dto/write-url.dto"]: await import("./storage/dto/write-url.dto"),
        ["./storage/dto/storage-item.dto"]: await import("./storage/dto/storage-item.dto"),
        ["./chatbots/entities/chatbot.entity"]: await import("./chatbots/entities/chatbot.entity"),
        ["./content/entities/content.entity"]: await import("./content/entities/content.entity"),
        ["./vector-records/entities/vector-record.entity"]: await import("./vector-records/entities/vector-record.entity"),
        ["./threads/entities/thread.entity"]: await import("./threads/entities/thread.entity"),
        ["./messages/entities/message.entity"]: await import("./messages/entities/message.entity")
    };
    return { "@nestjs/swagger": { "models": [[import("./common/base-entity.dto"), { "BaseEntity": { createdAt: { required: true, type: () => Date }, id: { required: true, type: () => String } } }], [import("./organizations/entities/organization.entity"), { "OrganizationEntity": { billingEmail: { required: true, type: () => String }, credits: { required: true, type: () => Number }, orgname: { required: true, type: () => String }, plan: { required: true, type: () => Object } } }], [import("./organizations/dto/create-organization.dto"), { "CreateOrganizationDto": {} }], [import("./organizations/dto/update-organization.dto"), { "UpdateOrganizationDto": {} }], [import("./billing/entities/billing-url.entity"), { "BillingUrlEntity": { url: { required: true, type: () => String } } }], [import("./billing/entities/payment-method.entity"), { "Address": { city: { required: true, type: () => String, nullable: true }, country: { required: true, type: () => String, nullable: true }, line1: { required: true, type: () => String, nullable: true }, line2: { required: true, type: () => String, nullable: true }, postal_code: { required: true, type: () => String, nullable: true }, state: { required: true, type: () => String, nullable: true } }, "BillingDetails": { address: { required: true, type: () => t["./billing/entities/payment-method.entity"].Address }, email: { required: true, type: () => String, nullable: true }, name: { required: true, type: () => String, nullable: true }, phone: { required: true, type: () => String, nullable: true } }, "CardDetails": { brand: { required: true, type: () => String }, country: { required: true, type: () => String }, exp_month: { required: true, type: () => Number }, exp_year: { required: true, type: () => Number }, fingerprint: { required: true, type: () => String, nullable: true }, funding: { required: true, type: () => String }, last4: { required: true, type: () => String } }, "PaymentMethodEntity": { billing_details: { required: true, type: () => t["./billing/entities/payment-method.entity"].BillingDetails }, card: { required: true, type: () => t["./billing/entities/payment-method.entity"].CardDetails, nullable: true }, customer: { required: true, type: () => String, nullable: true }, id: { required: true, type: () => String }, type: { required: true, type: () => String } } }], [import("./billing/entities/plan.entity"), { "PlanEntity": { currency: { required: true, type: () => String }, description: { required: true, type: () => String, nullable: true }, id: { required: true, type: () => String }, metadata: { required: true, type: () => Object }, name: { required: true, type: () => String }, priceId: { required: true, type: () => String }, priceMetadata: { required: true, type: () => Object }, recurring: { required: true, type: () => Object, nullable: true }, unitAmount: { required: true, type: () => Number } } }], [import("./common/paginated.dto"), { "Metadata": { limit: { required: true, type: () => Number }, offset: { required: true, type: () => Number }, totalResults: { required: true, type: () => Number } }, "_PaginatedDto": { metadata: { required: true, type: () => t["./common/paginated.dto"].Metadata } }, "PaginatedDto": { aggregates: { required: true }, results: { required: true } } }], [import("./members/entities/member.entity"), { "MemberEntity": { inviteAccepted: { required: true, type: () => Boolean }, inviteEmail: { required: true, type: () => String }, name: { required: true, type: () => String }, orgname: { required: true, type: () => String }, role: { required: true, type: () => Object }, username: { required: true, type: () => String } } }], [import("./users/entities/user.entity"), { "UserEntity": { defaultOrgname: { required: true, type: () => String }, displayName: { required: true, type: () => String }, email: { required: true, type: () => String }, emailVerified: { required: true, type: () => Boolean }, firstName: { required: true, type: () => String }, lastName: { required: true, type: () => String }, memberships: { required: true, type: () => [t["./members/entities/member.entity"].MemberEntity] }, photoUrl: { required: true, type: () => String }, username: { required: true, type: () => String, minLength: 5 } } }], [import("./users/dto/update-user.dto"), { "UpdateUserDto": {} }], [import("./auth/dto/register.dto"), { "RegisterDto": { password: { required: true, type: () => String, minLength: 7 } } }], [import("./auth/dto/login.dto"), { "LoginDto": {} }], [import("./auth/dto/token.dto"), { "TokenDto": { accessToken: { required: true, type: () => String }, refreshToken: { required: true, type: () => String } } }], [import("./api-tokens/dto/api-token-query.dto"), { "ApiTokenQueryDto": { name: { required: false, type: () => String } } }], [import("./chatbots/entities/chatbot.entity"), { "ChatbotEntity": { description: { required: true, type: () => String }, llmBase: { required: true, type: () => String }, name: { required: true, type: () => String }, orgname: { required: true, type: () => String } } }], [import("./api-tokens/entities/api-token.entity"), { "ChatbotsFieldItem": {}, "ApiTokenEntity": { chatbots: { required: true, type: () => [t["./api-tokens/entities/api-token.entity"].ChatbotsFieldItem] }, domains: { required: true, type: () => String, default: "*" }, key: { required: true, type: () => String }, name: { required: true, type: () => String }, orgname: { required: true, type: () => String }, role: { required: true, type: () => Object }, username: { required: true, type: () => String } } }], [import("./api-tokens/dto/create-api-token.dto"), { "CreateApiTokenDto": { chatbotIds: { required: false, type: () => [String] } } }], [import("./api-tokens/dto/update-api-token.dto"), { "UpdateApiTokenDto": {} }], [import("./storage/dto/path.dto"), { "PathDto": { isDir: { required: false, type: () => Boolean, default: false }, path: { required: true, type: () => String } } }], [import("./storage/dto/read-url.dto"), { "ReadUrlDto": { read: { required: true, type: () => String } } }], [import("./storage/dto/storage-item.dto"), { "StorageItemDto": { createdAt: { required: true, type: () => Date }, id: { required: true, type: () => String }, isDir: { required: true, type: () => Boolean }, name: { required: true, type: () => String }, size: { required: true, type: () => Number } } }], [import("./storage/dto/write-url.dto"), { "WriteUrlDto": { write: { required: true, type: () => String } } }], [import("./chatbots/dto/chatbot-query.dto"), { "ChatbotQueryDto": { name: { required: false, type: () => String }, sortBy: { required: false, type: () => Object, default: "createdAt" } } }], [import("./chatbots/dto/create-chatbot.dto"), { "CreateChatbotDto": {} }], [import("./chatbots/dto/update-chatbot.dto"), { "UpdateChatbotDto": {} }], [import("./content/dto/content-query.dto"), { "ContentQueryDto": { sortBy: { required: false, type: () => Object, default: "createdAt", enum: t["./content/dto/content-query.dto"].SortByField.CREATED }, type: { required: false, type: () => Object } } }], [import("./jobs/entities/job.entity"), { "JobEntity": { completedAt: { required: true, type: () => Date }, jobType: { required: true, type: () => String }, progress: { required: true, type: () => Number }, resourceLink: { required: true, type: () => String }, startedAt: { required: true, type: () => Date }, status: { required: true, type: () => Object } } }], [import("./content/entities/content.entity"), { "ContentEntity": { buildArgs: { required: true, type: () => Object }, credits: { required: true, type: () => Number }, description: { required: true, type: () => String }, job: { required: true, type: () => t["./jobs/entities/job.entity"].JobEntity }, mimeType: { required: true, type: () => String }, name: { required: true, type: () => String }, orgname: { required: true, type: () => String }, previewImage: { required: true, type: () => String }, text: { required: true, type: () => String }, type: { required: true, type: () => Object }, url: { required: true, type: () => String } } }], [import("./content/dto/create-content.dto"), { "CreateContentDto": {} }], [import("./content/dto/update-content.dto"), { "UpdateContentDto": {} }], [import("./jobs/dto/job-query.dto"), { "JobQueryDto": {} }], [import("./llm/dto/create-chat-completion.dto"), { "MessageDto": { content: { required: true, type: () => String }, name: { required: false, type: () => String }, role: { required: true, type: () => Object } }, "CreateChatCompletionDto": { best_of: { required: false, type: () => Number }, frequency_penalty: { required: false, type: () => Number }, ignore_eos: { required: false, type: () => Boolean }, logit_bias: { required: false, type: () => Object }, max_tokens: { required: false, type: () => Number }, messages: { required: true, type: () => [t["./llm/dto/create-chat-completion.dto"].MessageDto] }, model: { required: false, type: () => String }, n: { required: false, type: () => Number, default: 1 }, name: { required: false, type: () => String }, presence_penalty: { required: false, type: () => Number }, skip_special_tokens: { required: false, type: () => Boolean }, stop: { required: false, type: () => [String] }, stop_token_ids: { required: false, type: () => [Number] }, stream: { required: false, type: () => Boolean }, temperature: { required: false, type: () => Number, default: 0.7 }, top_k: { required: false, type: () => Number, default: -1 }, top_p: { required: false, type: () => Number, default: 1 }, use_beam_search: { required: false, type: () => Boolean }, user: { required: false, type: () => String } } }], [import("./vector-records/dto/vector-record-query.dto"), { "VectorRecordQueryDto": {} }], [import("./vector-records/entities/vector-record.entity"), { "VectorRecordEntity": { text: { required: true, type: () => String } } }], [import("./documents/entities/document.entity"), { "DocumentEntity": { chunkSize: { required: true, type: () => Number }, delimiter: { required: true, type: () => String }, md5Hash: { required: true, type: () => String }, size: { required: true, type: () => String }, sourceUrl: { required: true, type: () => String }, summary: { required: true, type: () => String } } }], [import("./documents/dto/create-document.dto"), { "CreateDocumentDto": { chunkSize: { required: false, type: () => Number, default: 200 }, delimiter: { required: false, type: () => String, default: "" } } }], [import("./email-change/dto/confirm-email-change.dto"), { "ConfirmEmailChangeDto": { token: { required: true, type: () => String } } }], [import("./email-change/dto/request-email-change.dto"), { "RequestEmailChangeDto": { email: { required: true, type: () => String } } }], [import("./email-verification/dto/confirm-password-reset.dto"), { "ConfirmEmailVerificationDto": { token: { required: true, type: () => String } } }], [import("./images/entities/image.entity"), { "ImageEntity": { height: { required: true, type: () => Number }, prompt: { required: true, type: () => String }, useInit: { required: true, type: () => Boolean }, width: { required: true, type: () => Number } } }], [import("./images/dto/create-image.dto"), { "CreateImageDto": {} }], [import("./members/dto/create-member.dto"), { "CreateMemberDto": {} }], [import("./members/dto/member-query.dto"), { "MemberQueryDto": { sortBy: { required: false, type: () => Object, default: "username", enum: t["./members/dto/member-query.dto"].SortByField.USERNAME } } }], [import("./members/dto/update-member.dto"), { "UpdateMemberDto": {} }], [import("./common/aggregated-field.dto"), { "GroupCount": { count: { required: true, type: () => Number }, value: { required: true, type: () => String } }, "GranularCount": { count: { required: true, type: () => Number }, from: { required: true, type: () => Date }, to: { required: true, type: () => Date } }, "GranularSum": { from: { required: true, type: () => Date }, sum: { required: true, type: () => Number }, to: { required: true, type: () => Date } } }], [import("./threads/entities/thread.entity"), { "ThreadEntity": { credits: { required: true, type: () => Number }, name: { required: true, type: () => String }, numMessages: { required: true, type: () => Number }, orgname: { required: true, type: () => String } } }], [import("./threads/dto/create-thread.dto"), { "CreateThreadDto": { id: { required: false, type: () => String } } }], [import("./threads/dto/thread-aggregates.dto"), { "ThreadAggregates": { credits: { required: true, type: () => [t["./common/aggregated-field.dto"].GranularSum] }, threadsCreated: { required: true, type: () => [t["./common/aggregated-field.dto"].GranularCount] } } }], [import("./threads/dto/thread-query.dto"), { "ThreadQueryDto": { aggregateGranularity: { required: false, enum: t["./common/aggregated-field.dto"].Granularity }, aggregates: { required: false, type: () => Boolean, default: false }, sortBy: { required: false, type: () => Object, default: "createdAt", enum: t["./threads/dto/thread-query.dto"].SortByField.CREATED } } }], [import("./messages/dto/message-query.dto"), { "MessageQueryDto": { sortBy: { required: false, type: () => Object, default: "createdAt", enum: t["./messages/dto/message-query.dto"].SortByField } } }], [import("./threads/entities/citation.entity"), { "CitationEntity": { similarity: { required: true, type: () => Number } } }], [import("./messages/entities/message.entity"), { "MessageEntity": { answer: { required: true, type: () => String }, answerLength: { required: true, type: () => Number }, citations: { required: true }, contextLength: { required: true, type: () => Number }, credits: { required: true, type: () => Number }, question: { required: true, type: () => String }, similarityCutoff: { required: true, type: () => Number }, temperature: { required: true, type: () => Number }, threadId: { required: true, type: () => String }, topK: { required: true, type: () => Number } } }], [import("./messages/dto/create-message.dto"), { "CreateMessageDto": { answerLength: { required: true, type: () => Number, default: 240 }, contextLength: { required: true, type: () => Number, default: 1000 }, similarityCutoff: { required: true, type: () => Number, default: 0.7 }, temperature: { required: true, type: () => Number, default: 0.7 }, topK: { required: true, type: () => Number, default: 5 } } }], [import("./password-reset/dto/confirm-password-reset.dto"), { "ConfirmPasswordResetDto": { newPassword: { required: true, type: () => String }, token: { required: true, type: () => String } } }], [import("./password-reset/dto/request-password-reset.dto"), { "RequestPasswordResetDto": { email: { required: true, type: () => String } } }], [import("./llm/dto/create-completion.dto"), { "CreateCompletionDto": { best_of: { required: false, type: () => Number }, echo: { required: false, type: () => Boolean, default: false }, frequency_penalty: { required: false, type: () => Number }, ignore_eos: { required: false, type: () => Boolean }, logit_bias: { required: false, type: () => Object }, logprobs: { required: false, type: () => Number }, max_tokens: { required: false, type: () => Number, default: 16 }, model: { required: true, type: () => String }, n: { required: true, type: () => Number, default: 1 }, presence_penalty: { required: false, type: () => Number }, prompt: { required: true, type: () => Object }, skip_special_tokens: { required: false, type: () => Boolean }, stop: { required: false, type: () => [String] }, stop_token_ids: { required: false, type: () => [Number] }, stream: { required: false, type: () => Boolean, default: false }, suffix: { required: false, type: () => String }, temperature: { required: false, type: () => Number, default: 1 }, top_k: { required: true, type: () => Number }, top_p: { required: false, type: () => Number, default: 1 }, use_beam_search: { required: false, type: () => Boolean }, user: { required: false, type: () => String } } }], [import("./members/dto/member-aggregates.dto"), { "MemberAggregates": { _info: { required: false, type: () => Object } } }], [import("./storage/dto/upload-document.dto"), { "UploadDocumentDto": { file: { required: true, type: () => Object } } }]], "controllers": [[import("./billing/billing.controller"), { "BillingController": { "cancelSubscriptionPlan": {}, "changeSubscriptionPlan": {}, "createBillingPortal": { type: t["./billing/entities/billing-url.entity"].BillingUrlEntity }, "createCheckoutSession": { type: t["./billing/entities/billing-url.entity"].BillingUrlEntity }, "getPlans": { type: [t["./billing/entities/plan.entity"].PlanEntity] }, "listPaymentMethods": { type: [Object] }, "removePaymentMethod": {}, "stripe_handleIncomingEvents": {} } }], [import("./organizations/organizations.controller"), { "OrganizationsController": { "create": { type: t["./organizations/entities/organization.entity"].OrganizationEntity }, "delete": {}, "findOne": { type: t["./organizations/entities/organization.entity"].OrganizationEntity }, "update": { type: t["./organizations/entities/organization.entity"].OrganizationEntity } } }], [import("./users/user.controller"), { "UserController": { "deactivate": {}, "findOne": { type: t["./users/entities/user.entity"].UserEntity }, "update": { type: t["./users/entities/user.entity"].UserEntity } } }], [import("./auth/auth.controller"), { "AuthController": { "login": { type: t["./auth/dto/token.dto"].TokenDto }, "refreshToken": { type: t["./auth/dto/token.dto"].TokenDto }, "register": { type: t["./auth/dto/token.dto"].TokenDto }, "zfirebaseAuthCallback": { type: t["./auth/dto/token.dto"].TokenDto }, "ztwitterAuth": {}, "ztwitterAuthCallback": { type: t["./auth/dto/token.dto"].TokenDto } } }], [import("./api-tokens/api-tokens.controller"), { "ApiTokensController": { "create": { type: t["./api-tokens/entities/api-token.entity"].ApiTokenEntity }, "findAll": {}, "findOne": { type: t["./api-tokens/entities/api-token.entity"].ApiTokenEntity }, "remove": {}, "update": { type: t["./api-tokens/entities/api-token.entity"].ApiTokenEntity } } }], [import("./storage/storage.controller"), { "StorageController": { "delete": {}, "getReadUrl": { type: t["./storage/dto/read-url.dto"].ReadUrlDto }, "getWriteUrl": { type: t["./storage/dto/write-url.dto"].WriteUrlDto }, "listDirectory": { type: [t["./storage/dto/storage-item.dto"].StorageItemDto] } } }], [import("./chatbots/chatbots.controller"), { "ChatbotsController": { "create": { type: t["./chatbots/entities/chatbot.entity"].ChatbotEntity }, "findAll": {}, "findOne": { type: t["./chatbots/entities/chatbot.entity"].ChatbotEntity }, "remove": {}, "update": { type: t["./chatbots/entities/chatbot.entity"].ChatbotEntity } } }], [import("./content/content.controller"), { "ContentController": { "findAll": {}, "findOne": { type: t["./content/entities/content.entity"].ContentEntity }, "remove": {}, "update": { type: t["./content/entities/content.entity"].ContentEntity } } }], [import("./jobs/jobs.controller"), { "JobsController": { "findAll": {}, "findOne": { type: t["./jobs/entities/job.entity"].JobEntity }, "remove": {} } }], [import("./vector-records/vector-record.controller"), { "VectorRecordController": { "findAll": {}, "findOne": { type: t["./vector-records/entities/vector-record.entity"].VectorRecordEntity } } }], [import("./documents/documents.controller"), { "DocumentsController": { "create": { type: t["./content/entities/content.entity"].ContentEntity } } }], [import("./email-change/email-change.controller"), { "EmailChangeController": { "confirm": { type: t["./auth/dto/token.dto"].TokenDto }, "request": {} } }], [import("./email-verification/email-verification.controller"), { "EmailVerificationController": { "confirm": { type: t["./auth/dto/token.dto"].TokenDto }, "request": {} } }], [import("./images/images.controller"), { "ImagesController": { "create": { type: t["./content/entities/content.entity"].ContentEntity } } }], [import("./members/members.controller"), { "MembersController": { "create": { type: t["./members/entities/member.entity"].MemberEntity }, "findAll": {}, "join": { type: t["./members/entities/member.entity"].MemberEntity }, "remove": {}, "update": { type: t["./members/entities/member.entity"].MemberEntity } } }], [import("./threads/threads.controller"), { "ThreadsController": { "create": { type: t["./threads/entities/thread.entity"].ThreadEntity }, "findAll": {}, "findOne": { type: t["./threads/entities/thread.entity"].ThreadEntity }, "remove": {}, "findsOne": { type: t["./threads/entities/thread.entity"].ThreadEntity } } }], [import("./messages/messages.controller"), { "MessagesController": { "create": { type: t["./messages/entities/message.entity"].MessageEntity }, "findAll": {} } }], [import("./password-reset/password-reset.controller"), { "PasswordResetController": { "confirm": { type: t["./auth/dto/token.dto"].TokenDto }, "request": {} } }]] } };
};