import type { UseSuspenseQueryOptions } from '@tanstack/react-query'
import type {
  AccessorKeyColumnDef,
  ColumnDef,
  ColumnFiltersState,
  RowData,
  SortingState,
  VisibilityState
} from '@tanstack/react-table'

import { useEffect, useMemo, useState } from 'react'
import { useSuspenseQuery } from '@tanstack/react-query'
import { getCoreRowModel, useReactTable } from '@tanstack/react-table'
import { MoreHorizontal } from 'lucide-react'
import { VisuallyHidden } from 'radix-ui'

import type { SearchQuery } from '@archesai/core'
import type { BaseEntity } from '@archesai/schemas'

import { DataTablePagination } from '#components/datatable/data-table-pagination'
import { DataTableToolbar } from '#components/datatable/data-table-toolbar'
import { DeleteItems } from '#components/datatable/delete-items'
import { GridView } from '#components/datatable/grid-view'
import { TableView } from '#components/datatable/table-view'
import { Button } from '#components/shadcn/button'
import { Checkbox } from '#components/shadcn/checkbox'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogTitle
} from '#components/shadcn/dialog'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger
} from '#components/shadcn/dropdown-menu'
import { useToggleView } from '#hooks/use-toggle-view'
import { toSentenceCase } from '#lib/utils'
import { DataTableColumnHeader } from './data-table-column-header'

declare module '@tanstack/table-core' {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  interface TableMeta<TData extends RowData> {
    entityType: string
  }
}

export interface DataTableProps<TEntity extends BaseEntity> {
  columns: AccessorKeyColumnDef<TEntity>[]
  createForm?: React.ReactNode
  defaultView?: 'grid' | 'table'
  deleteItem?: (id: string) => Promise<void>
  entityType?: string
  getEditFormFromItem?: (item: TEntity) => React.ReactNode
  grid?: (item: TEntity) => React.ReactNode
  gridHover?: (item: TEntity) => React.ReactNode
  handleSelect: (item: TEntity) => void
  icon: React.ReactNode
  minimal?: boolean
  query?: SearchQuery<TEntity>
  readonly?: boolean
  setFinalForm?: (form: React.ReactNode) => void
  setFormOpen?: (open: boolean) => void
  useFindMany: UseSuspenseQueryOptions<TFindManyResponse<TEntity>>
}

export interface TFindManyResponse<TEntity extends BaseEntity> {
  data: {
    attributes: Omit<TEntity, 'id' | 'type'>
    id: TEntity['id']
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    type: any
  }[]
}

export function DataTable<TEntity extends BaseEntity>(
  props: DataTableProps<TEntity>
) {
  // Use the useDebounce hook to debounce the query
  // const debouncedQuery = useDebounce(query, 200) // 500ms delay

  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({})
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([])
  const [sorting, setSorting] = useState<SortingState>([
    {
      desc: true,
      id: 'createdAt'
    }
  ])
  const [formOpen, setFormOpen] = useState(false)
  const [finalForm, setFinalForm] = useState<React.ReactNode | undefined>(
    props.createForm
  )

  const { setView, view } = useToggleView()
  useEffect(() => {
    setView(props.defaultView ?? 'table')
  }, [props.defaultView, setView])

  const autoGeneratedColumns = useMemo(
    () =>
      props.columns.map((column) => ({
        ...column,
        header:
          column.header ??
          (({ column: col }) => (
            <DataTableColumnHeader
              column={col}
              title={toSentenceCase(column.accessorKey.toString())}
            />
          ))
      })),
    [props.columns]
  )

  const { data, isFetched } = useSuspenseQuery(props.useFindMany)

  const table = useReactTable({
    columns: [
      // Checkbox column
      ...(!props.readonly ?
        [
          {
            cell: ({ row }) => (
              <div className='flex'>
                <Checkbox
                  aria-label='Select row'
                  checked={row.getIsSelected()}
                  className='justify-self-center'
                  onCheckedChange={() => {
                    row.toggleSelected()
                  }}
                />
              </div>
            ),
            enableHiding: false,
            enableSorting: false,
            id: 'select'
          } as ColumnDef<TEntity>
        ]
      : []),
      // Data columns
      ...autoGeneratedColumns,
      // Actions column
      ...(!props.readonly ?
        [
          {
            cell: ({ row }) => (
              <div className='flex justify-end'>
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button
                      aria-label='Expand row options'
                      className='flex h-8 w-8 p-0 data-[state=open]:bg-muted'
                      variant='ghost'
                    >
                      <MoreHorizontal className='h-5 w-5' />
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent
                    align='end'
                    className='w-[160px]'
                  >
                    {props.getEditFormFromItem ?
                      <>
                        <DropdownMenuItem
                          onClick={() => {
                            if (!props.getEditFormFromItem) {
                              throw new Error(
                                'getEditFormFromItem function is not defined'
                              )
                            }
                            setFinalForm(
                              props.getEditFormFromItem(row.original)
                            )
                            setFormOpen(true)
                          }}
                        >
                          Edit
                        </DropdownMenuItem>
                        <DropdownMenuSeparator />
                      </>
                    : null}
                    {props.deleteItem ?
                      <DropdownMenuItem
                        onSelect={(e) => {
                          e.preventDefault()
                        }}
                      >
                        <DeleteItems
                          deleteItem={async (id) => {
                            if (!props.deleteItem) {
                              throw new Error(
                                'deleteItem function is not defined'
                              )
                            }
                            await props.deleteItem(id)
                            table.toggleAllRowsSelected(false)
                          }}
                          entityType={
                            table.options.meta?.entityType ?? 'Entity'
                          }
                          items={[row.original]}
                          variant='md'
                        />
                      </DropdownMenuItem>
                    : null}
                  </DropdownMenuContent>
                </DropdownMenu>
              </div>
            ),
            id: 'actions'
          } as ColumnDef<TEntity>
        ]
      : [])
    ],
    data: data.data.map((item) => {
      return {
        ...item.attributes,
        id: item.id
      } as TEntity
    }),
    enableRowSelection: true,
    getCoreRowModel: getCoreRowModel(),
    manualFiltering: true,
    manualPagination: true,
    manualSorting: true,
    onColumnFiltersChange: setColumnFilters,
    onColumnVisibilityChange: setColumnVisibility,
    onSortingChange: setSorting,
    state: {
      columnFilters,
      columnVisibility,
      sorting
    }
  })

  const selectedRows = table.getSelectedRowModel().rows

  return (
    <div className='flex h-full flex-col gap-3'>
      {/* SEARCH TOOLBAR */}
      {!props.minimal && (
        <DataTableToolbar<TEntity>
          createForm={props.createForm}
          readonly={props.readonly ?? false}
          setFormOpen={setFormOpen}
          table={table}
        />
      )}

      {/* DELETE ITEMS BUTTON */}
      {selectedRows.length > 0 &&
        (props.deleteItem ?
          <DeleteItems
            deleteItem={async (id) => {
              if (props.deleteItem) {
                await props.deleteItem(id)
              }
              table.toggleAllRowsSelected(false)
            }}
            entityType={table.options.meta?.entityType ?? 'Entity'}
            items={table.getSelectedRowModel().rows.map((row) => row.original)}
            variant='lg'
          />
        : null)}

      {/* DATA TABLE - EITHER GRID OR TABLE VIEW*/}
      <div className='flex-1 overflow-auto'>
        {view === 'grid' ?
          <GridView<TEntity>
            icon={props.icon}
            setFinalForm={setFinalForm}
            setFormOpen={setFormOpen}
            table={table}
          />
        : <TableView<TEntity>
            isFetched={isFetched}
            table={table}
          />
        }
      </div>

      {/* PAGINATION */}
      {!props.minimal && (
        <div className='self-auto'>
          <DataTablePagination<TEntity>
            table={table}
            totalRecords={data.data.length}
          />
        </div>
      )}

      {/* THIS IS THE FORM DIALOG */}
      <Dialog
        onOpenChange={(o) => {
          setFormOpen(o)
          if (!o) {
            setFinalForm(props.createForm)
          }
        }}
        open={formOpen}
      >
        <VisuallyHidden.Root>
          <DialogDescription />
          <DialogTitle>
            {finalForm ? 'Edit' : 'Create'}{' '}
            {table.options.meta?.entityType ?? 'Entity'}
          </DialogTitle>
        </VisuallyHidden.Root>
        <DialogContent
          aria-description='Create/Edit'
          className='p-0'
          title='Create/Edit'
        >
          {finalForm}
        </DialogContent>
      </Dialog>
    </div>
  )
}
