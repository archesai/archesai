'use client'

import type {
  AccessorKeyColumnDef,
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  VisibilityState
} from '@tanstack/react-table'

import { useEffect, useMemo, useState } from 'react'
import * as VisuallyHidden from '@radix-ui/react-visually-hidden'
import { getCoreRowModel, useReactTable } from '@tanstack/react-table'
import { MoreHorizontal } from 'lucide-react'

import type { SearchQuery } from '@archesai/core'
import type { BaseEntity } from '@archesai/domain'

import { DataTablePagination } from '#components/datatable/data-table-pagination'
import { DataTableToolbar } from '#components/datatable/data-table-toolbar'
import { DeleteItems } from '#components/datatable/delete-items'
import { GridView } from '#components/datatable/grid-view'
import { TableView } from '#components/datatable/table-view'
import { Button } from '#components/shadcn/button'
import { Checkbox } from '#components/shadcn/checkbox'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogTitle
} from '#components/shadcn/dialog'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger
} from '#components/shadcn/dropdown-menu'
import { useSelectItems } from '#hooks/use-select-items'
import { useToggleView } from '#hooks/use-toggle-view'
import { toSentenceCase } from '#lib/utils'
import { DataTableColumnHeader } from './data-table-column-header'

export interface DataTableContainerProps<TEntity extends BaseEntity>
  extends DataTableProps<TEntity> {
  data: TEntity[]
  isFetched: boolean
  query?: SearchQuery<TEntity>
  selectedItems: string[]
  setFinalForm: (form: React.ReactNode) => void
  setFormOpen: (open: boolean) => void
  toggleSelection: (id: string) => void
}

export interface DataTableProps<
  TEntity extends BaseEntity,
  FindManyParams extends SearchQuery<TEntity> = SearchQuery<TEntity>,
  FindManyOptions extends {
    query?: {
      enabled?: boolean
    }
  } = {
    query?: {
      enabled?: boolean
    }
  }
> {
  columns: AccessorKeyColumnDef<TEntity>[]
  createForm?: React.ReactNode
  defaultView?: 'grid' | 'table'
  deleteItem?: (id: string) => Promise<void>
  entityType: string
  getEditFormFromItem?: (item: TEntity) => React.ReactNode
  grid?: (item: TEntity) => React.ReactNode
  gridHover?: (item: TEntity) => React.ReactNode
  handleSelect: (item: TEntity) => void
  icon: React.ReactNode
  minimal?: boolean
  readonly?: boolean

  useFindMany: (
    params: FindManyParams,
    options: FindManyOptions
  ) => {
    data: TFindManyResponse<TEntity> | undefined
    isFetched: boolean
  }
}
export interface TFindManyResponse<TEntity extends BaseEntity> {
  data: {
    data: {
      attributes: Omit<TEntity, 'id' | 'type'>
      id: TEntity['id']
      type: string
    }[]
  }
  status: 200
}

export function DataTable<TEntity extends BaseEntity>(
  props: DataTableProps<TEntity>
) {
  // Use the useDebounce hook to debounce the query
  // const debouncedQuery = useDebounce(query, 200) // 500ms delay

  const [columnVisibility, setColumnVisibility] = useState<VisibilityState>({})
  const [columnFilters, setColumnFilters] = useState<ColumnFiltersState>([])
  const [sorting, setSorting] = useState<SortingState>([
    {
      desc: true,
      id: 'createdAt'
    }
  ])
  const [formOpen, setFormOpen] = useState(false)
  const [finalForm, setFinalForm] = useState<React.ReactNode | undefined>(
    props.createForm
  )

  const { setView, view } = useToggleView()
  useEffect(() => {
    setView(props.defaultView ?? 'table')
  }, [props.defaultView, setView])

  const autoGeneratedColumns = useMemo(
    () =>
      props.columns.map((column) => ({
        ...column,
        header:
          column.header ??
          (({ column: col }) => (
            <DataTableColumnHeader
              column={col}
              title={toSentenceCase(column.accessorKey.toString())}
            />
          ))
      })),
    [props.columns]
  )

  const { data, isFetched } = props.useFindMany({}, {})

  if (!data) {
    return (
      <div className='flex h-full items-center justify-center'>
        <span className='text-lg font-medium'>Loading...</span>
      </div>
    )
  }

  const memoizedData = data.data.data.map((item) => {
    return {
      id: item.id,

      type: item.type,
      ...item.attributes
    } as TEntity
  })

  const { selectedItems, setSelectedItems, toggleSelection } = useSelectItems({
    items: memoizedData
  })

  const table = useReactTable({
    columns: [
      // Checkbox column
      ...(!props.readonly
        ? [
            {
              cell: ({ row }) => (
                <div className='flex'>
                  <Checkbox
                    aria-label='Select row'
                    checked={selectedItems.includes(row.original.id)}
                    className='justify-self-center'
                    onCheckedChange={() => {
                      toggleSelection(row.original.id)
                    }}
                  />
                </div>
              ),
              enableHiding: false,
              enableSorting: false,
              id: 'select'
            } as ColumnDef<TEntity>
          ]
        : []),
      // Data columns
      ...autoGeneratedColumns,
      // Actions column
      ...(!props.readonly
        ? [
            {
              cell: ({ row }) => (
                <div className='flex justify-end'>
                  <DropdownMenu>
                    <DropdownMenuTrigger asChild>
                      <Button
                        aria-label='Expand row options'
                        className='data-[state=open]:bg-muted flex h-8 w-8 p-0'
                        variant='ghost'
                      >
                        <MoreHorizontal className='h-5 w-5' />
                      </Button>
                    </DropdownMenuTrigger>
                    <DropdownMenuContent
                      align='end'
                      className='w-[160px]'
                    >
                      {props.getEditFormFromItem ? (
                        <>
                          <DropdownMenuItem
                            onClick={() => {
                              if (!props.getEditFormFromItem) {
                                throw new Error(
                                  'getEditFormFromItem function is not defined'
                                )
                              }
                              setFinalForm(
                                props.getEditFormFromItem(row.original)
                              )
                              setFormOpen(true)
                            }}
                          >
                            Edit
                          </DropdownMenuItem>
                          <DropdownMenuSeparator />
                        </>
                      ) : null}
                      {props.deleteItem ? (
                        <DropdownMenuItem
                          onSelect={(e) => {
                            e.preventDefault()
                          }}
                        >
                          <DeleteItems
                            deleteItem={async (id) => {
                              if (!props.deleteItem) {
                                throw new Error(
                                  'deleteItem function is not defined'
                                )
                              }
                              await props.deleteItem(id)
                              setSelectedItems([])
                            }}
                            entityType={props.entityType}
                            items={[row.original]}
                            variant='md'
                          />
                        </DropdownMenuItem>
                      ) : null}
                    </DropdownMenuContent>
                  </DropdownMenu>
                </div>
              ),
              id: 'actions'
            } as ColumnDef<TEntity>
          ]
        : [])
    ],
    data: memoizedData,
    enableRowSelection: true,
    getCoreRowModel: getCoreRowModel(),
    manualFiltering: true,
    manualPagination: true,
    manualSorting: true,
    onColumnFiltersChange: setColumnFilters,
    onColumnVisibilityChange: setColumnVisibility,
    onSortingChange: setSorting,
    state: {
      columnFilters,
      columnVisibility,
      sorting
    }
  })

  return (
    <div className='flex h-full flex-col gap-3'>
      {/* SEARCH TOOLBAR */}
      {!props.minimal && (
        <DataTableToolbar<TEntity>
          createForm={props.createForm}
          data={memoizedData}
          entityType={props.entityType}
          readonly={props.readonly ?? false}
          setFormOpen={setFormOpen}
          table={table}
        />
      )}

      {/* DELETE ITEMS BUTTON */}
      {selectedItems.length > 0 &&
        (props.deleteItem ? (
          <DeleteItems
            deleteItem={async (id) => {
              if (props.deleteItem) {
                await props.deleteItem(id)
              }
              setSelectedItems([])
            }}
            entityType={props.entityType}
            items={selectedItems
              .map((id) => {
                const item = memoizedData.find((i) => i.id === id)
                return item
              })
              .filter((item) => !!item)}
            variant='lg'
          />
        ) : null)}

      {/* DATA TABLE - EITHER GRID OR TABLE VIEW*/}
      <div className='flex-1 overflow-auto'>
        {view === 'grid' ? (
          <GridView<TEntity>
            {...props}
            data={memoizedData}
            isFetched={isFetched}
            selectedItems={selectedItems}
            setFinalForm={setFinalForm}
            setFormOpen={setFormOpen}
            toggleSelection={toggleSelection}
          />
        ) : (
          <TableView<TEntity>
            {...props}
            data={memoizedData}
            isFetched={isFetched}
            selectedItems={selectedItems}
            table={table}
          />
        )}
      </div>

      {/* PAGINATION */}
      {!props.minimal && (
        <div className='self-auto'>
          <DataTablePagination<TEntity>
            response={{
              // FIXME
              data: memoizedData,
              meta: {
                page: 0,
                size: 0,
                total_records: 0
              }
            }}
          />
        </div>
      )}

      {/* THIS IS THE FORM DIALOG */}
      <Dialog
        onOpenChange={(o) => {
          setFormOpen(o)
          if (!o) {
            setFinalForm(props.createForm)
          }
        }}
        open={formOpen}
      >
        <VisuallyHidden.Root>
          <DialogDescription />
          <DialogTitle>
            {finalForm ? 'Edit' : 'Create'} {props.entityType}
          </DialogTitle>
        </VisuallyHidden.Root>
        <DialogContent
          aria-description='Create/Edit'
          className='p-0'
          title='Create/Edit'
        >
          {finalForm}
        </DialogContent>
      </Dialog>
    </div>
  )
}
