/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v1
 */
import type {
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'

import { useMutation, useSuspenseQuery } from '@tanstack/react-query'

import type {
  AcceptInvitation200,
  CreateInvitation201,
  CreateInvitationBody,
  DeleteInvitation200,
  FindManyInvitations200,
  FindManyInvitationsParams,
  ForbiddenResponse,
  GetOneInvitation200,
  NotFoundResponse,
  UnauthorizedResponse,
  UpdateInvitation200,
  UpdateInvitationBody
} from '../orval.schemas'

import { customFetch } from '../../fetcher'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Create a new invitation
 * @summary Create a new invitation
 */
export const getCreateInvitationUrl = () => {
  return `/invitations`
}

export const createInvitation = async (
  createInvitationBody: CreateInvitationBody,
  options?: RequestInit
): Promise<CreateInvitation201> => {
  return customFetch<CreateInvitation201>(getCreateInvitationUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createInvitationBody)
  })
}

export const getCreateInvitationMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createInvitation>>,
    TError,
    { data: CreateInvitationBody },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createInvitation>>,
  TError,
  { data: CreateInvitationBody },
  TContext
> => {
  const mutationKey = ['createInvitation']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createInvitation>>,
    { data: CreateInvitationBody }
  > = (props) => {
    const { data } = props ?? {}

    return createInvitation(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateInvitationMutationResult = NonNullable<
  Awaited<ReturnType<typeof createInvitation>>
>
export type CreateInvitationMutationBody = CreateInvitationBody
export type CreateInvitationMutationError = unknown

/**
 * @summary Create a new invitation
 */
export const useCreateInvitation = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createInvitation>>,
      TError,
      { data: CreateInvitationBody },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof createInvitation>>,
  TError,
  { data: CreateInvitationBody },
  TContext
> => {
  const mutationOptions = getCreateInvitationMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Find many invitations
 * @summary Find many invitations
 */
export const getFindManyInvitationsUrl = (
  params?: FindManyInvitationsParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0 ?
      `/invitations?${stringifiedParams}`
    : `/invitations`
}

export const findManyInvitations = async (
  params?: FindManyInvitationsParams,
  options?: RequestInit
): Promise<FindManyInvitations200> => {
  return customFetch<FindManyInvitations200>(
    getFindManyInvitationsUrl(params),
    {
      ...options,
      method: 'GET'
    }
  )
}

export const getFindManyInvitationsQueryKey = (
  params?: FindManyInvitationsParams
) => {
  return [`/invitations`, ...(params ? [params] : [])] as const
}

export const getFindManyInvitationsSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof findManyInvitations>>,
  TError = unknown
>(
  params?: FindManyInvitationsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyInvitations>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getFindManyInvitationsQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof findManyInvitations>>
  > = ({ signal }) => findManyInvitations(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof findManyInvitations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindManyInvitationsSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof findManyInvitations>>
>
export type FindManyInvitationsSuspenseQueryError = unknown

export function useFindManyInvitationsSuspense<
  TData = Awaited<ReturnType<typeof findManyInvitations>>,
  TError = unknown
>(
  params: undefined | FindManyInvitationsParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyInvitations>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyInvitationsSuspense<
  TData = Awaited<ReturnType<typeof findManyInvitations>>,
  TError = unknown
>(
  params?: FindManyInvitationsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyInvitations>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyInvitationsSuspense<
  TData = Awaited<ReturnType<typeof findManyInvitations>>,
  TError = unknown
>(
  params?: FindManyInvitationsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyInvitations>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find many invitations
 */

export function useFindManyInvitationsSuspense<
  TData = Awaited<ReturnType<typeof findManyInvitations>>,
  TError = unknown
>(
  params?: FindManyInvitationsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyInvitations>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getFindManyInvitationsSuspenseQueryOptions(
    params,
    options
  )

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Delete an invitation
 * @summary Delete an invitation
 */
export const getDeleteInvitationUrl = (id: string | undefined | null) => {
  return `/invitations/${id}`
}

export const deleteInvitation = async (
  id: string | undefined | null,
  options?: RequestInit
): Promise<DeleteInvitation200> => {
  return customFetch<DeleteInvitation200>(getDeleteInvitationUrl(id), {
    ...options,
    method: 'DELETE'
  })
}

export const getDeleteInvitationMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteInvitation>>,
    TError,
    { id: string | undefined | null },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteInvitation>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationKey = ['deleteInvitation']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteInvitation>>,
    { id: string | undefined | null }
  > = (props) => {
    const { id } = props ?? {}

    return deleteInvitation(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteInvitationMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteInvitation>>
>

export type DeleteInvitationMutationError = NotFoundResponse

/**
 * @summary Delete an invitation
 */
export const useDeleteInvitation = <
  TError = NotFoundResponse,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteInvitation>>,
      TError,
      { id: string | undefined | null },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof deleteInvitation>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationOptions = getDeleteInvitationMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Find an invitation
 * @summary Find an invitation
 */
export const getGetOneInvitationUrl = (id: string | undefined | null) => {
  return `/invitations/${id}`
}

export const getOneInvitation = async (
  id: string | undefined | null,
  options?: RequestInit
): Promise<GetOneInvitation200> => {
  return customFetch<GetOneInvitation200>(getGetOneInvitationUrl(id), {
    ...options,
    method: 'GET'
  })
}

export const getGetOneInvitationQueryKey = (id: string | undefined | null) => {
  return [`/invitations/${id}`] as const
}

export const getGetOneInvitationSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getOneInvitation>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneInvitation>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetOneInvitationQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getOneInvitation>>
  > = ({ signal }) => getOneInvitation(id, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getOneInvitation>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOneInvitationSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOneInvitation>>
>
export type GetOneInvitationSuspenseQueryError = NotFoundResponse

export function useGetOneInvitationSuspense<
  TData = Awaited<ReturnType<typeof getOneInvitation>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneInvitation>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneInvitationSuspense<
  TData = Awaited<ReturnType<typeof getOneInvitation>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneInvitation>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneInvitationSuspense<
  TData = Awaited<ReturnType<typeof getOneInvitation>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneInvitation>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find an invitation
 */

export function useGetOneInvitationSuspense<
  TData = Awaited<ReturnType<typeof getOneInvitation>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneInvitation>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetOneInvitationSuspenseQueryOptions(id, options)

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Update an invitation
 * @summary Update an invitation
 */
export const getUpdateInvitationUrl = (id: string | undefined | null) => {
  return `/invitations/${id}`
}

export const updateInvitation = async (
  id: string | undefined | null,
  updateInvitationBody: UpdateInvitationBody,
  options?: RequestInit
): Promise<UpdateInvitation200> => {
  return customFetch<UpdateInvitation200>(getUpdateInvitationUrl(id), {
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(updateInvitationBody)
  })
}

export const getUpdateInvitationMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateInvitation>>,
    TError,
    { id: string | undefined | null; data: UpdateInvitationBody },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateInvitation>>,
  TError,
  { id: string | undefined | null; data: UpdateInvitationBody },
  TContext
> => {
  const mutationKey = ['updateInvitation']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateInvitation>>,
    { id: string | undefined | null; data: UpdateInvitationBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateInvitation(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateInvitationMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateInvitation>>
>
export type UpdateInvitationMutationBody = UpdateInvitationBody
export type UpdateInvitationMutationError = NotFoundResponse

/**
 * @summary Update an invitation
 */
export const useUpdateInvitation = <
  TError = NotFoundResponse,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateInvitation>>,
      TError,
      { id: string | undefined | null; data: UpdateInvitationBody },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof updateInvitation>>,
  TError,
  { id: string | undefined | null; data: UpdateInvitationBody },
  TContext
> => {
  const mutationOptions = getUpdateInvitationMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Accept an invitation
 * @summary Accept an invitation
 */
export const getAcceptInvitationUrl = (id: string | undefined | null) => {
  return `/invitations/${id}/accept`
}

export const acceptInvitation = async (
  id: string | undefined | null,
  options?: RequestInit
): Promise<AcceptInvitation200> => {
  return customFetch<AcceptInvitation200>(getAcceptInvitationUrl(id), {
    ...options,
    method: 'POST'
  })
}

export const getAcceptInvitationMutationOptions = <
  TError = UnauthorizedResponse | ForbiddenResponse | NotFoundResponse,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof acceptInvitation>>,
    TError,
    { id: string | undefined | null },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof acceptInvitation>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationKey = ['acceptInvitation']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof acceptInvitation>>,
    { id: string | undefined | null }
  > = (props) => {
    const { id } = props ?? {}

    return acceptInvitation(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AcceptInvitationMutationResult = NonNullable<
  Awaited<ReturnType<typeof acceptInvitation>>
>

export type AcceptInvitationMutationError =
  | UnauthorizedResponse
  | ForbiddenResponse
  | NotFoundResponse

/**
 * @summary Accept an invitation
 */
export const useAcceptInvitation = <
  TError = UnauthorizedResponse | ForbiddenResponse | NotFoundResponse,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof acceptInvitation>>,
      TError,
      { id: string | undefined | null },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof acceptInvitation>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationOptions = getAcceptInvitationMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
