/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v1
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'

import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query'
import qs from 'qs'

import type {
  CreateSession201,
  DeleteSession200,
  FindManySessions200,
  FindManySessionsParams,
  GetOneSession200,
  NotFoundResponse,
  SessionEntityInput,
  UpdateSession200
} from '../orval.schemas'

import { customFetch } from '../../fetcher'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Create a new session
 * @summary Create a new session
 */
export const getCreateSessionUrl = () => {
  return `/sessions`
}

export const createSession = async (
  sessionEntityInput: SessionEntityInput,
  options?: RequestInit
): Promise<CreateSession201> => {
  return customFetch<CreateSession201>(getCreateSessionUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(sessionEntityInput)
  })
}

export const getCreateSessionMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createSession>>,
    TError,
    { data: SessionEntityInput },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createSession>>,
  TError,
  { data: SessionEntityInput },
  TContext
> => {
  const mutationKey = ['createSession']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createSession>>,
    { data: SessionEntityInput }
  > = (props) => {
    const { data } = props ?? {}

    return createSession(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateSessionMutationResult = NonNullable<
  Awaited<ReturnType<typeof createSession>>
>
export type CreateSessionMutationBody = SessionEntityInput
export type CreateSessionMutationError = unknown

/**
 * @summary Create a new session
 */
export const useCreateSession = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createSession>>,
      TError,
      { data: SessionEntityInput },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof createSession>>,
  TError,
  { data: SessionEntityInput },
  TContext
> => {
  const mutationOptions = getCreateSessionMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Find many sessions
 * @summary Find many sessions
 */
export const getFindManySessionsUrl = (params?: FindManySessionsParams) => {
  const stringifiedParams = qs.stringify(params || {}, {
    skipNulls: false,
    strictNullHandling: true
  })

  return stringifiedParams.length > 0 ?
      `/sessions?${stringifiedParams}`
    : `/sessions`
}

export const findManySessions = async (
  params?: FindManySessionsParams,
  options?: RequestInit
): Promise<FindManySessions200> => {
  return customFetch<FindManySessions200>(getFindManySessionsUrl(params), {
    ...options,
    method: 'GET'
  })
}

export const getFindManySessionsQueryKey = (
  params?: FindManySessionsParams
) => {
  return [`/sessions`, ...(params ? [params] : [])] as const
}

export const getFindManySessionsQueryOptions = <
  TData = Awaited<ReturnType<typeof findManySessions>>,
  TError = unknown
>(
  params?: FindManySessionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManySessions>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindManySessionsQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof findManySessions>>
  > = ({ signal }) => findManySessions(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findManySessions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindManySessionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof findManySessions>>
>
export type FindManySessionsQueryError = unknown

export function useFindManySessions<
  TData = Awaited<ReturnType<typeof findManySessions>>,
  TError = unknown
>(
  params: undefined | FindManySessionsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManySessions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findManySessions>>,
          TError,
          Awaited<ReturnType<typeof findManySessions>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManySessions<
  TData = Awaited<ReturnType<typeof findManySessions>>,
  TError = unknown
>(
  params?: FindManySessionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManySessions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findManySessions>>,
          TError,
          Awaited<ReturnType<typeof findManySessions>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManySessions<
  TData = Awaited<ReturnType<typeof findManySessions>>,
  TError = unknown
>(
  params?: FindManySessionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManySessions>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find many sessions
 */

export function useFindManySessions<
  TData = Awaited<ReturnType<typeof findManySessions>>,
  TError = unknown
>(
  params?: FindManySessionsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManySessions>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getFindManySessionsQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindManySessionsSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof findManySessions>>,
  TError = unknown
>(
  params?: FindManySessionsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManySessions>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindManySessionsQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof findManySessions>>
  > = ({ signal }) => findManySessions(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof findManySessions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindManySessionsSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof findManySessions>>
>
export type FindManySessionsSuspenseQueryError = unknown

export function useFindManySessionsSuspense<
  TData = Awaited<ReturnType<typeof findManySessions>>,
  TError = unknown
>(
  params: undefined | FindManySessionsParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManySessions>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManySessionsSuspense<
  TData = Awaited<ReturnType<typeof findManySessions>>,
  TError = unknown
>(
  params?: FindManySessionsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManySessions>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManySessionsSuspense<
  TData = Awaited<ReturnType<typeof findManySessions>>,
  TError = unknown
>(
  params?: FindManySessionsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManySessions>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find many sessions
 */

export function useFindManySessionsSuspense<
  TData = Awaited<ReturnType<typeof findManySessions>>,
  TError = unknown
>(
  params?: FindManySessionsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManySessions>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getFindManySessionsSuspenseQueryOptions(params, options)

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Delete a session
 * @summary Delete a session
 */
export const getDeleteSessionUrl = (id: string | undefined | null) => {
  return `/sessions/${id}`
}

export const deleteSession = async (
  id: string | undefined | null,
  options?: RequestInit
): Promise<DeleteSession200> => {
  return customFetch<DeleteSession200>(getDeleteSessionUrl(id), {
    ...options,
    method: 'DELETE'
  })
}

export const getDeleteSessionMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteSession>>,
    TError,
    { id: string | undefined | null },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteSession>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationKey = ['deleteSession']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteSession>>,
    { id: string | undefined | null }
  > = (props) => {
    const { id } = props ?? {}

    return deleteSession(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteSessionMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteSession>>
>

export type DeleteSessionMutationError = NotFoundResponse

/**
 * @summary Delete a session
 */
export const useDeleteSession = <TError = NotFoundResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteSession>>,
      TError,
      { id: string | undefined | null },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof deleteSession>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationOptions = getDeleteSessionMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Find a session
 * @summary Find a session
 */
export const getGetOneSessionUrl = (id: string | undefined | null) => {
  return `/sessions/${id}`
}

export const getOneSession = async (
  id: string | undefined | null,
  options?: RequestInit
): Promise<GetOneSession200> => {
  return customFetch<GetOneSession200>(getGetOneSessionUrl(id), {
    ...options,
    method: 'GET'
  })
}

export const getGetOneSessionQueryKey = (id: string | undefined | null) => {
  return [`/sessions/${id}`] as const
}

export const getGetOneSessionQueryOptions = <
  TData = Awaited<ReturnType<typeof getOneSession>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneSession>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetOneSessionQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneSession>>> = ({
    signal
  }) => getOneSession(id, { signal, ...requestOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getOneSession>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOneSessionQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOneSession>>
>
export type GetOneSessionQueryError = NotFoundResponse

export function useGetOneSession<
  TData = Awaited<ReturnType<typeof getOneSession>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneSession>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOneSession>>,
          TError,
          Awaited<ReturnType<typeof getOneSession>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneSession<
  TData = Awaited<ReturnType<typeof getOneSession>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneSession>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOneSession>>,
          TError,
          Awaited<ReturnType<typeof getOneSession>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneSession<
  TData = Awaited<ReturnType<typeof getOneSession>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneSession>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find a session
 */

export function useGetOneSession<
  TData = Awaited<ReturnType<typeof getOneSession>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneSession>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetOneSessionQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getGetOneSessionSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getOneSession>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneSession>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetOneSessionQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneSession>>> = ({
    signal
  }) => getOneSession(id, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getOneSession>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOneSessionSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOneSession>>
>
export type GetOneSessionSuspenseQueryError = NotFoundResponse

export function useGetOneSessionSuspense<
  TData = Awaited<ReturnType<typeof getOneSession>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneSession>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneSessionSuspense<
  TData = Awaited<ReturnType<typeof getOneSession>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneSession>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneSessionSuspense<
  TData = Awaited<ReturnType<typeof getOneSession>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneSession>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find a session
 */

export function useGetOneSessionSuspense<
  TData = Awaited<ReturnType<typeof getOneSession>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneSession>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetOneSessionSuspenseQueryOptions(id, options)

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Update a session
 * @summary Update a session
 */
export const getUpdateSessionUrl = (id: string | undefined | null) => {
  return `/sessions/${id}`
}

export const updateSession = async (
  id: string | undefined | null,
  sessionEntityInput: SessionEntityInput,
  options?: RequestInit
): Promise<UpdateSession200> => {
  return customFetch<UpdateSession200>(getUpdateSessionUrl(id), {
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(sessionEntityInput)
  })
}

export const getUpdateSessionMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateSession>>,
    TError,
    { id: string | undefined | null; data: SessionEntityInput },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateSession>>,
  TError,
  { id: string | undefined | null; data: SessionEntityInput },
  TContext
> => {
  const mutationKey = ['updateSession']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateSession>>,
    { id: string | undefined | null; data: SessionEntityInput }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateSession(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateSessionMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateSession>>
>
export type UpdateSessionMutationBody = SessionEntityInput
export type UpdateSessionMutationError = NotFoundResponse

/**
 * @summary Update a session
 */
export const useUpdateSession = <TError = NotFoundResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateSession>>,
      TError,
      { id: string | undefined | null; data: SessionEntityInput },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof updateSession>>,
  TError,
  { id: string | undefined | null; data: SessionEntityInput },
  TContext
> => {
  const mutationOptions = getUpdateSessionMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
