/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v1
 */
import type {
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'

import { useMutation, useSuspenseQuery } from '@tanstack/react-query'

import type {
  GetSession200,
  Login201,
  LoginBody,
  NoContentResponse,
  UnauthorizedResponse
} from '../orval.schemas'

import { customFetch } from '../../fetcher'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * This endpoint will log you in with your e-mail and password
 * @summary Login
 */
export const getLoginUrl = () => {
  return `/auth/login`
}

export const login = async (
  loginBody: LoginBody,
  options?: RequestInit
): Promise<Login201> => {
  return customFetch<Login201>(getLoginUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(loginBody)
  })
}

export const getLoginMutationOptions = <
  TError = UnauthorizedResponse,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof login>>,
    TError,
    { data: LoginBody },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof login>>,
  TError,
  { data: LoginBody },
  TContext
> => {
  const mutationKey = ['login']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof login>>,
    { data: LoginBody }
  > = (props) => {
    const { data } = props ?? {}

    return login(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>
export type LoginMutationBody = LoginBody
export type LoginMutationError = UnauthorizedResponse

/**
 * @summary Login
 */
export const useLogin = <TError = UnauthorizedResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof login>>,
      TError,
      { data: LoginBody },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof login>>,
  TError,
  { data: LoginBody },
  TContext
> => {
  const mutationOptions = getLoginMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * This endpoint will log you out of the current session
 * @summary Logout
 */
export const getLogoutUrl = () => {
  return `/auth/logout`
}

export const logout = async (
  options?: RequestInit
): Promise<NoContentResponse> => {
  return customFetch<NoContentResponse>(getLogoutUrl(), {
    ...options,
    method: 'POST'
  })
}

export const getLogoutMutationOptions = <
  TError = UnauthorizedResponse,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof logout>>,
    TError,
    void,
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof logout>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ['logout']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof logout>>,
    void
  > = () => {
    return logout(requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type LogoutMutationResult = NonNullable<
  Awaited<ReturnType<typeof logout>>
>

export type LogoutMutationError = UnauthorizedResponse

/**
 * @summary Logout
 */
export const useLogout = <TError = UnauthorizedResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof logout>>,
      TError,
      void,
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof logout>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getLogoutMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * This endpoint will return the current session information
 * @summary Get Session
 */
export const getGetSessionUrl = () => {
  return `/auth/session`
}

export const getSession = async (
  options?: RequestInit
): Promise<GetSession200> => {
  return customFetch<GetSession200>(getGetSessionUrl(), {
    ...options,
    method: 'GET'
  })
}

export const getGetSessionQueryKey = () => {
  return [`/auth/session`] as const
}

export const getGetSessionSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getSession>>,
  TError = UnauthorizedResponse
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof getSession>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customFetch>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetSessionQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSession>>> = ({
    signal
  }) => getSession({ signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getSession>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSessionSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSession>>
>
export type GetSessionSuspenseQueryError = UnauthorizedResponse

export function useGetSessionSuspense<
  TData = Awaited<ReturnType<typeof getSession>>,
  TError = UnauthorizedResponse
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getSession>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetSessionSuspense<
  TData = Awaited<ReturnType<typeof getSession>>,
  TError = UnauthorizedResponse
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getSession>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetSessionSuspense<
  TData = Awaited<ReturnType<typeof getSession>>,
  TError = UnauthorizedResponse
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getSession>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get Session
 */

export function useGetSessionSuspense<
  TData = Awaited<ReturnType<typeof getSession>>,
  TError = UnauthorizedResponse
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getSession>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetSessionSuspenseQueryOptions(options)

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}
