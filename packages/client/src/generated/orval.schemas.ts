/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v1
 */
/**
 * Schema for Account entity
 */
export interface AccountEntityInput {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /**
   * The access token
   * @nullable
   */
  accessToken: string | null
  /**
   * The expiration date
   * @nullable
   */
  accessTokenExpiresAt: string | null
  /** The unique identifier for the account */
  accountId: string
  /**
   * The ID token
   * @nullable
   */
  idToken: string | null
  /**
   * The hashed password for local authentication
   * @nullable
   */
  password: string | null
  /** The provider ID associated with the auth provider */
  providerId: string
  /**
   * The refresh token
   * @nullable
   */
  refreshToken: string | null
  /**
   * The refresh token expiration date
   * @nullable
   */
  refreshTokenExpiresAt: string | null
  /**
   * The scope of the access token
   * @nullable
   */
  scope: string | null
  /** The user ID associated with the auth provider */
  userId: string
}

/**
 * Schema for API Token entity
 */
export interface ApiTokenEntityInput {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** Whether the API token is enabled or not */
  enabled: boolean
  /**
   * The date and time when the API token expires
   * @nullable
   */
  expiresAt: string | null
  /** The API token key. This will only be shown once */
  key: string
  /**
   * The date and time when the API token was last refilled
   * @nullable
   */
  lastRefill: string | null
  /**
   * The date and time when the API token was last used
   * @nullable
   */
  lastRequest: string | null
  /**
   * The metadata for the API token, used for custom data
   * @nullable
   */
  metadata: string | null
  /**
   * The name of the API token
   * @nullable
   */
  name: string | null
  /**
   * The name of the API token
   * @nullable
   */
  permissions: string | null
  /**
   * TThe prefix for the API token, used for routing requests
   * @nullable
   */
  prefix: string | null
  /** Whether the API token has rate limiting enabled */
  rateLimitEnabled: boolean
  /**
   * The maximum number of requests allowed per time window
   * @nullable
   */
  rateLimitMax: number | null
  /**
   * The time window in seconds for the rate limit
   * @nullable
   */
  rateLimitTimeWindow: number | null
  /**
   * The amount of requests to refill the token with
   * @nullable
   */
  refillAmount: number | null
  /**
   * The interval in seconds to refill the token
   * @nullable
   */
  refillInterval: number | null
  /**
   * The number of requests remaining for the token
   * @nullable
   */
  remaining: number | null
  /** The number of requests made with the token */
  requestCount: number
  /**
   * The number of requests remaining for the token
   * @nullable
   */
  start: string | null
  /** The id of the user the token belongs to */
  userId: string
}

/**
 * The role of the invitation
 */
export type InvitationEntityInputRole =
  (typeof InvitationEntityInputRole)[keyof typeof InvitationEntityInputRole]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvitationEntityInputRole = {
  admin: 'admin',
  owner: 'owner',
  member: 'member'
} as const

/**
 * Schema for Invitation entity
 */
export interface InvitationEntityInput {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The email of the invitated user */
  email: string
  /** The date and time when the invitation expires */
  expiresAt: string
  /** The user id of the inviter */
  inviterId: string
  /** The name of the organization the token belongs to */
  organizationId: string
  /** The role of the invitation */
  role: InvitationEntityInputRole
  /** The status of the invitation, e.g., pending, accepted, declined */
  status: string
}

/**
 * The role of the member
 */
export type MemberEntityInputRole =
  (typeof MemberEntityInputRole)[keyof typeof MemberEntityInputRole]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MemberEntityInputRole = {
  admin: 'admin',
  owner: 'owner',
  member: 'member'
} as const

/**
 * Schema for Member entity
 */
export interface MemberEntityInput {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The organization name */
  organizationId: string
  /** The role of the member */
  role: MemberEntityInputRole
  /** The user id */
  userId: string
}

/**
 * The plan that the organization is subscribed to
 */
export type OrganizationEntityInputPlan =
  (typeof OrganizationEntityInputPlan)[keyof typeof OrganizationEntityInputPlan]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrganizationEntityInputPlan = {
  BASIC: 'BASIC',
  FREE: 'FREE',
  PREMIUM: 'PREMIUM',
  STANDARD: 'STANDARD',
  UNLIMITED: 'UNLIMITED'
} as const

/**
 * Schema for Organization entity
 */
export interface OrganizationEntityInput {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /**
   * The billing email to use for the organization
   * @nullable
   */
  billingEmail: string | null
  /** The number of credits you have remaining for this organization */
  credits: number
  /**
   * The URL of the organization logo
   * @nullable
   */
  logo: string | null
  /**
   * The metadata for the organization, used for custom data
   * @nullable
   */
  metadata: string | null
  /** The name of the organization */
  name: string
  /** The plan that the organization is subscribed to */
  plan: OrganizationEntityInputPlan
  /** The unique slug for the organization, used in URLs */
  slug: string
  /**
   * The Stripe customer ID
   * @nullable
   */
  stripeCustomerId: string | null
}

/**
 * Schema for Session entity
 */
export interface SessionEntityInput {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /**
   * The active organization ID
   * @nullable
   */
  activeOrganizationId: string | null
  /** The expiration date of the session */
  expiresAt: string
  /**
   * The IP address of the session
   * @nullable
   */
  ipAddress: string | null
  /** The session token */
  token: string
  /**
   * The user agent of the session
   * @nullable
   */
  userAgent: string | null
  /** The ID of the user associated with the session */
  userId: string
}

/**
 * Schema for User entity
 */
export interface UserEntityInput {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** Whether or not the user is deactivated */
  deactivated?: boolean
  /** The user's e-mail */
  email: string
  /** Whether or not the user's e-mail has been verified */
  emailVerified: boolean
  /**
   * The user's avatar image URL
   * @nullable
   */
  image: string | null
  /**
   * The user's name
   * @minLength 1
   */
  name: string
}

/**
 * Schema for Verification Token entity
 */
export interface VerificationTokenEntityInput {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The expiration date of the token */
  expiresAt: string
  /** The identifier associated with the token */
  identifier: string
  /** The token string */
  value: string
}

export type BadRequestResponseInputError = {
  /** The request is invalid or malformed. */
  detail: string
  /** 400 */
  status: string
  /** Bad Request */
  title: string
}

/**
 * Schema for 400 Bad Request response
 */
export interface BadRequestResponseInput {
  error: BadRequestResponseInputError
}

export type ConflictResponseInputError = {
  /** The request conflicts with the current state of the resource. */
  detail: string
  /** 409 */
  status: string
  /** Conflict */
  title: string
}

/**
 * Schema for 409 Conflict response
 */
export interface ConflictResponseInput {
  error: ConflictResponseInputError
}

export type ForbiddenResponseInputError = {
  /** You do not have permission to access this resource. */
  detail: string
  /** 403 */
  status: string
  /** Forbidden */
  title: string
}

/**
 * Schema for 403 Forbidden response
 */
export interface ForbiddenResponseInput {
  error: ForbiddenResponseInputError
}

export type InternalServerErrorResponseInputError = {
  /** An unexpected error occurred on the server. */
  detail: string
  /** 500 */
  status: string
  /** Internal Server Error */
  title: string
}

/**
 * Schema for 500 Internal Server Error response
 */
export interface InternalServerErrorResponseInput {
  error: InternalServerErrorResponseInputError
}

/**
 * Schema for 204 No Content response
 */
export type NoContentResponseInput = null

export type NotFoundResponseInputError = {
  /** The requested resource could not be found. */
  detail: string
  /** 404 */
  status: string
  /** Not Found */
  title: string
}

/**
 * Schema for 404 Not Found response
 */
export interface NotFoundResponseInput {
  error: NotFoundResponseInputError
}

export type UnauthorizedResponseInputError = {
  /** You are not authrozied to reach this endpoint. */
  detail: string
  /** 401 */
  status: string
  /** Unauthorized */
  title: string
}

/**
 * Schema for 401 Unauthorized response
 */
export interface UnauthorizedResponseInput {
  error: UnauthorizedResponseInputError
}

export type ValidationErrorResponseInputErrorDetailsItem = {
  /** username, email */
  field: string
  /** Username is required., Email format is invalid. */
  message: string
  /** john_doe, invalid-email */
  value?: string
}

export type ValidationErrorResponseInputError = {
  /** Validation failed for one or more fields. */
  detail: string
  details: ValidationErrorResponseInputErrorDetailsItem[]
  /** 422 */
  status: string
  /** Validation Error */
  title: string
}

/**
 * Schema for 422 Validation Error response
 */
export interface ValidationErrorResponseInput {
  error: ValidationErrorResponseInputError
}

export type FilterValueInputAnyOfItem = string | number | boolean

export type FilterValueInputAnyOfTwoFrom = string | number

export type FilterValueInputAnyOfTwoTo = string | number

export type FilterValueInputAnyOfTwo = {
  from: FilterValueInputAnyOfTwoFrom
  to: FilterValueInputAnyOfTwoTo
}

export type FilterValueInputAnyOfFiveUnit =
  (typeof FilterValueInputAnyOfFiveUnit)[keyof typeof FilterValueInputAnyOfFiveUnit]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FilterValueInputAnyOfFiveUnit = {
  days: 'days',
  weeks: 'weeks',
  months: 'months',
  years: 'years'
} as const

export type FilterValueInputAnyOfFive = {
  unit: FilterValueInputAnyOfFiveUnit
  value: number
}

/**
 * Value for filter conditions, supports strings, numbers, booleans, arrays, ranges, and relative dates
 */
export type FilterValueInput =
  | string
  | number
  | boolean
  | FilterValueInputAnyOfItem[]
  | FilterValueInputAnyOfTwo
  | FilterValueInputAnyOfFive

/**
 * Supported filter operations
 */
export type OperatorInput = (typeof OperatorInput)[keyof typeof OperatorInput]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OperatorInput = {
  eq: 'eq',
  ne: 'ne',
  lt: 'lt',
  lte: 'lte',
  gt: 'gt',
  gte: 'gte',
  iLike: 'iLike',
  notILike: 'notILike',
  inArray: 'inArray',
  notInArray: 'notInArray',
  isEmpty: 'isEmpty',
  isNotEmpty: 'isNotEmpty',
  isBetween: 'isBetween',
  isRelativeToToday: 'isRelativeToToday'
} as const

/**
 * A single filter condition with field, operator, and value
 */
export interface FilterConditionInput {
  field: string
  operator: OperatorInput
  type: 'condition'
  value: FilterValueInput
}

export type FilterNodeInputAnyOfOperator =
  (typeof FilterNodeInputAnyOfOperator)[keyof typeof FilterNodeInputAnyOfOperator]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FilterNodeInputAnyOfOperator = {
  and: 'and',
  or: 'or'
} as const

/**
 * A logical group of filter conditions or other groups
 */
export type FilterNodeInputAnyOf = {
  children: FilterNodeInput[]
  operator: FilterNodeInputAnyOfOperator
  type: 'group'
}

/**
 * A recursive filter node that can be a condition or group
 */
export type FilterNodeInput = FilterConditionInput | FilterNodeInputAnyOf

/**
 * Pagination configuration with page number and size
 */
export interface PageInput {
  /**
   * @minimum 1
   * @maximum 9007199254740991
   */
  number?: number
  /**
   * @minimum 1
   * @maximum 100
   */
  size?: number
}

export type SortInputOrder =
  (typeof SortInputOrder)[keyof typeof SortInputOrder]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SortInputOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

/**
 * Sorting configuration with field and order
 */
export interface SortInput {
  field: string
  order: SortInputOrder
}

/**
 * Complete search query with nested filters, pagination, and sorting
 */
export interface SearchQueryInput {
  filter?: FilterNodeInput
  page?: PageInput
  sort?: SortInput[]
}

/**
 * Schema for Artifact entity
 */
export interface ArtifactEntityInput {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The number of credits required to access this artifact. This is used for metering and billing purposes. */
  credits: number
  /**
   * The artifact's description
   * @nullable
   */
  description: string | null
  /** The MIME type of the artifact, e.g. image/png */
  mimeType: string
  /**
   * The name of the artifact, used for display purposes
   * @nullable
   */
  name: string | null
  /** The organization name */
  organizationId: string
  /**
   * The URL of the preview image for this artifact. This is used for displaying a thumbnail in the UI.
   * @nullable
   */
  previewImage: string | null
  /**
   * The ID of the run that produced this artifact, if applicable
   * @nullable
   */
  producerId: string | null
  /**
   * The artifact text
   * @nullable
   */
  text: string | null
  /**
   * The artifact URL
   * @nullable
   */
  url: string | null
}

/**
 * Schema for Label entity
 */
export interface LabelEntityInput {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The name of the label */
  name: string
  /** The organization name */
  organizationId: string
}

export type PipelineStepEntityInputDependentsItem = {
  pipelineStepId: string
}

export type PipelineStepEntityInputPrerequisitesItem = {
  pipelineStepId: string
}

/**
 * Schema for Pipeline Step entity
 */
export interface PipelineStepEntityInput {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  dependents: PipelineStepEntityInputDependentsItem[]
  pipelineId: string
  prerequisites: PipelineStepEntityInputPrerequisitesItem[]
  toolId: string
}

/**
 * Schema for Pipeline entity
 */
export interface PipelineEntityInput {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /**
   * The pipeline description
   * @nullable
   */
  description: string | null
  /**
   * The pipeline name
   * @nullable
   */
  name: string | null
  /** The organization id */
  organizationId: string
}

export type RunEntityInputStatus =
  (typeof RunEntityInputStatus)[keyof typeof RunEntityInputStatus]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RunEntityInputStatus = {
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  PROCESSING: 'PROCESSING',
  QUEUED: 'QUEUED'
} as const

/**
 * Schema for Run entity
 */
export interface RunEntityInput {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /**
   * The timestamp when the run completed
   * @nullable
   */
  completedAt: string | null
  /**
   * The error message
   * @nullable
   */
  error: string | null
  /** The organization name */
  organizationId: string
  /**
   * The pipeline ID associated with the run
   * @nullable
   */
  pipelineId: string | null
  /** The percent progress of the run */
  progress: number
  /**
   * The timestamp when the run started
   * @nullable
   */
  startedAt: string | null
  status: RunEntityInputStatus
  /** The tool ID associated with the run */
  toolId: string
}

/**
 * Schema for Tool entity
 */
export interface ToolEntityInput {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The tool description */
  description: string
  /** The MIME type of the input for the tool, e.g. text/plain */
  inputMimeType: string
  /** The name of the tool */
  name: string
  /** The organization name */
  organizationId: string
  /** The MIME type of the output for the tool, e.g. text/plain */
  outputMimeType: string
}

/**
 * Schema for File entity
 */
export interface FileEntityInput {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** Whether or not this is a directory */
  isDir: boolean
  /** The original name of the file */
  organizationId: string
  /** The path to the item */
  path: string
  /** The read-only URL that you can use to download the file from secure storage */
  read?: string
  /** The size of the item in bytes */
  size: number
  /** The write-only URL that you can use to upload the file to secure storage */
  write?: string
}

export type AccountsFilterNodeInputAnyOfField =
  (typeof AccountsFilterNodeInputAnyOfField)[keyof typeof AccountsFilterNodeInputAnyOfField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountsFilterNodeInputAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  accessToken: 'accessToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  accountId: 'accountId',
  idToken: 'idToken',
  password: 'password',
  providerId: 'providerId',
  refreshToken: 'refreshToken',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  userId: 'userId'
} as const

export type AccountsFilterNodeInputAnyOf = {
  field: AccountsFilterNodeInputAnyOfField
  operator: OperatorInput
  type: 'condition'
  value: FilterValueInput
}

export type AccountsFilterNodeInputAnyOfThreeOperator =
  (typeof AccountsFilterNodeInputAnyOfThreeOperator)[keyof typeof AccountsFilterNodeInputAnyOfThreeOperator]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountsFilterNodeInputAnyOfThreeOperator = {
  and: 'and',
  or: 'or'
} as const

export type AccountsFilterNodeInputAnyOfThree = {
  children: AccountsFilterNodeInput[]
  operator: AccountsFilterNodeInputAnyOfThreeOperator
  type: 'group'
}

/**
 * A recursive filter node for accounts entity that can be a condition or group
 */
export type AccountsFilterNodeInput =
  | AccountsFilterNodeInputAnyOf
  | AccountsFilterNodeInputAnyOfThree

export type AccountsSortInputField =
  (typeof AccountsSortInputField)[keyof typeof AccountsSortInputField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountsSortInputField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  accessToken: 'accessToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  accountId: 'accountId',
  idToken: 'idToken',
  password: 'password',
  providerId: 'providerId',
  refreshToken: 'refreshToken',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  userId: 'userId'
} as const

export type AccountsSortInputOrder =
  (typeof AccountsSortInputOrder)[keyof typeof AccountsSortInputOrder]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountsSortInputOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

/**
 * Sorting configuration for accounts entity with field and order
 */
export interface AccountsSortInput {
  field: AccountsSortInputField
  order: AccountsSortInputOrder
}

export type InvitationsFilterNodeInputAnyOfField =
  (typeof InvitationsFilterNodeInputAnyOfField)[keyof typeof InvitationsFilterNodeInputAnyOfField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvitationsFilterNodeInputAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  email: 'email',
  expiresAt: 'expiresAt',
  inviterId: 'inviterId',
  organizationId: 'organizationId',
  role: 'role',
  status: 'status'
} as const

export type InvitationsFilterNodeInputAnyOf = {
  field: InvitationsFilterNodeInputAnyOfField
  operator: OperatorInput
  type: 'condition'
  value: FilterValueInput
}

export type InvitationsFilterNodeInputAnyOfThreeOperator =
  (typeof InvitationsFilterNodeInputAnyOfThreeOperator)[keyof typeof InvitationsFilterNodeInputAnyOfThreeOperator]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvitationsFilterNodeInputAnyOfThreeOperator = {
  and: 'and',
  or: 'or'
} as const

export type InvitationsFilterNodeInputAnyOfThree = {
  children: InvitationsFilterNodeInput[]
  operator: InvitationsFilterNodeInputAnyOfThreeOperator
  type: 'group'
}

/**
 * A recursive filter node for invitations entity that can be a condition or group
 */
export type InvitationsFilterNodeInput =
  | InvitationsFilterNodeInputAnyOf
  | InvitationsFilterNodeInputAnyOfThree

export type InvitationsSortInputField =
  (typeof InvitationsSortInputField)[keyof typeof InvitationsSortInputField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvitationsSortInputField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  email: 'email',
  expiresAt: 'expiresAt',
  inviterId: 'inviterId',
  organizationId: 'organizationId',
  role: 'role',
  status: 'status'
} as const

export type InvitationsSortInputOrder =
  (typeof InvitationsSortInputOrder)[keyof typeof InvitationsSortInputOrder]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvitationsSortInputOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

/**
 * Sorting configuration for invitations entity with field and order
 */
export interface InvitationsSortInput {
  field: InvitationsSortInputField
  order: InvitationsSortInputOrder
}

export type MembersFilterNodeInputAnyOfField =
  (typeof MembersFilterNodeInputAnyOfField)[keyof typeof MembersFilterNodeInputAnyOfField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MembersFilterNodeInputAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId',
  role: 'role',
  userId: 'userId'
} as const

export type MembersFilterNodeInputAnyOf = {
  field: MembersFilterNodeInputAnyOfField
  operator: OperatorInput
  type: 'condition'
  value: FilterValueInput
}

export type MembersFilterNodeInputAnyOfThreeOperator =
  (typeof MembersFilterNodeInputAnyOfThreeOperator)[keyof typeof MembersFilterNodeInputAnyOfThreeOperator]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MembersFilterNodeInputAnyOfThreeOperator = {
  and: 'and',
  or: 'or'
} as const

export type MembersFilterNodeInputAnyOfThree = {
  children: MembersFilterNodeInput[]
  operator: MembersFilterNodeInputAnyOfThreeOperator
  type: 'group'
}

/**
 * A recursive filter node for members entity that can be a condition or group
 */
export type MembersFilterNodeInput =
  | MembersFilterNodeInputAnyOf
  | MembersFilterNodeInputAnyOfThree

export type MembersSortInputField =
  (typeof MembersSortInputField)[keyof typeof MembersSortInputField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MembersSortInputField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId',
  role: 'role',
  userId: 'userId'
} as const

export type MembersSortInputOrder =
  (typeof MembersSortInputOrder)[keyof typeof MembersSortInputOrder]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MembersSortInputOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

/**
 * Sorting configuration for members entity with field and order
 */
export interface MembersSortInput {
  field: MembersSortInputField
  order: MembersSortInputOrder
}

export type OrganizationsFilterNodeInputAnyOfField =
  (typeof OrganizationsFilterNodeInputAnyOfField)[keyof typeof OrganizationsFilterNodeInputAnyOfField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrganizationsFilterNodeInputAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  billingEmail: 'billingEmail',
  credits: 'credits',
  logo: 'logo',
  metadata: 'metadata',
  name: 'name',
  plan: 'plan',
  slug: 'slug',
  stripeCustomerId: 'stripeCustomerId'
} as const

export type OrganizationsFilterNodeInputAnyOf = {
  field: OrganizationsFilterNodeInputAnyOfField
  operator: OperatorInput
  type: 'condition'
  value: FilterValueInput
}

export type OrganizationsFilterNodeInputAnyOfThreeOperator =
  (typeof OrganizationsFilterNodeInputAnyOfThreeOperator)[keyof typeof OrganizationsFilterNodeInputAnyOfThreeOperator]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrganizationsFilterNodeInputAnyOfThreeOperator = {
  and: 'and',
  or: 'or'
} as const

export type OrganizationsFilterNodeInputAnyOfThree = {
  children: OrganizationsFilterNodeInput[]
  operator: OrganizationsFilterNodeInputAnyOfThreeOperator
  type: 'group'
}

/**
 * A recursive filter node for organizations entity that can be a condition or group
 */
export type OrganizationsFilterNodeInput =
  | OrganizationsFilterNodeInputAnyOf
  | OrganizationsFilterNodeInputAnyOfThree

export type OrganizationsSortInputField =
  (typeof OrganizationsSortInputField)[keyof typeof OrganizationsSortInputField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrganizationsSortInputField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  billingEmail: 'billingEmail',
  credits: 'credits',
  logo: 'logo',
  metadata: 'metadata',
  name: 'name',
  plan: 'plan',
  slug: 'slug',
  stripeCustomerId: 'stripeCustomerId'
} as const

export type OrganizationsSortInputOrder =
  (typeof OrganizationsSortInputOrder)[keyof typeof OrganizationsSortInputOrder]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrganizationsSortInputOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

/**
 * Sorting configuration for organizations entity with field and order
 */
export interface OrganizationsSortInput {
  field: OrganizationsSortInputField
  order: OrganizationsSortInputOrder
}

export type SessionsFilterNodeInputAnyOfField =
  (typeof SessionsFilterNodeInputAnyOfField)[keyof typeof SessionsFilterNodeInputAnyOfField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SessionsFilterNodeInputAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  activeOrganizationId: 'activeOrganizationId',
  expiresAt: 'expiresAt',
  ipAddress: 'ipAddress',
  token: 'token',
  userAgent: 'userAgent',
  userId: 'userId'
} as const

export type SessionsFilterNodeInputAnyOf = {
  field: SessionsFilterNodeInputAnyOfField
  operator: OperatorInput
  type: 'condition'
  value: FilterValueInput
}

export type SessionsFilterNodeInputAnyOfThreeOperator =
  (typeof SessionsFilterNodeInputAnyOfThreeOperator)[keyof typeof SessionsFilterNodeInputAnyOfThreeOperator]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SessionsFilterNodeInputAnyOfThreeOperator = {
  and: 'and',
  or: 'or'
} as const

export type SessionsFilterNodeInputAnyOfThree = {
  children: SessionsFilterNodeInput[]
  operator: SessionsFilterNodeInputAnyOfThreeOperator
  type: 'group'
}

/**
 * A recursive filter node for sessions entity that can be a condition or group
 */
export type SessionsFilterNodeInput =
  | SessionsFilterNodeInputAnyOf
  | SessionsFilterNodeInputAnyOfThree

export type SessionsSortInputField =
  (typeof SessionsSortInputField)[keyof typeof SessionsSortInputField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SessionsSortInputField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  activeOrganizationId: 'activeOrganizationId',
  expiresAt: 'expiresAt',
  ipAddress: 'ipAddress',
  token: 'token',
  userAgent: 'userAgent',
  userId: 'userId'
} as const

export type SessionsSortInputOrder =
  (typeof SessionsSortInputOrder)[keyof typeof SessionsSortInputOrder]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SessionsSortInputOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

/**
 * Sorting configuration for sessions entity with field and order
 */
export interface SessionsSortInput {
  field: SessionsSortInputField
  order: SessionsSortInputOrder
}

export type UsersFilterNodeInputAnyOfField =
  (typeof UsersFilterNodeInputAnyOfField)[keyof typeof UsersFilterNodeInputAnyOfField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsersFilterNodeInputAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  deactivated: 'deactivated',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  name: 'name'
} as const

export type UsersFilterNodeInputAnyOf = {
  field: UsersFilterNodeInputAnyOfField
  operator: OperatorInput
  type: 'condition'
  value: FilterValueInput
}

export type UsersFilterNodeInputAnyOfThreeOperator =
  (typeof UsersFilterNodeInputAnyOfThreeOperator)[keyof typeof UsersFilterNodeInputAnyOfThreeOperator]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsersFilterNodeInputAnyOfThreeOperator = {
  and: 'and',
  or: 'or'
} as const

export type UsersFilterNodeInputAnyOfThree = {
  children: UsersFilterNodeInput[]
  operator: UsersFilterNodeInputAnyOfThreeOperator
  type: 'group'
}

/**
 * A recursive filter node for users entity that can be a condition or group
 */
export type UsersFilterNodeInput =
  | UsersFilterNodeInputAnyOf
  | UsersFilterNodeInputAnyOfThree

export type UsersSortInputField =
  (typeof UsersSortInputField)[keyof typeof UsersSortInputField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsersSortInputField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  deactivated: 'deactivated',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  name: 'name'
} as const

export type UsersSortInputOrder =
  (typeof UsersSortInputOrder)[keyof typeof UsersSortInputOrder]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsersSortInputOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

/**
 * Sorting configuration for users entity with field and order
 */
export interface UsersSortInput {
  field: UsersSortInputField
  order: UsersSortInputOrder
}

export type ArtifactsFilterNodeInputAnyOfField =
  (typeof ArtifactsFilterNodeInputAnyOfField)[keyof typeof ArtifactsFilterNodeInputAnyOfField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArtifactsFilterNodeInputAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  credits: 'credits',
  description: 'description',
  mimeType: 'mimeType',
  name: 'name',
  organizationId: 'organizationId',
  previewImage: 'previewImage',
  producerId: 'producerId',
  text: 'text',
  url: 'url'
} as const

export type ArtifactsFilterNodeInputAnyOf = {
  field: ArtifactsFilterNodeInputAnyOfField
  operator: OperatorInput
  type: 'condition'
  value: FilterValueInput
}

export type ArtifactsFilterNodeInputAnyOfThreeOperator =
  (typeof ArtifactsFilterNodeInputAnyOfThreeOperator)[keyof typeof ArtifactsFilterNodeInputAnyOfThreeOperator]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArtifactsFilterNodeInputAnyOfThreeOperator = {
  and: 'and',
  or: 'or'
} as const

export type ArtifactsFilterNodeInputAnyOfThree = {
  children: ArtifactsFilterNodeInput[]
  operator: ArtifactsFilterNodeInputAnyOfThreeOperator
  type: 'group'
}

/**
 * A recursive filter node for artifacts entity that can be a condition or group
 */
export type ArtifactsFilterNodeInput =
  | ArtifactsFilterNodeInputAnyOf
  | ArtifactsFilterNodeInputAnyOfThree

export type ArtifactsSortInputField =
  (typeof ArtifactsSortInputField)[keyof typeof ArtifactsSortInputField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArtifactsSortInputField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  credits: 'credits',
  description: 'description',
  mimeType: 'mimeType',
  name: 'name',
  organizationId: 'organizationId',
  previewImage: 'previewImage',
  producerId: 'producerId',
  text: 'text',
  url: 'url'
} as const

export type ArtifactsSortInputOrder =
  (typeof ArtifactsSortInputOrder)[keyof typeof ArtifactsSortInputOrder]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArtifactsSortInputOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

/**
 * Sorting configuration for artifacts entity with field and order
 */
export interface ArtifactsSortInput {
  field: ArtifactsSortInputField
  order: ArtifactsSortInputOrder
}

export type LabelsFilterNodeInputAnyOfField =
  (typeof LabelsFilterNodeInputAnyOfField)[keyof typeof LabelsFilterNodeInputAnyOfField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LabelsFilterNodeInputAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  name: 'name',
  organizationId: 'organizationId'
} as const

export type LabelsFilterNodeInputAnyOf = {
  field: LabelsFilterNodeInputAnyOfField
  operator: OperatorInput
  type: 'condition'
  value: FilterValueInput
}

export type LabelsFilterNodeInputAnyOfThreeOperator =
  (typeof LabelsFilterNodeInputAnyOfThreeOperator)[keyof typeof LabelsFilterNodeInputAnyOfThreeOperator]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LabelsFilterNodeInputAnyOfThreeOperator = {
  and: 'and',
  or: 'or'
} as const

export type LabelsFilterNodeInputAnyOfThree = {
  children: LabelsFilterNodeInput[]
  operator: LabelsFilterNodeInputAnyOfThreeOperator
  type: 'group'
}

/**
 * A recursive filter node for labels entity that can be a condition or group
 */
export type LabelsFilterNodeInput =
  | LabelsFilterNodeInputAnyOf
  | LabelsFilterNodeInputAnyOfThree

export type LabelsSortInputField =
  (typeof LabelsSortInputField)[keyof typeof LabelsSortInputField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LabelsSortInputField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  name: 'name',
  organizationId: 'organizationId'
} as const

export type LabelsSortInputOrder =
  (typeof LabelsSortInputOrder)[keyof typeof LabelsSortInputOrder]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LabelsSortInputOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

/**
 * Sorting configuration for labels entity with field and order
 */
export interface LabelsSortInput {
  field: LabelsSortInputField
  order: LabelsSortInputOrder
}

export type PipelinesFilterNodeInputAnyOfField =
  (typeof PipelinesFilterNodeInputAnyOfField)[keyof typeof PipelinesFilterNodeInputAnyOfField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PipelinesFilterNodeInputAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  description: 'description',
  name: 'name',
  organizationId: 'organizationId'
} as const

export type PipelinesFilterNodeInputAnyOf = {
  field: PipelinesFilterNodeInputAnyOfField
  operator: OperatorInput
  type: 'condition'
  value: FilterValueInput
}

export type PipelinesFilterNodeInputAnyOfThreeOperator =
  (typeof PipelinesFilterNodeInputAnyOfThreeOperator)[keyof typeof PipelinesFilterNodeInputAnyOfThreeOperator]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PipelinesFilterNodeInputAnyOfThreeOperator = {
  and: 'and',
  or: 'or'
} as const

export type PipelinesFilterNodeInputAnyOfThree = {
  children: PipelinesFilterNodeInput[]
  operator: PipelinesFilterNodeInputAnyOfThreeOperator
  type: 'group'
}

/**
 * A recursive filter node for pipelines entity that can be a condition or group
 */
export type PipelinesFilterNodeInput =
  | PipelinesFilterNodeInputAnyOf
  | PipelinesFilterNodeInputAnyOfThree

export type PipelinesSortInputField =
  (typeof PipelinesSortInputField)[keyof typeof PipelinesSortInputField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PipelinesSortInputField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  description: 'description',
  name: 'name',
  organizationId: 'organizationId'
} as const

export type PipelinesSortInputOrder =
  (typeof PipelinesSortInputOrder)[keyof typeof PipelinesSortInputOrder]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PipelinesSortInputOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

/**
 * Sorting configuration for pipelines entity with field and order
 */
export interface PipelinesSortInput {
  field: PipelinesSortInputField
  order: PipelinesSortInputOrder
}

export type RunsFilterNodeInputAnyOfField =
  (typeof RunsFilterNodeInputAnyOfField)[keyof typeof RunsFilterNodeInputAnyOfField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RunsFilterNodeInputAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt',
  error: 'error',
  organizationId: 'organizationId',
  pipelineId: 'pipelineId',
  progress: 'progress',
  startedAt: 'startedAt',
  status: 'status',
  toolId: 'toolId'
} as const

export type RunsFilterNodeInputAnyOf = {
  field: RunsFilterNodeInputAnyOfField
  operator: OperatorInput
  type: 'condition'
  value: FilterValueInput
}

export type RunsFilterNodeInputAnyOfThreeOperator =
  (typeof RunsFilterNodeInputAnyOfThreeOperator)[keyof typeof RunsFilterNodeInputAnyOfThreeOperator]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RunsFilterNodeInputAnyOfThreeOperator = {
  and: 'and',
  or: 'or'
} as const

export type RunsFilterNodeInputAnyOfThree = {
  children: RunsFilterNodeInput[]
  operator: RunsFilterNodeInputAnyOfThreeOperator
  type: 'group'
}

/**
 * A recursive filter node for runs entity that can be a condition or group
 */
export type RunsFilterNodeInput =
  | RunsFilterNodeInputAnyOf
  | RunsFilterNodeInputAnyOfThree

export type RunsSortInputField =
  (typeof RunsSortInputField)[keyof typeof RunsSortInputField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RunsSortInputField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt',
  error: 'error',
  organizationId: 'organizationId',
  pipelineId: 'pipelineId',
  progress: 'progress',
  startedAt: 'startedAt',
  status: 'status',
  toolId: 'toolId'
} as const

export type RunsSortInputOrder =
  (typeof RunsSortInputOrder)[keyof typeof RunsSortInputOrder]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RunsSortInputOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

/**
 * Sorting configuration for runs entity with field and order
 */
export interface RunsSortInput {
  field: RunsSortInputField
  order: RunsSortInputOrder
}

export type ToolsFilterNodeInputAnyOfField =
  (typeof ToolsFilterNodeInputAnyOfField)[keyof typeof ToolsFilterNodeInputAnyOfField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ToolsFilterNodeInputAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  description: 'description',
  inputMimeType: 'inputMimeType',
  name: 'name',
  organizationId: 'organizationId',
  outputMimeType: 'outputMimeType'
} as const

export type ToolsFilterNodeInputAnyOf = {
  field: ToolsFilterNodeInputAnyOfField
  operator: OperatorInput
  type: 'condition'
  value: FilterValueInput
}

export type ToolsFilterNodeInputAnyOfThreeOperator =
  (typeof ToolsFilterNodeInputAnyOfThreeOperator)[keyof typeof ToolsFilterNodeInputAnyOfThreeOperator]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ToolsFilterNodeInputAnyOfThreeOperator = {
  and: 'and',
  or: 'or'
} as const

export type ToolsFilterNodeInputAnyOfThree = {
  children: ToolsFilterNodeInput[]
  operator: ToolsFilterNodeInputAnyOfThreeOperator
  type: 'group'
}

/**
 * A recursive filter node for tools entity that can be a condition or group
 */
export type ToolsFilterNodeInput =
  | ToolsFilterNodeInputAnyOf
  | ToolsFilterNodeInputAnyOfThree

export type ToolsSortInputField =
  (typeof ToolsSortInputField)[keyof typeof ToolsSortInputField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ToolsSortInputField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  description: 'description',
  inputMimeType: 'inputMimeType',
  name: 'name',
  organizationId: 'organizationId',
  outputMimeType: 'outputMimeType'
} as const

export type ToolsSortInputOrder =
  (typeof ToolsSortInputOrder)[keyof typeof ToolsSortInputOrder]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ToolsSortInputOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

/**
 * Sorting configuration for tools entity with field and order
 */
export interface ToolsSortInput {
  field: ToolsSortInputField
  order: ToolsSortInputOrder
}

/**
 * Schema for Account entity
 */
export interface AccountEntity {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /**
   * The access token
   * @nullable
   */
  accessToken: string | null
  /**
   * The expiration date
   * @nullable
   */
  accessTokenExpiresAt: string | null
  /** The unique identifier for the account */
  accountId: string
  /**
   * The ID token
   * @nullable
   */
  idToken: string | null
  /**
   * The hashed password for local authentication
   * @nullable
   */
  password: string | null
  /** The provider ID associated with the auth provider */
  providerId: string
  /**
   * The refresh token
   * @nullable
   */
  refreshToken: string | null
  /**
   * The refresh token expiration date
   * @nullable
   */
  refreshTokenExpiresAt: string | null
  /**
   * The scope of the access token
   * @nullable
   */
  scope: string | null
  /** The user ID associated with the auth provider */
  userId: string
}

/**
 * Schema for API Token entity
 */
export interface ApiTokenEntity {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** Whether the API token is enabled or not */
  enabled: boolean
  /**
   * The date and time when the API token expires
   * @nullable
   */
  expiresAt: string | null
  /** The API token key. This will only be shown once */
  key: string
  /**
   * The date and time when the API token was last refilled
   * @nullable
   */
  lastRefill: string | null
  /**
   * The date and time when the API token was last used
   * @nullable
   */
  lastRequest: string | null
  /**
   * The metadata for the API token, used for custom data
   * @nullable
   */
  metadata: string | null
  /**
   * The name of the API token
   * @nullable
   */
  name: string | null
  /**
   * The name of the API token
   * @nullable
   */
  permissions: string | null
  /**
   * TThe prefix for the API token, used for routing requests
   * @nullable
   */
  prefix: string | null
  /** Whether the API token has rate limiting enabled */
  rateLimitEnabled: boolean
  /**
   * The maximum number of requests allowed per time window
   * @nullable
   */
  rateLimitMax: number | null
  /**
   * The time window in seconds for the rate limit
   * @nullable
   */
  rateLimitTimeWindow: number | null
  /**
   * The amount of requests to refill the token with
   * @nullable
   */
  refillAmount: number | null
  /**
   * The interval in seconds to refill the token
   * @nullable
   */
  refillInterval: number | null
  /**
   * The number of requests remaining for the token
   * @nullable
   */
  remaining: number | null
  /** The number of requests made with the token */
  requestCount: number
  /**
   * The number of requests remaining for the token
   * @nullable
   */
  start: string | null
  /** The id of the user the token belongs to */
  userId: string
}

/**
 * The role of the invitation
 */
export type InvitationEntityRole =
  (typeof InvitationEntityRole)[keyof typeof InvitationEntityRole]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvitationEntityRole = {
  admin: 'admin',
  owner: 'owner',
  member: 'member'
} as const

/**
 * Schema for Invitation entity
 */
export interface InvitationEntity {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The email of the invitated user */
  email: string
  /** The date and time when the invitation expires */
  expiresAt: string
  /** The user id of the inviter */
  inviterId: string
  /** The name of the organization the token belongs to */
  organizationId: string
  /** The role of the invitation */
  role: InvitationEntityRole
  /** The status of the invitation, e.g., pending, accepted, declined */
  status: string
}

/**
 * The role of the member
 */
export type MemberEntityRole =
  (typeof MemberEntityRole)[keyof typeof MemberEntityRole]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MemberEntityRole = {
  admin: 'admin',
  owner: 'owner',
  member: 'member'
} as const

/**
 * Schema for Member entity
 */
export interface MemberEntity {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The organization name */
  organizationId: string
  /** The role of the member */
  role: MemberEntityRole
  /** The user id */
  userId: string
}

/**
 * The plan that the organization is subscribed to
 */
export type OrganizationEntityPlan =
  (typeof OrganizationEntityPlan)[keyof typeof OrganizationEntityPlan]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrganizationEntityPlan = {
  BASIC: 'BASIC',
  FREE: 'FREE',
  PREMIUM: 'PREMIUM',
  STANDARD: 'STANDARD',
  UNLIMITED: 'UNLIMITED'
} as const

/**
 * Schema for Organization entity
 */
export interface OrganizationEntity {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /**
   * The billing email to use for the organization
   * @nullable
   */
  billingEmail: string | null
  /** The number of credits you have remaining for this organization */
  credits: number
  /**
   * The URL of the organization logo
   * @nullable
   */
  logo: string | null
  /**
   * The metadata for the organization, used for custom data
   * @nullable
   */
  metadata: string | null
  /** The name of the organization */
  name: string
  /** The plan that the organization is subscribed to */
  plan: OrganizationEntityPlan
  /** The unique slug for the organization, used in URLs */
  slug: string
  /**
   * The Stripe customer ID
   * @nullable
   */
  stripeCustomerId: string | null
}

/**
 * Schema for Session entity
 */
export interface SessionEntity {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /**
   * The active organization ID
   * @nullable
   */
  activeOrganizationId: string | null
  /** The expiration date of the session */
  expiresAt: string
  /**
   * The IP address of the session
   * @nullable
   */
  ipAddress: string | null
  /** The session token */
  token: string
  /**
   * The user agent of the session
   * @nullable
   */
  userAgent: string | null
  /** The ID of the user associated with the session */
  userId: string
}

/**
 * Schema for User entity
 */
export interface UserEntity {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** Whether or not the user is deactivated */
  deactivated: boolean
  /** The user's e-mail */
  email: string
  /** Whether or not the user's e-mail has been verified */
  emailVerified: boolean
  /**
   * The user's avatar image URL
   * @nullable
   */
  image: string | null
  /**
   * The user's name
   * @minLength 1
   */
  name: string
}

/**
 * Schema for Verification Token entity
 */
export interface VerificationTokenEntity {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The expiration date of the token */
  expiresAt: string
  /** The identifier associated with the token */
  identifier: string
  /** The token string */
  value: string
}

export type BadRequestResponseError = {
  /** The request is invalid or malformed. */
  detail: string
  /** 400 */
  status: string
  /** Bad Request */
  title: string
}

/**
 * Schema for 400 Bad Request response
 */
export interface BadRequestResponse {
  error: BadRequestResponseError
}

export type ConflictResponseError = {
  /** The request conflicts with the current state of the resource. */
  detail: string
  /** 409 */
  status: string
  /** Conflict */
  title: string
}

/**
 * Schema for 409 Conflict response
 */
export interface ConflictResponse {
  error: ConflictResponseError
}

export type ForbiddenResponseError = {
  /** You do not have permission to access this resource. */
  detail: string
  /** 403 */
  status: string
  /** Forbidden */
  title: string
}

/**
 * Schema for 403 Forbidden response
 */
export interface ForbiddenResponse {
  error: ForbiddenResponseError
}

export type InternalServerErrorResponseError = {
  /** An unexpected error occurred on the server. */
  detail: string
  /** 500 */
  status: string
  /** Internal Server Error */
  title: string
}

/**
 * Schema for 500 Internal Server Error response
 */
export interface InternalServerErrorResponse {
  error: InternalServerErrorResponseError
}

/**
 * Schema for 204 No Content response
 */
export type NoContentResponse = null

export type NotFoundResponseError = {
  /** The requested resource could not be found. */
  detail: string
  /** 404 */
  status: string
  /** Not Found */
  title: string
}

/**
 * Schema for 404 Not Found response
 */
export interface NotFoundResponse {
  error: NotFoundResponseError
}

export type UnauthorizedResponseError = {
  /** You are not authrozied to reach this endpoint. */
  detail: string
  /** 401 */
  status: string
  /** Unauthorized */
  title: string
}

/**
 * Schema for 401 Unauthorized response
 */
export interface UnauthorizedResponse {
  error: UnauthorizedResponseError
}

export type ValidationErrorResponseErrorDetailsItem = {
  /** username, email */
  field: string
  /** Username is required., Email format is invalid. */
  message: string
  /** john_doe, invalid-email */
  value?: string
}

export type ValidationErrorResponseError = {
  /** Validation failed for one or more fields. */
  detail: string
  details: ValidationErrorResponseErrorDetailsItem[]
  /** 422 */
  status: string
  /** Validation Error */
  title: string
}

/**
 * Schema for 422 Validation Error response
 */
export interface ValidationErrorResponse {
  error: ValidationErrorResponseError
}

export type FilterValueAnyOfItem = string | number | boolean

export type FilterValueAnyOfTwoFrom = string | number

export type FilterValueAnyOfTwoTo = string | number

export type FilterValueAnyOfTwo = {
  from: FilterValueAnyOfTwoFrom
  to: FilterValueAnyOfTwoTo
}

export type FilterValueAnyOfFiveUnit =
  (typeof FilterValueAnyOfFiveUnit)[keyof typeof FilterValueAnyOfFiveUnit]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FilterValueAnyOfFiveUnit = {
  days: 'days',
  weeks: 'weeks',
  months: 'months',
  years: 'years'
} as const

export type FilterValueAnyOfFive = {
  unit: FilterValueAnyOfFiveUnit
  value: number
}

/**
 * Value for filter conditions, supports strings, numbers, booleans, arrays, ranges, and relative dates
 */
export type FilterValue =
  | string
  | number
  | boolean
  | FilterValueAnyOfItem[]
  | FilterValueAnyOfTwo
  | FilterValueAnyOfFive

/**
 * Supported filter operations
 */
export type Operator = (typeof Operator)[keyof typeof Operator]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Operator = {
  eq: 'eq',
  ne: 'ne',
  lt: 'lt',
  lte: 'lte',
  gt: 'gt',
  gte: 'gte',
  iLike: 'iLike',
  notILike: 'notILike',
  inArray: 'inArray',
  notInArray: 'notInArray',
  isEmpty: 'isEmpty',
  isNotEmpty: 'isNotEmpty',
  isBetween: 'isBetween',
  isRelativeToToday: 'isRelativeToToday'
} as const

/**
 * A single filter condition with field, operator, and value
 */
export interface FilterCondition {
  field: string
  operator: Operator
  type: 'condition'
  value: FilterValue
}

export type FilterNodeAnyOfOperator =
  (typeof FilterNodeAnyOfOperator)[keyof typeof FilterNodeAnyOfOperator]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FilterNodeAnyOfOperator = {
  and: 'and',
  or: 'or'
} as const

/**
 * A logical group of filter conditions or other groups
 */
export type FilterNodeAnyOf = {
  children: FilterNode[]
  operator: FilterNodeAnyOfOperator
  type: 'group'
}

/**
 * A recursive filter node that can be a condition or group
 */
export type FilterNode = FilterCondition | FilterNodeAnyOf

/**
 * Pagination configuration with page number and size
 */
export interface Page {
  /**
   * @minimum 1
   * @maximum 9007199254740991
   */
  number?: number
  /**
   * @minimum 1
   * @maximum 100
   */
  size?: number
}

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

/**
 * Sorting configuration with field and order
 */
export interface Sort {
  field: string
  order: SortOrder
}

/**
 * Complete search query with nested filters, pagination, and sorting
 */
export interface SearchQuery {
  filter?: FilterNode
  page?: Page
  sort?: Sort[]
}

/**
 * Schema for Artifact entity
 */
export interface ArtifactEntity {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The number of credits required to access this artifact. This is used for metering and billing purposes. */
  credits: number
  /**
   * The artifact's description
   * @nullable
   */
  description: string | null
  /** The MIME type of the artifact, e.g. image/png */
  mimeType: string
  /**
   * The name of the artifact, used for display purposes
   * @nullable
   */
  name: string | null
  /** The organization name */
  organizationId: string
  /**
   * The URL of the preview image for this artifact. This is used for displaying a thumbnail in the UI.
   * @nullable
   */
  previewImage: string | null
  /**
   * The ID of the run that produced this artifact, if applicable
   * @nullable
   */
  producerId: string | null
  /**
   * The artifact text
   * @nullable
   */
  text: string | null
  /**
   * The artifact URL
   * @nullable
   */
  url: string | null
}

/**
 * Schema for Label entity
 */
export interface LabelEntity {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The name of the label */
  name: string
  /** The organization name */
  organizationId: string
}

export type PipelineStepEntityDependentsItem = {
  pipelineStepId: string
}

export type PipelineStepEntityPrerequisitesItem = {
  pipelineStepId: string
}

/**
 * Schema for Pipeline Step entity
 */
export interface PipelineStepEntity {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  dependents: PipelineStepEntityDependentsItem[]
  pipelineId: string
  prerequisites: PipelineStepEntityPrerequisitesItem[]
  toolId: string
}

/**
 * Schema for Pipeline entity
 */
export interface PipelineEntity {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /**
   * The pipeline description
   * @nullable
   */
  description: string | null
  /**
   * The pipeline name
   * @nullable
   */
  name: string | null
  /** The organization id */
  organizationId: string
}

export type RunEntityStatus =
  (typeof RunEntityStatus)[keyof typeof RunEntityStatus]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RunEntityStatus = {
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  PROCESSING: 'PROCESSING',
  QUEUED: 'QUEUED'
} as const

/**
 * Schema for Run entity
 */
export interface RunEntity {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /**
   * The timestamp when the run completed
   * @nullable
   */
  completedAt: string | null
  /**
   * The error message
   * @nullable
   */
  error: string | null
  /** The organization name */
  organizationId: string
  /**
   * The pipeline ID associated with the run
   * @nullable
   */
  pipelineId: string | null
  /** The percent progress of the run */
  progress: number
  /**
   * The timestamp when the run started
   * @nullable
   */
  startedAt: string | null
  status: RunEntityStatus
  /** The tool ID associated with the run */
  toolId: string
}

/**
 * Schema for Tool entity
 */
export interface ToolEntity {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The tool description */
  description: string
  /** The MIME type of the input for the tool, e.g. text/plain */
  inputMimeType: string
  /** The name of the tool */
  name: string
  /** The organization name */
  organizationId: string
  /** The MIME type of the output for the tool, e.g. text/plain */
  outputMimeType: string
}

/**
 * Schema for File entity
 */
export interface FileEntity {
  /** The date this item was created */
  createdAt: string
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** Whether or not this is a directory */
  isDir: boolean
  /** The original name of the file */
  organizationId: string
  /** The path to the item */
  path: string
  /** The read-only URL that you can use to download the file from secure storage */
  read?: string
  /** The size of the item in bytes */
  size: number
  /** The write-only URL that you can use to upload the file to secure storage */
  write?: string
}

export type AccountsFilterNodeAnyOfField =
  (typeof AccountsFilterNodeAnyOfField)[keyof typeof AccountsFilterNodeAnyOfField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountsFilterNodeAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  accessToken: 'accessToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  accountId: 'accountId',
  idToken: 'idToken',
  password: 'password',
  providerId: 'providerId',
  refreshToken: 'refreshToken',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  userId: 'userId'
} as const

export type AccountsFilterNodeAnyOf = {
  field: AccountsFilterNodeAnyOfField
  operator: Operator
  type: 'condition'
  value: FilterValue
}

export type AccountsFilterNodeAnyOfThreeOperator =
  (typeof AccountsFilterNodeAnyOfThreeOperator)[keyof typeof AccountsFilterNodeAnyOfThreeOperator]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountsFilterNodeAnyOfThreeOperator = {
  and: 'and',
  or: 'or'
} as const

export type AccountsFilterNodeAnyOfThree = {
  children: AccountsFilterNode[]
  operator: AccountsFilterNodeAnyOfThreeOperator
  type: 'group'
}

/**
 * A recursive filter node for accounts entity that can be a condition or group
 */
export type AccountsFilterNode =
  | AccountsFilterNodeAnyOf
  | AccountsFilterNodeAnyOfThree

export type AccountsSortField =
  (typeof AccountsSortField)[keyof typeof AccountsSortField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountsSortField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  accessToken: 'accessToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  accountId: 'accountId',
  idToken: 'idToken',
  password: 'password',
  providerId: 'providerId',
  refreshToken: 'refreshToken',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  userId: 'userId'
} as const

export type AccountsSortOrder =
  (typeof AccountsSortOrder)[keyof typeof AccountsSortOrder]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountsSortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

/**
 * Sorting configuration for accounts entity with field and order
 */
export interface AccountsSort {
  field: AccountsSortField
  order: AccountsSortOrder
}

export type InvitationsFilterNodeAnyOfField =
  (typeof InvitationsFilterNodeAnyOfField)[keyof typeof InvitationsFilterNodeAnyOfField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvitationsFilterNodeAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  email: 'email',
  expiresAt: 'expiresAt',
  inviterId: 'inviterId',
  organizationId: 'organizationId',
  role: 'role',
  status: 'status'
} as const

export type InvitationsFilterNodeAnyOf = {
  field: InvitationsFilterNodeAnyOfField
  operator: Operator
  type: 'condition'
  value: FilterValue
}

export type InvitationsFilterNodeAnyOfThreeOperator =
  (typeof InvitationsFilterNodeAnyOfThreeOperator)[keyof typeof InvitationsFilterNodeAnyOfThreeOperator]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvitationsFilterNodeAnyOfThreeOperator = {
  and: 'and',
  or: 'or'
} as const

export type InvitationsFilterNodeAnyOfThree = {
  children: InvitationsFilterNode[]
  operator: InvitationsFilterNodeAnyOfThreeOperator
  type: 'group'
}

/**
 * A recursive filter node for invitations entity that can be a condition or group
 */
export type InvitationsFilterNode =
  | InvitationsFilterNodeAnyOf
  | InvitationsFilterNodeAnyOfThree

export type InvitationsSortField =
  (typeof InvitationsSortField)[keyof typeof InvitationsSortField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvitationsSortField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  email: 'email',
  expiresAt: 'expiresAt',
  inviterId: 'inviterId',
  organizationId: 'organizationId',
  role: 'role',
  status: 'status'
} as const

export type InvitationsSortOrder =
  (typeof InvitationsSortOrder)[keyof typeof InvitationsSortOrder]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvitationsSortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

/**
 * Sorting configuration for invitations entity with field and order
 */
export interface InvitationsSort {
  field: InvitationsSortField
  order: InvitationsSortOrder
}

export type MembersFilterNodeAnyOfField =
  (typeof MembersFilterNodeAnyOfField)[keyof typeof MembersFilterNodeAnyOfField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MembersFilterNodeAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId',
  role: 'role',
  userId: 'userId'
} as const

export type MembersFilterNodeAnyOf = {
  field: MembersFilterNodeAnyOfField
  operator: Operator
  type: 'condition'
  value: FilterValue
}

export type MembersFilterNodeAnyOfThreeOperator =
  (typeof MembersFilterNodeAnyOfThreeOperator)[keyof typeof MembersFilterNodeAnyOfThreeOperator]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MembersFilterNodeAnyOfThreeOperator = {
  and: 'and',
  or: 'or'
} as const

export type MembersFilterNodeAnyOfThree = {
  children: MembersFilterNode[]
  operator: MembersFilterNodeAnyOfThreeOperator
  type: 'group'
}

/**
 * A recursive filter node for members entity that can be a condition or group
 */
export type MembersFilterNode =
  | MembersFilterNodeAnyOf
  | MembersFilterNodeAnyOfThree

export type MembersSortField =
  (typeof MembersSortField)[keyof typeof MembersSortField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MembersSortField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId',
  role: 'role',
  userId: 'userId'
} as const

export type MembersSortOrder =
  (typeof MembersSortOrder)[keyof typeof MembersSortOrder]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MembersSortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

/**
 * Sorting configuration for members entity with field and order
 */
export interface MembersSort {
  field: MembersSortField
  order: MembersSortOrder
}

export type OrganizationsFilterNodeAnyOfField =
  (typeof OrganizationsFilterNodeAnyOfField)[keyof typeof OrganizationsFilterNodeAnyOfField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrganizationsFilterNodeAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  billingEmail: 'billingEmail',
  credits: 'credits',
  logo: 'logo',
  metadata: 'metadata',
  name: 'name',
  plan: 'plan',
  slug: 'slug',
  stripeCustomerId: 'stripeCustomerId'
} as const

export type OrganizationsFilterNodeAnyOf = {
  field: OrganizationsFilterNodeAnyOfField
  operator: Operator
  type: 'condition'
  value: FilterValue
}

export type OrganizationsFilterNodeAnyOfThreeOperator =
  (typeof OrganizationsFilterNodeAnyOfThreeOperator)[keyof typeof OrganizationsFilterNodeAnyOfThreeOperator]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrganizationsFilterNodeAnyOfThreeOperator = {
  and: 'and',
  or: 'or'
} as const

export type OrganizationsFilterNodeAnyOfThree = {
  children: OrganizationsFilterNode[]
  operator: OrganizationsFilterNodeAnyOfThreeOperator
  type: 'group'
}

/**
 * A recursive filter node for organizations entity that can be a condition or group
 */
export type OrganizationsFilterNode =
  | OrganizationsFilterNodeAnyOf
  | OrganizationsFilterNodeAnyOfThree

export type OrganizationsSortField =
  (typeof OrganizationsSortField)[keyof typeof OrganizationsSortField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrganizationsSortField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  billingEmail: 'billingEmail',
  credits: 'credits',
  logo: 'logo',
  metadata: 'metadata',
  name: 'name',
  plan: 'plan',
  slug: 'slug',
  stripeCustomerId: 'stripeCustomerId'
} as const

export type OrganizationsSortOrder =
  (typeof OrganizationsSortOrder)[keyof typeof OrganizationsSortOrder]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrganizationsSortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

/**
 * Sorting configuration for organizations entity with field and order
 */
export interface OrganizationsSort {
  field: OrganizationsSortField
  order: OrganizationsSortOrder
}

export type SessionsFilterNodeAnyOfField =
  (typeof SessionsFilterNodeAnyOfField)[keyof typeof SessionsFilterNodeAnyOfField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SessionsFilterNodeAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  activeOrganizationId: 'activeOrganizationId',
  expiresAt: 'expiresAt',
  ipAddress: 'ipAddress',
  token: 'token',
  userAgent: 'userAgent',
  userId: 'userId'
} as const

export type SessionsFilterNodeAnyOf = {
  field: SessionsFilterNodeAnyOfField
  operator: Operator
  type: 'condition'
  value: FilterValue
}

export type SessionsFilterNodeAnyOfThreeOperator =
  (typeof SessionsFilterNodeAnyOfThreeOperator)[keyof typeof SessionsFilterNodeAnyOfThreeOperator]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SessionsFilterNodeAnyOfThreeOperator = {
  and: 'and',
  or: 'or'
} as const

export type SessionsFilterNodeAnyOfThree = {
  children: SessionsFilterNode[]
  operator: SessionsFilterNodeAnyOfThreeOperator
  type: 'group'
}

/**
 * A recursive filter node for sessions entity that can be a condition or group
 */
export type SessionsFilterNode =
  | SessionsFilterNodeAnyOf
  | SessionsFilterNodeAnyOfThree

export type SessionsSortField =
  (typeof SessionsSortField)[keyof typeof SessionsSortField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SessionsSortField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  activeOrganizationId: 'activeOrganizationId',
  expiresAt: 'expiresAt',
  ipAddress: 'ipAddress',
  token: 'token',
  userAgent: 'userAgent',
  userId: 'userId'
} as const

export type SessionsSortOrder =
  (typeof SessionsSortOrder)[keyof typeof SessionsSortOrder]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SessionsSortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

/**
 * Sorting configuration for sessions entity with field and order
 */
export interface SessionsSort {
  field: SessionsSortField
  order: SessionsSortOrder
}

export type UsersFilterNodeAnyOfField =
  (typeof UsersFilterNodeAnyOfField)[keyof typeof UsersFilterNodeAnyOfField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsersFilterNodeAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  deactivated: 'deactivated',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  name: 'name'
} as const

export type UsersFilterNodeAnyOf = {
  field: UsersFilterNodeAnyOfField
  operator: Operator
  type: 'condition'
  value: FilterValue
}

export type UsersFilterNodeAnyOfThreeOperator =
  (typeof UsersFilterNodeAnyOfThreeOperator)[keyof typeof UsersFilterNodeAnyOfThreeOperator]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsersFilterNodeAnyOfThreeOperator = {
  and: 'and',
  or: 'or'
} as const

export type UsersFilterNodeAnyOfThree = {
  children: UsersFilterNode[]
  operator: UsersFilterNodeAnyOfThreeOperator
  type: 'group'
}

/**
 * A recursive filter node for users entity that can be a condition or group
 */
export type UsersFilterNode = UsersFilterNodeAnyOf | UsersFilterNodeAnyOfThree

export type UsersSortField =
  (typeof UsersSortField)[keyof typeof UsersSortField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsersSortField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  deactivated: 'deactivated',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  name: 'name'
} as const

export type UsersSortOrder =
  (typeof UsersSortOrder)[keyof typeof UsersSortOrder]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsersSortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

/**
 * Sorting configuration for users entity with field and order
 */
export interface UsersSort {
  field: UsersSortField
  order: UsersSortOrder
}

export type ArtifactsFilterNodeAnyOfField =
  (typeof ArtifactsFilterNodeAnyOfField)[keyof typeof ArtifactsFilterNodeAnyOfField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArtifactsFilterNodeAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  credits: 'credits',
  description: 'description',
  mimeType: 'mimeType',
  name: 'name',
  organizationId: 'organizationId',
  previewImage: 'previewImage',
  producerId: 'producerId',
  text: 'text',
  url: 'url'
} as const

export type ArtifactsFilterNodeAnyOf = {
  field: ArtifactsFilterNodeAnyOfField
  operator: Operator
  type: 'condition'
  value: FilterValue
}

export type ArtifactsFilterNodeAnyOfThreeOperator =
  (typeof ArtifactsFilterNodeAnyOfThreeOperator)[keyof typeof ArtifactsFilterNodeAnyOfThreeOperator]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArtifactsFilterNodeAnyOfThreeOperator = {
  and: 'and',
  or: 'or'
} as const

export type ArtifactsFilterNodeAnyOfThree = {
  children: ArtifactsFilterNode[]
  operator: ArtifactsFilterNodeAnyOfThreeOperator
  type: 'group'
}

/**
 * A recursive filter node for artifacts entity that can be a condition or group
 */
export type ArtifactsFilterNode =
  | ArtifactsFilterNodeAnyOf
  | ArtifactsFilterNodeAnyOfThree

export type ArtifactsSortField =
  (typeof ArtifactsSortField)[keyof typeof ArtifactsSortField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArtifactsSortField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  credits: 'credits',
  description: 'description',
  mimeType: 'mimeType',
  name: 'name',
  organizationId: 'organizationId',
  previewImage: 'previewImage',
  producerId: 'producerId',
  text: 'text',
  url: 'url'
} as const

export type ArtifactsSortOrder =
  (typeof ArtifactsSortOrder)[keyof typeof ArtifactsSortOrder]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArtifactsSortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

/**
 * Sorting configuration for artifacts entity with field and order
 */
export interface ArtifactsSort {
  field: ArtifactsSortField
  order: ArtifactsSortOrder
}

export type LabelsFilterNodeAnyOfField =
  (typeof LabelsFilterNodeAnyOfField)[keyof typeof LabelsFilterNodeAnyOfField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LabelsFilterNodeAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  name: 'name',
  organizationId: 'organizationId'
} as const

export type LabelsFilterNodeAnyOf = {
  field: LabelsFilterNodeAnyOfField
  operator: Operator
  type: 'condition'
  value: FilterValue
}

export type LabelsFilterNodeAnyOfThreeOperator =
  (typeof LabelsFilterNodeAnyOfThreeOperator)[keyof typeof LabelsFilterNodeAnyOfThreeOperator]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LabelsFilterNodeAnyOfThreeOperator = {
  and: 'and',
  or: 'or'
} as const

export type LabelsFilterNodeAnyOfThree = {
  children: LabelsFilterNode[]
  operator: LabelsFilterNodeAnyOfThreeOperator
  type: 'group'
}

/**
 * A recursive filter node for labels entity that can be a condition or group
 */
export type LabelsFilterNode =
  | LabelsFilterNodeAnyOf
  | LabelsFilterNodeAnyOfThree

export type LabelsSortField =
  (typeof LabelsSortField)[keyof typeof LabelsSortField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LabelsSortField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  name: 'name',
  organizationId: 'organizationId'
} as const

export type LabelsSortOrder =
  (typeof LabelsSortOrder)[keyof typeof LabelsSortOrder]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LabelsSortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

/**
 * Sorting configuration for labels entity with field and order
 */
export interface LabelsSort {
  field: LabelsSortField
  order: LabelsSortOrder
}

export type PipelinesFilterNodeAnyOfField =
  (typeof PipelinesFilterNodeAnyOfField)[keyof typeof PipelinesFilterNodeAnyOfField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PipelinesFilterNodeAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  description: 'description',
  name: 'name',
  organizationId: 'organizationId'
} as const

export type PipelinesFilterNodeAnyOf = {
  field: PipelinesFilterNodeAnyOfField
  operator: Operator
  type: 'condition'
  value: FilterValue
}

export type PipelinesFilterNodeAnyOfThreeOperator =
  (typeof PipelinesFilterNodeAnyOfThreeOperator)[keyof typeof PipelinesFilterNodeAnyOfThreeOperator]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PipelinesFilterNodeAnyOfThreeOperator = {
  and: 'and',
  or: 'or'
} as const

export type PipelinesFilterNodeAnyOfThree = {
  children: PipelinesFilterNode[]
  operator: PipelinesFilterNodeAnyOfThreeOperator
  type: 'group'
}

/**
 * A recursive filter node for pipelines entity that can be a condition or group
 */
export type PipelinesFilterNode =
  | PipelinesFilterNodeAnyOf
  | PipelinesFilterNodeAnyOfThree

export type PipelinesSortField =
  (typeof PipelinesSortField)[keyof typeof PipelinesSortField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PipelinesSortField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  description: 'description',
  name: 'name',
  organizationId: 'organizationId'
} as const

export type PipelinesSortOrder =
  (typeof PipelinesSortOrder)[keyof typeof PipelinesSortOrder]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PipelinesSortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

/**
 * Sorting configuration for pipelines entity with field and order
 */
export interface PipelinesSort {
  field: PipelinesSortField
  order: PipelinesSortOrder
}

export type RunsFilterNodeAnyOfField =
  (typeof RunsFilterNodeAnyOfField)[keyof typeof RunsFilterNodeAnyOfField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RunsFilterNodeAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt',
  error: 'error',
  organizationId: 'organizationId',
  pipelineId: 'pipelineId',
  progress: 'progress',
  startedAt: 'startedAt',
  status: 'status',
  toolId: 'toolId'
} as const

export type RunsFilterNodeAnyOf = {
  field: RunsFilterNodeAnyOfField
  operator: Operator
  type: 'condition'
  value: FilterValue
}

export type RunsFilterNodeAnyOfThreeOperator =
  (typeof RunsFilterNodeAnyOfThreeOperator)[keyof typeof RunsFilterNodeAnyOfThreeOperator]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RunsFilterNodeAnyOfThreeOperator = {
  and: 'and',
  or: 'or'
} as const

export type RunsFilterNodeAnyOfThree = {
  children: RunsFilterNode[]
  operator: RunsFilterNodeAnyOfThreeOperator
  type: 'group'
}

/**
 * A recursive filter node for runs entity that can be a condition or group
 */
export type RunsFilterNode = RunsFilterNodeAnyOf | RunsFilterNodeAnyOfThree

export type RunsSortField = (typeof RunsSortField)[keyof typeof RunsSortField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RunsSortField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt',
  error: 'error',
  organizationId: 'organizationId',
  pipelineId: 'pipelineId',
  progress: 'progress',
  startedAt: 'startedAt',
  status: 'status',
  toolId: 'toolId'
} as const

export type RunsSortOrder = (typeof RunsSortOrder)[keyof typeof RunsSortOrder]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RunsSortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

/**
 * Sorting configuration for runs entity with field and order
 */
export interface RunsSort {
  field: RunsSortField
  order: RunsSortOrder
}

export type ToolsFilterNodeAnyOfField =
  (typeof ToolsFilterNodeAnyOfField)[keyof typeof ToolsFilterNodeAnyOfField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ToolsFilterNodeAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  description: 'description',
  inputMimeType: 'inputMimeType',
  name: 'name',
  organizationId: 'organizationId',
  outputMimeType: 'outputMimeType'
} as const

export type ToolsFilterNodeAnyOf = {
  field: ToolsFilterNodeAnyOfField
  operator: Operator
  type: 'condition'
  value: FilterValue
}

export type ToolsFilterNodeAnyOfThreeOperator =
  (typeof ToolsFilterNodeAnyOfThreeOperator)[keyof typeof ToolsFilterNodeAnyOfThreeOperator]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ToolsFilterNodeAnyOfThreeOperator = {
  and: 'and',
  or: 'or'
} as const

export type ToolsFilterNodeAnyOfThree = {
  children: ToolsFilterNode[]
  operator: ToolsFilterNodeAnyOfThreeOperator
  type: 'group'
}

/**
 * A recursive filter node for tools entity that can be a condition or group
 */
export type ToolsFilterNode = ToolsFilterNodeAnyOf | ToolsFilterNodeAnyOfThree

export type ToolsSortField =
  (typeof ToolsSortField)[keyof typeof ToolsSortField]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ToolsSortField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  description: 'description',
  inputMimeType: 'inputMimeType',
  name: 'name',
  organizationId: 'organizationId',
  outputMimeType: 'outputMimeType'
} as const

export type ToolsSortOrder =
  (typeof ToolsSortOrder)[keyof typeof ToolsSortOrder]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ToolsSortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

/**
 * Sorting configuration for tools entity with field and order
 */
export interface ToolsSort {
  field: ToolsSortField
  order: ToolsSortOrder
}

export type RegisterBody = {
  /**
   * The email address associated with the account
   * @pattern ^(?!\.)(?!.*\.\.)([A-Za-z0-9_'+\-\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\-]*\.)+[A-Za-z]{2,}$
   */
  email: string
  /**
   * The name of the user creating the account
   * @minLength 1
   */
  name: string
  /** The password for the account */
  password: string
}

export type Register201 = {
  data: UserEntity
}

export type LoginBody = {
  /**
   * The email address associated with the account
   * @pattern ^(?!\.)(?!.*\.\.)([A-Za-z0-9_'+\-\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\-]*\.)+[A-Za-z]{2,}$
   */
  email: string
  /** The password for the account */
  password: string
}

export type Login200 = {
  data: UserEntity
}

export type ConfirmEmailVerificationBody = {
  /** The password reset token */
  token: string
}

export type ConfirmEmailVerification200 = {
  session: SessionEntity
  user: UserEntity
}

export type ConfirmEmailChangeBody = {
  /**
   * The e-mail to send the confirmation token to
   * @pattern ^(?!\.)(?!.*\.\.)([A-Za-z0-9_'+\-\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\-]*\.)+[A-Za-z]{2,}$
   */
  newEmail: string
  /** The password reset token */
  token: string
  /**
   * The user ID of the user requesting the email change
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  userId: string
}

export type RequestEmailChangeBody = {
  /**
   * The e-mail to send the confirmation token to
   * @pattern ^(?!\.)(?!.*\.\.)([A-Za-z0-9_'+\-\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\-]*\.)+[A-Za-z]{2,}$
   */
  newEmail: string
  /**
   * The user ID of the user requesting the email change
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  userId: string
}

export type ConfirmPasswordResetBody = {
  /** The new password */
  newPassword: string
  /** The password reset token */
  token: string
}

export type RequestPasswordResetBody = {
  /** The e-mail to send the password reset token to */
  email: string
}

export type FindManyAccountsParams = {
  filter?: AccountsFilterNodeInput
  page?: PageInput
  sort?: AccountsSortInput[]
}

export type FindManyAccounts200Meta = {
  /** Total number of items in the collection */
  total: number
}

export type FindManyAccounts200 = {
  data: AccountEntity[]
  meta: FindManyAccounts200Meta
}

export type DeleteAccount200 = {
  data: AccountEntity
}

export type GetOneAccount200 = {
  data: AccountEntity
}

/**
 * The role of the invitation
 */
export type CreateInvitationBodyRole =
  (typeof CreateInvitationBodyRole)[keyof typeof CreateInvitationBodyRole]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateInvitationBodyRole = {
  admin: 'admin',
  owner: 'owner',
  member: 'member'
} as const

export type CreateInvitationBody = {
  /** The email of the invitated user */
  email: string
  /** The role of the invitation */
  role: CreateInvitationBodyRole
}

export type CreateInvitation201 = {
  data: InvitationEntity
}

export type FindManyInvitationsParams = {
  filter?: InvitationsFilterNodeInput
  page?: PageInput
  sort?: InvitationsSortInput[]
}

export type FindManyInvitations200Meta = {
  /** Total number of items in the collection */
  total: number
}

export type FindManyInvitations200 = {
  data: InvitationEntity[]
  meta: FindManyInvitations200Meta
}

export type DeleteInvitation200 = {
  data: InvitationEntity
}

export type GetOneInvitation200 = {
  data: InvitationEntity
}

/**
 * The role of the invitation
 */
export type UpdateInvitationBodyRole =
  (typeof UpdateInvitationBodyRole)[keyof typeof UpdateInvitationBodyRole]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateInvitationBodyRole = {
  admin: 'admin',
  owner: 'owner',
  member: 'member'
} as const

export type UpdateInvitationBody = {
  /** The email of the invitated user */
  email?: string
  /** The role of the invitation */
  role?: UpdateInvitationBodyRole
}

export type UpdateInvitation200 = {
  data: InvitationEntity
}

/**
 * The role of the member
 */
export type CreateMemberBodyRole =
  (typeof CreateMemberBodyRole)[keyof typeof CreateMemberBodyRole]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateMemberBodyRole = {
  admin: 'admin',
  owner: 'owner',
  member: 'member'
} as const

export type CreateMemberBody = {
  /** The role of the member */
  role: CreateMemberBodyRole
}

export type CreateMember201 = {
  data: MemberEntity
}

export type FindManyMembersParams = {
  filter?: MembersFilterNodeInput
  page?: PageInput
  sort?: MembersSortInput[]
}

export type FindManyMembers200Meta = {
  /** Total number of items in the collection */
  total: number
}

export type FindManyMembers200 = {
  data: MemberEntity[]
  meta: FindManyMembers200Meta
}

export type DeleteMember200 = {
  data: MemberEntity
}

export type GetOneMember200 = {
  data: MemberEntity
}

/**
 * The role of the member
 */
export type UpdateMemberBodyRole =
  (typeof UpdateMemberBodyRole)[keyof typeof UpdateMemberBodyRole]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateMemberBodyRole = {
  admin: 'admin',
  owner: 'owner',
  member: 'member'
} as const

export type UpdateMemberBody = {
  /** The role of the member */
  role?: UpdateMemberBodyRole
}

export type UpdateMember200 = {
  data: MemberEntity
}

export type CreateOrganizationBody = {
  /**
   * The billing email to use for the organization
   * @nullable
   */
  billingEmail: string | null
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  organizationId: string
}

export type CreateOrganization201 = {
  data: OrganizationEntity
}

export type FindManyOrganizationsParams = {
  filter?: OrganizationsFilterNodeInput
  page?: PageInput
  sort?: OrganizationsSortInput[]
}

export type FindManyOrganizations200Meta = {
  /** Total number of items in the collection */
  total: number
}

export type FindManyOrganizations200 = {
  data: OrganizationEntity[]
  meta: FindManyOrganizations200Meta
}

export type DeleteOrganization200 = {
  data: OrganizationEntity
}

export type GetOneOrganization200 = {
  data: OrganizationEntity
}

export type UpdateOrganizationBody = {
  /**
   * The billing email to use for the organization
   * @nullable
   */
  billingEmail?: string | null
  /**
   * The ID of the item
   * @pattern ^([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-8][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}|00000000-0000-0000-0000-000000000000)$
   */
  organizationId?: string
}

export type UpdateOrganization200 = {
  data: OrganizationEntity
}

export type FindManySessionsParams = {
  filter?: SessionsFilterNodeInput
  page?: PageInput
  sort?: SessionsSortInput[]
}

export type FindManySessions200Meta = {
  /** Total number of items in the collection */
  total: number
}

export type FindManySessions200 = {
  data: SessionEntity[]
  meta: FindManySessions200Meta
}

export type DeleteSession200 = {
  data: SessionEntity
}

export type GetOneSession200 = {
  data: SessionEntity
}

export type UpdateSessionBody = {
  /**
   * The active organization ID
   * @nullable
   */
  activeOrganizationId: string | null
}

export type UpdateSession200 = {
  data: SessionEntity
}

export type GetSession200 = {
  session: SessionEntity
  user: UserEntity
}

export type FindManyUsersParams = {
  filter?: UsersFilterNodeInput
  page?: PageInput
  sort?: UsersSortInput[]
}

export type FindManyUsers200Meta = {
  /** Total number of items in the collection */
  total: number
}

export type FindManyUsers200 = {
  data: UserEntity[]
  meta: FindManyUsers200Meta
}

export type DeleteUser200 = {
  data: UserEntity
}

export type GetOneUser200 = {
  data: UserEntity
}

export type UpdateUserBody = {
  /** The user's e-mail */
  email?: string
  /**
   * The user's avatar image URL
   * @nullable
   */
  image?: string | null
}

export type UpdateUser200 = {
  data: UserEntity
}

/**
 * CORS configuration for the API server. This allows you to specify which origins are allowed to make requests to the API.
 */
export type GetConfig200ApiCors = {
  /** A comma-separated list of allowed origins for CORS requests. Use "*" to allow all */
  origins: string
}

export type GetConfig200ApiEmailAnyOfMode =
  (typeof GetConfig200ApiEmailAnyOfMode)[keyof typeof GetConfig200ApiEmailAnyOfMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200ApiEmailAnyOfMode = {
  disabled: 'disabled'
} as const

/**
 * Email configuration is disabled
 */
export type GetConfig200ApiEmailAnyOf = {
  mode: GetConfig200ApiEmailAnyOfMode
}

/**
 * Email configuration is enabled
 */
export type GetConfig200ApiEmailAnyOfThreeMode =
  (typeof GetConfig200ApiEmailAnyOfThreeMode)[keyof typeof GetConfig200ApiEmailAnyOfThreeMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200ApiEmailAnyOfThreeMode = {
  enabled: 'enabled'
} as const

/**
 * Email configuration for sending emails. This includes the service, user, and password for the email service.
 */
export type GetConfig200ApiEmailAnyOfThree = {
  /** Email configuration is enabled */
  mode: GetConfig200ApiEmailAnyOfThreeMode
  /** Password for the email service. This is required when email configuration is enabled. */
  password: string
  /** Email service provider (e.g., "gmail", "sendgrid", etc.). This is required when email configuration is enabled. */
  service: string
  /** Username for the email service. This is required when email configuration is enabled. */
  user: string
}

export type GetConfig200ApiEmail =
  | GetConfig200ApiEmailAnyOf
  | GetConfig200ApiEmailAnyOfThree

export type GetConfig200ApiImagePullPolicy =
  (typeof GetConfig200ApiImagePullPolicy)[keyof typeof GetConfig200ApiImagePullPolicy]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200ApiImagePullPolicy = {
  Always: 'Always',
  IfNotPresent: 'IfNotPresent',
  Never: 'Never'
} as const

export type GetConfig200ApiImage = {
  pullPolicy: GetConfig200ApiImagePullPolicy
  repository: string
  tag: string
}

export type GetConfig200ApiResourcesLimits = {
  cpu: string
  memory: string
}

export type GetConfig200ApiResourcesRequests = {
  cpu: string
  memory: string
}

export type GetConfig200ApiResources = {
  limits: GetConfig200ApiResourcesLimits
  requests: GetConfig200ApiResourcesRequests
}

/**
 * Configuration schema for the API server. This includes settings for CORS, documentation, email, host, port, and request validation.
 */
export type GetConfig200Api = {
  /** CORS configuration for the API server. This allows you to specify which origins are allowed to make requests to the API. */
  cors: GetConfig200ApiCors
  /** Enable or disable API documentation */
  docs: boolean
  email: GetConfig200ApiEmail
  /** The host address on which the API server will listen */
  host: string
  /** The port on which the API server will listen */
  port: number
  /** Enable or disable request validation. When enabled, the API will validate incoming requests against the defined schemas. */
  validate: boolean
  image: GetConfig200ApiImage
  resources: GetConfig200ApiResources
}

export type GetConfig200AuthAnyOfMode =
  (typeof GetConfig200AuthAnyOfMode)[keyof typeof GetConfig200AuthAnyOfMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200AuthAnyOfMode = {
  disabled: 'disabled'
} as const

export type GetConfig200AuthAnyOf = {
  mode: GetConfig200AuthAnyOfMode
}

export type GetConfig200AuthAnyOfThreeFirebaseAnyOfMode =
  (typeof GetConfig200AuthAnyOfThreeFirebaseAnyOfMode)[keyof typeof GetConfig200AuthAnyOfThreeFirebaseAnyOfMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200AuthAnyOfThreeFirebaseAnyOfMode = {
  disabled: 'disabled'
} as const

export type GetConfig200AuthAnyOfThreeFirebaseAnyOf = {
  mode: GetConfig200AuthAnyOfThreeFirebaseAnyOfMode
}

export type GetConfig200AuthAnyOfThreeFirebaseAnyOfThreeMode =
  (typeof GetConfig200AuthAnyOfThreeFirebaseAnyOfThreeMode)[keyof typeof GetConfig200AuthAnyOfThreeFirebaseAnyOfThreeMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200AuthAnyOfThreeFirebaseAnyOfThreeMode = {
  enabled: 'enabled'
} as const

export type GetConfig200AuthAnyOfThreeFirebaseAnyOfThree = {
  /** Firebase service account client email address */
  clientEmail: string
  mode: GetConfig200AuthAnyOfThreeFirebaseAnyOfThreeMode
  /** Firebase service account private key (PEM format) */
  privateKey: string
  /** Firebase project ID for authentication */
  projectId: string
}

/**
 * Firebase authentication configuration. Enables Google Firebase Auth integration for user authentication and authorization.
 */
export type GetConfig200AuthAnyOfThreeFirebase =
  | GetConfig200AuthAnyOfThreeFirebaseAnyOf
  | GetConfig200AuthAnyOfThreeFirebaseAnyOfThree

export type GetConfig200AuthAnyOfThreeLocalAnyOfMode =
  (typeof GetConfig200AuthAnyOfThreeLocalAnyOfMode)[keyof typeof GetConfig200AuthAnyOfThreeLocalAnyOfMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200AuthAnyOfThreeLocalAnyOfMode = {
  disabled: 'disabled'
} as const

export type GetConfig200AuthAnyOfThreeLocalAnyOf = {
  mode: GetConfig200AuthAnyOfThreeLocalAnyOfMode
}

export type GetConfig200AuthAnyOfThreeLocalAnyOfThreeMode =
  (typeof GetConfig200AuthAnyOfThreeLocalAnyOfThreeMode)[keyof typeof GetConfig200AuthAnyOfThreeLocalAnyOfThreeMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200AuthAnyOfThreeLocalAnyOfThreeMode = {
  enabled: 'enabled'
} as const

export type GetConfig200AuthAnyOfThreeLocalAnyOfThree = {
  mode: GetConfig200AuthAnyOfThreeLocalAnyOfThreeMode
}

/**
 * Local authentication configuration. Provides username/password authentication stored in your database.
 */
export type GetConfig200AuthAnyOfThreeLocal =
  | GetConfig200AuthAnyOfThreeLocalAnyOf
  | GetConfig200AuthAnyOfThreeLocalAnyOfThree

export type GetConfig200AuthAnyOfThreeTwitterAnyOfMode =
  (typeof GetConfig200AuthAnyOfThreeTwitterAnyOfMode)[keyof typeof GetConfig200AuthAnyOfThreeTwitterAnyOfMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200AuthAnyOfThreeTwitterAnyOfMode = {
  disabled: 'disabled'
} as const

export type GetConfig200AuthAnyOfThreeTwitterAnyOf = {
  mode: GetConfig200AuthAnyOfThreeTwitterAnyOfMode
}

export type GetConfig200AuthAnyOfThreeTwitterAnyOfThreeMode =
  (typeof GetConfig200AuthAnyOfThreeTwitterAnyOfThreeMode)[keyof typeof GetConfig200AuthAnyOfThreeTwitterAnyOfThreeMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200AuthAnyOfThreeTwitterAnyOfThreeMode = {
  enabled: 'enabled'
} as const

export type GetConfig200AuthAnyOfThreeTwitterAnyOfThree = {
  /** OAuth callback URL that Twitter will redirect to after authentication */
  callbackURL: string
  /** Twitter API consumer key (API key) from your Twitter app */
  consumerKey: string
  /** Twitter API consumer secret (API secret key) from your Twitter app */
  consumerSecret: string
  mode: GetConfig200AuthAnyOfThreeTwitterAnyOfThreeMode
}

/**
 * Twitter OAuth authentication configuration. Enables "Sign in with Twitter" functionality for users.
 */
export type GetConfig200AuthAnyOfThreeTwitter =
  | GetConfig200AuthAnyOfThreeTwitterAnyOf
  | GetConfig200AuthAnyOfThreeTwitterAnyOfThree

export type GetConfig200AuthAnyOfThreeMode =
  (typeof GetConfig200AuthAnyOfThreeMode)[keyof typeof GetConfig200AuthAnyOfThreeMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200AuthAnyOfThreeMode = {
  enabled: 'enabled'
} as const

export type GetConfig200AuthAnyOfThree = {
  /** Firebase authentication configuration. Enables Google Firebase Auth integration for user authentication and authorization. */
  firebase: GetConfig200AuthAnyOfThreeFirebase
  /** Local authentication configuration. Provides username/password authentication stored in your database. */
  local: GetConfig200AuthAnyOfThreeLocal
  /** Twitter OAuth authentication configuration. Enables "Sign in with Twitter" functionality for users. */
  twitter: GetConfig200AuthAnyOfThreeTwitter
  mode: GetConfig200AuthAnyOfThreeMode
}

/**
 * Authentication configuration for the API server. This includes Firebase, local, and Twitter authentication options. Each option can be enabled or disabled independently. The default mode is "enabled" with local authentication enabled.
 */
export type GetConfig200Auth =
  | GetConfig200AuthAnyOf
  | GetConfig200AuthAnyOfThree

export type GetConfig200BillingAnyOfMode =
  (typeof GetConfig200BillingAnyOfMode)[keyof typeof GetConfig200BillingAnyOfMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200BillingAnyOfMode = {
  disabled: 'disabled'
} as const

export type GetConfig200BillingAnyOf = {
  mode: GetConfig200BillingAnyOfMode
}

export type GetConfig200BillingAnyOfThreeStripe = {
  /** Stripe secret API key (sk_live_... or sk_test_...) for payment processing */
  token: string
  /** Stripe webhook endpoint secret for verifying webhook signatures */
  whsec: string
}

export type GetConfig200BillingAnyOfThreeMode =
  (typeof GetConfig200BillingAnyOfThreeMode)[keyof typeof GetConfig200BillingAnyOfThreeMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200BillingAnyOfThreeMode = {
  enabled: 'enabled'
} as const

export type GetConfig200BillingAnyOfThree = {
  stripe: GetConfig200BillingAnyOfThreeStripe
  mode: GetConfig200BillingAnyOfThreeMode
}

/**
 * Billing configuration for payment processing using Stripe. Includes API keys and webhook secrets.
 */
export type GetConfig200Billing =
  | GetConfig200BillingAnyOf
  | GetConfig200BillingAnyOfThree

export type GetConfig200DatabaseAnyOfMode =
  (typeof GetConfig200DatabaseAnyOfMode)[keyof typeof GetConfig200DatabaseAnyOfMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200DatabaseAnyOfMode = {
  disabled: 'disabled'
} as const

export type GetConfig200DatabaseAnyOf = {
  mode: GetConfig200DatabaseAnyOfMode
}

export type GetConfig200DatabaseAnyOfThreeMode =
  (typeof GetConfig200DatabaseAnyOfThreeMode)[keyof typeof GetConfig200DatabaseAnyOfThreeMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200DatabaseAnyOfThreeMode = {
  enabled: 'enabled'
} as const

export type GetConfig200DatabaseAnyOfThree = {
  /** Database connection URL/string */
  url: string
  mode: GetConfig200DatabaseAnyOfThreeMode
}

export type GetConfig200DatabaseAnyOfFiveAuth = {
  /** Database name to create and use */
  database: string
  /** Database user password (change for production!) */
  password: string
}

/**
 * Kubernetes image pull policy
 */
export type GetConfig200DatabaseAnyOfFiveImagePullPolicy =
  (typeof GetConfig200DatabaseAnyOfFiveImagePullPolicy)[keyof typeof GetConfig200DatabaseAnyOfFiveImagePullPolicy]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200DatabaseAnyOfFiveImagePullPolicy = {
  Always: 'Always',
  IfNotPresent: 'IfNotPresent',
  Never: 'Never'
} as const

export type GetConfig200DatabaseAnyOfFiveImage = {
  /** Kubernetes image pull policy */
  pullPolicy: GetConfig200DatabaseAnyOfFiveImagePullPolicy
  /** PostgreSQL with pgvector extension docker image */
  repository: string
  /** PostgreSQL version tag */
  tag: string
}

export type GetConfig200DatabaseAnyOfFiveMode =
  (typeof GetConfig200DatabaseAnyOfFiveMode)[keyof typeof GetConfig200DatabaseAnyOfFiveMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200DatabaseAnyOfFiveMode = {
  managed: 'managed'
} as const

export type GetConfig200DatabaseAnyOfFivePersistence = {
  /** Enable persistent storage for database data */
  enabled: boolean
  /** Size of persistent volume for database storage */
  size: string
}

export type GetConfig200DatabaseAnyOfFiveResourcesLimits = {
  /** Maximum CPU allocation for database */
  cpu: string
  /** Maximum memory allocation for database */
  memory: string
}

export type GetConfig200DatabaseAnyOfFiveResourcesRequests = {
  /** Requested CPU allocation for database */
  cpu: string
  /** Requested memory allocation for database */
  memory: string
}

export type GetConfig200DatabaseAnyOfFiveResources = {
  limits: GetConfig200DatabaseAnyOfFiveResourcesLimits
  requests: GetConfig200DatabaseAnyOfFiveResourcesRequests
}

export type GetConfig200DatabaseAnyOfFive = {
  auth: GetConfig200DatabaseAnyOfFiveAuth
  image: GetConfig200DatabaseAnyOfFiveImage
  mode: GetConfig200DatabaseAnyOfFiveMode
  persistence: GetConfig200DatabaseAnyOfFivePersistence
  resources: GetConfig200DatabaseAnyOfFiveResources
}

/**
 * Database configuration for PostgreSQL with optional pgvector support. Includes managed mode with persistence and resource limits.
 */
export type GetConfig200Database =
  | GetConfig200DatabaseAnyOf
  | GetConfig200DatabaseAnyOfThree
  | GetConfig200DatabaseAnyOfFive

/**
 * Development port forwarding configuration for the API service
 */
export type GetConfig200InfrastructureDevelopmentApi = {
  /** Enable development port forwarding for the API service */
  enabled: boolean
  /** Local port to forward API service to during development */
  port: number
}

/**
 * Development port forwarding configuration for the Loki service
 */
export type GetConfig200InfrastructureDevelopmentLoki = {
  /** Enable development port forwarding for Loki service */
  enabled: boolean
  /** Local port to forward Loki service to during development */
  port: number
}

/**
 * Development port forwarding configuration for the platform service
 */
export type GetConfig200InfrastructureDevelopmentPlatform = {
  /** Enable development port forwarding for the platform/frontend service */
  enabled: boolean
  /** Local port to forward platform service to during development */
  port: number
}

/**
 * Development port forwarding configuration for PostgreSQL database
 */
export type GetConfig200InfrastructureDevelopmentPostgres = {
  /** Enable development port forwarding for PostgreSQL database */
  enabled: boolean
  /** Local port to forward PostgreSQL to during development */
  port: number
}

/**
 * Development port forwarding configuration for Redis cache
 */
export type GetConfig200InfrastructureDevelopmentRedis = {
  /** Enable development port forwarding for Redis cache */
  enabled: boolean
  /** Local port to forward Redis to during development */
  port: number
}

/**
 * Development environment configuration for local port forwarding and debugging
 */
export type GetConfig200InfrastructureDevelopment = {
  /** Development port forwarding configuration for the API service */
  api: GetConfig200InfrastructureDevelopmentApi
  /** Host IP address for development port forwarding (typically Docker bridge IP) */
  hostIP: string
  /** Development port forwarding configuration for the Loki service */
  loki: GetConfig200InfrastructureDevelopmentLoki
  /** Development port forwarding configuration for the platform service */
  platform: GetConfig200InfrastructureDevelopmentPlatform
  /** Development port forwarding configuration for PostgreSQL database */
  postgres: GetConfig200InfrastructureDevelopmentPostgres
  /** Development port forwarding configuration for Redis cache */
  redis: GetConfig200InfrastructureDevelopmentRedis
}

/**
 * Container image configuration for Kubernetes deployments
 */
export type GetConfig200InfrastructureImages = {
  /** List of Kubernetes secrets for pulling private container images */
  imagePullSecrets: string[]
  /** Custom container registry URL (leave empty for Docker Hub) */
  imageRegistry: string
}

/**
 * Database migration configuration for schema updates
 */
export type GetConfig200InfrastructureMigrations = {
  /** Enable automatic database migrations on deployment */
  enabled: boolean
}

/**
 * Kubernetes service account configuration for pod security and RBAC
 */
export type GetConfig200InfrastructureServiceAccount = {
  /** Create a dedicated Kubernetes service account for the application */
  create: boolean
  /** Custom service account name (auto-generated if empty) */
  name: string
}

/**
 * Infrastructure configuration for Kubernetes deployments, including development settings, image management, migrations, and service accounts.
 */
export type GetConfig200Infrastructure = {
  /** Development environment configuration for local port forwarding and debugging */
  development: GetConfig200InfrastructureDevelopment
  /** Container image configuration for Kubernetes deployments */
  images: GetConfig200InfrastructureImages
  /** Database migration configuration for schema updates */
  migrations: GetConfig200InfrastructureMigrations
  /** Kubernetes namespace where all resources will be deployed */
  namespace: string
  /** Kubernetes service account configuration for pod security and RBAC */
  serviceAccount: GetConfig200InfrastructureServiceAccount
}

export type GetConfig200IngressAnyOfMode =
  (typeof GetConfig200IngressAnyOfMode)[keyof typeof GetConfig200IngressAnyOfMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200IngressAnyOfMode = {
  disabled: 'disabled'
} as const

export type GetConfig200IngressAnyOf = {
  mode: GetConfig200IngressAnyOfMode
}

/**
 * TLS configuration for ingress, including certificate management and encryption settings
 */
export type GetConfig200IngressAnyOfThreeTls = {
  /** Enable TLS/SSL encryption for HTTPS traffic */
  enabled: boolean
  /** Kubernetes secret name containing TLS certificate and key */
  secretName: string
}

export type GetConfig200IngressAnyOfThreeMode =
  (typeof GetConfig200IngressAnyOfThreeMode)[keyof typeof GetConfig200IngressAnyOfThreeMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200IngressAnyOfThreeMode = {
  enabled: 'enabled'
} as const

export type GetConfig200IngressAnyOfThree = {
  /** Primary domain name for ingress routing */
  domain: string
  /** TLS configuration for ingress, including certificate management and encryption settings */
  tls: GetConfig200IngressAnyOfThreeTls
  mode: GetConfig200IngressAnyOfThreeMode
}

export type GetConfig200IngressAnyOfSixTls = {
  /** Enable TLS/SSL encryption for HTTPS traffic */
  enabled: boolean
  /** Cert-manager ClusterIssuer name for automatic certificate generation */
  issuer: string
  /** Kubernetes secret name for storing generated TLS certificate */
  secretName: string
}

export type GetConfig200IngressAnyOfSixMode =
  (typeof GetConfig200IngressAnyOfSixMode)[keyof typeof GetConfig200IngressAnyOfSixMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200IngressAnyOfSixMode = {
  managed: 'managed'
} as const

export type GetConfig200IngressAnyOfSix = {
  /** Primary domain name for ingress routing */
  domain: string
  tls: GetConfig200IngressAnyOfSixTls
  mode: GetConfig200IngressAnyOfSixMode
}

/**
 * Ingress configuration for routing external traffic to internal services. Supports TLS/SSL encryption and automatic certificate management.
 */
export type GetConfig200Ingress =
  | GetConfig200IngressAnyOf
  | GetConfig200IngressAnyOfThree
  | GetConfig200IngressAnyOfSix

/**
 * The embedding provider to use for vector embeddings
 */
export type GetConfig200IntelligenceEmbeddingType =
  (typeof GetConfig200IntelligenceEmbeddingType)[keyof typeof GetConfig200IntelligenceEmbeddingType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200IntelligenceEmbeddingType = {
  openai: 'openai',
  ollama: 'ollama'
} as const

/**
 * Configuration for text embedding generation
 */
export type GetConfig200IntelligenceEmbedding = {
  /** The embedding provider to use for vector embeddings */
  type: GetConfig200IntelligenceEmbeddingType
}

export type GetConfig200IntelligenceLlmAnyOfType =
  (typeof GetConfig200IntelligenceLlmAnyOfType)[keyof typeof GetConfig200IntelligenceLlmAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200IntelligenceLlmAnyOfType = {
  ollama: 'ollama'
} as const

export type GetConfig200IntelligenceLlmAnyOf = {
  /** Ollama server endpoint URL */
  endpoint: string
  /** Optional authentication token for Ollama */
  token?: string
  type: GetConfig200IntelligenceLlmAnyOfType
}

export type GetConfig200IntelligenceLlmAnyOfThreeType =
  (typeof GetConfig200IntelligenceLlmAnyOfThreeType)[keyof typeof GetConfig200IntelligenceLlmAnyOfThreeType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200IntelligenceLlmAnyOfThreeType = {
  openai: 'openai'
} as const

export type GetConfig200IntelligenceLlmAnyOfThree = {
  /** OpenAI API endpoint (defaults to official API) */
  endpoint: string
  /** OpenAI API key for authentication */
  token?: string
  type: GetConfig200IntelligenceLlmAnyOfThreeType
}

/**
 * Large Language Model configuration for AI processing
 */
export type GetConfig200IntelligenceLlm =
  | GetConfig200IntelligenceLlmAnyOf
  | GetConfig200IntelligenceLlmAnyOfThree

export type GetConfig200IntelligenceRunpodAnyOfMode =
  (typeof GetConfig200IntelligenceRunpodAnyOfMode)[keyof typeof GetConfig200IntelligenceRunpodAnyOfMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200IntelligenceRunpodAnyOfMode = {
  disabled: 'disabled'
} as const

export type GetConfig200IntelligenceRunpodAnyOf = {
  mode: GetConfig200IntelligenceRunpodAnyOfMode
}

export type GetConfig200IntelligenceRunpodAnyOfThreeMode =
  (typeof GetConfig200IntelligenceRunpodAnyOfThreeMode)[keyof typeof GetConfig200IntelligenceRunpodAnyOfThreeMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200IntelligenceRunpodAnyOfThreeMode = {
  enabled: 'enabled'
} as const

export type GetConfig200IntelligenceRunpodAnyOfThree = {
  mode: GetConfig200IntelligenceRunpodAnyOfThreeMode
  /**
   * RunPod API token for serverless GPU access
   * @minLength 1
   */
  token?: string
}

/**
 * RunPod serverless GPU configuration for AI workloads
 */
export type GetConfig200IntelligenceRunpod =
  | GetConfig200IntelligenceRunpodAnyOf
  | GetConfig200IntelligenceRunpodAnyOfThree

export type GetConfig200IntelligenceScraperAnyOfMode =
  (typeof GetConfig200IntelligenceScraperAnyOfMode)[keyof typeof GetConfig200IntelligenceScraperAnyOfMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200IntelligenceScraperAnyOfMode = {
  disabled: 'disabled'
} as const

export type GetConfig200IntelligenceScraperAnyOf = {
  mode: GetConfig200IntelligenceScraperAnyOfMode
}

export type GetConfig200IntelligenceScraperAnyOfThreeMode =
  (typeof GetConfig200IntelligenceScraperAnyOfThreeMode)[keyof typeof GetConfig200IntelligenceScraperAnyOfThreeMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200IntelligenceScraperAnyOfThreeMode = {
  enabled: 'enabled'
} as const

export type GetConfig200IntelligenceScraperAnyOfThree = {
  /** Web scraper service endpoint URL */
  endpoint: string
  mode: GetConfig200IntelligenceScraperAnyOfThreeMode
}

export type GetConfig200IntelligenceScraperAnyOfFiveImagePullPolicy =
  (typeof GetConfig200IntelligenceScraperAnyOfFiveImagePullPolicy)[keyof typeof GetConfig200IntelligenceScraperAnyOfFiveImagePullPolicy]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200IntelligenceScraperAnyOfFiveImagePullPolicy = {
  Always: 'Always',
  IfNotPresent: 'IfNotPresent',
  Never: 'Never'
} as const

export type GetConfig200IntelligenceScraperAnyOfFiveImage = {
  pullPolicy: GetConfig200IntelligenceScraperAnyOfFiveImagePullPolicy
  repository: string
  tag: string
}

export type GetConfig200IntelligenceScraperAnyOfFiveMode =
  (typeof GetConfig200IntelligenceScraperAnyOfFiveMode)[keyof typeof GetConfig200IntelligenceScraperAnyOfFiveMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200IntelligenceScraperAnyOfFiveMode = {
  managed: 'managed'
} as const

export type GetConfig200IntelligenceScraperAnyOfFiveResourcesLimits = {
  cpu: string
  memory: string
}

export type GetConfig200IntelligenceScraperAnyOfFiveResourcesRequests = {
  cpu: string
  memory: string
}

export type GetConfig200IntelligenceScraperAnyOfFiveResources = {
  limits: GetConfig200IntelligenceScraperAnyOfFiveResourcesLimits
  requests: GetConfig200IntelligenceScraperAnyOfFiveResourcesRequests
}

export type GetConfig200IntelligenceScraperAnyOfFive = {
  image: GetConfig200IntelligenceScraperAnyOfFiveImage
  mode: GetConfig200IntelligenceScraperAnyOfFiveMode
  resources: GetConfig200IntelligenceScraperAnyOfFiveResources
}

/**
 * Web scraping service for content extraction
 */
export type GetConfig200IntelligenceScraper =
  | GetConfig200IntelligenceScraperAnyOf
  | GetConfig200IntelligenceScraperAnyOfThree
  | GetConfig200IntelligenceScraperAnyOfFive

export type GetConfig200IntelligenceSpeechAnyOfMode =
  (typeof GetConfig200IntelligenceSpeechAnyOfMode)[keyof typeof GetConfig200IntelligenceSpeechAnyOfMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200IntelligenceSpeechAnyOfMode = {
  disabled: 'disabled'
} as const

export type GetConfig200IntelligenceSpeechAnyOf = {
  mode: GetConfig200IntelligenceSpeechAnyOfMode
}

export type GetConfig200IntelligenceSpeechAnyOfThreeMode =
  (typeof GetConfig200IntelligenceSpeechAnyOfThreeMode)[keyof typeof GetConfig200IntelligenceSpeechAnyOfThreeMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200IntelligenceSpeechAnyOfThreeMode = {
  enabled: 'enabled'
} as const

export type GetConfig200IntelligenceSpeechAnyOfThree = {
  mode: GetConfig200IntelligenceSpeechAnyOfThreeMode
  /** Speech-to-text service API token */
  token: string
}

/**
 * Speech recognition and text-to-speech services
 */
export type GetConfig200IntelligenceSpeech =
  | GetConfig200IntelligenceSpeechAnyOf
  | GetConfig200IntelligenceSpeechAnyOfThree

export type GetConfig200IntelligenceUnstructuredAnyOfMode =
  (typeof GetConfig200IntelligenceUnstructuredAnyOfMode)[keyof typeof GetConfig200IntelligenceUnstructuredAnyOfMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200IntelligenceUnstructuredAnyOfMode = {
  disabled: 'disabled'
} as const

export type GetConfig200IntelligenceUnstructuredAnyOf = {
  mode: GetConfig200IntelligenceUnstructuredAnyOfMode
}

export type GetConfig200IntelligenceUnstructuredAnyOfThreeMode =
  (typeof GetConfig200IntelligenceUnstructuredAnyOfThreeMode)[keyof typeof GetConfig200IntelligenceUnstructuredAnyOfThreeMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200IntelligenceUnstructuredAnyOfThreeMode = {
  enabled: 'enabled'
} as const

export type GetConfig200IntelligenceUnstructuredAnyOfThree = {
  mode: GetConfig200IntelligenceUnstructuredAnyOfThreeMode
}

export type GetConfig200IntelligenceUnstructuredAnyOfFiveImagePullPolicy =
  (typeof GetConfig200IntelligenceUnstructuredAnyOfFiveImagePullPolicy)[keyof typeof GetConfig200IntelligenceUnstructuredAnyOfFiveImagePullPolicy]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200IntelligenceUnstructuredAnyOfFiveImagePullPolicy = {
  Always: 'Always',
  IfNotPresent: 'IfNotPresent',
  Never: 'Never'
} as const

export type GetConfig200IntelligenceUnstructuredAnyOfFiveImage = {
  pullPolicy: GetConfig200IntelligenceUnstructuredAnyOfFiveImagePullPolicy
  repository: string
  tag: string
}

export type GetConfig200IntelligenceUnstructuredAnyOfFiveMode =
  (typeof GetConfig200IntelligenceUnstructuredAnyOfFiveMode)[keyof typeof GetConfig200IntelligenceUnstructuredAnyOfFiveMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200IntelligenceUnstructuredAnyOfFiveMode = {
  managed: 'managed'
} as const

export type GetConfig200IntelligenceUnstructuredAnyOfFiveResourcesLimits = {
  cpu: string
  memory: string
}

export type GetConfig200IntelligenceUnstructuredAnyOfFiveResourcesRequests = {
  cpu: string
  memory: string
}

export type GetConfig200IntelligenceUnstructuredAnyOfFiveResources = {
  limits: GetConfig200IntelligenceUnstructuredAnyOfFiveResourcesLimits
  requests: GetConfig200IntelligenceUnstructuredAnyOfFiveResourcesRequests
}

export type GetConfig200IntelligenceUnstructuredAnyOfFive = {
  image: GetConfig200IntelligenceUnstructuredAnyOfFiveImage
  mode: GetConfig200IntelligenceUnstructuredAnyOfFiveMode
  resources: GetConfig200IntelligenceUnstructuredAnyOfFiveResources
}

/**
 * Unstructured.io service for document parsing and extraction
 */
export type GetConfig200IntelligenceUnstructured =
  | GetConfig200IntelligenceUnstructuredAnyOf
  | GetConfig200IntelligenceUnstructuredAnyOfThree
  | GetConfig200IntelligenceUnstructuredAnyOfFive

/**
 * Intelligence configuration for AI capabilities including LLMs, embeddings, web scraping, speech processing, and unstructured data handling.
 */
export type GetConfig200Intelligence = {
  /** Configuration for text embedding generation */
  embedding: GetConfig200IntelligenceEmbedding
  /** Large Language Model configuration for AI processing */
  llm: GetConfig200IntelligenceLlm
  /** RunPod serverless GPU configuration for AI workloads */
  runpod: GetConfig200IntelligenceRunpod
  /** Web scraping service for content extraction */
  scraper: GetConfig200IntelligenceScraper
  /** Speech recognition and text-to-speech services */
  speech: GetConfig200IntelligenceSpeech
  /** Unstructured.io service for document parsing and extraction */
  unstructured: GetConfig200IntelligenceUnstructured
}

/**
 * Minimum log level to output (fatal=highest, silent=no logs)
 */
export type GetConfig200LoggingLevel =
  (typeof GetConfig200LoggingLevel)[keyof typeof GetConfig200LoggingLevel]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200LoggingLevel = {
  fatal: 'fatal',
  error: 'error',
  warn: 'warn',
  info: 'info',
  debug: 'debug',
  trace: 'trace',
  silent: 'silent'
} as const

/**
 * Logging configuration for the application. This includes the log level and whether to pretty-print logs.
 */
export type GetConfig200Logging = {
  /** Minimum log level to output (fatal=highest, silent=no logs) */
  level: GetConfig200LoggingLevel
  /** Enable pretty-printed logs for development (disable in production for structured logs) */
  pretty: boolean
}

export type GetConfig200MonitoringGrafanaAnyOfMode =
  (typeof GetConfig200MonitoringGrafanaAnyOfMode)[keyof typeof GetConfig200MonitoringGrafanaAnyOfMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200MonitoringGrafanaAnyOfMode = {
  disabled: 'disabled'
} as const

export type GetConfig200MonitoringGrafanaAnyOf = {
  mode: GetConfig200MonitoringGrafanaAnyOfMode
}

export type GetConfig200MonitoringGrafanaAnyOfThreeMode =
  (typeof GetConfig200MonitoringGrafanaAnyOfThreeMode)[keyof typeof GetConfig200MonitoringGrafanaAnyOfThreeMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200MonitoringGrafanaAnyOfThreeMode = {
  enabled: 'enabled'
} as const

export type GetConfig200MonitoringGrafanaAnyOfThree = {
  mode: GetConfig200MonitoringGrafanaAnyOfThreeMode
}

export type GetConfig200MonitoringGrafanaAnyOfFiveImagePullPolicy =
  (typeof GetConfig200MonitoringGrafanaAnyOfFiveImagePullPolicy)[keyof typeof GetConfig200MonitoringGrafanaAnyOfFiveImagePullPolicy]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200MonitoringGrafanaAnyOfFiveImagePullPolicy = {
  Always: 'Always',
  IfNotPresent: 'IfNotPresent',
  Never: 'Never'
} as const

export type GetConfig200MonitoringGrafanaAnyOfFiveImage = {
  pullPolicy: GetConfig200MonitoringGrafanaAnyOfFiveImagePullPolicy
  repository: string
  tag: string
}

export type GetConfig200MonitoringGrafanaAnyOfFiveMode =
  (typeof GetConfig200MonitoringGrafanaAnyOfFiveMode)[keyof typeof GetConfig200MonitoringGrafanaAnyOfFiveMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200MonitoringGrafanaAnyOfFiveMode = {
  managed: 'managed'
} as const

export type GetConfig200MonitoringGrafanaAnyOfFiveResourcesLimits = {
  cpu: string
  memory: string
}

export type GetConfig200MonitoringGrafanaAnyOfFiveResourcesRequests = {
  cpu: string
  memory: string
}

export type GetConfig200MonitoringGrafanaAnyOfFiveResources = {
  limits: GetConfig200MonitoringGrafanaAnyOfFiveResourcesLimits
  requests: GetConfig200MonitoringGrafanaAnyOfFiveResourcesRequests
}

export type GetConfig200MonitoringGrafanaAnyOfFive = {
  image: GetConfig200MonitoringGrafanaAnyOfFiveImage
  mode: GetConfig200MonitoringGrafanaAnyOfFiveMode
  resources: GetConfig200MonitoringGrafanaAnyOfFiveResources
}

/**
 * Grafana monitoring dashboard configuration
 */
export type GetConfig200MonitoringGrafana =
  | GetConfig200MonitoringGrafanaAnyOf
  | GetConfig200MonitoringGrafanaAnyOfThree
  | GetConfig200MonitoringGrafanaAnyOfFive

export type GetConfig200MonitoringLokiAnyOfMode =
  (typeof GetConfig200MonitoringLokiAnyOfMode)[keyof typeof GetConfig200MonitoringLokiAnyOfMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200MonitoringLokiAnyOfMode = {
  disabled: 'disabled'
} as const

export type GetConfig200MonitoringLokiAnyOf = {
  mode: GetConfig200MonitoringLokiAnyOfMode
}

export type GetConfig200MonitoringLokiAnyOfThreeMode =
  (typeof GetConfig200MonitoringLokiAnyOfThreeMode)[keyof typeof GetConfig200MonitoringLokiAnyOfThreeMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200MonitoringLokiAnyOfThreeMode = {
  enabled: 'enabled'
} as const

export type GetConfig200MonitoringLokiAnyOfThree = {
  /** External Loki host URL */
  host: string
  mode: GetConfig200MonitoringLokiAnyOfThreeMode
}

export type GetConfig200MonitoringLokiAnyOfFiveImagePullPolicy =
  (typeof GetConfig200MonitoringLokiAnyOfFiveImagePullPolicy)[keyof typeof GetConfig200MonitoringLokiAnyOfFiveImagePullPolicy]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200MonitoringLokiAnyOfFiveImagePullPolicy = {
  Always: 'Always',
  IfNotPresent: 'IfNotPresent',
  Never: 'Never'
} as const

export type GetConfig200MonitoringLokiAnyOfFiveImage = {
  pullPolicy: GetConfig200MonitoringLokiAnyOfFiveImagePullPolicy
  repository: string
  tag: string
}

export type GetConfig200MonitoringLokiAnyOfFiveMode =
  (typeof GetConfig200MonitoringLokiAnyOfFiveMode)[keyof typeof GetConfig200MonitoringLokiAnyOfFiveMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200MonitoringLokiAnyOfFiveMode = {
  managed: 'managed'
} as const

export type GetConfig200MonitoringLokiAnyOfFiveResourcesLimits = {
  cpu: string
  memory: string
}

export type GetConfig200MonitoringLokiAnyOfFiveResourcesRequests = {
  cpu: string
  memory: string
}

export type GetConfig200MonitoringLokiAnyOfFiveResources = {
  limits: GetConfig200MonitoringLokiAnyOfFiveResourcesLimits
  requests: GetConfig200MonitoringLokiAnyOfFiveResourcesRequests
}

export type GetConfig200MonitoringLokiAnyOfFive = {
  host: string
  image: GetConfig200MonitoringLokiAnyOfFiveImage
  mode: GetConfig200MonitoringLokiAnyOfFiveMode
  resources: GetConfig200MonitoringLokiAnyOfFiveResources
}

/**
 * Loki log aggregation service configuration
 */
export type GetConfig200MonitoringLoki =
  | GetConfig200MonitoringLokiAnyOf
  | GetConfig200MonitoringLokiAnyOfThree
  | GetConfig200MonitoringLokiAnyOfFive

/**
 * Monitoring configuration for Grafana and Loki services
 */
export type GetConfig200Monitoring = {
  /** Grafana monitoring dashboard configuration */
  grafana: GetConfig200MonitoringGrafana
  /** Loki log aggregation service configuration */
  loki: GetConfig200MonitoringLoki
}

export type GetConfig200PlatformAnyOfMode =
  (typeof GetConfig200PlatformAnyOfMode)[keyof typeof GetConfig200PlatformAnyOfMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200PlatformAnyOfMode = {
  disabled: 'disabled'
} as const

export type GetConfig200PlatformAnyOf = {
  mode: GetConfig200PlatformAnyOfMode
}

export type GetConfig200PlatformAnyOfThreeMode =
  (typeof GetConfig200PlatformAnyOfThreeMode)[keyof typeof GetConfig200PlatformAnyOfThreeMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200PlatformAnyOfThreeMode = {
  enabled: 'enabled'
} as const

export type GetConfig200PlatformAnyOfThree = {
  /** Host address where the platform service will be accessible */
  host: string
  mode: GetConfig200PlatformAnyOfThreeMode
}

export type GetConfig200PlatformAnyOfFiveImagePullPolicy =
  (typeof GetConfig200PlatformAnyOfFiveImagePullPolicy)[keyof typeof GetConfig200PlatformAnyOfFiveImagePullPolicy]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200PlatformAnyOfFiveImagePullPolicy = {
  Always: 'Always',
  IfNotPresent: 'IfNotPresent',
  Never: 'Never'
} as const

export type GetConfig200PlatformAnyOfFiveImage = {
  pullPolicy: GetConfig200PlatformAnyOfFiveImagePullPolicy
  repository: string
  tag: string
}

export type GetConfig200PlatformAnyOfFiveMode =
  (typeof GetConfig200PlatformAnyOfFiveMode)[keyof typeof GetConfig200PlatformAnyOfFiveMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200PlatformAnyOfFiveMode = {
  managed: 'managed'
} as const

export type GetConfig200PlatformAnyOfFiveResourcesLimits = {
  cpu: string
  memory: string
}

export type GetConfig200PlatformAnyOfFiveResourcesRequests = {
  cpu: string
  memory: string
}

export type GetConfig200PlatformAnyOfFiveResources = {
  limits: GetConfig200PlatformAnyOfFiveResourcesLimits
  requests: GetConfig200PlatformAnyOfFiveResourcesRequests
}

export type GetConfig200PlatformAnyOfFive = {
  /** Host address where the platform service will be accessible */
  host: string
  image: GetConfig200PlatformAnyOfFiveImage
  mode: GetConfig200PlatformAnyOfFiveMode
  resources: GetConfig200PlatformAnyOfFiveResources
}

/**
 * Platform configuration for the Arches AI platform service, including host address, image settings, and resource limits.
 */
export type GetConfig200Platform =
  | GetConfig200PlatformAnyOf
  | GetConfig200PlatformAnyOfThree
  | GetConfig200PlatformAnyOfFive

export type GetConfig200RedisAnyOfMode =
  (typeof GetConfig200RedisAnyOfMode)[keyof typeof GetConfig200RedisAnyOfMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200RedisAnyOfMode = {
  disabled: 'disabled'
} as const

export type GetConfig200RedisAnyOf = {
  mode: GetConfig200RedisAnyOfMode
}

export type GetConfig200RedisAnyOfThreeMode =
  (typeof GetConfig200RedisAnyOfThreeMode)[keyof typeof GetConfig200RedisAnyOfThreeMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200RedisAnyOfThreeMode = {
  enabled: 'enabled'
} as const

export type GetConfig200RedisAnyOfThree = {
  /** Redis authentication password (optional) */
  auth: string
  /** Certificate Authority for TLS connections (optional) */
  ca?: string
  /** Redis server hostname or IP address */
  host: string
  /** Redis server port number */
  port: number
  mode: GetConfig200RedisAnyOfThreeMode
}

export type GetConfig200RedisAnyOfFiveImagePullPolicy =
  (typeof GetConfig200RedisAnyOfFiveImagePullPolicy)[keyof typeof GetConfig200RedisAnyOfFiveImagePullPolicy]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200RedisAnyOfFiveImagePullPolicy = {
  Always: 'Always',
  IfNotPresent: 'IfNotPresent',
  Never: 'Never'
} as const

export type GetConfig200RedisAnyOfFiveImage = {
  pullPolicy: GetConfig200RedisAnyOfFiveImagePullPolicy
  repository: string
  tag: string
}

export type GetConfig200RedisAnyOfFiveMode =
  (typeof GetConfig200RedisAnyOfFiveMode)[keyof typeof GetConfig200RedisAnyOfFiveMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200RedisAnyOfFiveMode = {
  managed: 'managed'
} as const

export type GetConfig200RedisAnyOfFivePersistence = {
  /** Enable persistent storage for Redis data */
  enabled: boolean
  /** Size of persistent volume for Redis storage */
  size: string
}

export type GetConfig200RedisAnyOfFiveResourcesLimits = {
  cpu: string
  memory: string
}

export type GetConfig200RedisAnyOfFiveResourcesRequests = {
  cpu: string
  memory: string
}

export type GetConfig200RedisAnyOfFiveResources = {
  limits: GetConfig200RedisAnyOfFiveResourcesLimits
  requests: GetConfig200RedisAnyOfFiveResourcesRequests
}

export type GetConfig200RedisAnyOfFive = {
  /** Redis authentication password (optional) */
  auth: string
  /** Certificate Authority for TLS connections (optional) */
  ca?: string
  /** Redis server hostname or IP address */
  host: string
  /** Redis server port number */
  port: number
  image: GetConfig200RedisAnyOfFiveImage
  mode: GetConfig200RedisAnyOfFiveMode
  persistence: GetConfig200RedisAnyOfFivePersistence
  resources: GetConfig200RedisAnyOfFiveResources
}

export type GetConfig200Redis =
  | GetConfig200RedisAnyOf
  | GetConfig200RedisAnyOfThree
  | GetConfig200RedisAnyOfFive

export type GetConfig200StorageAnyOfMode =
  (typeof GetConfig200StorageAnyOfMode)[keyof typeof GetConfig200StorageAnyOfMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200StorageAnyOfMode = {
  disabled: 'disabled'
} as const

export type GetConfig200StorageAnyOf = {
  mode: GetConfig200StorageAnyOfMode
}

export type GetConfig200StorageAnyOfThreeMode =
  (typeof GetConfig200StorageAnyOfThreeMode)[keyof typeof GetConfig200StorageAnyOfThreeMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200StorageAnyOfThreeMode = {
  enabled: 'enabled'
} as const

export type GetConfig200StorageAnyOfThree = {
  /** MinIO/S3 access key ID for authentication */
  accesskey: string
  /** S3 bucket name for file storage */
  bucket: string
  /** MinIO server endpoint URL */
  endpoint: string
  /** MinIO/S3 secret access key for authentication */
  secretkey: string
  mode: GetConfig200StorageAnyOfThreeMode
}

export type GetConfig200StorageAnyOfFiveImagePullPolicy =
  (typeof GetConfig200StorageAnyOfFiveImagePullPolicy)[keyof typeof GetConfig200StorageAnyOfFiveImagePullPolicy]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200StorageAnyOfFiveImagePullPolicy = {
  Always: 'Always',
  IfNotPresent: 'IfNotPresent',
  Never: 'Never'
} as const

export type GetConfig200StorageAnyOfFiveImage = {
  pullPolicy: GetConfig200StorageAnyOfFiveImagePullPolicy
  repository: string
  tag: string
}

export type GetConfig200StorageAnyOfFiveMode =
  (typeof GetConfig200StorageAnyOfFiveMode)[keyof typeof GetConfig200StorageAnyOfFiveMode]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200StorageAnyOfFiveMode = {
  managed: 'managed'
} as const

export type GetConfig200StorageAnyOfFivePersistence = {
  /** Enable persistent storage for MinIO data */
  enabled: boolean
  /** Size of persistent volume for object storage */
  size: string
}

export type GetConfig200StorageAnyOfFiveResourcesLimits = {
  cpu: string
  memory: string
}

export type GetConfig200StorageAnyOfFiveResourcesRequests = {
  cpu: string
  memory: string
}

export type GetConfig200StorageAnyOfFiveResources = {
  limits: GetConfig200StorageAnyOfFiveResourcesLimits
  requests: GetConfig200StorageAnyOfFiveResourcesRequests
}

export type GetConfig200StorageAnyOfFive = {
  /** MinIO/S3 access key ID for authentication */
  accesskey: string
  /** S3 bucket name for file storage */
  bucket: string
  /** MinIO server endpoint URL */
  endpoint: string
  /** MinIO/S3 secret access key for authentication */
  secretkey: string
  image: GetConfig200StorageAnyOfFiveImage
  mode: GetConfig200StorageAnyOfFiveMode
  persistence: GetConfig200StorageAnyOfFivePersistence
  resources: GetConfig200StorageAnyOfFiveResources
}

/**
 * Object storage configuration for MinIO or S3-compatible services
 */
export type GetConfig200Storage =
  | GetConfig200StorageAnyOf
  | GetConfig200StorageAnyOfThree
  | GetConfig200StorageAnyOfFive

/**
 * Arches AI configuration schema
 */
export type GetConfig200 = {
  /** Configuration schema for the API server. This includes settings for CORS, documentation, email, host, port, and request validation. */
  api: GetConfig200Api
  /** Authentication configuration for the API server. This includes Firebase, local, and Twitter authentication options. Each option can be enabled or disabled independently. The default mode is "enabled" with local authentication enabled. */
  auth: GetConfig200Auth
  /** Billing configuration for payment processing using Stripe. Includes API keys and webhook secrets. */
  billing: GetConfig200Billing
  /** Database configuration for PostgreSQL with optional pgvector support. Includes managed mode with persistence and resource limits. */
  database: GetConfig200Database
  /** Infrastructure configuration for Kubernetes deployments, including development settings, image management, migrations, and service accounts. */
  infrastructure: GetConfig200Infrastructure
  /** Ingress configuration for routing external traffic to internal services. Supports TLS/SSL encryption and automatic certificate management. */
  ingress: GetConfig200Ingress
  /** Intelligence configuration for AI capabilities including LLMs, embeddings, web scraping, speech processing, and unstructured data handling. */
  intelligence: GetConfig200Intelligence
  /** Logging configuration for the application. This includes the log level and whether to pretty-print logs. */
  logging: GetConfig200Logging
  /** Monitoring configuration for Grafana and Loki services */
  monitoring: GetConfig200Monitoring
  /** Platform configuration for the Arches AI platform service, including host address, image settings, and resource limits. */
  platform: GetConfig200Platform
  redis: GetConfig200Redis
  /** Object storage configuration for MinIO or S3-compatible services */
  storage: GetConfig200Storage
}

export type PostUploadUrlBody = {
  contentType?: string
  expiresIn?: number
  key: string
}

export type PostUploadUrl200 = {
  url: string
}

export type PostDownloadUrlBody = {
  expiresIn?: number
  key: string
}

export type PostDownloadUrl200 = {
  url: string
}

export type GetFilesParams = {
  maxKeys?: number
  prefix?: string
}

export type GetFiles200FilesItem = {
  contentType?: string
  etag: string
  key: string
  lastModified: string
  size: number
}

export type GetFiles200 = {
  continuationToken?: string
  directories: string[]
  files: GetFiles200FilesItem[]
}

export type DeleteFilesKey200 = {
  success: boolean
}

export type PostMultipartCreateBody = {
  contentType?: string
  key: string
}

export type PostMultipartCreate200 = {
  uploadId: string
}

export type PostMultipartPartUrlBody = {
  expiresIn?: number
  key: string
  partNumber: number
  uploadId: string
}

export type PostMultipartPartUrl200 = {
  url: string
}

export type PostMultipartCompleteBodyPartsItem = {
  etag: string
  partNumber: number
}

export type PostMultipartCompleteBody = {
  key: string
  parts: PostMultipartCompleteBodyPartsItem[]
  uploadId: string
}

export type PostMultipartComplete200 = {
  success: boolean
}

export type PostMultipartAbortBody = {
  key: string
  uploadId: string
}

export type PostMultipartAbort200 = {
  success: boolean
}

export type CreateArtifactBody = {
  /** The name of the artifact */
  name: string
  /**
   * The artifact text
   * @nullable
   */
  text: string | null
  /**
   * The artifact URL
   * @nullable
   */
  url: string | null
}

export type CreateArtifact201 = {
  data: ArtifactEntity
}

export type FindManyArtifactsParams = {
  filter?: ArtifactsFilterNodeInput
  page?: PageInput
  sort?: ArtifactsSortInput[]
}

export type FindManyArtifacts200Meta = {
  /** Total number of items in the collection */
  total: number
}

export type FindManyArtifacts200 = {
  data: ArtifactEntity[]
  meta: FindManyArtifacts200Meta
}

export type DeleteArtifact200 = {
  data: ArtifactEntity
}

export type GetOneArtifact200 = {
  data: ArtifactEntity
}

export type UpdateArtifactBody = {
  /** The name of the artifact */
  name?: string
  /**
   * The artifact text
   * @nullable
   */
  text?: string | null
  /**
   * The artifact URL
   * @nullable
   */
  url?: string | null
}

export type UpdateArtifact200 = {
  data: ArtifactEntity
}

export type CreateLabelBody = {
  /** The name of the label */
  name: string
}

export type CreateLabel201 = {
  data: LabelEntity
}

export type FindManyLabelsParams = {
  filter?: LabelsFilterNodeInput
  page?: PageInput
  sort?: LabelsSortInput[]
}

export type FindManyLabels200Meta = {
  /** Total number of items in the collection */
  total: number
}

export type FindManyLabels200 = {
  data: LabelEntity[]
  meta: FindManyLabels200Meta
}

export type DeleteLabel200 = {
  data: LabelEntity
}

export type GetOneLabel200 = {
  data: LabelEntity
}

export type UpdateLabelBody = {
  /** The name of the label */
  name?: string
}

export type UpdateLabel200 = {
  data: LabelEntity
}

export type CreatePipelineBody = {
  /**
   * The pipeline description
   * @nullable
   */
  description: string | null
  /**
   * The pipeline name
   * @nullable
   */
  name: string | null
}

export type CreatePipeline201 = {
  data: PipelineEntity
}

export type FindManyPipelinesParams = {
  filter?: PipelinesFilterNodeInput
  page?: PageInput
  sort?: PipelinesSortInput[]
}

export type FindManyPipelines200Meta = {
  /** Total number of items in the collection */
  total: number
}

export type FindManyPipelines200 = {
  data: PipelineEntity[]
  meta: FindManyPipelines200Meta
}

export type DeletePipeline200 = {
  data: PipelineEntity
}

export type GetOnePipeline200 = {
  data: PipelineEntity
}

export type UpdatePipelineBody = {
  /**
   * The pipeline description
   * @nullable
   */
  description?: string | null
  /**
   * The pipeline name
   * @nullable
   */
  name?: string | null
}

export type UpdatePipeline200 = {
  data: PipelineEntity
}

export type CreateRunBody = {
  /**
   * The pipeline ID associated with the run
   * @nullable
   */
  pipelineId: string | null
}

export type CreateRun201 = {
  data: RunEntity
}

export type FindManyRunsParams = {
  filter?: RunsFilterNodeInput
  page?: PageInput
  sort?: RunsSortInput[]
}

export type FindManyRuns200Meta = {
  /** Total number of items in the collection */
  total: number
}

export type FindManyRuns200 = {
  data: RunEntity[]
  meta: FindManyRuns200Meta
}

export type DeleteRun200 = {
  data: RunEntity
}

export type GetOneRun200 = {
  data: RunEntity
}

export type UpdateRunBody = {
  /**
   * The pipeline ID associated with the run
   * @nullable
   */
  pipelineId?: string | null
}

export type UpdateRun200 = {
  data: RunEntity
}

export type CreateToolBody = {
  /** The tool description */
  description: string
  /** The name of the tool */
  name: string
}

export type CreateTool201 = {
  data: ToolEntity
}

export type FindManyToolsParams = {
  filter?: ToolsFilterNodeInput
  page?: PageInput
  sort?: ToolsSortInput[]
}

export type FindManyTools200Meta = {
  /** Total number of items in the collection */
  total: number
}

export type FindManyTools200 = {
  data: ToolEntity[]
  meta: FindManyTools200Meta
}

export type DeleteTool200 = {
  data: ToolEntity
}

export type GetOneTool200 = {
  data: ToolEntity
}

export type UpdateToolBody = {
  /** The tool description */
  description?: string
  /** The name of the tool */
  name?: string
}

export type UpdateTool200 = {
  data: ToolEntity
}

export type GetHealth200Services = {
  database: string
  email: string
  redis: string
}

export type GetHealth200 = {
  services: GetHealth200Services
  timestamp: string
  uptime: number
}
