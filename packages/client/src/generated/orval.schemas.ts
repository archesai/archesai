/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v1
 */
export type FieldFilterEqualsAnyOfItem = string | number | boolean

export type FieldFilterEquals =
  | string
  | number
  | boolean
  | FieldFilterEqualsAnyOfItem[]

export type FieldFilterGtAnyOfItem = string | number | boolean

export type FieldFilterGt = string | number | boolean | FieldFilterGtAnyOfItem[]

export type FieldFilterGteAnyOfItem = string | number | boolean

export type FieldFilterGte =
  | string
  | number
  | boolean
  | FieldFilterGteAnyOfItem[]

export type FieldFilterInAnyOfItem = string | number | boolean

export type FieldFilterIn = string | number | boolean | FieldFilterInAnyOfItem[]

export type FieldFilterIsNotNullAnyOfItem = string | number | boolean

export type FieldFilterIsNotNull =
  | string
  | number
  | boolean
  | FieldFilterIsNotNullAnyOfItem[]

export type FieldFilterIsNullAnyOfItem = string | number | boolean

export type FieldFilterIsNull =
  | string
  | number
  | boolean
  | FieldFilterIsNullAnyOfItem[]

export type FieldFilterLikeAnyOfItem = string | number | boolean

export type FieldFilterLike =
  | string
  | number
  | boolean
  | FieldFilterLikeAnyOfItem[]

export type FieldFilterLtAnyOfItem = string | number | boolean

export type FieldFilterLt = string | number | boolean | FieldFilterLtAnyOfItem[]

export type FieldFilterLteAnyOfItem = string | number | boolean

export type FieldFilterLte =
  | string
  | number
  | boolean
  | FieldFilterLteAnyOfItem[]

export type FieldFilterNotEqualsAnyOfItem = string | number | boolean

export type FieldFilterNotEquals =
  | string
  | number
  | boolean
  | FieldFilterNotEqualsAnyOfItem[]

export type FieldFilterNotInAnyOfItem = string | number | boolean

export type FieldFilterNotIn =
  | string
  | number
  | boolean
  | FieldFilterNotInAnyOfItem[]

/**
 * Key-value pairs for filter operations
 */
export interface FieldFilter {
  equals?: FieldFilterEquals
  gt?: FieldFilterGt
  gte?: FieldFilterGte
  in?: FieldFilterIn
  is_not_null?: FieldFilterIsNotNull
  is_null?: FieldFilterIsNull
  like?: FieldFilterLike
  lt?: FieldFilterLt
  lte?: FieldFilterLte
  not_equals?: FieldFilterNotEquals
  not_in?: FieldFilterNotIn
}

/**
 * Non-standard meta-information
 */
export interface Meta {
  [key: string]: unknown
}

/**
 * A link to a related resource
 */
export type Link = string

/**
 * Collection of links
 */
export interface Links {
  [key: string]: Link
}

/**
 * Resource Identifier
 */
export interface ResourceIdentifier {
  id: string
  type: string
}

export type ResourceObjectAttributes = { [key: string]: unknown }

export type ResourceObjectLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Resource object
 */
export interface ResourceObject {
  id: string
  type: string
  attributes?: ResourceObjectAttributes
  links?: ResourceObjectLinks
  meta?: Meta
  relationships?: Relationships
}

/**
 * A list of errors that occurred during the request
 */
export interface ErrorObject {
  detail: string
  status: string
  title: string
}

/**
 * Error Document
 */
export interface ErrorDocument {
  errors: ErrorObject[]
  links?: Links
  meta?: Meta
}

/**
 * Resource Identifier
 */
export type RelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export interface Relationships {
  [key: string]: {
    /** Resource Identifier */
    data: RelationshipsData
  }
}

/**
 * Resource Identifier
 */
export type RelationshipData = {
  id: string
  type: string
}

/**
 * Relationship object
 */
export interface Relationship {
  /** Resource Identifier */
  data: RelationshipData
}

/**
 * Success Document
 */
export interface SuccessDocument {
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type ForbiddenResponseErrorsItem = {
  detail: string
  status: string
  title: string
}

/**
 * Forbidden
 */
export interface ForbiddenResponse {
  errors: ForbiddenResponseErrorsItem[]
}

/**
 * No Content
 */
export type NoContentResponse = null

export type UnauthorizedResponseErrorsItem = {
  detail: string
  status: string
  title: string
}

/**
 * Unauthorized
 */
export interface UnauthorizedResponse {
  errors: UnauthorizedResponseErrorsItem[]
}

export type NotFoundResponseErrorsItem = {
  detail: string
  status: string
  title: string
}

/**
 * Not Found
 */
export interface NotFoundResponse {
  errors: NotFoundResponseErrorsItem[]
}

export type GetConfig200AuthFirebaseAnyOf = {
  enabled: boolean
}

export type GetConfig200AuthFirebaseAnyOfTwo = {
  clientEmail: string
  enabled: boolean
  privateKey: string
  projectId: string
}

export type GetConfig200AuthFirebase =
  | GetConfig200AuthFirebaseAnyOf
  | GetConfig200AuthFirebaseAnyOfTwo

export type GetConfig200AuthLocal = {
  enabled: boolean
}

export type GetConfig200AuthTwitterAnyOf = {
  enabled: boolean
}

export type GetConfig200AuthTwitterAnyOfTwo = {
  callbackURL: string
  consumerKey: string
  consumerSecret: string
  enabled: boolean
}

export type GetConfig200AuthTwitter =
  | GetConfig200AuthTwitterAnyOf
  | GetConfig200AuthTwitterAnyOfTwo

export type GetConfig200Auth = {
  firebase: GetConfig200AuthFirebase
  local: GetConfig200AuthLocal
  twitter: GetConfig200AuthTwitter
}

export type GetConfig200BillingAnyOf = {
  enabled: boolean
}

export type GetConfig200BillingAnyOfTwoStripe = {
  token: string
  whsec: string
}

export type GetConfig200BillingAnyOfTwo = {
  enabled: boolean
  stripe: GetConfig200BillingAnyOfTwoStripe
}

export type GetConfig200Billing =
  | GetConfig200BillingAnyOf
  | GetConfig200BillingAnyOfTwo

export type GetConfig200Config = {
  validate: boolean
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200DatabaseType = {
  postgres: 'postgres',
  sqlite: 'sqlite',
  'in-memory': 'in-memory'
} as const
export type GetConfig200Database = {
  type: (typeof GetConfig200DatabaseType)[keyof typeof GetConfig200DatabaseType]
  url: string
}

export type GetConfig200EmailAnyOf = {
  enabled: boolean
}

export type GetConfig200EmailAnyOfTwo = {
  enabled: boolean
  password: string
  service: string
  user: string
}

export type GetConfig200Email =
  | GetConfig200EmailAnyOf
  | GetConfig200EmailAnyOfTwo

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200EmbeddingType = {
  openai: 'openai',
  ollama: 'ollama'
} as const
export type GetConfig200Embedding = {
  type: (typeof GetConfig200EmbeddingType)[keyof typeof GetConfig200EmbeddingType]
}

export type GetConfig200Jwt = {
  expiration: string
  secret: string
}

export type GetConfig200LlmAnyOfType =
  (typeof GetConfig200LlmAnyOfType)[keyof typeof GetConfig200LlmAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200LlmAnyOfType = {
  ollama: 'ollama'
} as const

export type GetConfig200LlmAnyOf = {
  endpoint: string
  token?: string
  type: GetConfig200LlmAnyOfType
}

export type GetConfig200LlmAnyOfThreeType =
  (typeof GetConfig200LlmAnyOfThreeType)[keyof typeof GetConfig200LlmAnyOfThreeType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200LlmAnyOfThreeType = {
  openai: 'openai'
} as const

export type GetConfig200LlmAnyOfThree = {
  endpoint?: string
  token: string
  type: GetConfig200LlmAnyOfThreeType
}

export type GetConfig200Llm = GetConfig200LlmAnyOf | GetConfig200LlmAnyOfThree

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200LoggingLevel = {
  fatal: 'fatal',
  error: 'error',
  warn: 'warn',
  info: 'info',
  debug: 'debug',
  trace: 'trace',
  silent: 'silent'
} as const
export type GetConfig200Logging = {
  gcpfix: boolean
  level: (typeof GetConfig200LoggingLevel)[keyof typeof GetConfig200LoggingLevel]
  pretty: boolean
}

export type GetConfig200MonitoringLoki = {
  enabled: boolean
  host?: string
}

export type GetConfig200Monitoring = {
  enabled: boolean
  loki: GetConfig200MonitoringLoki
}

export type GetConfig200Platform = {
  enabled: boolean
  host: string
}

export type GetConfig200RedisAnyOf = {
  enabled: boolean
}

export type GetConfig200RedisAnyOfTwo = {
  auth?: string
  ca?: string
  enabled: boolean
  host: string
  port: number
}

export type GetConfig200Redis =
  | GetConfig200RedisAnyOf
  | GetConfig200RedisAnyOfTwo

export type GetConfig200RunpodAnyOf = {
  enabled: boolean
}

export type GetConfig200RunpodAnyOfTwo = {
  enabled: boolean
  /** @minLength 1 */
  token: string
}

export type GetConfig200Runpod =
  | GetConfig200RunpodAnyOf
  | GetConfig200RunpodAnyOfTwo

export type GetConfig200ScraperAnyOf = {
  enabled: boolean
}

export type GetConfig200ScraperAnyOfTwo = {
  enabled: boolean
  endpoint: string
}

export type GetConfig200Scraper =
  | GetConfig200ScraperAnyOf
  | GetConfig200ScraperAnyOfTwo

export type GetConfig200ServerCors = {
  enabled: boolean
  origins: string
}

export type GetConfig200ServerDocs = {
  enabled: boolean
  export: boolean
}

export type GetConfig200Server = {
  cors: GetConfig200ServerCors
  docs: GetConfig200ServerDocs
  host: string
  port: number
}

export type GetConfig200Session = {
  enabled: boolean
  secret: string
}

export type GetConfig200SpeechAnyOf = {
  enabled: boolean
}

export type GetConfig200SpeechAnyOfTwo = {
  enabled: boolean
  token: string
}

export type GetConfig200Speech =
  | GetConfig200SpeechAnyOf
  | GetConfig200SpeechAnyOfTwo

export type GetConfig200StorageAnyOfType =
  (typeof GetConfig200StorageAnyOfType)[keyof typeof GetConfig200StorageAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200StorageAnyOfType = {
  local: 'local'
} as const

export type GetConfig200StorageAnyOf = {
  type: GetConfig200StorageAnyOfType
}

export type GetConfig200StorageAnyOfThreeType =
  (typeof GetConfig200StorageAnyOfThreeType)[keyof typeof GetConfig200StorageAnyOfThreeType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200StorageAnyOfThreeType = {
  'google-cloud': 'google-cloud'
} as const

export type GetConfig200StorageAnyOfThree = {
  type: GetConfig200StorageAnyOfThreeType
}

export type GetConfig200StorageAnyOfFiveType =
  (typeof GetConfig200StorageAnyOfFiveType)[keyof typeof GetConfig200StorageAnyOfFiveType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200StorageAnyOfFiveType = {
  minio: 'minio'
} as const

export type GetConfig200StorageAnyOfFive = {
  accesskey: string
  bucket: string
  endpoint: string
  secretkey: string
  type: GetConfig200StorageAnyOfFiveType
}

export type GetConfig200Storage =
  | GetConfig200StorageAnyOf
  | GetConfig200StorageAnyOfThree
  | GetConfig200StorageAnyOfFive

export type GetConfig200Tls = {
  enabled: boolean
}

export type GetConfig200UnstructuredAnyOf = {
  enabled: boolean
}

export type GetConfig200UnstructuredAnyOfTwo = {
  enabled: boolean
  endpoint: string
}

export type GetConfig200Unstructured =
  | GetConfig200UnstructuredAnyOf
  | GetConfig200UnstructuredAnyOfTwo

/**
 * Arches AI configuration schema
 */
export type GetConfig200 = {
  auth: GetConfig200Auth
  billing: GetConfig200Billing
  config: GetConfig200Config
  database: GetConfig200Database
  email: GetConfig200Email
  embedding: GetConfig200Embedding
  jwt: GetConfig200Jwt
  llm: GetConfig200Llm
  logging: GetConfig200Logging
  monitoring: GetConfig200Monitoring
  platform: GetConfig200Platform
  redis: GetConfig200Redis
  runpod: GetConfig200Runpod
  scraper: GetConfig200Scraper
  server: GetConfig200Server
  session: GetConfig200Session
  speech: GetConfig200Speech
  storage: GetConfig200Storage
  tls: GetConfig200Tls
  unstructured: GetConfig200Unstructured
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateFileBodyAction = { read: 'read', write: 'write' } as const
export type CreateFileBody = {
  /** The type of signed URL to create */
  action: (typeof CreateFileBodyAction)[keyof typeof CreateFileBodyAction]
  /** The path to the item */
  path: string
}

/**
 * The file entity
 */
export type CreateFile201DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** Whether or not this is a directory */
  isDir: boolean
  /** The original name of the file */
  orgname: string
  /** The path to the item */
  path: string
  /** The read-only URL that you can use to download the file from secure storage */
  read?: string
  /** The size of the item in bytes */
  size: number
  /** The write-only URL that you can use to upload the file to secure storage */
  write?: string
}

export type CreateFile201DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type CreateFile201DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type CreateFile201DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type CreateFile201DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: CreateFile201DataRelationshipsData
  }
}

export type CreateFile201DataType =
  (typeof CreateFile201DataType)[keyof typeof CreateFile201DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateFile201DataType = {
  files: 'files'
} as const

/**
 * Files resource
 */
export type CreateFile201Data = {
  /** The file entity */
  attributes: CreateFile201DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: CreateFile201DataLinks
  /** Non-standard meta-information */
  meta?: CreateFile201DataMeta
  /** Relationships object */
  relationships?: CreateFile201DataRelationships
  type: CreateFile201DataType
}

/**
 * Files Individual response
 */
export type CreateFile201 = {
  /** Files resource */
  data: CreateFile201Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type FindManyFilesParams = {
  /**
   * Filter
   */
  filter?: {
    createdAt?: FieldFilter
    id?: FieldFilter
    updatedAt?: FieldFilter
    isDir?: FieldFilter
    orgname?: FieldFilter
    path?: FieldFilter
    read?: FieldFilter
    size?: FieldFilter
    write?: FieldFilter
  }
  /**
   * Pagination
   */
  page?: {
    /**
     * @minimum 0
     * @maximum 1.7976931348623157e+308
     */
    number?: number
    /**
     * @minimum 1
     * @maximum 100
     */
    size?: number
  }
  /**
   * Sort by name ascending and createdAt descending
   */
  sort?: string
}

/**
 * The file entity
 */
export type FindManyFiles200DataItemAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** Whether or not this is a directory */
  isDir: boolean
  /** The original name of the file */
  orgname: string
  /** The path to the item */
  path: string
  /** The read-only URL that you can use to download the file from secure storage */
  read?: string
  /** The size of the item in bytes */
  size: number
  /** The write-only URL that you can use to upload the file to secure storage */
  write?: string
}

export type FindManyFiles200DataItemLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type FindManyFiles200DataItemMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type FindManyFiles200DataItemRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type FindManyFiles200DataItemRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: FindManyFiles200DataItemRelationshipsData
  }
}

export type FindManyFiles200DataItemType =
  (typeof FindManyFiles200DataItemType)[keyof typeof FindManyFiles200DataItemType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyFiles200DataItemType = {
  files: 'files'
} as const

/**
 * Files resource
 */
export type FindManyFiles200DataItem = {
  /** The file entity */
  attributes: FindManyFiles200DataItemAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: FindManyFiles200DataItemLinks
  /** Non-standard meta-information */
  meta?: FindManyFiles200DataItemMeta
  /** Relationships object */
  relationships?: FindManyFiles200DataItemRelationships
  type: FindManyFiles200DataItemType
}

/**
 * Files collection response
 */
export type FindManyFiles200 = {
  data: FindManyFiles200DataItem[]
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

/**
 * The file entity
 */
export type DeleteFile200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** Whether or not this is a directory */
  isDir: boolean
  /** The original name of the file */
  orgname: string
  /** The path to the item */
  path: string
  /** The read-only URL that you can use to download the file from secure storage */
  read?: string
  /** The size of the item in bytes */
  size: number
  /** The write-only URL that you can use to upload the file to secure storage */
  write?: string
}

export type DeleteFile200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type DeleteFile200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type DeleteFile200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type DeleteFile200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: DeleteFile200DataRelationshipsData
  }
}

export type DeleteFile200DataType =
  (typeof DeleteFile200DataType)[keyof typeof DeleteFile200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteFile200DataType = {
  files: 'files'
} as const

/**
 * Files resource
 */
export type DeleteFile200Data = {
  /** The file entity */
  attributes: DeleteFile200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: DeleteFile200DataLinks
  /** Non-standard meta-information */
  meta?: DeleteFile200DataMeta
  /** Relationships object */
  relationships?: DeleteFile200DataRelationships
  type: DeleteFile200DataType
}

/**
 * Files Individual response
 */
export type DeleteFile200 = {
  /** Files resource */
  data: DeleteFile200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

/**
 * The file entity
 */
export type GetOneFile200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** Whether or not this is a directory */
  isDir: boolean
  /** The original name of the file */
  orgname: string
  /** The path to the item */
  path: string
  /** The read-only URL that you can use to download the file from secure storage */
  read?: string
  /** The size of the item in bytes */
  size: number
  /** The write-only URL that you can use to upload the file to secure storage */
  write?: string
}

export type GetOneFile200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type GetOneFile200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type GetOneFile200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type GetOneFile200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: GetOneFile200DataRelationshipsData
  }
}

export type GetOneFile200DataType =
  (typeof GetOneFile200DataType)[keyof typeof GetOneFile200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOneFile200DataType = {
  files: 'files'
} as const

/**
 * Files resource
 */
export type GetOneFile200Data = {
  /** The file entity */
  attributes: GetOneFile200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: GetOneFile200DataLinks
  /** Non-standard meta-information */
  meta?: GetOneFile200DataMeta
  /** Relationships object */
  relationships?: GetOneFile200DataRelationships
  type: GetOneFile200DataType
}

/**
 * Files Individual response
 */
export type GetOneFile200 = {
  /** Files resource */
  data: GetOneFile200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateFileBodyAction = { read: 'read', write: 'write' } as const
export type UpdateFileBody = {
  /** The type of signed URL to create */
  action: (typeof UpdateFileBodyAction)[keyof typeof UpdateFileBodyAction]
  /** The path to the item */
  path: string
}

/**
 * The file entity
 */
export type UpdateFile200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** Whether or not this is a directory */
  isDir: boolean
  /** The original name of the file */
  orgname: string
  /** The path to the item */
  path: string
  /** The read-only URL that you can use to download the file from secure storage */
  read?: string
  /** The size of the item in bytes */
  size: number
  /** The write-only URL that you can use to upload the file to secure storage */
  write?: string
}

export type UpdateFile200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type UpdateFile200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type UpdateFile200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type UpdateFile200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: UpdateFile200DataRelationshipsData
  }
}

export type UpdateFile200DataType =
  (typeof UpdateFile200DataType)[keyof typeof UpdateFile200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateFile200DataType = {
  files: 'files'
} as const

/**
 * Files resource
 */
export type UpdateFile200Data = {
  /** The file entity */
  attributes: UpdateFile200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: UpdateFile200DataLinks
  /** Non-standard meta-information */
  meta?: UpdateFile200DataMeta
  /** Relationships object */
  relationships?: UpdateFile200DataRelationships
  type: UpdateFile200DataType
}

/**
 * Files Individual response
 */
export type UpdateFile200 = {
  /** Files resource */
  data: UpdateFile200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type CreatePipelineBodyStepsItemDependentsItem = {
  pipelineStepId: string
}

export type CreatePipelineBodyStepsItemPrerequisitesItem = {
  pipelineStepId: string
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreatePipelineBodyStepsItemToolInputType = {
  AUDIO: 'AUDIO',
  IMAGE: 'IMAGE',
  TEXT: 'TEXT',
  VIDEO: 'VIDEO'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreatePipelineBodyStepsItemToolOutputType = {
  AUDIO: 'AUDIO',
  IMAGE: 'IMAGE',
  TEXT: 'TEXT',
  VIDEO: 'VIDEO'
} as const
/**
 * The tool entity
 */
export type CreatePipelineBodyStepsItemTool = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The tool description */
  description: string
  /** The input type of the tool */
  inputType: (typeof CreatePipelineBodyStepsItemToolInputType)[keyof typeof CreatePipelineBodyStepsItemToolInputType]
  /** The name of the tool */
  name: string
  /** The organization name */
  orgname: string
  /** The output type of the tool */
  outputType: (typeof CreatePipelineBodyStepsItemToolOutputType)[keyof typeof CreatePipelineBodyStepsItemToolOutputType]
  /** The base of the tool */
  toolBase: string
}

/**
 * The pipeline step entity
 */
export type CreatePipelineBodyStepsItem = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  dependents: CreatePipelineBodyStepsItemDependentsItem[]
  /** The name of the pipeline step */
  name: string
  pipelineId: string
  prerequisites: CreatePipelineBodyStepsItemPrerequisitesItem[]
  /** The tool entity */
  tool: CreatePipelineBodyStepsItemTool
  toolId: string
}

export type CreatePipelineBody = {
  /** The pipeline description */
  description: string
  /** The name of the pipeline */
  name: string
  /** The steps in the pipeline */
  steps: CreatePipelineBodyStepsItem[]
}

export type CreatePipeline201DataAttributesStepsItemDependentsItem = {
  pipelineStepId: string
}

export type CreatePipeline201DataAttributesStepsItemPrerequisitesItem = {
  pipelineStepId: string
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreatePipeline201DataAttributesStepsItemToolInputType = {
  AUDIO: 'AUDIO',
  IMAGE: 'IMAGE',
  TEXT: 'TEXT',
  VIDEO: 'VIDEO'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreatePipeline201DataAttributesStepsItemToolOutputType = {
  AUDIO: 'AUDIO',
  IMAGE: 'IMAGE',
  TEXT: 'TEXT',
  VIDEO: 'VIDEO'
} as const
/**
 * The tool entity
 */
export type CreatePipeline201DataAttributesStepsItemTool = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The tool description */
  description: string
  /** The input type of the tool */
  inputType: (typeof CreatePipeline201DataAttributesStepsItemToolInputType)[keyof typeof CreatePipeline201DataAttributesStepsItemToolInputType]
  /** The name of the tool */
  name: string
  /** The organization name */
  orgname: string
  /** The output type of the tool */
  outputType: (typeof CreatePipeline201DataAttributesStepsItemToolOutputType)[keyof typeof CreatePipeline201DataAttributesStepsItemToolOutputType]
  /** The base of the tool */
  toolBase: string
}

/**
 * The pipeline step entity
 */
export type CreatePipeline201DataAttributesStepsItem = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  dependents: CreatePipeline201DataAttributesStepsItemDependentsItem[]
  /** The name of the pipeline step */
  name: string
  pipelineId: string
  prerequisites: CreatePipeline201DataAttributesStepsItemPrerequisitesItem[]
  /** The tool entity */
  tool: CreatePipeline201DataAttributesStepsItemTool
  toolId: string
}

/**
 * The pipeline entity
 */
export type CreatePipeline201DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The pipeline description */
  description: string
  /** The name of the pipeline */
  name: string
  /** The organization name */
  orgname: string
  /** The steps in the pipeline */
  steps: CreatePipeline201DataAttributesStepsItem[]
}

export type CreatePipeline201DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type CreatePipeline201DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type CreatePipeline201DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type CreatePipeline201DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: CreatePipeline201DataRelationshipsData
  }
}

export type CreatePipeline201DataType =
  (typeof CreatePipeline201DataType)[keyof typeof CreatePipeline201DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreatePipeline201DataType = {
  pipelines: 'pipelines'
} as const

/**
 * Pipelines resource
 */
export type CreatePipeline201Data = {
  /** The pipeline entity */
  attributes: CreatePipeline201DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: CreatePipeline201DataLinks
  /** Non-standard meta-information */
  meta?: CreatePipeline201DataMeta
  /** Relationships object */
  relationships?: CreatePipeline201DataRelationships
  type: CreatePipeline201DataType
}

/**
 * Pipelines Individual response
 */
export type CreatePipeline201 = {
  /** Pipelines resource */
  data: CreatePipeline201Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type FindManyPipelinesParams = {
  /**
   * Filter
   */
  filter?: {
    createdAt?: FieldFilter
    id?: FieldFilter
    updatedAt?: FieldFilter
    description?: FieldFilter
    name?: FieldFilter
    orgname?: FieldFilter
    steps?: FieldFilter
  }
  /**
   * Pagination
   */
  page?: {
    /**
     * @minimum 0
     * @maximum 1.7976931348623157e+308
     */
    number?: number
    /**
     * @minimum 1
     * @maximum 100
     */
    size?: number
  }
  /**
   * Sort by name ascending and createdAt descending
   */
  sort?: string
}

export type FindManyPipelines200DataItemAttributesStepsItemDependentsItem = {
  pipelineStepId: string
}

export type FindManyPipelines200DataItemAttributesStepsItemPrerequisitesItem = {
  pipelineStepId: string
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyPipelines200DataItemAttributesStepsItemToolInputType = {
  AUDIO: 'AUDIO',
  IMAGE: 'IMAGE',
  TEXT: 'TEXT',
  VIDEO: 'VIDEO'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyPipelines200DataItemAttributesStepsItemToolOutputType = {
  AUDIO: 'AUDIO',
  IMAGE: 'IMAGE',
  TEXT: 'TEXT',
  VIDEO: 'VIDEO'
} as const
/**
 * The tool entity
 */
export type FindManyPipelines200DataItemAttributesStepsItemTool = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The tool description */
  description: string
  /** The input type of the tool */
  inputType: (typeof FindManyPipelines200DataItemAttributesStepsItemToolInputType)[keyof typeof FindManyPipelines200DataItemAttributesStepsItemToolInputType]
  /** The name of the tool */
  name: string
  /** The organization name */
  orgname: string
  /** The output type of the tool */
  outputType: (typeof FindManyPipelines200DataItemAttributesStepsItemToolOutputType)[keyof typeof FindManyPipelines200DataItemAttributesStepsItemToolOutputType]
  /** The base of the tool */
  toolBase: string
}

/**
 * The pipeline step entity
 */
export type FindManyPipelines200DataItemAttributesStepsItem = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  dependents: FindManyPipelines200DataItemAttributesStepsItemDependentsItem[]
  /** The name of the pipeline step */
  name: string
  pipelineId: string
  prerequisites: FindManyPipelines200DataItemAttributesStepsItemPrerequisitesItem[]
  /** The tool entity */
  tool: FindManyPipelines200DataItemAttributesStepsItemTool
  toolId: string
}

/**
 * The pipeline entity
 */
export type FindManyPipelines200DataItemAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The pipeline description */
  description: string
  /** The name of the pipeline */
  name: string
  /** The organization name */
  orgname: string
  /** The steps in the pipeline */
  steps: FindManyPipelines200DataItemAttributesStepsItem[]
}

export type FindManyPipelines200DataItemLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type FindManyPipelines200DataItemMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type FindManyPipelines200DataItemRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type FindManyPipelines200DataItemRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: FindManyPipelines200DataItemRelationshipsData
  }
}

export type FindManyPipelines200DataItemType =
  (typeof FindManyPipelines200DataItemType)[keyof typeof FindManyPipelines200DataItemType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyPipelines200DataItemType = {
  pipelines: 'pipelines'
} as const

/**
 * Pipelines resource
 */
export type FindManyPipelines200DataItem = {
  /** The pipeline entity */
  attributes: FindManyPipelines200DataItemAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: FindManyPipelines200DataItemLinks
  /** Non-standard meta-information */
  meta?: FindManyPipelines200DataItemMeta
  /** Relationships object */
  relationships?: FindManyPipelines200DataItemRelationships
  type: FindManyPipelines200DataItemType
}

/**
 * Pipelines collection response
 */
export type FindManyPipelines200 = {
  data: FindManyPipelines200DataItem[]
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type DeletePipeline200DataAttributesStepsItemDependentsItem = {
  pipelineStepId: string
}

export type DeletePipeline200DataAttributesStepsItemPrerequisitesItem = {
  pipelineStepId: string
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeletePipeline200DataAttributesStepsItemToolInputType = {
  AUDIO: 'AUDIO',
  IMAGE: 'IMAGE',
  TEXT: 'TEXT',
  VIDEO: 'VIDEO'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeletePipeline200DataAttributesStepsItemToolOutputType = {
  AUDIO: 'AUDIO',
  IMAGE: 'IMAGE',
  TEXT: 'TEXT',
  VIDEO: 'VIDEO'
} as const
/**
 * The tool entity
 */
export type DeletePipeline200DataAttributesStepsItemTool = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The tool description */
  description: string
  /** The input type of the tool */
  inputType: (typeof DeletePipeline200DataAttributesStepsItemToolInputType)[keyof typeof DeletePipeline200DataAttributesStepsItemToolInputType]
  /** The name of the tool */
  name: string
  /** The organization name */
  orgname: string
  /** The output type of the tool */
  outputType: (typeof DeletePipeline200DataAttributesStepsItemToolOutputType)[keyof typeof DeletePipeline200DataAttributesStepsItemToolOutputType]
  /** The base of the tool */
  toolBase: string
}

/**
 * The pipeline step entity
 */
export type DeletePipeline200DataAttributesStepsItem = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  dependents: DeletePipeline200DataAttributesStepsItemDependentsItem[]
  /** The name of the pipeline step */
  name: string
  pipelineId: string
  prerequisites: DeletePipeline200DataAttributesStepsItemPrerequisitesItem[]
  /** The tool entity */
  tool: DeletePipeline200DataAttributesStepsItemTool
  toolId: string
}

/**
 * The pipeline entity
 */
export type DeletePipeline200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The pipeline description */
  description: string
  /** The name of the pipeline */
  name: string
  /** The organization name */
  orgname: string
  /** The steps in the pipeline */
  steps: DeletePipeline200DataAttributesStepsItem[]
}

export type DeletePipeline200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type DeletePipeline200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type DeletePipeline200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type DeletePipeline200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: DeletePipeline200DataRelationshipsData
  }
}

export type DeletePipeline200DataType =
  (typeof DeletePipeline200DataType)[keyof typeof DeletePipeline200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeletePipeline200DataType = {
  pipelines: 'pipelines'
} as const

/**
 * Pipelines resource
 */
export type DeletePipeline200Data = {
  /** The pipeline entity */
  attributes: DeletePipeline200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: DeletePipeline200DataLinks
  /** Non-standard meta-information */
  meta?: DeletePipeline200DataMeta
  /** Relationships object */
  relationships?: DeletePipeline200DataRelationships
  type: DeletePipeline200DataType
}

/**
 * Pipelines Individual response
 */
export type DeletePipeline200 = {
  /** Pipelines resource */
  data: DeletePipeline200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type GetOnePipeline200DataAttributesStepsItemDependentsItem = {
  pipelineStepId: string
}

export type GetOnePipeline200DataAttributesStepsItemPrerequisitesItem = {
  pipelineStepId: string
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOnePipeline200DataAttributesStepsItemToolInputType = {
  AUDIO: 'AUDIO',
  IMAGE: 'IMAGE',
  TEXT: 'TEXT',
  VIDEO: 'VIDEO'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOnePipeline200DataAttributesStepsItemToolOutputType = {
  AUDIO: 'AUDIO',
  IMAGE: 'IMAGE',
  TEXT: 'TEXT',
  VIDEO: 'VIDEO'
} as const
/**
 * The tool entity
 */
export type GetOnePipeline200DataAttributesStepsItemTool = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The tool description */
  description: string
  /** The input type of the tool */
  inputType: (typeof GetOnePipeline200DataAttributesStepsItemToolInputType)[keyof typeof GetOnePipeline200DataAttributesStepsItemToolInputType]
  /** The name of the tool */
  name: string
  /** The organization name */
  orgname: string
  /** The output type of the tool */
  outputType: (typeof GetOnePipeline200DataAttributesStepsItemToolOutputType)[keyof typeof GetOnePipeline200DataAttributesStepsItemToolOutputType]
  /** The base of the tool */
  toolBase: string
}

/**
 * The pipeline step entity
 */
export type GetOnePipeline200DataAttributesStepsItem = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  dependents: GetOnePipeline200DataAttributesStepsItemDependentsItem[]
  /** The name of the pipeline step */
  name: string
  pipelineId: string
  prerequisites: GetOnePipeline200DataAttributesStepsItemPrerequisitesItem[]
  /** The tool entity */
  tool: GetOnePipeline200DataAttributesStepsItemTool
  toolId: string
}

/**
 * The pipeline entity
 */
export type GetOnePipeline200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The pipeline description */
  description: string
  /** The name of the pipeline */
  name: string
  /** The organization name */
  orgname: string
  /** The steps in the pipeline */
  steps: GetOnePipeline200DataAttributesStepsItem[]
}

export type GetOnePipeline200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type GetOnePipeline200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type GetOnePipeline200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type GetOnePipeline200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: GetOnePipeline200DataRelationshipsData
  }
}

export type GetOnePipeline200DataType =
  (typeof GetOnePipeline200DataType)[keyof typeof GetOnePipeline200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOnePipeline200DataType = {
  pipelines: 'pipelines'
} as const

/**
 * Pipelines resource
 */
export type GetOnePipeline200Data = {
  /** The pipeline entity */
  attributes: GetOnePipeline200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: GetOnePipeline200DataLinks
  /** Non-standard meta-information */
  meta?: GetOnePipeline200DataMeta
  /** Relationships object */
  relationships?: GetOnePipeline200DataRelationships
  type: GetOnePipeline200DataType
}

/**
 * Pipelines Individual response
 */
export type GetOnePipeline200 = {
  /** Pipelines resource */
  data: GetOnePipeline200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type UpdatePipelineBodyStepsItemDependentsItem = {
  pipelineStepId: string
}

export type UpdatePipelineBodyStepsItemPrerequisitesItem = {
  pipelineStepId: string
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdatePipelineBodyStepsItemToolInputType = {
  AUDIO: 'AUDIO',
  IMAGE: 'IMAGE',
  TEXT: 'TEXT',
  VIDEO: 'VIDEO'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdatePipelineBodyStepsItemToolOutputType = {
  AUDIO: 'AUDIO',
  IMAGE: 'IMAGE',
  TEXT: 'TEXT',
  VIDEO: 'VIDEO'
} as const
/**
 * The tool entity
 */
export type UpdatePipelineBodyStepsItemTool = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The tool description */
  description: string
  /** The input type of the tool */
  inputType: (typeof UpdatePipelineBodyStepsItemToolInputType)[keyof typeof UpdatePipelineBodyStepsItemToolInputType]
  /** The name of the tool */
  name: string
  /** The organization name */
  orgname: string
  /** The output type of the tool */
  outputType: (typeof UpdatePipelineBodyStepsItemToolOutputType)[keyof typeof UpdatePipelineBodyStepsItemToolOutputType]
  /** The base of the tool */
  toolBase: string
}

/**
 * The pipeline step entity
 */
export type UpdatePipelineBodyStepsItem = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  dependents: UpdatePipelineBodyStepsItemDependentsItem[]
  /** The name of the pipeline step */
  name: string
  pipelineId: string
  prerequisites: UpdatePipelineBodyStepsItemPrerequisitesItem[]
  /** The tool entity */
  tool: UpdatePipelineBodyStepsItemTool
  toolId: string
}

export type UpdatePipelineBody = {
  /** The pipeline description */
  description?: string
  /** The name of the pipeline */
  name?: string
  /** The steps in the pipeline */
  steps?: UpdatePipelineBodyStepsItem[]
}

export type UpdatePipeline200DataAttributesStepsItemDependentsItem = {
  pipelineStepId: string
}

export type UpdatePipeline200DataAttributesStepsItemPrerequisitesItem = {
  pipelineStepId: string
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdatePipeline200DataAttributesStepsItemToolInputType = {
  AUDIO: 'AUDIO',
  IMAGE: 'IMAGE',
  TEXT: 'TEXT',
  VIDEO: 'VIDEO'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdatePipeline200DataAttributesStepsItemToolOutputType = {
  AUDIO: 'AUDIO',
  IMAGE: 'IMAGE',
  TEXT: 'TEXT',
  VIDEO: 'VIDEO'
} as const
/**
 * The tool entity
 */
export type UpdatePipeline200DataAttributesStepsItemTool = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The tool description */
  description: string
  /** The input type of the tool */
  inputType: (typeof UpdatePipeline200DataAttributesStepsItemToolInputType)[keyof typeof UpdatePipeline200DataAttributesStepsItemToolInputType]
  /** The name of the tool */
  name: string
  /** The organization name */
  orgname: string
  /** The output type of the tool */
  outputType: (typeof UpdatePipeline200DataAttributesStepsItemToolOutputType)[keyof typeof UpdatePipeline200DataAttributesStepsItemToolOutputType]
  /** The base of the tool */
  toolBase: string
}

/**
 * The pipeline step entity
 */
export type UpdatePipeline200DataAttributesStepsItem = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  dependents: UpdatePipeline200DataAttributesStepsItemDependentsItem[]
  /** The name of the pipeline step */
  name: string
  pipelineId: string
  prerequisites: UpdatePipeline200DataAttributesStepsItemPrerequisitesItem[]
  /** The tool entity */
  tool: UpdatePipeline200DataAttributesStepsItemTool
  toolId: string
}

/**
 * The pipeline entity
 */
export type UpdatePipeline200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The pipeline description */
  description: string
  /** The name of the pipeline */
  name: string
  /** The organization name */
  orgname: string
  /** The steps in the pipeline */
  steps: UpdatePipeline200DataAttributesStepsItem[]
}

export type UpdatePipeline200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type UpdatePipeline200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type UpdatePipeline200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type UpdatePipeline200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: UpdatePipeline200DataRelationshipsData
  }
}

export type UpdatePipeline200DataType =
  (typeof UpdatePipeline200DataType)[keyof typeof UpdatePipeline200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdatePipeline200DataType = {
  pipelines: 'pipelines'
} as const

/**
 * Pipelines resource
 */
export type UpdatePipeline200Data = {
  /** The pipeline entity */
  attributes: UpdatePipeline200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: UpdatePipeline200DataLinks
  /** Non-standard meta-information */
  meta?: UpdatePipeline200DataMeta
  /** Relationships object */
  relationships?: UpdatePipeline200DataRelationships
  type: UpdatePipeline200DataType
}

/**
 * Pipelines Individual response
 */
export type UpdatePipeline200 = {
  /** Pipelines resource */
  data: UpdatePipeline200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type CreateToolBody = {
  /** The tool description */
  description: string
  /** The name of the tool */
  name: string
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateTool201DataAttributesInputType = {
  AUDIO: 'AUDIO',
  IMAGE: 'IMAGE',
  TEXT: 'TEXT',
  VIDEO: 'VIDEO'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateTool201DataAttributesOutputType = {
  AUDIO: 'AUDIO',
  IMAGE: 'IMAGE',
  TEXT: 'TEXT',
  VIDEO: 'VIDEO'
} as const
/**
 * The tool entity
 */
export type CreateTool201DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The tool description */
  description: string
  /** The input type of the tool */
  inputType: (typeof CreateTool201DataAttributesInputType)[keyof typeof CreateTool201DataAttributesInputType]
  /** The name of the tool */
  name: string
  /** The organization name */
  orgname: string
  /** The output type of the tool */
  outputType: (typeof CreateTool201DataAttributesOutputType)[keyof typeof CreateTool201DataAttributesOutputType]
  /** The base of the tool */
  toolBase: string
}

export type CreateTool201DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type CreateTool201DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type CreateTool201DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type CreateTool201DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: CreateTool201DataRelationshipsData
  }
}

export type CreateTool201DataType =
  (typeof CreateTool201DataType)[keyof typeof CreateTool201DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateTool201DataType = {
  tools: 'tools'
} as const

/**
 * Tools resource
 */
export type CreateTool201Data = {
  /** The tool entity */
  attributes: CreateTool201DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: CreateTool201DataLinks
  /** Non-standard meta-information */
  meta?: CreateTool201DataMeta
  /** Relationships object */
  relationships?: CreateTool201DataRelationships
  type: CreateTool201DataType
}

/**
 * Tools Individual response
 */
export type CreateTool201 = {
  /** Tools resource */
  data: CreateTool201Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type FindManyToolsParams = {
  /**
   * Filter
   */
  filter?: {
    createdAt?: FieldFilter
    id?: FieldFilter
    updatedAt?: FieldFilter
    description?: FieldFilter
    inputType?: FieldFilter
    name?: FieldFilter
    orgname?: FieldFilter
    outputType?: FieldFilter
    toolBase?: FieldFilter
  }
  /**
   * Pagination
   */
  page?: {
    /**
     * @minimum 0
     * @maximum 1.7976931348623157e+308
     */
    number?: number
    /**
     * @minimum 1
     * @maximum 100
     */
    size?: number
  }
  /**
   * Sort by name ascending and createdAt descending
   */
  sort?: string
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyTools200DataItemAttributesInputType = {
  AUDIO: 'AUDIO',
  IMAGE: 'IMAGE',
  TEXT: 'TEXT',
  VIDEO: 'VIDEO'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyTools200DataItemAttributesOutputType = {
  AUDIO: 'AUDIO',
  IMAGE: 'IMAGE',
  TEXT: 'TEXT',
  VIDEO: 'VIDEO'
} as const
/**
 * The tool entity
 */
export type FindManyTools200DataItemAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The tool description */
  description: string
  /** The input type of the tool */
  inputType: (typeof FindManyTools200DataItemAttributesInputType)[keyof typeof FindManyTools200DataItemAttributesInputType]
  /** The name of the tool */
  name: string
  /** The organization name */
  orgname: string
  /** The output type of the tool */
  outputType: (typeof FindManyTools200DataItemAttributesOutputType)[keyof typeof FindManyTools200DataItemAttributesOutputType]
  /** The base of the tool */
  toolBase: string
}

export type FindManyTools200DataItemLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type FindManyTools200DataItemMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type FindManyTools200DataItemRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type FindManyTools200DataItemRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: FindManyTools200DataItemRelationshipsData
  }
}

export type FindManyTools200DataItemType =
  (typeof FindManyTools200DataItemType)[keyof typeof FindManyTools200DataItemType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyTools200DataItemType = {
  tools: 'tools'
} as const

/**
 * Tools resource
 */
export type FindManyTools200DataItem = {
  /** The tool entity */
  attributes: FindManyTools200DataItemAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: FindManyTools200DataItemLinks
  /** Non-standard meta-information */
  meta?: FindManyTools200DataItemMeta
  /** Relationships object */
  relationships?: FindManyTools200DataItemRelationships
  type: FindManyTools200DataItemType
}

/**
 * Tools collection response
 */
export type FindManyTools200 = {
  data: FindManyTools200DataItem[]
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteTool200DataAttributesInputType = {
  AUDIO: 'AUDIO',
  IMAGE: 'IMAGE',
  TEXT: 'TEXT',
  VIDEO: 'VIDEO'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteTool200DataAttributesOutputType = {
  AUDIO: 'AUDIO',
  IMAGE: 'IMAGE',
  TEXT: 'TEXT',
  VIDEO: 'VIDEO'
} as const
/**
 * The tool entity
 */
export type DeleteTool200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The tool description */
  description: string
  /** The input type of the tool */
  inputType: (typeof DeleteTool200DataAttributesInputType)[keyof typeof DeleteTool200DataAttributesInputType]
  /** The name of the tool */
  name: string
  /** The organization name */
  orgname: string
  /** The output type of the tool */
  outputType: (typeof DeleteTool200DataAttributesOutputType)[keyof typeof DeleteTool200DataAttributesOutputType]
  /** The base of the tool */
  toolBase: string
}

export type DeleteTool200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type DeleteTool200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type DeleteTool200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type DeleteTool200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: DeleteTool200DataRelationshipsData
  }
}

export type DeleteTool200DataType =
  (typeof DeleteTool200DataType)[keyof typeof DeleteTool200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteTool200DataType = {
  tools: 'tools'
} as const

/**
 * Tools resource
 */
export type DeleteTool200Data = {
  /** The tool entity */
  attributes: DeleteTool200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: DeleteTool200DataLinks
  /** Non-standard meta-information */
  meta?: DeleteTool200DataMeta
  /** Relationships object */
  relationships?: DeleteTool200DataRelationships
  type: DeleteTool200DataType
}

/**
 * Tools Individual response
 */
export type DeleteTool200 = {
  /** Tools resource */
  data: DeleteTool200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOneTool200DataAttributesInputType = {
  AUDIO: 'AUDIO',
  IMAGE: 'IMAGE',
  TEXT: 'TEXT',
  VIDEO: 'VIDEO'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOneTool200DataAttributesOutputType = {
  AUDIO: 'AUDIO',
  IMAGE: 'IMAGE',
  TEXT: 'TEXT',
  VIDEO: 'VIDEO'
} as const
/**
 * The tool entity
 */
export type GetOneTool200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The tool description */
  description: string
  /** The input type of the tool */
  inputType: (typeof GetOneTool200DataAttributesInputType)[keyof typeof GetOneTool200DataAttributesInputType]
  /** The name of the tool */
  name: string
  /** The organization name */
  orgname: string
  /** The output type of the tool */
  outputType: (typeof GetOneTool200DataAttributesOutputType)[keyof typeof GetOneTool200DataAttributesOutputType]
  /** The base of the tool */
  toolBase: string
}

export type GetOneTool200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type GetOneTool200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type GetOneTool200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type GetOneTool200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: GetOneTool200DataRelationshipsData
  }
}

export type GetOneTool200DataType =
  (typeof GetOneTool200DataType)[keyof typeof GetOneTool200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOneTool200DataType = {
  tools: 'tools'
} as const

/**
 * Tools resource
 */
export type GetOneTool200Data = {
  /** The tool entity */
  attributes: GetOneTool200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: GetOneTool200DataLinks
  /** Non-standard meta-information */
  meta?: GetOneTool200DataMeta
  /** Relationships object */
  relationships?: GetOneTool200DataRelationships
  type: GetOneTool200DataType
}

/**
 * Tools Individual response
 */
export type GetOneTool200 = {
  /** Tools resource */
  data: GetOneTool200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type UpdateToolBody = {
  /** The tool description */
  description?: string
  /** The name of the tool */
  name?: string
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateTool200DataAttributesInputType = {
  AUDIO: 'AUDIO',
  IMAGE: 'IMAGE',
  TEXT: 'TEXT',
  VIDEO: 'VIDEO'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateTool200DataAttributesOutputType = {
  AUDIO: 'AUDIO',
  IMAGE: 'IMAGE',
  TEXT: 'TEXT',
  VIDEO: 'VIDEO'
} as const
/**
 * The tool entity
 */
export type UpdateTool200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The tool description */
  description: string
  /** The input type of the tool */
  inputType: (typeof UpdateTool200DataAttributesInputType)[keyof typeof UpdateTool200DataAttributesInputType]
  /** The name of the tool */
  name: string
  /** The organization name */
  orgname: string
  /** The output type of the tool */
  outputType: (typeof UpdateTool200DataAttributesOutputType)[keyof typeof UpdateTool200DataAttributesOutputType]
  /** The base of the tool */
  toolBase: string
}

export type UpdateTool200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type UpdateTool200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type UpdateTool200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type UpdateTool200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: UpdateTool200DataRelationshipsData
  }
}

export type UpdateTool200DataType =
  (typeof UpdateTool200DataType)[keyof typeof UpdateTool200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateTool200DataType = {
  tools: 'tools'
} as const

/**
 * Tools resource
 */
export type UpdateTool200Data = {
  /** The tool entity */
  attributes: UpdateTool200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: UpdateTool200DataLinks
  /** Non-standard meta-information */
  meta?: UpdateTool200DataMeta
  /** Relationships object */
  relationships?: UpdateTool200DataRelationships
  type: UpdateTool200DataType
}

/**
 * Tools Individual response
 */
export type UpdateTool200 = {
  /** Tools resource */
  data: UpdateTool200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type CreateArtifactBody = {
  /** The name of the artifact */
  name: string
  /** The artifact text */
  text?: string
  /** The artifact URL */
  url?: string
}

/**
 * The artifact entity
 */
export type CreateArtifact201DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The number of credits required to access this artifact. This is used for metering and billing purposes. */
  credits: number
  /** The artifact's description */
  description: string
  /** The artifact's embedding, used for semantic search and other ML tasks */
  embedding: number[]
  /** The MIME type of the artifact, e.g. image/png */
  mimeType: string
  /** The name of the artifact, used for display purposes */
  name: string
  /** The organization name */
  orgname: string
  /** The ID of the parent artifact, if this artifact is a child of another artifact */
  parentId: string
  /** The URL of the preview image for this artifact. This is used for displaying a thumbnail in the UI. */
  previewImage: string
  /** The ID of the run that produced this artifact, if applicable */
  producerId: string
  /** The artifact text */
  text?: string
  /** The artifact URL */
  url?: string
}

export type CreateArtifact201DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type CreateArtifact201DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type CreateArtifact201DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type CreateArtifact201DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: CreateArtifact201DataRelationshipsData
  }
}

export type CreateArtifact201DataType =
  (typeof CreateArtifact201DataType)[keyof typeof CreateArtifact201DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateArtifact201DataType = {
  artifacts: 'artifacts'
} as const

/**
 * Artifacts resource
 */
export type CreateArtifact201Data = {
  /** The artifact entity */
  attributes: CreateArtifact201DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: CreateArtifact201DataLinks
  /** Non-standard meta-information */
  meta?: CreateArtifact201DataMeta
  /** Relationships object */
  relationships?: CreateArtifact201DataRelationships
  type: CreateArtifact201DataType
}

/**
 * Artifacts Individual response
 */
export type CreateArtifact201 = {
  /** Artifacts resource */
  data: CreateArtifact201Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type FindManyArtifactsParams = {
  /**
   * Filter
   */
  filter?: {
    createdAt?: FieldFilter
    id?: FieldFilter
    updatedAt?: FieldFilter
    credits?: FieldFilter
    description?: FieldFilter
    embedding?: FieldFilter
    mimeType?: FieldFilter
    name?: FieldFilter
    orgname?: FieldFilter
    parentId?: FieldFilter
    previewImage?: FieldFilter
    producerId?: FieldFilter
    text?: FieldFilter
    url?: FieldFilter
  }
  /**
   * Pagination
   */
  page?: {
    /**
     * @minimum 0
     * @maximum 1.7976931348623157e+308
     */
    number?: number
    /**
     * @minimum 1
     * @maximum 100
     */
    size?: number
  }
  /**
   * Sort by name ascending and createdAt descending
   */
  sort?: string
}

/**
 * The artifact entity
 */
export type FindManyArtifacts200DataItemAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The number of credits required to access this artifact. This is used for metering and billing purposes. */
  credits: number
  /** The artifact's description */
  description: string
  /** The artifact's embedding, used for semantic search and other ML tasks */
  embedding: number[]
  /** The MIME type of the artifact, e.g. image/png */
  mimeType: string
  /** The name of the artifact, used for display purposes */
  name: string
  /** The organization name */
  orgname: string
  /** The ID of the parent artifact, if this artifact is a child of another artifact */
  parentId: string
  /** The URL of the preview image for this artifact. This is used for displaying a thumbnail in the UI. */
  previewImage: string
  /** The ID of the run that produced this artifact, if applicable */
  producerId: string
  /** The artifact text */
  text?: string
  /** The artifact URL */
  url?: string
}

export type FindManyArtifacts200DataItemLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type FindManyArtifacts200DataItemMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type FindManyArtifacts200DataItemRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type FindManyArtifacts200DataItemRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: FindManyArtifacts200DataItemRelationshipsData
  }
}

export type FindManyArtifacts200DataItemType =
  (typeof FindManyArtifacts200DataItemType)[keyof typeof FindManyArtifacts200DataItemType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyArtifacts200DataItemType = {
  artifacts: 'artifacts'
} as const

/**
 * Artifacts resource
 */
export type FindManyArtifacts200DataItem = {
  /** The artifact entity */
  attributes: FindManyArtifacts200DataItemAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: FindManyArtifacts200DataItemLinks
  /** Non-standard meta-information */
  meta?: FindManyArtifacts200DataItemMeta
  /** Relationships object */
  relationships?: FindManyArtifacts200DataItemRelationships
  type: FindManyArtifacts200DataItemType
}

/**
 * Artifacts collection response
 */
export type FindManyArtifacts200 = {
  data: FindManyArtifacts200DataItem[]
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

/**
 * The artifact entity
 */
export type DeleteArtifact200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The number of credits required to access this artifact. This is used for metering and billing purposes. */
  credits: number
  /** The artifact's description */
  description: string
  /** The artifact's embedding, used for semantic search and other ML tasks */
  embedding: number[]
  /** The MIME type of the artifact, e.g. image/png */
  mimeType: string
  /** The name of the artifact, used for display purposes */
  name: string
  /** The organization name */
  orgname: string
  /** The ID of the parent artifact, if this artifact is a child of another artifact */
  parentId: string
  /** The URL of the preview image for this artifact. This is used for displaying a thumbnail in the UI. */
  previewImage: string
  /** The ID of the run that produced this artifact, if applicable */
  producerId: string
  /** The artifact text */
  text?: string
  /** The artifact URL */
  url?: string
}

export type DeleteArtifact200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type DeleteArtifact200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type DeleteArtifact200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type DeleteArtifact200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: DeleteArtifact200DataRelationshipsData
  }
}

export type DeleteArtifact200DataType =
  (typeof DeleteArtifact200DataType)[keyof typeof DeleteArtifact200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteArtifact200DataType = {
  artifacts: 'artifacts'
} as const

/**
 * Artifacts resource
 */
export type DeleteArtifact200Data = {
  /** The artifact entity */
  attributes: DeleteArtifact200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: DeleteArtifact200DataLinks
  /** Non-standard meta-information */
  meta?: DeleteArtifact200DataMeta
  /** Relationships object */
  relationships?: DeleteArtifact200DataRelationships
  type: DeleteArtifact200DataType
}

/**
 * Artifacts Individual response
 */
export type DeleteArtifact200 = {
  /** Artifacts resource */
  data: DeleteArtifact200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

/**
 * The artifact entity
 */
export type GetOneArtifact200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The number of credits required to access this artifact. This is used for metering and billing purposes. */
  credits: number
  /** The artifact's description */
  description: string
  /** The artifact's embedding, used for semantic search and other ML tasks */
  embedding: number[]
  /** The MIME type of the artifact, e.g. image/png */
  mimeType: string
  /** The name of the artifact, used for display purposes */
  name: string
  /** The organization name */
  orgname: string
  /** The ID of the parent artifact, if this artifact is a child of another artifact */
  parentId: string
  /** The URL of the preview image for this artifact. This is used for displaying a thumbnail in the UI. */
  previewImage: string
  /** The ID of the run that produced this artifact, if applicable */
  producerId: string
  /** The artifact text */
  text?: string
  /** The artifact URL */
  url?: string
}

export type GetOneArtifact200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type GetOneArtifact200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type GetOneArtifact200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type GetOneArtifact200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: GetOneArtifact200DataRelationshipsData
  }
}

export type GetOneArtifact200DataType =
  (typeof GetOneArtifact200DataType)[keyof typeof GetOneArtifact200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOneArtifact200DataType = {
  artifacts: 'artifacts'
} as const

/**
 * Artifacts resource
 */
export type GetOneArtifact200Data = {
  /** The artifact entity */
  attributes: GetOneArtifact200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: GetOneArtifact200DataLinks
  /** Non-standard meta-information */
  meta?: GetOneArtifact200DataMeta
  /** Relationships object */
  relationships?: GetOneArtifact200DataRelationships
  type: GetOneArtifact200DataType
}

/**
 * Artifacts Individual response
 */
export type GetOneArtifact200 = {
  /** Artifacts resource */
  data: GetOneArtifact200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type UpdateArtifactBody = {
  /** The name of the artifact */
  name?: string
  /** The artifact text */
  text?: string
  /** The artifact URL */
  url?: string
}

/**
 * The artifact entity
 */
export type UpdateArtifact200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The number of credits required to access this artifact. This is used for metering and billing purposes. */
  credits: number
  /** The artifact's description */
  description: string
  /** The artifact's embedding, used for semantic search and other ML tasks */
  embedding: number[]
  /** The MIME type of the artifact, e.g. image/png */
  mimeType: string
  /** The name of the artifact, used for display purposes */
  name: string
  /** The organization name */
  orgname: string
  /** The ID of the parent artifact, if this artifact is a child of another artifact */
  parentId: string
  /** The URL of the preview image for this artifact. This is used for displaying a thumbnail in the UI. */
  previewImage: string
  /** The ID of the run that produced this artifact, if applicable */
  producerId: string
  /** The artifact text */
  text?: string
  /** The artifact URL */
  url?: string
}

export type UpdateArtifact200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type UpdateArtifact200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type UpdateArtifact200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type UpdateArtifact200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: UpdateArtifact200DataRelationshipsData
  }
}

export type UpdateArtifact200DataType =
  (typeof UpdateArtifact200DataType)[keyof typeof UpdateArtifact200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateArtifact200DataType = {
  artifacts: 'artifacts'
} as const

/**
 * Artifacts resource
 */
export type UpdateArtifact200Data = {
  /** The artifact entity */
  attributes: UpdateArtifact200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: UpdateArtifact200DataLinks
  /** Non-standard meta-information */
  meta?: UpdateArtifact200DataMeta
  /** Relationships object */
  relationships?: UpdateArtifact200DataRelationships
  type: UpdateArtifact200DataType
}

/**
 * Artifacts Individual response
 */
export type UpdateArtifact200 = {
  /** Artifacts resource */
  data: UpdateArtifact200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type CreateRunBody = {
  /** The pipeline ID associated with the run */
  pipelineId: string
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateRun201DataAttributesRunType = {
  PIPELINE_RUN: 'PIPELINE_RUN',
  TOOL_RUN: 'TOOL_RUN'
} as const
/**
 * The run entity
 */
export type CreateRun201DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The timestamp when the run completed */
  completedAt?: string
  /** The error message */
  error?: string
  /** The organization name */
  orgname: string
  /** The pipeline ID associated with the run */
  pipelineId: string
  /** The percent progress of the run */
  progress: number
  /** The type of run */
  runType: (typeof CreateRun201DataAttributesRunType)[keyof typeof CreateRun201DataAttributesRunType]
  /** The timestamp when the run started */
  startedAt?: string
  /** The status of the run */
  status: string
  /** The tool ID associated with the run */
  toolId: string
}

export type CreateRun201DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type CreateRun201DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type CreateRun201DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type CreateRun201DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: CreateRun201DataRelationshipsData
  }
}

export type CreateRun201DataType =
  (typeof CreateRun201DataType)[keyof typeof CreateRun201DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateRun201DataType = {
  runs: 'runs'
} as const

/**
 * Runs resource
 */
export type CreateRun201Data = {
  /** The run entity */
  attributes: CreateRun201DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: CreateRun201DataLinks
  /** Non-standard meta-information */
  meta?: CreateRun201DataMeta
  /** Relationships object */
  relationships?: CreateRun201DataRelationships
  type: CreateRun201DataType
}

/**
 * Runs Individual response
 */
export type CreateRun201 = {
  /** Runs resource */
  data: CreateRun201Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type FindManyRunsParams = {
  /**
   * Filter
   */
  filter?: {
    createdAt?: FieldFilter
    id?: FieldFilter
    updatedAt?: FieldFilter
    completedAt?: FieldFilter
    error?: FieldFilter
    orgname?: FieldFilter
    pipelineId?: FieldFilter
    progress?: FieldFilter
    runType?: FieldFilter
    startedAt?: FieldFilter
    status?: FieldFilter
    toolId?: FieldFilter
  }
  /**
   * Pagination
   */
  page?: {
    /**
     * @minimum 0
     * @maximum 1.7976931348623157e+308
     */
    number?: number
    /**
     * @minimum 1
     * @maximum 100
     */
    size?: number
  }
  /**
   * Sort by name ascending and createdAt descending
   */
  sort?: string
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyRuns200DataItemAttributesRunType = {
  PIPELINE_RUN: 'PIPELINE_RUN',
  TOOL_RUN: 'TOOL_RUN'
} as const
/**
 * The run entity
 */
export type FindManyRuns200DataItemAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The timestamp when the run completed */
  completedAt?: string
  /** The error message */
  error?: string
  /** The organization name */
  orgname: string
  /** The pipeline ID associated with the run */
  pipelineId: string
  /** The percent progress of the run */
  progress: number
  /** The type of run */
  runType: (typeof FindManyRuns200DataItemAttributesRunType)[keyof typeof FindManyRuns200DataItemAttributesRunType]
  /** The timestamp when the run started */
  startedAt?: string
  /** The status of the run */
  status: string
  /** The tool ID associated with the run */
  toolId: string
}

export type FindManyRuns200DataItemLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type FindManyRuns200DataItemMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type FindManyRuns200DataItemRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type FindManyRuns200DataItemRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: FindManyRuns200DataItemRelationshipsData
  }
}

export type FindManyRuns200DataItemType =
  (typeof FindManyRuns200DataItemType)[keyof typeof FindManyRuns200DataItemType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyRuns200DataItemType = {
  runs: 'runs'
} as const

/**
 * Runs resource
 */
export type FindManyRuns200DataItem = {
  /** The run entity */
  attributes: FindManyRuns200DataItemAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: FindManyRuns200DataItemLinks
  /** Non-standard meta-information */
  meta?: FindManyRuns200DataItemMeta
  /** Relationships object */
  relationships?: FindManyRuns200DataItemRelationships
  type: FindManyRuns200DataItemType
}

/**
 * Runs collection response
 */
export type FindManyRuns200 = {
  data: FindManyRuns200DataItem[]
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteRun200DataAttributesRunType = {
  PIPELINE_RUN: 'PIPELINE_RUN',
  TOOL_RUN: 'TOOL_RUN'
} as const
/**
 * The run entity
 */
export type DeleteRun200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The timestamp when the run completed */
  completedAt?: string
  /** The error message */
  error?: string
  /** The organization name */
  orgname: string
  /** The pipeline ID associated with the run */
  pipelineId: string
  /** The percent progress of the run */
  progress: number
  /** The type of run */
  runType: (typeof DeleteRun200DataAttributesRunType)[keyof typeof DeleteRun200DataAttributesRunType]
  /** The timestamp when the run started */
  startedAt?: string
  /** The status of the run */
  status: string
  /** The tool ID associated with the run */
  toolId: string
}

export type DeleteRun200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type DeleteRun200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type DeleteRun200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type DeleteRun200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: DeleteRun200DataRelationshipsData
  }
}

export type DeleteRun200DataType =
  (typeof DeleteRun200DataType)[keyof typeof DeleteRun200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteRun200DataType = {
  runs: 'runs'
} as const

/**
 * Runs resource
 */
export type DeleteRun200Data = {
  /** The run entity */
  attributes: DeleteRun200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: DeleteRun200DataLinks
  /** Non-standard meta-information */
  meta?: DeleteRun200DataMeta
  /** Relationships object */
  relationships?: DeleteRun200DataRelationships
  type: DeleteRun200DataType
}

/**
 * Runs Individual response
 */
export type DeleteRun200 = {
  /** Runs resource */
  data: DeleteRun200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOneRun200DataAttributesRunType = {
  PIPELINE_RUN: 'PIPELINE_RUN',
  TOOL_RUN: 'TOOL_RUN'
} as const
/**
 * The run entity
 */
export type GetOneRun200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The timestamp when the run completed */
  completedAt?: string
  /** The error message */
  error?: string
  /** The organization name */
  orgname: string
  /** The pipeline ID associated with the run */
  pipelineId: string
  /** The percent progress of the run */
  progress: number
  /** The type of run */
  runType: (typeof GetOneRun200DataAttributesRunType)[keyof typeof GetOneRun200DataAttributesRunType]
  /** The timestamp when the run started */
  startedAt?: string
  /** The status of the run */
  status: string
  /** The tool ID associated with the run */
  toolId: string
}

export type GetOneRun200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type GetOneRun200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type GetOneRun200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type GetOneRun200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: GetOneRun200DataRelationshipsData
  }
}

export type GetOneRun200DataType =
  (typeof GetOneRun200DataType)[keyof typeof GetOneRun200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOneRun200DataType = {
  runs: 'runs'
} as const

/**
 * Runs resource
 */
export type GetOneRun200Data = {
  /** The run entity */
  attributes: GetOneRun200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: GetOneRun200DataLinks
  /** Non-standard meta-information */
  meta?: GetOneRun200DataMeta
  /** Relationships object */
  relationships?: GetOneRun200DataRelationships
  type: GetOneRun200DataType
}

/**
 * Runs Individual response
 */
export type GetOneRun200 = {
  /** Runs resource */
  data: GetOneRun200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type UpdateRunBody = {
  /** The pipeline ID associated with the run */
  pipelineId?: string
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateRun200DataAttributesRunType = {
  PIPELINE_RUN: 'PIPELINE_RUN',
  TOOL_RUN: 'TOOL_RUN'
} as const
/**
 * The run entity
 */
export type UpdateRun200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The timestamp when the run completed */
  completedAt?: string
  /** The error message */
  error?: string
  /** The organization name */
  orgname: string
  /** The pipeline ID associated with the run */
  pipelineId: string
  /** The percent progress of the run */
  progress: number
  /** The type of run */
  runType: (typeof UpdateRun200DataAttributesRunType)[keyof typeof UpdateRun200DataAttributesRunType]
  /** The timestamp when the run started */
  startedAt?: string
  /** The status of the run */
  status: string
  /** The tool ID associated with the run */
  toolId: string
}

export type UpdateRun200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type UpdateRun200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type UpdateRun200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type UpdateRun200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: UpdateRun200DataRelationshipsData
  }
}

export type UpdateRun200DataType =
  (typeof UpdateRun200DataType)[keyof typeof UpdateRun200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateRun200DataType = {
  runs: 'runs'
} as const

/**
 * Runs resource
 */
export type UpdateRun200Data = {
  /** The run entity */
  attributes: UpdateRun200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: UpdateRun200DataLinks
  /** Non-standard meta-information */
  meta?: UpdateRun200DataMeta
  /** Relationships object */
  relationships?: UpdateRun200DataRelationships
  type: UpdateRun200DataType
}

/**
 * Runs Individual response
 */
export type UpdateRun200 = {
  /** Runs resource */
  data: UpdateRun200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type CreateLabelBody = {
  /** The name of the label */
  name: string
}

/**
 * The label entity
 */
export type CreateLabel201DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The name of the label */
  name: string
  /** The organization name */
  orgname: string
}

export type CreateLabel201DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type CreateLabel201DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type CreateLabel201DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type CreateLabel201DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: CreateLabel201DataRelationshipsData
  }
}

export type CreateLabel201DataType =
  (typeof CreateLabel201DataType)[keyof typeof CreateLabel201DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateLabel201DataType = {
  labels: 'labels'
} as const

/**
 * Labels resource
 */
export type CreateLabel201Data = {
  /** The label entity */
  attributes: CreateLabel201DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: CreateLabel201DataLinks
  /** Non-standard meta-information */
  meta?: CreateLabel201DataMeta
  /** Relationships object */
  relationships?: CreateLabel201DataRelationships
  type: CreateLabel201DataType
}

/**
 * Labels Individual response
 */
export type CreateLabel201 = {
  /** Labels resource */
  data: CreateLabel201Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type FindManyLabelsParams = {
  /**
   * Filter
   */
  filter?: {
    createdAt?: FieldFilter
    id?: FieldFilter
    updatedAt?: FieldFilter
    name?: FieldFilter
    orgname?: FieldFilter
  }
  /**
   * Pagination
   */
  page?: {
    /**
     * @minimum 0
     * @maximum 1.7976931348623157e+308
     */
    number?: number
    /**
     * @minimum 1
     * @maximum 100
     */
    size?: number
  }
  /**
   * Sort by name ascending and createdAt descending
   */
  sort?: string
}

/**
 * The label entity
 */
export type FindManyLabels200DataItemAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The name of the label */
  name: string
  /** The organization name */
  orgname: string
}

export type FindManyLabels200DataItemLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type FindManyLabels200DataItemMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type FindManyLabels200DataItemRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type FindManyLabels200DataItemRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: FindManyLabels200DataItemRelationshipsData
  }
}

export type FindManyLabels200DataItemType =
  (typeof FindManyLabels200DataItemType)[keyof typeof FindManyLabels200DataItemType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyLabels200DataItemType = {
  labels: 'labels'
} as const

/**
 * Labels resource
 */
export type FindManyLabels200DataItem = {
  /** The label entity */
  attributes: FindManyLabels200DataItemAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: FindManyLabels200DataItemLinks
  /** Non-standard meta-information */
  meta?: FindManyLabels200DataItemMeta
  /** Relationships object */
  relationships?: FindManyLabels200DataItemRelationships
  type: FindManyLabels200DataItemType
}

/**
 * Labels collection response
 */
export type FindManyLabels200 = {
  data: FindManyLabels200DataItem[]
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

/**
 * The label entity
 */
export type DeleteLabel200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The name of the label */
  name: string
  /** The organization name */
  orgname: string
}

export type DeleteLabel200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type DeleteLabel200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type DeleteLabel200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type DeleteLabel200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: DeleteLabel200DataRelationshipsData
  }
}

export type DeleteLabel200DataType =
  (typeof DeleteLabel200DataType)[keyof typeof DeleteLabel200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteLabel200DataType = {
  labels: 'labels'
} as const

/**
 * Labels resource
 */
export type DeleteLabel200Data = {
  /** The label entity */
  attributes: DeleteLabel200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: DeleteLabel200DataLinks
  /** Non-standard meta-information */
  meta?: DeleteLabel200DataMeta
  /** Relationships object */
  relationships?: DeleteLabel200DataRelationships
  type: DeleteLabel200DataType
}

/**
 * Labels Individual response
 */
export type DeleteLabel200 = {
  /** Labels resource */
  data: DeleteLabel200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

/**
 * The label entity
 */
export type GetOneLabel200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The name of the label */
  name: string
  /** The organization name */
  orgname: string
}

export type GetOneLabel200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type GetOneLabel200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type GetOneLabel200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type GetOneLabel200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: GetOneLabel200DataRelationshipsData
  }
}

export type GetOneLabel200DataType =
  (typeof GetOneLabel200DataType)[keyof typeof GetOneLabel200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOneLabel200DataType = {
  labels: 'labels'
} as const

/**
 * Labels resource
 */
export type GetOneLabel200Data = {
  /** The label entity */
  attributes: GetOneLabel200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: GetOneLabel200DataLinks
  /** Non-standard meta-information */
  meta?: GetOneLabel200DataMeta
  /** Relationships object */
  relationships?: GetOneLabel200DataRelationships
  type: GetOneLabel200DataType
}

/**
 * Labels Individual response
 */
export type GetOneLabel200 = {
  /** Labels resource */
  data: GetOneLabel200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type UpdateLabelBody = {
  /** The name of the label */
  name?: string
}

/**
 * The label entity
 */
export type UpdateLabel200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The name of the label */
  name: string
  /** The organization name */
  orgname: string
}

export type UpdateLabel200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type UpdateLabel200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type UpdateLabel200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type UpdateLabel200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: UpdateLabel200DataRelationshipsData
  }
}

export type UpdateLabel200DataType =
  (typeof UpdateLabel200DataType)[keyof typeof UpdateLabel200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateLabel200DataType = {
  labels: 'labels'
} as const

/**
 * Labels resource
 */
export type UpdateLabel200Data = {
  /** The label entity */
  attributes: UpdateLabel200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: UpdateLabel200DataLinks
  /** Non-standard meta-information */
  meta?: UpdateLabel200DataMeta
  /** Relationships object */
  relationships?: UpdateLabel200DataRelationships
  type: UpdateLabel200DataType
}

/**
 * Labels Individual response
 */
export type UpdateLabel200 = {
  /** Labels resource */
  data: UpdateLabel200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type CreateOrganizationBody = {
  /** The billing email to use for the organization */
  billingEmail: string
  /** The organization name */
  orgname: string
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateOrganization201DataAttributesPlan = {
  BASIC: 'BASIC',
  FREE: 'FREE',
  PREMIUM: 'PREMIUM',
  STANDARD: 'STANDARD',
  UNLIMITED: 'UNLIMITED'
} as const
/**
 * The organization entity
 */
export type CreateOrganization201DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The billing email to use for the organization */
  billingEmail: string
  /** The user who created the organization */
  creator?: string
  /** The number of credits you have remaining for this organization */
  credits: number
  /** The Stripe customer ID */
  customerId?: string
  /** The organization name */
  orgname: string
  /** The plan that the organization is subscribed to */
  plan: (typeof CreateOrganization201DataAttributesPlan)[keyof typeof CreateOrganization201DataAttributesPlan]
}

export type CreateOrganization201DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type CreateOrganization201DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type CreateOrganization201DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type CreateOrganization201DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: CreateOrganization201DataRelationshipsData
  }
}

export type CreateOrganization201DataType =
  (typeof CreateOrganization201DataType)[keyof typeof CreateOrganization201DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateOrganization201DataType = {
  organizations: 'organizations'
} as const

/**
 * Organizations resource
 */
export type CreateOrganization201Data = {
  /** The organization entity */
  attributes: CreateOrganization201DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: CreateOrganization201DataLinks
  /** Non-standard meta-information */
  meta?: CreateOrganization201DataMeta
  /** Relationships object */
  relationships?: CreateOrganization201DataRelationships
  type: CreateOrganization201DataType
}

/**
 * Organizations Individual response
 */
export type CreateOrganization201 = {
  /** Organizations resource */
  data: CreateOrganization201Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type FindManyOrganizationsParams = {
  /**
   * Filter
   */
  filter?: {
    createdAt?: FieldFilter
    id?: FieldFilter
    updatedAt?: FieldFilter
    billingEmail?: FieldFilter
    creator?: FieldFilter
    credits?: FieldFilter
    customerId?: FieldFilter
    orgname?: FieldFilter
    plan?: FieldFilter
  }
  /**
   * Pagination
   */
  page?: {
    /**
     * @minimum 0
     * @maximum 1.7976931348623157e+308
     */
    number?: number
    /**
     * @minimum 1
     * @maximum 100
     */
    size?: number
  }
  /**
   * Sort by name ascending and createdAt descending
   */
  sort?: string
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyOrganizations200DataItemAttributesPlan = {
  BASIC: 'BASIC',
  FREE: 'FREE',
  PREMIUM: 'PREMIUM',
  STANDARD: 'STANDARD',
  UNLIMITED: 'UNLIMITED'
} as const
/**
 * The organization entity
 */
export type FindManyOrganizations200DataItemAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The billing email to use for the organization */
  billingEmail: string
  /** The user who created the organization */
  creator?: string
  /** The number of credits you have remaining for this organization */
  credits: number
  /** The Stripe customer ID */
  customerId?: string
  /** The organization name */
  orgname: string
  /** The plan that the organization is subscribed to */
  plan: (typeof FindManyOrganizations200DataItemAttributesPlan)[keyof typeof FindManyOrganizations200DataItemAttributesPlan]
}

export type FindManyOrganizations200DataItemLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type FindManyOrganizations200DataItemMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type FindManyOrganizations200DataItemRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type FindManyOrganizations200DataItemRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: FindManyOrganizations200DataItemRelationshipsData
  }
}

export type FindManyOrganizations200DataItemType =
  (typeof FindManyOrganizations200DataItemType)[keyof typeof FindManyOrganizations200DataItemType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyOrganizations200DataItemType = {
  organizations: 'organizations'
} as const

/**
 * Organizations resource
 */
export type FindManyOrganizations200DataItem = {
  /** The organization entity */
  attributes: FindManyOrganizations200DataItemAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: FindManyOrganizations200DataItemLinks
  /** Non-standard meta-information */
  meta?: FindManyOrganizations200DataItemMeta
  /** Relationships object */
  relationships?: FindManyOrganizations200DataItemRelationships
  type: FindManyOrganizations200DataItemType
}

/**
 * Organizations collection response
 */
export type FindManyOrganizations200 = {
  data: FindManyOrganizations200DataItem[]
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteOrganization200DataAttributesPlan = {
  BASIC: 'BASIC',
  FREE: 'FREE',
  PREMIUM: 'PREMIUM',
  STANDARD: 'STANDARD',
  UNLIMITED: 'UNLIMITED'
} as const
/**
 * The organization entity
 */
export type DeleteOrganization200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The billing email to use for the organization */
  billingEmail: string
  /** The user who created the organization */
  creator?: string
  /** The number of credits you have remaining for this organization */
  credits: number
  /** The Stripe customer ID */
  customerId?: string
  /** The organization name */
  orgname: string
  /** The plan that the organization is subscribed to */
  plan: (typeof DeleteOrganization200DataAttributesPlan)[keyof typeof DeleteOrganization200DataAttributesPlan]
}

export type DeleteOrganization200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type DeleteOrganization200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type DeleteOrganization200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type DeleteOrganization200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: DeleteOrganization200DataRelationshipsData
  }
}

export type DeleteOrganization200DataType =
  (typeof DeleteOrganization200DataType)[keyof typeof DeleteOrganization200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteOrganization200DataType = {
  organizations: 'organizations'
} as const

/**
 * Organizations resource
 */
export type DeleteOrganization200Data = {
  /** The organization entity */
  attributes: DeleteOrganization200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: DeleteOrganization200DataLinks
  /** Non-standard meta-information */
  meta?: DeleteOrganization200DataMeta
  /** Relationships object */
  relationships?: DeleteOrganization200DataRelationships
  type: DeleteOrganization200DataType
}

/**
 * Organizations Individual response
 */
export type DeleteOrganization200 = {
  /** Organizations resource */
  data: DeleteOrganization200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOneOrganization200DataAttributesPlan = {
  BASIC: 'BASIC',
  FREE: 'FREE',
  PREMIUM: 'PREMIUM',
  STANDARD: 'STANDARD',
  UNLIMITED: 'UNLIMITED'
} as const
/**
 * The organization entity
 */
export type GetOneOrganization200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The billing email to use for the organization */
  billingEmail: string
  /** The user who created the organization */
  creator?: string
  /** The number of credits you have remaining for this organization */
  credits: number
  /** The Stripe customer ID */
  customerId?: string
  /** The organization name */
  orgname: string
  /** The plan that the organization is subscribed to */
  plan: (typeof GetOneOrganization200DataAttributesPlan)[keyof typeof GetOneOrganization200DataAttributesPlan]
}

export type GetOneOrganization200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type GetOneOrganization200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type GetOneOrganization200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type GetOneOrganization200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: GetOneOrganization200DataRelationshipsData
  }
}

export type GetOneOrganization200DataType =
  (typeof GetOneOrganization200DataType)[keyof typeof GetOneOrganization200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOneOrganization200DataType = {
  organizations: 'organizations'
} as const

/**
 * Organizations resource
 */
export type GetOneOrganization200Data = {
  /** The organization entity */
  attributes: GetOneOrganization200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: GetOneOrganization200DataLinks
  /** Non-standard meta-information */
  meta?: GetOneOrganization200DataMeta
  /** Relationships object */
  relationships?: GetOneOrganization200DataRelationships
  type: GetOneOrganization200DataType
}

/**
 * Organizations Individual response
 */
export type GetOneOrganization200 = {
  /** Organizations resource */
  data: GetOneOrganization200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type UpdateOrganizationBody = {
  /** The billing email to use for the organization */
  billingEmail?: string
  /** The organization name */
  orgname?: string
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateOrganization200DataAttributesPlan = {
  BASIC: 'BASIC',
  FREE: 'FREE',
  PREMIUM: 'PREMIUM',
  STANDARD: 'STANDARD',
  UNLIMITED: 'UNLIMITED'
} as const
/**
 * The organization entity
 */
export type UpdateOrganization200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The billing email to use for the organization */
  billingEmail: string
  /** The user who created the organization */
  creator?: string
  /** The number of credits you have remaining for this organization */
  credits: number
  /** The Stripe customer ID */
  customerId?: string
  /** The organization name */
  orgname: string
  /** The plan that the organization is subscribed to */
  plan: (typeof UpdateOrganization200DataAttributesPlan)[keyof typeof UpdateOrganization200DataAttributesPlan]
}

export type UpdateOrganization200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type UpdateOrganization200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type UpdateOrganization200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type UpdateOrganization200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: UpdateOrganization200DataRelationshipsData
  }
}

export type UpdateOrganization200DataType =
  (typeof UpdateOrganization200DataType)[keyof typeof UpdateOrganization200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateOrganization200DataType = {
  organizations: 'organizations'
} as const

/**
 * Organizations resource
 */
export type UpdateOrganization200Data = {
  /** The organization entity */
  attributes: UpdateOrganization200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: UpdateOrganization200DataLinks
  /** Non-standard meta-information */
  meta?: UpdateOrganization200DataMeta
  /** Relationships object */
  relationships?: UpdateOrganization200DataRelationships
  type: UpdateOrganization200DataType
}

/**
 * Organizations Individual response
 */
export type UpdateOrganization200 = {
  /** Organizations resource */
  data: UpdateOrganization200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type CreateUserBody = {
  /** The user's e-mail */
  email: string
  /** The user's avatar image URL */
  image?: string
  /** The user's organization name */
  orgname: string
}

/**
 * The user entity
 */
export type CreateUser201DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** Whether or not the user is deactivated */
  deactivated: boolean
  /** The user's e-mail */
  email: string
  /** Whether or not the user's e-mail has been verified */
  emailVerified?: string
  /** The user's avatar image URL */
  image?: string
  /** The user's organization name */
  orgname: string
}

export type CreateUser201DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type CreateUser201DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type CreateUser201DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type CreateUser201DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: CreateUser201DataRelationshipsData
  }
}

export type CreateUser201DataType =
  (typeof CreateUser201DataType)[keyof typeof CreateUser201DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateUser201DataType = {
  users: 'users'
} as const

/**
 * Users resource
 */
export type CreateUser201Data = {
  /** The user entity */
  attributes: CreateUser201DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: CreateUser201DataLinks
  /** Non-standard meta-information */
  meta?: CreateUser201DataMeta
  /** Relationships object */
  relationships?: CreateUser201DataRelationships
  type: CreateUser201DataType
}

/**
 * Users Individual response
 */
export type CreateUser201 = {
  /** Users resource */
  data: CreateUser201Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type FindManyUsersParams = {
  /**
   * Filter
   */
  filter?: {
    createdAt?: FieldFilter
    id?: FieldFilter
    updatedAt?: FieldFilter
    deactivated?: FieldFilter
    email?: FieldFilter
    emailVerified?: FieldFilter
    image?: FieldFilter
    orgname?: FieldFilter
  }
  /**
   * Pagination
   */
  page?: {
    /**
     * @minimum 0
     * @maximum 1.7976931348623157e+308
     */
    number?: number
    /**
     * @minimum 1
     * @maximum 100
     */
    size?: number
  }
  /**
   * Sort by name ascending and createdAt descending
   */
  sort?: string
}

/**
 * The user entity
 */
export type FindManyUsers200DataItemAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** Whether or not the user is deactivated */
  deactivated: boolean
  /** The user's e-mail */
  email: string
  /** Whether or not the user's e-mail has been verified */
  emailVerified?: string
  /** The user's avatar image URL */
  image?: string
  /** The user's organization name */
  orgname: string
}

export type FindManyUsers200DataItemLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type FindManyUsers200DataItemMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type FindManyUsers200DataItemRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type FindManyUsers200DataItemRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: FindManyUsers200DataItemRelationshipsData
  }
}

export type FindManyUsers200DataItemType =
  (typeof FindManyUsers200DataItemType)[keyof typeof FindManyUsers200DataItemType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyUsers200DataItemType = {
  users: 'users'
} as const

/**
 * Users resource
 */
export type FindManyUsers200DataItem = {
  /** The user entity */
  attributes: FindManyUsers200DataItemAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: FindManyUsers200DataItemLinks
  /** Non-standard meta-information */
  meta?: FindManyUsers200DataItemMeta
  /** Relationships object */
  relationships?: FindManyUsers200DataItemRelationships
  type: FindManyUsers200DataItemType
}

/**
 * Users collection response
 */
export type FindManyUsers200 = {
  data: FindManyUsers200DataItem[]
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

/**
 * The user entity
 */
export type DeleteUser200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** Whether or not the user is deactivated */
  deactivated: boolean
  /** The user's e-mail */
  email: string
  /** Whether or not the user's e-mail has been verified */
  emailVerified?: string
  /** The user's avatar image URL */
  image?: string
  /** The user's organization name */
  orgname: string
}

export type DeleteUser200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type DeleteUser200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type DeleteUser200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type DeleteUser200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: DeleteUser200DataRelationshipsData
  }
}

export type DeleteUser200DataType =
  (typeof DeleteUser200DataType)[keyof typeof DeleteUser200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteUser200DataType = {
  users: 'users'
} as const

/**
 * Users resource
 */
export type DeleteUser200Data = {
  /** The user entity */
  attributes: DeleteUser200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: DeleteUser200DataLinks
  /** Non-standard meta-information */
  meta?: DeleteUser200DataMeta
  /** Relationships object */
  relationships?: DeleteUser200DataRelationships
  type: DeleteUser200DataType
}

/**
 * Users Individual response
 */
export type DeleteUser200 = {
  /** Users resource */
  data: DeleteUser200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

/**
 * The user entity
 */
export type GetOneUser200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** Whether or not the user is deactivated */
  deactivated: boolean
  /** The user's e-mail */
  email: string
  /** Whether or not the user's e-mail has been verified */
  emailVerified?: string
  /** The user's avatar image URL */
  image?: string
  /** The user's organization name */
  orgname: string
}

export type GetOneUser200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type GetOneUser200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type GetOneUser200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type GetOneUser200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: GetOneUser200DataRelationshipsData
  }
}

export type GetOneUser200DataType =
  (typeof GetOneUser200DataType)[keyof typeof GetOneUser200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOneUser200DataType = {
  users: 'users'
} as const

/**
 * Users resource
 */
export type GetOneUser200Data = {
  /** The user entity */
  attributes: GetOneUser200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: GetOneUser200DataLinks
  /** Non-standard meta-information */
  meta?: GetOneUser200DataMeta
  /** Relationships object */
  relationships?: GetOneUser200DataRelationships
  type: GetOneUser200DataType
}

/**
 * Users Individual response
 */
export type GetOneUser200 = {
  /** Users resource */
  data: GetOneUser200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type UpdateUserBody = {
  /** The user's e-mail */
  email?: string
  /** The user's avatar image URL */
  image?: string
  /** The user's organization name */
  orgname?: string
}

/**
 * The user entity
 */
export type UpdateUser200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** Whether or not the user is deactivated */
  deactivated: boolean
  /** The user's e-mail */
  email: string
  /** Whether or not the user's e-mail has been verified */
  emailVerified?: string
  /** The user's avatar image URL */
  image?: string
  /** The user's organization name */
  orgname: string
}

export type UpdateUser200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type UpdateUser200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type UpdateUser200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type UpdateUser200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: UpdateUser200DataRelationshipsData
  }
}

export type UpdateUser200DataType =
  (typeof UpdateUser200DataType)[keyof typeof UpdateUser200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateUser200DataType = {
  users: 'users'
} as const

/**
 * Users resource
 */
export type UpdateUser200Data = {
  /** The user entity */
  attributes: UpdateUser200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: UpdateUser200DataLinks
  /** Non-standard meta-information */
  meta?: UpdateUser200DataMeta
  /** Relationships object */
  relationships?: UpdateUser200DataRelationships
  type: UpdateUser200DataType
}

/**
 * Users Individual response
 */
export type UpdateUser200 = {
  /** Users resource */
  data: UpdateUser200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateMemberBodyRole = { ADMIN: 'ADMIN', USER: 'USER' } as const
export type CreateMemberBody = {
  /** The role of the member */
  role: (typeof CreateMemberBodyRole)[keyof typeof CreateMemberBodyRole]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateMember201DataAttributesRole = {
  ADMIN: 'ADMIN',
  USER: 'USER'
} as const
/**
 * The member entity
 */
export type CreateMember201DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The invitation id */
  invitationId: string
  /** The organization name */
  orgname: string
  /** The role of the member */
  role: (typeof CreateMember201DataAttributesRole)[keyof typeof CreateMember201DataAttributesRole]
  /** The user id */
  userId: string
}

export type CreateMember201DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type CreateMember201DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type CreateMember201DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type CreateMember201DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: CreateMember201DataRelationshipsData
  }
}

export type CreateMember201DataType =
  (typeof CreateMember201DataType)[keyof typeof CreateMember201DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateMember201DataType = {
  members: 'members'
} as const

/**
 * Members resource
 */
export type CreateMember201Data = {
  /** The member entity */
  attributes: CreateMember201DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: CreateMember201DataLinks
  /** Non-standard meta-information */
  meta?: CreateMember201DataMeta
  /** Relationships object */
  relationships?: CreateMember201DataRelationships
  type: CreateMember201DataType
}

/**
 * Members Individual response
 */
export type CreateMember201 = {
  /** Members resource */
  data: CreateMember201Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type FindManyMembersParams = {
  /**
   * Filter
   */
  filter?: {
    createdAt?: FieldFilter
    id?: FieldFilter
    updatedAt?: FieldFilter
    invitationId?: FieldFilter
    orgname?: FieldFilter
    role?: FieldFilter
    userId?: FieldFilter
  }
  /**
   * Pagination
   */
  page?: {
    /**
     * @minimum 0
     * @maximum 1.7976931348623157e+308
     */
    number?: number
    /**
     * @minimum 1
     * @maximum 100
     */
    size?: number
  }
  /**
   * Sort by name ascending and createdAt descending
   */
  sort?: string
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyMembers200DataItemAttributesRole = {
  ADMIN: 'ADMIN',
  USER: 'USER'
} as const
/**
 * The member entity
 */
export type FindManyMembers200DataItemAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The invitation id */
  invitationId: string
  /** The organization name */
  orgname: string
  /** The role of the member */
  role: (typeof FindManyMembers200DataItemAttributesRole)[keyof typeof FindManyMembers200DataItemAttributesRole]
  /** The user id */
  userId: string
}

export type FindManyMembers200DataItemLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type FindManyMembers200DataItemMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type FindManyMembers200DataItemRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type FindManyMembers200DataItemRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: FindManyMembers200DataItemRelationshipsData
  }
}

export type FindManyMembers200DataItemType =
  (typeof FindManyMembers200DataItemType)[keyof typeof FindManyMembers200DataItemType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyMembers200DataItemType = {
  members: 'members'
} as const

/**
 * Members resource
 */
export type FindManyMembers200DataItem = {
  /** The member entity */
  attributes: FindManyMembers200DataItemAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: FindManyMembers200DataItemLinks
  /** Non-standard meta-information */
  meta?: FindManyMembers200DataItemMeta
  /** Relationships object */
  relationships?: FindManyMembers200DataItemRelationships
  type: FindManyMembers200DataItemType
}

/**
 * Members collection response
 */
export type FindManyMembers200 = {
  data: FindManyMembers200DataItem[]
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteMember200DataAttributesRole = {
  ADMIN: 'ADMIN',
  USER: 'USER'
} as const
/**
 * The member entity
 */
export type DeleteMember200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The invitation id */
  invitationId: string
  /** The organization name */
  orgname: string
  /** The role of the member */
  role: (typeof DeleteMember200DataAttributesRole)[keyof typeof DeleteMember200DataAttributesRole]
  /** The user id */
  userId: string
}

export type DeleteMember200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type DeleteMember200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type DeleteMember200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type DeleteMember200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: DeleteMember200DataRelationshipsData
  }
}

export type DeleteMember200DataType =
  (typeof DeleteMember200DataType)[keyof typeof DeleteMember200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteMember200DataType = {
  members: 'members'
} as const

/**
 * Members resource
 */
export type DeleteMember200Data = {
  /** The member entity */
  attributes: DeleteMember200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: DeleteMember200DataLinks
  /** Non-standard meta-information */
  meta?: DeleteMember200DataMeta
  /** Relationships object */
  relationships?: DeleteMember200DataRelationships
  type: DeleteMember200DataType
}

/**
 * Members Individual response
 */
export type DeleteMember200 = {
  /** Members resource */
  data: DeleteMember200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOneMember200DataAttributesRole = {
  ADMIN: 'ADMIN',
  USER: 'USER'
} as const
/**
 * The member entity
 */
export type GetOneMember200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The invitation id */
  invitationId: string
  /** The organization name */
  orgname: string
  /** The role of the member */
  role: (typeof GetOneMember200DataAttributesRole)[keyof typeof GetOneMember200DataAttributesRole]
  /** The user id */
  userId: string
}

export type GetOneMember200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type GetOneMember200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type GetOneMember200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type GetOneMember200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: GetOneMember200DataRelationshipsData
  }
}

export type GetOneMember200DataType =
  (typeof GetOneMember200DataType)[keyof typeof GetOneMember200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOneMember200DataType = {
  members: 'members'
} as const

/**
 * Members resource
 */
export type GetOneMember200Data = {
  /** The member entity */
  attributes: GetOneMember200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: GetOneMember200DataLinks
  /** Non-standard meta-information */
  meta?: GetOneMember200DataMeta
  /** Relationships object */
  relationships?: GetOneMember200DataRelationships
  type: GetOneMember200DataType
}

/**
 * Members Individual response
 */
export type GetOneMember200 = {
  /** Members resource */
  data: GetOneMember200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateMemberBodyRole = { ADMIN: 'ADMIN', USER: 'USER' } as const
export type UpdateMemberBody = {
  /** The role of the member */
  role?: (typeof UpdateMemberBodyRole)[keyof typeof UpdateMemberBodyRole]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateMember200DataAttributesRole = {
  ADMIN: 'ADMIN',
  USER: 'USER'
} as const
/**
 * The member entity
 */
export type UpdateMember200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The invitation id */
  invitationId: string
  /** The organization name */
  orgname: string
  /** The role of the member */
  role: (typeof UpdateMember200DataAttributesRole)[keyof typeof UpdateMember200DataAttributesRole]
  /** The user id */
  userId: string
}

export type UpdateMember200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type UpdateMember200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type UpdateMember200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type UpdateMember200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: UpdateMember200DataRelationshipsData
  }
}

export type UpdateMember200DataType =
  (typeof UpdateMember200DataType)[keyof typeof UpdateMember200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateMember200DataType = {
  members: 'members'
} as const

/**
 * Members resource
 */
export type UpdateMember200Data = {
  /** The member entity */
  attributes: UpdateMember200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: UpdateMember200DataLinks
  /** Non-standard meta-information */
  meta?: UpdateMember200DataMeta
  /** Relationships object */
  relationships?: UpdateMember200DataRelationships
  type: UpdateMember200DataType
}

/**
 * Members Individual response
 */
export type UpdateMember200 = {
  /** Members resource */
  data: UpdateMember200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateInvitationBodyRole = {
  ADMIN: 'ADMIN',
  USER: 'USER'
} as const
export type CreateInvitationBody = {
  /** The email of the invitated user */
  email: string
  /** The role of the invitation */
  role: (typeof CreateInvitationBodyRole)[keyof typeof CreateInvitationBodyRole]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateInvitation201DataAttributesRole = {
  ADMIN: 'ADMIN',
  USER: 'USER'
} as const
/**
 * The invitation entity
 */
export type CreateInvitation201DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** Whether the invite was accepted */
  accepted: boolean
  /** The email of the invitated user */
  email: string
  /** The name of the organization the token belongs to */
  orgname: string
  /** The role of the invitation */
  role: (typeof CreateInvitation201DataAttributesRole)[keyof typeof CreateInvitation201DataAttributesRole]
}

export type CreateInvitation201DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type CreateInvitation201DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type CreateInvitation201DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type CreateInvitation201DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: CreateInvitation201DataRelationshipsData
  }
}

export type CreateInvitation201DataType =
  (typeof CreateInvitation201DataType)[keyof typeof CreateInvitation201DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateInvitation201DataType = {
  invitations: 'invitations'
} as const

/**
 * Invitations resource
 */
export type CreateInvitation201Data = {
  /** The invitation entity */
  attributes: CreateInvitation201DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: CreateInvitation201DataLinks
  /** Non-standard meta-information */
  meta?: CreateInvitation201DataMeta
  /** Relationships object */
  relationships?: CreateInvitation201DataRelationships
  type: CreateInvitation201DataType
}

/**
 * Invitations Individual response
 */
export type CreateInvitation201 = {
  /** Invitations resource */
  data: CreateInvitation201Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type FindManyInvitationsParams = {
  /**
   * Filter
   */
  filter?: {
    createdAt?: FieldFilter
    id?: FieldFilter
    updatedAt?: FieldFilter
    accepted?: FieldFilter
    email?: FieldFilter
    orgname?: FieldFilter
    role?: FieldFilter
  }
  /**
   * Pagination
   */
  page?: {
    /**
     * @minimum 0
     * @maximum 1.7976931348623157e+308
     */
    number?: number
    /**
     * @minimum 1
     * @maximum 100
     */
    size?: number
  }
  /**
   * Sort by name ascending and createdAt descending
   */
  sort?: string
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyInvitations200DataItemAttributesRole = {
  ADMIN: 'ADMIN',
  USER: 'USER'
} as const
/**
 * The invitation entity
 */
export type FindManyInvitations200DataItemAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** Whether the invite was accepted */
  accepted: boolean
  /** The email of the invitated user */
  email: string
  /** The name of the organization the token belongs to */
  orgname: string
  /** The role of the invitation */
  role: (typeof FindManyInvitations200DataItemAttributesRole)[keyof typeof FindManyInvitations200DataItemAttributesRole]
}

export type FindManyInvitations200DataItemLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type FindManyInvitations200DataItemMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type FindManyInvitations200DataItemRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type FindManyInvitations200DataItemRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: FindManyInvitations200DataItemRelationshipsData
  }
}

export type FindManyInvitations200DataItemType =
  (typeof FindManyInvitations200DataItemType)[keyof typeof FindManyInvitations200DataItemType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyInvitations200DataItemType = {
  invitations: 'invitations'
} as const

/**
 * Invitations resource
 */
export type FindManyInvitations200DataItem = {
  /** The invitation entity */
  attributes: FindManyInvitations200DataItemAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: FindManyInvitations200DataItemLinks
  /** Non-standard meta-information */
  meta?: FindManyInvitations200DataItemMeta
  /** Relationships object */
  relationships?: FindManyInvitations200DataItemRelationships
  type: FindManyInvitations200DataItemType
}

/**
 * Invitations collection response
 */
export type FindManyInvitations200 = {
  data: FindManyInvitations200DataItem[]
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteInvitation200DataAttributesRole = {
  ADMIN: 'ADMIN',
  USER: 'USER'
} as const
/**
 * The invitation entity
 */
export type DeleteInvitation200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** Whether the invite was accepted */
  accepted: boolean
  /** The email of the invitated user */
  email: string
  /** The name of the organization the token belongs to */
  orgname: string
  /** The role of the invitation */
  role: (typeof DeleteInvitation200DataAttributesRole)[keyof typeof DeleteInvitation200DataAttributesRole]
}

export type DeleteInvitation200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type DeleteInvitation200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type DeleteInvitation200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type DeleteInvitation200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: DeleteInvitation200DataRelationshipsData
  }
}

export type DeleteInvitation200DataType =
  (typeof DeleteInvitation200DataType)[keyof typeof DeleteInvitation200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteInvitation200DataType = {
  invitations: 'invitations'
} as const

/**
 * Invitations resource
 */
export type DeleteInvitation200Data = {
  /** The invitation entity */
  attributes: DeleteInvitation200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: DeleteInvitation200DataLinks
  /** Non-standard meta-information */
  meta?: DeleteInvitation200DataMeta
  /** Relationships object */
  relationships?: DeleteInvitation200DataRelationships
  type: DeleteInvitation200DataType
}

/**
 * Invitations Individual response
 */
export type DeleteInvitation200 = {
  /** Invitations resource */
  data: DeleteInvitation200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOneInvitation200DataAttributesRole = {
  ADMIN: 'ADMIN',
  USER: 'USER'
} as const
/**
 * The invitation entity
 */
export type GetOneInvitation200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** Whether the invite was accepted */
  accepted: boolean
  /** The email of the invitated user */
  email: string
  /** The name of the organization the token belongs to */
  orgname: string
  /** The role of the invitation */
  role: (typeof GetOneInvitation200DataAttributesRole)[keyof typeof GetOneInvitation200DataAttributesRole]
}

export type GetOneInvitation200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type GetOneInvitation200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type GetOneInvitation200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type GetOneInvitation200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: GetOneInvitation200DataRelationshipsData
  }
}

export type GetOneInvitation200DataType =
  (typeof GetOneInvitation200DataType)[keyof typeof GetOneInvitation200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOneInvitation200DataType = {
  invitations: 'invitations'
} as const

/**
 * Invitations resource
 */
export type GetOneInvitation200Data = {
  /** The invitation entity */
  attributes: GetOneInvitation200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: GetOneInvitation200DataLinks
  /** Non-standard meta-information */
  meta?: GetOneInvitation200DataMeta
  /** Relationships object */
  relationships?: GetOneInvitation200DataRelationships
  type: GetOneInvitation200DataType
}

/**
 * Invitations Individual response
 */
export type GetOneInvitation200 = {
  /** Invitations resource */
  data: GetOneInvitation200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateInvitationBodyRole = {
  ADMIN: 'ADMIN',
  USER: 'USER'
} as const
export type UpdateInvitationBody = {
  /** The email of the invitated user */
  email?: string
  /** The role of the invitation */
  role?: (typeof UpdateInvitationBodyRole)[keyof typeof UpdateInvitationBodyRole]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateInvitation200DataAttributesRole = {
  ADMIN: 'ADMIN',
  USER: 'USER'
} as const
/**
 * The invitation entity
 */
export type UpdateInvitation200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** Whether the invite was accepted */
  accepted: boolean
  /** The email of the invitated user */
  email: string
  /** The name of the organization the token belongs to */
  orgname: string
  /** The role of the invitation */
  role: (typeof UpdateInvitation200DataAttributesRole)[keyof typeof UpdateInvitation200DataAttributesRole]
}

export type UpdateInvitation200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type UpdateInvitation200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type UpdateInvitation200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type UpdateInvitation200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: UpdateInvitation200DataRelationshipsData
  }
}

export type UpdateInvitation200DataType =
  (typeof UpdateInvitation200DataType)[keyof typeof UpdateInvitation200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateInvitation200DataType = {
  invitations: 'invitations'
} as const

/**
 * Invitations resource
 */
export type UpdateInvitation200Data = {
  /** The invitation entity */
  attributes: UpdateInvitation200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: UpdateInvitation200DataLinks
  /** Non-standard meta-information */
  meta?: UpdateInvitation200DataMeta
  /** Relationships object */
  relationships?: UpdateInvitation200DataRelationships
  type: UpdateInvitation200DataType
}

/**
 * Invitations Individual response
 */
export type UpdateInvitation200 = {
  /** Invitations resource */
  data: UpdateInvitation200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AcceptInvitation200DataAttributesRole = {
  ADMIN: 'ADMIN',
  USER: 'USER'
} as const
/**
 * The invitation entity
 */
export type AcceptInvitation200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** Whether the invite was accepted */
  accepted: boolean
  /** The email of the invitated user */
  email: string
  /** The name of the organization the token belongs to */
  orgname: string
  /** The role of the invitation */
  role: (typeof AcceptInvitation200DataAttributesRole)[keyof typeof AcceptInvitation200DataAttributesRole]
}

export type AcceptInvitation200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type AcceptInvitation200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type AcceptInvitation200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type AcceptInvitation200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: AcceptInvitation200DataRelationshipsData
  }
}

export type AcceptInvitation200DataType =
  (typeof AcceptInvitation200DataType)[keyof typeof AcceptInvitation200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AcceptInvitation200DataType = {
  invitations: 'invitations'
} as const

/**
 * Invitations resource
 */
export type AcceptInvitation200Data = {
  /** The invitation entity */
  attributes: AcceptInvitation200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: AcceptInvitation200DataLinks
  /** Non-standard meta-information */
  meta?: AcceptInvitation200DataMeta
  /** Relationships object */
  relationships?: AcceptInvitation200DataRelationships
  type: AcceptInvitation200DataType
}

/**
 * Invitations Individual response
 */
export type AcceptInvitation200 = {
  /** Invitations resource */
  data: AcceptInvitation200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

/**
 * City/District/Suburb/Town/Village.
 */
export type DeletePaymentMethod200BillingDetailsAnyOfAddressAnyOfCity =
  | string
  | null

/**
 * Two-letter country code (ISO 3166-1 alpha-2).
 */
export type DeletePaymentMethod200BillingDetailsAnyOfAddressAnyOfCountry =
  | string
  | null

/**
 * Address line 1 (e.g., street, PO Box, or company name).
 */
export type DeletePaymentMethod200BillingDetailsAnyOfAddressAnyOfLine1 =
  | string
  | null

/**
 * Address line 2 (e.g., apartment, suite, unit, or building).
 */
export type DeletePaymentMethod200BillingDetailsAnyOfAddressAnyOfLine2 =
  | string
  | null

/**
 * ZIP or postal code.
 */
export type DeletePaymentMethod200BillingDetailsAnyOfAddressAnyOfPostalCode =
  | string
  | null

/**
 * State/County/Province/Region.
 */
export type DeletePaymentMethod200BillingDetailsAnyOfAddressAnyOfState =
  | string
  | null

export type DeletePaymentMethod200BillingDetailsAnyOfAddressAnyOf = {
  /** City/District/Suburb/Town/Village. */
  city?: DeletePaymentMethod200BillingDetailsAnyOfAddressAnyOfCity
  /** Two-letter country code (ISO 3166-1 alpha-2). */
  country?: DeletePaymentMethod200BillingDetailsAnyOfAddressAnyOfCountry
  /** Address line 1 (e.g., street, PO Box, or company name). */
  line1?: DeletePaymentMethod200BillingDetailsAnyOfAddressAnyOfLine1
  /** Address line 2 (e.g., apartment, suite, unit, or building). */
  line2?: DeletePaymentMethod200BillingDetailsAnyOfAddressAnyOfLine2
  /** ZIP or postal code. */
  postal_code?: DeletePaymentMethod200BillingDetailsAnyOfAddressAnyOfPostalCode
  /** State/County/Province/Region. */
  state?: DeletePaymentMethod200BillingDetailsAnyOfAddressAnyOfState
}

export type DeletePaymentMethod200BillingDetailsAnyOfAddress =
  DeletePaymentMethod200BillingDetailsAnyOfAddressAnyOf | null

/**
 * Email address associated with the payment method.
 */
export type DeletePaymentMethod200BillingDetailsAnyOfEmail = string | null

/**
 * Full name associated with the payment method.
 */
export type DeletePaymentMethod200BillingDetailsAnyOfName = string | null

/**
 * Phone number associated with the payment method.
 */
export type DeletePaymentMethod200BillingDetailsAnyOfPhone = string | null

export type DeletePaymentMethod200BillingDetailsAnyOf = {
  address: DeletePaymentMethod200BillingDetailsAnyOfAddress
  /** Email address associated with the payment method. */
  email?: DeletePaymentMethod200BillingDetailsAnyOfEmail
  /** Full name associated with the payment method. */
  name?: DeletePaymentMethod200BillingDetailsAnyOfName
  /** Phone number associated with the payment method. */
  phone?: DeletePaymentMethod200BillingDetailsAnyOfPhone
}

export type DeletePaymentMethod200BillingDetails =
  DeletePaymentMethod200BillingDetailsAnyOf | null

/**
 * Two-letter ISO code representing the country of the card.
 */
export type DeletePaymentMethod200CardAnyOfCountry = string | null

/**
 * Unencrypted PAN tokens (optional, sensitive).
 */
export type DeletePaymentMethod200CardAnyOfFingerprint = string | null

export type DeletePaymentMethod200CardAnyOf = {
  /** Card brand (e.g., Visa, MasterCard). */
  brand: string
  /** Two-letter ISO code representing the country of the card. */
  country?: DeletePaymentMethod200CardAnyOfCountry
  /** Two-digit number representing the card‚Äôs expiration month. */
  exp_month: number
  /** Four-digit number representing the card‚Äôs expiration year. */
  exp_year: number
  /** Unencrypted PAN tokens (optional, sensitive). */
  fingerprint?: DeletePaymentMethod200CardAnyOfFingerprint
  /** Card funding type (credit, debit, prepaid, unknown). */
  funding: string
  /** The last four digits of the card. */
  last4: string
}

/**
 * If the PaymentMethod is a card, this contains the card details.
 */
export type DeletePaymentMethod200Card = DeletePaymentMethod200CardAnyOf | null

/**
 * The payment method entity
 */
export type DeletePaymentMethod200 = {
  /** The date this item was created */
  createdAt: string
  /** Unique identifier for the payment method. */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  billing_details: DeletePaymentMethod200BillingDetails
  /** If the PaymentMethod is a card, this contains the card details. */
  card?: DeletePaymentMethod200Card
  /** ID of the customer this payment method is saved to. */
  customer: string
  /** The type of the PaymentMethod. An example value is "card". */
  type: string
}

/**
 * City/District/Suburb/Town/Village.
 */
export type FindOnePaymentMethod200BillingDetailsAnyOfAddressAnyOfCity =
  | string
  | null

/**
 * Two-letter country code (ISO 3166-1 alpha-2).
 */
export type FindOnePaymentMethod200BillingDetailsAnyOfAddressAnyOfCountry =
  | string
  | null

/**
 * Address line 1 (e.g., street, PO Box, or company name).
 */
export type FindOnePaymentMethod200BillingDetailsAnyOfAddressAnyOfLine1 =
  | string
  | null

/**
 * Address line 2 (e.g., apartment, suite, unit, or building).
 */
export type FindOnePaymentMethod200BillingDetailsAnyOfAddressAnyOfLine2 =
  | string
  | null

/**
 * ZIP or postal code.
 */
export type FindOnePaymentMethod200BillingDetailsAnyOfAddressAnyOfPostalCode =
  | string
  | null

/**
 * State/County/Province/Region.
 */
export type FindOnePaymentMethod200BillingDetailsAnyOfAddressAnyOfState =
  | string
  | null

export type FindOnePaymentMethod200BillingDetailsAnyOfAddressAnyOf = {
  /** City/District/Suburb/Town/Village. */
  city?: FindOnePaymentMethod200BillingDetailsAnyOfAddressAnyOfCity
  /** Two-letter country code (ISO 3166-1 alpha-2). */
  country?: FindOnePaymentMethod200BillingDetailsAnyOfAddressAnyOfCountry
  /** Address line 1 (e.g., street, PO Box, or company name). */
  line1?: FindOnePaymentMethod200BillingDetailsAnyOfAddressAnyOfLine1
  /** Address line 2 (e.g., apartment, suite, unit, or building). */
  line2?: FindOnePaymentMethod200BillingDetailsAnyOfAddressAnyOfLine2
  /** ZIP or postal code. */
  postal_code?: FindOnePaymentMethod200BillingDetailsAnyOfAddressAnyOfPostalCode
  /** State/County/Province/Region. */
  state?: FindOnePaymentMethod200BillingDetailsAnyOfAddressAnyOfState
}

export type FindOnePaymentMethod200BillingDetailsAnyOfAddress =
  FindOnePaymentMethod200BillingDetailsAnyOfAddressAnyOf | null

/**
 * Email address associated with the payment method.
 */
export type FindOnePaymentMethod200BillingDetailsAnyOfEmail = string | null

/**
 * Full name associated with the payment method.
 */
export type FindOnePaymentMethod200BillingDetailsAnyOfName = string | null

/**
 * Phone number associated with the payment method.
 */
export type FindOnePaymentMethod200BillingDetailsAnyOfPhone = string | null

export type FindOnePaymentMethod200BillingDetailsAnyOf = {
  address: FindOnePaymentMethod200BillingDetailsAnyOfAddress
  /** Email address associated with the payment method. */
  email?: FindOnePaymentMethod200BillingDetailsAnyOfEmail
  /** Full name associated with the payment method. */
  name?: FindOnePaymentMethod200BillingDetailsAnyOfName
  /** Phone number associated with the payment method. */
  phone?: FindOnePaymentMethod200BillingDetailsAnyOfPhone
}

export type FindOnePaymentMethod200BillingDetails =
  FindOnePaymentMethod200BillingDetailsAnyOf | null

/**
 * Two-letter ISO code representing the country of the card.
 */
export type FindOnePaymentMethod200CardAnyOfCountry = string | null

/**
 * Unencrypted PAN tokens (optional, sensitive).
 */
export type FindOnePaymentMethod200CardAnyOfFingerprint = string | null

export type FindOnePaymentMethod200CardAnyOf = {
  /** Card brand (e.g., Visa, MasterCard). */
  brand: string
  /** Two-letter ISO code representing the country of the card. */
  country?: FindOnePaymentMethod200CardAnyOfCountry
  /** Two-digit number representing the card‚Äôs expiration month. */
  exp_month: number
  /** Four-digit number representing the card‚Äôs expiration year. */
  exp_year: number
  /** Unencrypted PAN tokens (optional, sensitive). */
  fingerprint?: FindOnePaymentMethod200CardAnyOfFingerprint
  /** Card funding type (credit, debit, prepaid, unknown). */
  funding: string
  /** The last four digits of the card. */
  last4: string
}

/**
 * If the PaymentMethod is a card, this contains the card details.
 */
export type FindOnePaymentMethod200Card =
  FindOnePaymentMethod200CardAnyOf | null

/**
 * The payment method entity
 */
export type FindOnePaymentMethod200 = {
  /** The date this item was created */
  createdAt: string
  /** Unique identifier for the payment method. */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  billing_details: FindOnePaymentMethod200BillingDetails
  /** If the PaymentMethod is a card, this contains the card details. */
  card?: FindOnePaymentMethod200Card
  /** ID of the customer this payment method is saved to. */
  customer: string
  /** The type of the PaymentMethod. An example value is "card". */
  type: string
}

/**
 * The description of the plan
 */
export type GetPlans200ItemDescription = string | null

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetPlans200ItemMetadataKey = {
  BASIC: 'BASIC',
  FREE: 'FREE',
  PREMIUM: 'PREMIUM',
  STANDARD: 'STANDARD',
  UNLIMITED: 'UNLIMITED'
} as const
export type GetPlans200ItemMetadata = {
  /** The key of the metadata */
  key?: (typeof GetPlans200ItemMetadataKey)[keyof typeof GetPlans200ItemMetadataKey]
}

/**
 * The metadata of the price associated with the plan
 */
export type GetPlans200ItemPriceMetadata = { [key: string]: string }

export type GetPlans200ItemRecurringAnyOfTrialPeriodDays = number | null

export type GetPlans200ItemRecurringAnyOf = {
  interval: string
  interval_count: number
  trial_period_days?: GetPlans200ItemRecurringAnyOfTrialPeriodDays
}

/**
 * The interval of the plan
 */
export type GetPlans200ItemRecurring = GetPlans200ItemRecurringAnyOf | null

/**
 * The amount in cents to be charged on the interval specified
 */
export type GetPlans200ItemUnitAmount = number | null

/**
 * The plan resource
 */
export type GetPlans200Item = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the plan */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The currency of the plan */
  currency: string
  /** The description of the plan */
  description?: GetPlans200ItemDescription
  metadata: GetPlans200ItemMetadata
  /** The name of the plan */
  name: string
  /** The ID of the price associated with the plan */
  priceId: string
  /** The metadata of the price associated with the plan */
  priceMetadata: GetPlans200ItemPriceMetadata
  /** The interval of the plan */
  recurring?: GetPlans200ItemRecurring
  /** The amount in cents to be charged on the interval specified */
  unitAmount?: GetPlans200ItemUnitAmount
}

export type CreatePortalBody = {
  organizationId: string
}

export type CreateCheckoutSessionBody = {
  /**
   * The ID of the price associated with the checkout session
   * @minLength 1
   * @maxLength 255
   */
  priceId: string
}

export type CreateCheckoutSession200 = {
  /** The URL that will bring you to the necessary Stripe page */
  url: string
}

export type UpdateSubscriptionBody = {
  /** The ID of the plan */
  planId: string
}

export type CreateApiTokenBody = { [key: string]: unknown }

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateApiToken201DataAttributesRole = {
  ADMIN: 'ADMIN',
  USER: 'USER'
} as const
/**
 * The API token entity
 */
export type CreateApiToken201DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The API token key. This will only be shown once */
  key: string
  /** The name of the API token */
  name: string
  /** The name of the organization the token belongs to */
  orgname: string
  /** The role of the API token */
  role: (typeof CreateApiToken201DataAttributesRole)[keyof typeof CreateApiToken201DataAttributesRole]
}

export type CreateApiToken201DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type CreateApiToken201DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type CreateApiToken201DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type CreateApiToken201DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: CreateApiToken201DataRelationshipsData
  }
}

export type CreateApiToken201DataType =
  (typeof CreateApiToken201DataType)[keyof typeof CreateApiToken201DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateApiToken201DataType = {
  'api-tokens': 'api-tokens'
} as const

/**
 * ApiTokens resource
 */
export type CreateApiToken201Data = {
  /** The API token entity */
  attributes: CreateApiToken201DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: CreateApiToken201DataLinks
  /** Non-standard meta-information */
  meta?: CreateApiToken201DataMeta
  /** Relationships object */
  relationships?: CreateApiToken201DataRelationships
  type: CreateApiToken201DataType
}

/**
 * ApiTokens Individual response
 */
export type CreateApiToken201 = {
  /** ApiTokens resource */
  data: CreateApiToken201Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type FindManyApiTokensParams = {
  /**
   * Filter
   */
  filter?: {
    createdAt?: FieldFilter
    id?: FieldFilter
    updatedAt?: FieldFilter
    key?: FieldFilter
    name?: FieldFilter
    orgname?: FieldFilter
    role?: FieldFilter
  }
  /**
   * Pagination
   */
  page?: {
    /**
     * @minimum 0
     * @maximum 1.7976931348623157e+308
     */
    number?: number
    /**
     * @minimum 1
     * @maximum 100
     */
    size?: number
  }
  /**
   * Sort by name ascending and createdAt descending
   */
  sort?: string
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyApiTokens200DataItemAttributesRole = {
  ADMIN: 'ADMIN',
  USER: 'USER'
} as const
/**
 * The API token entity
 */
export type FindManyApiTokens200DataItemAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The API token key. This will only be shown once */
  key: string
  /** The name of the API token */
  name: string
  /** The name of the organization the token belongs to */
  orgname: string
  /** The role of the API token */
  role: (typeof FindManyApiTokens200DataItemAttributesRole)[keyof typeof FindManyApiTokens200DataItemAttributesRole]
}

export type FindManyApiTokens200DataItemLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type FindManyApiTokens200DataItemMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type FindManyApiTokens200DataItemRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type FindManyApiTokens200DataItemRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: FindManyApiTokens200DataItemRelationshipsData
  }
}

export type FindManyApiTokens200DataItemType =
  (typeof FindManyApiTokens200DataItemType)[keyof typeof FindManyApiTokens200DataItemType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyApiTokens200DataItemType = {
  'api-tokens': 'api-tokens'
} as const

/**
 * ApiTokens resource
 */
export type FindManyApiTokens200DataItem = {
  /** The API token entity */
  attributes: FindManyApiTokens200DataItemAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: FindManyApiTokens200DataItemLinks
  /** Non-standard meta-information */
  meta?: FindManyApiTokens200DataItemMeta
  /** Relationships object */
  relationships?: FindManyApiTokens200DataItemRelationships
  type: FindManyApiTokens200DataItemType
}

/**
 * ApiTokens collection response
 */
export type FindManyApiTokens200 = {
  data: FindManyApiTokens200DataItem[]
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteApiToken200DataAttributesRole = {
  ADMIN: 'ADMIN',
  USER: 'USER'
} as const
/**
 * The API token entity
 */
export type DeleteApiToken200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The API token key. This will only be shown once */
  key: string
  /** The name of the API token */
  name: string
  /** The name of the organization the token belongs to */
  orgname: string
  /** The role of the API token */
  role: (typeof DeleteApiToken200DataAttributesRole)[keyof typeof DeleteApiToken200DataAttributesRole]
}

export type DeleteApiToken200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type DeleteApiToken200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type DeleteApiToken200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type DeleteApiToken200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: DeleteApiToken200DataRelationshipsData
  }
}

export type DeleteApiToken200DataType =
  (typeof DeleteApiToken200DataType)[keyof typeof DeleteApiToken200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DeleteApiToken200DataType = {
  'api-tokens': 'api-tokens'
} as const

/**
 * ApiTokens resource
 */
export type DeleteApiToken200Data = {
  /** The API token entity */
  attributes: DeleteApiToken200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: DeleteApiToken200DataLinks
  /** Non-standard meta-information */
  meta?: DeleteApiToken200DataMeta
  /** Relationships object */
  relationships?: DeleteApiToken200DataRelationships
  type: DeleteApiToken200DataType
}

/**
 * ApiTokens Individual response
 */
export type DeleteApiToken200 = {
  /** ApiTokens resource */
  data: DeleteApiToken200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOneApiToken200DataAttributesRole = {
  ADMIN: 'ADMIN',
  USER: 'USER'
} as const
/**
 * The API token entity
 */
export type GetOneApiToken200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The API token key. This will only be shown once */
  key: string
  /** The name of the API token */
  name: string
  /** The name of the organization the token belongs to */
  orgname: string
  /** The role of the API token */
  role: (typeof GetOneApiToken200DataAttributesRole)[keyof typeof GetOneApiToken200DataAttributesRole]
}

export type GetOneApiToken200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type GetOneApiToken200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type GetOneApiToken200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type GetOneApiToken200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: GetOneApiToken200DataRelationshipsData
  }
}

export type GetOneApiToken200DataType =
  (typeof GetOneApiToken200DataType)[keyof typeof GetOneApiToken200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetOneApiToken200DataType = {
  'api-tokens': 'api-tokens'
} as const

/**
 * ApiTokens resource
 */
export type GetOneApiToken200Data = {
  /** The API token entity */
  attributes: GetOneApiToken200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: GetOneApiToken200DataLinks
  /** Non-standard meta-information */
  meta?: GetOneApiToken200DataMeta
  /** Relationships object */
  relationships?: GetOneApiToken200DataRelationships
  type: GetOneApiToken200DataType
}

/**
 * ApiTokens Individual response
 */
export type GetOneApiToken200 = {
  /** ApiTokens resource */
  data: GetOneApiToken200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type UpdateApiTokenBody = { [key: string]: unknown }

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateApiToken200DataAttributesRole = {
  ADMIN: 'ADMIN',
  USER: 'USER'
} as const
/**
 * The API token entity
 */
export type UpdateApiToken200DataAttributes = {
  /** The date this item was created */
  createdAt: string
  /** The date this item was last updated */
  updatedAt: string
  /** The API token key. This will only be shown once */
  key: string
  /** The name of the API token */
  name: string
  /** The name of the organization the token belongs to */
  orgname: string
  /** The role of the API token */
  role: (typeof UpdateApiToken200DataAttributesRole)[keyof typeof UpdateApiToken200DataAttributesRole]
}

export type UpdateApiToken200DataLinks = {
  describedby?: Link
  self?: Link
  [key: string]: string
}

/**
 * Non-standard meta-information
 */
export type UpdateApiToken200DataMeta = { [key: string]: unknown }

/**
 * Resource Identifier
 */
export type UpdateApiToken200DataRelationshipsData = {
  id: string
  type: string
}

/**
 * Relationships object
 */
export type UpdateApiToken200DataRelationships = {
  [key: string]: {
    /** Resource Identifier */
    data: UpdateApiToken200DataRelationshipsData
  }
}

export type UpdateApiToken200DataType =
  (typeof UpdateApiToken200DataType)[keyof typeof UpdateApiToken200DataType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateApiToken200DataType = {
  'api-tokens': 'api-tokens'
} as const

/**
 * ApiTokens resource
 */
export type UpdateApiToken200Data = {
  /** The API token entity */
  attributes: UpdateApiToken200DataAttributes
  /** The ID of the item */
  id: string
  lid?: string
  links?: UpdateApiToken200DataLinks
  /** Non-standard meta-information */
  meta?: UpdateApiToken200DataMeta
  /** Relationships object */
  relationships?: UpdateApiToken200DataRelationships
  type: UpdateApiToken200DataType
}

/**
 * ApiTokens Individual response
 */
export type UpdateApiToken200 = {
  /** ApiTokens resource */
  data: UpdateApiToken200Data
  included?: ResourceIdentifier[]
  links?: Links
  meta?: Meta
}

export type LoginBody = {
  /** The email address associated with the account */
  email: string
  /** The password for the account */
  password: string
}

/**
 * The user entity
 */
export type Login201 = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** Whether or not the user is deactivated */
  deactivated: boolean
  /** The user's e-mail */
  email: string
  /** Whether or not the user's e-mail has been verified */
  emailVerified?: string
  /** The user's avatar image URL */
  image?: string
  /** The user's organization name */
  orgname: string
}

/**
 * The user entity
 */
export type GetSession200 = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** Whether or not the user is deactivated */
  deactivated: boolean
  /** The user's e-mail */
  email: string
  /** Whether or not the user's e-mail has been verified */
  emailVerified?: string
  /** The user's avatar image URL */
  image?: string
  /** The user's organization name */
  orgname: string
}

export type ConfirmPasswordResetBody = {
  /** The new password */
  newPassword: string
  /** The password reset token */
  token: string
}

export type RequestPasswordResetBody = {
  /** The e-mail to send the password reset token to */
  email: string
}

export type ConfirmEmailChangeBody = {
  /** The e-mail to send the confirmation token to */
  newEmail: string
  /** The password reset token */
  token: string
  /** The user ID of the user requesting the email change */
  userId: string
}

export type RequestEmailChangeBody = {
  /** The e-mail to send the confirmation token to */
  newEmail: string
  /** The user ID of the user requesting the email change */
  userId: string
}

export type ConfirmEmailVerificationBody = {
  /** The password reset token */
  token: string
}

export type RegisterBody = {
  /** The email address associated with the account */
  email: string
  /** The password for the account */
  password: string
}
