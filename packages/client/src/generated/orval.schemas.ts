/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v1
 */
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FilterConditionOperator = {
  eq: 'eq',
  ne: 'ne',
  lt: 'lt',
  lte: 'lte',
  gt: 'gt',
  gte: 'gte',
  iLike: 'iLike',
  notILike: 'notILike',
  inArray: 'inArray',
  notInArray: 'notInArray',
  isEmpty: 'isEmpty',
  isNotEmpty: 'isNotEmpty',
  isBetween: 'isBetween',
  isRelativeToToday: 'isRelativeToToday'
} as const
export type FilterConditionType =
  (typeof FilterConditionType)[keyof typeof FilterConditionType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FilterConditionType = {
  condition: 'condition'
} as const

export type FilterConditionValueAnyOfItem = string | number | boolean

export type FilterConditionValueAnyOfTwoFrom = string | number

export type FilterConditionValueAnyOfTwoTo = string | number

export type FilterConditionValueAnyOfTwo = {
  from: FilterConditionValueAnyOfTwoFrom
  to: FilterConditionValueAnyOfTwoTo
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FilterConditionValueAnyOfFiveUnit = {
  days: 'days',
  weeks: 'weeks',
  months: 'months',
  years: 'years'
} as const
export type FilterConditionValueAnyOfFive = {
  unit: (typeof FilterConditionValueAnyOfFiveUnit)[keyof typeof FilterConditionValueAnyOfFiveUnit]
  value: number
}

/**
 * Value for filter conditions, supports strings, numbers, booleans, arrays, ranges, and relative dates
 */
export type FilterConditionValue =
  | string
  | number
  | boolean
  | FilterConditionValueAnyOfItem[]
  | FilterConditionValueAnyOfTwo
  | FilterConditionValueAnyOfFive

/**
 * A single filter condition with field, operator, and value
 */
export interface FilterCondition {
  field: string
  /** Supported filter operators */
  operator: (typeof FilterConditionOperator)[keyof typeof FilterConditionOperator]
  type: FilterConditionType
  /** Value for filter conditions, supports strings, numbers, booleans, arrays, ranges, and relative dates */
  value: FilterConditionValue
}

/**
 * Supported filter operators
 */
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Operator = {
  eq: 'eq',
  ne: 'ne',
  lt: 'lt',
  lte: 'lte',
  gt: 'gt',
  gte: 'gte',
  iLike: 'iLike',
  notILike: 'notILike',
  inArray: 'inArray',
  notInArray: 'notInArray',
  isEmpty: 'isEmpty',
  isNotEmpty: 'isNotEmpty',
  isBetween: 'isBetween',
  isRelativeToToday: 'isRelativeToToday'
} as const
export type Operator = (typeof Operator)[keyof typeof Operator]

export type FilterValueSchemaAnyOfItem = string | number | boolean

export type FilterValueSchemaAnyOfTwoFrom = string | number

export type FilterValueSchemaAnyOfTwoTo = string | number

export type FilterValueSchemaAnyOfTwo = {
  from: FilterValueSchemaAnyOfTwoFrom
  to: FilterValueSchemaAnyOfTwoTo
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FilterValueSchemaAnyOfFiveUnit = {
  days: 'days',
  weeks: 'weeks',
  months: 'months',
  years: 'years'
} as const
export type FilterValueSchemaAnyOfFive = {
  unit: (typeof FilterValueSchemaAnyOfFiveUnit)[keyof typeof FilterValueSchemaAnyOfFiveUnit]
  value: number
}

/**
 * Value for filter conditions, supports strings, numbers, booleans, arrays, ranges, and relative dates
 */
export type FilterValueSchema =
  | string
  | number
  | boolean
  | FilterValueSchemaAnyOfItem[]
  | FilterValueSchemaAnyOfTwo
  | FilterValueSchemaAnyOfFive

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FilterNodeAnyOfOperator = {
  eq: 'eq',
  ne: 'ne',
  lt: 'lt',
  lte: 'lte',
  gt: 'gt',
  gte: 'gte',
  iLike: 'iLike',
  notILike: 'notILike',
  inArray: 'inArray',
  notInArray: 'notInArray',
  isEmpty: 'isEmpty',
  isNotEmpty: 'isNotEmpty',
  isBetween: 'isBetween',
  isRelativeToToday: 'isRelativeToToday'
} as const
export type FilterNodeAnyOfType =
  (typeof FilterNodeAnyOfType)[keyof typeof FilterNodeAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FilterNodeAnyOfType = {
  condition: 'condition'
} as const

export type FilterNodeAnyOfValueAnyOfItem = string | number | boolean

export type FilterNodeAnyOfValueAnyOfTwoFrom = string | number

export type FilterNodeAnyOfValueAnyOfTwoTo = string | number

export type FilterNodeAnyOfValueAnyOfTwo = {
  from: FilterNodeAnyOfValueAnyOfTwoFrom
  to: FilterNodeAnyOfValueAnyOfTwoTo
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FilterNodeAnyOfValueAnyOfFiveUnit = {
  days: 'days',
  weeks: 'weeks',
  months: 'months',
  years: 'years'
} as const
export type FilterNodeAnyOfValueAnyOfFive = {
  unit: (typeof FilterNodeAnyOfValueAnyOfFiveUnit)[keyof typeof FilterNodeAnyOfValueAnyOfFiveUnit]
  value: number
}

/**
 * Value for filter conditions, supports strings, numbers, booleans, arrays, ranges, and relative dates
 */
export type FilterNodeAnyOfValue =
  | string
  | number
  | boolean
  | FilterNodeAnyOfValueAnyOfItem[]
  | FilterNodeAnyOfValueAnyOfTwo
  | FilterNodeAnyOfValueAnyOfFive

/**
 * A single filter condition with field, operator, and value
 */
export type FilterNodeAnyOf = {
  field: string
  /** Supported filter operators */
  operator: (typeof FilterNodeAnyOfOperator)[keyof typeof FilterNodeAnyOfOperator]
  type: FilterNodeAnyOfType
  /** Value for filter conditions, supports strings, numbers, booleans, arrays, ranges, and relative dates */
  value: FilterNodeAnyOfValue
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FilterNodeAnyOfOneoneOperator = { and: 'and', or: 'or' } as const
export type FilterNodeAnyOfOneoneType =
  (typeof FilterNodeAnyOfOneoneType)[keyof typeof FilterNodeAnyOfOneoneType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FilterNodeAnyOfOneoneType = {
  group: 'group'
} as const

/**
 * A logical group of filter conditions or other groups
 */
export type FilterNodeAnyOfOneone = {
  children: FilterNode[]
  operator: (typeof FilterNodeAnyOfOneoneOperator)[keyof typeof FilterNodeAnyOfOneoneOperator]
  type: FilterNodeAnyOfOneoneType
}

/**
 * A recursive filter node that can be a condition or group
 */
export type FilterNode = FilterNodeAnyOf | FilterNodeAnyOfOneone

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FilterGroupOperator = { and: 'and', or: 'or' } as const
export type FilterGroupType =
  (typeof FilterGroupType)[keyof typeof FilterGroupType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FilterGroupType = {
  group: 'group'
} as const

/**
 * A logical group of filter conditions or other groups
 */
export interface FilterGroup {
  children: FilterNode[]
  operator: (typeof FilterGroupOperator)[keyof typeof FilterGroupOperator]
  type: FilterGroupType
}

/**
 * Pagination configuration
 */
export interface Page {
  /**
   * @minimum 1
   * @maximum 1.7976931348623157e+308
   */
  number?: number
  /**
   * @minimum 1
   * @maximum 100
   */
  size?: number
}

/**
 * A list of errors that occurred during the request
 */
export interface ErrorObject {
  detail: string
  status: string
  title: string
}

/**
 * Error Document
 */
export interface ErrorDocument {
  errors: ErrorObject[]
}

export type ForbiddenResponseErrorsItem = {
  detail: string
  status: string
  title: string
}

/**
 * Forbidden
 */
export interface ForbiddenResponse {
  errors: ForbiddenResponseErrorsItem[]
}

/**
 * No Content
 */
export type NoContentResponse = null

export type NotFoundResponseErrorsItem = {
  detail: string
  status: string
  title: string
}

/**
 * Not Found
 */
export interface NotFoundResponse {
  errors: NotFoundResponseErrorsItem[]
}

export type UnauthorizedResponseErrorsItem = {
  detail: string
  status: string
  title: string
}

/**
 * Unauthorized
 */
export interface UnauthorizedResponse {
  errors: UnauthorizedResponseErrorsItem[]
}

/**
 * The access token
 */
export type AccountEntityAccessToken = string | null

/**
 * The expiration date
 */
export type AccountEntityAccessTokenExpiresAt = string | null

/**
 * The ID token
 */
export type AccountEntityIdToken = string | null

/**
 * The hashed password for local authentication
 */
export type AccountEntityPassword = string | null

/**
 * The refresh token
 */
export type AccountEntityRefreshToken = string | null

/**
 * The refresh token expiration date
 */
export type AccountEntityRefreshTokenExpiresAt = string | null

/**
 * The scope of the access token
 */
export type AccountEntityScope = string | null

/**
 * The account entity
 */
export interface AccountEntity {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The access token */
  accessToken: AccountEntityAccessToken
  /** The expiration date */
  accessTokenExpiresAt: AccountEntityAccessTokenExpiresAt
  /** The unique identifier for the account */
  accountId: string
  /** The ID token */
  idToken: AccountEntityIdToken
  /** The hashed password for local authentication */
  password: AccountEntityPassword
  /** The provider ID associated with the auth provider */
  providerId: string
  /** The refresh token */
  refreshToken: AccountEntityRefreshToken
  /** The refresh token expiration date */
  refreshTokenExpiresAt: AccountEntityRefreshTokenExpiresAt
  /** The scope of the access token */
  scope: AccountEntityScope
  /** The user ID associated with the auth provider */
  userId: string
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchAccountsQueryFilterAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  accessToken: 'accessToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  accountId: 'accountId',
  idToken: 'idToken',
  password: 'password',
  providerId: 'providerId',
  refreshToken: 'refreshToken',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  userId: 'userId'
} as const
export type SearchAccountsQueryFilterAnyOfType =
  (typeof SearchAccountsQueryFilterAnyOfType)[keyof typeof SearchAccountsQueryFilterAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchAccountsQueryFilterAnyOfType = {
  condition: 'condition'
} as const

export type SearchAccountsQueryFilterAnyOf = {
  field: (typeof SearchAccountsQueryFilterAnyOfField)[keyof typeof SearchAccountsQueryFilterAnyOfField]
  operator: Operator
  type: SearchAccountsQueryFilterAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchAccountsQueryFilterAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type SearchAccountsQueryFilterAnyOfFourType =
  (typeof SearchAccountsQueryFilterAnyOfFourType)[keyof typeof SearchAccountsQueryFilterAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchAccountsQueryFilterAnyOfFourType = {
  group: 'group'
} as const

export type SearchAccountsQueryFilterAnyOfFour = {
  children: AccountsFilterNode[]
  operator: (typeof SearchAccountsQueryFilterAnyOfFourOperator)[keyof typeof SearchAccountsQueryFilterAnyOfFourOperator]
  type: SearchAccountsQueryFilterAnyOfFourType
}

export type SearchAccountsQueryFilter =
  | SearchAccountsQueryFilterAnyOf
  | SearchAccountsQueryFilterAnyOfFour

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchAccountsQuerySortItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  accessToken: 'accessToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  accountId: 'accountId',
  idToken: 'idToken',
  password: 'password',
  providerId: 'providerId',
  refreshToken: 'refreshToken',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  userId: 'userId'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchAccountsQuerySortItemOrder = {
  asc: 'asc',
  desc: 'desc'
} as const
export type SearchAccountsQuerySortItem = {
  field: (typeof SearchAccountsQuerySortItemField)[keyof typeof SearchAccountsQuerySortItemField]
  order: (typeof SearchAccountsQuerySortItemOrder)[keyof typeof SearchAccountsQuerySortItemOrder]
}

/**
 * Complete search query for accounts with nested filters, pagination, and sorting
 */
export interface SearchAccountsQuery {
  filter?: SearchAccountsQueryFilter
  page?: Page
  sort?: SearchAccountsQuerySortItem[]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountsFilterNodeAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  accessToken: 'accessToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  accountId: 'accountId',
  idToken: 'idToken',
  password: 'password',
  providerId: 'providerId',
  refreshToken: 'refreshToken',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  userId: 'userId'
} as const
export type AccountsFilterNodeAnyOfType =
  (typeof AccountsFilterNodeAnyOfType)[keyof typeof AccountsFilterNodeAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountsFilterNodeAnyOfType = {
  condition: 'condition'
} as const

export type AccountsFilterNodeAnyOf = {
  field: (typeof AccountsFilterNodeAnyOfField)[keyof typeof AccountsFilterNodeAnyOfField]
  operator: Operator
  type: AccountsFilterNodeAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountsFilterNodeAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type AccountsFilterNodeAnyOfFourType =
  (typeof AccountsFilterNodeAnyOfFourType)[keyof typeof AccountsFilterNodeAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountsFilterNodeAnyOfFourType = {
  group: 'group'
} as const

export type AccountsFilterNodeAnyOfFour = {
  children: AccountsFilterNode[]
  operator: (typeof AccountsFilterNodeAnyOfFourOperator)[keyof typeof AccountsFilterNodeAnyOfFourOperator]
  type: AccountsFilterNodeAnyOfFourType
}

export type AccountsFilterNode =
  | AccountsFilterNodeAnyOf
  | AccountsFilterNodeAnyOfFour

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountsFilterConditionField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  accessToken: 'accessToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  accountId: 'accountId',
  idToken: 'idToken',
  password: 'password',
  providerId: 'providerId',
  refreshToken: 'refreshToken',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  userId: 'userId'
} as const
export type AccountsFilterConditionType =
  (typeof AccountsFilterConditionType)[keyof typeof AccountsFilterConditionType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountsFilterConditionType = {
  condition: 'condition'
} as const

export interface AccountsFilterCondition {
  field: (typeof AccountsFilterConditionField)[keyof typeof AccountsFilterConditionField]
  operator: Operator
  type: AccountsFilterConditionType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountsSortField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  accessToken: 'accessToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  accountId: 'accountId',
  idToken: 'idToken',
  password: 'password',
  providerId: 'providerId',
  refreshToken: 'refreshToken',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  userId: 'userId'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccountsSortOrder = { asc: 'asc', desc: 'desc' } as const
export interface AccountsSort {
  field: (typeof AccountsSortField)[keyof typeof AccountsSortField]
  order: (typeof AccountsSortOrder)[keyof typeof AccountsSortOrder]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvitationEntityRole = {
  admin: 'admin',
  owner: 'owner',
  member: 'member'
} as const
/**
 * The invitation entity
 */
export interface InvitationEntity {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The email of the invitated user */
  email: string
  /** The date and time when the invitation expires */
  expiresAt: string
  /** The user id of the inviter */
  inviterId: string
  /** The name of the organization the token belongs to */
  organizationId: string
  /** The role of the invitation */
  role: (typeof InvitationEntityRole)[keyof typeof InvitationEntityRole]
  /** The status of the invitation, e.g., pending, accepted, declined */
  status: string
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchInvitationsQueryFilterAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  email: 'email',
  expiresAt: 'expiresAt',
  inviterId: 'inviterId',
  organizationId: 'organizationId',
  role: 'role',
  status: 'status'
} as const
export type SearchInvitationsQueryFilterAnyOfType =
  (typeof SearchInvitationsQueryFilterAnyOfType)[keyof typeof SearchInvitationsQueryFilterAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchInvitationsQueryFilterAnyOfType = {
  condition: 'condition'
} as const

export type SearchInvitationsQueryFilterAnyOf = {
  field: (typeof SearchInvitationsQueryFilterAnyOfField)[keyof typeof SearchInvitationsQueryFilterAnyOfField]
  operator: Operator
  type: SearchInvitationsQueryFilterAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchInvitationsQueryFilterAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type SearchInvitationsQueryFilterAnyOfFourType =
  (typeof SearchInvitationsQueryFilterAnyOfFourType)[keyof typeof SearchInvitationsQueryFilterAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchInvitationsQueryFilterAnyOfFourType = {
  group: 'group'
} as const

export type SearchInvitationsQueryFilterAnyOfFour = {
  children: InvitationsFilterNode[]
  operator: (typeof SearchInvitationsQueryFilterAnyOfFourOperator)[keyof typeof SearchInvitationsQueryFilterAnyOfFourOperator]
  type: SearchInvitationsQueryFilterAnyOfFourType
}

export type SearchInvitationsQueryFilter =
  | SearchInvitationsQueryFilterAnyOf
  | SearchInvitationsQueryFilterAnyOfFour

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchInvitationsQuerySortItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  email: 'email',
  expiresAt: 'expiresAt',
  inviterId: 'inviterId',
  organizationId: 'organizationId',
  role: 'role',
  status: 'status'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchInvitationsQuerySortItemOrder = {
  asc: 'asc',
  desc: 'desc'
} as const
export type SearchInvitationsQuerySortItem = {
  field: (typeof SearchInvitationsQuerySortItemField)[keyof typeof SearchInvitationsQuerySortItemField]
  order: (typeof SearchInvitationsQuerySortItemOrder)[keyof typeof SearchInvitationsQuerySortItemOrder]
}

/**
 * Complete search query for invitations with nested filters, pagination, and sorting
 */
export interface SearchInvitationsQuery {
  filter?: SearchInvitationsQueryFilter
  page?: Page
  sort?: SearchInvitationsQuerySortItem[]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvitationsFilterNodeAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  email: 'email',
  expiresAt: 'expiresAt',
  inviterId: 'inviterId',
  organizationId: 'organizationId',
  role: 'role',
  status: 'status'
} as const
export type InvitationsFilterNodeAnyOfType =
  (typeof InvitationsFilterNodeAnyOfType)[keyof typeof InvitationsFilterNodeAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvitationsFilterNodeAnyOfType = {
  condition: 'condition'
} as const

export type InvitationsFilterNodeAnyOf = {
  field: (typeof InvitationsFilterNodeAnyOfField)[keyof typeof InvitationsFilterNodeAnyOfField]
  operator: Operator
  type: InvitationsFilterNodeAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvitationsFilterNodeAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type InvitationsFilterNodeAnyOfFourType =
  (typeof InvitationsFilterNodeAnyOfFourType)[keyof typeof InvitationsFilterNodeAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvitationsFilterNodeAnyOfFourType = {
  group: 'group'
} as const

export type InvitationsFilterNodeAnyOfFour = {
  children: InvitationsFilterNode[]
  operator: (typeof InvitationsFilterNodeAnyOfFourOperator)[keyof typeof InvitationsFilterNodeAnyOfFourOperator]
  type: InvitationsFilterNodeAnyOfFourType
}

export type InvitationsFilterNode =
  | InvitationsFilterNodeAnyOf
  | InvitationsFilterNodeAnyOfFour

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvitationsFilterConditionField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  email: 'email',
  expiresAt: 'expiresAt',
  inviterId: 'inviterId',
  organizationId: 'organizationId',
  role: 'role',
  status: 'status'
} as const
export type InvitationsFilterConditionType =
  (typeof InvitationsFilterConditionType)[keyof typeof InvitationsFilterConditionType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvitationsFilterConditionType = {
  condition: 'condition'
} as const

export interface InvitationsFilterCondition {
  field: (typeof InvitationsFilterConditionField)[keyof typeof InvitationsFilterConditionField]
  operator: Operator
  type: InvitationsFilterConditionType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvitationsSortField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  email: 'email',
  expiresAt: 'expiresAt',
  inviterId: 'inviterId',
  organizationId: 'organizationId',
  role: 'role',
  status: 'status'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvitationsSortOrder = { asc: 'asc', desc: 'desc' } as const
export interface InvitationsSort {
  field: (typeof InvitationsSortField)[keyof typeof InvitationsSortField]
  order: (typeof InvitationsSortOrder)[keyof typeof InvitationsSortOrder]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MemberEntityRole = {
  admin: 'admin',
  owner: 'owner',
  member: 'member'
} as const
/**
 * The member entity
 */
export interface MemberEntity {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The organization name */
  organizationId: string
  /** The role of the member */
  role: (typeof MemberEntityRole)[keyof typeof MemberEntityRole]
  /** The user id */
  userId: string
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchMembersQueryFilterAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId',
  role: 'role',
  userId: 'userId'
} as const
export type SearchMembersQueryFilterAnyOfType =
  (typeof SearchMembersQueryFilterAnyOfType)[keyof typeof SearchMembersQueryFilterAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchMembersQueryFilterAnyOfType = {
  condition: 'condition'
} as const

export type SearchMembersQueryFilterAnyOf = {
  field: (typeof SearchMembersQueryFilterAnyOfField)[keyof typeof SearchMembersQueryFilterAnyOfField]
  operator: Operator
  type: SearchMembersQueryFilterAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchMembersQueryFilterAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type SearchMembersQueryFilterAnyOfFourType =
  (typeof SearchMembersQueryFilterAnyOfFourType)[keyof typeof SearchMembersQueryFilterAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchMembersQueryFilterAnyOfFourType = {
  group: 'group'
} as const

export type SearchMembersQueryFilterAnyOfFour = {
  children: MembersFilterNode[]
  operator: (typeof SearchMembersQueryFilterAnyOfFourOperator)[keyof typeof SearchMembersQueryFilterAnyOfFourOperator]
  type: SearchMembersQueryFilterAnyOfFourType
}

export type SearchMembersQueryFilter =
  | SearchMembersQueryFilterAnyOf
  | SearchMembersQueryFilterAnyOfFour

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchMembersQuerySortItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId',
  role: 'role',
  userId: 'userId'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchMembersQuerySortItemOrder = {
  asc: 'asc',
  desc: 'desc'
} as const
export type SearchMembersQuerySortItem = {
  field: (typeof SearchMembersQuerySortItemField)[keyof typeof SearchMembersQuerySortItemField]
  order: (typeof SearchMembersQuerySortItemOrder)[keyof typeof SearchMembersQuerySortItemOrder]
}

/**
 * Complete search query for members with nested filters, pagination, and sorting
 */
export interface SearchMembersQuery {
  filter?: SearchMembersQueryFilter
  page?: Page
  sort?: SearchMembersQuerySortItem[]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MembersFilterNodeAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId',
  role: 'role',
  userId: 'userId'
} as const
export type MembersFilterNodeAnyOfType =
  (typeof MembersFilterNodeAnyOfType)[keyof typeof MembersFilterNodeAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MembersFilterNodeAnyOfType = {
  condition: 'condition'
} as const

export type MembersFilterNodeAnyOf = {
  field: (typeof MembersFilterNodeAnyOfField)[keyof typeof MembersFilterNodeAnyOfField]
  operator: Operator
  type: MembersFilterNodeAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MembersFilterNodeAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type MembersFilterNodeAnyOfFourType =
  (typeof MembersFilterNodeAnyOfFourType)[keyof typeof MembersFilterNodeAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MembersFilterNodeAnyOfFourType = {
  group: 'group'
} as const

export type MembersFilterNodeAnyOfFour = {
  children: MembersFilterNode[]
  operator: (typeof MembersFilterNodeAnyOfFourOperator)[keyof typeof MembersFilterNodeAnyOfFourOperator]
  type: MembersFilterNodeAnyOfFourType
}

export type MembersFilterNode =
  | MembersFilterNodeAnyOf
  | MembersFilterNodeAnyOfFour

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MembersFilterConditionField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId',
  role: 'role',
  userId: 'userId'
} as const
export type MembersFilterConditionType =
  (typeof MembersFilterConditionType)[keyof typeof MembersFilterConditionType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MembersFilterConditionType = {
  condition: 'condition'
} as const

export interface MembersFilterCondition {
  field: (typeof MembersFilterConditionField)[keyof typeof MembersFilterConditionField]
  operator: Operator
  type: MembersFilterConditionType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MembersSortField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId',
  role: 'role',
  userId: 'userId'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MembersSortOrder = { asc: 'asc', desc: 'desc' } as const
export interface MembersSort {
  field: (typeof MembersSortField)[keyof typeof MembersSortField]
  order: (typeof MembersSortOrder)[keyof typeof MembersSortOrder]
}

/**
 * The URL of the organization logo
 */
export type OrganizationEntityLogo = string | null

/**
 * The metadata for the organization, used for custom data
 */
export type OrganizationEntityMetadata = string | null

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrganizationEntityPlan = {
  BASIC: 'BASIC',
  FREE: 'FREE',
  PREMIUM: 'PREMIUM',
  STANDARD: 'STANDARD',
  UNLIMITED: 'UNLIMITED'
} as const
/**
 * The Stripe customer ID
 */
export type OrganizationEntityStripeCustomerId = string | null

/**
 * The organization entity
 */
export interface OrganizationEntity {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The billing email to use for the organization */
  billingEmail: string
  /** The number of credits you have remaining for this organization */
  credits: number
  /** The URL of the organization logo */
  logo: OrganizationEntityLogo
  /** The metadata for the organization, used for custom data */
  metadata: OrganizationEntityMetadata
  /** The name of the organization */
  name: string
  /** The plan that the organization is subscribed to */
  plan: (typeof OrganizationEntityPlan)[keyof typeof OrganizationEntityPlan]
  /** The unique slug for the organization, used in URLs */
  slug: string
  /** The Stripe customer ID */
  stripeCustomerId: OrganizationEntityStripeCustomerId
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchOrganizationsQueryFilterAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  billingEmail: 'billingEmail',
  credits: 'credits',
  logo: 'logo',
  metadata: 'metadata',
  name: 'name',
  plan: 'plan',
  slug: 'slug',
  stripeCustomerId: 'stripeCustomerId'
} as const
export type SearchOrganizationsQueryFilterAnyOfType =
  (typeof SearchOrganizationsQueryFilterAnyOfType)[keyof typeof SearchOrganizationsQueryFilterAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchOrganizationsQueryFilterAnyOfType = {
  condition: 'condition'
} as const

export type SearchOrganizationsQueryFilterAnyOf = {
  field: (typeof SearchOrganizationsQueryFilterAnyOfField)[keyof typeof SearchOrganizationsQueryFilterAnyOfField]
  operator: Operator
  type: SearchOrganizationsQueryFilterAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchOrganizationsQueryFilterAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type SearchOrganizationsQueryFilterAnyOfFourType =
  (typeof SearchOrganizationsQueryFilterAnyOfFourType)[keyof typeof SearchOrganizationsQueryFilterAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchOrganizationsQueryFilterAnyOfFourType = {
  group: 'group'
} as const

export type SearchOrganizationsQueryFilterAnyOfFour = {
  children: OrganizationsFilterNode[]
  operator: (typeof SearchOrganizationsQueryFilterAnyOfFourOperator)[keyof typeof SearchOrganizationsQueryFilterAnyOfFourOperator]
  type: SearchOrganizationsQueryFilterAnyOfFourType
}

export type SearchOrganizationsQueryFilter =
  | SearchOrganizationsQueryFilterAnyOf
  | SearchOrganizationsQueryFilterAnyOfFour

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchOrganizationsQuerySortItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  billingEmail: 'billingEmail',
  credits: 'credits',
  logo: 'logo',
  metadata: 'metadata',
  name: 'name',
  plan: 'plan',
  slug: 'slug',
  stripeCustomerId: 'stripeCustomerId'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchOrganizationsQuerySortItemOrder = {
  asc: 'asc',
  desc: 'desc'
} as const
export type SearchOrganizationsQuerySortItem = {
  field: (typeof SearchOrganizationsQuerySortItemField)[keyof typeof SearchOrganizationsQuerySortItemField]
  order: (typeof SearchOrganizationsQuerySortItemOrder)[keyof typeof SearchOrganizationsQuerySortItemOrder]
}

/**
 * Complete search query for organizations with nested filters, pagination, and sorting
 */
export interface SearchOrganizationsQuery {
  filter?: SearchOrganizationsQueryFilter
  page?: Page
  sort?: SearchOrganizationsQuerySortItem[]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrganizationsFilterNodeAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  billingEmail: 'billingEmail',
  credits: 'credits',
  logo: 'logo',
  metadata: 'metadata',
  name: 'name',
  plan: 'plan',
  slug: 'slug',
  stripeCustomerId: 'stripeCustomerId'
} as const
export type OrganizationsFilterNodeAnyOfType =
  (typeof OrganizationsFilterNodeAnyOfType)[keyof typeof OrganizationsFilterNodeAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrganizationsFilterNodeAnyOfType = {
  condition: 'condition'
} as const

export type OrganizationsFilterNodeAnyOf = {
  field: (typeof OrganizationsFilterNodeAnyOfField)[keyof typeof OrganizationsFilterNodeAnyOfField]
  operator: Operator
  type: OrganizationsFilterNodeAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrganizationsFilterNodeAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type OrganizationsFilterNodeAnyOfFourType =
  (typeof OrganizationsFilterNodeAnyOfFourType)[keyof typeof OrganizationsFilterNodeAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrganizationsFilterNodeAnyOfFourType = {
  group: 'group'
} as const

export type OrganizationsFilterNodeAnyOfFour = {
  children: OrganizationsFilterNode[]
  operator: (typeof OrganizationsFilterNodeAnyOfFourOperator)[keyof typeof OrganizationsFilterNodeAnyOfFourOperator]
  type: OrganizationsFilterNodeAnyOfFourType
}

export type OrganizationsFilterNode =
  | OrganizationsFilterNodeAnyOf
  | OrganizationsFilterNodeAnyOfFour

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrganizationsFilterConditionField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  billingEmail: 'billingEmail',
  credits: 'credits',
  logo: 'logo',
  metadata: 'metadata',
  name: 'name',
  plan: 'plan',
  slug: 'slug',
  stripeCustomerId: 'stripeCustomerId'
} as const
export type OrganizationsFilterConditionType =
  (typeof OrganizationsFilterConditionType)[keyof typeof OrganizationsFilterConditionType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrganizationsFilterConditionType = {
  condition: 'condition'
} as const

export interface OrganizationsFilterCondition {
  field: (typeof OrganizationsFilterConditionField)[keyof typeof OrganizationsFilterConditionField]
  operator: Operator
  type: OrganizationsFilterConditionType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrganizationsSortField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  billingEmail: 'billingEmail',
  credits: 'credits',
  logo: 'logo',
  metadata: 'metadata',
  name: 'name',
  plan: 'plan',
  slug: 'slug',
  stripeCustomerId: 'stripeCustomerId'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OrganizationsSortOrder = { asc: 'asc', desc: 'desc' } as const
export interface OrganizationsSort {
  field: (typeof OrganizationsSortField)[keyof typeof OrganizationsSortField]
  order: (typeof OrganizationsSortOrder)[keyof typeof OrganizationsSortOrder]
}

/**
 * The IP address of the session
 */
export type SessionEntityIpAddress = string | null

/**
 * The user agent of the session
 */
export type SessionEntityUserAgent = string | null

/**
 * The session entity
 */
export interface SessionEntity {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The active organization ID */
  activeOrganizationId: string
  /** The expiration date of the session */
  expiresAt: string
  /** The IP address of the session */
  ipAddress: SessionEntityIpAddress
  /** The session token */
  token: string
  /** The user agent of the session */
  userAgent: SessionEntityUserAgent
  /** The ID of the user associated with the session */
  userId: string
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchSessionsQueryFilterAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  activeOrganizationId: 'activeOrganizationId',
  expiresAt: 'expiresAt',
  ipAddress: 'ipAddress',
  token: 'token',
  userAgent: 'userAgent',
  userId: 'userId'
} as const
export type SearchSessionsQueryFilterAnyOfType =
  (typeof SearchSessionsQueryFilterAnyOfType)[keyof typeof SearchSessionsQueryFilterAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchSessionsQueryFilterAnyOfType = {
  condition: 'condition'
} as const

export type SearchSessionsQueryFilterAnyOf = {
  field: (typeof SearchSessionsQueryFilterAnyOfField)[keyof typeof SearchSessionsQueryFilterAnyOfField]
  operator: Operator
  type: SearchSessionsQueryFilterAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchSessionsQueryFilterAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type SearchSessionsQueryFilterAnyOfFourType =
  (typeof SearchSessionsQueryFilterAnyOfFourType)[keyof typeof SearchSessionsQueryFilterAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchSessionsQueryFilterAnyOfFourType = {
  group: 'group'
} as const

export type SearchSessionsQueryFilterAnyOfFour = {
  children: SessionsFilterNode[]
  operator: (typeof SearchSessionsQueryFilterAnyOfFourOperator)[keyof typeof SearchSessionsQueryFilterAnyOfFourOperator]
  type: SearchSessionsQueryFilterAnyOfFourType
}

export type SearchSessionsQueryFilter =
  | SearchSessionsQueryFilterAnyOf
  | SearchSessionsQueryFilterAnyOfFour

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchSessionsQuerySortItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  activeOrganizationId: 'activeOrganizationId',
  expiresAt: 'expiresAt',
  ipAddress: 'ipAddress',
  token: 'token',
  userAgent: 'userAgent',
  userId: 'userId'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchSessionsQuerySortItemOrder = {
  asc: 'asc',
  desc: 'desc'
} as const
export type SearchSessionsQuerySortItem = {
  field: (typeof SearchSessionsQuerySortItemField)[keyof typeof SearchSessionsQuerySortItemField]
  order: (typeof SearchSessionsQuerySortItemOrder)[keyof typeof SearchSessionsQuerySortItemOrder]
}

/**
 * Complete search query for sessions with nested filters, pagination, and sorting
 */
export interface SearchSessionsQuery {
  filter?: SearchSessionsQueryFilter
  page?: Page
  sort?: SearchSessionsQuerySortItem[]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SessionsFilterNodeAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  activeOrganizationId: 'activeOrganizationId',
  expiresAt: 'expiresAt',
  ipAddress: 'ipAddress',
  token: 'token',
  userAgent: 'userAgent',
  userId: 'userId'
} as const
export type SessionsFilterNodeAnyOfType =
  (typeof SessionsFilterNodeAnyOfType)[keyof typeof SessionsFilterNodeAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SessionsFilterNodeAnyOfType = {
  condition: 'condition'
} as const

export type SessionsFilterNodeAnyOf = {
  field: (typeof SessionsFilterNodeAnyOfField)[keyof typeof SessionsFilterNodeAnyOfField]
  operator: Operator
  type: SessionsFilterNodeAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SessionsFilterNodeAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type SessionsFilterNodeAnyOfFourType =
  (typeof SessionsFilterNodeAnyOfFourType)[keyof typeof SessionsFilterNodeAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SessionsFilterNodeAnyOfFourType = {
  group: 'group'
} as const

export type SessionsFilterNodeAnyOfFour = {
  children: SessionsFilterNode[]
  operator: (typeof SessionsFilterNodeAnyOfFourOperator)[keyof typeof SessionsFilterNodeAnyOfFourOperator]
  type: SessionsFilterNodeAnyOfFourType
}

export type SessionsFilterNode =
  | SessionsFilterNodeAnyOf
  | SessionsFilterNodeAnyOfFour

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SessionsFilterConditionField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  activeOrganizationId: 'activeOrganizationId',
  expiresAt: 'expiresAt',
  ipAddress: 'ipAddress',
  token: 'token',
  userAgent: 'userAgent',
  userId: 'userId'
} as const
export type SessionsFilterConditionType =
  (typeof SessionsFilterConditionType)[keyof typeof SessionsFilterConditionType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SessionsFilterConditionType = {
  condition: 'condition'
} as const

export interface SessionsFilterCondition {
  field: (typeof SessionsFilterConditionField)[keyof typeof SessionsFilterConditionField]
  operator: Operator
  type: SessionsFilterConditionType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SessionsSortField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  activeOrganizationId: 'activeOrganizationId',
  expiresAt: 'expiresAt',
  ipAddress: 'ipAddress',
  token: 'token',
  userAgent: 'userAgent',
  userId: 'userId'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SessionsSortOrder = { asc: 'asc', desc: 'desc' } as const
export interface SessionsSort {
  field: (typeof SessionsSortField)[keyof typeof SessionsSortField]
  order: (typeof SessionsSortOrder)[keyof typeof SessionsSortOrder]
}

/**
 * The user's avatar image URL
 */
export type UserEntityImage = null | string

/**
 * The user entity
 */
export interface UserEntity {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** Whether or not the user is deactivated */
  deactivated: boolean
  /** The user's e-mail */
  email: string
  /** Whether or not the user's e-mail has been verified */
  emailVerified: boolean
  /** The user's avatar image URL */
  image: UserEntityImage
  /**
   * The user's name
   * @minLength 1
   */
  name: string
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchUsersQueryFilterAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  deactivated: 'deactivated',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  name: 'name'
} as const
export type SearchUsersQueryFilterAnyOfType =
  (typeof SearchUsersQueryFilterAnyOfType)[keyof typeof SearchUsersQueryFilterAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchUsersQueryFilterAnyOfType = {
  condition: 'condition'
} as const

export type SearchUsersQueryFilterAnyOf = {
  field: (typeof SearchUsersQueryFilterAnyOfField)[keyof typeof SearchUsersQueryFilterAnyOfField]
  operator: Operator
  type: SearchUsersQueryFilterAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchUsersQueryFilterAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type SearchUsersQueryFilterAnyOfFourType =
  (typeof SearchUsersQueryFilterAnyOfFourType)[keyof typeof SearchUsersQueryFilterAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchUsersQueryFilterAnyOfFourType = {
  group: 'group'
} as const

export type SearchUsersQueryFilterAnyOfFour = {
  children: UsersFilterNode[]
  operator: (typeof SearchUsersQueryFilterAnyOfFourOperator)[keyof typeof SearchUsersQueryFilterAnyOfFourOperator]
  type: SearchUsersQueryFilterAnyOfFourType
}

export type SearchUsersQueryFilter =
  | SearchUsersQueryFilterAnyOf
  | SearchUsersQueryFilterAnyOfFour

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchUsersQuerySortItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  deactivated: 'deactivated',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  name: 'name'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchUsersQuerySortItemOrder = {
  asc: 'asc',
  desc: 'desc'
} as const
export type SearchUsersQuerySortItem = {
  field: (typeof SearchUsersQuerySortItemField)[keyof typeof SearchUsersQuerySortItemField]
  order: (typeof SearchUsersQuerySortItemOrder)[keyof typeof SearchUsersQuerySortItemOrder]
}

/**
 * Complete search query for users with nested filters, pagination, and sorting
 */
export interface SearchUsersQuery {
  filter?: SearchUsersQueryFilter
  page?: Page
  sort?: SearchUsersQuerySortItem[]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsersFilterNodeAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  deactivated: 'deactivated',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  name: 'name'
} as const
export type UsersFilterNodeAnyOfType =
  (typeof UsersFilterNodeAnyOfType)[keyof typeof UsersFilterNodeAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsersFilterNodeAnyOfType = {
  condition: 'condition'
} as const

export type UsersFilterNodeAnyOf = {
  field: (typeof UsersFilterNodeAnyOfField)[keyof typeof UsersFilterNodeAnyOfField]
  operator: Operator
  type: UsersFilterNodeAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsersFilterNodeAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type UsersFilterNodeAnyOfFourType =
  (typeof UsersFilterNodeAnyOfFourType)[keyof typeof UsersFilterNodeAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsersFilterNodeAnyOfFourType = {
  group: 'group'
} as const

export type UsersFilterNodeAnyOfFour = {
  children: UsersFilterNode[]
  operator: (typeof UsersFilterNodeAnyOfFourOperator)[keyof typeof UsersFilterNodeAnyOfFourOperator]
  type: UsersFilterNodeAnyOfFourType
}

export type UsersFilterNode = UsersFilterNodeAnyOf | UsersFilterNodeAnyOfFour

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsersFilterConditionField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  deactivated: 'deactivated',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  name: 'name'
} as const
export type UsersFilterConditionType =
  (typeof UsersFilterConditionType)[keyof typeof UsersFilterConditionType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsersFilterConditionType = {
  condition: 'condition'
} as const

export interface UsersFilterCondition {
  field: (typeof UsersFilterConditionField)[keyof typeof UsersFilterConditionField]
  operator: Operator
  type: UsersFilterConditionType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsersSortField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  deactivated: 'deactivated',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  name: 'name'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UsersSortOrder = { asc: 'asc', desc: 'desc' } as const
export interface UsersSort {
  field: (typeof UsersSortField)[keyof typeof UsersSortField]
  order: (typeof UsersSortOrder)[keyof typeof UsersSortOrder]
}

/**
 * The artifact's description
 */
export type ArtifactEntityDescription = null | string

/**
 * The name of the artifact, used for display purposes
 */
export type ArtifactEntityName = null | string

/**
 * The URL of the preview image for this artifact. This is used for displaying a thumbnail in the UI.
 */
export type ArtifactEntityPreviewImage = null | string

/**
 * The ID of the run that produced this artifact, if applicable
 */
export type ArtifactEntityProducerId = null | string

/**
 * The artifact text
 */
export type ArtifactEntityText = null | string

/**
 * The artifact URL
 */
export type ArtifactEntityUrl = null | string

/**
 * The artifact entity
 */
export interface ArtifactEntity {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The number of credits required to access this artifact. This is used for metering and billing purposes. */
  credits: number
  /** The artifact's description */
  description: ArtifactEntityDescription
  /** The MIME type of the artifact, e.g. image/png */
  mimeType: string
  /** The name of the artifact, used for display purposes */
  name: ArtifactEntityName
  /** The organization name */
  organizationId: string
  /** The URL of the preview image for this artifact. This is used for displaying a thumbnail in the UI. */
  previewImage: ArtifactEntityPreviewImage
  /** The ID of the run that produced this artifact, if applicable */
  producerId: ArtifactEntityProducerId
  /** The artifact text */
  text: ArtifactEntityText
  /** The artifact URL */
  url: ArtifactEntityUrl
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchArtifactsQueryFilterAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  credits: 'credits',
  description: 'description',
  mimeType: 'mimeType',
  name: 'name',
  organizationId: 'organizationId',
  previewImage: 'previewImage',
  producerId: 'producerId',
  text: 'text',
  url: 'url'
} as const
export type SearchArtifactsQueryFilterAnyOfType =
  (typeof SearchArtifactsQueryFilterAnyOfType)[keyof typeof SearchArtifactsQueryFilterAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchArtifactsQueryFilterAnyOfType = {
  condition: 'condition'
} as const

export type SearchArtifactsQueryFilterAnyOf = {
  field: (typeof SearchArtifactsQueryFilterAnyOfField)[keyof typeof SearchArtifactsQueryFilterAnyOfField]
  operator: Operator
  type: SearchArtifactsQueryFilterAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchArtifactsQueryFilterAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type SearchArtifactsQueryFilterAnyOfFourType =
  (typeof SearchArtifactsQueryFilterAnyOfFourType)[keyof typeof SearchArtifactsQueryFilterAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchArtifactsQueryFilterAnyOfFourType = {
  group: 'group'
} as const

export type SearchArtifactsQueryFilterAnyOfFour = {
  children: ArtifactsFilterNode[]
  operator: (typeof SearchArtifactsQueryFilterAnyOfFourOperator)[keyof typeof SearchArtifactsQueryFilterAnyOfFourOperator]
  type: SearchArtifactsQueryFilterAnyOfFourType
}

export type SearchArtifactsQueryFilter =
  | SearchArtifactsQueryFilterAnyOf
  | SearchArtifactsQueryFilterAnyOfFour

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchArtifactsQuerySortItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  credits: 'credits',
  description: 'description',
  mimeType: 'mimeType',
  name: 'name',
  organizationId: 'organizationId',
  previewImage: 'previewImage',
  producerId: 'producerId',
  text: 'text',
  url: 'url'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchArtifactsQuerySortItemOrder = {
  asc: 'asc',
  desc: 'desc'
} as const
export type SearchArtifactsQuerySortItem = {
  field: (typeof SearchArtifactsQuerySortItemField)[keyof typeof SearchArtifactsQuerySortItemField]
  order: (typeof SearchArtifactsQuerySortItemOrder)[keyof typeof SearchArtifactsQuerySortItemOrder]
}

/**
 * Complete search query for artifacts with nested filters, pagination, and sorting
 */
export interface SearchArtifactsQuery {
  filter?: SearchArtifactsQueryFilter
  page?: Page
  sort?: SearchArtifactsQuerySortItem[]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArtifactsFilterNodeAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  credits: 'credits',
  description: 'description',
  mimeType: 'mimeType',
  name: 'name',
  organizationId: 'organizationId',
  previewImage: 'previewImage',
  producerId: 'producerId',
  text: 'text',
  url: 'url'
} as const
export type ArtifactsFilterNodeAnyOfType =
  (typeof ArtifactsFilterNodeAnyOfType)[keyof typeof ArtifactsFilterNodeAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArtifactsFilterNodeAnyOfType = {
  condition: 'condition'
} as const

export type ArtifactsFilterNodeAnyOf = {
  field: (typeof ArtifactsFilterNodeAnyOfField)[keyof typeof ArtifactsFilterNodeAnyOfField]
  operator: Operator
  type: ArtifactsFilterNodeAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArtifactsFilterNodeAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type ArtifactsFilterNodeAnyOfFourType =
  (typeof ArtifactsFilterNodeAnyOfFourType)[keyof typeof ArtifactsFilterNodeAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArtifactsFilterNodeAnyOfFourType = {
  group: 'group'
} as const

export type ArtifactsFilterNodeAnyOfFour = {
  children: ArtifactsFilterNode[]
  operator: (typeof ArtifactsFilterNodeAnyOfFourOperator)[keyof typeof ArtifactsFilterNodeAnyOfFourOperator]
  type: ArtifactsFilterNodeAnyOfFourType
}

export type ArtifactsFilterNode =
  | ArtifactsFilterNodeAnyOf
  | ArtifactsFilterNodeAnyOfFour

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArtifactsFilterConditionField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  credits: 'credits',
  description: 'description',
  mimeType: 'mimeType',
  name: 'name',
  organizationId: 'organizationId',
  previewImage: 'previewImage',
  producerId: 'producerId',
  text: 'text',
  url: 'url'
} as const
export type ArtifactsFilterConditionType =
  (typeof ArtifactsFilterConditionType)[keyof typeof ArtifactsFilterConditionType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArtifactsFilterConditionType = {
  condition: 'condition'
} as const

export interface ArtifactsFilterCondition {
  field: (typeof ArtifactsFilterConditionField)[keyof typeof ArtifactsFilterConditionField]
  operator: Operator
  type: ArtifactsFilterConditionType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArtifactsSortField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  credits: 'credits',
  description: 'description',
  mimeType: 'mimeType',
  name: 'name',
  organizationId: 'organizationId',
  previewImage: 'previewImage',
  producerId: 'producerId',
  text: 'text',
  url: 'url'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ArtifactsSortOrder = { asc: 'asc', desc: 'desc' } as const
export interface ArtifactsSort {
  field: (typeof ArtifactsSortField)[keyof typeof ArtifactsSortField]
  order: (typeof ArtifactsSortOrder)[keyof typeof ArtifactsSortOrder]
}

/**
 * The label entity
 */
export interface LabelEntity {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The name of the label */
  name: string
  /** The organization name */
  organizationId: string
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchLabelsQueryFilterAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  name: 'name',
  organizationId: 'organizationId'
} as const
export type SearchLabelsQueryFilterAnyOfType =
  (typeof SearchLabelsQueryFilterAnyOfType)[keyof typeof SearchLabelsQueryFilterAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchLabelsQueryFilterAnyOfType = {
  condition: 'condition'
} as const

export type SearchLabelsQueryFilterAnyOf = {
  field: (typeof SearchLabelsQueryFilterAnyOfField)[keyof typeof SearchLabelsQueryFilterAnyOfField]
  operator: Operator
  type: SearchLabelsQueryFilterAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchLabelsQueryFilterAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type SearchLabelsQueryFilterAnyOfFourType =
  (typeof SearchLabelsQueryFilterAnyOfFourType)[keyof typeof SearchLabelsQueryFilterAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchLabelsQueryFilterAnyOfFourType = {
  group: 'group'
} as const

export type SearchLabelsQueryFilterAnyOfFour = {
  children: LabelsFilterNode[]
  operator: (typeof SearchLabelsQueryFilterAnyOfFourOperator)[keyof typeof SearchLabelsQueryFilterAnyOfFourOperator]
  type: SearchLabelsQueryFilterAnyOfFourType
}

export type SearchLabelsQueryFilter =
  | SearchLabelsQueryFilterAnyOf
  | SearchLabelsQueryFilterAnyOfFour

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchLabelsQuerySortItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  name: 'name',
  organizationId: 'organizationId'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchLabelsQuerySortItemOrder = {
  asc: 'asc',
  desc: 'desc'
} as const
export type SearchLabelsQuerySortItem = {
  field: (typeof SearchLabelsQuerySortItemField)[keyof typeof SearchLabelsQuerySortItemField]
  order: (typeof SearchLabelsQuerySortItemOrder)[keyof typeof SearchLabelsQuerySortItemOrder]
}

/**
 * Complete search query for labels with nested filters, pagination, and sorting
 */
export interface SearchLabelsQuery {
  filter?: SearchLabelsQueryFilter
  page?: Page
  sort?: SearchLabelsQuerySortItem[]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LabelsFilterNodeAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  name: 'name',
  organizationId: 'organizationId'
} as const
export type LabelsFilterNodeAnyOfType =
  (typeof LabelsFilterNodeAnyOfType)[keyof typeof LabelsFilterNodeAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LabelsFilterNodeAnyOfType = {
  condition: 'condition'
} as const

export type LabelsFilterNodeAnyOf = {
  field: (typeof LabelsFilterNodeAnyOfField)[keyof typeof LabelsFilterNodeAnyOfField]
  operator: Operator
  type: LabelsFilterNodeAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LabelsFilterNodeAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type LabelsFilterNodeAnyOfFourType =
  (typeof LabelsFilterNodeAnyOfFourType)[keyof typeof LabelsFilterNodeAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LabelsFilterNodeAnyOfFourType = {
  group: 'group'
} as const

export type LabelsFilterNodeAnyOfFour = {
  children: LabelsFilterNode[]
  operator: (typeof LabelsFilterNodeAnyOfFourOperator)[keyof typeof LabelsFilterNodeAnyOfFourOperator]
  type: LabelsFilterNodeAnyOfFourType
}

export type LabelsFilterNode = LabelsFilterNodeAnyOf | LabelsFilterNodeAnyOfFour

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LabelsFilterConditionField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  name: 'name',
  organizationId: 'organizationId'
} as const
export type LabelsFilterConditionType =
  (typeof LabelsFilterConditionType)[keyof typeof LabelsFilterConditionType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LabelsFilterConditionType = {
  condition: 'condition'
} as const

export interface LabelsFilterCondition {
  field: (typeof LabelsFilterConditionField)[keyof typeof LabelsFilterConditionField]
  operator: Operator
  type: LabelsFilterConditionType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LabelsSortField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  name: 'name',
  organizationId: 'organizationId'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LabelsSortOrder = { asc: 'asc', desc: 'desc' } as const
export interface LabelsSort {
  field: (typeof LabelsSortField)[keyof typeof LabelsSortField]
  order: (typeof LabelsSortOrder)[keyof typeof LabelsSortOrder]
}

/**
 * The pipeline description
 */
export type PipelineEntityDescription = string | null

/**
 * The pipeline name
 */
export type PipelineEntityName = string | null

export type PipelineEntityStepsItemDependentsItem = {
  pipelineStepId: string
}

export type PipelineEntityStepsItemPrerequisitesItem = {
  pipelineStepId: string
}

/**
 * The pipeline step entity
 */
export type PipelineEntityStepsItem = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  dependents: PipelineEntityStepsItemDependentsItem[]
  pipelineId: string
  prerequisites: PipelineEntityStepsItemPrerequisitesItem[]
  toolId: string
}

/**
 * The pipeline entity
 */
export interface PipelineEntity {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The pipeline description */
  description: PipelineEntityDescription
  /** The pipeline name */
  name: PipelineEntityName
  /** The organization id */
  organizationId: string
  /** The steps in the pipeline */
  steps: PipelineEntityStepsItem[]
}

export type PipelineStepEntityDependentsItem = {
  pipelineStepId: string
}

export type PipelineStepEntityPrerequisitesItem = {
  pipelineStepId: string
}

/**
 * The pipeline step entity
 */
export interface PipelineStepEntity {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  dependents: PipelineStepEntityDependentsItem[]
  pipelineId: string
  prerequisites: PipelineStepEntityPrerequisitesItem[]
  toolId: string
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchPipelinesQueryFilterAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  description: 'description',
  name: 'name',
  organizationId: 'organizationId',
  steps: 'steps'
} as const
export type SearchPipelinesQueryFilterAnyOfType =
  (typeof SearchPipelinesQueryFilterAnyOfType)[keyof typeof SearchPipelinesQueryFilterAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchPipelinesQueryFilterAnyOfType = {
  condition: 'condition'
} as const

export type SearchPipelinesQueryFilterAnyOf = {
  field: (typeof SearchPipelinesQueryFilterAnyOfField)[keyof typeof SearchPipelinesQueryFilterAnyOfField]
  operator: Operator
  type: SearchPipelinesQueryFilterAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchPipelinesQueryFilterAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type SearchPipelinesQueryFilterAnyOfFourType =
  (typeof SearchPipelinesQueryFilterAnyOfFourType)[keyof typeof SearchPipelinesQueryFilterAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchPipelinesQueryFilterAnyOfFourType = {
  group: 'group'
} as const

export type SearchPipelinesQueryFilterAnyOfFour = {
  children: PipelinesFilterNode[]
  operator: (typeof SearchPipelinesQueryFilterAnyOfFourOperator)[keyof typeof SearchPipelinesQueryFilterAnyOfFourOperator]
  type: SearchPipelinesQueryFilterAnyOfFourType
}

export type SearchPipelinesQueryFilter =
  | SearchPipelinesQueryFilterAnyOf
  | SearchPipelinesQueryFilterAnyOfFour

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchPipelinesQuerySortItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  description: 'description',
  name: 'name',
  organizationId: 'organizationId',
  steps: 'steps'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchPipelinesQuerySortItemOrder = {
  asc: 'asc',
  desc: 'desc'
} as const
export type SearchPipelinesQuerySortItem = {
  field: (typeof SearchPipelinesQuerySortItemField)[keyof typeof SearchPipelinesQuerySortItemField]
  order: (typeof SearchPipelinesQuerySortItemOrder)[keyof typeof SearchPipelinesQuerySortItemOrder]
}

/**
 * Complete search query for pipelines with nested filters, pagination, and sorting
 */
export interface SearchPipelinesQuery {
  filter?: SearchPipelinesQueryFilter
  page?: Page
  sort?: SearchPipelinesQuerySortItem[]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PipelinesFilterNodeAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  description: 'description',
  name: 'name',
  organizationId: 'organizationId',
  steps: 'steps'
} as const
export type PipelinesFilterNodeAnyOfType =
  (typeof PipelinesFilterNodeAnyOfType)[keyof typeof PipelinesFilterNodeAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PipelinesFilterNodeAnyOfType = {
  condition: 'condition'
} as const

export type PipelinesFilterNodeAnyOf = {
  field: (typeof PipelinesFilterNodeAnyOfField)[keyof typeof PipelinesFilterNodeAnyOfField]
  operator: Operator
  type: PipelinesFilterNodeAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PipelinesFilterNodeAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type PipelinesFilterNodeAnyOfFourType =
  (typeof PipelinesFilterNodeAnyOfFourType)[keyof typeof PipelinesFilterNodeAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PipelinesFilterNodeAnyOfFourType = {
  group: 'group'
} as const

export type PipelinesFilterNodeAnyOfFour = {
  children: PipelinesFilterNode[]
  operator: (typeof PipelinesFilterNodeAnyOfFourOperator)[keyof typeof PipelinesFilterNodeAnyOfFourOperator]
  type: PipelinesFilterNodeAnyOfFourType
}

export type PipelinesFilterNode =
  | PipelinesFilterNodeAnyOf
  | PipelinesFilterNodeAnyOfFour

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PipelinesFilterConditionField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  description: 'description',
  name: 'name',
  organizationId: 'organizationId',
  steps: 'steps'
} as const
export type PipelinesFilterConditionType =
  (typeof PipelinesFilterConditionType)[keyof typeof PipelinesFilterConditionType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PipelinesFilterConditionType = {
  condition: 'condition'
} as const

export interface PipelinesFilterCondition {
  field: (typeof PipelinesFilterConditionField)[keyof typeof PipelinesFilterConditionField]
  operator: Operator
  type: PipelinesFilterConditionType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PipelinesSortField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  description: 'description',
  name: 'name',
  organizationId: 'organizationId',
  steps: 'steps'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PipelinesSortOrder = { asc: 'asc', desc: 'desc' } as const
export interface PipelinesSort {
  field: (typeof PipelinesSortField)[keyof typeof PipelinesSortField]
  order: (typeof PipelinesSortOrder)[keyof typeof PipelinesSortOrder]
}

/**
 * The timestamp when the run completed
 */
export type RunEntityCompletedAt = string | null

/**
 * The error message
 */
export type RunEntityError = string | null

/**
 * The pipeline ID associated with the run
 */
export type RunEntityPipelineId = string | null

/**
 * The timestamp when the run started
 */
export type RunEntityStartedAt = string | null

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RunEntityStatus = {
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  PROCESSING: 'PROCESSING',
  QUEUED: 'QUEUED'
} as const
/**
 * The run entity
 */
export interface RunEntity {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The timestamp when the run completed */
  completedAt: RunEntityCompletedAt
  /** The error message */
  error: RunEntityError
  /** The organization name */
  organizationId: string
  /** The pipeline ID associated with the run */
  pipelineId: RunEntityPipelineId
  /** The percent progress of the run */
  progress: number
  /** The timestamp when the run started */
  startedAt: RunEntityStartedAt
  status: (typeof RunEntityStatus)[keyof typeof RunEntityStatus]
  /** The tool ID associated with the run */
  toolId: string
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchRunsQueryFilterAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt',
  error: 'error',
  organizationId: 'organizationId',
  pipelineId: 'pipelineId',
  progress: 'progress',
  startedAt: 'startedAt',
  status: 'status',
  toolId: 'toolId'
} as const
export type SearchRunsQueryFilterAnyOfType =
  (typeof SearchRunsQueryFilterAnyOfType)[keyof typeof SearchRunsQueryFilterAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchRunsQueryFilterAnyOfType = {
  condition: 'condition'
} as const

export type SearchRunsQueryFilterAnyOf = {
  field: (typeof SearchRunsQueryFilterAnyOfField)[keyof typeof SearchRunsQueryFilterAnyOfField]
  operator: Operator
  type: SearchRunsQueryFilterAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchRunsQueryFilterAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type SearchRunsQueryFilterAnyOfFourType =
  (typeof SearchRunsQueryFilterAnyOfFourType)[keyof typeof SearchRunsQueryFilterAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchRunsQueryFilterAnyOfFourType = {
  group: 'group'
} as const

export type SearchRunsQueryFilterAnyOfFour = {
  children: RunsFilterNode[]
  operator: (typeof SearchRunsQueryFilterAnyOfFourOperator)[keyof typeof SearchRunsQueryFilterAnyOfFourOperator]
  type: SearchRunsQueryFilterAnyOfFourType
}

export type SearchRunsQueryFilter =
  | SearchRunsQueryFilterAnyOf
  | SearchRunsQueryFilterAnyOfFour

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchRunsQuerySortItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt',
  error: 'error',
  organizationId: 'organizationId',
  pipelineId: 'pipelineId',
  progress: 'progress',
  startedAt: 'startedAt',
  status: 'status',
  toolId: 'toolId'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchRunsQuerySortItemOrder = {
  asc: 'asc',
  desc: 'desc'
} as const
export type SearchRunsQuerySortItem = {
  field: (typeof SearchRunsQuerySortItemField)[keyof typeof SearchRunsQuerySortItemField]
  order: (typeof SearchRunsQuerySortItemOrder)[keyof typeof SearchRunsQuerySortItemOrder]
}

/**
 * Complete search query for runs with nested filters, pagination, and sorting
 */
export interface SearchRunsQuery {
  filter?: SearchRunsQueryFilter
  page?: Page
  sort?: SearchRunsQuerySortItem[]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RunsFilterNodeAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt',
  error: 'error',
  organizationId: 'organizationId',
  pipelineId: 'pipelineId',
  progress: 'progress',
  startedAt: 'startedAt',
  status: 'status',
  toolId: 'toolId'
} as const
export type RunsFilterNodeAnyOfType =
  (typeof RunsFilterNodeAnyOfType)[keyof typeof RunsFilterNodeAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RunsFilterNodeAnyOfType = {
  condition: 'condition'
} as const

export type RunsFilterNodeAnyOf = {
  field: (typeof RunsFilterNodeAnyOfField)[keyof typeof RunsFilterNodeAnyOfField]
  operator: Operator
  type: RunsFilterNodeAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RunsFilterNodeAnyOfFourOperator = { and: 'and', or: 'or' } as const
export type RunsFilterNodeAnyOfFourType =
  (typeof RunsFilterNodeAnyOfFourType)[keyof typeof RunsFilterNodeAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RunsFilterNodeAnyOfFourType = {
  group: 'group'
} as const

export type RunsFilterNodeAnyOfFour = {
  children: RunsFilterNode[]
  operator: (typeof RunsFilterNodeAnyOfFourOperator)[keyof typeof RunsFilterNodeAnyOfFourOperator]
  type: RunsFilterNodeAnyOfFourType
}

export type RunsFilterNode = RunsFilterNodeAnyOf | RunsFilterNodeAnyOfFour

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RunsFilterConditionField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt',
  error: 'error',
  organizationId: 'organizationId',
  pipelineId: 'pipelineId',
  progress: 'progress',
  startedAt: 'startedAt',
  status: 'status',
  toolId: 'toolId'
} as const
export type RunsFilterConditionType =
  (typeof RunsFilterConditionType)[keyof typeof RunsFilterConditionType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RunsFilterConditionType = {
  condition: 'condition'
} as const

export interface RunsFilterCondition {
  field: (typeof RunsFilterConditionField)[keyof typeof RunsFilterConditionField]
  operator: Operator
  type: RunsFilterConditionType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RunsSortField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt',
  error: 'error',
  organizationId: 'organizationId',
  pipelineId: 'pipelineId',
  progress: 'progress',
  startedAt: 'startedAt',
  status: 'status',
  toolId: 'toolId'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RunsSortOrder = { asc: 'asc', desc: 'desc' } as const
export interface RunsSort {
  field: (typeof RunsSortField)[keyof typeof RunsSortField]
  order: (typeof RunsSortOrder)[keyof typeof RunsSortOrder]
}

/**
 * The tool entity
 */
export interface ToolEntity {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The tool description */
  description: string
  /** The MIME type of the input for the tool, e.g. text/plain */
  inputMimeType: string
  /** The name of the tool */
  name: string
  /** The organization name */
  organizationId: string
  /** The MIME type of the output for the tool, e.g. text/plain */
  outputMimeType: string
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchToolsQueryFilterAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  description: 'description',
  inputMimeType: 'inputMimeType',
  name: 'name',
  organizationId: 'organizationId',
  outputMimeType: 'outputMimeType'
} as const
export type SearchToolsQueryFilterAnyOfType =
  (typeof SearchToolsQueryFilterAnyOfType)[keyof typeof SearchToolsQueryFilterAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchToolsQueryFilterAnyOfType = {
  condition: 'condition'
} as const

export type SearchToolsQueryFilterAnyOf = {
  field: (typeof SearchToolsQueryFilterAnyOfField)[keyof typeof SearchToolsQueryFilterAnyOfField]
  operator: Operator
  type: SearchToolsQueryFilterAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchToolsQueryFilterAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type SearchToolsQueryFilterAnyOfFourType =
  (typeof SearchToolsQueryFilterAnyOfFourType)[keyof typeof SearchToolsQueryFilterAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchToolsQueryFilterAnyOfFourType = {
  group: 'group'
} as const

export type SearchToolsQueryFilterAnyOfFour = {
  children: ToolsFilterNode[]
  operator: (typeof SearchToolsQueryFilterAnyOfFourOperator)[keyof typeof SearchToolsQueryFilterAnyOfFourOperator]
  type: SearchToolsQueryFilterAnyOfFourType
}

export type SearchToolsQueryFilter =
  | SearchToolsQueryFilterAnyOf
  | SearchToolsQueryFilterAnyOfFour

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchToolsQuerySortItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  description: 'description',
  inputMimeType: 'inputMimeType',
  name: 'name',
  organizationId: 'organizationId',
  outputMimeType: 'outputMimeType'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SearchToolsQuerySortItemOrder = {
  asc: 'asc',
  desc: 'desc'
} as const
export type SearchToolsQuerySortItem = {
  field: (typeof SearchToolsQuerySortItemField)[keyof typeof SearchToolsQuerySortItemField]
  order: (typeof SearchToolsQuerySortItemOrder)[keyof typeof SearchToolsQuerySortItemOrder]
}

/**
 * Complete search query for tools with nested filters, pagination, and sorting
 */
export interface SearchToolsQuery {
  filter?: SearchToolsQueryFilter
  page?: Page
  sort?: SearchToolsQuerySortItem[]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ToolsFilterNodeAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  description: 'description',
  inputMimeType: 'inputMimeType',
  name: 'name',
  organizationId: 'organizationId',
  outputMimeType: 'outputMimeType'
} as const
export type ToolsFilterNodeAnyOfType =
  (typeof ToolsFilterNodeAnyOfType)[keyof typeof ToolsFilterNodeAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ToolsFilterNodeAnyOfType = {
  condition: 'condition'
} as const

export type ToolsFilterNodeAnyOf = {
  field: (typeof ToolsFilterNodeAnyOfField)[keyof typeof ToolsFilterNodeAnyOfField]
  operator: Operator
  type: ToolsFilterNodeAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ToolsFilterNodeAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type ToolsFilterNodeAnyOfFourType =
  (typeof ToolsFilterNodeAnyOfFourType)[keyof typeof ToolsFilterNodeAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ToolsFilterNodeAnyOfFourType = {
  group: 'group'
} as const

export type ToolsFilterNodeAnyOfFour = {
  children: ToolsFilterNode[]
  operator: (typeof ToolsFilterNodeAnyOfFourOperator)[keyof typeof ToolsFilterNodeAnyOfFourOperator]
  type: ToolsFilterNodeAnyOfFourType
}

export type ToolsFilterNode = ToolsFilterNodeAnyOf | ToolsFilterNodeAnyOfFour

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ToolsFilterConditionField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  description: 'description',
  inputMimeType: 'inputMimeType',
  name: 'name',
  organizationId: 'organizationId',
  outputMimeType: 'outputMimeType'
} as const
export type ToolsFilterConditionType =
  (typeof ToolsFilterConditionType)[keyof typeof ToolsFilterConditionType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ToolsFilterConditionType = {
  condition: 'condition'
} as const

export interface ToolsFilterCondition {
  field: (typeof ToolsFilterConditionField)[keyof typeof ToolsFilterConditionField]
  operator: Operator
  type: ToolsFilterConditionType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ToolsSortField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  description: 'description',
  inputMimeType: 'inputMimeType',
  name: 'name',
  organizationId: 'organizationId',
  outputMimeType: 'outputMimeType'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ToolsSortOrder = { asc: 'asc', desc: 'desc' } as const
export interface ToolsSort {
  field: (typeof ToolsSortField)[keyof typeof ToolsSortField]
  order: (typeof ToolsSortOrder)[keyof typeof ToolsSortOrder]
}

export type LoginBody = {
  /** The email address associated with the account */
  email: string
  /**
   * The name of the user creating the account
   * @minLength 1
   */
  name: string
  /** The password for the account */
  password: string
}

/**
 * The IP address of the session
 */
export type Login200SessionIpAddress = string | null

/**
 * The user agent of the session
 */
export type Login200SessionUserAgent = string | null

/**
 * The session entity
 */
export type Login200Session = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The active organization ID */
  activeOrganizationId: string
  /** The expiration date of the session */
  expiresAt: string
  /** The IP address of the session */
  ipAddress: Login200SessionIpAddress
  /** The session token */
  token: string
  /** The user agent of the session */
  userAgent: Login200SessionUserAgent
  /** The ID of the user associated with the session */
  userId: string
}

/**
 * The user's avatar image URL
 */
export type Login200UserImage = null | string

/**
 * The user entity
 */
export type Login200User = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** Whether or not the user is deactivated */
  deactivated: boolean
  /** The user's e-mail */
  email: string
  /** Whether or not the user's e-mail has been verified */
  emailVerified: boolean
  /** The user's avatar image URL */
  image: Login200UserImage
  /**
   * The user's name
   * @minLength 1
   */
  name: string
}

export type Login200 = {
  /** The session entity */
  session: Login200Session
  /** The user entity */
  user: Login200User
}

/**
 * The IP address of the session
 */
export type GetSession200SessionIpAddress = string | null

/**
 * The user agent of the session
 */
export type GetSession200SessionUserAgent = string | null

/**
 * The session entity
 */
export type GetSession200Session = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The active organization ID */
  activeOrganizationId: string
  /** The expiration date of the session */
  expiresAt: string
  /** The IP address of the session */
  ipAddress: GetSession200SessionIpAddress
  /** The session token */
  token: string
  /** The user agent of the session */
  userAgent: GetSession200SessionUserAgent
  /** The ID of the user associated with the session */
  userId: string
}

/**
 * The user's avatar image URL
 */
export type GetSession200UserImage = null | string

/**
 * The user entity
 */
export type GetSession200User = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** Whether or not the user is deactivated */
  deactivated: boolean
  /** The user's e-mail */
  email: string
  /** Whether or not the user's e-mail has been verified */
  emailVerified: boolean
  /** The user's avatar image URL */
  image: GetSession200UserImage
  /**
   * The user's name
   * @minLength 1
   */
  name: string
}

export type GetSession200 = {
  /** The session entity */
  session: GetSession200Session
  /** The user entity */
  user: GetSession200User
}

export type RegisterBody = {
  /** The email address associated with the account */
  email: string
  /**
   * The name of the user creating the account
   * @minLength 1
   */
  name: string
  /** The password for the account */
  password: string
}

/**
 * The IP address of the session
 */
export type Register204SessionIpAddress = string | null

/**
 * The user agent of the session
 */
export type Register204SessionUserAgent = string | null

/**
 * The session entity
 */
export type Register204Session = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The active organization ID */
  activeOrganizationId: string
  /** The expiration date of the session */
  expiresAt: string
  /** The IP address of the session */
  ipAddress: Register204SessionIpAddress
  /** The session token */
  token: string
  /** The user agent of the session */
  userAgent: Register204SessionUserAgent
  /** The ID of the user associated with the session */
  userId: string
}

/**
 * The user's avatar image URL
 */
export type Register204UserImage = null | string

/**
 * The user entity
 */
export type Register204User = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** Whether or not the user is deactivated */
  deactivated: boolean
  /** The user's e-mail */
  email: string
  /** Whether or not the user's e-mail has been verified */
  emailVerified: boolean
  /** The user's avatar image URL */
  image: Register204UserImage
  /**
   * The user's name
   * @minLength 1
   */
  name: string
}

export type Register204 = {
  /** The session entity */
  session: Register204Session
  /** The user entity */
  user: Register204User
}

export type ConfirmEmailVerificationBody = {
  /** The password reset token */
  token: string
}

/**
 * The IP address of the session
 */
export type ConfirmEmailVerification204SessionIpAddress = string | null

/**
 * The user agent of the session
 */
export type ConfirmEmailVerification204SessionUserAgent = string | null

/**
 * The session entity
 */
export type ConfirmEmailVerification204Session = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The active organization ID */
  activeOrganizationId: string
  /** The expiration date of the session */
  expiresAt: string
  /** The IP address of the session */
  ipAddress: ConfirmEmailVerification204SessionIpAddress
  /** The session token */
  token: string
  /** The user agent of the session */
  userAgent: ConfirmEmailVerification204SessionUserAgent
  /** The ID of the user associated with the session */
  userId: string
}

/**
 * The user's avatar image URL
 */
export type ConfirmEmailVerification204UserImage = null | string

/**
 * The user entity
 */
export type ConfirmEmailVerification204User = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** Whether or not the user is deactivated */
  deactivated: boolean
  /** The user's e-mail */
  email: string
  /** Whether or not the user's e-mail has been verified */
  emailVerified: boolean
  /** The user's avatar image URL */
  image: ConfirmEmailVerification204UserImage
  /**
   * The user's name
   * @minLength 1
   */
  name: string
}

export type ConfirmEmailVerification204 = {
  /** The session entity */
  session: ConfirmEmailVerification204Session
  /** The user entity */
  user: ConfirmEmailVerification204User
}

export type ConfirmPasswordResetBody = {
  /** The new password */
  newPassword: string
  /** The password reset token */
  token: string
}

export type RequestPasswordResetBody = {
  /** The e-mail to send the password reset token to */
  email: string
}

export type ConfirmEmailChangeBody = {
  /** The e-mail to send the confirmation token to */
  newEmail: string
  /** The password reset token */
  token: string
  /** The user ID of the user requesting the email change */
  userId: string
}

export type RequestEmailChangeBody = {
  /** The e-mail to send the confirmation token to */
  newEmail: string
  /** The user ID of the user requesting the email change */
  userId: string
}

export type CreateAccountBody = {
  /** The email address associated with the account */
  email: string
  /**
   * The name of the user creating the account
   * @minLength 1
   */
  name: string
  /** The password for the account */
  password: string
}

export type CreateAccount201 = {
  data: AccountEntity
}

export type FindManyAccountsParams = {
  filter?: FindManyAccountsFilterAnyOf | FindManyAccountsFilterAnyOfFour
  page?: Page
  sort?: FindManyAccountsSortItem[]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyAccountsFilterAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  accessToken: 'accessToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  accountId: 'accountId',
  idToken: 'idToken',
  password: 'password',
  providerId: 'providerId',
  refreshToken: 'refreshToken',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  userId: 'userId'
} as const
export type FindManyAccountsFilterAnyOfType =
  (typeof FindManyAccountsFilterAnyOfType)[keyof typeof FindManyAccountsFilterAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyAccountsFilterAnyOfType = {
  condition: 'condition'
} as const

export type FindManyAccountsFilterAnyOf = {
  field: (typeof FindManyAccountsFilterAnyOfField)[keyof typeof FindManyAccountsFilterAnyOfField]
  operator: Operator
  type: FindManyAccountsFilterAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyAccountsFilterAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type FindManyAccountsFilterAnyOfFourType =
  (typeof FindManyAccountsFilterAnyOfFourType)[keyof typeof FindManyAccountsFilterAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyAccountsFilterAnyOfFourType = {
  group: 'group'
} as const

export type FindManyAccountsFilterAnyOfFour = {
  children: AccountsFilterNode[]
  operator: (typeof FindManyAccountsFilterAnyOfFourOperator)[keyof typeof FindManyAccountsFilterAnyOfFourOperator]
  type: FindManyAccountsFilterAnyOfFourType
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyAccountsSortItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  accessToken: 'accessToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  accountId: 'accountId',
  idToken: 'idToken',
  password: 'password',
  providerId: 'providerId',
  refreshToken: 'refreshToken',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  userId: 'userId'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyAccountsSortItemOrder = {
  asc: 'asc',
  desc: 'desc'
} as const
export type FindManyAccountsSortItem = {
  field: (typeof FindManyAccountsSortItemField)[keyof typeof FindManyAccountsSortItemField]
  order: (typeof FindManyAccountsSortItemOrder)[keyof typeof FindManyAccountsSortItemOrder]
}

export type FindManyAccounts200Meta = {
  /** Total number of items in the collection */
  total: number
}

export type FindManyAccounts200 = {
  data: AccountEntity[]
  meta: FindManyAccounts200Meta
}

export type DeleteAccount200 = {
  data: AccountEntity
}

export type GetOneAccount200 = {
  data: AccountEntity
}

/**
 * The access token
 */
export type UpdateAccountBodyAccessToken = string | null

/**
 * The expiration date
 */
export type UpdateAccountBodyAccessTokenExpiresAt = string | null

/**
 * The ID token
 */
export type UpdateAccountBodyIdToken = string | null

/**
 * The hashed password for local authentication
 */
export type UpdateAccountBodyPassword = string | null

/**
 * The refresh token
 */
export type UpdateAccountBodyRefreshToken = string | null

/**
 * The refresh token expiration date
 */
export type UpdateAccountBodyRefreshTokenExpiresAt = string | null

/**
 * The scope of the access token
 */
export type UpdateAccountBodyScope = string | null

/**
 * The account entity
 */
export type UpdateAccountBody = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The access token */
  accessToken: UpdateAccountBodyAccessToken
  /** The expiration date */
  accessTokenExpiresAt: UpdateAccountBodyAccessTokenExpiresAt
  /** The unique identifier for the account */
  accountId: string
  /** The ID token */
  idToken: UpdateAccountBodyIdToken
  /** The hashed password for local authentication */
  password: UpdateAccountBodyPassword
  /** The provider ID associated with the auth provider */
  providerId: string
  /** The refresh token */
  refreshToken: UpdateAccountBodyRefreshToken
  /** The refresh token expiration date */
  refreshTokenExpiresAt: UpdateAccountBodyRefreshTokenExpiresAt
  /** The scope of the access token */
  scope: UpdateAccountBodyScope
  /** The user ID associated with the auth provider */
  userId: string
}

export type UpdateAccount200 = {
  data: AccountEntity
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateInvitationBodyRole = {
  admin: 'admin',
  owner: 'owner',
  member: 'member'
} as const
export type CreateInvitationBody = {
  /** The email of the invitated user */
  email: string
  /** The role of the invitation */
  role: (typeof CreateInvitationBodyRole)[keyof typeof CreateInvitationBodyRole]
}

export type CreateInvitation201 = {
  data: InvitationEntity
}

export type FindManyInvitationsParams = {
  filter?: FindManyInvitationsFilterAnyOf | FindManyInvitationsFilterAnyOfFour
  page?: Page
  sort?: FindManyInvitationsSortItem[]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyInvitationsFilterAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  email: 'email',
  expiresAt: 'expiresAt',
  inviterId: 'inviterId',
  organizationId: 'organizationId',
  role: 'role',
  status: 'status'
} as const
export type FindManyInvitationsFilterAnyOfType =
  (typeof FindManyInvitationsFilterAnyOfType)[keyof typeof FindManyInvitationsFilterAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyInvitationsFilterAnyOfType = {
  condition: 'condition'
} as const

export type FindManyInvitationsFilterAnyOf = {
  field: (typeof FindManyInvitationsFilterAnyOfField)[keyof typeof FindManyInvitationsFilterAnyOfField]
  operator: Operator
  type: FindManyInvitationsFilterAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyInvitationsFilterAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type FindManyInvitationsFilterAnyOfFourType =
  (typeof FindManyInvitationsFilterAnyOfFourType)[keyof typeof FindManyInvitationsFilterAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyInvitationsFilterAnyOfFourType = {
  group: 'group'
} as const

export type FindManyInvitationsFilterAnyOfFour = {
  children: InvitationsFilterNode[]
  operator: (typeof FindManyInvitationsFilterAnyOfFourOperator)[keyof typeof FindManyInvitationsFilterAnyOfFourOperator]
  type: FindManyInvitationsFilterAnyOfFourType
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyInvitationsSortItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  email: 'email',
  expiresAt: 'expiresAt',
  inviterId: 'inviterId',
  organizationId: 'organizationId',
  role: 'role',
  status: 'status'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyInvitationsSortItemOrder = {
  asc: 'asc',
  desc: 'desc'
} as const
export type FindManyInvitationsSortItem = {
  field: (typeof FindManyInvitationsSortItemField)[keyof typeof FindManyInvitationsSortItemField]
  order: (typeof FindManyInvitationsSortItemOrder)[keyof typeof FindManyInvitationsSortItemOrder]
}

export type FindManyInvitations200Meta = {
  /** Total number of items in the collection */
  total: number
}

export type FindManyInvitations200 = {
  data: InvitationEntity[]
  meta: FindManyInvitations200Meta
}

export type DeleteInvitation200 = {
  data: InvitationEntity
}

export type GetOneInvitation200 = {
  data: InvitationEntity
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateInvitationBodyRole = {
  admin: 'admin',
  owner: 'owner',
  member: 'member'
} as const
export type UpdateInvitationBody = {
  /** The email of the invitated user */
  email?: string
  /** The role of the invitation */
  role?: (typeof UpdateInvitationBodyRole)[keyof typeof UpdateInvitationBodyRole]
}

export type UpdateInvitation200 = {
  data: InvitationEntity
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateMemberBodyRole = {
  admin: 'admin',
  owner: 'owner',
  member: 'member'
} as const
export type CreateMemberBody = {
  /** The role of the member */
  role: (typeof CreateMemberBodyRole)[keyof typeof CreateMemberBodyRole]
}

export type CreateMember201 = {
  data: MemberEntity
}

export type FindManyMembersParams = {
  filter?: FindManyMembersFilterAnyOf | FindManyMembersFilterAnyOfFour
  page?: Page
  sort?: FindManyMembersSortItem[]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyMembersFilterAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId',
  role: 'role',
  userId: 'userId'
} as const
export type FindManyMembersFilterAnyOfType =
  (typeof FindManyMembersFilterAnyOfType)[keyof typeof FindManyMembersFilterAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyMembersFilterAnyOfType = {
  condition: 'condition'
} as const

export type FindManyMembersFilterAnyOf = {
  field: (typeof FindManyMembersFilterAnyOfField)[keyof typeof FindManyMembersFilterAnyOfField]
  operator: Operator
  type: FindManyMembersFilterAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyMembersFilterAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type FindManyMembersFilterAnyOfFourType =
  (typeof FindManyMembersFilterAnyOfFourType)[keyof typeof FindManyMembersFilterAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyMembersFilterAnyOfFourType = {
  group: 'group'
} as const

export type FindManyMembersFilterAnyOfFour = {
  children: MembersFilterNode[]
  operator: (typeof FindManyMembersFilterAnyOfFourOperator)[keyof typeof FindManyMembersFilterAnyOfFourOperator]
  type: FindManyMembersFilterAnyOfFourType
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyMembersSortItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  organizationId: 'organizationId',
  role: 'role',
  userId: 'userId'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyMembersSortItemOrder = {
  asc: 'asc',
  desc: 'desc'
} as const
export type FindManyMembersSortItem = {
  field: (typeof FindManyMembersSortItemField)[keyof typeof FindManyMembersSortItemField]
  order: (typeof FindManyMembersSortItemOrder)[keyof typeof FindManyMembersSortItemOrder]
}

export type FindManyMembers200Meta = {
  /** Total number of items in the collection */
  total: number
}

export type FindManyMembers200 = {
  data: MemberEntity[]
  meta: FindManyMembers200Meta
}

export type DeleteMember200 = {
  data: MemberEntity
}

export type GetOneMember200 = {
  data: MemberEntity
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UpdateMemberBodyRole = {
  admin: 'admin',
  owner: 'owner',
  member: 'member'
} as const
export type UpdateMemberBody = {
  /** The role of the member */
  role?: (typeof UpdateMemberBodyRole)[keyof typeof UpdateMemberBodyRole]
}

export type UpdateMember200 = {
  data: MemberEntity
}

export type CreateOrganizationBody = {
  /** The billing email to use for the organization */
  billingEmail: string
  /** The ID of the item */
  organizationId: string
}

export type CreateOrganization201 = {
  data: OrganizationEntity
}

export type FindManyOrganizationsParams = {
  filter?:
    | FindManyOrganizationsFilterAnyOf
    | FindManyOrganizationsFilterAnyOfFour
  page?: Page
  sort?: FindManyOrganizationsSortItem[]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyOrganizationsFilterAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  billingEmail: 'billingEmail',
  credits: 'credits',
  logo: 'logo',
  metadata: 'metadata',
  name: 'name',
  plan: 'plan',
  slug: 'slug',
  stripeCustomerId: 'stripeCustomerId'
} as const
export type FindManyOrganizationsFilterAnyOfType =
  (typeof FindManyOrganizationsFilterAnyOfType)[keyof typeof FindManyOrganizationsFilterAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyOrganizationsFilterAnyOfType = {
  condition: 'condition'
} as const

export type FindManyOrganizationsFilterAnyOf = {
  field: (typeof FindManyOrganizationsFilterAnyOfField)[keyof typeof FindManyOrganizationsFilterAnyOfField]
  operator: Operator
  type: FindManyOrganizationsFilterAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyOrganizationsFilterAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type FindManyOrganizationsFilterAnyOfFourType =
  (typeof FindManyOrganizationsFilterAnyOfFourType)[keyof typeof FindManyOrganizationsFilterAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyOrganizationsFilterAnyOfFourType = {
  group: 'group'
} as const

export type FindManyOrganizationsFilterAnyOfFour = {
  children: OrganizationsFilterNode[]
  operator: (typeof FindManyOrganizationsFilterAnyOfFourOperator)[keyof typeof FindManyOrganizationsFilterAnyOfFourOperator]
  type: FindManyOrganizationsFilterAnyOfFourType
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyOrganizationsSortItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  billingEmail: 'billingEmail',
  credits: 'credits',
  logo: 'logo',
  metadata: 'metadata',
  name: 'name',
  plan: 'plan',
  slug: 'slug',
  stripeCustomerId: 'stripeCustomerId'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyOrganizationsSortItemOrder = {
  asc: 'asc',
  desc: 'desc'
} as const
export type FindManyOrganizationsSortItem = {
  field: (typeof FindManyOrganizationsSortItemField)[keyof typeof FindManyOrganizationsSortItemField]
  order: (typeof FindManyOrganizationsSortItemOrder)[keyof typeof FindManyOrganizationsSortItemOrder]
}

export type FindManyOrganizations200Meta = {
  /** Total number of items in the collection */
  total: number
}

export type FindManyOrganizations200 = {
  data: OrganizationEntity[]
  meta: FindManyOrganizations200Meta
}

export type DeleteOrganization200 = {
  data: OrganizationEntity
}

export type GetOneOrganization200 = {
  data: OrganizationEntity
}

export type UpdateOrganizationBody = {
  /** The billing email to use for the organization */
  billingEmail?: string
  /** The ID of the item */
  organizationId?: string
}

export type UpdateOrganization200 = {
  data: OrganizationEntity
}

/**
 * The IP address of the session
 */
export type CreateSessionBodyIpAddress = string | null

/**
 * The user agent of the session
 */
export type CreateSessionBodyUserAgent = string | null

/**
 * The session entity
 */
export type CreateSessionBody = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The active organization ID */
  activeOrganizationId: string
  /** The expiration date of the session */
  expiresAt: string
  /** The IP address of the session */
  ipAddress: CreateSessionBodyIpAddress
  /** The session token */
  token: string
  /** The user agent of the session */
  userAgent: CreateSessionBodyUserAgent
  /** The ID of the user associated with the session */
  userId: string
}

export type CreateSession201 = {
  data: SessionEntity
}

export type FindManySessionsParams = {
  filter?: FindManySessionsFilterAnyOf | FindManySessionsFilterAnyOfFour
  page?: Page
  sort?: FindManySessionsSortItem[]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManySessionsFilterAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  activeOrganizationId: 'activeOrganizationId',
  expiresAt: 'expiresAt',
  ipAddress: 'ipAddress',
  token: 'token',
  userAgent: 'userAgent',
  userId: 'userId'
} as const
export type FindManySessionsFilterAnyOfType =
  (typeof FindManySessionsFilterAnyOfType)[keyof typeof FindManySessionsFilterAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManySessionsFilterAnyOfType = {
  condition: 'condition'
} as const

export type FindManySessionsFilterAnyOf = {
  field: (typeof FindManySessionsFilterAnyOfField)[keyof typeof FindManySessionsFilterAnyOfField]
  operator: Operator
  type: FindManySessionsFilterAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManySessionsFilterAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type FindManySessionsFilterAnyOfFourType =
  (typeof FindManySessionsFilterAnyOfFourType)[keyof typeof FindManySessionsFilterAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManySessionsFilterAnyOfFourType = {
  group: 'group'
} as const

export type FindManySessionsFilterAnyOfFour = {
  children: SessionsFilterNode[]
  operator: (typeof FindManySessionsFilterAnyOfFourOperator)[keyof typeof FindManySessionsFilterAnyOfFourOperator]
  type: FindManySessionsFilterAnyOfFourType
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManySessionsSortItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  activeOrganizationId: 'activeOrganizationId',
  expiresAt: 'expiresAt',
  ipAddress: 'ipAddress',
  token: 'token',
  userAgent: 'userAgent',
  userId: 'userId'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManySessionsSortItemOrder = {
  asc: 'asc',
  desc: 'desc'
} as const
export type FindManySessionsSortItem = {
  field: (typeof FindManySessionsSortItemField)[keyof typeof FindManySessionsSortItemField]
  order: (typeof FindManySessionsSortItemOrder)[keyof typeof FindManySessionsSortItemOrder]
}

export type FindManySessions200Meta = {
  /** Total number of items in the collection */
  total: number
}

export type FindManySessions200 = {
  data: SessionEntity[]
  meta: FindManySessions200Meta
}

export type DeleteSession200 = {
  data: SessionEntity
}

export type GetOneSession200 = {
  data: SessionEntity
}

/**
 * The IP address of the session
 */
export type UpdateSessionBodyIpAddress = string | null

/**
 * The user agent of the session
 */
export type UpdateSessionBodyUserAgent = string | null

/**
 * The session entity
 */
export type UpdateSessionBody = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  /** The active organization ID */
  activeOrganizationId: string
  /** The expiration date of the session */
  expiresAt: string
  /** The IP address of the session */
  ipAddress: UpdateSessionBodyIpAddress
  /** The session token */
  token: string
  /** The user agent of the session */
  userAgent: UpdateSessionBodyUserAgent
  /** The ID of the user associated with the session */
  userId: string
}

export type UpdateSession200 = {
  data: SessionEntity
}

/**
 * The user's avatar image URL
 */
export type CreateUserBodyImage = null | string

export type CreateUserBody = {
  /** The user's e-mail */
  email: string
  /** The user's avatar image URL */
  image: CreateUserBodyImage
}

export type CreateUser201 = {
  data: UserEntity
}

export type FindManyUsersParams = {
  filter?: FindManyUsersFilterAnyOf | FindManyUsersFilterAnyOfFour
  page?: Page
  sort?: FindManyUsersSortItem[]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyUsersFilterAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  deactivated: 'deactivated',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  name: 'name'
} as const
export type FindManyUsersFilterAnyOfType =
  (typeof FindManyUsersFilterAnyOfType)[keyof typeof FindManyUsersFilterAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyUsersFilterAnyOfType = {
  condition: 'condition'
} as const

export type FindManyUsersFilterAnyOf = {
  field: (typeof FindManyUsersFilterAnyOfField)[keyof typeof FindManyUsersFilterAnyOfField]
  operator: Operator
  type: FindManyUsersFilterAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyUsersFilterAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type FindManyUsersFilterAnyOfFourType =
  (typeof FindManyUsersFilterAnyOfFourType)[keyof typeof FindManyUsersFilterAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyUsersFilterAnyOfFourType = {
  group: 'group'
} as const

export type FindManyUsersFilterAnyOfFour = {
  children: UsersFilterNode[]
  operator: (typeof FindManyUsersFilterAnyOfFourOperator)[keyof typeof FindManyUsersFilterAnyOfFourOperator]
  type: FindManyUsersFilterAnyOfFourType
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyUsersSortItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  deactivated: 'deactivated',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  name: 'name'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyUsersSortItemOrder = { asc: 'asc', desc: 'desc' } as const
export type FindManyUsersSortItem = {
  field: (typeof FindManyUsersSortItemField)[keyof typeof FindManyUsersSortItemField]
  order: (typeof FindManyUsersSortItemOrder)[keyof typeof FindManyUsersSortItemOrder]
}

export type FindManyUsers200Meta = {
  /** Total number of items in the collection */
  total: number
}

export type FindManyUsers200 = {
  data: UserEntity[]
  meta: FindManyUsers200Meta
}

export type DeleteUser200 = {
  data: UserEntity
}

export type GetOneUser200 = {
  data: UserEntity
}

/**
 * The user's avatar image URL
 */
export type UpdateUserBodyImage = null | string

export type UpdateUserBody = {
  /** The user's e-mail */
  email?: string
  /** The user's avatar image URL */
  image?: UpdateUserBodyImage
}

export type UpdateUser200 = {
  data: UserEntity
}

export type GetConfig200AuthFirebaseAnyOf = {
  enabled: boolean
}

export type GetConfig200AuthFirebaseAnyOfTwo = {
  clientEmail: string
  enabled: boolean
  privateKey: string
  projectId: string
}

export type GetConfig200AuthFirebase =
  | GetConfig200AuthFirebaseAnyOf
  | GetConfig200AuthFirebaseAnyOfTwo

export type GetConfig200AuthLocal = {
  enabled: boolean
}

export type GetConfig200AuthTwitterAnyOf = {
  enabled: boolean
}

export type GetConfig200AuthTwitterAnyOfTwo = {
  callbackURL: string
  consumerKey: string
  consumerSecret: string
  enabled: boolean
}

export type GetConfig200AuthTwitter =
  | GetConfig200AuthTwitterAnyOf
  | GetConfig200AuthTwitterAnyOfTwo

export type GetConfig200Auth = {
  firebase: GetConfig200AuthFirebase
  local: GetConfig200AuthLocal
  twitter: GetConfig200AuthTwitter
}

export type GetConfig200BillingAnyOf = {
  enabled: boolean
}

export type GetConfig200BillingAnyOfTwoStripe = {
  token: string
  whsec: string
}

export type GetConfig200BillingAnyOfTwo = {
  enabled: boolean
  stripe: GetConfig200BillingAnyOfTwoStripe
}

export type GetConfig200Billing =
  | GetConfig200BillingAnyOf
  | GetConfig200BillingAnyOfTwo

export type GetConfig200Config = {
  validate: boolean
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200DatabaseType = {
  postgres: 'postgres',
  sqlite: 'sqlite',
  'in-memory': 'in-memory'
} as const
export type GetConfig200Database = {
  type: (typeof GetConfig200DatabaseType)[keyof typeof GetConfig200DatabaseType]
  url: string
}

export type GetConfig200EmailAnyOf = {
  enabled: boolean
}

export type GetConfig200EmailAnyOfTwo = {
  enabled: boolean
  password: string
  service: string
  user: string
}

export type GetConfig200Email =
  | GetConfig200EmailAnyOf
  | GetConfig200EmailAnyOfTwo

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200EmbeddingType = {
  openai: 'openai',
  ollama: 'ollama'
} as const
export type GetConfig200Embedding = {
  type: (typeof GetConfig200EmbeddingType)[keyof typeof GetConfig200EmbeddingType]
}

export type GetConfig200Jwt = {
  expiration: string
  secret: string
}

export type GetConfig200LlmAnyOfType =
  (typeof GetConfig200LlmAnyOfType)[keyof typeof GetConfig200LlmAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200LlmAnyOfType = {
  ollama: 'ollama'
} as const

export type GetConfig200LlmAnyOf = {
  endpoint: string
  token?: string
  type: GetConfig200LlmAnyOfType
}

export type GetConfig200LlmAnyOfThreeType =
  (typeof GetConfig200LlmAnyOfThreeType)[keyof typeof GetConfig200LlmAnyOfThreeType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200LlmAnyOfThreeType = {
  openai: 'openai'
} as const

export type GetConfig200LlmAnyOfThree = {
  endpoint?: string
  token: string
  type: GetConfig200LlmAnyOfThreeType
}

export type GetConfig200Llm = GetConfig200LlmAnyOf | GetConfig200LlmAnyOfThree

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200LoggingLevel = {
  fatal: 'fatal',
  error: 'error',
  warn: 'warn',
  info: 'info',
  debug: 'debug',
  trace: 'trace',
  silent: 'silent'
} as const
export type GetConfig200Logging = {
  gcpfix: boolean
  level: (typeof GetConfig200LoggingLevel)[keyof typeof GetConfig200LoggingLevel]
  pretty: boolean
}

export type GetConfig200MonitoringLoki = {
  enabled: boolean
  host?: string
}

export type GetConfig200Monitoring = {
  enabled: boolean
  loki: GetConfig200MonitoringLoki
}

export type GetConfig200Platform = {
  enabled: boolean
  host: string
}

export type GetConfig200RedisAnyOf = {
  enabled: boolean
}

export type GetConfig200RedisAnyOfTwo = {
  auth?: string
  ca?: string
  enabled: boolean
  host: string
  port: number
}

export type GetConfig200Redis =
  | GetConfig200RedisAnyOf
  | GetConfig200RedisAnyOfTwo

export type GetConfig200RunpodAnyOf = {
  enabled: boolean
}

export type GetConfig200RunpodAnyOfTwo = {
  enabled: boolean
  /** @minLength 1 */
  token: string
}

export type GetConfig200Runpod =
  | GetConfig200RunpodAnyOf
  | GetConfig200RunpodAnyOfTwo

export type GetConfig200ScraperAnyOf = {
  enabled: boolean
}

export type GetConfig200ScraperAnyOfTwo = {
  enabled: boolean
  endpoint: string
}

export type GetConfig200Scraper =
  | GetConfig200ScraperAnyOf
  | GetConfig200ScraperAnyOfTwo

export type GetConfig200ServerCors = {
  enabled: boolean
  origins: string
}

export type GetConfig200ServerDocs = {
  enabled: boolean
  export: boolean
}

export type GetConfig200Server = {
  cors: GetConfig200ServerCors
  docs: GetConfig200ServerDocs
  host: string
  port: number
}

export type GetConfig200Session = {
  enabled: boolean
  secret: string
}

export type GetConfig200SpeechAnyOf = {
  enabled: boolean
}

export type GetConfig200SpeechAnyOfTwo = {
  enabled: boolean
  token: string
}

export type GetConfig200Speech =
  | GetConfig200SpeechAnyOf
  | GetConfig200SpeechAnyOfTwo

export type GetConfig200StorageAnyOfType =
  (typeof GetConfig200StorageAnyOfType)[keyof typeof GetConfig200StorageAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200StorageAnyOfType = {
  local: 'local'
} as const

export type GetConfig200StorageAnyOf = {
  type: GetConfig200StorageAnyOfType
}

export type GetConfig200StorageAnyOfThreeType =
  (typeof GetConfig200StorageAnyOfThreeType)[keyof typeof GetConfig200StorageAnyOfThreeType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200StorageAnyOfThreeType = {
  'google-cloud': 'google-cloud'
} as const

export type GetConfig200StorageAnyOfThree = {
  type: GetConfig200StorageAnyOfThreeType
}

export type GetConfig200StorageAnyOfFiveType =
  (typeof GetConfig200StorageAnyOfFiveType)[keyof typeof GetConfig200StorageAnyOfFiveType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfig200StorageAnyOfFiveType = {
  minio: 'minio'
} as const

export type GetConfig200StorageAnyOfFive = {
  accesskey: string
  bucket: string
  endpoint: string
  secretkey: string
  type: GetConfig200StorageAnyOfFiveType
}

export type GetConfig200Storage =
  | GetConfig200StorageAnyOf
  | GetConfig200StorageAnyOfThree
  | GetConfig200StorageAnyOfFive

export type GetConfig200Tls = {
  enabled: boolean
}

export type GetConfig200UnstructuredAnyOf = {
  enabled: boolean
}

export type GetConfig200UnstructuredAnyOfTwo = {
  enabled: boolean
  endpoint: string
}

export type GetConfig200Unstructured =
  | GetConfig200UnstructuredAnyOf
  | GetConfig200UnstructuredAnyOfTwo

/**
 * Arches AI configuration schema
 */
export type GetConfig200 = {
  auth: GetConfig200Auth
  billing: GetConfig200Billing
  config: GetConfig200Config
  database: GetConfig200Database
  email: GetConfig200Email
  embedding: GetConfig200Embedding
  jwt: GetConfig200Jwt
  llm: GetConfig200Llm
  logging: GetConfig200Logging
  monitoring: GetConfig200Monitoring
  platform: GetConfig200Platform
  redis: GetConfig200Redis
  runpod: GetConfig200Runpod
  scraper: GetConfig200Scraper
  server: GetConfig200Server
  session: GetConfig200Session
  speech: GetConfig200Speech
  storage: GetConfig200Storage
  tls: GetConfig200Tls
  unstructured: GetConfig200Unstructured
}

/**
 * The artifact text
 */
export type CreateArtifactBodyText = null | string

/**
 * The artifact URL
 */
export type CreateArtifactBodyUrl = null | string

export type CreateArtifactBody = {
  /** The name of the artifact */
  name: string
  /** The artifact text */
  text: CreateArtifactBodyText
  /** The artifact URL */
  url: CreateArtifactBodyUrl
}

export type CreateArtifact201 = {
  data: ArtifactEntity
}

export type FindManyArtifactsParams = {
  filter?: FindManyArtifactsFilterAnyOf | FindManyArtifactsFilterAnyOfFour
  page?: Page
  sort?: FindManyArtifactsSortItem[]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyArtifactsFilterAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  credits: 'credits',
  description: 'description',
  mimeType: 'mimeType',
  name: 'name',
  organizationId: 'organizationId',
  previewImage: 'previewImage',
  producerId: 'producerId',
  text: 'text',
  url: 'url'
} as const
export type FindManyArtifactsFilterAnyOfType =
  (typeof FindManyArtifactsFilterAnyOfType)[keyof typeof FindManyArtifactsFilterAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyArtifactsFilterAnyOfType = {
  condition: 'condition'
} as const

export type FindManyArtifactsFilterAnyOf = {
  field: (typeof FindManyArtifactsFilterAnyOfField)[keyof typeof FindManyArtifactsFilterAnyOfField]
  operator: Operator
  type: FindManyArtifactsFilterAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyArtifactsFilterAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type FindManyArtifactsFilterAnyOfFourType =
  (typeof FindManyArtifactsFilterAnyOfFourType)[keyof typeof FindManyArtifactsFilterAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyArtifactsFilterAnyOfFourType = {
  group: 'group'
} as const

export type FindManyArtifactsFilterAnyOfFour = {
  children: ArtifactsFilterNode[]
  operator: (typeof FindManyArtifactsFilterAnyOfFourOperator)[keyof typeof FindManyArtifactsFilterAnyOfFourOperator]
  type: FindManyArtifactsFilterAnyOfFourType
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyArtifactsSortItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  credits: 'credits',
  description: 'description',
  mimeType: 'mimeType',
  name: 'name',
  organizationId: 'organizationId',
  previewImage: 'previewImage',
  producerId: 'producerId',
  text: 'text',
  url: 'url'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyArtifactsSortItemOrder = {
  asc: 'asc',
  desc: 'desc'
} as const
export type FindManyArtifactsSortItem = {
  field: (typeof FindManyArtifactsSortItemField)[keyof typeof FindManyArtifactsSortItemField]
  order: (typeof FindManyArtifactsSortItemOrder)[keyof typeof FindManyArtifactsSortItemOrder]
}

export type FindManyArtifacts200Meta = {
  /** Total number of items in the collection */
  total: number
}

export type FindManyArtifacts200 = {
  data: ArtifactEntity[]
  meta: FindManyArtifacts200Meta
}

export type DeleteArtifact200 = {
  data: ArtifactEntity
}

export type GetOneArtifact200 = {
  data: ArtifactEntity
}

/**
 * The artifact text
 */
export type UpdateArtifactBodyText = null | string

/**
 * The artifact URL
 */
export type UpdateArtifactBodyUrl = null | string

export type UpdateArtifactBody = {
  /** The name of the artifact */
  name?: string
  /** The artifact text */
  text?: UpdateArtifactBodyText
  /** The artifact URL */
  url?: UpdateArtifactBodyUrl
}

export type UpdateArtifact200 = {
  data: ArtifactEntity
}

export type CreateLabelBody = {
  /** The name of the label */
  name: string
}

export type CreateLabel201 = {
  data: LabelEntity
}

export type FindManyLabelsParams = {
  filter?: FindManyLabelsFilterAnyOf | FindManyLabelsFilterAnyOfFour
  page?: Page
  sort?: FindManyLabelsSortItem[]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyLabelsFilterAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  name: 'name',
  organizationId: 'organizationId'
} as const
export type FindManyLabelsFilterAnyOfType =
  (typeof FindManyLabelsFilterAnyOfType)[keyof typeof FindManyLabelsFilterAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyLabelsFilterAnyOfType = {
  condition: 'condition'
} as const

export type FindManyLabelsFilterAnyOf = {
  field: (typeof FindManyLabelsFilterAnyOfField)[keyof typeof FindManyLabelsFilterAnyOfField]
  operator: Operator
  type: FindManyLabelsFilterAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyLabelsFilterAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type FindManyLabelsFilterAnyOfFourType =
  (typeof FindManyLabelsFilterAnyOfFourType)[keyof typeof FindManyLabelsFilterAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyLabelsFilterAnyOfFourType = {
  group: 'group'
} as const

export type FindManyLabelsFilterAnyOfFour = {
  children: LabelsFilterNode[]
  operator: (typeof FindManyLabelsFilterAnyOfFourOperator)[keyof typeof FindManyLabelsFilterAnyOfFourOperator]
  type: FindManyLabelsFilterAnyOfFourType
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyLabelsSortItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  name: 'name',
  organizationId: 'organizationId'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyLabelsSortItemOrder = { asc: 'asc', desc: 'desc' } as const
export type FindManyLabelsSortItem = {
  field: (typeof FindManyLabelsSortItemField)[keyof typeof FindManyLabelsSortItemField]
  order: (typeof FindManyLabelsSortItemOrder)[keyof typeof FindManyLabelsSortItemOrder]
}

export type FindManyLabels200Meta = {
  /** Total number of items in the collection */
  total: number
}

export type FindManyLabels200 = {
  data: LabelEntity[]
  meta: FindManyLabels200Meta
}

export type DeleteLabel200 = {
  data: LabelEntity
}

export type GetOneLabel200 = {
  data: LabelEntity
}

export type UpdateLabelBody = {
  /** The name of the label */
  name?: string
}

export type UpdateLabel200 = {
  data: LabelEntity
}

/**
 * The pipeline description
 */
export type CreatePipelineBodyDescription = string | null

/**
 * The pipeline name
 */
export type CreatePipelineBodyName = string | null

export type CreatePipelineBodyStepsItemDependentsItem = {
  pipelineStepId: string
}

export type CreatePipelineBodyStepsItemPrerequisitesItem = {
  pipelineStepId: string
}

/**
 * The pipeline step entity
 */
export type CreatePipelineBodyStepsItem = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  dependents: CreatePipelineBodyStepsItemDependentsItem[]
  pipelineId: string
  prerequisites: CreatePipelineBodyStepsItemPrerequisitesItem[]
  toolId: string
}

export type CreatePipelineBody = {
  /** The pipeline description */
  description: CreatePipelineBodyDescription
  /** The pipeline name */
  name: CreatePipelineBodyName
  /** The steps in the pipeline */
  steps: CreatePipelineBodyStepsItem[]
}

export type CreatePipeline201 = {
  data: PipelineEntity
}

export type FindManyPipelinesParams = {
  filter?: FindManyPipelinesFilterAnyOf | FindManyPipelinesFilterAnyOfFour
  page?: Page
  sort?: FindManyPipelinesSortItem[]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyPipelinesFilterAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  description: 'description',
  name: 'name',
  organizationId: 'organizationId',
  steps: 'steps'
} as const
export type FindManyPipelinesFilterAnyOfType =
  (typeof FindManyPipelinesFilterAnyOfType)[keyof typeof FindManyPipelinesFilterAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyPipelinesFilterAnyOfType = {
  condition: 'condition'
} as const

export type FindManyPipelinesFilterAnyOf = {
  field: (typeof FindManyPipelinesFilterAnyOfField)[keyof typeof FindManyPipelinesFilterAnyOfField]
  operator: Operator
  type: FindManyPipelinesFilterAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyPipelinesFilterAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type FindManyPipelinesFilterAnyOfFourType =
  (typeof FindManyPipelinesFilterAnyOfFourType)[keyof typeof FindManyPipelinesFilterAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyPipelinesFilterAnyOfFourType = {
  group: 'group'
} as const

export type FindManyPipelinesFilterAnyOfFour = {
  children: PipelinesFilterNode[]
  operator: (typeof FindManyPipelinesFilterAnyOfFourOperator)[keyof typeof FindManyPipelinesFilterAnyOfFourOperator]
  type: FindManyPipelinesFilterAnyOfFourType
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyPipelinesSortItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  description: 'description',
  name: 'name',
  organizationId: 'organizationId',
  steps: 'steps'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyPipelinesSortItemOrder = {
  asc: 'asc',
  desc: 'desc'
} as const
export type FindManyPipelinesSortItem = {
  field: (typeof FindManyPipelinesSortItemField)[keyof typeof FindManyPipelinesSortItemField]
  order: (typeof FindManyPipelinesSortItemOrder)[keyof typeof FindManyPipelinesSortItemOrder]
}

export type FindManyPipelines200Meta = {
  /** Total number of items in the collection */
  total: number
}

export type FindManyPipelines200 = {
  data: PipelineEntity[]
  meta: FindManyPipelines200Meta
}

export type DeletePipeline200 = {
  data: PipelineEntity
}

export type GetOnePipeline200 = {
  data: PipelineEntity
}

/**
 * The pipeline description
 */
export type UpdatePipelineBodyDescription = string | null

/**
 * The pipeline name
 */
export type UpdatePipelineBodyName = string | null

export type UpdatePipelineBodyStepsItemDependentsItem = {
  pipelineStepId: string
}

export type UpdatePipelineBodyStepsItemPrerequisitesItem = {
  pipelineStepId: string
}

/**
 * The pipeline step entity
 */
export type UpdatePipelineBodyStepsItem = {
  /** The date this item was created */
  createdAt: string
  /** The ID of the item */
  id: string
  /** The date this item was last updated */
  updatedAt: string
  dependents: UpdatePipelineBodyStepsItemDependentsItem[]
  pipelineId: string
  prerequisites: UpdatePipelineBodyStepsItemPrerequisitesItem[]
  toolId: string
}

export type UpdatePipelineBody = {
  /** The pipeline description */
  description?: UpdatePipelineBodyDescription
  /** The pipeline name */
  name?: UpdatePipelineBodyName
  /** The steps in the pipeline */
  steps?: UpdatePipelineBodyStepsItem[]
}

export type UpdatePipeline200 = {
  data: PipelineEntity
}

/**
 * The pipeline ID associated with the run
 */
export type CreateRunBodyPipelineId = string | null

export type CreateRunBody = {
  /** The pipeline ID associated with the run */
  pipelineId: CreateRunBodyPipelineId
}

export type CreateRun201 = {
  data: RunEntity
}

export type FindManyRunsParams = {
  filter?: FindManyRunsFilterAnyOf | FindManyRunsFilterAnyOfFour
  page?: Page
  sort?: FindManyRunsSortItem[]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyRunsFilterAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt',
  error: 'error',
  organizationId: 'organizationId',
  pipelineId: 'pipelineId',
  progress: 'progress',
  startedAt: 'startedAt',
  status: 'status',
  toolId: 'toolId'
} as const
export type FindManyRunsFilterAnyOfType =
  (typeof FindManyRunsFilterAnyOfType)[keyof typeof FindManyRunsFilterAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyRunsFilterAnyOfType = {
  condition: 'condition'
} as const

export type FindManyRunsFilterAnyOf = {
  field: (typeof FindManyRunsFilterAnyOfField)[keyof typeof FindManyRunsFilterAnyOfField]
  operator: Operator
  type: FindManyRunsFilterAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyRunsFilterAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type FindManyRunsFilterAnyOfFourType =
  (typeof FindManyRunsFilterAnyOfFourType)[keyof typeof FindManyRunsFilterAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyRunsFilterAnyOfFourType = {
  group: 'group'
} as const

export type FindManyRunsFilterAnyOfFour = {
  children: RunsFilterNode[]
  operator: (typeof FindManyRunsFilterAnyOfFourOperator)[keyof typeof FindManyRunsFilterAnyOfFourOperator]
  type: FindManyRunsFilterAnyOfFourType
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyRunsSortItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  completedAt: 'completedAt',
  error: 'error',
  organizationId: 'organizationId',
  pipelineId: 'pipelineId',
  progress: 'progress',
  startedAt: 'startedAt',
  status: 'status',
  toolId: 'toolId'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyRunsSortItemOrder = { asc: 'asc', desc: 'desc' } as const
export type FindManyRunsSortItem = {
  field: (typeof FindManyRunsSortItemField)[keyof typeof FindManyRunsSortItemField]
  order: (typeof FindManyRunsSortItemOrder)[keyof typeof FindManyRunsSortItemOrder]
}

export type FindManyRuns200Meta = {
  /** Total number of items in the collection */
  total: number
}

export type FindManyRuns200 = {
  data: RunEntity[]
  meta: FindManyRuns200Meta
}

export type DeleteRun200 = {
  data: RunEntity
}

export type GetOneRun200 = {
  data: RunEntity
}

/**
 * The pipeline ID associated with the run
 */
export type UpdateRunBodyPipelineId = string | null

export type UpdateRunBody = {
  /** The pipeline ID associated with the run */
  pipelineId?: UpdateRunBodyPipelineId
}

export type UpdateRun200 = {
  data: RunEntity
}

export type CreateToolBody = {
  /** The tool description */
  description: string
  /** The name of the tool */
  name: string
}

export type CreateTool201 = {
  data: ToolEntity
}

export type FindManyToolsParams = {
  filter?: FindManyToolsFilterAnyOf | FindManyToolsFilterAnyOfFour
  page?: Page
  sort?: FindManyToolsSortItem[]
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyToolsFilterAnyOfField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  description: 'description',
  inputMimeType: 'inputMimeType',
  name: 'name',
  organizationId: 'organizationId',
  outputMimeType: 'outputMimeType'
} as const
export type FindManyToolsFilterAnyOfType =
  (typeof FindManyToolsFilterAnyOfType)[keyof typeof FindManyToolsFilterAnyOfType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyToolsFilterAnyOfType = {
  condition: 'condition'
} as const

export type FindManyToolsFilterAnyOf = {
  field: (typeof FindManyToolsFilterAnyOfField)[keyof typeof FindManyToolsFilterAnyOfField]
  operator: Operator
  type: FindManyToolsFilterAnyOfType
  value: FilterValueSchema
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyToolsFilterAnyOfFourOperator = {
  and: 'and',
  or: 'or'
} as const
export type FindManyToolsFilterAnyOfFourType =
  (typeof FindManyToolsFilterAnyOfFourType)[keyof typeof FindManyToolsFilterAnyOfFourType]

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyToolsFilterAnyOfFourType = {
  group: 'group'
} as const

export type FindManyToolsFilterAnyOfFour = {
  children: ToolsFilterNode[]
  operator: (typeof FindManyToolsFilterAnyOfFourOperator)[keyof typeof FindManyToolsFilterAnyOfFourOperator]
  type: FindManyToolsFilterAnyOfFourType
}

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyToolsSortItemField = {
  createdAt: 'createdAt',
  id: 'id',
  updatedAt: 'updatedAt',
  description: 'description',
  inputMimeType: 'inputMimeType',
  name: 'name',
  organizationId: 'organizationId',
  outputMimeType: 'outputMimeType'
} as const
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FindManyToolsSortItemOrder = { asc: 'asc', desc: 'desc' } as const
export type FindManyToolsSortItem = {
  field: (typeof FindManyToolsSortItemField)[keyof typeof FindManyToolsSortItemField]
  order: (typeof FindManyToolsSortItemOrder)[keyof typeof FindManyToolsSortItemOrder]
}

export type FindManyTools200Meta = {
  /** Total number of items in the collection */
  total: number
}

export type FindManyTools200 = {
  data: ToolEntity[]
  meta: FindManyTools200Meta
}

export type DeleteTool200 = {
  data: ToolEntity
}

export type GetOneTool200 = {
  data: ToolEntity
}

export type UpdateToolBody = {
  /** The tool description */
  description?: string
  /** The name of the tool */
  name?: string
}

export type UpdateTool200 = {
  data: ToolEntity
}

export type GetHealth200Services = {
  database?: string
  email?: string
  redis?: string
}

export type GetHealth200 = {
  services?: GetHealth200Services
  timestamp?: string
  uptime?: number
}
