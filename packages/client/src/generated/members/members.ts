/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v1
 */
import type {
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'

import { useMutation, useSuspenseQuery } from '@tanstack/react-query'

import type {
  CreateMember201,
  CreateMemberBody,
  DeleteMember200,
  FindManyMembers200,
  FindManyMembersParams,
  GetOneMember200,
  NotFoundResponse,
  UpdateMember200,
  UpdateMemberBody
} from '../orval.schemas'

import { customFetch } from '../../fetcher'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Create a new member
 * @summary Create a new member
 */
export const getCreateMemberUrl = () => {
  return `/members`
}

export const createMember = async (
  createMemberBody: CreateMemberBody,
  options?: RequestInit
): Promise<CreateMember201> => {
  return customFetch<CreateMember201>(getCreateMemberUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createMemberBody)
  })
}

export const getCreateMemberMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createMember>>,
    TError,
    { data: CreateMemberBody },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createMember>>,
  TError,
  { data: CreateMemberBody },
  TContext
> => {
  const mutationKey = ['createMember']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createMember>>,
    { data: CreateMemberBody }
  > = (props) => {
    const { data } = props ?? {}

    return createMember(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateMemberMutationResult = NonNullable<
  Awaited<ReturnType<typeof createMember>>
>
export type CreateMemberMutationBody = CreateMemberBody
export type CreateMemberMutationError = unknown

/**
 * @summary Create a new member
 */
export const useCreateMember = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createMember>>,
      TError,
      { data: CreateMemberBody },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof createMember>>,
  TError,
  { data: CreateMemberBody },
  TContext
> => {
  const mutationOptions = getCreateMemberMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Find many members
 * @summary Find many members
 */
export const getFindManyMembersUrl = (params?: FindManyMembersParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0 ?
      `/members?${stringifiedParams}`
    : `/members`
}

export const findManyMembers = async (
  params?: FindManyMembersParams,
  options?: RequestInit
): Promise<FindManyMembers200> => {
  return customFetch<FindManyMembers200>(getFindManyMembersUrl(params), {
    ...options,
    method: 'GET'
  })
}

export const getFindManyMembersQueryKey = (params?: FindManyMembersParams) => {
  return [`/members`, ...(params ? [params] : [])] as const
}

export const getFindManyMembersSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof findManyMembers>>,
  TError = unknown
>(
  params?: FindManyMembersParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyMembers>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindManyMembersQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findManyMembers>>> = ({
    signal
  }) => findManyMembers(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof findManyMembers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindManyMembersSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof findManyMembers>>
>
export type FindManyMembersSuspenseQueryError = unknown

export function useFindManyMembersSuspense<
  TData = Awaited<ReturnType<typeof findManyMembers>>,
  TError = unknown
>(
  params: undefined | FindManyMembersParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyMembers>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyMembersSuspense<
  TData = Awaited<ReturnType<typeof findManyMembers>>,
  TError = unknown
>(
  params?: FindManyMembersParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyMembers>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyMembersSuspense<
  TData = Awaited<ReturnType<typeof findManyMembers>>,
  TError = unknown
>(
  params?: FindManyMembersParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyMembers>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find many members
 */

export function useFindManyMembersSuspense<
  TData = Awaited<ReturnType<typeof findManyMembers>>,
  TError = unknown
>(
  params?: FindManyMembersParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyMembers>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getFindManyMembersSuspenseQueryOptions(params, options)

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Delete a member
 * @summary Delete a member
 */
export const getDeleteMemberUrl = (id: string | undefined | null) => {
  return `/members/${id}`
}

export const deleteMember = async (
  id: string | undefined | null,
  options?: RequestInit
): Promise<DeleteMember200> => {
  return customFetch<DeleteMember200>(getDeleteMemberUrl(id), {
    ...options,
    method: 'DELETE'
  })
}

export const getDeleteMemberMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteMember>>,
    TError,
    { id: string | undefined | null },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteMember>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationKey = ['deleteMember']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteMember>>,
    { id: string | undefined | null }
  > = (props) => {
    const { id } = props ?? {}

    return deleteMember(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteMemberMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteMember>>
>

export type DeleteMemberMutationError = NotFoundResponse

/**
 * @summary Delete a member
 */
export const useDeleteMember = <TError = NotFoundResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteMember>>,
      TError,
      { id: string | undefined | null },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof deleteMember>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationOptions = getDeleteMemberMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Find a member
 * @summary Find a member
 */
export const getGetOneMemberUrl = (id: string | undefined | null) => {
  return `/members/${id}`
}

export const getOneMember = async (
  id: string | undefined | null,
  options?: RequestInit
): Promise<GetOneMember200> => {
  return customFetch<GetOneMember200>(getGetOneMemberUrl(id), {
    ...options,
    method: 'GET'
  })
}

export const getGetOneMemberQueryKey = (id: string | undefined | null) => {
  return [`/members/${id}`] as const
}

export const getGetOneMemberSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getOneMember>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneMember>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetOneMemberQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneMember>>> = ({
    signal
  }) => getOneMember(id, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getOneMember>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOneMemberSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOneMember>>
>
export type GetOneMemberSuspenseQueryError = NotFoundResponse

export function useGetOneMemberSuspense<
  TData = Awaited<ReturnType<typeof getOneMember>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneMember>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneMemberSuspense<
  TData = Awaited<ReturnType<typeof getOneMember>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneMember>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneMemberSuspense<
  TData = Awaited<ReturnType<typeof getOneMember>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneMember>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find a member
 */

export function useGetOneMemberSuspense<
  TData = Awaited<ReturnType<typeof getOneMember>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneMember>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetOneMemberSuspenseQueryOptions(id, options)

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Update a member
 * @summary Update a member
 */
export const getUpdateMemberUrl = (id: string | undefined | null) => {
  return `/members/${id}`
}

export const updateMember = async (
  id: string | undefined | null,
  updateMemberBody: UpdateMemberBody,
  options?: RequestInit
): Promise<UpdateMember200> => {
  return customFetch<UpdateMember200>(getUpdateMemberUrl(id), {
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(updateMemberBody)
  })
}

export const getUpdateMemberMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateMember>>,
    TError,
    { id: string | undefined | null; data: UpdateMemberBody },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateMember>>,
  TError,
  { id: string | undefined | null; data: UpdateMemberBody },
  TContext
> => {
  const mutationKey = ['updateMember']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateMember>>,
    { id: string | undefined | null; data: UpdateMemberBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateMember(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateMemberMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateMember>>
>
export type UpdateMemberMutationBody = UpdateMemberBody
export type UpdateMemberMutationError = NotFoundResponse

/**
 * @summary Update a member
 */
export const useUpdateMember = <TError = NotFoundResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateMember>>,
      TError,
      { id: string | undefined | null; data: UpdateMemberBody },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof updateMember>>,
  TError,
  { id: string | undefined | null; data: UpdateMemberBody },
  TContext
> => {
  const mutationOptions = getUpdateMemberMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
