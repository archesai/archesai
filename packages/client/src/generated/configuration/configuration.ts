/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v1
 */
import type {
  DataTag,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'

import { useSuspenseQuery } from '@tanstack/react-query'

import type { GetConfig200 } from '../orval.schemas'

import { customFetch } from '../../fetcher'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Get the configuration of the application
 * @summary Get the configuration
 */
export const getGetConfigUrl = () => {
  return `/config`
}

export const getConfig = async (
  options?: RequestInit
): Promise<GetConfig200> => {
  return customFetch<GetConfig200>(getGetConfigUrl(), {
    ...options,
    method: 'GET'
  })
}

export const getGetConfigQueryKey = () => {
  return [`/config`] as const
}

export const getGetConfigSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getConfig>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof getConfig>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customFetch>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetConfigQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getConfig>>> = ({
    signal
  }) => getConfig({ signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getConfig>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetConfigSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getConfig>>
>
export type GetConfigSuspenseQueryError = unknown

export function useGetConfigSuspense<
  TData = Awaited<ReturnType<typeof getConfig>>,
  TError = unknown
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getConfig>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetConfigSuspense<
  TData = Awaited<ReturnType<typeof getConfig>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getConfig>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetConfigSuspense<
  TData = Awaited<ReturnType<typeof getConfig>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getConfig>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get the configuration
 */

export function useGetConfigSuspense<
  TData = Awaited<ReturnType<typeof getConfig>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getConfig>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetConfigSuspenseQueryOptions(options)

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}
