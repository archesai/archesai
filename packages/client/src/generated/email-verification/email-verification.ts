/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v1
 */
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'

import { useMutation } from '@tanstack/react-query'

import type {
  ConfirmEmailVerification204,
  ConfirmEmailVerificationBody,
  NoContentResponse,
  NotFoundResponse,
  UnauthorizedResponse
} from '../orval.schemas'

import { customFetch } from '../../fetcher'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * This endpoint will confirm your e-mail with a token
 * @summary Confirm e-mail verification
 */
export const getConfirmEmailVerificationUrl = () => {
  return `/api/auth/verify-email`
}

export const confirmEmailVerification = async (
  confirmEmailVerificationBody: ConfirmEmailVerificationBody,
  options?: RequestInit
): Promise<ConfirmEmailVerification204> => {
  return customFetch<ConfirmEmailVerification204>(
    getConfirmEmailVerificationUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(confirmEmailVerificationBody)
    }
  )
}

export const getConfirmEmailVerificationMutationOptions = <
  TError = UnauthorizedResponse | NotFoundResponse,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof confirmEmailVerification>>,
    TError,
    { data: ConfirmEmailVerificationBody },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof confirmEmailVerification>>,
  TError,
  { data: ConfirmEmailVerificationBody },
  TContext
> => {
  const mutationKey = ['confirmEmailVerification']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof confirmEmailVerification>>,
    { data: ConfirmEmailVerificationBody }
  > = (props) => {
    const { data } = props ?? {}

    return confirmEmailVerification(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ConfirmEmailVerificationMutationResult = NonNullable<
  Awaited<ReturnType<typeof confirmEmailVerification>>
>
export type ConfirmEmailVerificationMutationBody = ConfirmEmailVerificationBody
export type ConfirmEmailVerificationMutationError =
  | UnauthorizedResponse
  | NotFoundResponse

/**
 * @summary Confirm e-mail verification
 */
export const useConfirmEmailVerification = <
  TError = UnauthorizedResponse | NotFoundResponse,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof confirmEmailVerification>>,
      TError,
      { data: ConfirmEmailVerificationBody },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof confirmEmailVerification>>,
  TError,
  { data: ConfirmEmailVerificationBody },
  TContext
> => {
  const mutationOptions = getConfirmEmailVerificationMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * This endpoint will send an e-mail verification link to you. ADMIN ONLY.
 * @summary Request e-mail verification
 */
export const getRequestEmailVerificationUrl = () => {
  return `/api/auth/send-verification-email`
}

export const requestEmailVerification = async (
  options?: RequestInit
): Promise<NoContentResponse> => {
  return customFetch<NoContentResponse>(getRequestEmailVerificationUrl(), {
    ...options,
    method: 'POST'
  })
}

export const getRequestEmailVerificationMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof requestEmailVerification>>,
    TError,
    void,
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof requestEmailVerification>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ['requestEmailVerification']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof requestEmailVerification>>,
    void
  > = () => {
    return requestEmailVerification(requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type RequestEmailVerificationMutationResult = NonNullable<
  Awaited<ReturnType<typeof requestEmailVerification>>
>

export type RequestEmailVerificationMutationError = unknown

/**
 * @summary Request e-mail verification
 */
export const useRequestEmailVerification = <
  TError = unknown,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof requestEmailVerification>>,
      TError,
      void,
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof requestEmailVerification>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getRequestEmailVerificationMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
