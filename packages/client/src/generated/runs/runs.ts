/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v1
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'

import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query'

import type {
  CreateRun201,
  CreateRunBody,
  DeleteRun200,
  FindManyRuns200,
  FindManyRunsParams,
  GetOneRun200,
  NotFoundResponse,
  UpdateRun200,
  UpdateRunBody
} from '../orval.schemas'

import { customFetch } from '../../fetcher'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Create a new run
 * @summary Create a new run
 */
export const getCreateRunUrl = () => {
  return `/runs`
}

export const createRun = async (
  createRunBody: CreateRunBody,
  options?: RequestInit
): Promise<CreateRun201> => {
  return customFetch<CreateRun201>(getCreateRunUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createRunBody)
  })
}

export const getCreateRunMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createRun>>,
    TError,
    { data: CreateRunBody },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createRun>>,
  TError,
  { data: CreateRunBody },
  TContext
> => {
  const mutationKey = ['createRun']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createRun>>,
    { data: CreateRunBody }
  > = (props) => {
    const { data } = props ?? {}

    return createRun(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateRunMutationResult = NonNullable<
  Awaited<ReturnType<typeof createRun>>
>
export type CreateRunMutationBody = CreateRunBody
export type CreateRunMutationError = unknown

/**
 * @summary Create a new run
 */
export const useCreateRun = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createRun>>,
      TError,
      { data: CreateRunBody },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof createRun>>,
  TError,
  { data: CreateRunBody },
  TContext
> => {
  const mutationOptions = getCreateRunMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Find many runs
 * @summary Find many runs
 */
export const getFindManyRunsUrl = (params?: FindManyRunsParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0 ? `/runs?${stringifiedParams}` : `/runs`
}

export const findManyRuns = async (
  params?: FindManyRunsParams,
  options?: RequestInit
): Promise<FindManyRuns200> => {
  return customFetch<FindManyRuns200>(getFindManyRunsUrl(params), {
    ...options,
    method: 'GET'
  })
}

export const getFindManyRunsQueryKey = (params?: FindManyRunsParams) => {
  return [`/runs`, ...(params ? [params] : [])] as const
}

export const getFindManyRunsQueryOptions = <
  TData = Awaited<ReturnType<typeof findManyRuns>>,
  TError = unknown
>(
  params?: FindManyRunsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findManyRuns>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindManyRunsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findManyRuns>>> = ({
    signal
  }) => findManyRuns(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findManyRuns>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindManyRunsQueryResult = NonNullable<
  Awaited<ReturnType<typeof findManyRuns>>
>
export type FindManyRunsQueryError = unknown

export function useFindManyRuns<
  TData = Awaited<ReturnType<typeof findManyRuns>>,
  TError = unknown
>(
  params: undefined | FindManyRunsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findManyRuns>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findManyRuns>>,
          TError,
          Awaited<ReturnType<typeof findManyRuns>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyRuns<
  TData = Awaited<ReturnType<typeof findManyRuns>>,
  TError = unknown
>(
  params?: FindManyRunsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findManyRuns>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findManyRuns>>,
          TError,
          Awaited<ReturnType<typeof findManyRuns>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyRuns<
  TData = Awaited<ReturnType<typeof findManyRuns>>,
  TError = unknown
>(
  params?: FindManyRunsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findManyRuns>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find many runs
 */

export function useFindManyRuns<
  TData = Awaited<ReturnType<typeof findManyRuns>>,
  TError = unknown
>(
  params?: FindManyRunsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findManyRuns>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getFindManyRunsQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindManyRunsSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof findManyRuns>>,
  TError = unknown
>(
  params?: FindManyRunsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyRuns>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindManyRunsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findManyRuns>>> = ({
    signal
  }) => findManyRuns(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof findManyRuns>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindManyRunsSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof findManyRuns>>
>
export type FindManyRunsSuspenseQueryError = unknown

export function useFindManyRunsSuspense<
  TData = Awaited<ReturnType<typeof findManyRuns>>,
  TError = unknown
>(
  params: undefined | FindManyRunsParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyRuns>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyRunsSuspense<
  TData = Awaited<ReturnType<typeof findManyRuns>>,
  TError = unknown
>(
  params?: FindManyRunsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyRuns>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyRunsSuspense<
  TData = Awaited<ReturnType<typeof findManyRuns>>,
  TError = unknown
>(
  params?: FindManyRunsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyRuns>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find many runs
 */

export function useFindManyRunsSuspense<
  TData = Awaited<ReturnType<typeof findManyRuns>>,
  TError = unknown
>(
  params?: FindManyRunsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyRuns>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getFindManyRunsSuspenseQueryOptions(params, options)

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Delete a run
 * @summary Delete a run
 */
export const getDeleteRunUrl = (id: string | undefined | null) => {
  return `/runs/${id}`
}

export const deleteRun = async (
  id: string | undefined | null,
  options?: RequestInit
): Promise<DeleteRun200> => {
  return customFetch<DeleteRun200>(getDeleteRunUrl(id), {
    ...options,
    method: 'DELETE'
  })
}

export const getDeleteRunMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteRun>>,
    TError,
    { id: string | undefined | null },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteRun>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationKey = ['deleteRun']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteRun>>,
    { id: string | undefined | null }
  > = (props) => {
    const { id } = props ?? {}

    return deleteRun(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteRunMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteRun>>
>

export type DeleteRunMutationError = NotFoundResponse

/**
 * @summary Delete a run
 */
export const useDeleteRun = <TError = NotFoundResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteRun>>,
      TError,
      { id: string | undefined | null },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof deleteRun>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationOptions = getDeleteRunMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Find a run
 * @summary Find a run
 */
export const getGetOneRunUrl = (id: string | undefined | null) => {
  return `/runs/${id}`
}

export const getOneRun = async (
  id: string | undefined | null,
  options?: RequestInit
): Promise<GetOneRun200> => {
  return customFetch<GetOneRun200>(getGetOneRunUrl(id), {
    ...options,
    method: 'GET'
  })
}

export const getGetOneRunQueryKey = (id: string | undefined | null) => {
  return [`/runs/${id}`] as const
}

export const getGetOneRunQueryOptions = <
  TData = Awaited<ReturnType<typeof getOneRun>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneRun>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetOneRunQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneRun>>> = ({
    signal
  }) => getOneRun(id, { signal, ...requestOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<Awaited<ReturnType<typeof getOneRun>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }
}

export type GetOneRunQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOneRun>>
>
export type GetOneRunQueryError = NotFoundResponse

export function useGetOneRun<
  TData = Awaited<ReturnType<typeof getOneRun>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneRun>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOneRun>>,
          TError,
          Awaited<ReturnType<typeof getOneRun>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneRun<
  TData = Awaited<ReturnType<typeof getOneRun>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneRun>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOneRun>>,
          TError,
          Awaited<ReturnType<typeof getOneRun>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneRun<
  TData = Awaited<ReturnType<typeof getOneRun>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneRun>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find a run
 */

export function useGetOneRun<
  TData = Awaited<ReturnType<typeof getOneRun>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneRun>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetOneRunQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getGetOneRunSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getOneRun>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneRun>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetOneRunQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneRun>>> = ({
    signal
  }) => getOneRun(id, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getOneRun>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOneRunSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOneRun>>
>
export type GetOneRunSuspenseQueryError = NotFoundResponse

export function useGetOneRunSuspense<
  TData = Awaited<ReturnType<typeof getOneRun>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneRun>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneRunSuspense<
  TData = Awaited<ReturnType<typeof getOneRun>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneRun>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneRunSuspense<
  TData = Awaited<ReturnType<typeof getOneRun>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneRun>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find a run
 */

export function useGetOneRunSuspense<
  TData = Awaited<ReturnType<typeof getOneRun>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneRun>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetOneRunSuspenseQueryOptions(id, options)

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Update a run
 * @summary Update a run
 */
export const getUpdateRunUrl = (id: string | undefined | null) => {
  return `/runs/${id}`
}

export const updateRun = async (
  id: string | undefined | null,
  updateRunBody: UpdateRunBody,
  options?: RequestInit
): Promise<UpdateRun200> => {
  return customFetch<UpdateRun200>(getUpdateRunUrl(id), {
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(updateRunBody)
  })
}

export const getUpdateRunMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateRun>>,
    TError,
    { id: string | undefined | null; data: UpdateRunBody },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateRun>>,
  TError,
  { id: string | undefined | null; data: UpdateRunBody },
  TContext
> => {
  const mutationKey = ['updateRun']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateRun>>,
    { id: string | undefined | null; data: UpdateRunBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateRun(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateRunMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateRun>>
>
export type UpdateRunMutationBody = UpdateRunBody
export type UpdateRunMutationError = NotFoundResponse

/**
 * @summary Update a run
 */
export const useUpdateRun = <TError = NotFoundResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateRun>>,
      TError,
      { id: string | undefined | null; data: UpdateRunBody },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof updateRun>>,
  TError,
  { id: string | undefined | null; data: UpdateRunBody },
  TContext
> => {
  const mutationOptions = getUpdateRunMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
