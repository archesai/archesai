/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v1
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'

import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query'
import qs from 'qs'

import type {
  CreateTool201,
  CreateToolBody,
  DeleteTool200,
  FindManyTools200,
  FindManyToolsParams,
  GetOneTool200,
  NotFoundResponse,
  UpdateTool200,
  UpdateToolBody
} from '../orval.schemas'

import { customFetch } from '../../fetcher'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Create a new tool
 * @summary Create a new tool
 */
export const getCreateToolUrl = () => {
  return `/tools`
}

export const createTool = async (
  createToolBody: CreateToolBody,
  options?: RequestInit
): Promise<CreateTool201> => {
  return customFetch<CreateTool201>(getCreateToolUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createToolBody)
  })
}

export const getCreateToolMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTool>>,
    TError,
    { data: CreateToolBody },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createTool>>,
  TError,
  { data: CreateToolBody },
  TContext
> => {
  const mutationKey = ['createTool']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createTool>>,
    { data: CreateToolBody }
  > = (props) => {
    const { data } = props ?? {}

    return createTool(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateToolMutationResult = NonNullable<
  Awaited<ReturnType<typeof createTool>>
>
export type CreateToolMutationBody = CreateToolBody
export type CreateToolMutationError = unknown

/**
 * @summary Create a new tool
 */
export const useCreateTool = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createTool>>,
      TError,
      { data: CreateToolBody },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof createTool>>,
  TError,
  { data: CreateToolBody },
  TContext
> => {
  const mutationOptions = getCreateToolMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Find many tools
 * @summary Find many tools
 */
export const getFindManyToolsUrl = (params?: FindManyToolsParams) => {
  const stringifiedParams = qs.stringify(params || {}, {
    skipNulls: false,
    strictNullHandling: true
  })

  return stringifiedParams.length > 0 ? `/tools?${stringifiedParams}` : `/tools`
}

export const findManyTools = async (
  params?: FindManyToolsParams,
  options?: RequestInit
): Promise<FindManyTools200> => {
  return customFetch<FindManyTools200>(getFindManyToolsUrl(params), {
    ...options,
    method: 'GET'
  })
}

export const getFindManyToolsQueryKey = (params?: FindManyToolsParams) => {
  return [`/tools`, ...(params ? [params] : [])] as const
}

export const getFindManyToolsQueryOptions = <
  TData = Awaited<ReturnType<typeof findManyTools>>,
  TError = unknown
>(
  params?: FindManyToolsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findManyTools>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindManyToolsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findManyTools>>> = ({
    signal
  }) => findManyTools(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findManyTools>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindManyToolsQueryResult = NonNullable<
  Awaited<ReturnType<typeof findManyTools>>
>
export type FindManyToolsQueryError = unknown

export function useFindManyTools<
  TData = Awaited<ReturnType<typeof findManyTools>>,
  TError = unknown
>(
  params: undefined | FindManyToolsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findManyTools>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findManyTools>>,
          TError,
          Awaited<ReturnType<typeof findManyTools>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyTools<
  TData = Awaited<ReturnType<typeof findManyTools>>,
  TError = unknown
>(
  params?: FindManyToolsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findManyTools>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findManyTools>>,
          TError,
          Awaited<ReturnType<typeof findManyTools>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyTools<
  TData = Awaited<ReturnType<typeof findManyTools>>,
  TError = unknown
>(
  params?: FindManyToolsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findManyTools>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find many tools
 */

export function useFindManyTools<
  TData = Awaited<ReturnType<typeof findManyTools>>,
  TError = unknown
>(
  params?: FindManyToolsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findManyTools>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getFindManyToolsQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindManyToolsSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof findManyTools>>,
  TError = unknown
>(
  params?: FindManyToolsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyTools>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindManyToolsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findManyTools>>> = ({
    signal
  }) => findManyTools(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof findManyTools>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindManyToolsSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof findManyTools>>
>
export type FindManyToolsSuspenseQueryError = unknown

export function useFindManyToolsSuspense<
  TData = Awaited<ReturnType<typeof findManyTools>>,
  TError = unknown
>(
  params: undefined | FindManyToolsParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyTools>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyToolsSuspense<
  TData = Awaited<ReturnType<typeof findManyTools>>,
  TError = unknown
>(
  params?: FindManyToolsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyTools>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyToolsSuspense<
  TData = Awaited<ReturnType<typeof findManyTools>>,
  TError = unknown
>(
  params?: FindManyToolsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyTools>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find many tools
 */

export function useFindManyToolsSuspense<
  TData = Awaited<ReturnType<typeof findManyTools>>,
  TError = unknown
>(
  params?: FindManyToolsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyTools>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getFindManyToolsSuspenseQueryOptions(params, options)

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Delete a tool
 * @summary Delete a tool
 */
export const getDeleteToolUrl = (id: string | undefined | null) => {
  return `/tools/${id}`
}

export const deleteTool = async (
  id: string | undefined | null,
  options?: RequestInit
): Promise<DeleteTool200> => {
  return customFetch<DeleteTool200>(getDeleteToolUrl(id), {
    ...options,
    method: 'DELETE'
  })
}

export const getDeleteToolMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTool>>,
    TError,
    { id: string | undefined | null },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTool>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationKey = ['deleteTool']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTool>>,
    { id: string | undefined | null }
  > = (props) => {
    const { id } = props ?? {}

    return deleteTool(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteToolMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTool>>
>

export type DeleteToolMutationError = NotFoundResponse

/**
 * @summary Delete a tool
 */
export const useDeleteTool = <TError = NotFoundResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteTool>>,
      TError,
      { id: string | undefined | null },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof deleteTool>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationOptions = getDeleteToolMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Find a tool
 * @summary Find a tool
 */
export const getGetOneToolUrl = (id: string | undefined | null) => {
  return `/tools/${id}`
}

export const getOneTool = async (
  id: string | undefined | null,
  options?: RequestInit
): Promise<GetOneTool200> => {
  return customFetch<GetOneTool200>(getGetOneToolUrl(id), {
    ...options,
    method: 'GET'
  })
}

export const getGetOneToolQueryKey = (id: string | undefined | null) => {
  return [`/tools/${id}`] as const
}

export const getGetOneToolQueryOptions = <
  TData = Awaited<ReturnType<typeof getOneTool>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneTool>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetOneToolQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneTool>>> = ({
    signal
  }) => getOneTool(id, { signal, ...requestOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getOneTool>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOneToolQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOneTool>>
>
export type GetOneToolQueryError = NotFoundResponse

export function useGetOneTool<
  TData = Awaited<ReturnType<typeof getOneTool>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneTool>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOneTool>>,
          TError,
          Awaited<ReturnType<typeof getOneTool>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneTool<
  TData = Awaited<ReturnType<typeof getOneTool>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneTool>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOneTool>>,
          TError,
          Awaited<ReturnType<typeof getOneTool>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneTool<
  TData = Awaited<ReturnType<typeof getOneTool>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneTool>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find a tool
 */

export function useGetOneTool<
  TData = Awaited<ReturnType<typeof getOneTool>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneTool>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetOneToolQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getGetOneToolSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getOneTool>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneTool>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetOneToolQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneTool>>> = ({
    signal
  }) => getOneTool(id, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getOneTool>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOneToolSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOneTool>>
>
export type GetOneToolSuspenseQueryError = NotFoundResponse

export function useGetOneToolSuspense<
  TData = Awaited<ReturnType<typeof getOneTool>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneTool>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneToolSuspense<
  TData = Awaited<ReturnType<typeof getOneTool>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneTool>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneToolSuspense<
  TData = Awaited<ReturnType<typeof getOneTool>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneTool>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find a tool
 */

export function useGetOneToolSuspense<
  TData = Awaited<ReturnType<typeof getOneTool>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneTool>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetOneToolSuspenseQueryOptions(id, options)

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Update a tool
 * @summary Update a tool
 */
export const getUpdateToolUrl = (id: string | undefined | null) => {
  return `/tools/${id}`
}

export const updateTool = async (
  id: string | undefined | null,
  updateToolBody: UpdateToolBody,
  options?: RequestInit
): Promise<UpdateTool200> => {
  return customFetch<UpdateTool200>(getUpdateToolUrl(id), {
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(updateToolBody)
  })
}

export const getUpdateToolMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTool>>,
    TError,
    { id: string | undefined | null; data: UpdateToolBody },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateTool>>,
  TError,
  { id: string | undefined | null; data: UpdateToolBody },
  TContext
> => {
  const mutationKey = ['updateTool']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateTool>>,
    { id: string | undefined | null; data: UpdateToolBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateTool(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateToolMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateTool>>
>
export type UpdateToolMutationBody = UpdateToolBody
export type UpdateToolMutationError = NotFoundResponse

/**
 * @summary Update a tool
 */
export const useUpdateTool = <TError = NotFoundResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateTool>>,
      TError,
      { id: string | undefined | null; data: UpdateToolBody },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof updateTool>>,
  TError,
  { id: string | undefined | null; data: UpdateToolBody },
  TContext
> => {
  const mutationOptions = getUpdateToolMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
