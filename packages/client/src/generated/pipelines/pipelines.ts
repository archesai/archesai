/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v1
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'

import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query'

import type {
  CreatePipeline201,
  CreatePipelineBody,
  DeletePipeline200,
  FindManyPipelines200,
  FindManyPipelinesParams,
  GetOnePipeline200,
  NotFoundResponse,
  UpdatePipeline200,
  UpdatePipelineBody
} from '../orval.schemas'

import { customFetch } from '../../fetcher'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Create a new pipeline
 * @summary Create a new pipeline
 */
export const getCreatePipelineUrl = () => {
  return `/pipelines`
}

export const createPipeline = async (
  createPipelineBody: CreatePipelineBody,
  options?: RequestInit
): Promise<CreatePipeline201> => {
  return customFetch<CreatePipeline201>(getCreatePipelineUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createPipelineBody)
  })
}

export const getCreatePipelineMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createPipeline>>,
    TError,
    { data: CreatePipelineBody },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createPipeline>>,
  TError,
  { data: CreatePipelineBody },
  TContext
> => {
  const mutationKey = ['createPipeline']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createPipeline>>,
    { data: CreatePipelineBody }
  > = (props) => {
    const { data } = props ?? {}

    return createPipeline(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreatePipelineMutationResult = NonNullable<
  Awaited<ReturnType<typeof createPipeline>>
>
export type CreatePipelineMutationBody = CreatePipelineBody
export type CreatePipelineMutationError = unknown

/**
 * @summary Create a new pipeline
 */
export const useCreatePipeline = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createPipeline>>,
      TError,
      { data: CreatePipelineBody },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof createPipeline>>,
  TError,
  { data: CreatePipelineBody },
  TContext
> => {
  const mutationOptions = getCreatePipelineMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Find many pipelines
 * @summary Find many pipelines
 */
export const getFindManyPipelinesUrl = (params?: FindManyPipelinesParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0 ?
      `/pipelines?${stringifiedParams}`
    : `/pipelines`
}

export const findManyPipelines = async (
  params?: FindManyPipelinesParams,
  options?: RequestInit
): Promise<FindManyPipelines200> => {
  return customFetch<FindManyPipelines200>(getFindManyPipelinesUrl(params), {
    ...options,
    method: 'GET'
  })
}

export const getFindManyPipelinesQueryKey = (
  params?: FindManyPipelinesParams
) => {
  return [`/pipelines`, ...(params ? [params] : [])] as const
}

export const getFindManyPipelinesQueryOptions = <
  TData = Awaited<ReturnType<typeof findManyPipelines>>,
  TError = unknown
>(
  params?: FindManyPipelinesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyPipelines>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getFindManyPipelinesQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof findManyPipelines>>
  > = ({ signal }) => findManyPipelines(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findManyPipelines>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindManyPipelinesQueryResult = NonNullable<
  Awaited<ReturnType<typeof findManyPipelines>>
>
export type FindManyPipelinesQueryError = unknown

export function useFindManyPipelines<
  TData = Awaited<ReturnType<typeof findManyPipelines>>,
  TError = unknown
>(
  params: undefined | FindManyPipelinesParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyPipelines>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findManyPipelines>>,
          TError,
          Awaited<ReturnType<typeof findManyPipelines>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyPipelines<
  TData = Awaited<ReturnType<typeof findManyPipelines>>,
  TError = unknown
>(
  params?: FindManyPipelinesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyPipelines>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findManyPipelines>>,
          TError,
          Awaited<ReturnType<typeof findManyPipelines>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyPipelines<
  TData = Awaited<ReturnType<typeof findManyPipelines>>,
  TError = unknown
>(
  params?: FindManyPipelinesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyPipelines>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find many pipelines
 */

export function useFindManyPipelines<
  TData = Awaited<ReturnType<typeof findManyPipelines>>,
  TError = unknown
>(
  params?: FindManyPipelinesParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyPipelines>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getFindManyPipelinesQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindManyPipelinesSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof findManyPipelines>>,
  TError = unknown
>(
  params?: FindManyPipelinesParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyPipelines>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getFindManyPipelinesQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof findManyPipelines>>
  > = ({ signal }) => findManyPipelines(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof findManyPipelines>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindManyPipelinesSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof findManyPipelines>>
>
export type FindManyPipelinesSuspenseQueryError = unknown

export function useFindManyPipelinesSuspense<
  TData = Awaited<ReturnType<typeof findManyPipelines>>,
  TError = unknown
>(
  params: undefined | FindManyPipelinesParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyPipelines>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyPipelinesSuspense<
  TData = Awaited<ReturnType<typeof findManyPipelines>>,
  TError = unknown
>(
  params?: FindManyPipelinesParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyPipelines>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyPipelinesSuspense<
  TData = Awaited<ReturnType<typeof findManyPipelines>>,
  TError = unknown
>(
  params?: FindManyPipelinesParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyPipelines>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find many pipelines
 */

export function useFindManyPipelinesSuspense<
  TData = Awaited<ReturnType<typeof findManyPipelines>>,
  TError = unknown
>(
  params?: FindManyPipelinesParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyPipelines>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getFindManyPipelinesSuspenseQueryOptions(params, options)

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Delete a pipeline
 * @summary Delete a pipeline
 */
export const getDeletePipelineUrl = (id: string | undefined | null) => {
  return `/pipelines/${id}`
}

export const deletePipeline = async (
  id: string | undefined | null,
  options?: RequestInit
): Promise<DeletePipeline200> => {
  return customFetch<DeletePipeline200>(getDeletePipelineUrl(id), {
    ...options,
    method: 'DELETE'
  })
}

export const getDeletePipelineMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePipeline>>,
    TError,
    { id: string | undefined | null },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletePipeline>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationKey = ['deletePipeline']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deletePipeline>>,
    { id: string | undefined | null }
  > = (props) => {
    const { id } = props ?? {}

    return deletePipeline(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeletePipelineMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletePipeline>>
>

export type DeletePipelineMutationError = NotFoundResponse

/**
 * @summary Delete a pipeline
 */
export const useDeletePipeline = <
  TError = NotFoundResponse,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deletePipeline>>,
      TError,
      { id: string | undefined | null },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof deletePipeline>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationOptions = getDeletePipelineMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Find a pipeline
 * @summary Find a pipeline
 */
export const getGetOnePipelineUrl = (id: string | undefined | null) => {
  return `/pipelines/${id}`
}

export const getOnePipeline = async (
  id: string | undefined | null,
  options?: RequestInit
): Promise<GetOnePipeline200> => {
  return customFetch<GetOnePipeline200>(getGetOnePipelineUrl(id), {
    ...options,
    method: 'GET'
  })
}

export const getGetOnePipelineQueryKey = (id: string | undefined | null) => {
  return [`/pipelines/${id}`] as const
}

export const getGetOnePipelineQueryOptions = <
  TData = Awaited<ReturnType<typeof getOnePipeline>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOnePipeline>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetOnePipelineQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOnePipeline>>> = ({
    signal
  }) => getOnePipeline(id, { signal, ...requestOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getOnePipeline>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOnePipelineQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOnePipeline>>
>
export type GetOnePipelineQueryError = NotFoundResponse

export function useGetOnePipeline<
  TData = Awaited<ReturnType<typeof getOnePipeline>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOnePipeline>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOnePipeline>>,
          TError,
          Awaited<ReturnType<typeof getOnePipeline>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOnePipeline<
  TData = Awaited<ReturnType<typeof getOnePipeline>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOnePipeline>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOnePipeline>>,
          TError,
          Awaited<ReturnType<typeof getOnePipeline>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOnePipeline<
  TData = Awaited<ReturnType<typeof getOnePipeline>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOnePipeline>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find a pipeline
 */

export function useGetOnePipeline<
  TData = Awaited<ReturnType<typeof getOnePipeline>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOnePipeline>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetOnePipelineQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getGetOnePipelineSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getOnePipeline>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOnePipeline>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetOnePipelineQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOnePipeline>>> = ({
    signal
  }) => getOnePipeline(id, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getOnePipeline>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOnePipelineSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOnePipeline>>
>
export type GetOnePipelineSuspenseQueryError = NotFoundResponse

export function useGetOnePipelineSuspense<
  TData = Awaited<ReturnType<typeof getOnePipeline>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOnePipeline>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOnePipelineSuspense<
  TData = Awaited<ReturnType<typeof getOnePipeline>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOnePipeline>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOnePipelineSuspense<
  TData = Awaited<ReturnType<typeof getOnePipeline>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOnePipeline>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find a pipeline
 */

export function useGetOnePipelineSuspense<
  TData = Awaited<ReturnType<typeof getOnePipeline>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOnePipeline>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetOnePipelineSuspenseQueryOptions(id, options)

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Update a pipeline
 * @summary Update a pipeline
 */
export const getUpdatePipelineUrl = (id: string | undefined | null) => {
  return `/pipelines/${id}`
}

export const updatePipeline = async (
  id: string | undefined | null,
  updatePipelineBody: UpdatePipelineBody,
  options?: RequestInit
): Promise<UpdatePipeline200> => {
  return customFetch<UpdatePipeline200>(getUpdatePipelineUrl(id), {
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(updatePipelineBody)
  })
}

export const getUpdatePipelineMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updatePipeline>>,
    TError,
    { id: string | undefined | null; data: UpdatePipelineBody },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updatePipeline>>,
  TError,
  { id: string | undefined | null; data: UpdatePipelineBody },
  TContext
> => {
  const mutationKey = ['updatePipeline']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updatePipeline>>,
    { id: string | undefined | null; data: UpdatePipelineBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return updatePipeline(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdatePipelineMutationResult = NonNullable<
  Awaited<ReturnType<typeof updatePipeline>>
>
export type UpdatePipelineMutationBody = UpdatePipelineBody
export type UpdatePipelineMutationError = NotFoundResponse

/**
 * @summary Update a pipeline
 */
export const useUpdatePipeline = <
  TError = NotFoundResponse,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updatePipeline>>,
      TError,
      { id: string | undefined | null; data: UpdatePipelineBody },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof updatePipeline>>,
  TError,
  { id: string | undefined | null; data: UpdatePipelineBody },
  TContext
> => {
  const mutationOptions = getUpdatePipelineMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
