/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v1
 */
import type {
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'

import { useMutation, useSuspenseQuery } from '@tanstack/react-query'

import type {
  CreateArtifact201,
  CreateArtifactBody,
  DeleteArtifact200,
  FindManyArtifacts200,
  FindManyArtifactsParams,
  GetOneArtifact200,
  NotFoundResponse,
  UpdateArtifact200,
  UpdateArtifactBody
} from '../orval.schemas'

import { customFetch } from '../../fetcher'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Create a new artifact
 * @summary Create a new artifact
 */
export const getCreateArtifactUrl = () => {
  return `/artifacts`
}

export const createArtifact = async (
  createArtifactBody: CreateArtifactBody,
  options?: RequestInit
): Promise<CreateArtifact201> => {
  return customFetch<CreateArtifact201>(getCreateArtifactUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createArtifactBody)
  })
}

export const getCreateArtifactMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createArtifact>>,
    TError,
    { data: CreateArtifactBody },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createArtifact>>,
  TError,
  { data: CreateArtifactBody },
  TContext
> => {
  const mutationKey = ['createArtifact']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createArtifact>>,
    { data: CreateArtifactBody }
  > = (props) => {
    const { data } = props ?? {}

    return createArtifact(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateArtifactMutationResult = NonNullable<
  Awaited<ReturnType<typeof createArtifact>>
>
export type CreateArtifactMutationBody = CreateArtifactBody
export type CreateArtifactMutationError = unknown

/**
 * @summary Create a new artifact
 */
export const useCreateArtifact = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createArtifact>>,
      TError,
      { data: CreateArtifactBody },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof createArtifact>>,
  TError,
  { data: CreateArtifactBody },
  TContext
> => {
  const mutationOptions = getCreateArtifactMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Find many artifacts
 * @summary Find many artifacts
 */
export const getFindManyArtifactsUrl = (params?: FindManyArtifactsParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0 ?
      `/artifacts?${stringifiedParams}`
    : `/artifacts`
}

export const findManyArtifacts = async (
  params?: FindManyArtifactsParams,
  options?: RequestInit
): Promise<FindManyArtifacts200> => {
  return customFetch<FindManyArtifacts200>(getFindManyArtifactsUrl(params), {
    ...options,
    method: 'GET'
  })
}

export const getFindManyArtifactsQueryKey = (
  params?: FindManyArtifactsParams
) => {
  return [`/artifacts`, ...(params ? [params] : [])] as const
}

export const getFindManyArtifactsSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof findManyArtifacts>>,
  TError = unknown
>(
  params?: FindManyArtifactsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyArtifacts>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getFindManyArtifactsQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof findManyArtifacts>>
  > = ({ signal }) => findManyArtifacts(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof findManyArtifacts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindManyArtifactsSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof findManyArtifacts>>
>
export type FindManyArtifactsSuspenseQueryError = unknown

export function useFindManyArtifactsSuspense<
  TData = Awaited<ReturnType<typeof findManyArtifacts>>,
  TError = unknown
>(
  params: undefined | FindManyArtifactsParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyArtifacts>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyArtifactsSuspense<
  TData = Awaited<ReturnType<typeof findManyArtifacts>>,
  TError = unknown
>(
  params?: FindManyArtifactsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyArtifacts>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyArtifactsSuspense<
  TData = Awaited<ReturnType<typeof findManyArtifacts>>,
  TError = unknown
>(
  params?: FindManyArtifactsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyArtifacts>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find many artifacts
 */

export function useFindManyArtifactsSuspense<
  TData = Awaited<ReturnType<typeof findManyArtifacts>>,
  TError = unknown
>(
  params?: FindManyArtifactsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyArtifacts>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getFindManyArtifactsSuspenseQueryOptions(params, options)

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Delete an artifact
 * @summary Delete an artifact
 */
export const getDeleteArtifactUrl = (id: string | undefined | null) => {
  return `/artifacts/${id}`
}

export const deleteArtifact = async (
  id: string | undefined | null,
  options?: RequestInit
): Promise<DeleteArtifact200> => {
  return customFetch<DeleteArtifact200>(getDeleteArtifactUrl(id), {
    ...options,
    method: 'DELETE'
  })
}

export const getDeleteArtifactMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteArtifact>>,
    TError,
    { id: string | undefined | null },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteArtifact>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationKey = ['deleteArtifact']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteArtifact>>,
    { id: string | undefined | null }
  > = (props) => {
    const { id } = props ?? {}

    return deleteArtifact(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteArtifactMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteArtifact>>
>

export type DeleteArtifactMutationError = NotFoundResponse

/**
 * @summary Delete an artifact
 */
export const useDeleteArtifact = <
  TError = NotFoundResponse,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteArtifact>>,
      TError,
      { id: string | undefined | null },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof deleteArtifact>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationOptions = getDeleteArtifactMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Find an artifact
 * @summary Find an artifact
 */
export const getGetOneArtifactUrl = (id: string | undefined | null) => {
  return `/artifacts/${id}`
}

export const getOneArtifact = async (
  id: string | undefined | null,
  options?: RequestInit
): Promise<GetOneArtifact200> => {
  return customFetch<GetOneArtifact200>(getGetOneArtifactUrl(id), {
    ...options,
    method: 'GET'
  })
}

export const getGetOneArtifactQueryKey = (id: string | undefined | null) => {
  return [`/artifacts/${id}`] as const
}

export const getGetOneArtifactSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getOneArtifact>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneArtifact>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetOneArtifactQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneArtifact>>> = ({
    signal
  }) => getOneArtifact(id, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getOneArtifact>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOneArtifactSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOneArtifact>>
>
export type GetOneArtifactSuspenseQueryError = NotFoundResponse

export function useGetOneArtifactSuspense<
  TData = Awaited<ReturnType<typeof getOneArtifact>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneArtifact>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneArtifactSuspense<
  TData = Awaited<ReturnType<typeof getOneArtifact>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneArtifact>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneArtifactSuspense<
  TData = Awaited<ReturnType<typeof getOneArtifact>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneArtifact>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find an artifact
 */

export function useGetOneArtifactSuspense<
  TData = Awaited<ReturnType<typeof getOneArtifact>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneArtifact>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetOneArtifactSuspenseQueryOptions(id, options)

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Update an artifact
 * @summary Update an artifact
 */
export const getUpdateArtifactUrl = (id: string | undefined | null) => {
  return `/artifacts/${id}`
}

export const updateArtifact = async (
  id: string | undefined | null,
  updateArtifactBody: UpdateArtifactBody,
  options?: RequestInit
): Promise<UpdateArtifact200> => {
  return customFetch<UpdateArtifact200>(getUpdateArtifactUrl(id), {
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(updateArtifactBody)
  })
}

export const getUpdateArtifactMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateArtifact>>,
    TError,
    { id: string | undefined | null; data: UpdateArtifactBody },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateArtifact>>,
  TError,
  { id: string | undefined | null; data: UpdateArtifactBody },
  TContext
> => {
  const mutationKey = ['updateArtifact']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateArtifact>>,
    { id: string | undefined | null; data: UpdateArtifactBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateArtifact(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateArtifactMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateArtifact>>
>
export type UpdateArtifactMutationBody = UpdateArtifactBody
export type UpdateArtifactMutationError = NotFoundResponse

/**
 * @summary Update an artifact
 */
export const useUpdateArtifact = <
  TError = NotFoundResponse,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateArtifact>>,
      TError,
      { id: string | undefined | null; data: UpdateArtifactBody },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof updateArtifact>>,
  TError,
  { id: string | undefined | null; data: UpdateArtifactBody },
  TContext
> => {
  const mutationOptions = getUpdateArtifactMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
