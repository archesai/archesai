/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v1
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'

import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query'
import qs from 'qs'

import type {
  CreateLabel201,
  CreateLabelBody,
  DeleteLabel200,
  FindManyLabels200,
  FindManyLabelsParams,
  GetOneLabel200,
  NotFoundResponse,
  UpdateLabel200,
  UpdateLabelBody
} from '../orval.schemas'

import { customFetch } from '../../fetcher'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Create a new label
 * @summary Create a new label
 */
export const getCreateLabelUrl = () => {
  return `/labels`
}

export const createLabel = async (
  createLabelBody: CreateLabelBody,
  options?: RequestInit
): Promise<CreateLabel201> => {
  return customFetch<CreateLabel201>(getCreateLabelUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createLabelBody)
  })
}

export const getCreateLabelMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createLabel>>,
    TError,
    { data: CreateLabelBody },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createLabel>>,
  TError,
  { data: CreateLabelBody },
  TContext
> => {
  const mutationKey = ['createLabel']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createLabel>>,
    { data: CreateLabelBody }
  > = (props) => {
    const { data } = props ?? {}

    return createLabel(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateLabelMutationResult = NonNullable<
  Awaited<ReturnType<typeof createLabel>>
>
export type CreateLabelMutationBody = CreateLabelBody
export type CreateLabelMutationError = unknown

/**
 * @summary Create a new label
 */
export const useCreateLabel = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createLabel>>,
      TError,
      { data: CreateLabelBody },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof createLabel>>,
  TError,
  { data: CreateLabelBody },
  TContext
> => {
  const mutationOptions = getCreateLabelMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Find many labels
 * @summary Find many labels
 */
export const getFindManyLabelsUrl = (params?: FindManyLabelsParams) => {
  const stringifiedParams = qs.stringify(params || {}, {
    skipNulls: false,
    strictNullHandling: true
  })

  return stringifiedParams.length > 0 ?
      `/labels?${stringifiedParams}`
    : `/labels`
}

export const findManyLabels = async (
  params?: FindManyLabelsParams,
  options?: RequestInit
): Promise<FindManyLabels200> => {
  return customFetch<FindManyLabels200>(getFindManyLabelsUrl(params), {
    ...options,
    method: 'GET'
  })
}

export const getFindManyLabelsQueryKey = (params?: FindManyLabelsParams) => {
  return [`/labels`, ...(params ? [params] : [])] as const
}

export const getFindManyLabelsQueryOptions = <
  TData = Awaited<ReturnType<typeof findManyLabels>>,
  TError = unknown
>(
  params?: FindManyLabelsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findManyLabels>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindManyLabelsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findManyLabels>>> = ({
    signal
  }) => findManyLabels(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findManyLabels>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindManyLabelsQueryResult = NonNullable<
  Awaited<ReturnType<typeof findManyLabels>>
>
export type FindManyLabelsQueryError = unknown

export function useFindManyLabels<
  TData = Awaited<ReturnType<typeof findManyLabels>>,
  TError = unknown
>(
  params: undefined | FindManyLabelsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findManyLabels>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findManyLabels>>,
          TError,
          Awaited<ReturnType<typeof findManyLabels>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyLabels<
  TData = Awaited<ReturnType<typeof findManyLabels>>,
  TError = unknown
>(
  params?: FindManyLabelsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findManyLabels>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findManyLabels>>,
          TError,
          Awaited<ReturnType<typeof findManyLabels>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyLabels<
  TData = Awaited<ReturnType<typeof findManyLabels>>,
  TError = unknown
>(
  params?: FindManyLabelsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findManyLabels>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find many labels
 */

export function useFindManyLabels<
  TData = Awaited<ReturnType<typeof findManyLabels>>,
  TError = unknown
>(
  params?: FindManyLabelsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof findManyLabels>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getFindManyLabelsQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindManyLabelsSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof findManyLabels>>,
  TError = unknown
>(
  params?: FindManyLabelsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyLabels>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindManyLabelsQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findManyLabels>>> = ({
    signal
  }) => findManyLabels(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof findManyLabels>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindManyLabelsSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof findManyLabels>>
>
export type FindManyLabelsSuspenseQueryError = unknown

export function useFindManyLabelsSuspense<
  TData = Awaited<ReturnType<typeof findManyLabels>>,
  TError = unknown
>(
  params: undefined | FindManyLabelsParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyLabels>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyLabelsSuspense<
  TData = Awaited<ReturnType<typeof findManyLabels>>,
  TError = unknown
>(
  params?: FindManyLabelsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyLabels>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyLabelsSuspense<
  TData = Awaited<ReturnType<typeof findManyLabels>>,
  TError = unknown
>(
  params?: FindManyLabelsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyLabels>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find many labels
 */

export function useFindManyLabelsSuspense<
  TData = Awaited<ReturnType<typeof findManyLabels>>,
  TError = unknown
>(
  params?: FindManyLabelsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyLabels>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getFindManyLabelsSuspenseQueryOptions(params, options)

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Delete a label
 * @summary Delete a label
 */
export const getDeleteLabelUrl = (id: string | undefined | null) => {
  return `/labels/${id}`
}

export const deleteLabel = async (
  id: string | undefined | null,
  options?: RequestInit
): Promise<DeleteLabel200> => {
  return customFetch<DeleteLabel200>(getDeleteLabelUrl(id), {
    ...options,
    method: 'DELETE'
  })
}

export const getDeleteLabelMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteLabel>>,
    TError,
    { id: string | undefined | null },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteLabel>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationKey = ['deleteLabel']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteLabel>>,
    { id: string | undefined | null }
  > = (props) => {
    const { id } = props ?? {}

    return deleteLabel(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteLabelMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteLabel>>
>

export type DeleteLabelMutationError = NotFoundResponse

/**
 * @summary Delete a label
 */
export const useDeleteLabel = <TError = NotFoundResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteLabel>>,
      TError,
      { id: string | undefined | null },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof deleteLabel>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationOptions = getDeleteLabelMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Find a label
 * @summary Find a label
 */
export const getGetOneLabelUrl = (id: string | undefined | null) => {
  return `/labels/${id}`
}

export const getOneLabel = async (
  id: string | undefined | null,
  options?: RequestInit
): Promise<GetOneLabel200> => {
  return customFetch<GetOneLabel200>(getGetOneLabelUrl(id), {
    ...options,
    method: 'GET'
  })
}

export const getGetOneLabelQueryKey = (id: string | undefined | null) => {
  return [`/labels/${id}`] as const
}

export const getGetOneLabelQueryOptions = <
  TData = Awaited<ReturnType<typeof getOneLabel>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneLabel>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetOneLabelQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneLabel>>> = ({
    signal
  }) => getOneLabel(id, { signal, ...requestOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getOneLabel>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOneLabelQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOneLabel>>
>
export type GetOneLabelQueryError = NotFoundResponse

export function useGetOneLabel<
  TData = Awaited<ReturnType<typeof getOneLabel>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneLabel>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOneLabel>>,
          TError,
          Awaited<ReturnType<typeof getOneLabel>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneLabel<
  TData = Awaited<ReturnType<typeof getOneLabel>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneLabel>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOneLabel>>,
          TError,
          Awaited<ReturnType<typeof getOneLabel>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneLabel<
  TData = Awaited<ReturnType<typeof getOneLabel>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneLabel>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find a label
 */

export function useGetOneLabel<
  TData = Awaited<ReturnType<typeof getOneLabel>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneLabel>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetOneLabelQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getGetOneLabelSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getOneLabel>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneLabel>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetOneLabelQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneLabel>>> = ({
    signal
  }) => getOneLabel(id, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getOneLabel>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOneLabelSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOneLabel>>
>
export type GetOneLabelSuspenseQueryError = NotFoundResponse

export function useGetOneLabelSuspense<
  TData = Awaited<ReturnType<typeof getOneLabel>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneLabel>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneLabelSuspense<
  TData = Awaited<ReturnType<typeof getOneLabel>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneLabel>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneLabelSuspense<
  TData = Awaited<ReturnType<typeof getOneLabel>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneLabel>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find a label
 */

export function useGetOneLabelSuspense<
  TData = Awaited<ReturnType<typeof getOneLabel>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneLabel>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetOneLabelSuspenseQueryOptions(id, options)

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Update a label
 * @summary Update a label
 */
export const getUpdateLabelUrl = (id: string | undefined | null) => {
  return `/labels/${id}`
}

export const updateLabel = async (
  id: string | undefined | null,
  updateLabelBody: UpdateLabelBody,
  options?: RequestInit
): Promise<UpdateLabel200> => {
  return customFetch<UpdateLabel200>(getUpdateLabelUrl(id), {
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(updateLabelBody)
  })
}

export const getUpdateLabelMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateLabel>>,
    TError,
    { id: string | undefined | null; data: UpdateLabelBody },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateLabel>>,
  TError,
  { id: string | undefined | null; data: UpdateLabelBody },
  TContext
> => {
  const mutationKey = ['updateLabel']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateLabel>>,
    { id: string | undefined | null; data: UpdateLabelBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateLabel(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateLabelMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateLabel>>
>
export type UpdateLabelMutationBody = UpdateLabelBody
export type UpdateLabelMutationError = NotFoundResponse

/**
 * @summary Update a label
 */
export const useUpdateLabel = <TError = NotFoundResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateLabel>>,
      TError,
      { id: string | undefined | null; data: UpdateLabelBody },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof updateLabel>>,
  TError,
  { id: string | undefined | null; data: UpdateLabelBody },
  TContext
> => {
  const mutationOptions = getUpdateLabelMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
