/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v1
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'

import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query'

import type {
  CreateApiToken201,
  CreateApiTokenBody,
  DeleteApiToken200,
  FindManyApiTokens200,
  FindManyApiTokensParams,
  GetOneApiToken200,
  NotFoundResponse,
  UpdateApiToken200,
  UpdateApiTokenBody
} from '../orval.schemas'

import { customFetch } from '../../fetcher'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Create a new api-token
 * @summary Create a new api-token
 */
export const getCreateApiTokenUrl = () => {
  return `/api-tokens`
}

export const createApiToken = async (
  createApiTokenBody: CreateApiTokenBody,
  options?: RequestInit
): Promise<CreateApiToken201> => {
  return customFetch<CreateApiToken201>(getCreateApiTokenUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createApiTokenBody)
  })
}

export const getCreateApiTokenMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createApiToken>>,
    TError,
    { data: CreateApiTokenBody },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createApiToken>>,
  TError,
  { data: CreateApiTokenBody },
  TContext
> => {
  const mutationKey = ['createApiToken']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createApiToken>>,
    { data: CreateApiTokenBody }
  > = (props) => {
    const { data } = props ?? {}

    return createApiToken(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateApiTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof createApiToken>>
>
export type CreateApiTokenMutationBody = CreateApiTokenBody
export type CreateApiTokenMutationError = unknown

/**
 * @summary Create a new api-token
 */
export const useCreateApiToken = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createApiToken>>,
      TError,
      { data: CreateApiTokenBody },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof createApiToken>>,
  TError,
  { data: CreateApiTokenBody },
  TContext
> => {
  const mutationOptions = getCreateApiTokenMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Find many api-tokens
 * @summary Find many api-tokens
 */
export const getFindManyApiTokensUrl = (params?: FindManyApiTokensParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0 ?
      `/api-tokens?${stringifiedParams}`
    : `/api-tokens`
}

export const findManyApiTokens = async (
  params?: FindManyApiTokensParams,
  options?: RequestInit
): Promise<FindManyApiTokens200> => {
  return customFetch<FindManyApiTokens200>(getFindManyApiTokensUrl(params), {
    ...options,
    method: 'GET'
  })
}

export const getFindManyApiTokensQueryKey = (
  params?: FindManyApiTokensParams
) => {
  return [`/api-tokens`, ...(params ? [params] : [])] as const
}

export const getFindManyApiTokensQueryOptions = <
  TData = Awaited<ReturnType<typeof findManyApiTokens>>,
  TError = unknown
>(
  params?: FindManyApiTokensParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyApiTokens>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getFindManyApiTokensQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof findManyApiTokens>>
  > = ({ signal }) => findManyApiTokens(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findManyApiTokens>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindManyApiTokensQueryResult = NonNullable<
  Awaited<ReturnType<typeof findManyApiTokens>>
>
export type FindManyApiTokensQueryError = unknown

export function useFindManyApiTokens<
  TData = Awaited<ReturnType<typeof findManyApiTokens>>,
  TError = unknown
>(
  params: undefined | FindManyApiTokensParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyApiTokens>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findManyApiTokens>>,
          TError,
          Awaited<ReturnType<typeof findManyApiTokens>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyApiTokens<
  TData = Awaited<ReturnType<typeof findManyApiTokens>>,
  TError = unknown
>(
  params?: FindManyApiTokensParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyApiTokens>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findManyApiTokens>>,
          TError,
          Awaited<ReturnType<typeof findManyApiTokens>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyApiTokens<
  TData = Awaited<ReturnType<typeof findManyApiTokens>>,
  TError = unknown
>(
  params?: FindManyApiTokensParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyApiTokens>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find many api-tokens
 */

export function useFindManyApiTokens<
  TData = Awaited<ReturnType<typeof findManyApiTokens>>,
  TError = unknown
>(
  params?: FindManyApiTokensParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyApiTokens>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getFindManyApiTokensQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindManyApiTokensSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof findManyApiTokens>>,
  TError = unknown
>(
  params?: FindManyApiTokensParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyApiTokens>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getFindManyApiTokensQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof findManyApiTokens>>
  > = ({ signal }) => findManyApiTokens(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof findManyApiTokens>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindManyApiTokensSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof findManyApiTokens>>
>
export type FindManyApiTokensSuspenseQueryError = unknown

export function useFindManyApiTokensSuspense<
  TData = Awaited<ReturnType<typeof findManyApiTokens>>,
  TError = unknown
>(
  params: undefined | FindManyApiTokensParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyApiTokens>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyApiTokensSuspense<
  TData = Awaited<ReturnType<typeof findManyApiTokens>>,
  TError = unknown
>(
  params?: FindManyApiTokensParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyApiTokens>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyApiTokensSuspense<
  TData = Awaited<ReturnType<typeof findManyApiTokens>>,
  TError = unknown
>(
  params?: FindManyApiTokensParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyApiTokens>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find many api-tokens
 */

export function useFindManyApiTokensSuspense<
  TData = Awaited<ReturnType<typeof findManyApiTokens>>,
  TError = unknown
>(
  params?: FindManyApiTokensParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyApiTokens>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getFindManyApiTokensSuspenseQueryOptions(params, options)

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Delete an api-token
 * @summary Delete an api-token
 */
export const getDeleteApiTokenUrl = (id: string | undefined | null) => {
  return `/api-tokens/${id}`
}

export const deleteApiToken = async (
  id: string | undefined | null,
  options?: RequestInit
): Promise<DeleteApiToken200> => {
  return customFetch<DeleteApiToken200>(getDeleteApiTokenUrl(id), {
    ...options,
    method: 'DELETE'
  })
}

export const getDeleteApiTokenMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteApiToken>>,
    TError,
    { id: string | undefined | null },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteApiToken>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationKey = ['deleteApiToken']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteApiToken>>,
    { id: string | undefined | null }
  > = (props) => {
    const { id } = props ?? {}

    return deleteApiToken(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteApiTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteApiToken>>
>

export type DeleteApiTokenMutationError = NotFoundResponse

/**
 * @summary Delete an api-token
 */
export const useDeleteApiToken = <
  TError = NotFoundResponse,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteApiToken>>,
      TError,
      { id: string | undefined | null },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof deleteApiToken>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationOptions = getDeleteApiTokenMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Find an api-token
 * @summary Find an api-token
 */
export const getGetOneApiTokenUrl = (id: string | undefined | null) => {
  return `/api-tokens/${id}`
}

export const getOneApiToken = async (
  id: string | undefined | null,
  options?: RequestInit
): Promise<GetOneApiToken200> => {
  return customFetch<GetOneApiToken200>(getGetOneApiTokenUrl(id), {
    ...options,
    method: 'GET'
  })
}

export const getGetOneApiTokenQueryKey = (id: string | undefined | null) => {
  return [`/api-tokens/${id}`] as const
}

export const getGetOneApiTokenQueryOptions = <
  TData = Awaited<ReturnType<typeof getOneApiToken>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneApiToken>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetOneApiTokenQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneApiToken>>> = ({
    signal
  }) => getOneApiToken(id, { signal, ...requestOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getOneApiToken>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOneApiTokenQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOneApiToken>>
>
export type GetOneApiTokenQueryError = NotFoundResponse

export function useGetOneApiToken<
  TData = Awaited<ReturnType<typeof getOneApiToken>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneApiToken>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOneApiToken>>,
          TError,
          Awaited<ReturnType<typeof getOneApiToken>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneApiToken<
  TData = Awaited<ReturnType<typeof getOneApiToken>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneApiToken>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOneApiToken>>,
          TError,
          Awaited<ReturnType<typeof getOneApiToken>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneApiToken<
  TData = Awaited<ReturnType<typeof getOneApiToken>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneApiToken>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find an api-token
 */

export function useGetOneApiToken<
  TData = Awaited<ReturnType<typeof getOneApiToken>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneApiToken>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetOneApiTokenQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getGetOneApiTokenSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getOneApiToken>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneApiToken>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetOneApiTokenQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneApiToken>>> = ({
    signal
  }) => getOneApiToken(id, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getOneApiToken>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOneApiTokenSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOneApiToken>>
>
export type GetOneApiTokenSuspenseQueryError = NotFoundResponse

export function useGetOneApiTokenSuspense<
  TData = Awaited<ReturnType<typeof getOneApiToken>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneApiToken>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneApiTokenSuspense<
  TData = Awaited<ReturnType<typeof getOneApiToken>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneApiToken>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneApiTokenSuspense<
  TData = Awaited<ReturnType<typeof getOneApiToken>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneApiToken>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find an api-token
 */

export function useGetOneApiTokenSuspense<
  TData = Awaited<ReturnType<typeof getOneApiToken>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneApiToken>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetOneApiTokenSuspenseQueryOptions(id, options)

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Update an api-token
 * @summary Update an api-token
 */
export const getUpdateApiTokenUrl = (id: string | undefined | null) => {
  return `/api-tokens/${id}`
}

export const updateApiToken = async (
  id: string | undefined | null,
  updateApiTokenBody: UpdateApiTokenBody,
  options?: RequestInit
): Promise<UpdateApiToken200> => {
  return customFetch<UpdateApiToken200>(getUpdateApiTokenUrl(id), {
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(updateApiTokenBody)
  })
}

export const getUpdateApiTokenMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateApiToken>>,
    TError,
    { id: string | undefined | null; data: UpdateApiTokenBody },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateApiToken>>,
  TError,
  { id: string | undefined | null; data: UpdateApiTokenBody },
  TContext
> => {
  const mutationKey = ['updateApiToken']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateApiToken>>,
    { id: string | undefined | null; data: UpdateApiTokenBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateApiToken(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateApiTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateApiToken>>
>
export type UpdateApiTokenMutationBody = UpdateApiTokenBody
export type UpdateApiTokenMutationError = NotFoundResponse

/**
 * @summary Update an api-token
 */
export const useUpdateApiToken = <
  TError = NotFoundResponse,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateApiToken>>,
      TError,
      { id: string | undefined | null; data: UpdateApiTokenBody },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof updateApiToken>>,
  TError,
  { id: string | undefined | null; data: UpdateApiTokenBody },
  TContext
> => {
  const mutationOptions = getUpdateApiTokenMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
