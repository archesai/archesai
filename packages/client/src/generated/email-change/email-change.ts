/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v1
 */
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'

import { useMutation } from '@tanstack/react-query'

import type {
  ConfirmEmailChangeBody,
  NoContentResponse,
  NotFoundResponse,
  RequestEmailChangeBody,
  UnauthorizedResponse
} from '../orval.schemas'

import { customFetch } from '../../fetcher'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * This endpoint will verify your e-mail change with a token
 * @summary Verify e-mail change
 */
export const getConfirmEmailChangeUrl = () => {
  return `/email-change/verify`
}

export const confirmEmailChange = async (
  confirmEmailChangeBody: ConfirmEmailChangeBody,
  options?: RequestInit
): Promise<NoContentResponse> => {
  return customFetch<NoContentResponse>(getConfirmEmailChangeUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(confirmEmailChangeBody)
  })
}

export const getConfirmEmailChangeMutationOptions = <
  TError = UnauthorizedResponse | NotFoundResponse,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof confirmEmailChange>>,
    TError,
    { data: ConfirmEmailChangeBody },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof confirmEmailChange>>,
  TError,
  { data: ConfirmEmailChangeBody },
  TContext
> => {
  const mutationKey = ['confirmEmailChange']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof confirmEmailChange>>,
    { data: ConfirmEmailChangeBody }
  > = (props) => {
    const { data } = props ?? {}

    return confirmEmailChange(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type ConfirmEmailChangeMutationResult = NonNullable<
  Awaited<ReturnType<typeof confirmEmailChange>>
>
export type ConfirmEmailChangeMutationBody = ConfirmEmailChangeBody
export type ConfirmEmailChangeMutationError =
  | UnauthorizedResponse
  | NotFoundResponse

/**
 * @summary Verify e-mail change
 */
export const useConfirmEmailChange = <
  TError = UnauthorizedResponse | NotFoundResponse,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof confirmEmailChange>>,
      TError,
      { data: ConfirmEmailChangeBody },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof confirmEmailChange>>,
  TError,
  { data: ConfirmEmailChangeBody },
  TContext
> => {
  const mutationOptions = getConfirmEmailChangeMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * This endpoint will request your e-mail change with a token
 * @summary Request e-mail change
 */
export const getRequestEmailChangeUrl = () => {
  return `/email-change/request`
}

export const requestEmailChange = async (
  requestEmailChangeBody: RequestEmailChangeBody,
  options?: RequestInit
): Promise<NoContentResponse> => {
  return customFetch<NoContentResponse>(getRequestEmailChangeUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(requestEmailChangeBody)
  })
}

export const getRequestEmailChangeMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof requestEmailChange>>,
    TError,
    { data: RequestEmailChangeBody },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof requestEmailChange>>,
  TError,
  { data: RequestEmailChangeBody },
  TContext
> => {
  const mutationKey = ['requestEmailChange']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof requestEmailChange>>,
    { data: RequestEmailChangeBody }
  > = (props) => {
    const { data } = props ?? {}

    return requestEmailChange(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type RequestEmailChangeMutationResult = NonNullable<
  Awaited<ReturnType<typeof requestEmailChange>>
>
export type RequestEmailChangeMutationBody = RequestEmailChangeBody
export type RequestEmailChangeMutationError = unknown

/**
 * @summary Request e-mail change
 */
export const useRequestEmailChange = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof requestEmailChange>>,
      TError,
      { data: RequestEmailChangeBody },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof requestEmailChange>>,
  TError,
  { data: RequestEmailChangeBody },
  TContext
> => {
  const mutationOptions = getRequestEmailChangeMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
