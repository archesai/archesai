/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v1
 */
import type {
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'

import { useMutation, useSuspenseQuery } from '@tanstack/react-query'

import type {
  CreateFile201,
  CreateFileBody,
  DeleteFile200,
  FindManyFiles200,
  FindManyFilesParams,
  GetOneFile200,
  NotFoundResponse,
  UpdateFile200,
  UpdateFileBody
} from '../orval.schemas'

import { customFetch } from '../../fetcher'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Create a new file
 * @summary Create a new file
 */
export const getCreateFileUrl = () => {
  return `/files`
}

export const createFile = async (
  createFileBody: CreateFileBody,
  options?: RequestInit
): Promise<CreateFile201> => {
  return customFetch<CreateFile201>(getCreateFileUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createFileBody)
  })
}

export const getCreateFileMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createFile>>,
    TError,
    { data: CreateFileBody },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createFile>>,
  TError,
  { data: CreateFileBody },
  TContext
> => {
  const mutationKey = ['createFile']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createFile>>,
    { data: CreateFileBody }
  > = (props) => {
    const { data } = props ?? {}

    return createFile(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateFileMutationResult = NonNullable<
  Awaited<ReturnType<typeof createFile>>
>
export type CreateFileMutationBody = CreateFileBody
export type CreateFileMutationError = unknown

/**
 * @summary Create a new file
 */
export const useCreateFile = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createFile>>,
      TError,
      { data: CreateFileBody },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof createFile>>,
  TError,
  { data: CreateFileBody },
  TContext
> => {
  const mutationOptions = getCreateFileMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Find many files
 * @summary Find many files
 */
export const getFindManyFilesUrl = (params?: FindManyFilesParams) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0 ? `/files?${stringifiedParams}` : `/files`
}

export const findManyFiles = async (
  params?: FindManyFilesParams,
  options?: RequestInit
): Promise<FindManyFiles200> => {
  return customFetch<FindManyFiles200>(getFindManyFilesUrl(params), {
    ...options,
    method: 'GET'
  })
}

export const getFindManyFilesQueryKey = (params?: FindManyFilesParams) => {
  return [`/files`, ...(params ? [params] : [])] as const
}

export const getFindManyFilesSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof findManyFiles>>,
  TError = unknown
>(
  params?: FindManyFilesParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyFiles>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindManyFilesQueryKey(params)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof findManyFiles>>> = ({
    signal
  }) => findManyFiles(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof findManyFiles>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindManyFilesSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof findManyFiles>>
>
export type FindManyFilesSuspenseQueryError = unknown

export function useFindManyFilesSuspense<
  TData = Awaited<ReturnType<typeof findManyFiles>>,
  TError = unknown
>(
  params: undefined | FindManyFilesParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyFiles>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyFilesSuspense<
  TData = Awaited<ReturnType<typeof findManyFiles>>,
  TError = unknown
>(
  params?: FindManyFilesParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyFiles>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyFilesSuspense<
  TData = Awaited<ReturnType<typeof findManyFiles>>,
  TError = unknown
>(
  params?: FindManyFilesParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyFiles>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find many files
 */

export function useFindManyFilesSuspense<
  TData = Awaited<ReturnType<typeof findManyFiles>>,
  TError = unknown
>(
  params?: FindManyFilesParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyFiles>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getFindManyFilesSuspenseQueryOptions(params, options)

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Delete a file
 * @summary Delete a file
 */
export const getDeleteFileUrl = (id: string | undefined | null) => {
  return `/files/${id}`
}

export const deleteFile = async (
  id: string | undefined | null,
  options?: RequestInit
): Promise<DeleteFile200> => {
  return customFetch<DeleteFile200>(getDeleteFileUrl(id), {
    ...options,
    method: 'DELETE'
  })
}

export const getDeleteFileMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteFile>>,
    TError,
    { id: string | undefined | null },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteFile>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationKey = ['deleteFile']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteFile>>,
    { id: string | undefined | null }
  > = (props) => {
    const { id } = props ?? {}

    return deleteFile(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteFileMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteFile>>
>

export type DeleteFileMutationError = NotFoundResponse

/**
 * @summary Delete a file
 */
export const useDeleteFile = <TError = NotFoundResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteFile>>,
      TError,
      { id: string | undefined | null },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof deleteFile>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationOptions = getDeleteFileMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Find a file
 * @summary Find a file
 */
export const getGetOneFileUrl = (id: string | undefined | null) => {
  return `/files/${id}`
}

export const getOneFile = async (
  id: string | undefined | null,
  options?: RequestInit
): Promise<GetOneFile200> => {
  return customFetch<GetOneFile200>(getGetOneFileUrl(id), {
    ...options,
    method: 'GET'
  })
}

export const getGetOneFileQueryKey = (id: string | undefined | null) => {
  return [`/files/${id}`] as const
}

export const getGetOneFileSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getOneFile>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneFile>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetOneFileQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneFile>>> = ({
    signal
  }) => getOneFile(id, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getOneFile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOneFileSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOneFile>>
>
export type GetOneFileSuspenseQueryError = NotFoundResponse

export function useGetOneFileSuspense<
  TData = Awaited<ReturnType<typeof getOneFile>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneFile>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneFileSuspense<
  TData = Awaited<ReturnType<typeof getOneFile>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneFile>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneFileSuspense<
  TData = Awaited<ReturnType<typeof getOneFile>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneFile>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find a file
 */

export function useGetOneFileSuspense<
  TData = Awaited<ReturnType<typeof getOneFile>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneFile>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetOneFileSuspenseQueryOptions(id, options)

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Update a file
 * @summary Update a file
 */
export const getUpdateFileUrl = (id: string | undefined | null) => {
  return `/files/${id}`
}

export const updateFile = async (
  id: string | undefined | null,
  updateFileBody: UpdateFileBody,
  options?: RequestInit
): Promise<UpdateFile200> => {
  return customFetch<UpdateFile200>(getUpdateFileUrl(id), {
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(updateFileBody)
  })
}

export const getUpdateFileMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateFile>>,
    TError,
    { id: string | undefined | null; data: UpdateFileBody },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateFile>>,
  TError,
  { id: string | undefined | null; data: UpdateFileBody },
  TContext
> => {
  const mutationKey = ['updateFile']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateFile>>,
    { id: string | undefined | null; data: UpdateFileBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateFile(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateFileMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateFile>>
>
export type UpdateFileMutationBody = UpdateFileBody
export type UpdateFileMutationError = NotFoundResponse

/**
 * @summary Update a file
 */
export const useUpdateFile = <TError = NotFoundResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateFile>>,
      TError,
      { id: string | undefined | null; data: UpdateFileBody },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof updateFile>>,
  TError,
  { id: string | undefined | null; data: UpdateFileBody },
  TContext
> => {
  const mutationOptions = getUpdateFileMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
