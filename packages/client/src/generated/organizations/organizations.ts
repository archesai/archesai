/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v1
 */
import type {
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'

import { useMutation, useSuspenseQuery } from '@tanstack/react-query'

import type {
  CreateOrganization201,
  CreateOrganizationBody,
  DeleteOrganization200,
  FindManyOrganizations200,
  FindManyOrganizationsParams,
  GetOneOrganization200,
  NotFoundResponse,
  UpdateOrganization200,
  UpdateOrganizationBody
} from '../orval.schemas'

import { customFetch } from '../../fetcher'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Create a new organization
 * @summary Create a new organization
 */
export const getCreateOrganizationUrl = () => {
  return `/organizations`
}

export const createOrganization = async (
  createOrganizationBody: CreateOrganizationBody,
  options?: RequestInit
): Promise<CreateOrganization201> => {
  return customFetch<CreateOrganization201>(getCreateOrganizationUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createOrganizationBody)
  })
}

export const getCreateOrganizationMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createOrganization>>,
    TError,
    { data: CreateOrganizationBody },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createOrganization>>,
  TError,
  { data: CreateOrganizationBody },
  TContext
> => {
  const mutationKey = ['createOrganization']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createOrganization>>,
    { data: CreateOrganizationBody }
  > = (props) => {
    const { data } = props ?? {}

    return createOrganization(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateOrganizationMutationResult = NonNullable<
  Awaited<ReturnType<typeof createOrganization>>
>
export type CreateOrganizationMutationBody = CreateOrganizationBody
export type CreateOrganizationMutationError = unknown

/**
 * @summary Create a new organization
 */
export const useCreateOrganization = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createOrganization>>,
      TError,
      { data: CreateOrganizationBody },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof createOrganization>>,
  TError,
  { data: CreateOrganizationBody },
  TContext
> => {
  const mutationOptions = getCreateOrganizationMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Find many organizations
 * @summary Find many organizations
 */
export const getFindManyOrganizationsUrl = (
  params?: FindManyOrganizationsParams
) => {
  const normalizedParams = new URLSearchParams()

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  })

  const stringifiedParams = normalizedParams.toString()

  return stringifiedParams.length > 0 ?
      `/organizations?${stringifiedParams}`
    : `/organizations`
}

export const findManyOrganizations = async (
  params?: FindManyOrganizationsParams,
  options?: RequestInit
): Promise<FindManyOrganizations200> => {
  return customFetch<FindManyOrganizations200>(
    getFindManyOrganizationsUrl(params),
    {
      ...options,
      method: 'GET'
    }
  )
}

export const getFindManyOrganizationsQueryKey = (
  params?: FindManyOrganizationsParams
) => {
  return [`/organizations`, ...(params ? [params] : [])] as const
}

export const getFindManyOrganizationsSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof findManyOrganizations>>,
  TError = unknown
>(
  params?: FindManyOrganizationsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyOrganizations>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getFindManyOrganizationsQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof findManyOrganizations>>
  > = ({ signal }) =>
    findManyOrganizations(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof findManyOrganizations>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindManyOrganizationsSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof findManyOrganizations>>
>
export type FindManyOrganizationsSuspenseQueryError = unknown

export function useFindManyOrganizationsSuspense<
  TData = Awaited<ReturnType<typeof findManyOrganizations>>,
  TError = unknown
>(
  params: undefined | FindManyOrganizationsParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyOrganizations>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyOrganizationsSuspense<
  TData = Awaited<ReturnType<typeof findManyOrganizations>>,
  TError = unknown
>(
  params?: FindManyOrganizationsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyOrganizations>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyOrganizationsSuspense<
  TData = Awaited<ReturnType<typeof findManyOrganizations>>,
  TError = unknown
>(
  params?: FindManyOrganizationsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyOrganizations>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find many organizations
 */

export function useFindManyOrganizationsSuspense<
  TData = Awaited<ReturnType<typeof findManyOrganizations>>,
  TError = unknown
>(
  params?: FindManyOrganizationsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyOrganizations>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getFindManyOrganizationsSuspenseQueryOptions(
    params,
    options
  )

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Delete an organization
 * @summary Delete an organization
 */
export const getDeleteOrganizationUrl = (id: string | undefined | null) => {
  return `/organizations/${id}`
}

export const deleteOrganization = async (
  id: string | undefined | null,
  options?: RequestInit
): Promise<DeleteOrganization200> => {
  return customFetch<DeleteOrganization200>(getDeleteOrganizationUrl(id), {
    ...options,
    method: 'DELETE'
  })
}

export const getDeleteOrganizationMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteOrganization>>,
    TError,
    { id: string | undefined | null },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteOrganization>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationKey = ['deleteOrganization']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteOrganization>>,
    { id: string | undefined | null }
  > = (props) => {
    const { id } = props ?? {}

    return deleteOrganization(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteOrganizationMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteOrganization>>
>

export type DeleteOrganizationMutationError = NotFoundResponse

/**
 * @summary Delete an organization
 */
export const useDeleteOrganization = <
  TError = NotFoundResponse,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteOrganization>>,
      TError,
      { id: string | undefined | null },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof deleteOrganization>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationOptions = getDeleteOrganizationMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Find an organization
 * @summary Find an organization
 */
export const getGetOneOrganizationUrl = (id: string | undefined | null) => {
  return `/organizations/${id}`
}

export const getOneOrganization = async (
  id: string | undefined | null,
  options?: RequestInit
): Promise<GetOneOrganization200> => {
  return customFetch<GetOneOrganization200>(getGetOneOrganizationUrl(id), {
    ...options,
    method: 'GET'
  })
}

export const getGetOneOrganizationQueryKey = (
  id: string | undefined | null
) => {
  return [`/organizations/${id}`] as const
}

export const getGetOneOrganizationSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getOneOrganization>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneOrganization>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetOneOrganizationQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getOneOrganization>>
  > = ({ signal }) => getOneOrganization(id, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getOneOrganization>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOneOrganizationSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOneOrganization>>
>
export type GetOneOrganizationSuspenseQueryError = NotFoundResponse

export function useGetOneOrganizationSuspense<
  TData = Awaited<ReturnType<typeof getOneOrganization>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneOrganization>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneOrganizationSuspense<
  TData = Awaited<ReturnType<typeof getOneOrganization>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneOrganization>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneOrganizationSuspense<
  TData = Awaited<ReturnType<typeof getOneOrganization>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneOrganization>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find an organization
 */

export function useGetOneOrganizationSuspense<
  TData = Awaited<ReturnType<typeof getOneOrganization>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneOrganization>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetOneOrganizationSuspenseQueryOptions(id, options)

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Update an organization
 * @summary Update an organization
 */
export const getUpdateOrganizationUrl = (id: string | undefined | null) => {
  return `/organizations/${id}`
}

export const updateOrganization = async (
  id: string | undefined | null,
  updateOrganizationBody: UpdateOrganizationBody,
  options?: RequestInit
): Promise<UpdateOrganization200> => {
  return customFetch<UpdateOrganization200>(getUpdateOrganizationUrl(id), {
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(updateOrganizationBody)
  })
}

export const getUpdateOrganizationMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateOrganization>>,
    TError,
    { id: string | undefined | null; data: UpdateOrganizationBody },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateOrganization>>,
  TError,
  { id: string | undefined | null; data: UpdateOrganizationBody },
  TContext
> => {
  const mutationKey = ['updateOrganization']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateOrganization>>,
    { id: string | undefined | null; data: UpdateOrganizationBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateOrganization(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateOrganizationMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateOrganization>>
>
export type UpdateOrganizationMutationBody = UpdateOrganizationBody
export type UpdateOrganizationMutationError = NotFoundResponse

/**
 * @summary Update an organization
 */
export const useUpdateOrganization = <
  TError = NotFoundResponse,
  TContext = unknown
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateOrganization>>,
      TError,
      { id: string | undefined | null; data: UpdateOrganizationBody },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof updateOrganization>>,
  TError,
  { id: string | undefined | null; data: UpdateOrganizationBody },
  TContext
> => {
  const mutationOptions = getUpdateOrganizationMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
