/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v1
 */
import type {
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'

import { useMutation, useSuspenseQuery } from '@tanstack/react-query'

import type {
  CreateCheckoutSession200,
  CreateCheckoutSessionBody,
  CreatePortalBody,
  DeletePaymentMethod200,
  FindOnePaymentMethod200,
  GetPlans200,
  UpdateSubscriptionBody
} from '../orval.schemas'

import { customFetch } from '../../fetcher'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Create a checkout session
 * @summary Create a checkout session
 */
export const getCreateCheckoutSessionUrl = () => {
  return `/billing/checkout-sessions`
}

export const createCheckoutSession = async (
  createCheckoutSessionBody: CreateCheckoutSessionBody,
  options?: RequestInit
): Promise<CreateCheckoutSession200> => {
  return customFetch<CreateCheckoutSession200>(getCreateCheckoutSessionUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createCheckoutSessionBody)
  })
}

export const getCreateCheckoutSessionMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCheckoutSession>>,
    TError,
    { data: CreateCheckoutSessionBody },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createCheckoutSession>>,
  TError,
  { data: CreateCheckoutSessionBody },
  TContext
> => {
  const mutationKey = ['createCheckoutSession']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createCheckoutSession>>,
    { data: CreateCheckoutSessionBody }
  > = (props) => {
    const { data } = props ?? {}

    return createCheckoutSession(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateCheckoutSessionMutationResult = NonNullable<
  Awaited<ReturnType<typeof createCheckoutSession>>
>
export type CreateCheckoutSessionMutationBody = CreateCheckoutSessionBody
export type CreateCheckoutSessionMutationError = unknown

/**
 * @summary Create a checkout session
 */
export const useCreateCheckoutSession = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createCheckoutSession>>,
      TError,
      { data: CreateCheckoutSessionBody },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof createCheckoutSession>>,
  TError,
  { data: CreateCheckoutSessionBody },
  TContext
> => {
  const mutationOptions = getCreateCheckoutSessionMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Delete a payment method
 * @summary Delete a payment method
 */
export const getDeletePaymentMethodUrl = (id: string | undefined | null) => {
  return `/billing/payment-methods/${id}`
}

export const deletePaymentMethod = async (
  id: string | undefined | null,
  options?: RequestInit
): Promise<DeletePaymentMethod200> => {
  return customFetch<DeletePaymentMethod200>(getDeletePaymentMethodUrl(id), {
    ...options,
    method: 'DELETE'
  })
}

export const getDeletePaymentMethodMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deletePaymentMethod>>,
    TError,
    { id: string | undefined | null },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof deletePaymentMethod>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationKey = ['deletePaymentMethod']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deletePaymentMethod>>,
    { id: string | undefined | null }
  > = (props) => {
    const { id } = props ?? {}

    return deletePaymentMethod(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeletePaymentMethodMutationResult = NonNullable<
  Awaited<ReturnType<typeof deletePaymentMethod>>
>

export type DeletePaymentMethodMutationError = unknown

/**
 * @summary Delete a payment method
 */
export const useDeletePaymentMethod = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deletePaymentMethod>>,
      TError,
      { id: string | undefined | null },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof deletePaymentMethod>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationOptions = getDeletePaymentMethodMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Get a payment method
 * @summary Get a payment method
 */
export const getFindOnePaymentMethodUrl = (id: string | undefined | null) => {
  return `/billing/payment-methods/${id}`
}

export const findOnePaymentMethod = async (
  id: string | undefined | null,
  options?: RequestInit
): Promise<FindOnePaymentMethod200> => {
  return customFetch<FindOnePaymentMethod200>(getFindOnePaymentMethodUrl(id), {
    ...options,
    method: 'GET'
  })
}

export const getFindOnePaymentMethodQueryKey = (
  id: string | undefined | null
) => {
  return [`/billing/payment-methods/${id}`] as const
}

export const getFindOnePaymentMethodSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof findOnePaymentMethod>>,
  TError = unknown
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findOnePaymentMethod>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindOnePaymentMethodQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof findOnePaymentMethod>>
  > = ({ signal }) => findOnePaymentMethod(id, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof findOnePaymentMethod>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindOnePaymentMethodSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof findOnePaymentMethod>>
>
export type FindOnePaymentMethodSuspenseQueryError = unknown

export function useFindOnePaymentMethodSuspense<
  TData = Awaited<ReturnType<typeof findOnePaymentMethod>>,
  TError = unknown
>(
  id: string | undefined | null,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findOnePaymentMethod>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindOnePaymentMethodSuspense<
  TData = Awaited<ReturnType<typeof findOnePaymentMethod>>,
  TError = unknown
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findOnePaymentMethod>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindOnePaymentMethodSuspense<
  TData = Awaited<ReturnType<typeof findOnePaymentMethod>>,
  TError = unknown
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findOnePaymentMethod>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get a payment method
 */

export function useFindOnePaymentMethodSuspense<
  TData = Awaited<ReturnType<typeof findOnePaymentMethod>>,
  TError = unknown
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findOnePaymentMethod>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getFindOnePaymentMethodSuspenseQueryOptions(id, options)

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Get all payment methods
 * @summary Get all payment methods
 */
export const getFindManyPaymentMethodsUrl = () => {
  return `/billing/payment-methods`
}

export const findManyPaymentMethods = async (
  options?: RequestInit
): Promise<unknown> => {
  return customFetch<unknown>(getFindManyPaymentMethodsUrl(), {
    ...options,
    method: 'GET'
  })
}

export const getFindManyPaymentMethodsQueryKey = () => {
  return [`/billing/payment-methods`] as const
}

export const getFindManyPaymentMethodsSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof findManyPaymentMethods>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof findManyPaymentMethods>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customFetch>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindManyPaymentMethodsQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof findManyPaymentMethods>>
  > = ({ signal }) => findManyPaymentMethods({ signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof findManyPaymentMethods>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindManyPaymentMethodsSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof findManyPaymentMethods>>
>
export type FindManyPaymentMethodsSuspenseQueryError = unknown

export function useFindManyPaymentMethodsSuspense<
  TData = Awaited<ReturnType<typeof findManyPaymentMethods>>,
  TError = unknown
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyPaymentMethods>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyPaymentMethodsSuspense<
  TData = Awaited<ReturnType<typeof findManyPaymentMethods>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyPaymentMethods>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyPaymentMethodsSuspense<
  TData = Awaited<ReturnType<typeof findManyPaymentMethods>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyPaymentMethods>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get all payment methods
 */

export function useFindManyPaymentMethodsSuspense<
  TData = Awaited<ReturnType<typeof findManyPaymentMethods>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyPaymentMethods>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getFindManyPaymentMethodsSuspenseQueryOptions(options)

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Get all plans
 * @summary Get all plans
 */
export const getGetPlansUrl = () => {
  return `/billing/plans`
}

export const getPlans = async (options?: RequestInit): Promise<GetPlans200> => {
  return customFetch<GetPlans200>(getGetPlansUrl(), {
    ...options,
    method: 'GET'
  })
}

export const getGetPlansQueryKey = () => {
  return [`/billing/plans`] as const
}

export const getGetPlansSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getPlans>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<Awaited<ReturnType<typeof getPlans>>, TError, TData>
  >
  request?: SecondParameter<typeof customFetch>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetPlansQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getPlans>>> = ({
    signal
  }) => getPlans({ signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getPlans>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPlansSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPlans>>
>
export type GetPlansSuspenseQueryError = unknown

export function useGetPlansSuspense<
  TData = Awaited<ReturnType<typeof getPlans>>,
  TError = unknown
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getPlans>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetPlansSuspense<
  TData = Awaited<ReturnType<typeof getPlans>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getPlans>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetPlansSuspense<
  TData = Awaited<ReturnType<typeof getPlans>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getPlans>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Get all plans
 */

export function useGetPlansSuspense<
  TData = Awaited<ReturnType<typeof getPlans>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getPlans>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetPlansSuspenseQueryOptions(options)

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Create a new portal
 * @summary Create a new portal
 */
export const getCreatePortalUrl = () => {
  return `/billing/portal`
}

export const createPortal = async (
  createPortalBody: CreatePortalBody,
  options?: RequestInit
): Promise<unknown> => {
  return customFetch<unknown>(getCreatePortalUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createPortalBody)
  })
}

export const getCreatePortalMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createPortal>>,
    TError,
    { data: CreatePortalBody },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createPortal>>,
  TError,
  { data: CreatePortalBody },
  TContext
> => {
  const mutationKey = ['createPortal']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createPortal>>,
    { data: CreatePortalBody }
  > = (props) => {
    const { data } = props ?? {}

    return createPortal(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreatePortalMutationResult = NonNullable<
  Awaited<ReturnType<typeof createPortal>>
>
export type CreatePortalMutationBody = CreatePortalBody
export type CreatePortalMutationError = unknown

/**
 * @summary Create a new portal
 */
export const useCreatePortal = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createPortal>>,
      TError,
      { data: CreatePortalBody },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof createPortal>>,
  TError,
  { data: CreatePortalBody },
  TContext
> => {
  const mutationOptions = getCreatePortalMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Cancel a subscription
 * @summary Cancel a subscription
 */
export const getCancelSubscriptionUrl = (id: string | undefined | null) => {
  return `/billing/subscriptions/${id}`
}

export const cancelSubscription = async (
  id: string | undefined | null,
  options?: RequestInit
): Promise<void> => {
  return customFetch<void>(getCancelSubscriptionUrl(id), {
    ...options,
    method: 'DELETE'
  })
}

export const getCancelSubscriptionMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof cancelSubscription>>,
    TError,
    { id: string | undefined | null },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof cancelSubscription>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationKey = ['cancelSubscription']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof cancelSubscription>>,
    { id: string | undefined | null }
  > = (props) => {
    const { id } = props ?? {}

    return cancelSubscription(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CancelSubscriptionMutationResult = NonNullable<
  Awaited<ReturnType<typeof cancelSubscription>>
>

export type CancelSubscriptionMutationError = unknown

/**
 * @summary Cancel a subscription
 */
export const useCancelSubscription = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof cancelSubscription>>,
      TError,
      { id: string | undefined | null },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof cancelSubscription>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationOptions = getCancelSubscriptionMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Update a subscription
 * @summary Update a subscription
 */
export const getUpdateSubscriptionUrl = (id: string | undefined | null) => {
  return `/billing/subscriptions/${id}`
}

export const updateSubscription = async (
  id: string | undefined | null,
  updateSubscriptionBody: UpdateSubscriptionBody,
  options?: RequestInit
): Promise<void> => {
  return customFetch<void>(getUpdateSubscriptionUrl(id), {
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(updateSubscriptionBody)
  })
}

export const getUpdateSubscriptionMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateSubscription>>,
    TError,
    { id: string | undefined | null; data: UpdateSubscriptionBody },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateSubscription>>,
  TError,
  { id: string | undefined | null; data: UpdateSubscriptionBody },
  TContext
> => {
  const mutationKey = ['updateSubscription']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateSubscription>>,
    { id: string | undefined | null; data: UpdateSubscriptionBody }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateSubscription(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateSubscriptionMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateSubscription>>
>
export type UpdateSubscriptionMutationBody = UpdateSubscriptionBody
export type UpdateSubscriptionMutationError = unknown

/**
 * @summary Update a subscription
 */
export const useUpdateSubscription = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateSubscription>>,
      TError,
      { id: string | undefined | null; data: UpdateSubscriptionBody },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof updateSubscription>>,
  TError,
  { id: string | undefined | null; data: UpdateSubscriptionBody },
  TContext
> => {
  const mutationOptions = getUpdateSubscriptionMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
