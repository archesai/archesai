/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v1
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'

import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query'
import qs from 'qs'

import type {
  AccountEntityInput,
  CreateAccount201,
  CreateAccountBody,
  DeleteAccount200,
  FindManyAccounts200,
  FindManyAccountsParams,
  GetOneAccount200,
  NotFoundResponse,
  UpdateAccount200
} from '../orval.schemas'

import { customFetch } from '../../fetcher'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Create a new account
 * @summary Create a new account
 */
export const getCreateAccountUrl = () => {
  return `/accounts`
}

export const createAccount = async (
  createAccountBody: CreateAccountBody,
  options?: RequestInit
): Promise<CreateAccount201> => {
  return customFetch<CreateAccount201>(getCreateAccountUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(createAccountBody)
  })
}

export const getCreateAccountMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAccount>>,
    TError,
    { data: CreateAccountBody },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createAccount>>,
  TError,
  { data: CreateAccountBody },
  TContext
> => {
  const mutationKey = ['createAccount']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createAccount>>,
    { data: CreateAccountBody }
  > = (props) => {
    const { data } = props ?? {}

    return createAccount(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateAccountMutationResult = NonNullable<
  Awaited<ReturnType<typeof createAccount>>
>
export type CreateAccountMutationBody = CreateAccountBody
export type CreateAccountMutationError = unknown

/**
 * @summary Create a new account
 */
export const useCreateAccount = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createAccount>>,
      TError,
      { data: CreateAccountBody },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof createAccount>>,
  TError,
  { data: CreateAccountBody },
  TContext
> => {
  const mutationOptions = getCreateAccountMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Find many accounts
 * @summary Find many accounts
 */
export const getFindManyAccountsUrl = (params?: FindManyAccountsParams) => {
  const stringifiedParams = qs.stringify(params || {}, {
    skipNulls: false,
    strictNullHandling: true
  })

  return stringifiedParams.length > 0 ?
      `/accounts?${stringifiedParams}`
    : `/accounts`
}

export const findManyAccounts = async (
  params?: FindManyAccountsParams,
  options?: RequestInit
): Promise<FindManyAccounts200> => {
  return customFetch<FindManyAccounts200>(getFindManyAccountsUrl(params), {
    ...options,
    method: 'GET'
  })
}

export const getFindManyAccountsQueryKey = (
  params?: FindManyAccountsParams
) => {
  return [`/accounts`, ...(params ? [params] : [])] as const
}

export const getFindManyAccountsQueryOptions = <
  TData = Awaited<ReturnType<typeof findManyAccounts>>,
  TError = unknown
>(
  params?: FindManyAccountsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyAccounts>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindManyAccountsQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof findManyAccounts>>
  > = ({ signal }) => findManyAccounts(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof findManyAccounts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindManyAccountsQueryResult = NonNullable<
  Awaited<ReturnType<typeof findManyAccounts>>
>
export type FindManyAccountsQueryError = unknown

export function useFindManyAccounts<
  TData = Awaited<ReturnType<typeof findManyAccounts>>,
  TError = unknown
>(
  params: undefined | FindManyAccountsParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyAccounts>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof findManyAccounts>>,
          TError,
          Awaited<ReturnType<typeof findManyAccounts>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyAccounts<
  TData = Awaited<ReturnType<typeof findManyAccounts>>,
  TError = unknown
>(
  params?: FindManyAccountsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyAccounts>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof findManyAccounts>>,
          TError,
          Awaited<ReturnType<typeof findManyAccounts>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyAccounts<
  TData = Awaited<ReturnType<typeof findManyAccounts>>,
  TError = unknown
>(
  params?: FindManyAccountsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyAccounts>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find many accounts
 */

export function useFindManyAccounts<
  TData = Awaited<ReturnType<typeof findManyAccounts>>,
  TError = unknown
>(
  params?: FindManyAccountsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof findManyAccounts>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getFindManyAccountsQueryOptions(params, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getFindManyAccountsSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof findManyAccounts>>,
  TError = unknown
>(
  params?: FindManyAccountsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyAccounts>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getFindManyAccountsQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof findManyAccounts>>
  > = ({ signal }) => findManyAccounts(params, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof findManyAccounts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type FindManyAccountsSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof findManyAccounts>>
>
export type FindManyAccountsSuspenseQueryError = unknown

export function useFindManyAccountsSuspense<
  TData = Awaited<ReturnType<typeof findManyAccounts>>,
  TError = unknown
>(
  params: undefined | FindManyAccountsParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyAccounts>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyAccountsSuspense<
  TData = Awaited<ReturnType<typeof findManyAccounts>>,
  TError = unknown
>(
  params?: FindManyAccountsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyAccounts>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useFindManyAccountsSuspense<
  TData = Awaited<ReturnType<typeof findManyAccounts>>,
  TError = unknown
>(
  params?: FindManyAccountsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyAccounts>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find many accounts
 */

export function useFindManyAccountsSuspense<
  TData = Awaited<ReturnType<typeof findManyAccounts>>,
  TError = unknown
>(
  params?: FindManyAccountsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof findManyAccounts>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getFindManyAccountsSuspenseQueryOptions(params, options)

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Delete an account
 * @summary Delete an account
 */
export const getDeleteAccountUrl = (id: string | undefined | null) => {
  return `/accounts/${id}`
}

export const deleteAccount = async (
  id: string | undefined | null,
  options?: RequestInit
): Promise<DeleteAccount200> => {
  return customFetch<DeleteAccount200>(getDeleteAccountUrl(id), {
    ...options,
    method: 'DELETE'
  })
}

export const getDeleteAccountMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteAccount>>,
    TError,
    { id: string | undefined | null },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteAccount>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationKey = ['deleteAccount']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteAccount>>,
    { id: string | undefined | null }
  > = (props) => {
    const { id } = props ?? {}

    return deleteAccount(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteAccountMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteAccount>>
>

export type DeleteAccountMutationError = NotFoundResponse

/**
 * @summary Delete an account
 */
export const useDeleteAccount = <TError = NotFoundResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteAccount>>,
      TError,
      { id: string | undefined | null },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof deleteAccount>>,
  TError,
  { id: string | undefined | null },
  TContext
> => {
  const mutationOptions = getDeleteAccountMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Find an account
 * @summary Find an account
 */
export const getGetOneAccountUrl = (id: string | undefined | null) => {
  return `/accounts/${id}`
}

export const getOneAccount = async (
  id: string | undefined | null,
  options?: RequestInit
): Promise<GetOneAccount200> => {
  return customFetch<GetOneAccount200>(getGetOneAccountUrl(id), {
    ...options,
    method: 'GET'
  })
}

export const getGetOneAccountQueryKey = (id: string | undefined | null) => {
  return [`/accounts/${id}`] as const
}

export const getGetOneAccountQueryOptions = <
  TData = Awaited<ReturnType<typeof getOneAccount>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneAccount>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetOneAccountQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneAccount>>> = ({
    signal
  }) => getOneAccount(id, { signal, ...requestOptions })

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getOneAccount>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOneAccountQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOneAccount>>
>
export type GetOneAccountQueryError = NotFoundResponse

export function useGetOneAccount<
  TData = Awaited<ReturnType<typeof getOneAccount>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneAccount>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOneAccount>>,
          TError,
          Awaited<ReturnType<typeof getOneAccount>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneAccount<
  TData = Awaited<ReturnType<typeof getOneAccount>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneAccount>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getOneAccount>>,
          TError,
          Awaited<ReturnType<typeof getOneAccount>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneAccount<
  TData = Awaited<ReturnType<typeof getOneAccount>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneAccount>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find an account
 */

export function useGetOneAccount<
  TData = Awaited<ReturnType<typeof getOneAccount>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getOneAccount>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetOneAccountQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getGetOneAccountSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getOneAccount>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneAccount>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  }
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetOneAccountQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getOneAccount>>> = ({
    signal
  }) => getOneAccount(id, { signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getOneAccount>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetOneAccountSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getOneAccount>>
>
export type GetOneAccountSuspenseQueryError = NotFoundResponse

export function useGetOneAccountSuspense<
  TData = Awaited<ReturnType<typeof getOneAccount>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneAccount>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneAccountSuspense<
  TData = Awaited<ReturnType<typeof getOneAccount>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneAccount>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useGetOneAccountSuspense<
  TData = Awaited<ReturnType<typeof getOneAccount>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneAccount>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Find an account
 */

export function useGetOneAccountSuspense<
  TData = Awaited<ReturnType<typeof getOneAccount>>,
  TError = NotFoundResponse
>(
  id: string | undefined | null,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getOneAccount>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getGetOneAccountSuspenseQueryOptions(id, options)

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Update an account
 * @summary Update an account
 */
export const getUpdateAccountUrl = (id: string | undefined | null) => {
  return `/accounts/${id}`
}

export const updateAccount = async (
  id: string | undefined | null,
  accountEntityInput: AccountEntityInput,
  options?: RequestInit
): Promise<UpdateAccount200> => {
  return customFetch<UpdateAccount200>(getUpdateAccountUrl(id), {
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(accountEntityInput)
  })
}

export const getUpdateAccountMutationOptions = <
  TError = NotFoundResponse,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateAccount>>,
    TError,
    { id: string | undefined | null; data: AccountEntityInput },
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateAccount>>,
  TError,
  { id: string | undefined | null; data: AccountEntityInput },
  TContext
> => {
  const mutationKey = ['updateAccount']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateAccount>>,
    { id: string | undefined | null; data: AccountEntityInput }
  > = (props) => {
    const { id, data } = props ?? {}

    return updateAccount(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type UpdateAccountMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateAccount>>
>
export type UpdateAccountMutationBody = AccountEntityInput
export type UpdateAccountMutationError = NotFoundResponse

/**
 * @summary Update an account
 */
export const useUpdateAccount = <TError = NotFoundResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateAccount>>,
      TError,
      { id: string | undefined | null; data: AccountEntityInput },
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof updateAccount>>,
  TError,
  { id: string | undefined | null; data: AccountEntityInput },
  TContext
> => {
  const mutationOptions = getUpdateAccountMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
