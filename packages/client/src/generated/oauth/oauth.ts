/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Arches AI API
 * The Arches AI API
 * OpenAPI spec version: v1
 */
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult
} from '@tanstack/react-query'

import { useMutation, useQuery, useSuspenseQuery } from '@tanstack/react-query'

import type { NoContentResponse } from '../orval.schemas'

import { customFetch } from '../../fetcher'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Authenticate with Firebase using OAuth
 * @summary Authenticate with Firebase
 */
export const getFirebaseUrl = () => {
  return `/oauth/firebase`
}

export const firebase = async (
  options?: RequestInit
): Promise<NoContentResponse> => {
  return customFetch<NoContentResponse>(getFirebaseUrl(), {
    ...options,
    method: 'POST'
  })
}

export const getFirebaseMutationOptions = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof firebase>>,
    TError,
    void,
    TContext
  >
  request?: SecondParameter<typeof customFetch>
}): UseMutationOptions<
  Awaited<ReturnType<typeof firebase>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ['firebase']
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        'mutationKey' in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof firebase>>,
    void
  > = () => {
    return firebase(requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type FirebaseMutationResult = NonNullable<
  Awaited<ReturnType<typeof firebase>>
>

export type FirebaseMutationError = unknown

/**
 * @summary Authenticate with Firebase
 */
export const useFirebase = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof firebase>>,
      TError,
      void,
      TContext
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof firebase>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getFirebaseMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Redirects user to Twitter for authentication.
 * @summary Redirect to Twitter OAuth
 */
export const getTwitterUrl = () => {
  return `/oauth/twitter`
}

export const twitter = async (
  options?: RequestInit
): Promise<NoContentResponse> => {
  return customFetch<NoContentResponse>(getTwitterUrl(), {
    ...options,
    method: 'GET'
  })
}

export const getTwitterQueryKey = () => {
  return [`/oauth/twitter`] as const
}

export const getTwitterQueryOptions = <
  TData = Awaited<ReturnType<typeof twitter>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof twitter>>, TError, TData>
  >
  request?: SecondParameter<typeof customFetch>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTwitterQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof twitter>>> = ({
    signal
  }) => twitter({ signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof twitter>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TwitterQueryResult = NonNullable<
  Awaited<ReturnType<typeof twitter>>
>
export type TwitterQueryError = unknown

export function useTwitter<
  TData = Awaited<ReturnType<typeof twitter>>,
  TError = unknown
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof twitter>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof twitter>>,
          TError,
          Awaited<ReturnType<typeof twitter>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useTwitter<
  TData = Awaited<ReturnType<typeof twitter>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof twitter>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof twitter>>,
          TError,
          Awaited<ReturnType<typeof twitter>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useTwitter<
  TData = Awaited<ReturnType<typeof twitter>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof twitter>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Redirect to Twitter OAuth
 */

export function useTwitter<
  TData = Awaited<ReturnType<typeof twitter>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof twitter>>, TError, TData>
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getTwitterQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getTwitterSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof twitter>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<Awaited<ReturnType<typeof twitter>>, TError, TData>
  >
  request?: SecondParameter<typeof customFetch>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTwitterQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof twitter>>> = ({
    signal
  }) => twitter({ signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof twitter>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TwitterSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof twitter>>
>
export type TwitterSuspenseQueryError = unknown

export function useTwitterSuspense<
  TData = Awaited<ReturnType<typeof twitter>>,
  TError = unknown
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof twitter>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useTwitterSuspense<
  TData = Awaited<ReturnType<typeof twitter>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof twitter>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useTwitterSuspense<
  TData = Awaited<ReturnType<typeof twitter>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof twitter>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Redirect to Twitter OAuth
 */

export function useTwitterSuspense<
  TData = Awaited<ReturnType<typeof twitter>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof twitter>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getTwitterSuspenseQueryOptions(options)

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Receives the Twitter OAuth callback after successful authentication.
 * @summary Handle Twitter OAuth callback
 */
export const getTwitterCallbackUrl = () => {
  return `/oauth/twitter/callback`
}

export const twitterCallback = async (
  options?: RequestInit
): Promise<NoContentResponse> => {
  return customFetch<NoContentResponse>(getTwitterCallbackUrl(), {
    ...options,
    method: 'GET'
  })
}

export const getTwitterCallbackQueryKey = () => {
  return [`/oauth/twitter/callback`] as const
}

export const getTwitterCallbackQueryOptions = <
  TData = Awaited<ReturnType<typeof twitterCallback>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof twitterCallback>>, TError, TData>
  >
  request?: SecondParameter<typeof customFetch>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTwitterCallbackQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof twitterCallback>>> = ({
    signal
  }) => twitterCallback({ signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof twitterCallback>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TwitterCallbackQueryResult = NonNullable<
  Awaited<ReturnType<typeof twitterCallback>>
>
export type TwitterCallbackQueryError = unknown

export function useTwitterCallback<
  TData = Awaited<ReturnType<typeof twitterCallback>>,
  TError = unknown
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof twitterCallback>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof twitterCallback>>,
          TError,
          Awaited<ReturnType<typeof twitterCallback>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useTwitterCallback<
  TData = Awaited<ReturnType<typeof twitterCallback>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof twitterCallback>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof twitterCallback>>,
          TError,
          Awaited<ReturnType<typeof twitterCallback>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useTwitterCallback<
  TData = Awaited<ReturnType<typeof twitterCallback>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof twitterCallback>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Handle Twitter OAuth callback
 */

export function useTwitterCallback<
  TData = Awaited<ReturnType<typeof twitterCallback>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof twitterCallback>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getTwitterCallbackQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

export const getTwitterCallbackSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof twitterCallback>>,
  TError = unknown
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof twitterCallback>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof customFetch>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getTwitterCallbackQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof twitterCallback>>> = ({
    signal
  }) => twitterCallback({ signal, ...requestOptions })

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof twitterCallback>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type TwitterCallbackSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof twitterCallback>>
>
export type TwitterCallbackSuspenseQueryError = unknown

export function useTwitterCallbackSuspense<
  TData = Awaited<ReturnType<typeof twitterCallback>>,
  TError = unknown
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof twitterCallback>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useTwitterCallbackSuspense<
  TData = Awaited<ReturnType<typeof twitterCallback>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof twitterCallback>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useTwitterCallbackSuspense<
  TData = Awaited<ReturnType<typeof twitterCallback>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof twitterCallback>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
/**
 * @summary Handle Twitter OAuth callback
 */

export function useTwitterCallbackSuspense<
  TData = Awaited<ReturnType<typeof twitterCallback>>,
  TError = unknown
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof twitterCallback>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof customFetch>
  },
  queryClient?: QueryClient
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getTwitterCallbackSuspenseQueryOptions(options)

  const query = useSuspenseQuery(
    queryOptions,
    queryClient
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}
